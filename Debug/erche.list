
erche.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006044  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080062dc  080062dc  000162dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006314  08006314  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006314  08006314  00016314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800631c  0800631c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800631c  0800631c  0001631c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006320  08006320  00016320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  24000010  08006334  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000284  08006334  00020284  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d8fa  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a9e  00000000  00000000  0003d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  000403d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00041388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000365d3  00000000  00000000  00042280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001422b  00000000  00000000  00078853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001618e6  00000000  00000000  0008ca7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ee364  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c8  00000000  00000000  001ee3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080062c4 	.word	0x080062c4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080062c4 	.word	0x080062c4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fe4a 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f832 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 fb20 	bl	8000c20 <MX_GPIO_Init>
  MX_TIM8_Init();
 80005e0:	f000 f96a 	bl	80008b8 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80005e4:	f000 fa38 	bl	8000a58 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 fa82 	bl	8000af0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005ec:	f000 f894 	bl	8000718 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80005f0:	f000 faca 	bl	8000b88 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80005f4:	2100      	movs	r1, #0
 80005f6:	4810      	ldr	r0, [pc, #64]	; (8000638 <main+0x68>)
 80005f8:	f003 fd76 	bl	80040e8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80005fc:	2104      	movs	r1, #4
 80005fe:	480e      	ldr	r0, [pc, #56]	; (8000638 <main+0x68>)
 8000600:	f003 fd72 	bl	80040e8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000604:	2108      	movs	r1, #8
 8000606:	480c      	ldr	r0, [pc, #48]	; (8000638 <main+0x68>)
 8000608:	f003 fd6e 	bl	80040e8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 800060c:	210c      	movs	r1, #12
 800060e:	480a      	ldr	r0, [pc, #40]	; (8000638 <main+0x68>)
 8000610:	f003 fd6a 	bl	80040e8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8000614:	2100      	movs	r1, #0
 8000616:	4809      	ldr	r0, [pc, #36]	; (800063c <main+0x6c>)
 8000618:	f003 fd66 	bl	80040e8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 800061c:	2104      	movs	r1, #4
 800061e:	4807      	ldr	r0, [pc, #28]	; (800063c <main+0x6c>)
 8000620:	f003 fd62 	bl	80040e8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 8000624:	2108      	movs	r1, #8
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <main+0x6c>)
 8000628:	f003 fd5e 	bl	80040e8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);
 800062c:	210c      	movs	r1, #12
 800062e:	4803      	ldr	r0, [pc, #12]	; (800063c <main+0x6c>)
 8000630:	f003 fd5a 	bl	80040e8 <HAL_TIM_PWM_Start>
//    HAL_UART_Receive_IT(&huart3,rx1,1000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000634:	e7fe      	b.n	8000634 <main+0x64>
 8000636:	bf00      	nop
 8000638:	240001a4 	.word	0x240001a4
 800063c:	2400002c 	.word	0x2400002c

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09c      	sub	sp, #112	; 0x70
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064a:	224c      	movs	r2, #76	; 0x4c
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f005 fe30 	bl	80062b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2220      	movs	r2, #32
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f005 fe2a 	bl	80062b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000660:	2002      	movs	r0, #2
 8000662:	f001 f935 	bl	80018d0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	4b29      	ldr	r3, [pc, #164]	; (8000710 <SystemClock_Config+0xd0>)
 800066c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066e:	4a28      	ldr	r2, [pc, #160]	; (8000710 <SystemClock_Config+0xd0>)
 8000670:	f023 0301 	bic.w	r3, r3, #1
 8000674:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000676:	4b26      	ldr	r3, [pc, #152]	; (8000710 <SystemClock_Config+0xd0>)
 8000678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <SystemClock_Config+0xd4>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000688:	4a22      	ldr	r2, [pc, #136]	; (8000714 <SystemClock_Config+0xd4>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <SystemClock_Config+0xd4>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800069c:	bf00      	nop
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <SystemClock_Config+0xd4>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006aa:	d1f8      	bne.n	800069e <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2340      	movs	r3, #64	; 0x40
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 f93f 	bl	8001944 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006cc:	f000 fb30 	bl	8000d30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	233f      	movs	r3, #63	; 0x3f
 80006d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006e4:	2340      	movs	r3, #64	; 0x40
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2101      	movs	r1, #1
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fd50 	bl	800219c <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000702:	f000 fb15 	bl	8000d30 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3770      	adds	r7, #112	; 0x70
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	58000400 	.word	0x58000400
 8000714:	58024800 	.word	0x58024800

08000718 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b09a      	sub	sp, #104	; 0x68
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000738:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
 8000748:	615a      	str	r2, [r3, #20]
 800074a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	222c      	movs	r2, #44	; 0x2c
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f005 fdae 	bl	80062b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000758:	4b55      	ldr	r3, [pc, #340]	; (80008b0 <MX_TIM1_Init+0x198>)
 800075a:	4a56      	ldr	r2, [pc, #344]	; (80008b4 <MX_TIM1_Init+0x19c>)
 800075c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 800075e:	4b54      	ldr	r3, [pc, #336]	; (80008b0 <MX_TIM1_Init+0x198>)
 8000760:	221f      	movs	r2, #31
 8000762:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	4b52      	ldr	r3, [pc, #328]	; (80008b0 <MX_TIM1_Init+0x198>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800076a:	4b51      	ldr	r3, [pc, #324]	; (80008b0 <MX_TIM1_Init+0x198>)
 800076c:	2263      	movs	r2, #99	; 0x63
 800076e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000770:	4b4f      	ldr	r3, [pc, #316]	; (80008b0 <MX_TIM1_Init+0x198>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000776:	4b4e      	ldr	r3, [pc, #312]	; (80008b0 <MX_TIM1_Init+0x198>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077c:	4b4c      	ldr	r3, [pc, #304]	; (80008b0 <MX_TIM1_Init+0x198>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000782:	484b      	ldr	r0, [pc, #300]	; (80008b0 <MX_TIM1_Init+0x198>)
 8000784:	f003 fbf8 	bl	8003f78 <HAL_TIM_Base_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800078e:	f000 facf 	bl	8000d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000796:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000798:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800079c:	4619      	mov	r1, r3
 800079e:	4844      	ldr	r0, [pc, #272]	; (80008b0 <MX_TIM1_Init+0x198>)
 80007a0:	f003 fec4 	bl	800452c <HAL_TIM_ConfigClockSource>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007aa:	f000 fac1 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ae:	4840      	ldr	r0, [pc, #256]	; (80008b0 <MX_TIM1_Init+0x198>)
 80007b0:	f003 fc39 	bl	8004026 <HAL_TIM_PWM_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80007ba:	f000 fab9 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007be:	2300      	movs	r3, #0
 80007c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007ce:	4619      	mov	r1, r3
 80007d0:	4837      	ldr	r0, [pc, #220]	; (80008b0 <MX_TIM1_Init+0x198>)
 80007d2:	f004 fbd7 	bl	8004f84 <HAL_TIMEx_MasterConfigSynchronization>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80007dc:	f000 faa8 	bl	8000d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e0:	2360      	movs	r3, #96	; 0x60
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007f4:	2300      	movs	r3, #0
 80007f6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000800:	2200      	movs	r2, #0
 8000802:	4619      	mov	r1, r3
 8000804:	482a      	ldr	r0, [pc, #168]	; (80008b0 <MX_TIM1_Init+0x198>)
 8000806:	f003 fd7d 	bl	8004304 <HAL_TIM_PWM_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000810:	f000 fa8e 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000814:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000818:	2204      	movs	r2, #4
 800081a:	4619      	mov	r1, r3
 800081c:	4824      	ldr	r0, [pc, #144]	; (80008b0 <MX_TIM1_Init+0x198>)
 800081e:	f003 fd71 	bl	8004304 <HAL_TIM_PWM_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000828:	f000 fa82 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800082c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000830:	2208      	movs	r2, #8
 8000832:	4619      	mov	r1, r3
 8000834:	481e      	ldr	r0, [pc, #120]	; (80008b0 <MX_TIM1_Init+0x198>)
 8000836:	f003 fd65 	bl	8004304 <HAL_TIM_PWM_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000840:	f000 fa76 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000844:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000848:	220c      	movs	r2, #12
 800084a:	4619      	mov	r1, r3
 800084c:	4818      	ldr	r0, [pc, #96]	; (80008b0 <MX_TIM1_Init+0x198>)
 800084e:	f003 fd59 	bl	8004304 <HAL_TIM_PWM_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000858:	f000 fa6a 	bl	8000d30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000874:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800087e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	4807      	ldr	r0, [pc, #28]	; (80008b0 <MX_TIM1_Init+0x198>)
 8000892:	f004 fc05 	bl	80050a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 800089c:	f000 fa48 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <MX_TIM1_Init+0x198>)
 80008a2:	f000 fa9f 	bl	8000de4 <HAL_TIM_MspPostInit>

}
 80008a6:	bf00      	nop
 80008a8:	3768      	adds	r7, #104	; 0x68
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	240001a4 	.word	0x240001a4
 80008b4:	40010000 	.word	0x40010000

080008b8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b09a      	sub	sp, #104	; 0x68
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
 80008e8:	615a      	str	r2, [r3, #20]
 80008ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	222c      	movs	r2, #44	; 0x2c
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f005 fcde 	bl	80062b4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80008f8:	4b55      	ldr	r3, [pc, #340]	; (8000a50 <MX_TIM8_Init+0x198>)
 80008fa:	4a56      	ldr	r2, [pc, #344]	; (8000a54 <MX_TIM8_Init+0x19c>)
 80008fc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 80008fe:	4b54      	ldr	r3, [pc, #336]	; (8000a50 <MX_TIM8_Init+0x198>)
 8000900:	223f      	movs	r2, #63	; 0x3f
 8000902:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000904:	4b52      	ldr	r3, [pc, #328]	; (8000a50 <MX_TIM8_Init+0x198>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 800090a:	4b51      	ldr	r3, [pc, #324]	; (8000a50 <MX_TIM8_Init+0x198>)
 800090c:	2263      	movs	r2, #99	; 0x63
 800090e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000910:	4b4f      	ldr	r3, [pc, #316]	; (8000a50 <MX_TIM8_Init+0x198>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000916:	4b4e      	ldr	r3, [pc, #312]	; (8000a50 <MX_TIM8_Init+0x198>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091c:	4b4c      	ldr	r3, [pc, #304]	; (8000a50 <MX_TIM8_Init+0x198>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000922:	484b      	ldr	r0, [pc, #300]	; (8000a50 <MX_TIM8_Init+0x198>)
 8000924:	f003 fb28 	bl	8003f78 <HAL_TIM_Base_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800092e:	f000 f9ff 	bl	8000d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000936:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000938:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800093c:	4619      	mov	r1, r3
 800093e:	4844      	ldr	r0, [pc, #272]	; (8000a50 <MX_TIM8_Init+0x198>)
 8000940:	f003 fdf4 	bl	800452c <HAL_TIM_ConfigClockSource>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800094a:	f000 f9f1 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800094e:	4840      	ldr	r0, [pc, #256]	; (8000a50 <MX_TIM8_Init+0x198>)
 8000950:	f003 fb69 	bl	8004026 <HAL_TIM_PWM_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800095a:	f000 f9e9 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095e:	2300      	movs	r3, #0
 8000960:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800096a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800096e:	4619      	mov	r1, r3
 8000970:	4837      	ldr	r0, [pc, #220]	; (8000a50 <MX_TIM8_Init+0x198>)
 8000972:	f004 fb07 	bl	8004f84 <HAL_TIMEx_MasterConfigSynchronization>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 800097c:	f000 f9d8 	bl	8000d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000980:	2360      	movs	r3, #96	; 0x60
 8000982:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000988:	2300      	movs	r3, #0
 800098a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800098c:	2300      	movs	r3, #0
 800098e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800099c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009a0:	2200      	movs	r2, #0
 80009a2:	4619      	mov	r1, r3
 80009a4:	482a      	ldr	r0, [pc, #168]	; (8000a50 <MX_TIM8_Init+0x198>)
 80009a6:	f003 fcad 	bl	8004304 <HAL_TIM_PWM_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 80009b0:	f000 f9be 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009b8:	2204      	movs	r2, #4
 80009ba:	4619      	mov	r1, r3
 80009bc:	4824      	ldr	r0, [pc, #144]	; (8000a50 <MX_TIM8_Init+0x198>)
 80009be:	f003 fca1 	bl	8004304 <HAL_TIM_PWM_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 80009c8:	f000 f9b2 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009d0:	2208      	movs	r2, #8
 80009d2:	4619      	mov	r1, r3
 80009d4:	481e      	ldr	r0, [pc, #120]	; (8000a50 <MX_TIM8_Init+0x198>)
 80009d6:	f003 fc95 	bl	8004304 <HAL_TIM_PWM_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 80009e0:	f000 f9a6 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009e8:	220c      	movs	r2, #12
 80009ea:	4619      	mov	r1, r3
 80009ec:	4818      	ldr	r0, [pc, #96]	; (8000a50 <MX_TIM8_Init+0x198>)
 80009ee:	f003 fc89 	bl	8004304 <HAL_TIM_PWM_ConfigChannel>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 80009f8:	f000 f99a 	bl	8000d30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4807      	ldr	r0, [pc, #28]	; (8000a50 <MX_TIM8_Init+0x198>)
 8000a32:	f004 fb35 	bl	80050a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM8_Init+0x188>
  {
    Error_Handler();
 8000a3c:	f000 f978 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000a40:	4803      	ldr	r0, [pc, #12]	; (8000a50 <MX_TIM8_Init+0x198>)
 8000a42:	f000 f9cf 	bl	8000de4 <HAL_TIM_MspPostInit>

}
 8000a46:	bf00      	nop
 8000a48:	3768      	adds	r7, #104	; 0x68
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2400002c 	.word	0x2400002c
 8000a54:	40010400 	.word	0x40010400

08000a58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a5c:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a5e:	4a23      	ldr	r2, [pc, #140]	; (8000aec <MX_USART1_UART_Init+0x94>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aa0:	4811      	ldr	r0, [pc, #68]	; (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000aa2:	f004 fb7b 	bl	800519c <HAL_UART_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000aac:	f000 f940 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000ab4:	f005 fb10 	bl	80060d8 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000abe:	f000 f937 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000ac6:	f005 fb45 	bl	8006154 <HAL_UARTEx_SetRxFifoThreshold>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ad0:	f000 f92e 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000ad6:	f005 fac6 	bl	8006066 <HAL_UARTEx_DisableFifoMode>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ae0:	f000 f926 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	24000114 	.word	0x24000114
 8000aec:	40011000 	.word	0x40011000

08000af0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <MX_USART2_UART_Init+0x90>)
 8000af6:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <MX_USART2_UART_Init+0x94>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_USART2_UART_Init+0x90>)
 8000afc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_USART2_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_USART2_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_USART2_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_USART2_UART_Init+0x90>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_USART2_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_USART2_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_USART2_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_USART2_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_USART2_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b38:	4811      	ldr	r0, [pc, #68]	; (8000b80 <MX_USART2_UART_Init+0x90>)
 8000b3a:	f004 fb2f 	bl	800519c <HAL_UART_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b44:	f000 f8f4 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <MX_USART2_UART_Init+0x90>)
 8000b4c:	f005 fac4 	bl	80060d8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b56:	f000 f8eb 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <MX_USART2_UART_Init+0x90>)
 8000b5e:	f005 faf9 	bl	8006154 <HAL_UARTEx_SetRxFifoThreshold>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b68:	f000 f8e2 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_USART2_UART_Init+0x90>)
 8000b6e:	f005 fa7a 	bl	8006066 <HAL_UARTEx_DisableFifoMode>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b78:	f000 f8da 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	240001f0 	.word	0x240001f0
 8000b84:	40004400 	.word	0x40004400

08000b88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000b8e:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <MX_USART3_UART_Init+0x94>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000b94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bd2:	f004 fae3 	bl	800519c <HAL_UART_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bdc:	f000 f8a8 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be0:	2100      	movs	r1, #0
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000be4:	f005 fa78 	bl	80060d8 <HAL_UARTEx_SetTxFifoThreshold>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bee:	f000 f89f 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4808      	ldr	r0, [pc, #32]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bf6:	f005 faad 	bl	8006154 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c00:	f000 f896 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000c06:	f005 fa2e 	bl	8006066 <HAL_UARTEx_DisableFifoMode>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f000 f88e 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	24000078 	.word	0x24000078
 8000c1c:	40004800 	.word	0x40004800

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c36:	4b3a      	ldr	r3, [pc, #232]	; (8000d20 <MX_GPIO_Init+0x100>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	4a38      	ldr	r2, [pc, #224]	; (8000d20 <MX_GPIO_Init+0x100>)
 8000c3e:	f043 0310 	orr.w	r3, r3, #16
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c46:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <MX_GPIO_Init+0x100>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c54:	4b32      	ldr	r3, [pc, #200]	; (8000d20 <MX_GPIO_Init+0x100>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	4a31      	ldr	r2, [pc, #196]	; (8000d20 <MX_GPIO_Init+0x100>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c64:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <MX_GPIO_Init+0x100>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4b2b      	ldr	r3, [pc, #172]	; (8000d20 <MX_GPIO_Init+0x100>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	4a29      	ldr	r2, [pc, #164]	; (8000d20 <MX_GPIO_Init+0x100>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c82:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <MX_GPIO_Init+0x100>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c90:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <MX_GPIO_Init+0x100>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c96:	4a22      	ldr	r2, [pc, #136]	; (8000d20 <MX_GPIO_Init+0x100>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <MX_GPIO_Init+0x100>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cae:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_GPIO_Init+0x100>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb4:	4a1a      	ldr	r2, [pc, #104]	; (8000d20 <MX_GPIO_Init+0x100>)
 8000cb6:	f043 0308 	orr.w	r3, r3, #8
 8000cba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <MX_GPIO_Init+0x100>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc4:	f003 0308 	and.w	r3, r3, #8
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ccc:	2320      	movs	r3, #32
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4811      	ldr	r0, [pc, #68]	; (8000d24 <MX_GPIO_Init+0x104>)
 8000ce0:	f000 fc46 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480b      	ldr	r0, [pc, #44]	; (8000d28 <MX_GPIO_Init+0x108>)
 8000cfa:	f000 fc39 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cfe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <MX_GPIO_Init+0x10c>)
 8000d14:	f000 fc2c 	bl	8001570 <HAL_GPIO_Init>

}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	; 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	58024400 	.word	0x58024400
 8000d24:	58021000 	.word	0x58021000
 8000d28:	58020800 	.word	0x58020800
 8000d2c:	58020400 	.word	0x58020400

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>
	...

08000d3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_MspInit+0x30>)
 8000d44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d48:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <HAL_MspInit+0x30>)
 8000d4a:	f043 0302 	orr.w	r3, r3, #2
 8000d4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_MspInit+0x30>)
 8000d54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	58024400 	.word	0x58024400

08000d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <HAL_TIM_Base_MspInit+0x68>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d10f      	bne.n	8000da2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <HAL_TIM_Base_MspInit+0x6c>)
 8000d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d88:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <HAL_TIM_Base_MspInit+0x6c>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_TIM_Base_MspInit+0x6c>)
 8000d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000da0:	e013      	b.n	8000dca <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM8)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <HAL_TIM_Base_MspInit+0x70>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d10e      	bne.n	8000dca <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_TIM_Base_MspInit+0x6c>)
 8000dae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_TIM_Base_MspInit+0x6c>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <HAL_TIM_Base_MspInit+0x6c>)
 8000dbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40010000 	.word	0x40010000
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	40010400 	.word	0x40010400

08000de4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a26      	ldr	r2, [pc, #152]	; (8000e9c <HAL_TIM_MspPostInit+0xb8>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d120      	bne.n	8000e48 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e06:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <HAL_TIM_MspPostInit+0xbc>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	4a24      	ldr	r2, [pc, #144]	; (8000ea0 <HAL_TIM_MspPostInit+0xbc>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e16:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <HAL_TIM_MspPostInit+0xbc>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	f003 0310 	and.w	r3, r3, #16
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000e24:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e36:	2301      	movs	r3, #1
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4818      	ldr	r0, [pc, #96]	; (8000ea4 <HAL_TIM_MspPostInit+0xc0>)
 8000e42:	f000 fb95 	bl	8001570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000e46:	e024      	b.n	8000e92 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM8)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a16      	ldr	r2, [pc, #88]	; (8000ea8 <HAL_TIM_MspPostInit+0xc4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d11f      	bne.n	8000e92 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <HAL_TIM_MspPostInit+0xbc>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <HAL_TIM_MspPostInit+0xbc>)
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_TIM_MspPostInit+0xbc>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000e70:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000e82:	2303      	movs	r3, #3
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4807      	ldr	r0, [pc, #28]	; (8000eac <HAL_TIM_MspPostInit+0xc8>)
 8000e8e:	f000 fb6f 	bl	8001570 <HAL_GPIO_Init>
}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40010000 	.word	0x40010000
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	58021000 	.word	0x58021000
 8000ea8:	40010400 	.word	0x40010400
 8000eac:	58020800 	.word	0x58020800

08000eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0bc      	sub	sp, #240	; 0xf0
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec8:	f107 0320 	add.w	r3, r7, #32
 8000ecc:	22bc      	movs	r2, #188	; 0xbc
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f005 f9ef 	bl	80062b4 <memset>
  if(huart->Instance==USART1)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a6d      	ldr	r2, [pc, #436]	; (8001090 <HAL_UART_MspInit+0x1e0>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d143      	bne.n	8000f68 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eea:	f107 0320 	add.w	r3, r7, #32
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 fce0 	bl	80028b4 <HAL_RCCEx_PeriphCLKConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000efa:	f7ff ff19 	bl	8000d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000efe:	4b65      	ldr	r3, [pc, #404]	; (8001094 <HAL_UART_MspInit+0x1e4>)
 8000f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f04:	4a63      	ldr	r2, [pc, #396]	; (8001094 <HAL_UART_MspInit+0x1e4>)
 8000f06:	f043 0310 	orr.w	r3, r3, #16
 8000f0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f0e:	4b61      	ldr	r3, [pc, #388]	; (8001094 <HAL_UART_MspInit+0x1e4>)
 8000f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f14:	f003 0310 	and.w	r3, r3, #16
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1c:	4b5d      	ldr	r3, [pc, #372]	; (8001094 <HAL_UART_MspInit+0x1e4>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f22:	4a5c      	ldr	r2, [pc, #368]	; (8001094 <HAL_UART_MspInit+0x1e4>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f2c:	4b59      	ldr	r3, [pc, #356]	; (8001094 <HAL_UART_MspInit+0x1e4>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
 8000f38:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f3a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f54:	2304      	movs	r3, #4
 8000f56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f5e:	4619      	mov	r1, r3
 8000f60:	484d      	ldr	r0, [pc, #308]	; (8001098 <HAL_UART_MspInit+0x1e8>)
 8000f62:	f000 fb05 	bl	8001570 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f66:	e08f      	b.n	8001088 <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a4b      	ldr	r2, [pc, #300]	; (800109c <HAL_UART_MspInit+0x1ec>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d142      	bne.n	8000ff8 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f72:	2302      	movs	r3, #2
 8000f74:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7c:	f107 0320 	add.w	r3, r7, #32
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 fc97 	bl	80028b4 <HAL_RCCEx_PeriphCLKConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000f8c:	f7ff fed0 	bl	8000d30 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f90:	4b40      	ldr	r3, [pc, #256]	; (8001094 <HAL_UART_MspInit+0x1e4>)
 8000f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f96:	4a3f      	ldr	r2, [pc, #252]	; (8001094 <HAL_UART_MspInit+0x1e4>)
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fa0:	4b3c      	ldr	r3, [pc, #240]	; (8001094 <HAL_UART_MspInit+0x1e4>)
 8000fa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b39      	ldr	r3, [pc, #228]	; (8001094 <HAL_UART_MspInit+0x1e4>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb4:	4a37      	ldr	r2, [pc, #220]	; (8001094 <HAL_UART_MspInit+0x1e4>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fbe:	4b35      	ldr	r3, [pc, #212]	; (8001094 <HAL_UART_MspInit+0x1e4>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fcc:	230c      	movs	r3, #12
 8000fce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fee:	4619      	mov	r1, r3
 8000ff0:	482b      	ldr	r0, [pc, #172]	; (80010a0 <HAL_UART_MspInit+0x1f0>)
 8000ff2:	f000 fabd 	bl	8001570 <HAL_GPIO_Init>
}
 8000ff6:	e047      	b.n	8001088 <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART3)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a29      	ldr	r2, [pc, #164]	; (80010a4 <HAL_UART_MspInit+0x1f4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d142      	bne.n	8001088 <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001002:	2302      	movs	r3, #2
 8001004:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001006:	2300      	movs	r3, #0
 8001008:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100c:	f107 0320 	add.w	r3, r7, #32
 8001010:	4618      	mov	r0, r3
 8001012:	f001 fc4f 	bl	80028b4 <HAL_RCCEx_PeriphCLKConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_UART_MspInit+0x170>
      Error_Handler();
 800101c:	f7ff fe88 	bl	8000d30 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_UART_MspInit+0x1e4>)
 8001022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <HAL_UART_MspInit+0x1e4>)
 8001028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800102c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_UART_MspInit+0x1e4>)
 8001032:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_UART_MspInit+0x1e4>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001044:	4a13      	ldr	r2, [pc, #76]	; (8001094 <HAL_UART_MspInit+0x1e4>)
 8001046:	f043 0308 	orr.w	r3, r3, #8
 800104a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_UART_MspInit+0x1e4>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800105c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001060:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001076:	2307      	movs	r3, #7
 8001078:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001080:	4619      	mov	r1, r3
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <HAL_UART_MspInit+0x1f8>)
 8001084:	f000 fa74 	bl	8001570 <HAL_GPIO_Init>
}
 8001088:	bf00      	nop
 800108a:	37f0      	adds	r7, #240	; 0xf0
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40011000 	.word	0x40011000
 8001094:	58024400 	.word	0x58024400
 8001098:	58020400 	.word	0x58020400
 800109c:	40004400 	.word	0x40004400
 80010a0:	58020000 	.word	0x58020000
 80010a4:	40004800 	.word	0x40004800
 80010a8:	58020c00 	.word	0x58020c00

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <NMI_Handler+0x4>

080010b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <MemManage_Handler+0x4>

080010be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <UsageFault_Handler+0x4>

080010ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f8:	f000 f92a 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001104:	4b39      	ldr	r3, [pc, #228]	; (80011ec <SystemInit+0xec>)
 8001106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110a:	4a38      	ldr	r2, [pc, #224]	; (80011ec <SystemInit+0xec>)
 800110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001114:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <SystemInit+0xf0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 030f 	and.w	r3, r3, #15
 800111c:	2b06      	cmp	r3, #6
 800111e:	d807      	bhi.n	8001130 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001120:	4b33      	ldr	r3, [pc, #204]	; (80011f0 <SystemInit+0xf0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f023 030f 	bic.w	r3, r3, #15
 8001128:	4a31      	ldr	r2, [pc, #196]	; (80011f0 <SystemInit+0xf0>)
 800112a:	f043 0307 	orr.w	r3, r3, #7
 800112e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <SystemInit+0xf4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a2f      	ldr	r2, [pc, #188]	; (80011f4 <SystemInit+0xf4>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <SystemInit+0xf4>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <SystemInit+0xf4>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	492b      	ldr	r1, [pc, #172]	; (80011f4 <SystemInit+0xf4>)
 8001148:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <SystemInit+0xf8>)
 800114a:	4013      	ands	r3, r2
 800114c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800114e:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <SystemInit+0xf0>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	2b00      	cmp	r3, #0
 8001158:	d007      	beq.n	800116a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800115a:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <SystemInit+0xf0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 030f 	bic.w	r3, r3, #15
 8001162:	4a23      	ldr	r2, [pc, #140]	; (80011f0 <SystemInit+0xf0>)
 8001164:	f043 0307 	orr.w	r3, r3, #7
 8001168:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800116a:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <SystemInit+0xf4>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <SystemInit+0xf4>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <SystemInit+0xf4>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <SystemInit+0xf4>)
 800117e:	4a1f      	ldr	r2, [pc, #124]	; (80011fc <SystemInit+0xfc>)
 8001180:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <SystemInit+0xf4>)
 8001184:	4a1e      	ldr	r2, [pc, #120]	; (8001200 <SystemInit+0x100>)
 8001186:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <SystemInit+0xf4>)
 800118a:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <SystemInit+0x104>)
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <SystemInit+0xf4>)
 8001190:	2200      	movs	r2, #0
 8001192:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <SystemInit+0xf4>)
 8001196:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <SystemInit+0x104>)
 8001198:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <SystemInit+0xf4>)
 800119c:	2200      	movs	r2, #0
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <SystemInit+0xf4>)
 80011a2:	4a18      	ldr	r2, [pc, #96]	; (8001204 <SystemInit+0x104>)
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <SystemInit+0xf4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <SystemInit+0xf4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <SystemInit+0xf4>)
 80011b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <SystemInit+0xf4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <SystemInit+0x108>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <SystemInit+0x10c>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011ca:	d202      	bcs.n	80011d2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <SystemInit+0x110>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <SystemInit+0x114>)
 80011d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011d8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SystemInit+0xec>)
 80011dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011e0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00
 80011f0:	52002000 	.word	0x52002000
 80011f4:	58024400 	.word	0x58024400
 80011f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80011fc:	02020200 	.word	0x02020200
 8001200:	01ff0000 	.word	0x01ff0000
 8001204:	01010280 	.word	0x01010280
 8001208:	5c001000 	.word	0x5c001000
 800120c:	ffff0000 	.word	0xffff0000
 8001210:	51008108 	.word	0x51008108
 8001214:	52004000 	.word	0x52004000

08001218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001250 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800121c:	f7ff ff70 	bl	8001100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001220:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001222:	e003      	b.n	800122c <LoopCopyDataInit>

08001224 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001226:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001228:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800122a:	3104      	adds	r1, #4

0800122c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800122c:	480a      	ldr	r0, [pc, #40]	; (8001258 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001230:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001232:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001234:	d3f6      	bcc.n	8001224 <CopyDataInit>
  ldr  r2, =_sbss
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001238:	e002      	b.n	8001240 <LoopFillZerobss>

0800123a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800123a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800123c:	f842 3b04 	str.w	r3, [r2], #4

08001240 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001242:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001244:	d3f9      	bcc.n	800123a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001246:	f005 f811 	bl	800626c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124a:	f7ff f9c1 	bl	80005d0 <main>
  bx  lr    
 800124e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001250:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001254:	08006324 	.word	0x08006324
  ldr  r0, =_sdata
 8001258:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800125c:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8001260:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8001264:	24000284 	.word	0x24000284

08001268 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC3_IRQHandler>
	...

0800126c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001272:	2003      	movs	r0, #3
 8001274:	f000 f94a 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001278:	f001 f946 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 800127c:	4602      	mov	r2, r0
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_Init+0x68>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	0a1b      	lsrs	r3, r3, #8
 8001284:	f003 030f 	and.w	r3, r3, #15
 8001288:	4913      	ldr	r1, [pc, #76]	; (80012d8 <HAL_Init+0x6c>)
 800128a:	5ccb      	ldrb	r3, [r1, r3]
 800128c:	f003 031f 	and.w	r3, r3, #31
 8001290:	fa22 f303 	lsr.w	r3, r2, r3
 8001294:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <HAL_Init+0x68>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <HAL_Init+0x6c>)
 80012a0:	5cd3      	ldrb	r3, [r2, r3]
 80012a2:	f003 031f 	and.w	r3, r3, #31
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ac:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <HAL_Init+0x70>)
 80012ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012b0:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <HAL_Init+0x74>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b6:	2000      	movs	r0, #0
 80012b8:	f000 f814 	bl	80012e4 <HAL_InitTick>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e002      	b.n	80012cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012c6:	f7ff fd39 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	58024400 	.word	0x58024400
 80012d8:	080062dc 	.word	0x080062dc
 80012dc:	24000004 	.word	0x24000004
 80012e0:	24000000 	.word	0x24000000

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_InitTick+0x60>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e021      	b.n	800133c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_InitTick+0x64>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_InitTick+0x60>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	fbb3 f3f1 	udiv	r3, r3, r1
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f921 	bl	8001556 <HAL_SYSTICK_Config>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e00e      	b.n	800133c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0f      	cmp	r3, #15
 8001322:	d80a      	bhi.n	800133a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f000 f8f9 	bl	8001522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <HAL_InitTick+0x68>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	e000      	b.n	800133c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2400000c 	.word	0x2400000c
 8001348:	24000000 	.word	0x24000000
 800134c:	24000008 	.word	0x24000008

08001350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x20>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x24>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_IncTick+0x24>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	2400000c 	.word	0x2400000c
 8001374:	24000280 	.word	0x24000280

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_GetTick+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	24000280 	.word	0x24000280

08001390 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <HAL_GetREVID+0x14>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	0c1b      	lsrs	r3, r3, #16
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	5c001000 	.word	0x5c001000

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <__NVIC_SetPriorityGrouping+0x40>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__NVIC_SetPriorityGrouping+0x40>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00
 80013ec:	05fa0000 	.word	0x05fa0000

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	; (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	; (800145c <__NVIC_SetPriority+0x50>)
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d8:	d301      	bcc.n	80014de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014da:	2301      	movs	r3, #1
 80014dc:	e00f      	b.n	80014fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <SysTick_Config+0x40>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e6:	210f      	movs	r1, #15
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f7ff ff8e 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <SysTick_Config+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <SysTick_Config+0x40>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff47 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff5e 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff90 	bl	8001460 <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5f 	bl	800140c <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffb2 	bl	80014c8 <SysTick_Config>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800157e:	4b89      	ldr	r3, [pc, #548]	; (80017a4 <HAL_GPIO_Init+0x234>)
 8001580:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001582:	e194      	b.n	80018ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	2101      	movs	r1, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 8186 	beq.w	80018a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d005      	beq.n	80015b4 <HAL_GPIO_Init+0x44>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d130      	bne.n	8001616 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	2203      	movs	r2, #3
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	68da      	ldr	r2, [r3, #12]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ea:	2201      	movs	r2, #1
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	091b      	lsrs	r3, r3, #4
 8001600:	f003 0201 	and.w	r2, r3, #1
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	2b03      	cmp	r3, #3
 8001620:	d017      	beq.n	8001652 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	2203      	movs	r2, #3
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d123      	bne.n	80016a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	08da      	lsrs	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3208      	adds	r2, #8
 8001666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	220f      	movs	r2, #15
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	691a      	ldr	r2, [r3, #16]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	08da      	lsrs	r2, r3, #3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3208      	adds	r2, #8
 80016a0:	69b9      	ldr	r1, [r7, #24]
 80016a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	2203      	movs	r2, #3
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 0203 	and.w	r2, r3, #3
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 80e0 	beq.w	80018a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e8:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <HAL_GPIO_Init+0x238>)
 80016ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016ee:	4a2e      	ldr	r2, [pc, #184]	; (80017a8 <HAL_GPIO_Init+0x238>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016f8:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_GPIO_Init+0x238>)
 80016fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001706:	4a29      	ldr	r2, [pc, #164]	; (80017ac <HAL_GPIO_Init+0x23c>)
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	220f      	movs	r2, #15
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a20      	ldr	r2, [pc, #128]	; (80017b0 <HAL_GPIO_Init+0x240>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d052      	beq.n	80017d8 <HAL_GPIO_Init+0x268>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a1f      	ldr	r2, [pc, #124]	; (80017b4 <HAL_GPIO_Init+0x244>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d031      	beq.n	800179e <HAL_GPIO_Init+0x22e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a1e      	ldr	r2, [pc, #120]	; (80017b8 <HAL_GPIO_Init+0x248>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d02b      	beq.n	800179a <HAL_GPIO_Init+0x22a>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a1d      	ldr	r2, [pc, #116]	; (80017bc <HAL_GPIO_Init+0x24c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d025      	beq.n	8001796 <HAL_GPIO_Init+0x226>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a1c      	ldr	r2, [pc, #112]	; (80017c0 <HAL_GPIO_Init+0x250>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d01f      	beq.n	8001792 <HAL_GPIO_Init+0x222>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a1b      	ldr	r2, [pc, #108]	; (80017c4 <HAL_GPIO_Init+0x254>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d019      	beq.n	800178e <HAL_GPIO_Init+0x21e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a1a      	ldr	r2, [pc, #104]	; (80017c8 <HAL_GPIO_Init+0x258>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d013      	beq.n	800178a <HAL_GPIO_Init+0x21a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a19      	ldr	r2, [pc, #100]	; (80017cc <HAL_GPIO_Init+0x25c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00d      	beq.n	8001786 <HAL_GPIO_Init+0x216>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a18      	ldr	r2, [pc, #96]	; (80017d0 <HAL_GPIO_Init+0x260>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d007      	beq.n	8001782 <HAL_GPIO_Init+0x212>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a17      	ldr	r2, [pc, #92]	; (80017d4 <HAL_GPIO_Init+0x264>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d101      	bne.n	800177e <HAL_GPIO_Init+0x20e>
 800177a:	2309      	movs	r3, #9
 800177c:	e02d      	b.n	80017da <HAL_GPIO_Init+0x26a>
 800177e:	230a      	movs	r3, #10
 8001780:	e02b      	b.n	80017da <HAL_GPIO_Init+0x26a>
 8001782:	2308      	movs	r3, #8
 8001784:	e029      	b.n	80017da <HAL_GPIO_Init+0x26a>
 8001786:	2307      	movs	r3, #7
 8001788:	e027      	b.n	80017da <HAL_GPIO_Init+0x26a>
 800178a:	2306      	movs	r3, #6
 800178c:	e025      	b.n	80017da <HAL_GPIO_Init+0x26a>
 800178e:	2305      	movs	r3, #5
 8001790:	e023      	b.n	80017da <HAL_GPIO_Init+0x26a>
 8001792:	2304      	movs	r3, #4
 8001794:	e021      	b.n	80017da <HAL_GPIO_Init+0x26a>
 8001796:	2303      	movs	r3, #3
 8001798:	e01f      	b.n	80017da <HAL_GPIO_Init+0x26a>
 800179a:	2302      	movs	r3, #2
 800179c:	e01d      	b.n	80017da <HAL_GPIO_Init+0x26a>
 800179e:	2301      	movs	r3, #1
 80017a0:	e01b      	b.n	80017da <HAL_GPIO_Init+0x26a>
 80017a2:	bf00      	nop
 80017a4:	58000080 	.word	0x58000080
 80017a8:	58024400 	.word	0x58024400
 80017ac:	58000400 	.word	0x58000400
 80017b0:	58020000 	.word	0x58020000
 80017b4:	58020400 	.word	0x58020400
 80017b8:	58020800 	.word	0x58020800
 80017bc:	58020c00 	.word	0x58020c00
 80017c0:	58021000 	.word	0x58021000
 80017c4:	58021400 	.word	0x58021400
 80017c8:	58021800 	.word	0x58021800
 80017cc:	58021c00 	.word	0x58021c00
 80017d0:	58022000 	.word	0x58022000
 80017d4:	58022400 	.word	0x58022400
 80017d8:	2300      	movs	r3, #0
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	f002 0203 	and.w	r2, r2, #3
 80017e0:	0092      	lsls	r2, r2, #2
 80017e2:	4093      	lsls	r3, r2
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ea:	4938      	ldr	r1, [pc, #224]	; (80018cc <HAL_GPIO_Init+0x35c>)
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	3302      	adds	r3, #2
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800181e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800184c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	3301      	adds	r3, #1
 80018ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f47f ae63 	bne.w	8001584 <HAL_GPIO_Init+0x14>
  }
}
 80018be:	bf00      	nop
 80018c0:	bf00      	nop
 80018c2:	3724      	adds	r7, #36	; 0x24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	58000400 	.word	0x58000400

080018d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_PWREx_ConfigSupply+0x70>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d00a      	beq.n	80018fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80018e4:	4b16      	ldr	r3, [pc, #88]	; (8001940 <HAL_PWREx_ConfigSupply+0x70>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d001      	beq.n	80018f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e01f      	b.n	8001936 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e01d      	b.n	8001936 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_PWREx_ConfigSupply+0x70>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	f023 0207 	bic.w	r2, r3, #7
 8001902:	490f      	ldr	r1, [pc, #60]	; (8001940 <HAL_PWREx_ConfigSupply+0x70>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4313      	orrs	r3, r2
 8001908:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800190a:	f7ff fd35 	bl	8001378 <HAL_GetTick>
 800190e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001910:	e009      	b.n	8001926 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001912:	f7ff fd31 	bl	8001378 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001920:	d901      	bls.n	8001926 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e007      	b.n	8001936 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_PWREx_ConfigSupply+0x70>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800192e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001932:	d1ee      	bne.n	8001912 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	58024800 	.word	0x58024800

08001944 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08c      	sub	sp, #48	; 0x30
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	f000 bc1c 	b.w	8002190 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 8087 	beq.w	8001a74 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001966:	4b9e      	ldr	r3, [pc, #632]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001970:	4b9b      	ldr	r3, [pc, #620]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001978:	2b10      	cmp	r3, #16
 800197a:	d007      	beq.n	800198c <HAL_RCC_OscConfig+0x48>
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	2b18      	cmp	r3, #24
 8001980:	d110      	bne.n	80019a4 <HAL_RCC_OscConfig+0x60>
 8001982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d10b      	bne.n	80019a4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198c:	4b94      	ldr	r3, [pc, #592]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d06c      	beq.n	8001a72 <HAL_RCC_OscConfig+0x12e>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d168      	bne.n	8001a72 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e3f5      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ac:	d106      	bne.n	80019bc <HAL_RCC_OscConfig+0x78>
 80019ae:	4b8c      	ldr	r3, [pc, #560]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a8b      	ldr	r2, [pc, #556]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 80019b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e02e      	b.n	8001a1a <HAL_RCC_OscConfig+0xd6>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10c      	bne.n	80019de <HAL_RCC_OscConfig+0x9a>
 80019c4:	4b86      	ldr	r3, [pc, #536]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a85      	ldr	r2, [pc, #532]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 80019ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b83      	ldr	r3, [pc, #524]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a82      	ldr	r2, [pc, #520]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 80019d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	e01d      	b.n	8001a1a <HAL_RCC_OscConfig+0xd6>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e6:	d10c      	bne.n	8001a02 <HAL_RCC_OscConfig+0xbe>
 80019e8:	4b7d      	ldr	r3, [pc, #500]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a7c      	ldr	r2, [pc, #496]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 80019ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b7a      	ldr	r3, [pc, #488]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a79      	ldr	r2, [pc, #484]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 80019fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	e00b      	b.n	8001a1a <HAL_RCC_OscConfig+0xd6>
 8001a02:	4b77      	ldr	r3, [pc, #476]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a76      	ldr	r2, [pc, #472]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b74      	ldr	r3, [pc, #464]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a73      	ldr	r2, [pc, #460]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d013      	beq.n	8001a4a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff fca9 	bl	8001378 <HAL_GetTick>
 8001a26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a2a:	f7ff fca5 	bl	8001378 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b64      	cmp	r3, #100	; 0x64
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e3a9      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a3c:	4b68      	ldr	r3, [pc, #416]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0xe6>
 8001a48:	e014      	b.n	8001a74 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fc95 	bl	8001378 <HAL_GetTick>
 8001a4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a52:	f7ff fc91 	bl	8001378 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b64      	cmp	r3, #100	; 0x64
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e395      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a64:	4b5e      	ldr	r3, [pc, #376]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f0      	bne.n	8001a52 <HAL_RCC_OscConfig+0x10e>
 8001a70:	e000      	b.n	8001a74 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a72:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80ca 	beq.w	8001c16 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a82:	4b57      	ldr	r3, [pc, #348]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a8a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a8c:	4b54      	ldr	r3, [pc, #336]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a90:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d007      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x164>
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	2b18      	cmp	r3, #24
 8001a9c:	d156      	bne.n	8001b4c <HAL_RCC_OscConfig+0x208>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d151      	bne.n	8001b4c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa8:	4b4d      	ldr	r3, [pc, #308]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x17c>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e367      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ac0:	4b47      	ldr	r3, [pc, #284]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 0219 	bic.w	r2, r3, #25
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4944      	ldr	r1, [pc, #272]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ad2:	f7ff fc51 	bl	8001378 <HAL_GetTick>
 8001ad6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ada:	f7ff fc4d 	bl	8001378 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e351      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aec:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af8:	f7ff fc4a 	bl	8001390 <HAL_GetREVID>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d817      	bhi.n	8001b36 <HAL_RCC_OscConfig+0x1f2>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	2b40      	cmp	r3, #64	; 0x40
 8001b0c:	d108      	bne.n	8001b20 <HAL_RCC_OscConfig+0x1dc>
 8001b0e:	4b34      	ldr	r3, [pc, #208]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b16:	4a32      	ldr	r2, [pc, #200]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b1e:	e07a      	b.n	8001c16 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b20:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	031b      	lsls	r3, r3, #12
 8001b2e:	492c      	ldr	r1, [pc, #176]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b34:	e06f      	b.n	8001c16 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b36:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	061b      	lsls	r3, r3, #24
 8001b44:	4926      	ldr	r1, [pc, #152]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4a:	e064      	b.n	8001c16 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d047      	beq.n	8001be4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b54:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 0219 	bic.w	r2, r3, #25
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	491f      	ldr	r1, [pc, #124]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b66:	f7ff fc07 	bl	8001378 <HAL_GetTick>
 8001b6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b6e:	f7ff fc03 	bl	8001378 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e307      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8c:	f7ff fc00 	bl	8001390 <HAL_GetREVID>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d817      	bhi.n	8001bca <HAL_RCC_OscConfig+0x286>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	2b40      	cmp	r3, #64	; 0x40
 8001ba0:	d108      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x270>
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001baa:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb0:	6053      	str	r3, [r2, #4]
 8001bb2:	e030      	b.n	8001c16 <HAL_RCC_OscConfig+0x2d2>
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	031b      	lsls	r3, r3, #12
 8001bc2:	4907      	ldr	r1, [pc, #28]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
 8001bc8:	e025      	b.n	8001c16 <HAL_RCC_OscConfig+0x2d2>
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	061b      	lsls	r3, r3, #24
 8001bd8:	4901      	ldr	r1, [pc, #4]	; (8001be0 <HAL_RCC_OscConfig+0x29c>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
 8001bde:	e01a      	b.n	8001c16 <HAL_RCC_OscConfig+0x2d2>
 8001be0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be4:	4b9e      	ldr	r3, [pc, #632]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a9d      	ldr	r2, [pc, #628]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001bea:	f023 0301 	bic.w	r3, r3, #1
 8001bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fbc2 	bl	8001378 <HAL_GetTick>
 8001bf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fbbe 	bl	8001378 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e2c2      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c0a:	4b95      	ldr	r3, [pc, #596]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80a9 	beq.w	8001d76 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c24:	4b8e      	ldr	r3, [pc, #568]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c2c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c2e:	4b8c      	ldr	r3, [pc, #560]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d007      	beq.n	8001c4a <HAL_RCC_OscConfig+0x306>
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b18      	cmp	r3, #24
 8001c3e:	d13a      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x372>
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d135      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c4a:	4b85      	ldr	r3, [pc, #532]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_RCC_OscConfig+0x31e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	2b80      	cmp	r3, #128	; 0x80
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e296      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c62:	f7ff fb95 	bl	8001390 <HAL_GetREVID>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d817      	bhi.n	8001ca0 <HAL_RCC_OscConfig+0x35c>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d108      	bne.n	8001c8a <HAL_RCC_OscConfig+0x346>
 8001c78:	4b79      	ldr	r3, [pc, #484]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001c80:	4a77      	ldr	r2, [pc, #476]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001c82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c86:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c88:	e075      	b.n	8001d76 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c8a:	4b75      	ldr	r3, [pc, #468]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	069b      	lsls	r3, r3, #26
 8001c98:	4971      	ldr	r1, [pc, #452]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c9e:	e06a      	b.n	8001d76 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ca0:	4b6f      	ldr	r3, [pc, #444]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	061b      	lsls	r3, r3, #24
 8001cae:	496c      	ldr	r1, [pc, #432]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cb4:	e05f      	b.n	8001d76 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d042      	beq.n	8001d44 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001cbe:	4b68      	ldr	r3, [pc, #416]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a67      	ldr	r2, [pc, #412]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cca:	f7ff fb55 	bl	8001378 <HAL_GetTick>
 8001cce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001cd2:	f7ff fb51 	bl	8001378 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e255      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ce4:	4b5e      	ldr	r3, [pc, #376]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cf0:	f7ff fb4e 	bl	8001390 <HAL_GetREVID>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f241 0203 	movw	r2, #4099	; 0x1003
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d817      	bhi.n	8001d2e <HAL_RCC_OscConfig+0x3ea>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	2b20      	cmp	r3, #32
 8001d04:	d108      	bne.n	8001d18 <HAL_RCC_OscConfig+0x3d4>
 8001d06:	4b56      	ldr	r3, [pc, #344]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d0e:	4a54      	ldr	r2, [pc, #336]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001d10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d14:	6053      	str	r3, [r2, #4]
 8001d16:	e02e      	b.n	8001d76 <HAL_RCC_OscConfig+0x432>
 8001d18:	4b51      	ldr	r3, [pc, #324]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	069b      	lsls	r3, r3, #26
 8001d26:	494e      	ldr	r1, [pc, #312]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
 8001d2c:	e023      	b.n	8001d76 <HAL_RCC_OscConfig+0x432>
 8001d2e:	4b4c      	ldr	r3, [pc, #304]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	061b      	lsls	r3, r3, #24
 8001d3c:	4948      	ldr	r1, [pc, #288]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60cb      	str	r3, [r1, #12]
 8001d42:	e018      	b.n	8001d76 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d44:	4b46      	ldr	r3, [pc, #280]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a45      	ldr	r2, [pc, #276]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff fb12 	bl	8001378 <HAL_GetTick>
 8001d54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d58:	f7ff fb0e 	bl	8001378 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e212      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d6a:	4b3d      	ldr	r3, [pc, #244]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d036      	beq.n	8001df0 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d019      	beq.n	8001dbe <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8a:	4b35      	ldr	r3, [pc, #212]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d8e:	4a34      	ldr	r2, [pc, #208]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff faef 	bl	8001378 <HAL_GetTick>
 8001d9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9e:	f7ff faeb 	bl	8001378 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e1ef      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001db0:	4b2b      	ldr	r3, [pc, #172]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x45a>
 8001dbc:	e018      	b.n	8001df0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dbe:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dc2:	4a27      	ldr	r2, [pc, #156]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dca:	f7ff fad5 	bl	8001378 <HAL_GetTick>
 8001dce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd2:	f7ff fad1 	bl	8001378 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e1d5      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001de4:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f0      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d039      	beq.n	8001e70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d019      	beq.n	8001e38 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001e0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e10:	f7ff fab2 	bl	8001378 <HAL_GetTick>
 8001e14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e18:	f7ff faae 	bl	8001378 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e1b2      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x4d4>
 8001e36:	e01b      	b.n	8001e70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <HAL_RCC_OscConfig+0x51c>)
 8001e3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e44:	f7ff fa98 	bl	8001378 <HAL_GetTick>
 8001e48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e4a:	e00b      	b.n	8001e64 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e4c:	f7ff fa94 	bl	8001378 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d904      	bls.n	8001e64 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e198      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
 8001e5e:	bf00      	nop
 8001e60:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e64:	4ba3      	ldr	r3, [pc, #652]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1ed      	bne.n	8001e4c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 8081 	beq.w	8001f80 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e7e:	4b9e      	ldr	r3, [pc, #632]	; (80020f8 <HAL_RCC_OscConfig+0x7b4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a9d      	ldr	r2, [pc, #628]	; (80020f8 <HAL_RCC_OscConfig+0x7b4>)
 8001e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e8a:	f7ff fa75 	bl	8001378 <HAL_GetTick>
 8001e8e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e92:	f7ff fa71 	bl	8001378 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b64      	cmp	r3, #100	; 0x64
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e175      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ea4:	4b94      	ldr	r3, [pc, #592]	; (80020f8 <HAL_RCC_OscConfig+0x7b4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x582>
 8001eb8:	4b8e      	ldr	r3, [pc, #568]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebc:	4a8d      	ldr	r2, [pc, #564]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec4:	e02d      	b.n	8001f22 <HAL_RCC_OscConfig+0x5de>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x5a4>
 8001ece:	4b89      	ldr	r3, [pc, #548]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	4a88      	ldr	r2, [pc, #544]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eda:	4b86      	ldr	r3, [pc, #536]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ede:	4a85      	ldr	r2, [pc, #532]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001ee0:	f023 0304 	bic.w	r3, r3, #4
 8001ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee6:	e01c      	b.n	8001f22 <HAL_RCC_OscConfig+0x5de>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	d10c      	bne.n	8001f0a <HAL_RCC_OscConfig+0x5c6>
 8001ef0:	4b80      	ldr	r3, [pc, #512]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef4:	4a7f      	ldr	r2, [pc, #508]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	6713      	str	r3, [r2, #112]	; 0x70
 8001efc:	4b7d      	ldr	r3, [pc, #500]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f00:	4a7c      	ldr	r2, [pc, #496]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6713      	str	r3, [r2, #112]	; 0x70
 8001f08:	e00b      	b.n	8001f22 <HAL_RCC_OscConfig+0x5de>
 8001f0a:	4b7a      	ldr	r3, [pc, #488]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0e:	4a79      	ldr	r2, [pc, #484]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	6713      	str	r3, [r2, #112]	; 0x70
 8001f16:	4b77      	ldr	r3, [pc, #476]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1a:	4a76      	ldr	r2, [pc, #472]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001f1c:	f023 0304 	bic.w	r3, r3, #4
 8001f20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d015      	beq.n	8001f56 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2a:	f7ff fa25 	bl	8001378 <HAL_GetTick>
 8001f2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7ff fa21 	bl	8001378 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e123      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f48:	4b6a      	ldr	r3, [pc, #424]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ee      	beq.n	8001f32 <HAL_RCC_OscConfig+0x5ee>
 8001f54:	e014      	b.n	8001f80 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f56:	f7ff fa0f 	bl	8001378 <HAL_GetTick>
 8001f5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7ff fa0b 	bl	8001378 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e10d      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f74:	4b5f      	ldr	r3, [pc, #380]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ee      	bne.n	8001f5e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 8102 	beq.w	800218e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f8a:	4b5a      	ldr	r3, [pc, #360]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f92:	2b18      	cmp	r3, #24
 8001f94:	f000 80bd 	beq.w	8002112 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	f040 8095 	bne.w	80020cc <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa2:	4b54      	ldr	r3, [pc, #336]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a53      	ldr	r2, [pc, #332]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001fa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fae:	f7ff f9e3 	bl	8001378 <HAL_GetTick>
 8001fb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb6:	f7ff f9df 	bl	8001378 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e0e3      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fc8:	4b4a      	ldr	r3, [pc, #296]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1f0      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd4:	4b47      	ldr	r3, [pc, #284]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001fd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd8:	4b48      	ldr	r3, [pc, #288]	; (80020fc <HAL_RCC_OscConfig+0x7b8>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	4942      	ldr	r1, [pc, #264]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	628b      	str	r3, [r1, #40]	; 0x28
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	025b      	lsls	r3, r3, #9
 8002000:	b29b      	uxth	r3, r3
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002008:	3b01      	subs	r3, #1
 800200a:	041b      	lsls	r3, r3, #16
 800200c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002016:	3b01      	subs	r3, #1
 8002018:	061b      	lsls	r3, r3, #24
 800201a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800201e:	4935      	ldr	r1, [pc, #212]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8002020:	4313      	orrs	r3, r2
 8002022:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002024:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	4a32      	ldr	r2, [pc, #200]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 800202a:	f023 0301 	bic.w	r3, r3, #1
 800202e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002030:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8002032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002034:	4b32      	ldr	r3, [pc, #200]	; (8002100 <HAL_RCC_OscConfig+0x7bc>)
 8002036:	4013      	ands	r3, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800203c:	00d2      	lsls	r2, r2, #3
 800203e:	492d      	ldr	r1, [pc, #180]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8002040:	4313      	orrs	r3, r2
 8002042:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002044:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	f023 020c 	bic.w	r2, r3, #12
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	4928      	ldr	r1, [pc, #160]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8002052:	4313      	orrs	r3, r2
 8002054:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002056:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	f023 0202 	bic.w	r2, r3, #2
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4924      	ldr	r1, [pc, #144]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8002064:	4313      	orrs	r3, r2
 8002066:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002068:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	4a21      	ldr	r2, [pc, #132]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 800206e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002072:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	4a1e      	ldr	r2, [pc, #120]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 800207a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002080:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	4a1b      	ldr	r2, [pc, #108]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8002086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800208a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	4a18      	ldr	r2, [pc, #96]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a15      	ldr	r2, [pc, #84]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 800209e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff f968 	bl	8001378 <HAL_GetTick>
 80020a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ac:	f7ff f964 	bl	8001378 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e068      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x768>
 80020ca:	e060      	b.n	800218e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a08      	ldr	r2, [pc, #32]	; (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 80020d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff f94e 	bl	8001378 <HAL_GetTick>
 80020dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020de:	e011      	b.n	8002104 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff f94a 	bl	8001378 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d90a      	bls.n	8002104 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e04e      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
 80020f2:	bf00      	nop
 80020f4:	58024400 	.word	0x58024400
 80020f8:	58024800 	.word	0x58024800
 80020fc:	fffffc0c 	.word	0xfffffc0c
 8002100:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_RCC_OscConfig+0x854>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1e7      	bne.n	80020e0 <HAL_RCC_OscConfig+0x79c>
 8002110:	e03d      	b.n	800218e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <HAL_RCC_OscConfig+0x854>)
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002118:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <HAL_RCC_OscConfig+0x854>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	2b01      	cmp	r3, #1
 8002124:	d031      	beq.n	800218a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	f003 0203 	and.w	r2, r3, #3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d12a      	bne.n	800218a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	091b      	lsrs	r3, r3, #4
 8002138:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002140:	429a      	cmp	r2, r3
 8002142:	d122      	bne.n	800218a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002150:	429a      	cmp	r2, r3
 8002152:	d11a      	bne.n	800218a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	0a5b      	lsrs	r3, r3, #9
 8002158:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002160:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d111      	bne.n	800218a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	0c1b      	lsrs	r3, r3, #16
 800216a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002172:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002174:	429a      	cmp	r2, r3
 8002176:	d108      	bne.n	800218a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	0e1b      	lsrs	r3, r3, #24
 800217c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002184:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3730      	adds	r7, #48	; 0x30
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	58024400 	.word	0x58024400

0800219c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e19c      	b.n	80024ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021b0:	4b8a      	ldr	r3, [pc, #552]	; (80023dc <HAL_RCC_ClockConfig+0x240>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d910      	bls.n	80021e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b87      	ldr	r3, [pc, #540]	; (80023dc <HAL_RCC_ClockConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 020f 	bic.w	r2, r3, #15
 80021c6:	4985      	ldr	r1, [pc, #532]	; (80023dc <HAL_RCC_ClockConfig+0x240>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	4b83      	ldr	r3, [pc, #524]	; (80023dc <HAL_RCC_ClockConfig+0x240>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e184      	b.n	80024ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d010      	beq.n	800220e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	4b7b      	ldr	r3, [pc, #492]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d908      	bls.n	800220e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021fc:	4b78      	ldr	r3, [pc, #480]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	4975      	ldr	r1, [pc, #468]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800220a:	4313      	orrs	r3, r2
 800220c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d010      	beq.n	800223c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	4b70      	ldr	r3, [pc, #448]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002226:	429a      	cmp	r2, r3
 8002228:	d908      	bls.n	800223c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800222a:	4b6d      	ldr	r3, [pc, #436]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	496a      	ldr	r1, [pc, #424]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 8002238:	4313      	orrs	r3, r2
 800223a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b00      	cmp	r3, #0
 8002246:	d010      	beq.n	800226a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699a      	ldr	r2, [r3, #24]
 800224c:	4b64      	ldr	r3, [pc, #400]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002254:	429a      	cmp	r2, r3
 8002256:	d908      	bls.n	800226a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002258:	4b61      	ldr	r3, [pc, #388]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	495e      	ldr	r1, [pc, #376]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 8002266:	4313      	orrs	r3, r2
 8002268:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b00      	cmp	r3, #0
 8002274:	d010      	beq.n	8002298 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	4b59      	ldr	r3, [pc, #356]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002282:	429a      	cmp	r2, r3
 8002284:	d908      	bls.n	8002298 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002286:	4b56      	ldr	r3, [pc, #344]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4953      	ldr	r1, [pc, #332]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 8002294:	4313      	orrs	r3, r2
 8002296:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d010      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	4b4d      	ldr	r3, [pc, #308]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d908      	bls.n	80022c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b4:	4b4a      	ldr	r3, [pc, #296]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f023 020f 	bic.w	r2, r3, #15
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4947      	ldr	r1, [pc, #284]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d055      	beq.n	800237e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80022d2:	4b43      	ldr	r3, [pc, #268]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	4940      	ldr	r1, [pc, #256]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022ec:	4b3c      	ldr	r3, [pc, #240]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d121      	bne.n	800233c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0f6      	b.n	80024ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d107      	bne.n	8002314 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002304:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d115      	bne.n	800233c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0ea      	b.n	80024ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d107      	bne.n	800232c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800231c:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d109      	bne.n	800233c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0de      	b.n	80024ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800232c:	4b2c      	ldr	r3, [pc, #176]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0d6      	b.n	80024ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800233c:	4b28      	ldr	r3, [pc, #160]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	f023 0207 	bic.w	r2, r3, #7
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4925      	ldr	r1, [pc, #148]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800234a:	4313      	orrs	r3, r2
 800234c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7ff f813 	bl	8001378 <HAL_GetTick>
 8002352:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002354:	e00a      	b.n	800236c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002356:	f7ff f80f 	bl	8001378 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0be      	b.n	80024ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236c:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	429a      	cmp	r2, r3
 800237c:	d1eb      	bne.n	8002356 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d010      	beq.n	80023ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	429a      	cmp	r2, r3
 8002398:	d208      	bcs.n	80023ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f023 020f 	bic.w	r2, r3, #15
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	490e      	ldr	r1, [pc, #56]	; (80023e0 <HAL_RCC_ClockConfig+0x244>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_RCC_ClockConfig+0x240>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d214      	bcs.n	80023e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_RCC_ClockConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 020f 	bic.w	r2, r3, #15
 80023c2:	4906      	ldr	r1, [pc, #24]	; (80023dc <HAL_RCC_ClockConfig+0x240>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <HAL_RCC_ClockConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e086      	b.n	80024ea <HAL_RCC_ClockConfig+0x34e>
 80023dc:	52002000 	.word	0x52002000
 80023e0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d010      	beq.n	8002412 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	4b3f      	ldr	r3, [pc, #252]	; (80024f4 <HAL_RCC_ClockConfig+0x358>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d208      	bcs.n	8002412 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002400:	4b3c      	ldr	r3, [pc, #240]	; (80024f4 <HAL_RCC_ClockConfig+0x358>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	4939      	ldr	r1, [pc, #228]	; (80024f4 <HAL_RCC_ClockConfig+0x358>)
 800240e:	4313      	orrs	r3, r2
 8002410:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d010      	beq.n	8002440 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	4b34      	ldr	r3, [pc, #208]	; (80024f4 <HAL_RCC_ClockConfig+0x358>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800242a:	429a      	cmp	r2, r3
 800242c:	d208      	bcs.n	8002440 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800242e:	4b31      	ldr	r3, [pc, #196]	; (80024f4 <HAL_RCC_ClockConfig+0x358>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	492e      	ldr	r1, [pc, #184]	; (80024f4 <HAL_RCC_ClockConfig+0x358>)
 800243c:	4313      	orrs	r3, r2
 800243e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b00      	cmp	r3, #0
 800244a:	d010      	beq.n	800246e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699a      	ldr	r2, [r3, #24]
 8002450:	4b28      	ldr	r3, [pc, #160]	; (80024f4 <HAL_RCC_ClockConfig+0x358>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002458:	429a      	cmp	r2, r3
 800245a:	d208      	bcs.n	800246e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800245c:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <HAL_RCC_ClockConfig+0x358>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	4922      	ldr	r1, [pc, #136]	; (80024f4 <HAL_RCC_ClockConfig+0x358>)
 800246a:	4313      	orrs	r3, r2
 800246c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b00      	cmp	r3, #0
 8002478:	d010      	beq.n	800249c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69da      	ldr	r2, [r3, #28]
 800247e:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_RCC_ClockConfig+0x358>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002486:	429a      	cmp	r2, r3
 8002488:	d208      	bcs.n	800249c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800248a:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <HAL_RCC_ClockConfig+0x358>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	4917      	ldr	r1, [pc, #92]	; (80024f4 <HAL_RCC_ClockConfig+0x358>)
 8002498:	4313      	orrs	r3, r2
 800249a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800249c:	f000 f834 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <HAL_RCC_ClockConfig+0x358>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	4912      	ldr	r1, [pc, #72]	; (80024f8 <HAL_RCC_ClockConfig+0x35c>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
 80024b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <HAL_RCC_ClockConfig+0x358>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	4a0d      	ldr	r2, [pc, #52]	; (80024f8 <HAL_RCC_ClockConfig+0x35c>)
 80024c4:	5cd3      	ldrb	r3, [r2, r3]
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
 80024d0:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <HAL_RCC_ClockConfig+0x360>)
 80024d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024d4:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <HAL_RCC_ClockConfig+0x364>)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80024da:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <HAL_RCC_ClockConfig+0x368>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe ff00 	bl	80012e4 <HAL_InitTick>
 80024e4:	4603      	mov	r3, r0
 80024e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	58024400 	.word	0x58024400
 80024f8:	080062dc 	.word	0x080062dc
 80024fc:	24000004 	.word	0x24000004
 8002500:	24000000 	.word	0x24000000
 8002504:	24000008 	.word	0x24000008

08002508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800250e:	4bb3      	ldr	r3, [pc, #716]	; (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002516:	2b18      	cmp	r3, #24
 8002518:	f200 8155 	bhi.w	80027c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800251c:	a201      	add	r2, pc, #4	; (adr r2, 8002524 <HAL_RCC_GetSysClockFreq+0x1c>)
 800251e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002522:	bf00      	nop
 8002524:	08002589 	.word	0x08002589
 8002528:	080027c7 	.word	0x080027c7
 800252c:	080027c7 	.word	0x080027c7
 8002530:	080027c7 	.word	0x080027c7
 8002534:	080027c7 	.word	0x080027c7
 8002538:	080027c7 	.word	0x080027c7
 800253c:	080027c7 	.word	0x080027c7
 8002540:	080027c7 	.word	0x080027c7
 8002544:	080025af 	.word	0x080025af
 8002548:	080027c7 	.word	0x080027c7
 800254c:	080027c7 	.word	0x080027c7
 8002550:	080027c7 	.word	0x080027c7
 8002554:	080027c7 	.word	0x080027c7
 8002558:	080027c7 	.word	0x080027c7
 800255c:	080027c7 	.word	0x080027c7
 8002560:	080027c7 	.word	0x080027c7
 8002564:	080025b5 	.word	0x080025b5
 8002568:	080027c7 	.word	0x080027c7
 800256c:	080027c7 	.word	0x080027c7
 8002570:	080027c7 	.word	0x080027c7
 8002574:	080027c7 	.word	0x080027c7
 8002578:	080027c7 	.word	0x080027c7
 800257c:	080027c7 	.word	0x080027c7
 8002580:	080027c7 	.word	0x080027c7
 8002584:	080025bb 	.word	0x080025bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002588:	4b94      	ldr	r3, [pc, #592]	; (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b00      	cmp	r3, #0
 8002592:	d009      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002594:	4b91      	ldr	r3, [pc, #580]	; (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	08db      	lsrs	r3, r3, #3
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	4a90      	ldr	r2, [pc, #576]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
 80025a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80025a6:	e111      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80025a8:	4b8d      	ldr	r3, [pc, #564]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025aa:	61bb      	str	r3, [r7, #24]
    break;
 80025ac:	e10e      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80025ae:	4b8d      	ldr	r3, [pc, #564]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025b0:	61bb      	str	r3, [r7, #24]
    break;
 80025b2:	e10b      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80025b4:	4b8c      	ldr	r3, [pc, #560]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80025b6:	61bb      	str	r3, [r7, #24]
    break;
 80025b8:	e108      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025ba:	4b88      	ldr	r3, [pc, #544]	; (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80025c4:	4b85      	ldr	r3, [pc, #532]	; (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80025d0:	4b82      	ldr	r3, [pc, #520]	; (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80025da:	4b80      	ldr	r3, [pc, #512]	; (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025de:	08db      	lsrs	r3, r3, #3
 80025e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	fb02 f303 	mul.w	r3, r2, r3
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80e1 	beq.w	80027c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b02      	cmp	r3, #2
 8002602:	f000 8083 	beq.w	800270c <HAL_RCC_GetSysClockFreq+0x204>
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2b02      	cmp	r3, #2
 800260a:	f200 80a1 	bhi.w	8002750 <HAL_RCC_GetSysClockFreq+0x248>
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x114>
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d056      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800261a:	e099      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800261c:	4b6f      	ldr	r3, [pc, #444]	; (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	2b00      	cmp	r3, #0
 8002626:	d02d      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002628:	4b6c      	ldr	r3, [pc, #432]	; (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	08db      	lsrs	r3, r3, #3
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	4a6b      	ldr	r2, [pc, #428]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
 8002638:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	ee07 3a90 	vmov	s15, r3
 8002640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800264e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002652:	4b62      	ldr	r3, [pc, #392]	; (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800265a:	ee07 3a90 	vmov	s15, r3
 800265e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002662:	ed97 6a02 	vldr	s12, [r7, #8]
 8002666:	eddf 5a61 	vldr	s11, [pc, #388]	; 80027ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800266a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800266e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800267a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002682:	e087      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	ee07 3a90 	vmov	s15, r3
 800268a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800268e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80027f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002696:	4b51      	ldr	r3, [pc, #324]	; (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800269e:	ee07 3a90 	vmov	s15, r3
 80026a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80027ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80026ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026c6:	e065      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80027f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80026d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026da:	4b40      	ldr	r3, [pc, #256]	; (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80027ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80026f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800270a:	e043      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	ee07 3a90 	vmov	s15, r3
 8002712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002716:	eddf 6a38 	vldr	s13, [pc, #224]	; 80027f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800271a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800271e:	4b2f      	ldr	r3, [pc, #188]	; (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002726:	ee07 3a90 	vmov	s15, r3
 800272a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800272e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002732:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80027ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8002736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800273a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800273e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800274e:	e021      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	ee07 3a90 	vmov	s15, r3
 8002756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800275a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80027f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800275e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002762:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276a:	ee07 3a90 	vmov	s15, r3
 800276e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002772:	ed97 6a02 	vldr	s12, [r7, #8]
 8002776:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80027ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800277a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800277e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800278a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002792:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002794:	4b11      	ldr	r3, [pc, #68]	; (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	0a5b      	lsrs	r3, r3, #9
 800279a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800279e:	3301      	adds	r3, #1
 80027a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	ee07 3a90 	vmov	s15, r3
 80027a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80027b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027b8:	ee17 3a90 	vmov	r3, s15
 80027bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80027be:	e005      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]
    break;
 80027c4:	e002      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80027c6:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027c8:	61bb      	str	r3, [r7, #24]
    break;
 80027ca:	bf00      	nop
  }

  return sysclockfreq;
 80027cc:	69bb      	ldr	r3, [r7, #24]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3724      	adds	r7, #36	; 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	58024400 	.word	0x58024400
 80027e0:	03d09000 	.word	0x03d09000
 80027e4:	003d0900 	.word	0x003d0900
 80027e8:	017d7840 	.word	0x017d7840
 80027ec:	46000000 	.word	0x46000000
 80027f0:	4c742400 	.word	0x4c742400
 80027f4:	4a742400 	.word	0x4a742400
 80027f8:	4bbebc20 	.word	0x4bbebc20

080027fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002802:	f7ff fe81 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 8002806:	4602      	mov	r2, r0
 8002808:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_RCC_GetHCLKFreq+0x50>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	0a1b      	lsrs	r3, r3, #8
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	490f      	ldr	r1, [pc, #60]	; (8002850 <HAL_RCC_GetHCLKFreq+0x54>)
 8002814:	5ccb      	ldrb	r3, [r1, r3]
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	fa22 f303 	lsr.w	r3, r2, r3
 800281e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_RCC_GetHCLKFreq+0x50>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f003 030f 	and.w	r3, r3, #15
 8002828:	4a09      	ldr	r2, [pc, #36]	; (8002850 <HAL_RCC_GetHCLKFreq+0x54>)
 800282a:	5cd3      	ldrb	r3, [r2, r3]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	fa22 f303 	lsr.w	r3, r2, r3
 8002836:	4a07      	ldr	r2, [pc, #28]	; (8002854 <HAL_RCC_GetHCLKFreq+0x58>)
 8002838:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800283a:	4a07      	ldr	r2, [pc, #28]	; (8002858 <HAL_RCC_GetHCLKFreq+0x5c>)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <HAL_RCC_GetHCLKFreq+0x58>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	58024400 	.word	0x58024400
 8002850:	080062dc 	.word	0x080062dc
 8002854:	24000004 	.word	0x24000004
 8002858:	24000000 	.word	0x24000000

0800285c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002860:	f7ff ffcc 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002864:	4602      	mov	r2, r0
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4904      	ldr	r1, [pc, #16]	; (8002884 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002872:	5ccb      	ldrb	r3, [r1, r3]
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}
 8002880:	58024400 	.word	0x58024400
 8002884:	080062dc 	.word	0x080062dc

08002888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800288c:	f7ff ffb6 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4904      	ldr	r1, [pc, #16]	; (80028b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	58024400 	.word	0x58024400
 80028b0:	080062dc 	.word	0x080062dc

080028b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028bc:	2300      	movs	r3, #0
 80028be:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028c0:	2300      	movs	r3, #0
 80028c2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d03f      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028d8:	d02a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028de:	d824      	bhi.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028e4:	d018      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028ea:	d81e      	bhi.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f4:	d007      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028f6:	e018      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028f8:	4bab      	ldr	r3, [pc, #684]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	4aaa      	ldr	r2, [pc, #680]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002902:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002904:	e015      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3304      	adds	r3, #4
 800290a:	2102      	movs	r1, #2
 800290c:	4618      	mov	r0, r3
 800290e:	f001 f9cf 	bl	8003cb0 <RCCEx_PLL2_Config>
 8002912:	4603      	mov	r3, r0
 8002914:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002916:	e00c      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3324      	adds	r3, #36	; 0x24
 800291c:	2102      	movs	r1, #2
 800291e:	4618      	mov	r0, r3
 8002920:	f001 fa78 	bl	8003e14 <RCCEx_PLL3_Config>
 8002924:	4603      	mov	r3, r0
 8002926:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002928:	e003      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	75fb      	strb	r3, [r7, #23]
      break;
 800292e:	e000      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002930:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002932:	7dfb      	ldrb	r3, [r7, #23]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002938:	4b9b      	ldr	r3, [pc, #620]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800293a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002944:	4998      	ldr	r1, [pc, #608]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002946:	4313      	orrs	r3, r2
 8002948:	650b      	str	r3, [r1, #80]	; 0x50
 800294a:	e001      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d03d      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002960:	2b04      	cmp	r3, #4
 8002962:	d826      	bhi.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002964:	a201      	add	r2, pc, #4	; (adr r2, 800296c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296a:	bf00      	nop
 800296c:	08002981 	.word	0x08002981
 8002970:	0800298f 	.word	0x0800298f
 8002974:	080029a1 	.word	0x080029a1
 8002978:	080029b9 	.word	0x080029b9
 800297c:	080029b9 	.word	0x080029b9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002980:	4b89      	ldr	r3, [pc, #548]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	4a88      	ldr	r2, [pc, #544]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800298c:	e015      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3304      	adds	r3, #4
 8002992:	2100      	movs	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f001 f98b 	bl	8003cb0 <RCCEx_PLL2_Config>
 800299a:	4603      	mov	r3, r0
 800299c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800299e:	e00c      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3324      	adds	r3, #36	; 0x24
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f001 fa34 	bl	8003e14 <RCCEx_PLL3_Config>
 80029ac:	4603      	mov	r3, r0
 80029ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029b0:	e003      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	75fb      	strb	r3, [r7, #23]
      break;
 80029b6:	e000      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80029b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d109      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029c0:	4b79      	ldr	r3, [pc, #484]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c4:	f023 0207 	bic.w	r2, r3, #7
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029cc:	4976      	ldr	r1, [pc, #472]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	650b      	str	r3, [r1, #80]	; 0x50
 80029d2:	e001      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d042      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ec:	d02b      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80029ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f2:	d825      	bhi.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80029f4:	2bc0      	cmp	r3, #192	; 0xc0
 80029f6:	d028      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80029f8:	2bc0      	cmp	r3, #192	; 0xc0
 80029fa:	d821      	bhi.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80029fc:	2b80      	cmp	r3, #128	; 0x80
 80029fe:	d016      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002a00:	2b80      	cmp	r3, #128	; 0x80
 8002a02:	d81d      	bhi.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002a08:	2b40      	cmp	r3, #64	; 0x40
 8002a0a:	d007      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002a0c:	e018      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a0e:	4b66      	ldr	r3, [pc, #408]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	4a65      	ldr	r2, [pc, #404]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a1a:	e017      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f001 f944 	bl	8003cb0 <RCCEx_PLL2_Config>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a2c:	e00e      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3324      	adds	r3, #36	; 0x24
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 f9ed 	bl	8003e14 <RCCEx_PLL3_Config>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a3e:	e005      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	75fb      	strb	r3, [r7, #23]
      break;
 8002a44:	e002      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002a46:	bf00      	nop
 8002a48:	e000      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002a4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a52:	4b55      	ldr	r3, [pc, #340]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a56:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5e:	4952      	ldr	r1, [pc, #328]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	650b      	str	r3, [r1, #80]	; 0x50
 8002a64:	e001      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a66:	7dfb      	ldrb	r3, [r7, #23]
 8002a68:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d049      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a80:	d030      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002a82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a86:	d82a      	bhi.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002a88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002a8c:	d02c      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002a8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002a92:	d824      	bhi.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a98:	d018      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a9e:	d81e      	bhi.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002aa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002aa8:	d007      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002aaa:	e018      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aac:	4b3e      	ldr	r3, [pc, #248]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	4a3d      	ldr	r2, [pc, #244]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ab8:	e017      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3304      	adds	r3, #4
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f001 f8f5 	bl	8003cb0 <RCCEx_PLL2_Config>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002aca:	e00e      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3324      	adds	r3, #36	; 0x24
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f001 f99e 	bl	8003e14 <RCCEx_PLL3_Config>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002adc:	e005      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ae2:	e002      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002ae4:	bf00      	nop
 8002ae6:	e000      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002af0:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002afe:	492a      	ldr	r1, [pc, #168]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	658b      	str	r3, [r1, #88]	; 0x58
 8002b04:	e001      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
 8002b08:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d04c      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b20:	d030      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002b22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b26:	d82a      	bhi.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b2c:	d02c      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002b2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b32:	d824      	bhi.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b38:	d018      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002b3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b3e:	d81e      	bhi.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b48:	d007      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002b4a:	e018      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b4c:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	4a15      	ldr	r2, [pc, #84]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b58:	e017      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f001 f8a5 	bl	8003cb0 <RCCEx_PLL2_Config>
 8002b66:	4603      	mov	r3, r0
 8002b68:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002b6a:	e00e      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3324      	adds	r3, #36	; 0x24
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f001 f94e 	bl	8003e14 <RCCEx_PLL3_Config>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b7c:	e005      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	75fb      	strb	r3, [r7, #23]
      break;
 8002b82:	e002      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002b84:	bf00      	nop
 8002b86:	e000      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002b88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b8a:	7dfb      	ldrb	r3, [r7, #23]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10d      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b94:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b9e:	4902      	ldr	r1, [pc, #8]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	658b      	str	r3, [r1, #88]	; 0x58
 8002ba4:	e004      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002ba6:	bf00      	nop
 8002ba8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bac:	7dfb      	ldrb	r3, [r7, #23]
 8002bae:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d032      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc0:	2b30      	cmp	r3, #48	; 0x30
 8002bc2:	d01c      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002bc4:	2b30      	cmp	r3, #48	; 0x30
 8002bc6:	d817      	bhi.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d00c      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d813      	bhi.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d016      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d10f      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bd8:	4baf      	ldr	r3, [pc, #700]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	4aae      	ldr	r2, [pc, #696]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002be4:	e00e      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3304      	adds	r3, #4
 8002bea:	2102      	movs	r1, #2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f001 f85f 	bl	8003cb0 <RCCEx_PLL2_Config>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002bf6:	e005      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8002bfc:	e002      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002bfe:	bf00      	nop
 8002c00:	e000      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002c02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c04:	7dfb      	ldrb	r3, [r7, #23]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c0a:	4ba3      	ldr	r3, [pc, #652]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c16:	49a0      	ldr	r1, [pc, #640]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c1c:	e001      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
 8002c20:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d047      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c36:	d030      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002c38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c3c:	d82a      	bhi.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002c3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c42:	d02c      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002c44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c48:	d824      	bhi.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4e:	d018      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c54:	d81e      	bhi.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5e:	d007      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002c60:	e018      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c62:	4b8d      	ldr	r3, [pc, #564]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	4a8c      	ldr	r2, [pc, #560]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c6e:	e017      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3304      	adds	r3, #4
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 f81a 	bl	8003cb0 <RCCEx_PLL2_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c80:	e00e      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3324      	adds	r3, #36	; 0x24
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f001 f8c3 	bl	8003e14 <RCCEx_PLL3_Config>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c92:	e005      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	75fb      	strb	r3, [r7, #23]
      break;
 8002c98:	e002      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002c9a:	bf00      	nop
 8002c9c:	e000      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002c9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ca6:	4b7c      	ldr	r3, [pc, #496]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002caa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb2:	4979      	ldr	r1, [pc, #484]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	650b      	str	r3, [r1, #80]	; 0x50
 8002cb8:	e001      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
 8002cbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d049      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd2:	d02e      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd8:	d828      	bhi.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002cda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cde:	d02a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002ce0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ce4:	d822      	bhi.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002ce6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cea:	d026      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002cec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cf0:	d81c      	bhi.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002cf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cf6:	d010      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cfc:	d816      	bhi.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01d      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d06:	d111      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 ffce 	bl	8003cb0 <RCCEx_PLL2_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d18:	e012      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3324      	adds	r3, #36	; 0x24
 8002d1e:	2101      	movs	r1, #1
 8002d20:	4618      	mov	r0, r3
 8002d22:	f001 f877 	bl	8003e14 <RCCEx_PLL3_Config>
 8002d26:	4603      	mov	r3, r0
 8002d28:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d2a:	e009      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d30:	e006      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002d32:	bf00      	nop
 8002d34:	e004      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002d36:	bf00      	nop
 8002d38:	e002      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002d3a:	bf00      	nop
 8002d3c:	e000      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d46:	4b54      	ldr	r3, [pc, #336]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d4a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d52:	4951      	ldr	r1, [pc, #324]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	650b      	str	r3, [r1, #80]	; 0x50
 8002d58:	e001      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d5a:	7dfb      	ldrb	r3, [r7, #23]
 8002d5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d04b      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d74:	d02e      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002d76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d7a:	d828      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d80:	d02a      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d86:	d822      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d8c:	d026      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002d8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d92:	d81c      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d98:	d010      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d9e:	d816      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01d      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002da4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002da8:	d111      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3304      	adds	r3, #4
 8002dae:	2101      	movs	r1, #1
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 ff7d 	bl	8003cb0 <RCCEx_PLL2_Config>
 8002db6:	4603      	mov	r3, r0
 8002db8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002dba:	e012      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3324      	adds	r3, #36	; 0x24
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f001 f826 	bl	8003e14 <RCCEx_PLL3_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002dcc:	e009      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8002dd2:	e006      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002dd4:	bf00      	nop
 8002dd6:	e004      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002dd8:	bf00      	nop
 8002dda:	e002      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002ddc:	bf00      	nop
 8002dde:	e000      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002de0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002de8:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dec:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002df6:	4928      	ldr	r1, [pc, #160]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	658b      	str	r3, [r1, #88]	; 0x58
 8002dfc:	e001      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
 8002e00:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d02f      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e16:	d00e      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002e18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e1c:	d814      	bhi.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d015      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002e22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e26:	d10f      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e28:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	4a1a      	ldr	r2, [pc, #104]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e34:	e00c      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 ff37 	bl	8003cb0 <RCCEx_PLL2_Config>
 8002e42:	4603      	mov	r3, r0
 8002e44:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e46:	e003      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e4c:	e000      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8002e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d109      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e62:	490d      	ldr	r1, [pc, #52]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	650b      	str	r3, [r1, #80]	; 0x50
 8002e68:	e001      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
 8002e6c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d033      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d81c      	bhi.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002e82:	a201      	add	r2, pc, #4	; (adr r2, 8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8002e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e88:	08002ec3 	.word	0x08002ec3
 8002e8c:	08002e9d 	.word	0x08002e9d
 8002e90:	08002eab 	.word	0x08002eab
 8002e94:	08002ec3 	.word	0x08002ec3
 8002e98:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e9c:	4bb8      	ldr	r3, [pc, #736]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	4ab7      	ldr	r2, [pc, #732]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002ea8:	e00c      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3304      	adds	r3, #4
 8002eae:	2102      	movs	r1, #2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 fefd 	bl	8003cb0 <RCCEx_PLL2_Config>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002eba:	e003      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8002ec0:	e000      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002ec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002eca:	4bad      	ldr	r3, [pc, #692]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ece:	f023 0203 	bic.w	r2, r3, #3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	49aa      	ldr	r1, [pc, #680]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002edc:	e001      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
 8002ee0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8086 	beq.w	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ef0:	4ba4      	ldr	r3, [pc, #656]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4aa3      	ldr	r2, [pc, #652]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002efc:	f7fe fa3c 	bl	8001378 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f02:	e009      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f04:	f7fe fa38 	bl	8001378 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d902      	bls.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	75fb      	strb	r3, [r7, #23]
        break;
 8002f16:	e005      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f18:	4b9a      	ldr	r3, [pc, #616]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0ef      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d166      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f2a:	4b95      	ldr	r3, [pc, #596]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f34:	4053      	eors	r3, r2
 8002f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d013      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f3e:	4b90      	ldr	r3, [pc, #576]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f46:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f48:	4b8d      	ldr	r3, [pc, #564]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	4a8c      	ldr	r2, [pc, #560]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f52:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f54:	4b8a      	ldr	r3, [pc, #552]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f58:	4a89      	ldr	r2, [pc, #548]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f60:	4a87      	ldr	r2, [pc, #540]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f70:	d115      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f72:	f7fe fa01 	bl	8001378 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f78:	e00b      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7fe f9fd 	bl	8001378 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d902      	bls.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	75fb      	strb	r3, [r7, #23]
            break;
 8002f90:	e005      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f92:	4b7b      	ldr	r3, [pc, #492]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0ed      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002f9e:	7dfb      	ldrb	r3, [r7, #23]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d126      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fb2:	d10d      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002fb4:	4b72      	ldr	r3, [pc, #456]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fc2:	0919      	lsrs	r1, r3, #4
 8002fc4:	4b70      	ldr	r3, [pc, #448]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8002fc6:	400b      	ands	r3, r1
 8002fc8:	496d      	ldr	r1, [pc, #436]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	610b      	str	r3, [r1, #16]
 8002fce:	e005      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002fd0:	4b6b      	ldr	r3, [pc, #428]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	4a6a      	ldr	r2, [pc, #424]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002fda:	6113      	str	r3, [r2, #16]
 8002fdc:	4b68      	ldr	r3, [pc, #416]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fea:	4965      	ldr	r1, [pc, #404]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	670b      	str	r3, [r1, #112]	; 0x70
 8002ff0:	e004      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
 8002ff4:	75bb      	strb	r3, [r7, #22]
 8002ff6:	e001      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff8:	7dfb      	ldrb	r3, [r7, #23]
 8002ffa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d07e      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800300c:	2b28      	cmp	r3, #40	; 0x28
 800300e:	d867      	bhi.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003010:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003016:	bf00      	nop
 8003018:	080030e7 	.word	0x080030e7
 800301c:	080030e1 	.word	0x080030e1
 8003020:	080030e1 	.word	0x080030e1
 8003024:	080030e1 	.word	0x080030e1
 8003028:	080030e1 	.word	0x080030e1
 800302c:	080030e1 	.word	0x080030e1
 8003030:	080030e1 	.word	0x080030e1
 8003034:	080030e1 	.word	0x080030e1
 8003038:	080030bd 	.word	0x080030bd
 800303c:	080030e1 	.word	0x080030e1
 8003040:	080030e1 	.word	0x080030e1
 8003044:	080030e1 	.word	0x080030e1
 8003048:	080030e1 	.word	0x080030e1
 800304c:	080030e1 	.word	0x080030e1
 8003050:	080030e1 	.word	0x080030e1
 8003054:	080030e1 	.word	0x080030e1
 8003058:	080030cf 	.word	0x080030cf
 800305c:	080030e1 	.word	0x080030e1
 8003060:	080030e1 	.word	0x080030e1
 8003064:	080030e1 	.word	0x080030e1
 8003068:	080030e1 	.word	0x080030e1
 800306c:	080030e1 	.word	0x080030e1
 8003070:	080030e1 	.word	0x080030e1
 8003074:	080030e1 	.word	0x080030e1
 8003078:	080030e7 	.word	0x080030e7
 800307c:	080030e1 	.word	0x080030e1
 8003080:	080030e1 	.word	0x080030e1
 8003084:	080030e1 	.word	0x080030e1
 8003088:	080030e1 	.word	0x080030e1
 800308c:	080030e1 	.word	0x080030e1
 8003090:	080030e1 	.word	0x080030e1
 8003094:	080030e1 	.word	0x080030e1
 8003098:	080030e7 	.word	0x080030e7
 800309c:	080030e1 	.word	0x080030e1
 80030a0:	080030e1 	.word	0x080030e1
 80030a4:	080030e1 	.word	0x080030e1
 80030a8:	080030e1 	.word	0x080030e1
 80030ac:	080030e1 	.word	0x080030e1
 80030b0:	080030e1 	.word	0x080030e1
 80030b4:	080030e1 	.word	0x080030e1
 80030b8:	080030e7 	.word	0x080030e7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3304      	adds	r3, #4
 80030c0:	2101      	movs	r1, #1
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fdf4 	bl	8003cb0 <RCCEx_PLL2_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80030cc:	e00c      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3324      	adds	r3, #36	; 0x24
 80030d2:	2101      	movs	r1, #1
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 fe9d 	bl	8003e14 <RCCEx_PLL3_Config>
 80030da:	4603      	mov	r3, r0
 80030dc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80030de:	e003      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	75fb      	strb	r3, [r7, #23]
      break;
 80030e4:	e000      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80030e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030fa:	4921      	ldr	r1, [pc, #132]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	654b      	str	r3, [r1, #84]	; 0x54
 8003100:	e001      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003102:	7dfb      	ldrb	r3, [r7, #23]
 8003104:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d03e      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003116:	2b05      	cmp	r3, #5
 8003118:	d820      	bhi.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800311a:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	08003163 	.word	0x08003163
 8003124:	08003139 	.word	0x08003139
 8003128:	0800314b 	.word	0x0800314b
 800312c:	08003163 	.word	0x08003163
 8003130:	08003163 	.word	0x08003163
 8003134:	08003163 	.word	0x08003163
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3304      	adds	r3, #4
 800313c:	2101      	movs	r1, #1
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fdb6 	bl	8003cb0 <RCCEx_PLL2_Config>
 8003144:	4603      	mov	r3, r0
 8003146:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003148:	e00c      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3324      	adds	r3, #36	; 0x24
 800314e:	2101      	movs	r1, #1
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fe5f 	bl	8003e14 <RCCEx_PLL3_Config>
 8003156:	4603      	mov	r3, r0
 8003158:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800315a:	e003      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	75fb      	strb	r3, [r7, #23]
      break;
 8003160:	e000      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003162:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003164:	7dfb      	ldrb	r3, [r7, #23]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d110      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800316a:	4b05      	ldr	r3, [pc, #20]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316e:	f023 0207 	bic.w	r2, r3, #7
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003176:	4902      	ldr	r1, [pc, #8]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003178:	4313      	orrs	r3, r2
 800317a:	654b      	str	r3, [r1, #84]	; 0x54
 800317c:	e008      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800317e:	bf00      	nop
 8003180:	58024400 	.word	0x58024400
 8003184:	58024800 	.word	0x58024800
 8003188:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800318c:	7dfb      	ldrb	r3, [r7, #23]
 800318e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d039      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d820      	bhi.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80031a6:	a201      	add	r2, pc, #4	; (adr r2, 80031ac <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80031a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ac:	080031ef 	.word	0x080031ef
 80031b0:	080031c5 	.word	0x080031c5
 80031b4:	080031d7 	.word	0x080031d7
 80031b8:	080031ef 	.word	0x080031ef
 80031bc:	080031ef 	.word	0x080031ef
 80031c0:	080031ef 	.word	0x080031ef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3304      	adds	r3, #4
 80031c8:	2101      	movs	r1, #1
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fd70 	bl	8003cb0 <RCCEx_PLL2_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80031d4:	e00c      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3324      	adds	r3, #36	; 0x24
 80031da:	2101      	movs	r1, #1
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fe19 	bl	8003e14 <RCCEx_PLL3_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80031e6:	e003      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	75fb      	strb	r3, [r7, #23]
      break;
 80031ec:	e000      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80031ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031f0:	7dfb      	ldrb	r3, [r7, #23]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10a      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031f6:	4bb7      	ldr	r3, [pc, #732]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	f023 0207 	bic.w	r2, r3, #7
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	49b3      	ldr	r1, [pc, #716]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003206:	4313      	orrs	r3, r2
 8003208:	658b      	str	r3, [r1, #88]	; 0x58
 800320a:	e001      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d04b      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003226:	d02e      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800322c:	d828      	bhi.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800322e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003232:	d02a      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003238:	d822      	bhi.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800323a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800323e:	d026      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003240:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003244:	d81c      	bhi.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800324a:	d010      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800324c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003250:	d816      	bhi.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d01d      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800325a:	d111      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3304      	adds	r3, #4
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fd24 	bl	8003cb0 <RCCEx_PLL2_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800326c:	e012      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3324      	adds	r3, #36	; 0x24
 8003272:	2102      	movs	r1, #2
 8003274:	4618      	mov	r0, r3
 8003276:	f000 fdcd 	bl	8003e14 <RCCEx_PLL3_Config>
 800327a:	4603      	mov	r3, r0
 800327c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800327e:	e009      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	75fb      	strb	r3, [r7, #23]
      break;
 8003284:	e006      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003286:	bf00      	nop
 8003288:	e004      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800328a:	bf00      	nop
 800328c:	e002      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800328e:	bf00      	nop
 8003290:	e000      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003294:	7dfb      	ldrb	r3, [r7, #23]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10a      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800329a:	4b8e      	ldr	r3, [pc, #568]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a8:	498a      	ldr	r1, [pc, #552]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	654b      	str	r3, [r1, #84]	; 0x54
 80032ae:	e001      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d04b      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80032ca:	d02e      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80032cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80032d0:	d828      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80032d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d6:	d02a      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032dc:	d822      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80032de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032e2:	d026      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80032e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032e8:	d81c      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80032ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ee:	d010      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80032f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f4:	d816      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01d      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80032fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fe:	d111      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3304      	adds	r3, #4
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fcd2 	bl	8003cb0 <RCCEx_PLL2_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003310:	e012      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3324      	adds	r3, #36	; 0x24
 8003316:	2102      	movs	r1, #2
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fd7b 	bl	8003e14 <RCCEx_PLL3_Config>
 800331e:	4603      	mov	r3, r0
 8003320:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003322:	e009      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	75fb      	strb	r3, [r7, #23]
      break;
 8003328:	e006      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800332a:	bf00      	nop
 800332c:	e004      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800332e:	bf00      	nop
 8003330:	e002      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003332:	bf00      	nop
 8003334:	e000      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003338:	7dfb      	ldrb	r3, [r7, #23]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10a      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800333e:	4b65      	ldr	r3, [pc, #404]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800334c:	4961      	ldr	r1, [pc, #388]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800334e:	4313      	orrs	r3, r2
 8003350:	658b      	str	r3, [r1, #88]	; 0x58
 8003352:	e001      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003354:	7dfb      	ldrb	r3, [r7, #23]
 8003356:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003360:	2b00      	cmp	r3, #0
 8003362:	d04b      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800336a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800336e:	d02e      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003370:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003374:	d828      	bhi.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800337a:	d02a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800337c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003380:	d822      	bhi.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003382:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003386:	d026      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003388:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800338c:	d81c      	bhi.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800338e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003392:	d010      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003398:	d816      	bhi.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d01d      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800339e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a2:	d111      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3304      	adds	r3, #4
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fc80 	bl	8003cb0 <RCCEx_PLL2_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80033b4:	e012      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3324      	adds	r3, #36	; 0x24
 80033ba:	2102      	movs	r1, #2
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fd29 	bl	8003e14 <RCCEx_PLL3_Config>
 80033c2:	4603      	mov	r3, r0
 80033c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80033c6:	e009      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	75fb      	strb	r3, [r7, #23]
      break;
 80033cc:	e006      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80033ce:	bf00      	nop
 80033d0:	e004      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80033d2:	bf00      	nop
 80033d4:	e002      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80033d6:	bf00      	nop
 80033d8:	e000      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80033da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10a      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80033e2:	4b3c      	ldr	r3, [pc, #240]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033f0:	4938      	ldr	r1, [pc, #224]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	658b      	str	r3, [r1, #88]	; 0x58
 80033f6:	e001      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
 80033fa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800340e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003412:	d10a      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3324      	adds	r3, #36	; 0x24
 8003418:	2102      	movs	r1, #2
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fcfa 	bl	8003e14 <RCCEx_PLL3_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800342a:	4b2a      	ldr	r3, [pc, #168]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800342c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003438:	4926      	ldr	r1, [pc, #152]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800343a:	4313      	orrs	r3, r2
 800343c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	d01a      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003454:	d10a      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3324      	adds	r3, #36	; 0x24
 800345a:	2102      	movs	r1, #2
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fcd9 	bl	8003e14 <RCCEx_PLL3_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800346c:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003470:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800347a:	4916      	ldr	r1, [pc, #88]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800347c:	4313      	orrs	r3, r2
 800347e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d036      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003492:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003496:	d01f      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800349c:	d817      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80034a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a6:	d009      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80034a8:	e011      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fbfd 	bl	8003cb0 <RCCEx_PLL2_Config>
 80034b6:	4603      	mov	r3, r0
 80034b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80034ba:	e00e      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3324      	adds	r3, #36	; 0x24
 80034c0:	2102      	movs	r1, #2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fca6 	bl	8003e14 <RCCEx_PLL3_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80034cc:	e005      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	75fb      	strb	r3, [r7, #23]
      break;
 80034d2:	e002      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80034d4:	58024400 	.word	0x58024400
      break;
 80034d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034da:	7dfb      	ldrb	r3, [r7, #23]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10a      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034e0:	4b93      	ldr	r3, [pc, #588]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034ee:	4990      	ldr	r1, [pc, #576]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	658b      	str	r3, [r1, #88]	; 0x58
 80034f4:	e001      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
 80034f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d033      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800350c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003510:	d01c      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003512:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003516:	d816      	bhi.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800351c:	d003      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800351e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003522:	d007      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003524:	e00f      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003526:	4b82      	ldr	r3, [pc, #520]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	4a81      	ldr	r2, [pc, #516]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800352c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003530:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003532:	e00c      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3324      	adds	r3, #36	; 0x24
 8003538:	2101      	movs	r1, #1
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fc6a 	bl	8003e14 <RCCEx_PLL3_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003544:	e003      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
      break;
 800354a:	e000      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800354c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800354e:	7dfb      	ldrb	r3, [r7, #23]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10a      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003554:	4b76      	ldr	r3, [pc, #472]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003562:	4973      	ldr	r1, [pc, #460]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003564:	4313      	orrs	r3, r2
 8003566:	654b      	str	r3, [r1, #84]	; 0x54
 8003568:	e001      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356a:	7dfb      	ldrb	r3, [r7, #23]
 800356c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d029      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8003582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003586:	d007      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003588:	e00f      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800358a:	4b69      	ldr	r3, [pc, #420]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	4a68      	ldr	r2, [pc, #416]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003594:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003596:	e00b      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3304      	adds	r3, #4
 800359c:	2102      	movs	r1, #2
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fb86 	bl	8003cb0 <RCCEx_PLL2_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80035a8:	e002      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	75fb      	strb	r3, [r7, #23]
      break;
 80035ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80035b6:	4b5e      	ldr	r3, [pc, #376]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c2:	495b      	ldr	r1, [pc, #364]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80035c8:	e001      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ca:	7dfb      	ldrb	r3, [r7, #23]
 80035cc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3324      	adds	r3, #36	; 0x24
 80035de:	2102      	movs	r1, #2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fc17 	bl	8003e14 <RCCEx_PLL3_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d030      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003600:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003604:	d017      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800360a:	d811      	bhi.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800360c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003610:	d013      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003616:	d80b      	bhi.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003618:	2b00      	cmp	r3, #0
 800361a:	d010      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800361c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003620:	d106      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003622:	4b43      	ldr	r3, [pc, #268]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	4a42      	ldr	r2, [pc, #264]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800362c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800362e:	e007      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	75fb      	strb	r3, [r7, #23]
      break;
 8003634:	e004      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003636:	bf00      	nop
 8003638:	e002      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800363a:	bf00      	nop
 800363c:	e000      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800363e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003646:	4b3a      	ldr	r3, [pc, #232]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003652:	4937      	ldr	r1, [pc, #220]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003654:	4313      	orrs	r3, r2
 8003656:	654b      	str	r3, [r1, #84]	; 0x54
 8003658:	e001      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365a:	7dfb      	ldrb	r3, [r7, #23]
 800365c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d008      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800366a:	4b31      	ldr	r3, [pc, #196]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800366c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	492e      	ldr	r1, [pc, #184]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003678:	4313      	orrs	r3, r2
 800367a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d009      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003688:	4b29      	ldr	r3, [pc, #164]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003696:	4926      	ldr	r1, [pc, #152]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003698:	4313      	orrs	r3, r2
 800369a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036a8:	4b21      	ldr	r3, [pc, #132]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b4:	491e      	ldr	r1, [pc, #120]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00d      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036c6:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	4a19      	ldr	r2, [pc, #100]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036d0:	6113      	str	r3, [r2, #16]
 80036d2:	4b17      	ldr	r3, [pc, #92]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80036dc:	4914      	ldr	r1, [pc, #80]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	da08      	bge.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80036ea:	4b11      	ldr	r3, [pc, #68]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f6:	490e      	ldr	r1, [pc, #56]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d009      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003708:	4b09      	ldr	r3, [pc, #36]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800370a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003716:	4906      	ldr	r1, [pc, #24]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003718:	4313      	orrs	r3, r2
 800371a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800371c:	7dbb      	ldrb	r3, [r7, #22]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	e000      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	58024400 	.word	0x58024400

08003734 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003738:	f7ff f860 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 800373c:	4602      	mov	r2, r0
 800373e:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	091b      	lsrs	r3, r3, #4
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	4904      	ldr	r1, [pc, #16]	; (800375c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800374a:	5ccb      	ldrb	r3, [r1, r3]
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003754:	4618      	mov	r0, r3
 8003756:	bd80      	pop	{r7, pc}
 8003758:	58024400 	.word	0x58024400
 800375c:	080062dc 	.word	0x080062dc

08003760 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003760:	b480      	push	{r7}
 8003762:	b089      	sub	sp, #36	; 0x24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003768:	4ba1      	ldr	r3, [pc, #644]	; (80039f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003772:	4b9f      	ldr	r3, [pc, #636]	; (80039f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	0b1b      	lsrs	r3, r3, #12
 8003778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800377c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800377e:	4b9c      	ldr	r3, [pc, #624]	; (80039f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800378a:	4b99      	ldr	r3, [pc, #612]	; (80039f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800378c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378e:	08db      	lsrs	r3, r3, #3
 8003790:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	fb02 f303 	mul.w	r3, r2, r3
 800379a:	ee07 3a90 	vmov	s15, r3
 800379e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 8111 	beq.w	80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	f000 8083 	beq.w	80038bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	f200 80a1 	bhi.w	8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d056      	beq.n	8003878 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80037ca:	e099      	b.n	8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037cc:	4b88      	ldr	r3, [pc, #544]	; (80039f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0320 	and.w	r3, r3, #32
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d02d      	beq.n	8003834 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037d8:	4b85      	ldr	r3, [pc, #532]	; (80039f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	08db      	lsrs	r3, r3, #3
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	4a84      	ldr	r2, [pc, #528]	; (80039f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80037e4:	fa22 f303 	lsr.w	r3, r2, r3
 80037e8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	ee07 3a90 	vmov	s15, r3
 80037f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	ee07 3a90 	vmov	s15, r3
 80037fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003802:	4b7b      	ldr	r3, [pc, #492]	; (80039f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380a:	ee07 3a90 	vmov	s15, r3
 800380e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003812:	ed97 6a03 	vldr	s12, [r7, #12]
 8003816:	eddf 5a78 	vldr	s11, [pc, #480]	; 80039f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800381a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800381e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800382a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003832:	e087      	b.n	8003944 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80039fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003846:	4b6a      	ldr	r3, [pc, #424]	; (80039f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800384e:	ee07 3a90 	vmov	s15, r3
 8003852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003856:	ed97 6a03 	vldr	s12, [r7, #12]
 800385a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80039f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800385e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800386a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800386e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003872:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003876:	e065      	b.n	8003944 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	ee07 3a90 	vmov	s15, r3
 800387e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003882:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800388a:	4b59      	ldr	r3, [pc, #356]	; (80039f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800389a:	ed97 6a03 	vldr	s12, [r7, #12]
 800389e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80039f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038ba:	e043      	b.n	8003944 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	ee07 3a90 	vmov	s15, r3
 80038c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80038ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ce:	4b48      	ldr	r3, [pc, #288]	; (80039f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038de:	ed97 6a03 	vldr	s12, [r7, #12]
 80038e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80039f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038fe:	e021      	b.n	8003944 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	ee07 3a90 	vmov	s15, r3
 8003906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800390a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800390e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003912:	4b37      	ldr	r3, [pc, #220]	; (80039f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003922:	ed97 6a03 	vldr	s12, [r7, #12]
 8003926:	eddf 5a34 	vldr	s11, [pc, #208]	; 80039f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800392a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800392e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800393a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800393e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003942:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003944:	4b2a      	ldr	r3, [pc, #168]	; (80039f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	0a5b      	lsrs	r3, r3, #9
 800394a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800395a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800395e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800396a:	ee17 2a90 	vmov	r2, s15
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003972:	4b1f      	ldr	r3, [pc, #124]	; (80039f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	0c1b      	lsrs	r3, r3, #16
 8003978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800397c:	ee07 3a90 	vmov	s15, r3
 8003980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003984:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003988:	ee37 7a87 	vadd.f32	s14, s15, s14
 800398c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003998:	ee17 2a90 	vmov	r2, s15
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80039a0:	4b13      	ldr	r3, [pc, #76]	; (80039f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	0e1b      	lsrs	r3, r3, #24
 80039a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039aa:	ee07 3a90 	vmov	s15, r3
 80039ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80039be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039c6:	ee17 2a90 	vmov	r2, s15
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80039ce:	e008      	b.n	80039e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	609a      	str	r2, [r3, #8]
}
 80039e2:	bf00      	nop
 80039e4:	3724      	adds	r7, #36	; 0x24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	58024400 	.word	0x58024400
 80039f4:	03d09000 	.word	0x03d09000
 80039f8:	46000000 	.word	0x46000000
 80039fc:	4c742400 	.word	0x4c742400
 8003a00:	4a742400 	.word	0x4a742400
 8003a04:	4bbebc20 	.word	0x4bbebc20

08003a08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b089      	sub	sp, #36	; 0x24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a10:	4ba1      	ldr	r3, [pc, #644]	; (8003c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003a1a:	4b9f      	ldr	r3, [pc, #636]	; (8003c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	0d1b      	lsrs	r3, r3, #20
 8003a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003a26:	4b9c      	ldr	r3, [pc, #624]	; (8003c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003a32:	4b99      	ldr	r3, [pc, #612]	; (8003c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	08db      	lsrs	r3, r3, #3
 8003a38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	fb02 f303 	mul.w	r3, r2, r3
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8111 	beq.w	8003c78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	f000 8083 	beq.w	8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	f200 80a1 	bhi.w	8003ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d056      	beq.n	8003b20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003a72:	e099      	b.n	8003ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a74:	4b88      	ldr	r3, [pc, #544]	; (8003c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d02d      	beq.n	8003adc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a80:	4b85      	ldr	r3, [pc, #532]	; (8003c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	08db      	lsrs	r3, r3, #3
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	4a84      	ldr	r2, [pc, #528]	; (8003c9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a90:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	ee07 3a90 	vmov	s15, r3
 8003a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aaa:	4b7b      	ldr	r3, [pc, #492]	; (8003c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8003abe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003ada:	e087      	b.n	8003bec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	ee07 3a90 	vmov	s15, r3
 8003ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aee:	4b6a      	ldr	r3, [pc, #424]	; (8003c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b02:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b1e:	e065      	b.n	8003bec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b32:	4b59      	ldr	r3, [pc, #356]	; (8003c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b46:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b62:	e043      	b.n	8003bec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003cac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b76:	4b48      	ldr	r3, [pc, #288]	; (8003c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ba6:	e021      	b.n	8003bec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	ee07 3a90 	vmov	s15, r3
 8003bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bba:	4b37      	ldr	r3, [pc, #220]	; (8003c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bce:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003bec:	4b2a      	ldr	r3, [pc, #168]	; (8003c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	0a5b      	lsrs	r3, r3, #9
 8003bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bf6:	ee07 3a90 	vmov	s15, r3
 8003bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c06:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c12:	ee17 2a90 	vmov	r2, s15
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003c1a:	4b1f      	ldr	r3, [pc, #124]	; (8003c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	0c1b      	lsrs	r3, r3, #16
 8003c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c24:	ee07 3a90 	vmov	s15, r3
 8003c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c34:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c40:	ee17 2a90 	vmov	r2, s15
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003c48:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	0e1b      	lsrs	r3, r3, #24
 8003c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c62:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c6e:	ee17 2a90 	vmov	r2, s15
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003c76:	e008      	b.n	8003c8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	609a      	str	r2, [r3, #8]
}
 8003c8a:	bf00      	nop
 8003c8c:	3724      	adds	r7, #36	; 0x24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	58024400 	.word	0x58024400
 8003c9c:	03d09000 	.word	0x03d09000
 8003ca0:	46000000 	.word	0x46000000
 8003ca4:	4c742400 	.word	0x4c742400
 8003ca8:	4a742400 	.word	0x4a742400
 8003cac:	4bbebc20 	.word	0x4bbebc20

08003cb0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cbe:	4b53      	ldr	r3, [pc, #332]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d101      	bne.n	8003cce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e099      	b.n	8003e02 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003cce:	4b4f      	ldr	r3, [pc, #316]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a4e      	ldr	r2, [pc, #312]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003cd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cda:	f7fd fb4d 	bl	8001378 <HAL_GetTick>
 8003cde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ce0:	e008      	b.n	8003cf4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003ce2:	f7fd fb49 	bl	8001378 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e086      	b.n	8003e02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cf4:	4b45      	ldr	r3, [pc, #276]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1f0      	bne.n	8003ce2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d00:	4b42      	ldr	r3, [pc, #264]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	031b      	lsls	r3, r3, #12
 8003d0e:	493f      	ldr	r1, [pc, #252]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	628b      	str	r3, [r1, #40]	; 0x28
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	025b      	lsls	r3, r3, #9
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	041b      	lsls	r3, r3, #16
 8003d32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	061b      	lsls	r3, r3, #24
 8003d40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d44:	4931      	ldr	r1, [pc, #196]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d4a:	4b30      	ldr	r3, [pc, #192]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	492d      	ldr	r1, [pc, #180]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d5c:	4b2b      	ldr	r3, [pc, #172]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	f023 0220 	bic.w	r2, r3, #32
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	4928      	ldr	r1, [pc, #160]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d6e:	4b27      	ldr	r3, [pc, #156]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	4a26      	ldr	r2, [pc, #152]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003d74:	f023 0310 	bic.w	r3, r3, #16
 8003d78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d7a:	4b24      	ldr	r3, [pc, #144]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d7e:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <RCCEx_PLL2_Config+0x160>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	69d2      	ldr	r2, [r2, #28]
 8003d86:	00d2      	lsls	r2, r2, #3
 8003d88:	4920      	ldr	r1, [pc, #128]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d8e:	4b1f      	ldr	r3, [pc, #124]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	4a1e      	ldr	r2, [pc, #120]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003d94:	f043 0310 	orr.w	r3, r3, #16
 8003d98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d106      	bne.n	8003dae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003da0:	4b1a      	ldr	r3, [pc, #104]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	4a19      	ldr	r2, [pc, #100]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003da6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003daa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003dac:	e00f      	b.n	8003dce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d106      	bne.n	8003dc2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003db4:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	4a14      	ldr	r2, [pc, #80]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003dba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003dc0:	e005      	b.n	8003dce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003dc2:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	4a11      	ldr	r2, [pc, #68]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003dc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dcc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003dce:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a0e      	ldr	r2, [pc, #56]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003dd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dda:	f7fd facd 	bl	8001378 <HAL_GetTick>
 8003dde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003de0:	e008      	b.n	8003df4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003de2:	f7fd fac9 	bl	8001378 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e006      	b.n	8003e02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003df4:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <RCCEx_PLL2_Config+0x15c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	58024400 	.word	0x58024400
 8003e10:	ffff0007 	.word	0xffff0007

08003e14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e22:	4b53      	ldr	r3, [pc, #332]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d101      	bne.n	8003e32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e099      	b.n	8003f66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e32:	4b4f      	ldr	r3, [pc, #316]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a4e      	ldr	r2, [pc, #312]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3e:	f7fd fa9b 	bl	8001378 <HAL_GetTick>
 8003e42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e44:	e008      	b.n	8003e58 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e46:	f7fd fa97 	bl	8001378 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e086      	b.n	8003f66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e58:	4b45      	ldr	r3, [pc, #276]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1f0      	bne.n	8003e46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e64:	4b42      	ldr	r3, [pc, #264]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	051b      	lsls	r3, r3, #20
 8003e72:	493f      	ldr	r1, [pc, #252]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	628b      	str	r3, [r1, #40]	; 0x28
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	025b      	lsls	r3, r3, #9
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	041b      	lsls	r3, r3, #16
 8003e96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	061b      	lsls	r3, r3, #24
 8003ea4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ea8:	4931      	ldr	r1, [pc, #196]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003eae:	4b30      	ldr	r3, [pc, #192]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	492d      	ldr	r1, [pc, #180]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ec0:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	4928      	ldr	r1, [pc, #160]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ed2:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003edc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003ede:	4b24      	ldr	r3, [pc, #144]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ee2:	4b24      	ldr	r3, [pc, #144]	; (8003f74 <RCCEx_PLL3_Config+0x160>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	69d2      	ldr	r2, [r2, #28]
 8003eea:	00d2      	lsls	r2, r2, #3
 8003eec:	4920      	ldr	r1, [pc, #128]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003ef2:	4b1f      	ldr	r3, [pc, #124]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	4a1e      	ldr	r2, [pc, #120]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f04:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	4a19      	ldr	r2, [pc, #100]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003f0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f10:	e00f      	b.n	8003f32 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d106      	bne.n	8003f26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f18:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	4a14      	ldr	r2, [pc, #80]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003f1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f24:	e005      	b.n	8003f32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f26:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	4a11      	ldr	r2, [pc, #68]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003f2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f32:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a0e      	ldr	r2, [pc, #56]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f3e:	f7fd fa1b 	bl	8001378 <HAL_GetTick>
 8003f42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f44:	e008      	b.n	8003f58 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003f46:	f7fd fa17 	bl	8001378 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e006      	b.n	8003f66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f58:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <RCCEx_PLL3_Config+0x15c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	58024400 	.word	0x58024400
 8003f74:	ffff0007 	.word	0xffff0007

08003f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e049      	b.n	800401e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fc fee6 	bl	8000d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f000 fbb0 	bl	800471c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e049      	b.n	80040cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d106      	bne.n	8004052 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f841 	bl	80040d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2202      	movs	r2, #2
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3304      	adds	r3, #4
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f000 fb59 	bl	800471c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d109      	bne.n	800410c <HAL_TIM_PWM_Start+0x24>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b01      	cmp	r3, #1
 8004102:	bf14      	ite	ne
 8004104:	2301      	movne	r3, #1
 8004106:	2300      	moveq	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	e03c      	b.n	8004186 <HAL_TIM_PWM_Start+0x9e>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b04      	cmp	r3, #4
 8004110:	d109      	bne.n	8004126 <HAL_TIM_PWM_Start+0x3e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b01      	cmp	r3, #1
 800411c:	bf14      	ite	ne
 800411e:	2301      	movne	r3, #1
 8004120:	2300      	moveq	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	e02f      	b.n	8004186 <HAL_TIM_PWM_Start+0x9e>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b08      	cmp	r3, #8
 800412a:	d109      	bne.n	8004140 <HAL_TIM_PWM_Start+0x58>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	bf14      	ite	ne
 8004138:	2301      	movne	r3, #1
 800413a:	2300      	moveq	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	e022      	b.n	8004186 <HAL_TIM_PWM_Start+0x9e>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b0c      	cmp	r3, #12
 8004144:	d109      	bne.n	800415a <HAL_TIM_PWM_Start+0x72>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b01      	cmp	r3, #1
 8004150:	bf14      	ite	ne
 8004152:	2301      	movne	r3, #1
 8004154:	2300      	moveq	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	e015      	b.n	8004186 <HAL_TIM_PWM_Start+0x9e>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b10      	cmp	r3, #16
 800415e:	d109      	bne.n	8004174 <HAL_TIM_PWM_Start+0x8c>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	e008      	b.n	8004186 <HAL_TIM_PWM_Start+0x9e>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b01      	cmp	r3, #1
 800417e:	bf14      	ite	ne
 8004180:	2301      	movne	r3, #1
 8004182:	2300      	moveq	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e0a1      	b.n	80042d2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d104      	bne.n	800419e <HAL_TIM_PWM_Start+0xb6>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800419c:	e023      	b.n	80041e6 <HAL_TIM_PWM_Start+0xfe>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d104      	bne.n	80041ae <HAL_TIM_PWM_Start+0xc6>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041ac:	e01b      	b.n	80041e6 <HAL_TIM_PWM_Start+0xfe>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d104      	bne.n	80041be <HAL_TIM_PWM_Start+0xd6>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041bc:	e013      	b.n	80041e6 <HAL_TIM_PWM_Start+0xfe>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b0c      	cmp	r3, #12
 80041c2:	d104      	bne.n	80041ce <HAL_TIM_PWM_Start+0xe6>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041cc:	e00b      	b.n	80041e6 <HAL_TIM_PWM_Start+0xfe>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d104      	bne.n	80041de <HAL_TIM_PWM_Start+0xf6>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041dc:	e003      	b.n	80041e6 <HAL_TIM_PWM_Start+0xfe>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2202      	movs	r2, #2
 80041e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2201      	movs	r2, #1
 80041ec:	6839      	ldr	r1, [r7, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fea2 	bl	8004f38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a38      	ldr	r2, [pc, #224]	; (80042dc <HAL_TIM_PWM_Start+0x1f4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <HAL_TIM_PWM_Start+0x13e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a37      	ldr	r2, [pc, #220]	; (80042e0 <HAL_TIM_PWM_Start+0x1f8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00e      	beq.n	8004226 <HAL_TIM_PWM_Start+0x13e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a35      	ldr	r2, [pc, #212]	; (80042e4 <HAL_TIM_PWM_Start+0x1fc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_TIM_PWM_Start+0x13e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a34      	ldr	r2, [pc, #208]	; (80042e8 <HAL_TIM_PWM_Start+0x200>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_TIM_PWM_Start+0x13e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a32      	ldr	r2, [pc, #200]	; (80042ec <HAL_TIM_PWM_Start+0x204>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d101      	bne.n	800422a <HAL_TIM_PWM_Start+0x142>
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <HAL_TIM_PWM_Start+0x144>
 800422a:	2300      	movs	r3, #0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800423e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a25      	ldr	r2, [pc, #148]	; (80042dc <HAL_TIM_PWM_Start+0x1f4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d022      	beq.n	8004290 <HAL_TIM_PWM_Start+0x1a8>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004252:	d01d      	beq.n	8004290 <HAL_TIM_PWM_Start+0x1a8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a25      	ldr	r2, [pc, #148]	; (80042f0 <HAL_TIM_PWM_Start+0x208>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d018      	beq.n	8004290 <HAL_TIM_PWM_Start+0x1a8>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a24      	ldr	r2, [pc, #144]	; (80042f4 <HAL_TIM_PWM_Start+0x20c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <HAL_TIM_PWM_Start+0x1a8>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a22      	ldr	r2, [pc, #136]	; (80042f8 <HAL_TIM_PWM_Start+0x210>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00e      	beq.n	8004290 <HAL_TIM_PWM_Start+0x1a8>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a1a      	ldr	r2, [pc, #104]	; (80042e0 <HAL_TIM_PWM_Start+0x1f8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d009      	beq.n	8004290 <HAL_TIM_PWM_Start+0x1a8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a1e      	ldr	r2, [pc, #120]	; (80042fc <HAL_TIM_PWM_Start+0x214>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d004      	beq.n	8004290 <HAL_TIM_PWM_Start+0x1a8>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <HAL_TIM_PWM_Start+0x1fc>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d115      	bne.n	80042bc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <HAL_TIM_PWM_Start+0x218>)
 8004298:	4013      	ands	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b06      	cmp	r3, #6
 80042a0:	d015      	beq.n	80042ce <HAL_TIM_PWM_Start+0x1e6>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a8:	d011      	beq.n	80042ce <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ba:	e008      	b.n	80042ce <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0201 	orr.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	e000      	b.n	80042d0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40010000 	.word	0x40010000
 80042e0:	40010400 	.word	0x40010400
 80042e4:	40014000 	.word	0x40014000
 80042e8:	40014400 	.word	0x40014400
 80042ec:	40014800 	.word	0x40014800
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40000800 	.word	0x40000800
 80042f8:	40000c00 	.word	0x40000c00
 80042fc:	40001800 	.word	0x40001800
 8004300:	00010007 	.word	0x00010007

08004304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800431e:	2302      	movs	r3, #2
 8004320:	e0ff      	b.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b14      	cmp	r3, #20
 800432e:	f200 80f0 	bhi.w	8004512 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004332:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004338:	0800438d 	.word	0x0800438d
 800433c:	08004513 	.word	0x08004513
 8004340:	08004513 	.word	0x08004513
 8004344:	08004513 	.word	0x08004513
 8004348:	080043cd 	.word	0x080043cd
 800434c:	08004513 	.word	0x08004513
 8004350:	08004513 	.word	0x08004513
 8004354:	08004513 	.word	0x08004513
 8004358:	0800440f 	.word	0x0800440f
 800435c:	08004513 	.word	0x08004513
 8004360:	08004513 	.word	0x08004513
 8004364:	08004513 	.word	0x08004513
 8004368:	0800444f 	.word	0x0800444f
 800436c:	08004513 	.word	0x08004513
 8004370:	08004513 	.word	0x08004513
 8004374:	08004513 	.word	0x08004513
 8004378:	08004491 	.word	0x08004491
 800437c:	08004513 	.word	0x08004513
 8004380:	08004513 	.word	0x08004513
 8004384:	08004513 	.word	0x08004513
 8004388:	080044d1 	.word	0x080044d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fa5c 	bl	8004850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0208 	orr.w	r2, r2, #8
 80043a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0204 	bic.w	r2, r2, #4
 80043b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6999      	ldr	r1, [r3, #24]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	619a      	str	r2, [r3, #24]
      break;
 80043ca:	e0a5      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 facc 	bl	8004970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6999      	ldr	r1, [r3, #24]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	021a      	lsls	r2, r3, #8
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	619a      	str	r2, [r3, #24]
      break;
 800440c:	e084      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68b9      	ldr	r1, [r7, #8]
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fb35 	bl	8004a84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0208 	orr.w	r2, r2, #8
 8004428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0204 	bic.w	r2, r2, #4
 8004438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69d9      	ldr	r1, [r3, #28]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	61da      	str	r2, [r3, #28]
      break;
 800444c:	e064      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fb9d 	bl	8004b94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69da      	ldr	r2, [r3, #28]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69d9      	ldr	r1, [r3, #28]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	021a      	lsls	r2, r3, #8
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	61da      	str	r2, [r3, #28]
      break;
 800448e:	e043      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fbe6 	bl	8004c68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0208 	orr.w	r2, r2, #8
 80044aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0204 	bic.w	r2, r2, #4
 80044ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044ce:	e023      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68b9      	ldr	r1, [r7, #8]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fc2a 	bl	8004d30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	021a      	lsls	r2, r3, #8
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004510:	e002      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	75fb      	strb	r3, [r7, #23]
      break;
 8004516:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004520:	7dfb      	ldrb	r3, [r7, #23]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop

0800452c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_TIM_ConfigClockSource+0x1c>
 8004544:	2302      	movs	r3, #2
 8004546:	e0dc      	b.n	8004702 <HAL_TIM_ConfigClockSource+0x1d6>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	4b6a      	ldr	r3, [pc, #424]	; (800470c <HAL_TIM_ConfigClockSource+0x1e0>)
 8004564:	4013      	ands	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800456e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a64      	ldr	r2, [pc, #400]	; (8004710 <HAL_TIM_ConfigClockSource+0x1e4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	f000 80a9 	beq.w	80046d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004584:	4a62      	ldr	r2, [pc, #392]	; (8004710 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	f200 80ae 	bhi.w	80046e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800458c:	4a61      	ldr	r2, [pc, #388]	; (8004714 <HAL_TIM_ConfigClockSource+0x1e8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	f000 80a1 	beq.w	80046d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004594:	4a5f      	ldr	r2, [pc, #380]	; (8004714 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	f200 80a6 	bhi.w	80046e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800459c:	4a5e      	ldr	r2, [pc, #376]	; (8004718 <HAL_TIM_ConfigClockSource+0x1ec>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	f000 8099 	beq.w	80046d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80045a4:	4a5c      	ldr	r2, [pc, #368]	; (8004718 <HAL_TIM_ConfigClockSource+0x1ec>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	f200 809e 	bhi.w	80046e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80045ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80045b0:	f000 8091 	beq.w	80046d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80045b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80045b8:	f200 8096 	bhi.w	80046e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80045bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045c0:	f000 8089 	beq.w	80046d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80045c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045c8:	f200 808e 	bhi.w	80046e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80045cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d0:	d03e      	beq.n	8004650 <HAL_TIM_ConfigClockSource+0x124>
 80045d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d6:	f200 8087 	bhi.w	80046e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80045da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045de:	f000 8086 	beq.w	80046ee <HAL_TIM_ConfigClockSource+0x1c2>
 80045e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e6:	d87f      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80045e8:	2b70      	cmp	r3, #112	; 0x70
 80045ea:	d01a      	beq.n	8004622 <HAL_TIM_ConfigClockSource+0xf6>
 80045ec:	2b70      	cmp	r3, #112	; 0x70
 80045ee:	d87b      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80045f0:	2b60      	cmp	r3, #96	; 0x60
 80045f2:	d050      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x16a>
 80045f4:	2b60      	cmp	r3, #96	; 0x60
 80045f6:	d877      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80045f8:	2b50      	cmp	r3, #80	; 0x50
 80045fa:	d03c      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x14a>
 80045fc:	2b50      	cmp	r3, #80	; 0x50
 80045fe:	d873      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004600:	2b40      	cmp	r3, #64	; 0x40
 8004602:	d058      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x18a>
 8004604:	2b40      	cmp	r3, #64	; 0x40
 8004606:	d86f      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004608:	2b30      	cmp	r3, #48	; 0x30
 800460a:	d064      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800460c:	2b30      	cmp	r3, #48	; 0x30
 800460e:	d86b      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004610:	2b20      	cmp	r3, #32
 8004612:	d060      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004614:	2b20      	cmp	r3, #32
 8004616:	d867      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004618:	2b00      	cmp	r3, #0
 800461a:	d05c      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800461c:	2b10      	cmp	r3, #16
 800461e:	d05a      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004620:	e062      	b.n	80046e8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6899      	ldr	r1, [r3, #8]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f000 fc61 	bl	8004ef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004644:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	609a      	str	r2, [r3, #8]
      break;
 800464e:	e04f      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	6899      	ldr	r1, [r3, #8]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f000 fc4a 	bl	8004ef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004672:	609a      	str	r2, [r3, #8]
      break;
 8004674:	e03c      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6859      	ldr	r1, [r3, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	461a      	mov	r2, r3
 8004684:	f000 fbba 	bl	8004dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2150      	movs	r1, #80	; 0x50
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fc14 	bl	8004ebc <TIM_ITRx_SetConfig>
      break;
 8004694:	e02c      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6859      	ldr	r1, [r3, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	461a      	mov	r2, r3
 80046a4:	f000 fbd9 	bl	8004e5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2160      	movs	r1, #96	; 0x60
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fc04 	bl	8004ebc <TIM_ITRx_SetConfig>
      break;
 80046b4:	e01c      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6859      	ldr	r1, [r3, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	461a      	mov	r2, r3
 80046c4:	f000 fb9a 	bl	8004dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2140      	movs	r1, #64	; 0x40
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fbf4 	bl	8004ebc <TIM_ITRx_SetConfig>
      break;
 80046d4:	e00c      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f000 fbeb 	bl	8004ebc <TIM_ITRx_SetConfig>
      break;
 80046e6:	e003      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	73fb      	strb	r3, [r7, #15]
      break;
 80046ec:	e000      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80046ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	ffceff88 	.word	0xffceff88
 8004710:	00100040 	.word	0x00100040
 8004714:	00100030 	.word	0x00100030
 8004718:	00100020 	.word	0x00100020

0800471c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a40      	ldr	r2, [pc, #256]	; (8004830 <TIM_Base_SetConfig+0x114>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473a:	d00f      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a3d      	ldr	r2, [pc, #244]	; (8004834 <TIM_Base_SetConfig+0x118>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00b      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a3c      	ldr	r2, [pc, #240]	; (8004838 <TIM_Base_SetConfig+0x11c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d007      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a3b      	ldr	r2, [pc, #236]	; (800483c <TIM_Base_SetConfig+0x120>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a3a      	ldr	r2, [pc, #232]	; (8004840 <TIM_Base_SetConfig+0x124>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d108      	bne.n	800476e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a2f      	ldr	r2, [pc, #188]	; (8004830 <TIM_Base_SetConfig+0x114>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d01f      	beq.n	80047b6 <TIM_Base_SetConfig+0x9a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477c:	d01b      	beq.n	80047b6 <TIM_Base_SetConfig+0x9a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a2c      	ldr	r2, [pc, #176]	; (8004834 <TIM_Base_SetConfig+0x118>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d017      	beq.n	80047b6 <TIM_Base_SetConfig+0x9a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a2b      	ldr	r2, [pc, #172]	; (8004838 <TIM_Base_SetConfig+0x11c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d013      	beq.n	80047b6 <TIM_Base_SetConfig+0x9a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a2a      	ldr	r2, [pc, #168]	; (800483c <TIM_Base_SetConfig+0x120>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d00f      	beq.n	80047b6 <TIM_Base_SetConfig+0x9a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a29      	ldr	r2, [pc, #164]	; (8004840 <TIM_Base_SetConfig+0x124>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00b      	beq.n	80047b6 <TIM_Base_SetConfig+0x9a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a28      	ldr	r2, [pc, #160]	; (8004844 <TIM_Base_SetConfig+0x128>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d007      	beq.n	80047b6 <TIM_Base_SetConfig+0x9a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a27      	ldr	r2, [pc, #156]	; (8004848 <TIM_Base_SetConfig+0x12c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d003      	beq.n	80047b6 <TIM_Base_SetConfig+0x9a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a26      	ldr	r2, [pc, #152]	; (800484c <TIM_Base_SetConfig+0x130>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d108      	bne.n	80047c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a10      	ldr	r2, [pc, #64]	; (8004830 <TIM_Base_SetConfig+0x114>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00f      	beq.n	8004814 <TIM_Base_SetConfig+0xf8>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a12      	ldr	r2, [pc, #72]	; (8004840 <TIM_Base_SetConfig+0x124>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00b      	beq.n	8004814 <TIM_Base_SetConfig+0xf8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a11      	ldr	r2, [pc, #68]	; (8004844 <TIM_Base_SetConfig+0x128>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d007      	beq.n	8004814 <TIM_Base_SetConfig+0xf8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a10      	ldr	r2, [pc, #64]	; (8004848 <TIM_Base_SetConfig+0x12c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d003      	beq.n	8004814 <TIM_Base_SetConfig+0xf8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a0f      	ldr	r2, [pc, #60]	; (800484c <TIM_Base_SetConfig+0x130>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d103      	bne.n	800481c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	615a      	str	r2, [r3, #20]
}
 8004822:	bf00      	nop
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40010000 	.word	0x40010000
 8004834:	40000400 	.word	0x40000400
 8004838:	40000800 	.word	0x40000800
 800483c:	40000c00 	.word	0x40000c00
 8004840:	40010400 	.word	0x40010400
 8004844:	40014000 	.word	0x40014000
 8004848:	40014400 	.word	0x40014400
 800484c:	40014800 	.word	0x40014800

08004850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f023 0201 	bic.w	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4b37      	ldr	r3, [pc, #220]	; (8004958 <TIM_OC1_SetConfig+0x108>)
 800487c:	4013      	ands	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0303 	bic.w	r3, r3, #3
 8004886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f023 0302 	bic.w	r3, r3, #2
 8004898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a2d      	ldr	r2, [pc, #180]	; (800495c <TIM_OC1_SetConfig+0x10c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00f      	beq.n	80048cc <TIM_OC1_SetConfig+0x7c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a2c      	ldr	r2, [pc, #176]	; (8004960 <TIM_OC1_SetConfig+0x110>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00b      	beq.n	80048cc <TIM_OC1_SetConfig+0x7c>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a2b      	ldr	r2, [pc, #172]	; (8004964 <TIM_OC1_SetConfig+0x114>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d007      	beq.n	80048cc <TIM_OC1_SetConfig+0x7c>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a2a      	ldr	r2, [pc, #168]	; (8004968 <TIM_OC1_SetConfig+0x118>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <TIM_OC1_SetConfig+0x7c>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a29      	ldr	r2, [pc, #164]	; (800496c <TIM_OC1_SetConfig+0x11c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d10c      	bne.n	80048e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f023 0308 	bic.w	r3, r3, #8
 80048d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f023 0304 	bic.w	r3, r3, #4
 80048e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a1c      	ldr	r2, [pc, #112]	; (800495c <TIM_OC1_SetConfig+0x10c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00f      	beq.n	800490e <TIM_OC1_SetConfig+0xbe>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a1b      	ldr	r2, [pc, #108]	; (8004960 <TIM_OC1_SetConfig+0x110>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00b      	beq.n	800490e <TIM_OC1_SetConfig+0xbe>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a1a      	ldr	r2, [pc, #104]	; (8004964 <TIM_OC1_SetConfig+0x114>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d007      	beq.n	800490e <TIM_OC1_SetConfig+0xbe>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a19      	ldr	r2, [pc, #100]	; (8004968 <TIM_OC1_SetConfig+0x118>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d003      	beq.n	800490e <TIM_OC1_SetConfig+0xbe>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a18      	ldr	r2, [pc, #96]	; (800496c <TIM_OC1_SetConfig+0x11c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d111      	bne.n	8004932 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800491c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	621a      	str	r2, [r3, #32]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	fffeff8f 	.word	0xfffeff8f
 800495c:	40010000 	.word	0x40010000
 8004960:	40010400 	.word	0x40010400
 8004964:	40014000 	.word	0x40014000
 8004968:	40014400 	.word	0x40014400
 800496c:	40014800 	.word	0x40014800

08004970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	f023 0210 	bic.w	r2, r3, #16
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	4b34      	ldr	r3, [pc, #208]	; (8004a6c <TIM_OC2_SetConfig+0xfc>)
 800499c:	4013      	ands	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	021b      	lsls	r3, r3, #8
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f023 0320 	bic.w	r3, r3, #32
 80049ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a29      	ldr	r2, [pc, #164]	; (8004a70 <TIM_OC2_SetConfig+0x100>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d003      	beq.n	80049d8 <TIM_OC2_SetConfig+0x68>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a28      	ldr	r2, [pc, #160]	; (8004a74 <TIM_OC2_SetConfig+0x104>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d10d      	bne.n	80049f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a1e      	ldr	r2, [pc, #120]	; (8004a70 <TIM_OC2_SetConfig+0x100>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d00f      	beq.n	8004a1c <TIM_OC2_SetConfig+0xac>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a1d      	ldr	r2, [pc, #116]	; (8004a74 <TIM_OC2_SetConfig+0x104>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00b      	beq.n	8004a1c <TIM_OC2_SetConfig+0xac>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a1c      	ldr	r2, [pc, #112]	; (8004a78 <TIM_OC2_SetConfig+0x108>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d007      	beq.n	8004a1c <TIM_OC2_SetConfig+0xac>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a1b      	ldr	r2, [pc, #108]	; (8004a7c <TIM_OC2_SetConfig+0x10c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d003      	beq.n	8004a1c <TIM_OC2_SetConfig+0xac>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a1a      	ldr	r2, [pc, #104]	; (8004a80 <TIM_OC2_SetConfig+0x110>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d113      	bne.n	8004a44 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	621a      	str	r2, [r3, #32]
}
 8004a5e:	bf00      	nop
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	feff8fff 	.word	0xfeff8fff
 8004a70:	40010000 	.word	0x40010000
 8004a74:	40010400 	.word	0x40010400
 8004a78:	40014000 	.word	0x40014000
 8004a7c:	40014400 	.word	0x40014400
 8004a80:	40014800 	.word	0x40014800

08004a84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4b33      	ldr	r3, [pc, #204]	; (8004b7c <TIM_OC3_SetConfig+0xf8>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0303 	bic.w	r3, r3, #3
 8004aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	021b      	lsls	r3, r3, #8
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a28      	ldr	r2, [pc, #160]	; (8004b80 <TIM_OC3_SetConfig+0xfc>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d003      	beq.n	8004aea <TIM_OC3_SetConfig+0x66>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a27      	ldr	r2, [pc, #156]	; (8004b84 <TIM_OC3_SetConfig+0x100>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d10d      	bne.n	8004b06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a1d      	ldr	r2, [pc, #116]	; (8004b80 <TIM_OC3_SetConfig+0xfc>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00f      	beq.n	8004b2e <TIM_OC3_SetConfig+0xaa>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a1c      	ldr	r2, [pc, #112]	; (8004b84 <TIM_OC3_SetConfig+0x100>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00b      	beq.n	8004b2e <TIM_OC3_SetConfig+0xaa>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a1b      	ldr	r2, [pc, #108]	; (8004b88 <TIM_OC3_SetConfig+0x104>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d007      	beq.n	8004b2e <TIM_OC3_SetConfig+0xaa>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a1a      	ldr	r2, [pc, #104]	; (8004b8c <TIM_OC3_SetConfig+0x108>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d003      	beq.n	8004b2e <TIM_OC3_SetConfig+0xaa>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a19      	ldr	r2, [pc, #100]	; (8004b90 <TIM_OC3_SetConfig+0x10c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d113      	bne.n	8004b56 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	621a      	str	r2, [r3, #32]
}
 8004b70:	bf00      	nop
 8004b72:	371c      	adds	r7, #28
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	fffeff8f 	.word	0xfffeff8f
 8004b80:	40010000 	.word	0x40010000
 8004b84:	40010400 	.word	0x40010400
 8004b88:	40014000 	.word	0x40014000
 8004b8c:	40014400 	.word	0x40014400
 8004b90:	40014800 	.word	0x40014800

08004b94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4b24      	ldr	r3, [pc, #144]	; (8004c50 <TIM_OC4_SetConfig+0xbc>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	021b      	lsls	r3, r3, #8
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	031b      	lsls	r3, r3, #12
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a19      	ldr	r2, [pc, #100]	; (8004c54 <TIM_OC4_SetConfig+0xc0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00f      	beq.n	8004c14 <TIM_OC4_SetConfig+0x80>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a18      	ldr	r2, [pc, #96]	; (8004c58 <TIM_OC4_SetConfig+0xc4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00b      	beq.n	8004c14 <TIM_OC4_SetConfig+0x80>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a17      	ldr	r2, [pc, #92]	; (8004c5c <TIM_OC4_SetConfig+0xc8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d007      	beq.n	8004c14 <TIM_OC4_SetConfig+0x80>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a16      	ldr	r2, [pc, #88]	; (8004c60 <TIM_OC4_SetConfig+0xcc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d003      	beq.n	8004c14 <TIM_OC4_SetConfig+0x80>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a15      	ldr	r2, [pc, #84]	; (8004c64 <TIM_OC4_SetConfig+0xd0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d109      	bne.n	8004c28 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	019b      	lsls	r3, r3, #6
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	621a      	str	r2, [r3, #32]
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	feff8fff 	.word	0xfeff8fff
 8004c54:	40010000 	.word	0x40010000
 8004c58:	40010400 	.word	0x40010400
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	40014400 	.word	0x40014400
 8004c64:	40014800 	.word	0x40014800

08004c68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4b21      	ldr	r3, [pc, #132]	; (8004d18 <TIM_OC5_SetConfig+0xb0>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ca8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a18      	ldr	r2, [pc, #96]	; (8004d1c <TIM_OC5_SetConfig+0xb4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00f      	beq.n	8004cde <TIM_OC5_SetConfig+0x76>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a17      	ldr	r2, [pc, #92]	; (8004d20 <TIM_OC5_SetConfig+0xb8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00b      	beq.n	8004cde <TIM_OC5_SetConfig+0x76>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a16      	ldr	r2, [pc, #88]	; (8004d24 <TIM_OC5_SetConfig+0xbc>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d007      	beq.n	8004cde <TIM_OC5_SetConfig+0x76>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a15      	ldr	r2, [pc, #84]	; (8004d28 <TIM_OC5_SetConfig+0xc0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d003      	beq.n	8004cde <TIM_OC5_SetConfig+0x76>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a14      	ldr	r2, [pc, #80]	; (8004d2c <TIM_OC5_SetConfig+0xc4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d109      	bne.n	8004cf2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	021b      	lsls	r3, r3, #8
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	621a      	str	r2, [r3, #32]
}
 8004d0c:	bf00      	nop
 8004d0e:	371c      	adds	r7, #28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	fffeff8f 	.word	0xfffeff8f
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40010400 	.word	0x40010400
 8004d24:	40014000 	.word	0x40014000
 8004d28:	40014400 	.word	0x40014400
 8004d2c:	40014800 	.word	0x40014800

08004d30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4b22      	ldr	r3, [pc, #136]	; (8004de4 <TIM_OC6_SetConfig+0xb4>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	021b      	lsls	r3, r3, #8
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	051b      	lsls	r3, r3, #20
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a19      	ldr	r2, [pc, #100]	; (8004de8 <TIM_OC6_SetConfig+0xb8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00f      	beq.n	8004da8 <TIM_OC6_SetConfig+0x78>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a18      	ldr	r2, [pc, #96]	; (8004dec <TIM_OC6_SetConfig+0xbc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00b      	beq.n	8004da8 <TIM_OC6_SetConfig+0x78>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a17      	ldr	r2, [pc, #92]	; (8004df0 <TIM_OC6_SetConfig+0xc0>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d007      	beq.n	8004da8 <TIM_OC6_SetConfig+0x78>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a16      	ldr	r2, [pc, #88]	; (8004df4 <TIM_OC6_SetConfig+0xc4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d003      	beq.n	8004da8 <TIM_OC6_SetConfig+0x78>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a15      	ldr	r2, [pc, #84]	; (8004df8 <TIM_OC6_SetConfig+0xc8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d109      	bne.n	8004dbc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	029b      	lsls	r3, r3, #10
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	621a      	str	r2, [r3, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	feff8fff 	.word	0xfeff8fff
 8004de8:	40010000 	.word	0x40010000
 8004dec:	40010400 	.word	0x40010400
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40014400 	.word	0x40014400
 8004df8:	40014800 	.word	0x40014800

08004dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f023 0201 	bic.w	r2, r3, #1
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 030a 	bic.w	r3, r3, #10
 8004e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b087      	sub	sp, #28
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f023 0210 	bic.w	r2, r3, #16
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	031b      	lsls	r3, r3, #12
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	621a      	str	r2, [r3, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
	...

08004ebc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <TIM_ITRx_SetConfig+0x38>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	f043 0307 	orr.w	r3, r3, #7
 8004ede:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	609a      	str	r2, [r3, #8]
}
 8004ee6:	bf00      	nop
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	ffcfff8f 	.word	0xffcfff8f

08004ef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	021a      	lsls	r2, r3, #8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	609a      	str	r2, [r3, #8]
}
 8004f2c:	bf00      	nop
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1a      	ldr	r2, [r3, #32]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	401a      	ands	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a1a      	ldr	r2, [r3, #32]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 031f 	and.w	r3, r3, #31
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f70:	431a      	orrs	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	621a      	str	r2, [r3, #32]
}
 8004f76:	bf00      	nop
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
	...

08004f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e06d      	b.n	8005078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a30      	ldr	r2, [pc, #192]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d004      	beq.n	8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a2f      	ldr	r2, [pc, #188]	; (8005088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d108      	bne.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004fd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a20      	ldr	r2, [pc, #128]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d022      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500e:	d01d      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1d      	ldr	r2, [pc, #116]	; (800508c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d018      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1c      	ldr	r2, [pc, #112]	; (8005090 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d013      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1a      	ldr	r2, [pc, #104]	; (8005094 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00e      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a15      	ldr	r2, [pc, #84]	; (8005088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d009      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a16      	ldr	r2, [pc, #88]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d004      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a15      	ldr	r2, [pc, #84]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d10c      	bne.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005052:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	4313      	orrs	r3, r2
 800505c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	40010000 	.word	0x40010000
 8005088:	40010400 	.word	0x40010400
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40001800 	.word	0x40001800
 800509c:	40014000 	.word	0x40014000

080050a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e065      	b.n	8005188 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	041b      	lsls	r3, r3, #16
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a16      	ldr	r2, [pc, #88]	; (8005194 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d004      	beq.n	800514a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a14      	ldr	r2, [pc, #80]	; (8005198 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d115      	bne.n	8005176 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	051b      	lsls	r3, r3, #20
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	40010000 	.word	0x40010000
 8005198:	40010400 	.word	0x40010400

0800519c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e042      	b.n	8005234 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d106      	bne.n	80051c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7fb fe75 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2224      	movs	r2, #36	; 0x24
 80051ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0201 	bic.w	r2, r2, #1
 80051dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f82c 	bl	800523c <UART_SetConfig>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e022      	b.n	8005234 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fd80 	bl	8005cfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800520a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800521a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fe07 	bl	8005e40 <UART_CheckIdleState>
 8005232:	4603      	mov	r3, r0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800523c:	b5b0      	push	{r4, r5, r7, lr}
 800523e:	b08e      	sub	sp, #56	; 0x38
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	4313      	orrs	r3, r2
 8005260:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	4bbf      	ldr	r3, [pc, #764]	; (8005568 <UART_SetConfig+0x32c>)
 800526a:	4013      	ands	r3, r2
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005272:	430b      	orrs	r3, r1
 8005274:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4ab5      	ldr	r2, [pc, #724]	; (800556c <UART_SetConfig+0x330>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d004      	beq.n	80052a6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052a2:	4313      	orrs	r3, r2
 80052a4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	4bb0      	ldr	r3, [pc, #704]	; (8005570 <UART_SetConfig+0x334>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052b6:	430b      	orrs	r3, r1
 80052b8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	f023 010f 	bic.w	r1, r3, #15
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4aa7      	ldr	r2, [pc, #668]	; (8005574 <UART_SetConfig+0x338>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d176      	bne.n	80053c8 <UART_SetConfig+0x18c>
 80052da:	4ba7      	ldr	r3, [pc, #668]	; (8005578 <UART_SetConfig+0x33c>)
 80052dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052e2:	2b28      	cmp	r3, #40	; 0x28
 80052e4:	d86c      	bhi.n	80053c0 <UART_SetConfig+0x184>
 80052e6:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <UART_SetConfig+0xb0>)
 80052e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ec:	08005391 	.word	0x08005391
 80052f0:	080053c1 	.word	0x080053c1
 80052f4:	080053c1 	.word	0x080053c1
 80052f8:	080053c1 	.word	0x080053c1
 80052fc:	080053c1 	.word	0x080053c1
 8005300:	080053c1 	.word	0x080053c1
 8005304:	080053c1 	.word	0x080053c1
 8005308:	080053c1 	.word	0x080053c1
 800530c:	08005399 	.word	0x08005399
 8005310:	080053c1 	.word	0x080053c1
 8005314:	080053c1 	.word	0x080053c1
 8005318:	080053c1 	.word	0x080053c1
 800531c:	080053c1 	.word	0x080053c1
 8005320:	080053c1 	.word	0x080053c1
 8005324:	080053c1 	.word	0x080053c1
 8005328:	080053c1 	.word	0x080053c1
 800532c:	080053a1 	.word	0x080053a1
 8005330:	080053c1 	.word	0x080053c1
 8005334:	080053c1 	.word	0x080053c1
 8005338:	080053c1 	.word	0x080053c1
 800533c:	080053c1 	.word	0x080053c1
 8005340:	080053c1 	.word	0x080053c1
 8005344:	080053c1 	.word	0x080053c1
 8005348:	080053c1 	.word	0x080053c1
 800534c:	080053a9 	.word	0x080053a9
 8005350:	080053c1 	.word	0x080053c1
 8005354:	080053c1 	.word	0x080053c1
 8005358:	080053c1 	.word	0x080053c1
 800535c:	080053c1 	.word	0x080053c1
 8005360:	080053c1 	.word	0x080053c1
 8005364:	080053c1 	.word	0x080053c1
 8005368:	080053c1 	.word	0x080053c1
 800536c:	080053b1 	.word	0x080053b1
 8005370:	080053c1 	.word	0x080053c1
 8005374:	080053c1 	.word	0x080053c1
 8005378:	080053c1 	.word	0x080053c1
 800537c:	080053c1 	.word	0x080053c1
 8005380:	080053c1 	.word	0x080053c1
 8005384:	080053c1 	.word	0x080053c1
 8005388:	080053c1 	.word	0x080053c1
 800538c:	080053b9 	.word	0x080053b9
 8005390:	2301      	movs	r3, #1
 8005392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005396:	e222      	b.n	80057de <UART_SetConfig+0x5a2>
 8005398:	2304      	movs	r3, #4
 800539a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800539e:	e21e      	b.n	80057de <UART_SetConfig+0x5a2>
 80053a0:	2308      	movs	r3, #8
 80053a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053a6:	e21a      	b.n	80057de <UART_SetConfig+0x5a2>
 80053a8:	2310      	movs	r3, #16
 80053aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ae:	e216      	b.n	80057de <UART_SetConfig+0x5a2>
 80053b0:	2320      	movs	r3, #32
 80053b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053b6:	e212      	b.n	80057de <UART_SetConfig+0x5a2>
 80053b8:	2340      	movs	r3, #64	; 0x40
 80053ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053be:	e20e      	b.n	80057de <UART_SetConfig+0x5a2>
 80053c0:	2380      	movs	r3, #128	; 0x80
 80053c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053c6:	e20a      	b.n	80057de <UART_SetConfig+0x5a2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a6b      	ldr	r2, [pc, #428]	; (800557c <UART_SetConfig+0x340>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d130      	bne.n	8005434 <UART_SetConfig+0x1f8>
 80053d2:	4b69      	ldr	r3, [pc, #420]	; (8005578 <UART_SetConfig+0x33c>)
 80053d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b05      	cmp	r3, #5
 80053dc:	d826      	bhi.n	800542c <UART_SetConfig+0x1f0>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <UART_SetConfig+0x1a8>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	080053fd 	.word	0x080053fd
 80053e8:	08005405 	.word	0x08005405
 80053ec:	0800540d 	.word	0x0800540d
 80053f0:	08005415 	.word	0x08005415
 80053f4:	0800541d 	.word	0x0800541d
 80053f8:	08005425 	.word	0x08005425
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005402:	e1ec      	b.n	80057de <UART_SetConfig+0x5a2>
 8005404:	2304      	movs	r3, #4
 8005406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800540a:	e1e8      	b.n	80057de <UART_SetConfig+0x5a2>
 800540c:	2308      	movs	r3, #8
 800540e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005412:	e1e4      	b.n	80057de <UART_SetConfig+0x5a2>
 8005414:	2310      	movs	r3, #16
 8005416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800541a:	e1e0      	b.n	80057de <UART_SetConfig+0x5a2>
 800541c:	2320      	movs	r3, #32
 800541e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005422:	e1dc      	b.n	80057de <UART_SetConfig+0x5a2>
 8005424:	2340      	movs	r3, #64	; 0x40
 8005426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800542a:	e1d8      	b.n	80057de <UART_SetConfig+0x5a2>
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005432:	e1d4      	b.n	80057de <UART_SetConfig+0x5a2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a51      	ldr	r2, [pc, #324]	; (8005580 <UART_SetConfig+0x344>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d130      	bne.n	80054a0 <UART_SetConfig+0x264>
 800543e:	4b4e      	ldr	r3, [pc, #312]	; (8005578 <UART_SetConfig+0x33c>)
 8005440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	2b05      	cmp	r3, #5
 8005448:	d826      	bhi.n	8005498 <UART_SetConfig+0x25c>
 800544a:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <UART_SetConfig+0x214>)
 800544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005450:	08005469 	.word	0x08005469
 8005454:	08005471 	.word	0x08005471
 8005458:	08005479 	.word	0x08005479
 800545c:	08005481 	.word	0x08005481
 8005460:	08005489 	.word	0x08005489
 8005464:	08005491 	.word	0x08005491
 8005468:	2300      	movs	r3, #0
 800546a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800546e:	e1b6      	b.n	80057de <UART_SetConfig+0x5a2>
 8005470:	2304      	movs	r3, #4
 8005472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005476:	e1b2      	b.n	80057de <UART_SetConfig+0x5a2>
 8005478:	2308      	movs	r3, #8
 800547a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800547e:	e1ae      	b.n	80057de <UART_SetConfig+0x5a2>
 8005480:	2310      	movs	r3, #16
 8005482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005486:	e1aa      	b.n	80057de <UART_SetConfig+0x5a2>
 8005488:	2320      	movs	r3, #32
 800548a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800548e:	e1a6      	b.n	80057de <UART_SetConfig+0x5a2>
 8005490:	2340      	movs	r3, #64	; 0x40
 8005492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005496:	e1a2      	b.n	80057de <UART_SetConfig+0x5a2>
 8005498:	2380      	movs	r3, #128	; 0x80
 800549a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800549e:	e19e      	b.n	80057de <UART_SetConfig+0x5a2>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a37      	ldr	r2, [pc, #220]	; (8005584 <UART_SetConfig+0x348>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d130      	bne.n	800550c <UART_SetConfig+0x2d0>
 80054aa:	4b33      	ldr	r3, [pc, #204]	; (8005578 <UART_SetConfig+0x33c>)
 80054ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	2b05      	cmp	r3, #5
 80054b4:	d826      	bhi.n	8005504 <UART_SetConfig+0x2c8>
 80054b6:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <UART_SetConfig+0x280>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	080054d5 	.word	0x080054d5
 80054c0:	080054dd 	.word	0x080054dd
 80054c4:	080054e5 	.word	0x080054e5
 80054c8:	080054ed 	.word	0x080054ed
 80054cc:	080054f5 	.word	0x080054f5
 80054d0:	080054fd 	.word	0x080054fd
 80054d4:	2300      	movs	r3, #0
 80054d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054da:	e180      	b.n	80057de <UART_SetConfig+0x5a2>
 80054dc:	2304      	movs	r3, #4
 80054de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054e2:	e17c      	b.n	80057de <UART_SetConfig+0x5a2>
 80054e4:	2308      	movs	r3, #8
 80054e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ea:	e178      	b.n	80057de <UART_SetConfig+0x5a2>
 80054ec:	2310      	movs	r3, #16
 80054ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054f2:	e174      	b.n	80057de <UART_SetConfig+0x5a2>
 80054f4:	2320      	movs	r3, #32
 80054f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054fa:	e170      	b.n	80057de <UART_SetConfig+0x5a2>
 80054fc:	2340      	movs	r3, #64	; 0x40
 80054fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005502:	e16c      	b.n	80057de <UART_SetConfig+0x5a2>
 8005504:	2380      	movs	r3, #128	; 0x80
 8005506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800550a:	e168      	b.n	80057de <UART_SetConfig+0x5a2>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a1d      	ldr	r2, [pc, #116]	; (8005588 <UART_SetConfig+0x34c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d142      	bne.n	800559c <UART_SetConfig+0x360>
 8005516:	4b18      	ldr	r3, [pc, #96]	; (8005578 <UART_SetConfig+0x33c>)
 8005518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	2b05      	cmp	r3, #5
 8005520:	d838      	bhi.n	8005594 <UART_SetConfig+0x358>
 8005522:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <UART_SetConfig+0x2ec>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	08005541 	.word	0x08005541
 800552c:	08005549 	.word	0x08005549
 8005530:	08005551 	.word	0x08005551
 8005534:	08005559 	.word	0x08005559
 8005538:	08005561 	.word	0x08005561
 800553c:	0800558d 	.word	0x0800558d
 8005540:	2300      	movs	r3, #0
 8005542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005546:	e14a      	b.n	80057de <UART_SetConfig+0x5a2>
 8005548:	2304      	movs	r3, #4
 800554a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800554e:	e146      	b.n	80057de <UART_SetConfig+0x5a2>
 8005550:	2308      	movs	r3, #8
 8005552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005556:	e142      	b.n	80057de <UART_SetConfig+0x5a2>
 8005558:	2310      	movs	r3, #16
 800555a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800555e:	e13e      	b.n	80057de <UART_SetConfig+0x5a2>
 8005560:	2320      	movs	r3, #32
 8005562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005566:	e13a      	b.n	80057de <UART_SetConfig+0x5a2>
 8005568:	cfff69f3 	.word	0xcfff69f3
 800556c:	58000c00 	.word	0x58000c00
 8005570:	11fff4ff 	.word	0x11fff4ff
 8005574:	40011000 	.word	0x40011000
 8005578:	58024400 	.word	0x58024400
 800557c:	40004400 	.word	0x40004400
 8005580:	40004800 	.word	0x40004800
 8005584:	40004c00 	.word	0x40004c00
 8005588:	40005000 	.word	0x40005000
 800558c:	2340      	movs	r3, #64	; 0x40
 800558e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005592:	e124      	b.n	80057de <UART_SetConfig+0x5a2>
 8005594:	2380      	movs	r3, #128	; 0x80
 8005596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800559a:	e120      	b.n	80057de <UART_SetConfig+0x5a2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4acc      	ldr	r2, [pc, #816]	; (80058d4 <UART_SetConfig+0x698>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d176      	bne.n	8005694 <UART_SetConfig+0x458>
 80055a6:	4bcc      	ldr	r3, [pc, #816]	; (80058d8 <UART_SetConfig+0x69c>)
 80055a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055ae:	2b28      	cmp	r3, #40	; 0x28
 80055b0:	d86c      	bhi.n	800568c <UART_SetConfig+0x450>
 80055b2:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <UART_SetConfig+0x37c>)
 80055b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b8:	0800565d 	.word	0x0800565d
 80055bc:	0800568d 	.word	0x0800568d
 80055c0:	0800568d 	.word	0x0800568d
 80055c4:	0800568d 	.word	0x0800568d
 80055c8:	0800568d 	.word	0x0800568d
 80055cc:	0800568d 	.word	0x0800568d
 80055d0:	0800568d 	.word	0x0800568d
 80055d4:	0800568d 	.word	0x0800568d
 80055d8:	08005665 	.word	0x08005665
 80055dc:	0800568d 	.word	0x0800568d
 80055e0:	0800568d 	.word	0x0800568d
 80055e4:	0800568d 	.word	0x0800568d
 80055e8:	0800568d 	.word	0x0800568d
 80055ec:	0800568d 	.word	0x0800568d
 80055f0:	0800568d 	.word	0x0800568d
 80055f4:	0800568d 	.word	0x0800568d
 80055f8:	0800566d 	.word	0x0800566d
 80055fc:	0800568d 	.word	0x0800568d
 8005600:	0800568d 	.word	0x0800568d
 8005604:	0800568d 	.word	0x0800568d
 8005608:	0800568d 	.word	0x0800568d
 800560c:	0800568d 	.word	0x0800568d
 8005610:	0800568d 	.word	0x0800568d
 8005614:	0800568d 	.word	0x0800568d
 8005618:	08005675 	.word	0x08005675
 800561c:	0800568d 	.word	0x0800568d
 8005620:	0800568d 	.word	0x0800568d
 8005624:	0800568d 	.word	0x0800568d
 8005628:	0800568d 	.word	0x0800568d
 800562c:	0800568d 	.word	0x0800568d
 8005630:	0800568d 	.word	0x0800568d
 8005634:	0800568d 	.word	0x0800568d
 8005638:	0800567d 	.word	0x0800567d
 800563c:	0800568d 	.word	0x0800568d
 8005640:	0800568d 	.word	0x0800568d
 8005644:	0800568d 	.word	0x0800568d
 8005648:	0800568d 	.word	0x0800568d
 800564c:	0800568d 	.word	0x0800568d
 8005650:	0800568d 	.word	0x0800568d
 8005654:	0800568d 	.word	0x0800568d
 8005658:	08005685 	.word	0x08005685
 800565c:	2301      	movs	r3, #1
 800565e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005662:	e0bc      	b.n	80057de <UART_SetConfig+0x5a2>
 8005664:	2304      	movs	r3, #4
 8005666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800566a:	e0b8      	b.n	80057de <UART_SetConfig+0x5a2>
 800566c:	2308      	movs	r3, #8
 800566e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005672:	e0b4      	b.n	80057de <UART_SetConfig+0x5a2>
 8005674:	2310      	movs	r3, #16
 8005676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800567a:	e0b0      	b.n	80057de <UART_SetConfig+0x5a2>
 800567c:	2320      	movs	r3, #32
 800567e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005682:	e0ac      	b.n	80057de <UART_SetConfig+0x5a2>
 8005684:	2340      	movs	r3, #64	; 0x40
 8005686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800568a:	e0a8      	b.n	80057de <UART_SetConfig+0x5a2>
 800568c:	2380      	movs	r3, #128	; 0x80
 800568e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005692:	e0a4      	b.n	80057de <UART_SetConfig+0x5a2>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a90      	ldr	r2, [pc, #576]	; (80058dc <UART_SetConfig+0x6a0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d130      	bne.n	8005700 <UART_SetConfig+0x4c4>
 800569e:	4b8e      	ldr	r3, [pc, #568]	; (80058d8 <UART_SetConfig+0x69c>)
 80056a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	2b05      	cmp	r3, #5
 80056a8:	d826      	bhi.n	80056f8 <UART_SetConfig+0x4bc>
 80056aa:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <UART_SetConfig+0x474>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	080056c9 	.word	0x080056c9
 80056b4:	080056d1 	.word	0x080056d1
 80056b8:	080056d9 	.word	0x080056d9
 80056bc:	080056e1 	.word	0x080056e1
 80056c0:	080056e9 	.word	0x080056e9
 80056c4:	080056f1 	.word	0x080056f1
 80056c8:	2300      	movs	r3, #0
 80056ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ce:	e086      	b.n	80057de <UART_SetConfig+0x5a2>
 80056d0:	2304      	movs	r3, #4
 80056d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056d6:	e082      	b.n	80057de <UART_SetConfig+0x5a2>
 80056d8:	2308      	movs	r3, #8
 80056da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056de:	e07e      	b.n	80057de <UART_SetConfig+0x5a2>
 80056e0:	2310      	movs	r3, #16
 80056e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056e6:	e07a      	b.n	80057de <UART_SetConfig+0x5a2>
 80056e8:	2320      	movs	r3, #32
 80056ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ee:	e076      	b.n	80057de <UART_SetConfig+0x5a2>
 80056f0:	2340      	movs	r3, #64	; 0x40
 80056f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056f6:	e072      	b.n	80057de <UART_SetConfig+0x5a2>
 80056f8:	2380      	movs	r3, #128	; 0x80
 80056fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056fe:	e06e      	b.n	80057de <UART_SetConfig+0x5a2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a76      	ldr	r2, [pc, #472]	; (80058e0 <UART_SetConfig+0x6a4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d130      	bne.n	800576c <UART_SetConfig+0x530>
 800570a:	4b73      	ldr	r3, [pc, #460]	; (80058d8 <UART_SetConfig+0x69c>)
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	2b05      	cmp	r3, #5
 8005714:	d826      	bhi.n	8005764 <UART_SetConfig+0x528>
 8005716:	a201      	add	r2, pc, #4	; (adr r2, 800571c <UART_SetConfig+0x4e0>)
 8005718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571c:	08005735 	.word	0x08005735
 8005720:	0800573d 	.word	0x0800573d
 8005724:	08005745 	.word	0x08005745
 8005728:	0800574d 	.word	0x0800574d
 800572c:	08005755 	.word	0x08005755
 8005730:	0800575d 	.word	0x0800575d
 8005734:	2300      	movs	r3, #0
 8005736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800573a:	e050      	b.n	80057de <UART_SetConfig+0x5a2>
 800573c:	2304      	movs	r3, #4
 800573e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005742:	e04c      	b.n	80057de <UART_SetConfig+0x5a2>
 8005744:	2308      	movs	r3, #8
 8005746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800574a:	e048      	b.n	80057de <UART_SetConfig+0x5a2>
 800574c:	2310      	movs	r3, #16
 800574e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005752:	e044      	b.n	80057de <UART_SetConfig+0x5a2>
 8005754:	2320      	movs	r3, #32
 8005756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800575a:	e040      	b.n	80057de <UART_SetConfig+0x5a2>
 800575c:	2340      	movs	r3, #64	; 0x40
 800575e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005762:	e03c      	b.n	80057de <UART_SetConfig+0x5a2>
 8005764:	2380      	movs	r3, #128	; 0x80
 8005766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800576a:	e038      	b.n	80057de <UART_SetConfig+0x5a2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a5c      	ldr	r2, [pc, #368]	; (80058e4 <UART_SetConfig+0x6a8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d130      	bne.n	80057d8 <UART_SetConfig+0x59c>
 8005776:	4b58      	ldr	r3, [pc, #352]	; (80058d8 <UART_SetConfig+0x69c>)
 8005778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	2b05      	cmp	r3, #5
 8005780:	d826      	bhi.n	80057d0 <UART_SetConfig+0x594>
 8005782:	a201      	add	r2, pc, #4	; (adr r2, 8005788 <UART_SetConfig+0x54c>)
 8005784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005788:	080057a1 	.word	0x080057a1
 800578c:	080057a9 	.word	0x080057a9
 8005790:	080057b1 	.word	0x080057b1
 8005794:	080057b9 	.word	0x080057b9
 8005798:	080057c1 	.word	0x080057c1
 800579c:	080057c9 	.word	0x080057c9
 80057a0:	2302      	movs	r3, #2
 80057a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057a6:	e01a      	b.n	80057de <UART_SetConfig+0x5a2>
 80057a8:	2304      	movs	r3, #4
 80057aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ae:	e016      	b.n	80057de <UART_SetConfig+0x5a2>
 80057b0:	2308      	movs	r3, #8
 80057b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057b6:	e012      	b.n	80057de <UART_SetConfig+0x5a2>
 80057b8:	2310      	movs	r3, #16
 80057ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057be:	e00e      	b.n	80057de <UART_SetConfig+0x5a2>
 80057c0:	2320      	movs	r3, #32
 80057c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057c6:	e00a      	b.n	80057de <UART_SetConfig+0x5a2>
 80057c8:	2340      	movs	r3, #64	; 0x40
 80057ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ce:	e006      	b.n	80057de <UART_SetConfig+0x5a2>
 80057d0:	2380      	movs	r3, #128	; 0x80
 80057d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057d6:	e002      	b.n	80057de <UART_SetConfig+0x5a2>
 80057d8:	2380      	movs	r3, #128	; 0x80
 80057da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a40      	ldr	r2, [pc, #256]	; (80058e4 <UART_SetConfig+0x6a8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	f040 80ef 	bne.w	80059c8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	dc46      	bgt.n	8005880 <UART_SetConfig+0x644>
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	f2c0 8081 	blt.w	80058fa <UART_SetConfig+0x6be>
 80057f8:	3b02      	subs	r3, #2
 80057fa:	2b1e      	cmp	r3, #30
 80057fc:	d87d      	bhi.n	80058fa <UART_SetConfig+0x6be>
 80057fe:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <UART_SetConfig+0x5c8>)
 8005800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005804:	08005887 	.word	0x08005887
 8005808:	080058fb 	.word	0x080058fb
 800580c:	0800588f 	.word	0x0800588f
 8005810:	080058fb 	.word	0x080058fb
 8005814:	080058fb 	.word	0x080058fb
 8005818:	080058fb 	.word	0x080058fb
 800581c:	0800589f 	.word	0x0800589f
 8005820:	080058fb 	.word	0x080058fb
 8005824:	080058fb 	.word	0x080058fb
 8005828:	080058fb 	.word	0x080058fb
 800582c:	080058fb 	.word	0x080058fb
 8005830:	080058fb 	.word	0x080058fb
 8005834:	080058fb 	.word	0x080058fb
 8005838:	080058fb 	.word	0x080058fb
 800583c:	080058af 	.word	0x080058af
 8005840:	080058fb 	.word	0x080058fb
 8005844:	080058fb 	.word	0x080058fb
 8005848:	080058fb 	.word	0x080058fb
 800584c:	080058fb 	.word	0x080058fb
 8005850:	080058fb 	.word	0x080058fb
 8005854:	080058fb 	.word	0x080058fb
 8005858:	080058fb 	.word	0x080058fb
 800585c:	080058fb 	.word	0x080058fb
 8005860:	080058fb 	.word	0x080058fb
 8005864:	080058fb 	.word	0x080058fb
 8005868:	080058fb 	.word	0x080058fb
 800586c:	080058fb 	.word	0x080058fb
 8005870:	080058fb 	.word	0x080058fb
 8005874:	080058fb 	.word	0x080058fb
 8005878:	080058fb 	.word	0x080058fb
 800587c:	080058ed 	.word	0x080058ed
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	d036      	beq.n	80058f2 <UART_SetConfig+0x6b6>
 8005884:	e039      	b.n	80058fa <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005886:	f7fd ff55 	bl	8003734 <HAL_RCCEx_GetD3PCLK1Freq>
 800588a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800588c:	e03b      	b.n	8005906 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800588e:	f107 0314 	add.w	r3, r7, #20
 8005892:	4618      	mov	r0, r3
 8005894:	f7fd ff64 	bl	8003760 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800589c:	e033      	b.n	8005906 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800589e:	f107 0308 	add.w	r3, r7, #8
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fe f8b0 	bl	8003a08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058ac:	e02b      	b.n	8005906 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058ae:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <UART_SetConfig+0x69c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d009      	beq.n	80058ce <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058ba:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <UART_SetConfig+0x69c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	08db      	lsrs	r3, r3, #3
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	4a08      	ldr	r2, [pc, #32]	; (80058e8 <UART_SetConfig+0x6ac>)
 80058c6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058cc:	e01b      	b.n	8005906 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80058ce:	4b06      	ldr	r3, [pc, #24]	; (80058e8 <UART_SetConfig+0x6ac>)
 80058d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058d2:	e018      	b.n	8005906 <UART_SetConfig+0x6ca>
 80058d4:	40011400 	.word	0x40011400
 80058d8:	58024400 	.word	0x58024400
 80058dc:	40007800 	.word	0x40007800
 80058e0:	40007c00 	.word	0x40007c00
 80058e4:	58000c00 	.word	0x58000c00
 80058e8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058ec:	4bc4      	ldr	r3, [pc, #784]	; (8005c00 <UART_SetConfig+0x9c4>)
 80058ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058f0:	e009      	b.n	8005906 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058f8:	e005      	b.n	8005906 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005904:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 81da 	beq.w	8005cc2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	4abc      	ldr	r2, [pc, #752]	; (8005c04 <UART_SetConfig+0x9c8>)
 8005914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005918:	461a      	mov	r2, r3
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005920:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	4613      	mov	r3, r2
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	4413      	add	r3, r2
 800592c:	6a3a      	ldr	r2, [r7, #32]
 800592e:	429a      	cmp	r2, r3
 8005930:	d305      	bcc.n	800593e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005938:	6a3a      	ldr	r2, [r7, #32]
 800593a:	429a      	cmp	r2, r3
 800593c:	d903      	bls.n	8005946 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005944:	e1bd      	b.n	8005cc2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005948:	4618      	mov	r0, r3
 800594a:	f04f 0100 	mov.w	r1, #0
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	4aac      	ldr	r2, [pc, #688]	; (8005c04 <UART_SetConfig+0x9c8>)
 8005954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005958:	b29a      	uxth	r2, r3
 800595a:	f04f 0300 	mov.w	r3, #0
 800595e:	f7fa fcbb 	bl	80002d8 <__aeabi_uldivmod>
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	4610      	mov	r0, r2
 8005968:	4619      	mov	r1, r3
 800596a:	f04f 0200 	mov.w	r2, #0
 800596e:	f04f 0300 	mov.w	r3, #0
 8005972:	020b      	lsls	r3, r1, #8
 8005974:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005978:	0202      	lsls	r2, r0, #8
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	6849      	ldr	r1, [r1, #4]
 800597e:	0849      	lsrs	r1, r1, #1
 8005980:	4608      	mov	r0, r1
 8005982:	f04f 0100 	mov.w	r1, #0
 8005986:	1814      	adds	r4, r2, r0
 8005988:	eb43 0501 	adc.w	r5, r3, r1
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	461a      	mov	r2, r3
 8005992:	f04f 0300 	mov.w	r3, #0
 8005996:	4620      	mov	r0, r4
 8005998:	4629      	mov	r1, r5
 800599a:	f7fa fc9d 	bl	80002d8 <__aeabi_uldivmod>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4613      	mov	r3, r2
 80059a4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ac:	d308      	bcc.n	80059c0 <UART_SetConfig+0x784>
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059b4:	d204      	bcs.n	80059c0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059bc:	60da      	str	r2, [r3, #12]
 80059be:	e180      	b.n	8005cc2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80059c6:	e17c      	b.n	8005cc2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d0:	f040 80be 	bne.w	8005b50 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 80059d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059d8:	2b20      	cmp	r3, #32
 80059da:	dc49      	bgt.n	8005a70 <UART_SetConfig+0x834>
 80059dc:	2b00      	cmp	r3, #0
 80059de:	db7c      	blt.n	8005ada <UART_SetConfig+0x89e>
 80059e0:	2b20      	cmp	r3, #32
 80059e2:	d87a      	bhi.n	8005ada <UART_SetConfig+0x89e>
 80059e4:	a201      	add	r2, pc, #4	; (adr r2, 80059ec <UART_SetConfig+0x7b0>)
 80059e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ea:	bf00      	nop
 80059ec:	08005a77 	.word	0x08005a77
 80059f0:	08005a7f 	.word	0x08005a7f
 80059f4:	08005adb 	.word	0x08005adb
 80059f8:	08005adb 	.word	0x08005adb
 80059fc:	08005a87 	.word	0x08005a87
 8005a00:	08005adb 	.word	0x08005adb
 8005a04:	08005adb 	.word	0x08005adb
 8005a08:	08005adb 	.word	0x08005adb
 8005a0c:	08005a97 	.word	0x08005a97
 8005a10:	08005adb 	.word	0x08005adb
 8005a14:	08005adb 	.word	0x08005adb
 8005a18:	08005adb 	.word	0x08005adb
 8005a1c:	08005adb 	.word	0x08005adb
 8005a20:	08005adb 	.word	0x08005adb
 8005a24:	08005adb 	.word	0x08005adb
 8005a28:	08005adb 	.word	0x08005adb
 8005a2c:	08005aa7 	.word	0x08005aa7
 8005a30:	08005adb 	.word	0x08005adb
 8005a34:	08005adb 	.word	0x08005adb
 8005a38:	08005adb 	.word	0x08005adb
 8005a3c:	08005adb 	.word	0x08005adb
 8005a40:	08005adb 	.word	0x08005adb
 8005a44:	08005adb 	.word	0x08005adb
 8005a48:	08005adb 	.word	0x08005adb
 8005a4c:	08005adb 	.word	0x08005adb
 8005a50:	08005adb 	.word	0x08005adb
 8005a54:	08005adb 	.word	0x08005adb
 8005a58:	08005adb 	.word	0x08005adb
 8005a5c:	08005adb 	.word	0x08005adb
 8005a60:	08005adb 	.word	0x08005adb
 8005a64:	08005adb 	.word	0x08005adb
 8005a68:	08005adb 	.word	0x08005adb
 8005a6c:	08005acd 	.word	0x08005acd
 8005a70:	2b40      	cmp	r3, #64	; 0x40
 8005a72:	d02e      	beq.n	8005ad2 <UART_SetConfig+0x896>
 8005a74:	e031      	b.n	8005ada <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a76:	f7fc fef1 	bl	800285c <HAL_RCC_GetPCLK1Freq>
 8005a7a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005a7c:	e033      	b.n	8005ae6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a7e:	f7fc ff03 	bl	8002888 <HAL_RCC_GetPCLK2Freq>
 8005a82:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005a84:	e02f      	b.n	8005ae6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a86:	f107 0314 	add.w	r3, r7, #20
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fd fe68 	bl	8003760 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a94:	e027      	b.n	8005ae6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a96:	f107 0308 	add.w	r3, r7, #8
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fd ffb4 	bl	8003a08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005aa4:	e01f      	b.n	8005ae6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aa6:	4b58      	ldr	r3, [pc, #352]	; (8005c08 <UART_SetConfig+0x9cc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d009      	beq.n	8005ac6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ab2:	4b55      	ldr	r3, [pc, #340]	; (8005c08 <UART_SetConfig+0x9cc>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	08db      	lsrs	r3, r3, #3
 8005ab8:	f003 0303 	and.w	r3, r3, #3
 8005abc:	4a53      	ldr	r2, [pc, #332]	; (8005c0c <UART_SetConfig+0x9d0>)
 8005abe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ac4:	e00f      	b.n	8005ae6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8005ac6:	4b51      	ldr	r3, [pc, #324]	; (8005c0c <UART_SetConfig+0x9d0>)
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005aca:	e00c      	b.n	8005ae6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005acc:	4b4c      	ldr	r3, [pc, #304]	; (8005c00 <UART_SetConfig+0x9c4>)
 8005ace:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ad0:	e009      	b.n	8005ae6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ad8:	e005      	b.n	8005ae6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005ae4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 80ea 	beq.w	8005cc2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	4a44      	ldr	r2, [pc, #272]	; (8005c04 <UART_SetConfig+0x9c8>)
 8005af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005af8:	461a      	mov	r2, r3
 8005afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b00:	005a      	lsls	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	085b      	lsrs	r3, r3, #1
 8005b08:	441a      	add	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b12:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	2b0f      	cmp	r3, #15
 8005b18:	d916      	bls.n	8005b48 <UART_SetConfig+0x90c>
 8005b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b20:	d212      	bcs.n	8005b48 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f023 030f 	bic.w	r3, r3, #15
 8005b2a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	f003 0307 	and.w	r3, r3, #7
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005b44:	60da      	str	r2, [r3, #12]
 8005b46:	e0bc      	b.n	8005cc2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005b4e:	e0b8      	b.n	8005cc2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	dc4b      	bgt.n	8005bf0 <UART_SetConfig+0x9b4>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f2c0 8087 	blt.w	8005c6c <UART_SetConfig+0xa30>
 8005b5e:	2b20      	cmp	r3, #32
 8005b60:	f200 8084 	bhi.w	8005c6c <UART_SetConfig+0xa30>
 8005b64:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <UART_SetConfig+0x930>)
 8005b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6a:	bf00      	nop
 8005b6c:	08005bf7 	.word	0x08005bf7
 8005b70:	08005c11 	.word	0x08005c11
 8005b74:	08005c6d 	.word	0x08005c6d
 8005b78:	08005c6d 	.word	0x08005c6d
 8005b7c:	08005c19 	.word	0x08005c19
 8005b80:	08005c6d 	.word	0x08005c6d
 8005b84:	08005c6d 	.word	0x08005c6d
 8005b88:	08005c6d 	.word	0x08005c6d
 8005b8c:	08005c29 	.word	0x08005c29
 8005b90:	08005c6d 	.word	0x08005c6d
 8005b94:	08005c6d 	.word	0x08005c6d
 8005b98:	08005c6d 	.word	0x08005c6d
 8005b9c:	08005c6d 	.word	0x08005c6d
 8005ba0:	08005c6d 	.word	0x08005c6d
 8005ba4:	08005c6d 	.word	0x08005c6d
 8005ba8:	08005c6d 	.word	0x08005c6d
 8005bac:	08005c39 	.word	0x08005c39
 8005bb0:	08005c6d 	.word	0x08005c6d
 8005bb4:	08005c6d 	.word	0x08005c6d
 8005bb8:	08005c6d 	.word	0x08005c6d
 8005bbc:	08005c6d 	.word	0x08005c6d
 8005bc0:	08005c6d 	.word	0x08005c6d
 8005bc4:	08005c6d 	.word	0x08005c6d
 8005bc8:	08005c6d 	.word	0x08005c6d
 8005bcc:	08005c6d 	.word	0x08005c6d
 8005bd0:	08005c6d 	.word	0x08005c6d
 8005bd4:	08005c6d 	.word	0x08005c6d
 8005bd8:	08005c6d 	.word	0x08005c6d
 8005bdc:	08005c6d 	.word	0x08005c6d
 8005be0:	08005c6d 	.word	0x08005c6d
 8005be4:	08005c6d 	.word	0x08005c6d
 8005be8:	08005c6d 	.word	0x08005c6d
 8005bec:	08005c5f 	.word	0x08005c5f
 8005bf0:	2b40      	cmp	r3, #64	; 0x40
 8005bf2:	d037      	beq.n	8005c64 <UART_SetConfig+0xa28>
 8005bf4:	e03a      	b.n	8005c6c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf6:	f7fc fe31 	bl	800285c <HAL_RCC_GetPCLK1Freq>
 8005bfa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005bfc:	e03c      	b.n	8005c78 <UART_SetConfig+0xa3c>
 8005bfe:	bf00      	nop
 8005c00:	003d0900 	.word	0x003d0900
 8005c04:	080062ec 	.word	0x080062ec
 8005c08:	58024400 	.word	0x58024400
 8005c0c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c10:	f7fc fe3a 	bl	8002888 <HAL_RCC_GetPCLK2Freq>
 8005c14:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005c16:	e02f      	b.n	8005c78 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c18:	f107 0314 	add.w	r3, r7, #20
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fd fd9f 	bl	8003760 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c26:	e027      	b.n	8005c78 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c28:	f107 0308 	add.w	r3, r7, #8
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fd feeb 	bl	8003a08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c36:	e01f      	b.n	8005c78 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c38:	4b2c      	ldr	r3, [pc, #176]	; (8005cec <UART_SetConfig+0xab0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0320 	and.w	r3, r3, #32
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d009      	beq.n	8005c58 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c44:	4b29      	ldr	r3, [pc, #164]	; (8005cec <UART_SetConfig+0xab0>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	08db      	lsrs	r3, r3, #3
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	4a28      	ldr	r2, [pc, #160]	; (8005cf0 <UART_SetConfig+0xab4>)
 8005c50:	fa22 f303 	lsr.w	r3, r2, r3
 8005c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c56:	e00f      	b.n	8005c78 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8005c58:	4b25      	ldr	r3, [pc, #148]	; (8005cf0 <UART_SetConfig+0xab4>)
 8005c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c5c:	e00c      	b.n	8005c78 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c5e:	4b25      	ldr	r3, [pc, #148]	; (8005cf4 <UART_SetConfig+0xab8>)
 8005c60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c62:	e009      	b.n	8005c78 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c6a:	e005      	b.n	8005c78 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005c76:	bf00      	nop
    }

    if (pclk != 0U)
 8005c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d021      	beq.n	8005cc2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	4a1d      	ldr	r2, [pc, #116]	; (8005cf8 <UART_SetConfig+0xabc>)
 8005c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	085b      	lsrs	r3, r3, #1
 8005c96:	441a      	add	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca4:	2b0f      	cmp	r3, #15
 8005ca6:	d909      	bls.n	8005cbc <UART_SetConfig+0xa80>
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cae:	d205      	bcs.n	8005cbc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60da      	str	r2, [r3, #12]
 8005cba:	e002      	b.n	8005cc2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005cde:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3738      	adds	r7, #56	; 0x38
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8005cea:	bf00      	nop
 8005cec:	58024400 	.word	0x58024400
 8005cf0:	03d09000 	.word	0x03d09000
 8005cf4:	003d0900 	.word	0x003d0900
 8005cf8:	080062ec 	.word	0x080062ec

08005cfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00a      	beq.n	8005d6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6e:	f003 0308 	and.w	r3, r3, #8
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d90:	f003 0310 	and.w	r3, r3, #16
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00a      	beq.n	8005dae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d01a      	beq.n	8005e12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dfa:	d10a      	bne.n	8005e12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	605a      	str	r2, [r3, #4]
  }
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af02      	add	r7, sp, #8
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e50:	f7fb fa92 	bl	8001378 <HAL_GetTick>
 8005e54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d10e      	bne.n	8005e82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f82f 	bl	8005ed6 <UART_WaitOnFlagUntilTimeout>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e025      	b.n	8005ece <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d10e      	bne.n	8005eae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f819 	bl	8005ed6 <UART_WaitOnFlagUntilTimeout>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e00f      	b.n	8005ece <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b09c      	sub	sp, #112	; 0x70
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	603b      	str	r3, [r7, #0]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee6:	e0a9      	b.n	800603c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	f000 80a5 	beq.w	800603c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef2:	f7fb fa41 	bl	8001378 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d302      	bcc.n	8005f08 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d140      	bne.n	8005f8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f1c:	667b      	str	r3, [r7, #100]	; 0x64
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e6      	bne.n	8005f08 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3308      	adds	r3, #8
 8005f40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	f023 0301 	bic.w	r3, r3, #1
 8005f50:	663b      	str	r3, [r7, #96]	; 0x60
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3308      	adds	r3, #8
 8005f58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e5      	bne.n	8005f3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e069      	b.n	800605e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d051      	beq.n	800603c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fa6:	d149      	bne.n	800603c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fb0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e6      	bne.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3308      	adds	r3, #8
 8005fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	e853 3f00 	ldrex	r3, [r3]
 8005ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f023 0301 	bic.w	r3, r3, #1
 8005ffa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3308      	adds	r3, #8
 8006002:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006004:	623a      	str	r2, [r7, #32]
 8006006:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006008:	69f9      	ldr	r1, [r7, #28]
 800600a:	6a3a      	ldr	r2, [r7, #32]
 800600c:	e841 2300 	strex	r3, r2, [r1]
 8006010:	61bb      	str	r3, [r7, #24]
   return(result);
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1e5      	bne.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2220      	movs	r2, #32
 800601c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2220      	movs	r2, #32
 800602c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e010      	b.n	800605e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69da      	ldr	r2, [r3, #28]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4013      	ands	r3, r2
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	429a      	cmp	r2, r3
 800604a:	bf0c      	ite	eq
 800604c:	2301      	moveq	r3, #1
 800604e:	2300      	movne	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	429a      	cmp	r2, r3
 8006058:	f43f af46 	beq.w	8005ee8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3770      	adds	r7, #112	; 0x70
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_UARTEx_DisableFifoMode+0x16>
 8006078:	2302      	movs	r3, #2
 800607a:	e027      	b.n	80060cc <HAL_UARTEx_DisableFifoMode+0x66>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2224      	movs	r2, #36	; 0x24
 8006088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0201 	bic.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060ec:	2302      	movs	r3, #2
 80060ee:	e02d      	b.n	800614c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2224      	movs	r2, #36	; 0x24
 80060fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0201 	bic.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f84f 	bl	80061d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006168:	2302      	movs	r3, #2
 800616a:	e02d      	b.n	80061c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2224      	movs	r2, #36	; 0x24
 8006178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0201 	bic.w	r2, r2, #1
 8006192:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f811 	bl	80061d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d108      	bne.n	80061f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061f0:	e031      	b.n	8006256 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061f2:	2310      	movs	r3, #16
 80061f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061f6:	2310      	movs	r3, #16
 80061f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	0e5b      	lsrs	r3, r3, #25
 8006202:	b2db      	uxtb	r3, r3
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	0f5b      	lsrs	r3, r3, #29
 8006212:	b2db      	uxtb	r3, r3
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	7b3a      	ldrb	r2, [r7, #12]
 800621e:	4911      	ldr	r1, [pc, #68]	; (8006264 <UARTEx_SetNbDataToProcess+0x94>)
 8006220:	5c8a      	ldrb	r2, [r1, r2]
 8006222:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006226:	7b3a      	ldrb	r2, [r7, #12]
 8006228:	490f      	ldr	r1, [pc, #60]	; (8006268 <UARTEx_SetNbDataToProcess+0x98>)
 800622a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800622c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006230:	b29a      	uxth	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	7b7a      	ldrb	r2, [r7, #13]
 800623c:	4909      	ldr	r1, [pc, #36]	; (8006264 <UARTEx_SetNbDataToProcess+0x94>)
 800623e:	5c8a      	ldrb	r2, [r1, r2]
 8006240:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006244:	7b7a      	ldrb	r2, [r7, #13]
 8006246:	4908      	ldr	r1, [pc, #32]	; (8006268 <UARTEx_SetNbDataToProcess+0x98>)
 8006248:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800624a:	fb93 f3f2 	sdiv	r3, r3, r2
 800624e:	b29a      	uxth	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	08006304 	.word	0x08006304
 8006268:	0800630c 	.word	0x0800630c

0800626c <__libc_init_array>:
 800626c:	b570      	push	{r4, r5, r6, lr}
 800626e:	4d0d      	ldr	r5, [pc, #52]	; (80062a4 <__libc_init_array+0x38>)
 8006270:	4c0d      	ldr	r4, [pc, #52]	; (80062a8 <__libc_init_array+0x3c>)
 8006272:	1b64      	subs	r4, r4, r5
 8006274:	10a4      	asrs	r4, r4, #2
 8006276:	2600      	movs	r6, #0
 8006278:	42a6      	cmp	r6, r4
 800627a:	d109      	bne.n	8006290 <__libc_init_array+0x24>
 800627c:	4d0b      	ldr	r5, [pc, #44]	; (80062ac <__libc_init_array+0x40>)
 800627e:	4c0c      	ldr	r4, [pc, #48]	; (80062b0 <__libc_init_array+0x44>)
 8006280:	f000 f820 	bl	80062c4 <_init>
 8006284:	1b64      	subs	r4, r4, r5
 8006286:	10a4      	asrs	r4, r4, #2
 8006288:	2600      	movs	r6, #0
 800628a:	42a6      	cmp	r6, r4
 800628c:	d105      	bne.n	800629a <__libc_init_array+0x2e>
 800628e:	bd70      	pop	{r4, r5, r6, pc}
 8006290:	f855 3b04 	ldr.w	r3, [r5], #4
 8006294:	4798      	blx	r3
 8006296:	3601      	adds	r6, #1
 8006298:	e7ee      	b.n	8006278 <__libc_init_array+0xc>
 800629a:	f855 3b04 	ldr.w	r3, [r5], #4
 800629e:	4798      	blx	r3
 80062a0:	3601      	adds	r6, #1
 80062a2:	e7f2      	b.n	800628a <__libc_init_array+0x1e>
 80062a4:	0800631c 	.word	0x0800631c
 80062a8:	0800631c 	.word	0x0800631c
 80062ac:	0800631c 	.word	0x0800631c
 80062b0:	08006320 	.word	0x08006320

080062b4 <memset>:
 80062b4:	4402      	add	r2, r0
 80062b6:	4603      	mov	r3, r0
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d100      	bne.n	80062be <memset+0xa>
 80062bc:	4770      	bx	lr
 80062be:	f803 1b01 	strb.w	r1, [r3], #1
 80062c2:	e7f9      	b.n	80062b8 <memset+0x4>

080062c4 <_init>:
 80062c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c6:	bf00      	nop
 80062c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ca:	bc08      	pop	{r3}
 80062cc:	469e      	mov	lr, r3
 80062ce:	4770      	bx	lr

080062d0 <_fini>:
 80062d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d2:	bf00      	nop
 80062d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d6:	bc08      	pop	{r3}
 80062d8:	469e      	mov	lr, r3
 80062da:	4770      	bx	lr
