
erche.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000647c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006714  08006714  00016714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800674c  0800674c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800674c  0800674c  0001674c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006754  08006754  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006754  08006754  00016754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006758  08006758  00016758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800675c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  24000010  0800676c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000278  0800676c  00020278  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a3c  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002652  00000000  00000000  00038a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa0  00000000  00000000  0003b0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb8  00000000  00000000  0003c070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035e81  00000000  00000000  0003cf28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb95  00000000  00000000  00072da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015ecee  00000000  00000000  0007f93e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001de62c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000425c  00000000  00000000  001de6a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080066fc 	.word	0x080066fc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080066fc 	.word	0x080066fc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fe88 	bl	80012f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f884 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 fba2 	bl	8000d2c <MX_GPIO_Init>
  MX_TIM8_Init();
 80005e8:	f000 f9ec 	bl	80009c4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80005ec:	f000 faba 	bl	8000b64 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005f0:	f000 fb04 	bl	8000bfc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005f4:	f000 f916 	bl	8000824 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80005f8:	f000 fb4c 	bl	8000c94 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80005fc:	2100      	movs	r1, #0
 80005fe:	4837      	ldr	r0, [pc, #220]	; (80006dc <main+0x104>)
 8000600:	f003 fd50 	bl	80040a4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000604:	2104      	movs	r1, #4
 8000606:	4835      	ldr	r0, [pc, #212]	; (80006dc <main+0x104>)
 8000608:	f003 fd4c 	bl	80040a4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 800060c:	2108      	movs	r1, #8
 800060e:	4833      	ldr	r0, [pc, #204]	; (80006dc <main+0x104>)
 8000610:	f003 fd48 	bl	80040a4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000614:	210c      	movs	r1, #12
 8000616:	4831      	ldr	r0, [pc, #196]	; (80006dc <main+0x104>)
 8000618:	f003 fd44 	bl	80040a4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 800061c:	2100      	movs	r1, #0
 800061e:	4830      	ldr	r0, [pc, #192]	; (80006e0 <main+0x108>)
 8000620:	f003 fd40 	bl	80040a4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8000624:	2104      	movs	r1, #4
 8000626:	482e      	ldr	r0, [pc, #184]	; (80006e0 <main+0x108>)
 8000628:	f003 fd3c 	bl	80040a4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 800062c:	2108      	movs	r1, #8
 800062e:	482c      	ldr	r0, [pc, #176]	; (80006e0 <main+0x108>)
 8000630:	f003 fd38 	bl	80040a4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);
 8000634:	210c      	movs	r1, #12
 8000636:	482a      	ldr	r0, [pc, #168]	; (80006e0 <main+0x108>)
 8000638:	f003 fd34 	bl	80040a4 <HAL_TIM_PWM_Start>
    HAL_UART_Receive_IT(&huart1,YY,1000);
 800063c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000640:	4928      	ldr	r1, [pc, #160]	; (80006e4 <main+0x10c>)
 8000642:	4829      	ldr	r0, [pc, #164]	; (80006e8 <main+0x110>)
 8000644:	f004 fd62 	bl	800510c <HAL_UART_Receive_IT>

//	       HAL_UART_Transmit(&huart2,YY1,sizeof(YY1),1000);
//	       HAL_Delay(2000);


	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,26);
 8000648:	4b24      	ldr	r3, [pc, #144]	; (80006dc <main+0x104>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	221a      	movs	r2, #26
 800064e:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,00);
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <main+0x104>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2200      	movs	r2, #0
 8000656:	639a      	str	r2, [r3, #56]	; 0x38

	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,00);
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <main+0x104>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2200      	movs	r2, #0
 800065e:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,24);
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <main+0x104>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2218      	movs	r2, #24
 8000666:	641a      	str	r2, [r3, #64]	; 0x40

	  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,00);
 8000668:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <main+0x108>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,24);
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <main+0x108>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2218      	movs	r2, #24
 8000676:	639a      	str	r2, [r3, #56]	; 0x38

	  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,26);
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <main+0x108>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	221a      	movs	r2, #26
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,00);
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <main+0x108>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2200      	movs	r2, #0
 8000686:	641a      	str	r2, [r3, #64]	; 0x40
	 	 HAL_Delay(2000);
 8000688:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800068c:	f000 fec2 	bl	8001414 <HAL_Delay>
	 	 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <main+0x104>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2264      	movs	r2, #100	; 0x64
 8000696:	635a      	str	r2, [r3, #52]	; 0x34
	 	 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 8000698:	4b10      	ldr	r3, [pc, #64]	; (80006dc <main+0x104>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2264      	movs	r2, #100	; 0x64
 800069e:	639a      	str	r2, [r3, #56]	; 0x38

	 	 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <main+0x104>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2264      	movs	r2, #100	; 0x64
 80006a6:	63da      	str	r2, [r3, #60]	; 0x3c
	 	 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <main+0x104>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2264      	movs	r2, #100	; 0x64
 80006ae:	641a      	str	r2, [r3, #64]	; 0x40

	 	 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <main+0x108>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2264      	movs	r2, #100	; 0x64
 80006b6:	635a      	str	r2, [r3, #52]	; 0x34
	 	 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <main+0x108>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2264      	movs	r2, #100	; 0x64
 80006be:	639a      	str	r2, [r3, #56]	; 0x38

	 	 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <main+0x108>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2264      	movs	r2, #100	; 0x64
 80006c6:	63da      	str	r2, [r3, #60]	; 0x3c
	 	 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <main+0x108>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2264      	movs	r2, #100	; 0x64
 80006ce:	641a      	str	r2, [r3, #64]	; 0x40
	 	 HAL_Delay(500);
 80006d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d4:	f000 fe9e 	bl	8001414 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,26);
 80006d8:	e7b6      	b.n	8000648 <main+0x70>
 80006da:	bf00      	nop
 80006dc:	2400019c 	.word	0x2400019c
 80006e0:	2400002c 	.word	0x2400002c
 80006e4:	24000104 	.word	0x24000104
 80006e8:	24000110 	.word	0x24000110

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b0cc      	sub	sp, #304	; 0x130
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006f6:	224c      	movs	r2, #76	; 0x4c
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f005 fff6 	bl	80066ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000704:	2220      	movs	r2, #32
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f005 ffef 	bl	80066ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	4618      	mov	r0, r3
 8000714:	23bc      	movs	r3, #188	; 0xbc
 8000716:	461a      	mov	r2, r3
 8000718:	2100      	movs	r1, #0
 800071a:	f005 ffe7 	bl	80066ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800071e:	2002      	movs	r0, #2
 8000720:	f001 f93a 	bl	8001998 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	4b3c      	ldr	r3, [pc, #240]	; (800081c <SystemClock_Config+0x130>)
 800072c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072e:	4a3b      	ldr	r2, [pc, #236]	; (800081c <SystemClock_Config+0x130>)
 8000730:	f023 0301 	bic.w	r3, r3, #1
 8000734:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000736:	4b39      	ldr	r3, [pc, #228]	; (800081c <SystemClock_Config+0x130>)
 8000738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073a:	f003 0201 	and.w	r2, r3, #1
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	4b37      	ldr	r3, [pc, #220]	; (8000820 <SystemClock_Config+0x134>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074a:	4a35      	ldr	r2, [pc, #212]	; (8000820 <SystemClock_Config+0x134>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b33      	ldr	r3, [pc, #204]	; (8000820 <SystemClock_Config+0x134>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000762:	bf00      	nop
 8000764:	4b2e      	ldr	r3, [pc, #184]	; (8000820 <SystemClock_Config+0x134>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800076c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000770:	d1f8      	bne.n	8000764 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000772:	2302      	movs	r3, #2
 8000774:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000778:	2301      	movs	r3, #1
 800077a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077e:	2340      	movs	r3, #64	; 0x40
 8000780:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000784:	2300      	movs	r3, #0
 8000786:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800078e:	4618      	mov	r0, r3
 8000790:	f001 f93c 	bl	8001a0c <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800079a:	f000 fb4f 	bl	8000e3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	233f      	movs	r3, #63	; 0x3f
 80007a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 fd29 	bl	800222c <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80007e0:	f000 fb2c 	bl	8000e3c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2203      	movs	r2, #3
 80007ea:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	2200      	movs	r2, #0
 80007f2:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	2200      	movs	r2, #0
 80007fa:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	4618      	mov	r0, r3
 8000802:	f002 f897 	bl	8002934 <HAL_RCCEx_PeriphCLKConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x124>
  {
    Error_Handler();
 800080c:	f000 fb16 	bl	8000e3c <Error_Handler>
  }
}
 8000810:	bf00      	nop
 8000812:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	58000400 	.word	0x58000400
 8000820:	58024800 	.word	0x58024800

08000824 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b09a      	sub	sp, #104	; 0x68
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000838:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000844:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
 8000854:	615a      	str	r2, [r3, #20]
 8000856:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	222c      	movs	r2, #44	; 0x2c
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f005 ff44 	bl	80066ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000864:	4b55      	ldr	r3, [pc, #340]	; (80009bc <MX_TIM1_Init+0x198>)
 8000866:	4a56      	ldr	r2, [pc, #344]	; (80009c0 <MX_TIM1_Init+0x19c>)
 8000868:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 800086a:	4b54      	ldr	r3, [pc, #336]	; (80009bc <MX_TIM1_Init+0x198>)
 800086c:	221f      	movs	r2, #31
 800086e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b52      	ldr	r3, [pc, #328]	; (80009bc <MX_TIM1_Init+0x198>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000876:	4b51      	ldr	r3, [pc, #324]	; (80009bc <MX_TIM1_Init+0x198>)
 8000878:	2263      	movs	r2, #99	; 0x63
 800087a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087c:	4b4f      	ldr	r3, [pc, #316]	; (80009bc <MX_TIM1_Init+0x198>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000882:	4b4e      	ldr	r3, [pc, #312]	; (80009bc <MX_TIM1_Init+0x198>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000888:	4b4c      	ldr	r3, [pc, #304]	; (80009bc <MX_TIM1_Init+0x198>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800088e:	484b      	ldr	r0, [pc, #300]	; (80009bc <MX_TIM1_Init+0x198>)
 8000890:	f003 fb50 	bl	8003f34 <HAL_TIM_Base_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800089a:	f000 facf 	bl	8000e3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008a8:	4619      	mov	r1, r3
 80008aa:	4844      	ldr	r0, [pc, #272]	; (80009bc <MX_TIM1_Init+0x198>)
 80008ac:	f003 fddc 	bl	8004468 <HAL_TIM_ConfigClockSource>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008b6:	f000 fac1 	bl	8000e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008ba:	4840      	ldr	r0, [pc, #256]	; (80009bc <MX_TIM1_Init+0x198>)
 80008bc:	f003 fb91 	bl	8003fe2 <HAL_TIM_PWM_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008c6:	f000 fab9 	bl	8000e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008da:	4619      	mov	r1, r3
 80008dc:	4837      	ldr	r0, [pc, #220]	; (80009bc <MX_TIM1_Init+0x198>)
 80008de:	f004 fabf 	bl	8004e60 <HAL_TIMEx_MasterConfigSynchronization>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80008e8:	f000 faa8 	bl	8000e3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ec:	2360      	movs	r3, #96	; 0x60
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008f8:	2300      	movs	r3, #0
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000900:	2300      	movs	r3, #0
 8000902:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000904:	2300      	movs	r3, #0
 8000906:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000908:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800090c:	2200      	movs	r2, #0
 800090e:	4619      	mov	r1, r3
 8000910:	482a      	ldr	r0, [pc, #168]	; (80009bc <MX_TIM1_Init+0x198>)
 8000912:	f003 fc99 	bl	8004248 <HAL_TIM_PWM_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800091c:	f000 fa8e 	bl	8000e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000920:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000924:	2204      	movs	r2, #4
 8000926:	4619      	mov	r1, r3
 8000928:	4824      	ldr	r0, [pc, #144]	; (80009bc <MX_TIM1_Init+0x198>)
 800092a:	f003 fc8d 	bl	8004248 <HAL_TIM_PWM_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000934:	f000 fa82 	bl	8000e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000938:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800093c:	2208      	movs	r2, #8
 800093e:	4619      	mov	r1, r3
 8000940:	481e      	ldr	r0, [pc, #120]	; (80009bc <MX_TIM1_Init+0x198>)
 8000942:	f003 fc81 	bl	8004248 <HAL_TIM_PWM_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800094c:	f000 fa76 	bl	8000e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000950:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000954:	220c      	movs	r2, #12
 8000956:	4619      	mov	r1, r3
 8000958:	4818      	ldr	r0, [pc, #96]	; (80009bc <MX_TIM1_Init+0x198>)
 800095a:	f003 fc75 	bl	8004248 <HAL_TIM_PWM_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000964:	f000 fa6a 	bl	8000e3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800097c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000980:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800098a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	4619      	mov	r1, r3
 800099c:	4807      	ldr	r0, [pc, #28]	; (80009bc <MX_TIM1_Init+0x198>)
 800099e:	f004 fae7 	bl	8004f70 <HAL_TIMEx_ConfigBreakDeadTime>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 80009a8:	f000 fa48 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009ac:	4803      	ldr	r0, [pc, #12]	; (80009bc <MX_TIM1_Init+0x198>)
 80009ae:	f000 fa9d 	bl	8000eec <HAL_TIM_MspPostInit>

}
 80009b2:	bf00      	nop
 80009b4:	3768      	adds	r7, #104	; 0x68
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2400019c 	.word	0x2400019c
 80009c0:	40010000 	.word	0x40010000

080009c4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b09a      	sub	sp, #104	; 0x68
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
 80009f4:	615a      	str	r2, [r3, #20]
 80009f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	222c      	movs	r2, #44	; 0x2c
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f005 fe74 	bl	80066ec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a04:	4b55      	ldr	r3, [pc, #340]	; (8000b5c <MX_TIM8_Init+0x198>)
 8000a06:	4a56      	ldr	r2, [pc, #344]	; (8000b60 <MX_TIM8_Init+0x19c>)
 8000a08:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 8000a0a:	4b54      	ldr	r3, [pc, #336]	; (8000b5c <MX_TIM8_Init+0x198>)
 8000a0c:	223f      	movs	r2, #63	; 0x3f
 8000a0e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b52      	ldr	r3, [pc, #328]	; (8000b5c <MX_TIM8_Init+0x198>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 8000a16:	4b51      	ldr	r3, [pc, #324]	; (8000b5c <MX_TIM8_Init+0x198>)
 8000a18:	2263      	movs	r2, #99	; 0x63
 8000a1a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1c:	4b4f      	ldr	r3, [pc, #316]	; (8000b5c <MX_TIM8_Init+0x198>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a22:	4b4e      	ldr	r3, [pc, #312]	; (8000b5c <MX_TIM8_Init+0x198>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a28:	4b4c      	ldr	r3, [pc, #304]	; (8000b5c <MX_TIM8_Init+0x198>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000a2e:	484b      	ldr	r0, [pc, #300]	; (8000b5c <MX_TIM8_Init+0x198>)
 8000a30:	f003 fa80 	bl	8003f34 <HAL_TIM_Base_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000a3a:	f000 f9ff 	bl	8000e3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a42:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000a44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4844      	ldr	r0, [pc, #272]	; (8000b5c <MX_TIM8_Init+0x198>)
 8000a4c:	f003 fd0c 	bl	8004468 <HAL_TIM_ConfigClockSource>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000a56:	f000 f9f1 	bl	8000e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a5a:	4840      	ldr	r0, [pc, #256]	; (8000b5c <MX_TIM8_Init+0x198>)
 8000a5c:	f003 fac1 	bl	8003fe2 <HAL_TIM_PWM_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000a66:	f000 f9e9 	bl	8000e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4837      	ldr	r0, [pc, #220]	; (8000b5c <MX_TIM8_Init+0x198>)
 8000a7e:	f004 f9ef 	bl	8004e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8000a88:	f000 f9d8 	bl	8000e3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a8c:	2360      	movs	r3, #96	; 0x60
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a94:	2300      	movs	r3, #0
 8000a96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aac:	2200      	movs	r2, #0
 8000aae:	4619      	mov	r1, r3
 8000ab0:	482a      	ldr	r0, [pc, #168]	; (8000b5c <MX_TIM8_Init+0x198>)
 8000ab2:	f003 fbc9 	bl	8004248 <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8000abc:	f000 f9be 	bl	8000e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ac0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4824      	ldr	r0, [pc, #144]	; (8000b5c <MX_TIM8_Init+0x198>)
 8000aca:	f003 fbbd 	bl	8004248 <HAL_TIM_PWM_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8000ad4:	f000 f9b2 	bl	8000e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ad8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000adc:	2208      	movs	r2, #8
 8000ade:	4619      	mov	r1, r3
 8000ae0:	481e      	ldr	r0, [pc, #120]	; (8000b5c <MX_TIM8_Init+0x198>)
 8000ae2:	f003 fbb1 	bl	8004248 <HAL_TIM_PWM_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8000aec:	f000 f9a6 	bl	8000e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000af0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af4:	220c      	movs	r2, #12
 8000af6:	4619      	mov	r1, r3
 8000af8:	4818      	ldr	r0, [pc, #96]	; (8000b5c <MX_TIM8_Init+0x198>)
 8000afa:	f003 fba5 	bl	8004248 <HAL_TIM_PWM_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8000b04:	f000 f99a 	bl	8000e3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4807      	ldr	r0, [pc, #28]	; (8000b5c <MX_TIM8_Init+0x198>)
 8000b3e:	f004 fa17 	bl	8004f70 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM8_Init+0x188>
  {
    Error_Handler();
 8000b48:	f000 f978 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <MX_TIM8_Init+0x198>)
 8000b4e:	f000 f9cd 	bl	8000eec <HAL_TIM_MspPostInit>

}
 8000b52:	bf00      	nop
 8000b54:	3768      	adds	r7, #104	; 0x68
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2400002c 	.word	0x2400002c
 8000b60:	40010400 	.word	0x40010400

08000b64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b68:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <MX_USART1_UART_Init+0x90>)
 8000b6a:	4a23      	ldr	r2, [pc, #140]	; (8000bf8 <MX_USART1_UART_Init+0x94>)
 8000b6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b6e:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <MX_USART1_UART_Init+0x90>)
 8000b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <MX_USART1_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <MX_USART1_UART_Init+0x90>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <MX_USART1_UART_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_USART1_UART_Init+0x90>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <MX_USART1_UART_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_USART1_UART_Init+0x90>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <MX_USART1_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_USART1_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_USART1_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bac:	4811      	ldr	r0, [pc, #68]	; (8000bf4 <MX_USART1_UART_Init+0x90>)
 8000bae:	f004 fa5d 	bl	800506c <HAL_UART_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bb8:	f000 f940 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <MX_USART1_UART_Init+0x90>)
 8000bc0:	f005 fc8b 	bl	80064da <HAL_UARTEx_SetTxFifoThreshold>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bca:	f000 f937 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4808      	ldr	r0, [pc, #32]	; (8000bf4 <MX_USART1_UART_Init+0x90>)
 8000bd2:	f005 fcc0 	bl	8006556 <HAL_UARTEx_SetRxFifoThreshold>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bdc:	f000 f92e 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_USART1_UART_Init+0x90>)
 8000be2:	f005 fc41 	bl	8006468 <HAL_UARTEx_DisableFifoMode>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bec:	f000 f926 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	24000110 	.word	0x24000110
 8000bf8:	40011000 	.word	0x40011000

08000bfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <MX_USART2_UART_Init+0x90>)
 8000c02:	4a23      	ldr	r2, [pc, #140]	; (8000c90 <MX_USART2_UART_Init+0x94>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_USART2_UART_Init+0x90>)
 8000c08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_USART2_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_USART2_UART_Init+0x90>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_USART2_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_USART2_UART_Init+0x90>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_USART2_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_USART2_UART_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c32:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <MX_USART2_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_USART2_UART_Init+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_USART2_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c44:	4811      	ldr	r0, [pc, #68]	; (8000c8c <MX_USART2_UART_Init+0x90>)
 8000c46:	f004 fa11 	bl	800506c <HAL_UART_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c50:	f000 f8f4 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c54:	2100      	movs	r1, #0
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_USART2_UART_Init+0x90>)
 8000c58:	f005 fc3f 	bl	80064da <HAL_UARTEx_SetTxFifoThreshold>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c62:	f000 f8eb 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c66:	2100      	movs	r1, #0
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <MX_USART2_UART_Init+0x90>)
 8000c6a:	f005 fc74 	bl	8006556 <HAL_UARTEx_SetRxFifoThreshold>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c74:	f000 f8e2 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_USART2_UART_Init+0x90>)
 8000c7a:	f005 fbf5 	bl	8006468 <HAL_UARTEx_DisableFifoMode>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c84:	f000 f8da 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	240001e8 	.word	0x240001e8
 8000c90:	40004400 	.word	0x40004400

08000c94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c98:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <MX_USART3_UART_Init+0x90>)
 8000c9a:	4a23      	ldr	r2, [pc, #140]	; (8000d28 <MX_USART3_UART_Init+0x94>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c9e:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <MX_USART3_UART_Init+0x90>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <MX_USART3_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <MX_USART3_UART_Init+0x90>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <MX_USART3_UART_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_USART3_UART_Init+0x90>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <MX_USART3_UART_Init+0x90>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MX_USART3_UART_Init+0x90>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_USART3_UART_Init+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_USART3_UART_Init+0x90>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_USART3_UART_Init+0x90>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cdc:	4811      	ldr	r0, [pc, #68]	; (8000d24 <MX_USART3_UART_Init+0x90>)
 8000cde:	f004 f9c5 	bl	800506c <HAL_UART_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ce8:	f000 f8a8 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cec:	2100      	movs	r1, #0
 8000cee:	480d      	ldr	r0, [pc, #52]	; (8000d24 <MX_USART3_UART_Init+0x90>)
 8000cf0:	f005 fbf3 	bl	80064da <HAL_UARTEx_SetTxFifoThreshold>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cfa:	f000 f89f 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4808      	ldr	r0, [pc, #32]	; (8000d24 <MX_USART3_UART_Init+0x90>)
 8000d02:	f005 fc28 	bl	8006556 <HAL_UARTEx_SetRxFifoThreshold>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d0c:	f000 f896 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_USART3_UART_Init+0x90>)
 8000d12:	f005 fba9 	bl	8006468 <HAL_UARTEx_DisableFifoMode>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d1c:	f000 f88e 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	24000078 	.word	0x24000078
 8000d28:	40004800 	.word	0x40004800

08000d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d42:	4b3a      	ldr	r3, [pc, #232]	; (8000e2c <MX_GPIO_Init+0x100>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d48:	4a38      	ldr	r2, [pc, #224]	; (8000e2c <MX_GPIO_Init+0x100>)
 8000d4a:	f043 0310 	orr.w	r3, r3, #16
 8000d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d52:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <MX_GPIO_Init+0x100>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d58:	f003 0310 	and.w	r3, r3, #16
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d60:	4b32      	ldr	r3, [pc, #200]	; (8000e2c <MX_GPIO_Init+0x100>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d66:	4a31      	ldr	r2, [pc, #196]	; (8000e2c <MX_GPIO_Init+0x100>)
 8000d68:	f043 0304 	orr.w	r3, r3, #4
 8000d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d70:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <MX_GPIO_Init+0x100>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <MX_GPIO_Init+0x100>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d84:	4a29      	ldr	r2, [pc, #164]	; (8000e2c <MX_GPIO_Init+0x100>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8e:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <MX_GPIO_Init+0x100>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <MX_GPIO_Init+0x100>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	4a22      	ldr	r2, [pc, #136]	; (8000e2c <MX_GPIO_Init+0x100>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <MX_GPIO_Init+0x100>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <MX_GPIO_Init+0x100>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <MX_GPIO_Init+0x100>)
 8000dc2:	f043 0308 	orr.w	r3, r3, #8
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_GPIO_Init+0x100>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dd8:	2320      	movs	r3, #32
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	4811      	ldr	r0, [pc, #68]	; (8000e30 <MX_GPIO_Init+0x104>)
 8000dec:	f000 fc24 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	480b      	ldr	r0, [pc, #44]	; (8000e34 <MX_GPIO_Init+0x108>)
 8000e06:	f000 fc17 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <MX_GPIO_Init+0x10c>)
 8000e20:	f000 fc0a 	bl	8001638 <HAL_GPIO_Init>

}
 8000e24:	bf00      	nop
 8000e26:	3728      	adds	r7, #40	; 0x28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	58024400 	.word	0x58024400
 8000e30:	58021000 	.word	0x58021000
 8000e34:	58020800 	.word	0x58020800
 8000e38:	58020400 	.word	0x58020400

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <Error_Handler+0x6>

08000e44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_MspInit+0x30>)
 8000e4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e50:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <HAL_MspInit+0x30>)
 8000e52:	f043 0302 	orr.w	r3, r3, #2
 8000e56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_MspInit+0x30>)
 8000e5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	58024400 	.word	0x58024400

08000e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a16      	ldr	r2, [pc, #88]	; (8000ee0 <HAL_TIM_Base_MspInit+0x68>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d10f      	bne.n	8000eaa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8000e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e90:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8000e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000ea8:	e013      	b.n	8000ed2 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM8)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <HAL_TIM_Base_MspInit+0x70>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d10e      	bne.n	8000ed2 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8000eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8000ec6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40010000 	.word	0x40010000
 8000ee4:	58024400 	.word	0x58024400
 8000ee8:	40010400 	.word	0x40010400

08000eec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a26      	ldr	r2, [pc, #152]	; (8000fa4 <HAL_TIM_MspPostInit+0xb8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d120      	bne.n	8000f50 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f0e:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <HAL_TIM_MspPostInit+0xbc>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	4a24      	ldr	r2, [pc, #144]	; (8000fa8 <HAL_TIM_MspPostInit+0xbc>)
 8000f16:	f043 0310 	orr.w	r3, r3, #16
 8000f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1e:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <HAL_TIM_MspPostInit+0xbc>)
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000f2c:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4818      	ldr	r0, [pc, #96]	; (8000fac <HAL_TIM_MspPostInit+0xc0>)
 8000f4a:	f000 fb75 	bl	8001638 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000f4e:	e024      	b.n	8000f9a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM8)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a16      	ldr	r2, [pc, #88]	; (8000fb0 <HAL_TIM_MspPostInit+0xc4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d11f      	bne.n	8000f9a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_TIM_MspPostInit+0xbc>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f60:	4a11      	ldr	r2, [pc, #68]	; (8000fa8 <HAL_TIM_MspPostInit+0xbc>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_TIM_MspPostInit+0xbc>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000f78:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <HAL_TIM_MspPostInit+0xc8>)
 8000f96:	f000 fb4f 	bl	8001638 <HAL_GPIO_Init>
}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40010000 	.word	0x40010000
 8000fa8:	58024400 	.word	0x58024400
 8000fac:	58021000 	.word	0x58021000
 8000fb0:	40010400 	.word	0x40010400
 8000fb4:	58020800 	.word	0x58020800

08000fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08e      	sub	sp, #56	; 0x38
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a4f      	ldr	r2, [pc, #316]	; (8001114 <HAL_UART_MspInit+0x15c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d12f      	bne.n	800103a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fda:	4b4f      	ldr	r3, [pc, #316]	; (8001118 <HAL_UART_MspInit+0x160>)
 8000fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fe0:	4a4d      	ldr	r2, [pc, #308]	; (8001118 <HAL_UART_MspInit+0x160>)
 8000fe2:	f043 0310 	orr.w	r3, r3, #16
 8000fe6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fea:	4b4b      	ldr	r3, [pc, #300]	; (8001118 <HAL_UART_MspInit+0x160>)
 8000fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ff0:	f003 0310 	and.w	r3, r3, #16
 8000ff4:	623b      	str	r3, [r7, #32]
 8000ff6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	4b47      	ldr	r3, [pc, #284]	; (8001118 <HAL_UART_MspInit+0x160>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffe:	4a46      	ldr	r2, [pc, #280]	; (8001118 <HAL_UART_MspInit+0x160>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001008:	4b43      	ldr	r3, [pc, #268]	; (8001118 <HAL_UART_MspInit+0x160>)
 800100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001016:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001028:	2304      	movs	r3, #4
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	483a      	ldr	r0, [pc, #232]	; (800111c <HAL_UART_MspInit+0x164>)
 8001034:	f000 fb00 	bl	8001638 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001038:	e067      	b.n	800110a <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART2)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a38      	ldr	r2, [pc, #224]	; (8001120 <HAL_UART_MspInit+0x168>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d12e      	bne.n	80010a2 <HAL_UART_MspInit+0xea>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001044:	4b34      	ldr	r3, [pc, #208]	; (8001118 <HAL_UART_MspInit+0x160>)
 8001046:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800104a:	4a33      	ldr	r2, [pc, #204]	; (8001118 <HAL_UART_MspInit+0x160>)
 800104c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001050:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001054:	4b30      	ldr	r3, [pc, #192]	; (8001118 <HAL_UART_MspInit+0x160>)
 8001056:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800105a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <HAL_UART_MspInit+0x160>)
 8001064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001068:	4a2b      	ldr	r2, [pc, #172]	; (8001118 <HAL_UART_MspInit+0x160>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001072:	4b29      	ldr	r3, [pc, #164]	; (8001118 <HAL_UART_MspInit+0x160>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001080:	230c      	movs	r3, #12
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001090:	2307      	movs	r3, #7
 8001092:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001098:	4619      	mov	r1, r3
 800109a:	4822      	ldr	r0, [pc, #136]	; (8001124 <HAL_UART_MspInit+0x16c>)
 800109c:	f000 facc 	bl	8001638 <HAL_GPIO_Init>
}
 80010a0:	e033      	b.n	800110a <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART3)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a20      	ldr	r2, [pc, #128]	; (8001128 <HAL_UART_MspInit+0x170>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d12e      	bne.n	800110a <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <HAL_UART_MspInit+0x160>)
 80010ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010b2:	4a19      	ldr	r2, [pc, #100]	; (8001118 <HAL_UART_MspInit+0x160>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_UART_MspInit+0x160>)
 80010be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <HAL_UART_MspInit+0x160>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d0:	4a11      	ldr	r2, [pc, #68]	; (8001118 <HAL_UART_MspInit+0x160>)
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_UART_MspInit+0x160>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010fa:	2307      	movs	r3, #7
 80010fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	4619      	mov	r1, r3
 8001104:	4809      	ldr	r0, [pc, #36]	; (800112c <HAL_UART_MspInit+0x174>)
 8001106:	f000 fa97 	bl	8001638 <HAL_GPIO_Init>
}
 800110a:	bf00      	nop
 800110c:	3738      	adds	r7, #56	; 0x38
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40011000 	.word	0x40011000
 8001118:	58024400 	.word	0x58024400
 800111c:	58020400 	.word	0x58020400
 8001120:	40004400 	.word	0x40004400
 8001124:	58020000 	.word	0x58020000
 8001128:	40004800 	.word	0x40004800
 800112c:	58020c00 	.word	0x58020c00

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <NMI_Handler+0x4>

08001136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <MemManage_Handler+0x4>

08001142 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <UsageFault_Handler+0x4>

0800114e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117c:	f000 f92a 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}

08001184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001188:	4b39      	ldr	r3, [pc, #228]	; (8001270 <SystemInit+0xec>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118e:	4a38      	ldr	r2, [pc, #224]	; (8001270 <SystemInit+0xec>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001198:	4b36      	ldr	r3, [pc, #216]	; (8001274 <SystemInit+0xf0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	2b06      	cmp	r3, #6
 80011a2:	d807      	bhi.n	80011b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011a4:	4b33      	ldr	r3, [pc, #204]	; (8001274 <SystemInit+0xf0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f023 030f 	bic.w	r3, r3, #15
 80011ac:	4a31      	ldr	r2, [pc, #196]	; (8001274 <SystemInit+0xf0>)
 80011ae:	f043 0307 	orr.w	r3, r3, #7
 80011b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011b4:	4b30      	ldr	r3, [pc, #192]	; (8001278 <SystemInit+0xf4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a2f      	ldr	r2, [pc, #188]	; (8001278 <SystemInit+0xf4>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011c0:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <SystemInit+0xf4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011c6:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <SystemInit+0xf4>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	492b      	ldr	r1, [pc, #172]	; (8001278 <SystemInit+0xf4>)
 80011cc:	4b2b      	ldr	r3, [pc, #172]	; (800127c <SystemInit+0xf8>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <SystemInit+0xf0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	2b07      	cmp	r3, #7
 80011dc:	d907      	bls.n	80011ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011de:	4b25      	ldr	r3, [pc, #148]	; (8001274 <SystemInit+0xf0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 030f 	bic.w	r3, r3, #15
 80011e6:	4a23      	ldr	r2, [pc, #140]	; (8001274 <SystemInit+0xf0>)
 80011e8:	f043 0307 	orr.w	r3, r3, #7
 80011ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011ee:	4b22      	ldr	r3, [pc, #136]	; (8001278 <SystemInit+0xf4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <SystemInit+0xf4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011fa:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <SystemInit+0xf4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <SystemInit+0xf4>)
 8001202:	4a1f      	ldr	r2, [pc, #124]	; (8001280 <SystemInit+0xfc>)
 8001204:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <SystemInit+0xf4>)
 8001208:	4a1e      	ldr	r2, [pc, #120]	; (8001284 <SystemInit+0x100>)
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <SystemInit+0xf4>)
 800120e:	4a1e      	ldr	r2, [pc, #120]	; (8001288 <SystemInit+0x104>)
 8001210:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <SystemInit+0xf4>)
 8001214:	2200      	movs	r2, #0
 8001216:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <SystemInit+0xf4>)
 800121a:	4a1b      	ldr	r2, [pc, #108]	; (8001288 <SystemInit+0x104>)
 800121c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <SystemInit+0xf4>)
 8001220:	2200      	movs	r2, #0
 8001222:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <SystemInit+0xf4>)
 8001226:	4a18      	ldr	r2, [pc, #96]	; (8001288 <SystemInit+0x104>)
 8001228:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <SystemInit+0xf4>)
 800122c:	2200      	movs	r2, #0
 800122e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <SystemInit+0xf4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a10      	ldr	r2, [pc, #64]	; (8001278 <SystemInit+0xf4>)
 8001236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <SystemInit+0xf4>)
 800123e:	2200      	movs	r2, #0
 8001240:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <SystemInit+0x108>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <SystemInit+0x10c>)
 8001248:	4013      	ands	r3, r2
 800124a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800124e:	d202      	bcs.n	8001256 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <SystemInit+0x110>)
 8001252:	2201      	movs	r2, #1
 8001254:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <SystemInit+0x114>)
 8001258:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800125c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <SystemInit+0xec>)
 8001260:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001264:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00
 8001274:	52002000 	.word	0x52002000
 8001278:	58024400 	.word	0x58024400
 800127c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001280:	02020200 	.word	0x02020200
 8001284:	01ff0000 	.word	0x01ff0000
 8001288:	01010280 	.word	0x01010280
 800128c:	5c001000 	.word	0x5c001000
 8001290:	ffff0000 	.word	0xffff0000
 8001294:	51008108 	.word	0x51008108
 8001298:	52004000 	.word	0x52004000

0800129c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012a0:	f7ff ff70 	bl	8001184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012a6:	e003      	b.n	80012b0 <LoopCopyDataInit>

080012a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80012aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012ae:	3104      	adds	r1, #4

080012b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012b0:	480a      	ldr	r0, [pc, #40]	; (80012dc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80012b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012b8:	d3f6      	bcc.n	80012a8 <CopyDataInit>
  ldr  r2, =_sbss
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80012bc:	e002      	b.n	80012c4 <LoopFillZerobss>

080012be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012c0:	f842 3b04 	str.w	r3, [r2], #4

080012c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80012c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012c8:	d3f9      	bcc.n	80012be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ca:	f005 f9eb 	bl	80066a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ce:	f7ff f983 	bl	80005d8 <main>
  bx  lr    
 80012d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80012d8:	0800675c 	.word	0x0800675c
  ldr  r0, =_sdata
 80012dc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80012e0:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 80012e4:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 80012e8:	24000278 	.word	0x24000278

080012ec <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC3_IRQHandler>
	...

080012f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f6:	2003      	movs	r0, #3
 80012f8:	f000 f96c 	bl	80015d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012fc:	f001 f94c 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8001300:	4601      	mov	r1, r0
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_Init+0x68>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	0a1b      	lsrs	r3, r3, #8
 8001308:	f003 030f 	and.w	r3, r3, #15
 800130c:	4a13      	ldr	r2, [pc, #76]	; (800135c <HAL_Init+0x6c>)
 800130e:	5cd3      	ldrb	r3, [r2, r3]
 8001310:	f003 031f 	and.w	r3, r3, #31
 8001314:	fa21 f303 	lsr.w	r3, r1, r3
 8001318:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_Init+0x68>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <HAL_Init+0x6c>)
 8001324:	5cd3      	ldrb	r3, [r2, r3]
 8001326:	f003 031f 	and.w	r3, r3, #31
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
 8001330:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <HAL_Init+0x70>)
 8001332:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001334:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <HAL_Init+0x74>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800133a:	2000      	movs	r0, #0
 800133c:	f000 f814 	bl	8001368 <HAL_InitTick>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e002      	b.n	8001350 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800134a:	f7ff fd7b 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	58024400 	.word	0x58024400
 800135c:	08006724 	.word	0x08006724
 8001360:	24000004 	.word	0x24000004
 8001364:	24000000 	.word	0x24000000

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_InitTick+0x60>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e021      	b.n	80013c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <HAL_InitTick+0x64>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_InitTick+0x60>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	fbb3 f3f1 	udiv	r3, r3, r1
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f943 	bl	800161e <HAL_SYSTICK_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e00e      	b.n	80013c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d80a      	bhi.n	80013be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a8:	2200      	movs	r2, #0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f000 f91b 	bl	80015ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b4:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <HAL_InitTick+0x68>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2400000c 	.word	0x2400000c
 80013cc:	24000000 	.word	0x24000000
 80013d0:	24000008 	.word	0x24000008

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	2400000c 	.word	0x2400000c
 80013f8:	24000274 	.word	0x24000274

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	24000274 	.word	0x24000274

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff ffee 	bl	80013fc <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_Delay+0x40>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffde 	bl	80013fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2400000c 	.word	0x2400000c

08001458 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <HAL_GetREVID+0x14>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	0c1b      	lsrs	r3, r3, #16
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	5c001000 	.word	0x5c001000

08001470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800148c:	4013      	ands	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	4313      	orrs	r3, r2
 800149c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <__NVIC_SetPriorityGrouping+0x40>)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	60d3      	str	r3, [r2, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00
 80014b4:	05fa0000 	.word	0x05fa0000

080014b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <__NVIC_GetPriorityGrouping+0x18>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	f003 0307 	and.w	r3, r3, #7
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	db0a      	blt.n	80014fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	490c      	ldr	r1, [pc, #48]	; (8001520 <__NVIC_SetPriority+0x4c>)
 80014ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f2:	0112      	lsls	r2, r2, #4
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	440b      	add	r3, r1
 80014f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014fc:	e00a      	b.n	8001514 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4908      	ldr	r1, [pc, #32]	; (8001524 <__NVIC_SetPriority+0x50>)
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	3b04      	subs	r3, #4
 800150c:	0112      	lsls	r2, r2, #4
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	440b      	add	r3, r1
 8001512:	761a      	strb	r2, [r3, #24]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000e100 	.word	0xe000e100
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f1c3 0307 	rsb	r3, r3, #7
 8001542:	2b04      	cmp	r3, #4
 8001544:	bf28      	it	cs
 8001546:	2304      	movcs	r3, #4
 8001548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3304      	adds	r3, #4
 800154e:	2b06      	cmp	r3, #6
 8001550:	d902      	bls.n	8001558 <NVIC_EncodePriority+0x30>
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3b03      	subs	r3, #3
 8001556:	e000      	b.n	800155a <NVIC_EncodePriority+0x32>
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	f04f 32ff 	mov.w	r2, #4294967295
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43da      	mvns	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	401a      	ands	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	43d9      	mvns	r1, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	4313      	orrs	r3, r2
         );
}
 8001582:	4618      	mov	r0, r3
 8001584:	3724      	adds	r7, #36	; 0x24
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a0:	d301      	bcc.n	80015a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00f      	b.n	80015c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <SysTick_Config+0x40>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ae:	210f      	movs	r1, #15
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	f7ff ff8e 	bl	80014d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <SysTick_Config+0x40>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015be:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <SysTick_Config+0x40>)
 80015c0:	2207      	movs	r2, #7
 80015c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	e000e010 	.word	0xe000e010

080015d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ff47 	bl	8001470 <__NVIC_SetPriorityGrouping>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b086      	sub	sp, #24
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	607a      	str	r2, [r7, #4]
 80015f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015f8:	f7ff ff5e 	bl	80014b8 <__NVIC_GetPriorityGrouping>
 80015fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	6978      	ldr	r0, [r7, #20]
 8001604:	f7ff ff90 	bl	8001528 <NVIC_EncodePriority>
 8001608:	4602      	mov	r2, r0
 800160a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff5f 	bl	80014d4 <__NVIC_SetPriority>
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffb2 	bl	8001590 <SysTick_Config>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001646:	4b89      	ldr	r3, [pc, #548]	; (800186c <HAL_GPIO_Init+0x234>)
 8001648:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800164a:	e194      	b.n	8001976 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	2101      	movs	r1, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa01 f303 	lsl.w	r3, r1, r3
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8186 	beq.w	8001970 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d00b      	beq.n	8001684 <HAL_GPIO_Init+0x4c>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d007      	beq.n	8001684 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001678:	2b11      	cmp	r3, #17
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b12      	cmp	r3, #18
 8001682:	d130      	bne.n	80016e6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	2203      	movs	r2, #3
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ba:	2201      	movs	r2, #1
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	f003 0201 	and.w	r2, r3, #1
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	2203      	movs	r2, #3
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0xee>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b12      	cmp	r3, #18
 8001724:	d123      	bne.n	800176e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	08da      	lsrs	r2, r3, #3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3208      	adds	r2, #8
 800172e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	220f      	movs	r2, #15
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	691a      	ldr	r2, [r3, #16]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	08da      	lsrs	r2, r3, #3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3208      	adds	r2, #8
 8001768:	69b9      	ldr	r1, [r7, #24]
 800176a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0203 	and.w	r2, r3, #3
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 80e0 	beq.w	8001970 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b0:	4b2f      	ldr	r3, [pc, #188]	; (8001870 <HAL_GPIO_Init+0x238>)
 80017b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017b6:	4a2e      	ldr	r2, [pc, #184]	; (8001870 <HAL_GPIO_Init+0x238>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017c0:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <HAL_GPIO_Init+0x238>)
 80017c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ce:	4a29      	ldr	r2, [pc, #164]	; (8001874 <HAL_GPIO_Init+0x23c>)
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3302      	adds	r3, #2
 80017d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	220f      	movs	r2, #15
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a20      	ldr	r2, [pc, #128]	; (8001878 <HAL_GPIO_Init+0x240>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d052      	beq.n	80018a0 <HAL_GPIO_Init+0x268>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a1f      	ldr	r2, [pc, #124]	; (800187c <HAL_GPIO_Init+0x244>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d031      	beq.n	8001866 <HAL_GPIO_Init+0x22e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a1e      	ldr	r2, [pc, #120]	; (8001880 <HAL_GPIO_Init+0x248>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d02b      	beq.n	8001862 <HAL_GPIO_Init+0x22a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <HAL_GPIO_Init+0x24c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d025      	beq.n	800185e <HAL_GPIO_Init+0x226>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <HAL_GPIO_Init+0x250>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d01f      	beq.n	800185a <HAL_GPIO_Init+0x222>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a1b      	ldr	r2, [pc, #108]	; (800188c <HAL_GPIO_Init+0x254>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d019      	beq.n	8001856 <HAL_GPIO_Init+0x21e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a1a      	ldr	r2, [pc, #104]	; (8001890 <HAL_GPIO_Init+0x258>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_GPIO_Init+0x21a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a19      	ldr	r2, [pc, #100]	; (8001894 <HAL_GPIO_Init+0x25c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d00d      	beq.n	800184e <HAL_GPIO_Init+0x216>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a18      	ldr	r2, [pc, #96]	; (8001898 <HAL_GPIO_Init+0x260>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d007      	beq.n	800184a <HAL_GPIO_Init+0x212>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a17      	ldr	r2, [pc, #92]	; (800189c <HAL_GPIO_Init+0x264>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d101      	bne.n	8001846 <HAL_GPIO_Init+0x20e>
 8001842:	2309      	movs	r3, #9
 8001844:	e02d      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001846:	230a      	movs	r3, #10
 8001848:	e02b      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800184a:	2308      	movs	r3, #8
 800184c:	e029      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800184e:	2307      	movs	r3, #7
 8001850:	e027      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001852:	2306      	movs	r3, #6
 8001854:	e025      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001856:	2305      	movs	r3, #5
 8001858:	e023      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800185a:	2304      	movs	r3, #4
 800185c:	e021      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800185e:	2303      	movs	r3, #3
 8001860:	e01f      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001862:	2302      	movs	r3, #2
 8001864:	e01d      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001866:	2301      	movs	r3, #1
 8001868:	e01b      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800186a:	bf00      	nop
 800186c:	58000080 	.word	0x58000080
 8001870:	58024400 	.word	0x58024400
 8001874:	58000400 	.word	0x58000400
 8001878:	58020000 	.word	0x58020000
 800187c:	58020400 	.word	0x58020400
 8001880:	58020800 	.word	0x58020800
 8001884:	58020c00 	.word	0x58020c00
 8001888:	58021000 	.word	0x58021000
 800188c:	58021400 	.word	0x58021400
 8001890:	58021800 	.word	0x58021800
 8001894:	58021c00 	.word	0x58021c00
 8001898:	58022000 	.word	0x58022000
 800189c:	58022400 	.word	0x58022400
 80018a0:	2300      	movs	r3, #0
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	f002 0203 	and.w	r2, r2, #3
 80018a8:	0092      	lsls	r2, r2, #2
 80018aa:	4093      	lsls	r3, r2
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b2:	4938      	ldr	r1, [pc, #224]	; (8001994 <HAL_GPIO_Init+0x35c>)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800193a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	3301      	adds	r3, #1
 8001974:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	f47f ae63 	bne.w	800164c <HAL_GPIO_Init+0x14>
  }
}
 8001986:	bf00      	nop
 8001988:	3724      	adds	r7, #36	; 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	58000400 	.word	0x58000400

08001998 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_PWREx_ConfigSupply+0x70>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d00a      	beq.n	80019c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <HAL_PWREx_ConfigSupply+0x70>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d001      	beq.n	80019be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e01f      	b.n	80019fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	e01d      	b.n	80019fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_PWREx_ConfigSupply+0x70>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f023 0207 	bic.w	r2, r3, #7
 80019ca:	490f      	ldr	r1, [pc, #60]	; (8001a08 <HAL_PWREx_ConfigSupply+0x70>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019d2:	f7ff fd13 	bl	80013fc <HAL_GetTick>
 80019d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019d8:	e009      	b.n	80019ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019da:	f7ff fd0f 	bl	80013fc <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019e8:	d901      	bls.n	80019ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e007      	b.n	80019fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_PWREx_ConfigSupply+0x70>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019fa:	d1ee      	bne.n	80019da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	58024800 	.word	0x58024800

08001a0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	; 0x30
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e3ff      	b.n	800221e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 8087 	beq.w	8001b3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a2c:	4b99      	ldr	r3, [pc, #612]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a36:	4b97      	ldr	r3, [pc, #604]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3e:	2b10      	cmp	r3, #16
 8001a40:	d007      	beq.n	8001a52 <HAL_RCC_OscConfig+0x46>
 8001a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a44:	2b18      	cmp	r3, #24
 8001a46:	d110      	bne.n	8001a6a <HAL_RCC_OscConfig+0x5e>
 8001a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d10b      	bne.n	8001a6a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a52:	4b90      	ldr	r3, [pc, #576]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d06c      	beq.n	8001b38 <HAL_RCC_OscConfig+0x12c>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d168      	bne.n	8001b38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e3d9      	b.n	800221e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a72:	d106      	bne.n	8001a82 <HAL_RCC_OscConfig+0x76>
 8001a74:	4b87      	ldr	r3, [pc, #540]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a86      	ldr	r2, [pc, #536]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	e02e      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd4>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x98>
 8001a8a:	4b82      	ldr	r3, [pc, #520]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a81      	ldr	r2, [pc, #516]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b7f      	ldr	r3, [pc, #508]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a7e      	ldr	r2, [pc, #504]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e01d      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd4>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aac:	d10c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0xbc>
 8001aae:	4b79      	ldr	r3, [pc, #484]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a78      	ldr	r2, [pc, #480]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b76      	ldr	r3, [pc, #472]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a75      	ldr	r2, [pc, #468]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e00b      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd4>
 8001ac8:	4b72      	ldr	r3, [pc, #456]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a71      	ldr	r2, [pc, #452]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b6f      	ldr	r3, [pc, #444]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a6e      	ldr	r2, [pc, #440]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d013      	beq.n	8001b10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fc88 	bl	80013fc <HAL_GetTick>
 8001aec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff fc84 	bl	80013fc <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e38d      	b.n	800221e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b02:	4b64      	ldr	r3, [pc, #400]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0xe4>
 8001b0e:	e014      	b.n	8001b3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7ff fc74 	bl	80013fc <HAL_GetTick>
 8001b14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b18:	f7ff fc70 	bl	80013fc <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e379      	b.n	800221e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b2a:	4b5a      	ldr	r3, [pc, #360]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x10c>
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 80ae 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b48:	4b52      	ldr	r3, [pc, #328]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b52:	4b50      	ldr	r3, [pc, #320]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <HAL_RCC_OscConfig+0x162>
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	2b18      	cmp	r3, #24
 8001b62:	d13a      	bne.n	8001bda <HAL_RCC_OscConfig+0x1ce>
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d135      	bne.n	8001bda <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b6e:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d005      	beq.n	8001b86 <HAL_RCC_OscConfig+0x17a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e34b      	b.n	800221e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b86:	f7ff fc67 	bl	8001458 <HAL_GetREVID>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d817      	bhi.n	8001bc4 <HAL_RCC_OscConfig+0x1b8>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	2b40      	cmp	r3, #64	; 0x40
 8001b9a:	d108      	bne.n	8001bae <HAL_RCC_OscConfig+0x1a2>
 8001b9c:	4b3d      	ldr	r3, [pc, #244]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001ba4:	4a3b      	ldr	r2, [pc, #236]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001baa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bac:	e07a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bae:	4b39      	ldr	r3, [pc, #228]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	031b      	lsls	r3, r3, #12
 8001bbc:	4935      	ldr	r1, [pc, #212]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc2:	e06f      	b.n	8001ca4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc4:	4b33      	ldr	r3, [pc, #204]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	061b      	lsls	r3, r3, #24
 8001bd2:	4930      	ldr	r1, [pc, #192]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bd8:	e064      	b.n	8001ca4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d045      	beq.n	8001c6e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001be2:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 0219 	bic.w	r2, r3, #25
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	4929      	ldr	r1, [pc, #164]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fc02 	bl	80013fc <HAL_GetTick>
 8001bf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fbfe 	bl	80013fc <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e307      	b.n	800221e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1a:	f7ff fc1d 	bl	8001458 <HAL_GetREVID>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	f241 0303 	movw	r3, #4099	; 0x1003
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d817      	bhi.n	8001c58 <HAL_RCC_OscConfig+0x24c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	2b40      	cmp	r3, #64	; 0x40
 8001c2e:	d108      	bne.n	8001c42 <HAL_RCC_OscConfig+0x236>
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c38:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c3e:	6053      	str	r3, [r2, #4]
 8001c40:	e030      	b.n	8001ca4 <HAL_RCC_OscConfig+0x298>
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	031b      	lsls	r3, r3, #12
 8001c50:	4910      	ldr	r1, [pc, #64]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
 8001c56:	e025      	b.n	8001ca4 <HAL_RCC_OscConfig+0x298>
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	061b      	lsls	r3, r3, #24
 8001c66:	490b      	ldr	r1, [pc, #44]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
 8001c6c:	e01a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001c74:	f023 0301 	bic.w	r3, r3, #1
 8001c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7ff fbbf 	bl	80013fc <HAL_GetTick>
 8001c7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c82:	f7ff fbbb 	bl	80013fc <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d903      	bls.n	8001c98 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e2c4      	b.n	800221e <HAL_RCC_OscConfig+0x812>
 8001c94:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c98:	4ba4      	ldr	r3, [pc, #656]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1ee      	bne.n	8001c82 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80a9 	beq.w	8001e04 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb2:	4b9e      	ldr	r3, [pc, #632]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cbc:	4b9b      	ldr	r3, [pc, #620]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d007      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x2cc>
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b18      	cmp	r3, #24
 8001ccc:	d13a      	bne.n	8001d44 <HAL_RCC_OscConfig+0x338>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d135      	bne.n	8001d44 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cd8:	4b94      	ldr	r3, [pc, #592]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x2e4>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	2b80      	cmp	r3, #128	; 0x80
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e296      	b.n	800221e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cf0:	f7ff fbb2 	bl	8001458 <HAL_GetREVID>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f241 0303 	movw	r3, #4099	; 0x1003
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d817      	bhi.n	8001d2e <HAL_RCC_OscConfig+0x322>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	2b20      	cmp	r3, #32
 8001d04:	d108      	bne.n	8001d18 <HAL_RCC_OscConfig+0x30c>
 8001d06:	4b89      	ldr	r3, [pc, #548]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d0e:	4a87      	ldr	r2, [pc, #540]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001d10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d14:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d16:	e075      	b.n	8001e04 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d18:	4b84      	ldr	r3, [pc, #528]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	069b      	lsls	r3, r3, #26
 8001d26:	4981      	ldr	r1, [pc, #516]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d2c:	e06a      	b.n	8001e04 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d2e:	4b7f      	ldr	r3, [pc, #508]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	061b      	lsls	r3, r3, #24
 8001d3c:	497b      	ldr	r1, [pc, #492]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d42:	e05f      	b.n	8001e04 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d042      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d4c:	4b77      	ldr	r3, [pc, #476]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a76      	ldr	r2, [pc, #472]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7ff fb50 	bl	80013fc <HAL_GetTick>
 8001d5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d60:	f7ff fb4c 	bl	80013fc <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e255      	b.n	800221e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d72:	4b6e      	ldr	r3, [pc, #440]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d7e:	f7ff fb6b 	bl	8001458 <HAL_GetREVID>
 8001d82:	4602      	mov	r2, r0
 8001d84:	f241 0303 	movw	r3, #4099	; 0x1003
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d817      	bhi.n	8001dbc <HAL_RCC_OscConfig+0x3b0>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	2b20      	cmp	r3, #32
 8001d92:	d108      	bne.n	8001da6 <HAL_RCC_OscConfig+0x39a>
 8001d94:	4b65      	ldr	r3, [pc, #404]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d9c:	4a63      	ldr	r2, [pc, #396]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001d9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001da2:	6053      	str	r3, [r2, #4]
 8001da4:	e02e      	b.n	8001e04 <HAL_RCC_OscConfig+0x3f8>
 8001da6:	4b61      	ldr	r3, [pc, #388]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	069b      	lsls	r3, r3, #26
 8001db4:	495d      	ldr	r1, [pc, #372]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
 8001dba:	e023      	b.n	8001e04 <HAL_RCC_OscConfig+0x3f8>
 8001dbc:	4b5b      	ldr	r3, [pc, #364]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	061b      	lsls	r3, r3, #24
 8001dca:	4958      	ldr	r1, [pc, #352]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60cb      	str	r3, [r1, #12]
 8001dd0:	e018      	b.n	8001e04 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001dd2:	4b56      	ldr	r3, [pc, #344]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a55      	ldr	r2, [pc, #340]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dde:	f7ff fb0d 	bl	80013fc <HAL_GetTick>
 8001de2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001de6:	f7ff fb09 	bl	80013fc <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e212      	b.n	800221e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001df8:	4b4c      	ldr	r3, [pc, #304]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1f0      	bne.n	8001de6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d036      	beq.n	8001e7e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d019      	beq.n	8001e4c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e18:	4b44      	ldr	r3, [pc, #272]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e1c:	4a43      	ldr	r2, [pc, #268]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e24:	f7ff faea 	bl	80013fc <HAL_GetTick>
 8001e28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fae6 	bl	80013fc <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e1ef      	b.n	800221e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e3e:	4b3b      	ldr	r3, [pc, #236]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x420>
 8001e4a:	e018      	b.n	8001e7e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4c:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e50:	4a36      	ldr	r2, [pc, #216]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7ff fad0 	bl	80013fc <HAL_GetTick>
 8001e5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff facc 	bl	80013fc <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e1d5      	b.n	800221e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e72:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d036      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d019      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a25      	ldr	r2, [pc, #148]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001e98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e9e:	f7ff faad 	bl	80013fc <HAL_GetTick>
 8001ea2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ea6:	f7ff faa9 	bl	80013fc <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e1b2      	b.n	800221e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x49a>
 8001ec4:	e018      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001ecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ed0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff fa93 	bl	80013fc <HAL_GetTick>
 8001ed6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001eda:	f7ff fa8f 	bl	80013fc <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e198      	b.n	800221e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001eec:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <HAL_RCC_OscConfig+0x520>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1f0      	bne.n	8001eda <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 8085 	beq.w	8002010 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_RCC_OscConfig+0x524>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <HAL_RCC_OscConfig+0x524>)
 8001f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f12:	f7ff fa73 	bl	80013fc <HAL_GetTick>
 8001f16:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f18:	e00c      	b.n	8001f34 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f1a:	f7ff fa6f 	bl	80013fc <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b64      	cmp	r3, #100	; 0x64
 8001f26:	d905      	bls.n	8001f34 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e178      	b.n	800221e <HAL_RCC_OscConfig+0x812>
 8001f2c:	58024400 	.word	0x58024400
 8001f30:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f34:	4b96      	ldr	r3, [pc, #600]	; (8002190 <HAL_RCC_OscConfig+0x784>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ec      	beq.n	8001f1a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x54a>
 8001f48:	4b92      	ldr	r3, [pc, #584]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	4a91      	ldr	r2, [pc, #580]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6713      	str	r3, [r2, #112]	; 0x70
 8001f54:	e02d      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5a6>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x56c>
 8001f5e:	4b8d      	ldr	r3, [pc, #564]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	4a8c      	ldr	r2, [pc, #560]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6a:	4b8a      	ldr	r3, [pc, #552]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6e:	4a89      	ldr	r2, [pc, #548]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	6713      	str	r3, [r2, #112]	; 0x70
 8001f76:	e01c      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5a6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d10c      	bne.n	8001f9a <HAL_RCC_OscConfig+0x58e>
 8001f80:	4b84      	ldr	r3, [pc, #528]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	4a83      	ldr	r2, [pc, #524]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8001f86:	f043 0304 	orr.w	r3, r3, #4
 8001f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8c:	4b81      	ldr	r3, [pc, #516]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f90:	4a80      	ldr	r2, [pc, #512]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6713      	str	r3, [r2, #112]	; 0x70
 8001f98:	e00b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5a6>
 8001f9a:	4b7e      	ldr	r3, [pc, #504]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9e:	4a7d      	ldr	r2, [pc, #500]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa6:	4b7b      	ldr	r3, [pc, #492]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001faa:	4a7a      	ldr	r2, [pc, #488]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8001fac:	f023 0304 	bic.w	r3, r3, #4
 8001fb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d015      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fba:	f7ff fa1f 	bl	80013fc <HAL_GetTick>
 8001fbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7ff fa1b 	bl	80013fc <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e122      	b.n	800221e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fd8:	4b6e      	ldr	r3, [pc, #440]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0ee      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x5b6>
 8001fe4:	e014      	b.n	8002010 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe6:	f7ff fa09 	bl	80013fc <HAL_GetTick>
 8001fea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fec:	e00a      	b.n	8002004 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f7ff fa05 	bl	80013fc <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e10c      	b.n	800221e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002004:	4b63      	ldr	r3, [pc, #396]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1ee      	bne.n	8001fee <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 8101 	beq.w	800221c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800201a:	4b5e      	ldr	r3, [pc, #376]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002022:	2b18      	cmp	r3, #24
 8002024:	f000 80bc 	beq.w	80021a0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	2b02      	cmp	r3, #2
 800202e:	f040 8095 	bne.w	800215c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002032:	4b58      	ldr	r3, [pc, #352]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a57      	ldr	r2, [pc, #348]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8002038:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800203c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203e:	f7ff f9dd 	bl	80013fc <HAL_GetTick>
 8002042:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002046:	f7ff f9d9 	bl	80013fc <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e0e2      	b.n	800221e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002058:	4b4e      	ldr	r3, [pc, #312]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f0      	bne.n	8002046 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002064:	4b4b      	ldr	r3, [pc, #300]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8002066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002068:	4b4b      	ldr	r3, [pc, #300]	; (8002198 <HAL_RCC_OscConfig+0x78c>)
 800206a:	4013      	ands	r3, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	430a      	orrs	r2, r1
 8002078:	4946      	ldr	r1, [pc, #280]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 800207a:	4313      	orrs	r3, r2
 800207c:	628b      	str	r3, [r1, #40]	; 0x28
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	3b01      	subs	r3, #1
 8002084:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208c:	3b01      	subs	r3, #1
 800208e:	025b      	lsls	r3, r3, #9
 8002090:	b29b      	uxth	r3, r3
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002098:	3b01      	subs	r3, #1
 800209a:	041b      	lsls	r3, r3, #16
 800209c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a6:	3b01      	subs	r3, #1
 80020a8:	061b      	lsls	r3, r3, #24
 80020aa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80020ae:	4939      	ldr	r1, [pc, #228]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80020b4:	4b37      	ldr	r3, [pc, #220]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	4a36      	ldr	r2, [pc, #216]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020c0:	4b34      	ldr	r3, [pc, #208]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 80020c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c4:	4b35      	ldr	r3, [pc, #212]	; (800219c <HAL_RCC_OscConfig+0x790>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020cc:	00d2      	lsls	r2, r2, #3
 80020ce:	4931      	ldr	r1, [pc, #196]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80020d4:	4b2f      	ldr	r3, [pc, #188]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	f023 020c 	bic.w	r2, r3, #12
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	492c      	ldr	r1, [pc, #176]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80020e6:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	f023 0202 	bic.w	r2, r3, #2
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	4928      	ldr	r1, [pc, #160]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80020f8:	4b26      	ldr	r3, [pc, #152]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	4a25      	ldr	r2, [pc, #148]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 80020fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002102:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002104:	4b23      	ldr	r3, [pc, #140]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	4a22      	ldr	r2, [pc, #136]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 800210a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002110:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	4a1f      	ldr	r2, [pc, #124]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8002116:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800211a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	4a1c      	ldr	r2, [pc, #112]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002128:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a19      	ldr	r2, [pc, #100]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 800212e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7ff f962 	bl	80013fc <HAL_GetTick>
 8002138:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213c:	f7ff f95e 	bl	80013fc <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e067      	b.n	800221e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800214e:	4b11      	ldr	r3, [pc, #68]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x730>
 800215a:	e05f      	b.n	800221c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8002162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7ff f948 	bl	80013fc <HAL_GetTick>
 800216c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002170:	f7ff f944 	bl	80013fc <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e04d      	b.n	800221e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_RCC_OscConfig+0x788>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x764>
 800218e:	e045      	b.n	800221c <HAL_RCC_OscConfig+0x810>
 8002190:	58024800 	.word	0x58024800
 8002194:	58024400 	.word	0x58024400
 8002198:	fffffc0c 	.word	0xfffffc0c
 800219c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80021a0:	4b21      	ldr	r3, [pc, #132]	; (8002228 <HAL_RCC_OscConfig+0x81c>)
 80021a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_RCC_OscConfig+0x81c>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d031      	beq.n	8002218 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	f003 0203 	and.w	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d12a      	bne.n	8002218 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d122      	bne.n	8002218 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021de:	429a      	cmp	r2, r3
 80021e0:	d11a      	bne.n	8002218 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	0a5b      	lsrs	r3, r3, #9
 80021e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ee:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d111      	bne.n	8002218 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	0c1b      	lsrs	r3, r3, #16
 80021f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002200:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d108      	bne.n	8002218 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	0e1b      	lsrs	r3, r3, #24
 800220a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002212:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3730      	adds	r7, #48	; 0x30
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	58024400 	.word	0x58024400

0800222c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e19c      	b.n	800257a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002240:	4b8a      	ldr	r3, [pc, #552]	; (800246c <HAL_RCC_ClockConfig+0x240>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d910      	bls.n	8002270 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b87      	ldr	r3, [pc, #540]	; (800246c <HAL_RCC_ClockConfig+0x240>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 020f 	bic.w	r2, r3, #15
 8002256:	4985      	ldr	r1, [pc, #532]	; (800246c <HAL_RCC_ClockConfig+0x240>)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	4b83      	ldr	r3, [pc, #524]	; (800246c <HAL_RCC_ClockConfig+0x240>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e184      	b.n	800257a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d010      	beq.n	800229e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	4b7b      	ldr	r3, [pc, #492]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002288:	429a      	cmp	r2, r3
 800228a:	d908      	bls.n	800229e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800228c:	4b78      	ldr	r3, [pc, #480]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	4975      	ldr	r1, [pc, #468]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 800229a:	4313      	orrs	r3, r2
 800229c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d010      	beq.n	80022cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	4b70      	ldr	r3, [pc, #448]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d908      	bls.n	80022cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022ba:	4b6d      	ldr	r3, [pc, #436]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	496a      	ldr	r1, [pc, #424]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d010      	beq.n	80022fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	4b64      	ldr	r3, [pc, #400]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d908      	bls.n	80022fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022e8:	4b61      	ldr	r3, [pc, #388]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	495e      	ldr	r1, [pc, #376]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	2b00      	cmp	r3, #0
 8002304:	d010      	beq.n	8002328 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69da      	ldr	r2, [r3, #28]
 800230a:	4b59      	ldr	r3, [pc, #356]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002312:	429a      	cmp	r2, r3
 8002314:	d908      	bls.n	8002328 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002316:	4b56      	ldr	r3, [pc, #344]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4953      	ldr	r1, [pc, #332]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 8002324:	4313      	orrs	r3, r2
 8002326:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d010      	beq.n	8002356 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	4b4d      	ldr	r3, [pc, #308]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	429a      	cmp	r2, r3
 8002342:	d908      	bls.n	8002356 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002344:	4b4a      	ldr	r3, [pc, #296]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f023 020f 	bic.w	r2, r3, #15
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4947      	ldr	r1, [pc, #284]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 8002352:	4313      	orrs	r3, r2
 8002354:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d055      	beq.n	800240e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002362:	4b43      	ldr	r3, [pc, #268]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	4940      	ldr	r1, [pc, #256]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 8002370:	4313      	orrs	r3, r2
 8002372:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d107      	bne.n	800238c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800237c:	4b3c      	ldr	r3, [pc, #240]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d121      	bne.n	80023cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0f6      	b.n	800257a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b03      	cmp	r3, #3
 8002392:	d107      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002394:	4b36      	ldr	r3, [pc, #216]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d115      	bne.n	80023cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0ea      	b.n	800257a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023ac:	4b30      	ldr	r3, [pc, #192]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0de      	b.n	800257a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023bc:	4b2c      	ldr	r3, [pc, #176]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0d6      	b.n	800257a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023cc:	4b28      	ldr	r3, [pc, #160]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f023 0207 	bic.w	r2, r3, #7
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4925      	ldr	r1, [pc, #148]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023de:	f7ff f80d 	bl	80013fc <HAL_GetTick>
 80023e2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e6:	f7ff f809 	bl	80013fc <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0be      	b.n	800257a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fc:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	429a      	cmp	r2, r3
 800240c:	d1eb      	bne.n	80023e6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d010      	beq.n	800243c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	4b14      	ldr	r3, [pc, #80]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	429a      	cmp	r2, r3
 8002428:	d208      	bcs.n	800243c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800242a:	4b11      	ldr	r3, [pc, #68]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f023 020f 	bic.w	r2, r3, #15
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	490e      	ldr	r1, [pc, #56]	; (8002470 <HAL_RCC_ClockConfig+0x244>)
 8002438:	4313      	orrs	r3, r2
 800243a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_RCC_ClockConfig+0x240>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d214      	bcs.n	8002474 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <HAL_RCC_ClockConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 020f 	bic.w	r2, r3, #15
 8002452:	4906      	ldr	r1, [pc, #24]	; (800246c <HAL_RCC_ClockConfig+0x240>)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800245a:	4b04      	ldr	r3, [pc, #16]	; (800246c <HAL_RCC_ClockConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d005      	beq.n	8002474 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e086      	b.n	800257a <HAL_RCC_ClockConfig+0x34e>
 800246c:	52002000 	.word	0x52002000
 8002470:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d010      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <HAL_RCC_ClockConfig+0x358>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800248c:	429a      	cmp	r2, r3
 800248e:	d208      	bcs.n	80024a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002490:	4b3c      	ldr	r3, [pc, #240]	; (8002584 <HAL_RCC_ClockConfig+0x358>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	4939      	ldr	r1, [pc, #228]	; (8002584 <HAL_RCC_ClockConfig+0x358>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d010      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	4b34      	ldr	r3, [pc, #208]	; (8002584 <HAL_RCC_ClockConfig+0x358>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d208      	bcs.n	80024d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024be:	4b31      	ldr	r3, [pc, #196]	; (8002584 <HAL_RCC_ClockConfig+0x358>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	492e      	ldr	r1, [pc, #184]	; (8002584 <HAL_RCC_ClockConfig+0x358>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d010      	beq.n	80024fe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699a      	ldr	r2, [r3, #24]
 80024e0:	4b28      	ldr	r3, [pc, #160]	; (8002584 <HAL_RCC_ClockConfig+0x358>)
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d208      	bcs.n	80024fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024ec:	4b25      	ldr	r3, [pc, #148]	; (8002584 <HAL_RCC_ClockConfig+0x358>)
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	4922      	ldr	r1, [pc, #136]	; (8002584 <HAL_RCC_ClockConfig+0x358>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0320 	and.w	r3, r3, #32
 8002506:	2b00      	cmp	r3, #0
 8002508:	d010      	beq.n	800252c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69da      	ldr	r2, [r3, #28]
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <HAL_RCC_ClockConfig+0x358>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002516:	429a      	cmp	r2, r3
 8002518:	d208      	bcs.n	800252c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <HAL_RCC_ClockConfig+0x358>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	4917      	ldr	r1, [pc, #92]	; (8002584 <HAL_RCC_ClockConfig+0x358>)
 8002528:	4313      	orrs	r3, r2
 800252a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800252c:	f000 f834 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8002530:	4601      	mov	r1, r0
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <HAL_RCC_ClockConfig+0x358>)
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	4a12      	ldr	r2, [pc, #72]	; (8002588 <HAL_RCC_ClockConfig+0x35c>)
 800253e:	5cd3      	ldrb	r3, [r2, r3]
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	fa21 f303 	lsr.w	r3, r1, r3
 8002548:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800254a:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <HAL_RCC_ClockConfig+0x358>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <HAL_RCC_ClockConfig+0x35c>)
 8002554:	5cd3      	ldrb	r3, [r2, r3]
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
 8002560:	4a0a      	ldr	r2, [pc, #40]	; (800258c <HAL_RCC_ClockConfig+0x360>)
 8002562:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002564:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <HAL_RCC_ClockConfig+0x364>)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <HAL_RCC_ClockConfig+0x368>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fefa 	bl	8001368 <HAL_InitTick>
 8002574:	4603      	mov	r3, r0
 8002576:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002578:	7bfb      	ldrb	r3, [r7, #15]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	58024400 	.word	0x58024400
 8002588:	08006724 	.word	0x08006724
 800258c:	24000004 	.word	0x24000004
 8002590:	24000000 	.word	0x24000000
 8002594:	24000008 	.word	0x24000008

08002598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800259e:	4baf      	ldr	r3, [pc, #700]	; (800285c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025a6:	2b18      	cmp	r3, #24
 80025a8:	f200 814e 	bhi.w	8002848 <HAL_RCC_GetSysClockFreq+0x2b0>
 80025ac:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80025ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b2:	bf00      	nop
 80025b4:	08002619 	.word	0x08002619
 80025b8:	08002849 	.word	0x08002849
 80025bc:	08002849 	.word	0x08002849
 80025c0:	08002849 	.word	0x08002849
 80025c4:	08002849 	.word	0x08002849
 80025c8:	08002849 	.word	0x08002849
 80025cc:	08002849 	.word	0x08002849
 80025d0:	08002849 	.word	0x08002849
 80025d4:	0800263f 	.word	0x0800263f
 80025d8:	08002849 	.word	0x08002849
 80025dc:	08002849 	.word	0x08002849
 80025e0:	08002849 	.word	0x08002849
 80025e4:	08002849 	.word	0x08002849
 80025e8:	08002849 	.word	0x08002849
 80025ec:	08002849 	.word	0x08002849
 80025f0:	08002849 	.word	0x08002849
 80025f4:	08002645 	.word	0x08002645
 80025f8:	08002849 	.word	0x08002849
 80025fc:	08002849 	.word	0x08002849
 8002600:	08002849 	.word	0x08002849
 8002604:	08002849 	.word	0x08002849
 8002608:	08002849 	.word	0x08002849
 800260c:	08002849 	.word	0x08002849
 8002610:	08002849 	.word	0x08002849
 8002614:	0800264b 	.word	0x0800264b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002618:	4b90      	ldr	r3, [pc, #576]	; (800285c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	2b00      	cmp	r3, #0
 8002622:	d009      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002624:	4b8d      	ldr	r3, [pc, #564]	; (800285c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	08db      	lsrs	r3, r3, #3
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	4a8c      	ldr	r2, [pc, #560]	; (8002860 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
 8002634:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002636:	e10a      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002638:	4b89      	ldr	r3, [pc, #548]	; (8002860 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800263a:	61bb      	str	r3, [r7, #24]
    break;
 800263c:	e107      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800263e:	4b89      	ldr	r3, [pc, #548]	; (8002864 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002640:	61bb      	str	r3, [r7, #24]
    break;
 8002642:	e104      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002644:	4b88      	ldr	r3, [pc, #544]	; (8002868 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002646:	61bb      	str	r3, [r7, #24]
    break;
 8002648:	e101      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800264a:	4b84      	ldr	r3, [pc, #528]	; (800285c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002654:	4b81      	ldr	r3, [pc, #516]	; (800285c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800265e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002660:	4b7e      	ldr	r3, [pc, #504]	; (800285c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800266a:	4b7c      	ldr	r3, [pc, #496]	; (800285c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800266c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266e:	08db      	lsrs	r3, r3, #3
 8002670:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002682:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80da 	beq.w	8002842 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d05a      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x1b2>
 8002694:	2b01      	cmp	r3, #1
 8002696:	d302      	bcc.n	800269e <HAL_RCC_GetSysClockFreq+0x106>
 8002698:	2b02      	cmp	r3, #2
 800269a:	d078      	beq.n	800278e <HAL_RCC_GetSysClockFreq+0x1f6>
 800269c:	e099      	b.n	80027d2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800269e:	4b6f      	ldr	r3, [pc, #444]	; (800285c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d02d      	beq.n	8002706 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80026aa:	4b6c      	ldr	r3, [pc, #432]	; (800285c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	08db      	lsrs	r3, r3, #3
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	4a6a      	ldr	r2, [pc, #424]	; (8002860 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80026b6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ba:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	ee07 3a90 	vmov	s15, r3
 80026cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026d4:	4b61      	ldr	r3, [pc, #388]	; (800285c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026dc:	ee07 3a90 	vmov	s15, r3
 80026e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80026e8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800286c <HAL_RCC_GetSysClockFreq+0x2d4>
 80026ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002700:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002704:	e087      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	ee07 3a90 	vmov	s15, r3
 800270c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002710:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002870 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002718:	4b50      	ldr	r3, [pc, #320]	; (800285c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002720:	ee07 3a90 	vmov	s15, r3
 8002724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002728:	ed97 6a02 	vldr	s12, [r7, #8]
 800272c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800286c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002730:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002734:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002738:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800273c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002744:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002748:	e065      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	ee07 3a90 	vmov	s15, r3
 8002750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002754:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002874 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800275c:	4b3f      	ldr	r3, [pc, #252]	; (800285c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002764:	ee07 3a90 	vmov	s15, r3
 8002768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800276c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002770:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800286c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002774:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002778:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800277c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002788:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800278c:	e043      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	ee07 3a90 	vmov	s15, r3
 8002794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002798:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002878 <HAL_RCC_GetSysClockFreq+0x2e0>
 800279c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a0:	4b2e      	ldr	r3, [pc, #184]	; (800285c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a8:	ee07 3a90 	vmov	s15, r3
 80027ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80027b4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800286c <HAL_RCC_GetSysClockFreq+0x2d4>
 80027b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027d0:	e021      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	ee07 3a90 	vmov	s15, r3
 80027d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027dc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002874 <HAL_RCC_GetSysClockFreq+0x2dc>
 80027e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ec:	ee07 3a90 	vmov	s15, r3
 80027f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80027f8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800286c <HAL_RCC_GetSysClockFreq+0x2d4>
 80027fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002800:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002804:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002808:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800280c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002810:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002814:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002816:	4b11      	ldr	r3, [pc, #68]	; (800285c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	0a5b      	lsrs	r3, r3, #9
 800281c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002820:	3301      	adds	r3, #1
 8002822:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	ee07 3a90 	vmov	s15, r3
 800282a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800282e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800283a:	ee17 3a90 	vmov	r3, s15
 800283e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002840:	e005      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	61bb      	str	r3, [r7, #24]
    break;
 8002846:	e002      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800284a:	61bb      	str	r3, [r7, #24]
    break;
 800284c:	bf00      	nop
  }

  return sysclockfreq;
 800284e:	69bb      	ldr	r3, [r7, #24]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3724      	adds	r7, #36	; 0x24
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	58024400 	.word	0x58024400
 8002860:	03d09000 	.word	0x03d09000
 8002864:	003d0900 	.word	0x003d0900
 8002868:	017d7840 	.word	0x017d7840
 800286c:	46000000 	.word	0x46000000
 8002870:	4c742400 	.word	0x4c742400
 8002874:	4a742400 	.word	0x4a742400
 8002878:	4bbebc20 	.word	0x4bbebc20

0800287c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002882:	f7ff fe89 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8002886:	4601      	mov	r1, r0
 8002888:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_RCC_GetHCLKFreq+0x50>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	0a1b      	lsrs	r3, r3, #8
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	4a0f      	ldr	r2, [pc, #60]	; (80028d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002894:	5cd3      	ldrb	r3, [r2, r3]
 8002896:	f003 031f 	and.w	r3, r3, #31
 800289a:	fa21 f303 	lsr.w	r3, r1, r3
 800289e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_RCC_GetHCLKFreq+0x50>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80028aa:	5cd3      	ldrb	r3, [r2, r3]
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	fa22 f303 	lsr.w	r3, r2, r3
 80028b6:	4a07      	ldr	r2, [pc, #28]	; (80028d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80028b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028ba:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	58024400 	.word	0x58024400
 80028d0:	08006724 	.word	0x08006724
 80028d4:	24000004 	.word	0x24000004
 80028d8:	24000000 	.word	0x24000000

080028dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80028e0:	f7ff ffcc 	bl	800287c <HAL_RCC_GetHCLKFreq>
 80028e4:	4601      	mov	r1, r0
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	091b      	lsrs	r3, r3, #4
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	4a04      	ldr	r2, [pc, #16]	; (8002904 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028f2:	5cd3      	ldrb	r3, [r2, r3]
 80028f4:	f003 031f 	and.w	r3, r3, #31
 80028f8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	58024400 	.word	0x58024400
 8002904:	08006724 	.word	0x08006724

08002908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800290c:	f7ff ffb6 	bl	800287c <HAL_RCC_GetHCLKFreq>
 8002910:	4601      	mov	r1, r0
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	0a1b      	lsrs	r3, r3, #8
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_RCC_GetPCLK2Freq+0x28>)
 800291e:	5cd3      	ldrb	r3, [r2, r3]
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002928:	4618      	mov	r0, r3
 800292a:	bd80      	pop	{r7, pc}
 800292c:	58024400 	.word	0x58024400
 8002930:	08006724 	.word	0x08006724

08002934 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800293c:	2300      	movs	r3, #0
 800293e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002940:	2300      	movs	r3, #0
 8002942:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d03d      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002958:	d013      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800295a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800295e:	d802      	bhi.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002964:	e01f      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800296a:	d013      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800296c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002970:	d01c      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002972:	e018      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002974:	4baf      	ldr	r3, [pc, #700]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	4aae      	ldr	r2, [pc, #696]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800297a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002980:	e015      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3304      	adds	r3, #4
 8002986:	2102      	movs	r1, #2
 8002988:	4618      	mov	r0, r3
 800298a:	f001 f96f 	bl	8003c6c <RCCEx_PLL2_Config>
 800298e:	4603      	mov	r3, r0
 8002990:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002992:	e00c      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3324      	adds	r3, #36	; 0x24
 8002998:	2102      	movs	r1, #2
 800299a:	4618      	mov	r0, r3
 800299c:	f001 fa18 	bl	8003dd0 <RCCEx_PLL3_Config>
 80029a0:	4603      	mov	r3, r0
 80029a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80029a4:	e003      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]
      break;
 80029aa:	e000      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80029ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ae:	7dfb      	ldrb	r3, [r7, #23]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d109      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80029b4:	4b9f      	ldr	r3, [pc, #636]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029c0:	499c      	ldr	r1, [pc, #624]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	650b      	str	r3, [r1, #80]	; 0x50
 80029c6:	e001      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c8:	7dfb      	ldrb	r3, [r7, #23]
 80029ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d03d      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d826      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80029e0:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	080029fd 	.word	0x080029fd
 80029ec:	08002a0b 	.word	0x08002a0b
 80029f0:	08002a1d 	.word	0x08002a1d
 80029f4:	08002a35 	.word	0x08002a35
 80029f8:	08002a35 	.word	0x08002a35
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029fc:	4b8d      	ldr	r3, [pc, #564]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	4a8c      	ldr	r2, [pc, #560]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a08:	e015      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f001 f92b 	bl	8003c6c <RCCEx_PLL2_Config>
 8002a16:	4603      	mov	r3, r0
 8002a18:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a1a:	e00c      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3324      	adds	r3, #36	; 0x24
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f001 f9d4 	bl	8003dd0 <RCCEx_PLL3_Config>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a2c:	e003      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	75fb      	strb	r3, [r7, #23]
      break;
 8002a32:	e000      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a36:	7dfb      	ldrb	r3, [r7, #23]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a3c:	4b7d      	ldr	r3, [pc, #500]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a40:	f023 0207 	bic.w	r2, r3, #7
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a48:	497a      	ldr	r1, [pc, #488]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	650b      	str	r3, [r1, #80]	; 0x50
 8002a4e:	e001      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a50:	7dfb      	ldrb	r3, [r7, #23]
 8002a52:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d03e      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a64:	2b80      	cmp	r3, #128	; 0x80
 8002a66:	d01c      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002a68:	2b80      	cmp	r3, #128	; 0x80
 8002a6a:	d804      	bhi.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002a70:	2b40      	cmp	r3, #64	; 0x40
 8002a72:	d00d      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002a74:	e01e      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002a76:	2bc0      	cmp	r3, #192	; 0xc0
 8002a78:	d01f      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7e:	d01e      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002a80:	e018      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a82:	4b6c      	ldr	r3, [pc, #432]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	4a6b      	ldr	r2, [pc, #428]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a8e:	e017      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 f8e8 	bl	8003c6c <RCCEx_PLL2_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002aa0:	e00e      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3324      	adds	r3, #36	; 0x24
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f001 f991 	bl	8003dd0 <RCCEx_PLL3_Config>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002ab2:	e005      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ab8:	e002      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002aba:	bf00      	nop
 8002abc:	e000      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002abe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002ac6:	4b5b      	ldr	r3, [pc, #364]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	4958      	ldr	r1, [pc, #352]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	650b      	str	r3, [r1, #80]	; 0x50
 8002ad8:	e001      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d044      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002af4:	d01f      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002afa:	d805      	bhi.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b04:	d00e      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8002b06:	e01f      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002b08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b0c:	d01f      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002b0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b12:	d01e      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002b14:	e018      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b16:	4b47      	ldr	r3, [pc, #284]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1a:	4a46      	ldr	r2, [pc, #280]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b22:	e017      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3304      	adds	r3, #4
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f001 f89e 	bl	8003c6c <RCCEx_PLL2_Config>
 8002b30:	4603      	mov	r3, r0
 8002b32:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002b34:	e00e      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3324      	adds	r3, #36	; 0x24
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f001 f947 	bl	8003dd0 <RCCEx_PLL3_Config>
 8002b42:	4603      	mov	r3, r0
 8002b44:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b46:	e005      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b4c:	e002      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e000      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10a      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b5a:	4b36      	ldr	r3, [pc, #216]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b68:	4932      	ldr	r1, [pc, #200]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	658b      	str	r3, [r1, #88]	; 0x58
 8002b6e:	e001      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
 8002b72:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d044      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b8a:	d01f      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002b8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b90:	d805      	bhi.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002b96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b9a:	d00e      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002b9c:	e01f      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002b9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ba2:	d01f      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002ba4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ba8:	d01e      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002baa:	e018      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bac:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	4a20      	ldr	r2, [pc, #128]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bb8:	e017      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 f853 	bl	8003c6c <RCCEx_PLL2_Config>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002bca:	e00e      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3324      	adds	r3, #36	; 0x24
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 f8fc 	bl	8003dd0 <RCCEx_PLL3_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bdc:	e005      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	75fb      	strb	r3, [r7, #23]
      break;
 8002be2:	e002      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002be4:	bf00      	nop
 8002be6:	e000      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002be8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10a      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002bf0:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002bfe:	490d      	ldr	r1, [pc, #52]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	658b      	str	r3, [r1, #88]	; 0x58
 8002c04:	e001      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c06:	7dfb      	ldrb	r3, [r7, #23]
 8002c08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d035      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c1a:	2b10      	cmp	r3, #16
 8002c1c:	d00c      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002c1e:	2b10      	cmp	r3, #16
 8002c20:	d802      	bhi.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01b      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002c26:	e017      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d00c      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002c2c:	2b30      	cmp	r3, #48	; 0x30
 8002c2e:	d018      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002c30:	e012      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002c32:	bf00      	nop
 8002c34:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c38:	4baf      	ldr	r3, [pc, #700]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	4aae      	ldr	r2, [pc, #696]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c44:	e00e      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 f80d 	bl	8003c6c <RCCEx_PLL2_Config>
 8002c52:	4603      	mov	r3, r0
 8002c54:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c56:	e005      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c5c:	e002      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002c5e:	bf00      	nop
 8002c60:	e000      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c6a:	4ba3      	ldr	r3, [pc, #652]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c76:	49a0      	ldr	r1, [pc, #640]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c7c:	e001      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7e:	7dfb      	ldrb	r3, [r7, #23]
 8002c80:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d042      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c96:	d01f      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c9c:	d805      	bhi.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca6:	d00e      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002ca8:	e01f      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002caa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cae:	d01f      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cb4:	d01e      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002cb6:	e018      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cb8:	4b8f      	ldr	r3, [pc, #572]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	4a8e      	ldr	r2, [pc, #568]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002cc4:	e017      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 ffcd 	bl	8003c6c <RCCEx_PLL2_Config>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002cd6:	e00e      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3324      	adds	r3, #36	; 0x24
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f001 f876 	bl	8003dd0 <RCCEx_PLL3_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ce8:	e005      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	75fb      	strb	r3, [r7, #23]
      break;
 8002cee:	e002      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002cf0:	bf00      	nop
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d109      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002cfc:	4b7e      	ldr	r3, [pc, #504]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d00:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d08:	497b      	ldr	r1, [pc, #492]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	650b      	str	r3, [r1, #80]	; 0x50
 8002d0e:	e001      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
 8002d12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d042      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d28:	d01b      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002d2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d2e:	d805      	bhi.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d022      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d38:	d00a      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002d3a:	e01b      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002d3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d40:	d01d      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002d42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d46:	d01c      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002d48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d4c:	d01b      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002d4e:	e011      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3304      	adds	r3, #4
 8002d54:	2101      	movs	r1, #1
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 ff88 	bl	8003c6c <RCCEx_PLL2_Config>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d60:	e012      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3324      	adds	r3, #36	; 0x24
 8002d66:	2101      	movs	r1, #1
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f001 f831 	bl	8003dd0 <RCCEx_PLL3_Config>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d72:	e009      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	75fb      	strb	r3, [r7, #23]
      break;
 8002d78:	e006      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e004      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e002      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002d82:	bf00      	nop
 8002d84:	e000      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002d86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d8e:	4b5a      	ldr	r3, [pc, #360]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d92:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d9a:	4957      	ldr	r1, [pc, #348]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	650b      	str	r3, [r1, #80]	; 0x50
 8002da0:	e001      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
 8002da4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d044      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dbc:	d01b      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc2:	d805      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d022      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002dc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dcc:	d00a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002dce:	e01b      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd4:	d01d      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dda:	d01c      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002ddc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002de0:	d01b      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002de2:	e011      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3304      	adds	r3, #4
 8002de8:	2101      	movs	r1, #1
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 ff3e 	bl	8003c6c <RCCEx_PLL2_Config>
 8002df0:	4603      	mov	r3, r0
 8002df2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002df4:	e012      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3324      	adds	r3, #36	; 0x24
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 ffe7 	bl	8003dd0 <RCCEx_PLL3_Config>
 8002e02:	4603      	mov	r3, r0
 8002e04:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e06:	e009      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e0c:	e006      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002e0e:	bf00      	nop
 8002e10:	e004      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002e12:	bf00      	nop
 8002e14:	e002      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002e16:	bf00      	nop
 8002e18:	e000      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10a      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e22:	4b35      	ldr	r3, [pc, #212]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e30:	4931      	ldr	r1, [pc, #196]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	658b      	str	r3, [r1, #88]	; 0x58
 8002e36:	e001      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
 8002e3a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d02d      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e50:	d005      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e56:	d009      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d013      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002e5c:	e00f      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e5e:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e62:	4a25      	ldr	r2, [pc, #148]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e6a:	e00c      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	2101      	movs	r1, #1
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fefa 	bl	8003c6c <RCCEx_PLL2_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e7c:	e003      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	75fb      	strb	r3, [r7, #23]
      break;
 8002e82:	e000      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d109      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e8c:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e98:	4917      	ldr	r1, [pc, #92]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	650b      	str	r3, [r1, #80]	; 0x50
 8002e9e:	e001      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d035      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d81b      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002eb8:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebe:	bf00      	nop
 8002ec0:	08002efd 	.word	0x08002efd
 8002ec4:	08002ed1 	.word	0x08002ed1
 8002ec8:	08002edf 	.word	0x08002edf
 8002ecc:	08002efd 	.word	0x08002efd
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002edc:	e00f      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	2102      	movs	r1, #2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 fec1 	bl	8003c6c <RCCEx_PLL2_Config>
 8002eea:	4603      	mov	r3, r0
 8002eec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002eee:	e006      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ef4:	e003      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002ef6:	bf00      	nop
 8002ef8:	58024400 	.word	0x58024400
      break;
 8002efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d109      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f04:	4bba      	ldr	r3, [pc, #744]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f08:	f023 0203 	bic.w	r2, r3, #3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f10:	49b7      	ldr	r1, [pc, #732]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f16:	e001      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8086 	beq.w	8003036 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f2a:	4bb2      	ldr	r3, [pc, #712]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4ab1      	ldr	r2, [pc, #708]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f36:	f7fe fa61 	bl	80013fc <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f3c:	e009      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3e:	f7fe fa5d 	bl	80013fc <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b64      	cmp	r3, #100	; 0x64
 8002f4a:	d902      	bls.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	75fb      	strb	r3, [r7, #23]
        break;
 8002f50:	e005      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f52:	4ba8      	ldr	r3, [pc, #672]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0ef      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002f5e:	7dfb      	ldrb	r3, [r7, #23]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d166      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f64:	4ba2      	ldr	r3, [pc, #648]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f6e:	4053      	eors	r3, r2
 8002f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f78:	4b9d      	ldr	r3, [pc, #628]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f80:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f82:	4b9b      	ldr	r3, [pc, #620]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f86:	4a9a      	ldr	r2, [pc, #616]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f8e:	4b98      	ldr	r3, [pc, #608]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	4a97      	ldr	r2, [pc, #604]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f98:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f9a:	4a95      	ldr	r2, [pc, #596]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002faa:	d115      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe fa26 	bl	80013fc <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb4:	f7fe fa22 	bl	80013fc <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d902      	bls.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	75fb      	strb	r3, [r7, #23]
            break;
 8002fca:	e005      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fcc:	4b88      	ldr	r3, [pc, #544]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0ed      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d126      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fec:	d10d      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002fee:	4b80      	ldr	r3, [pc, #512]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ffc:	0919      	lsrs	r1, r3, #4
 8002ffe:	4b7e      	ldr	r3, [pc, #504]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003000:	400b      	ands	r3, r1
 8003002:	497b      	ldr	r1, [pc, #492]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003004:	4313      	orrs	r3, r2
 8003006:	610b      	str	r3, [r1, #16]
 8003008:	e005      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800300a:	4b79      	ldr	r3, [pc, #484]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	4a78      	ldr	r2, [pc, #480]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003010:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003014:	6113      	str	r3, [r2, #16]
 8003016:	4b76      	ldr	r3, [pc, #472]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003018:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003024:	4972      	ldr	r1, [pc, #456]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003026:	4313      	orrs	r3, r2
 8003028:	670b      	str	r3, [r1, #112]	; 0x70
 800302a:	e004      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	75bb      	strb	r3, [r7, #22]
 8003030:	e001      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d07d      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003046:	2b28      	cmp	r3, #40	; 0x28
 8003048:	d866      	bhi.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800304a:	a201      	add	r2, pc, #4	; (adr r2, 8003050 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800304c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003050:	0800311f 	.word	0x0800311f
 8003054:	08003119 	.word	0x08003119
 8003058:	08003119 	.word	0x08003119
 800305c:	08003119 	.word	0x08003119
 8003060:	08003119 	.word	0x08003119
 8003064:	08003119 	.word	0x08003119
 8003068:	08003119 	.word	0x08003119
 800306c:	08003119 	.word	0x08003119
 8003070:	080030f5 	.word	0x080030f5
 8003074:	08003119 	.word	0x08003119
 8003078:	08003119 	.word	0x08003119
 800307c:	08003119 	.word	0x08003119
 8003080:	08003119 	.word	0x08003119
 8003084:	08003119 	.word	0x08003119
 8003088:	08003119 	.word	0x08003119
 800308c:	08003119 	.word	0x08003119
 8003090:	08003107 	.word	0x08003107
 8003094:	08003119 	.word	0x08003119
 8003098:	08003119 	.word	0x08003119
 800309c:	08003119 	.word	0x08003119
 80030a0:	08003119 	.word	0x08003119
 80030a4:	08003119 	.word	0x08003119
 80030a8:	08003119 	.word	0x08003119
 80030ac:	08003119 	.word	0x08003119
 80030b0:	0800311f 	.word	0x0800311f
 80030b4:	08003119 	.word	0x08003119
 80030b8:	08003119 	.word	0x08003119
 80030bc:	08003119 	.word	0x08003119
 80030c0:	08003119 	.word	0x08003119
 80030c4:	08003119 	.word	0x08003119
 80030c8:	08003119 	.word	0x08003119
 80030cc:	08003119 	.word	0x08003119
 80030d0:	0800311f 	.word	0x0800311f
 80030d4:	08003119 	.word	0x08003119
 80030d8:	08003119 	.word	0x08003119
 80030dc:	08003119 	.word	0x08003119
 80030e0:	08003119 	.word	0x08003119
 80030e4:	08003119 	.word	0x08003119
 80030e8:	08003119 	.word	0x08003119
 80030ec:	08003119 	.word	0x08003119
 80030f0:	0800311f 	.word	0x0800311f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3304      	adds	r3, #4
 80030f8:	2101      	movs	r1, #1
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fdb6 	bl	8003c6c <RCCEx_PLL2_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003104:	e00c      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3324      	adds	r3, #36	; 0x24
 800310a:	2101      	movs	r1, #1
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fe5f 	bl	8003dd0 <RCCEx_PLL3_Config>
 8003112:	4603      	mov	r3, r0
 8003114:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003116:	e003      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	75fb      	strb	r3, [r7, #23]
      break;
 800311c:	e000      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800311e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003120:	7dfb      	ldrb	r3, [r7, #23]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003126:	4b32      	ldr	r3, [pc, #200]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003132:	492f      	ldr	r1, [pc, #188]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003134:	4313      	orrs	r3, r2
 8003136:	654b      	str	r3, [r1, #84]	; 0x54
 8003138:	e001      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313a:	7dfb      	ldrb	r3, [r7, #23]
 800313c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d037      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314e:	2b05      	cmp	r3, #5
 8003150:	d820      	bhi.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003152:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	0800319b 	.word	0x0800319b
 800315c:	08003171 	.word	0x08003171
 8003160:	08003183 	.word	0x08003183
 8003164:	0800319b 	.word	0x0800319b
 8003168:	0800319b 	.word	0x0800319b
 800316c:	0800319b 	.word	0x0800319b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3304      	adds	r3, #4
 8003174:	2101      	movs	r1, #1
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fd78 	bl	8003c6c <RCCEx_PLL2_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003180:	e00c      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3324      	adds	r3, #36	; 0x24
 8003186:	2101      	movs	r1, #1
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fe21 	bl	8003dd0 <RCCEx_PLL3_Config>
 800318e:	4603      	mov	r3, r0
 8003190:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003192:	e003      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	75fb      	strb	r3, [r7, #23]
      break;
 8003198:	e000      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800319a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80031a2:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80031a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a6:	f023 0207 	bic.w	r2, r3, #7
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ae:	4910      	ldr	r1, [pc, #64]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	654b      	str	r3, [r1, #84]	; 0x54
 80031b4:	e001      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
 80031b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d040      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031cc:	2b05      	cmp	r3, #5
 80031ce:	d827      	bhi.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80031d0:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d6:	bf00      	nop
 80031d8:	08003227 	.word	0x08003227
 80031dc:	080031fd 	.word	0x080031fd
 80031e0:	0800320f 	.word	0x0800320f
 80031e4:	08003227 	.word	0x08003227
 80031e8:	08003227 	.word	0x08003227
 80031ec:	08003227 	.word	0x08003227
 80031f0:	58024400 	.word	0x58024400
 80031f4:	58024800 	.word	0x58024800
 80031f8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3304      	adds	r3, #4
 8003200:	2101      	movs	r1, #1
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fd32 	bl	8003c6c <RCCEx_PLL2_Config>
 8003208:	4603      	mov	r3, r0
 800320a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800320c:	e00c      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3324      	adds	r3, #36	; 0x24
 8003212:	2101      	movs	r1, #1
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fddb 	bl	8003dd0 <RCCEx_PLL3_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800321e:	e003      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	75fb      	strb	r3, [r7, #23]
      break;
 8003224:	e000      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003226:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003228:	7dfb      	ldrb	r3, [r7, #23]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10a      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800322e:	4bb2      	ldr	r3, [pc, #712]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003232:	f023 0207 	bic.w	r2, r3, #7
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323c:	49ae      	ldr	r1, [pc, #696]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800323e:	4313      	orrs	r3, r2
 8003240:	658b      	str	r3, [r1, #88]	; 0x58
 8003242:	e001      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d044      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800325a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800325e:	d01b      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003264:	d805      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003266:	2b00      	cmp	r3, #0
 8003268:	d022      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800326a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800326e:	d00a      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003270:	e01b      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003276:	d01d      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003278:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800327c:	d01c      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800327e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003282:	d01b      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003284:	e011      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3304      	adds	r3, #4
 800328a:	2100      	movs	r1, #0
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fced 	bl	8003c6c <RCCEx_PLL2_Config>
 8003292:	4603      	mov	r3, r0
 8003294:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003296:	e012      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3324      	adds	r3, #36	; 0x24
 800329c:	2102      	movs	r1, #2
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fd96 	bl	8003dd0 <RCCEx_PLL3_Config>
 80032a4:	4603      	mov	r3, r0
 80032a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80032a8:	e009      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
      break;
 80032ae:	e006      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80032b0:	bf00      	nop
 80032b2:	e004      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80032b4:	bf00      	nop
 80032b6:	e002      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80032b8:	bf00      	nop
 80032ba:	e000      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80032bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032be:	7dfb      	ldrb	r3, [r7, #23]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10a      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032c4:	4b8c      	ldr	r3, [pc, #560]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032d2:	4989      	ldr	r1, [pc, #548]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	654b      	str	r3, [r1, #84]	; 0x54
 80032d8:	e001      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d044      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f4:	d01b      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80032f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032fa:	d805      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d022      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003304:	d00a      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003306:	e01b      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800330c:	d01d      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800330e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003312:	d01c      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003314:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003318:	d01b      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800331a:	e011      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3304      	adds	r3, #4
 8003320:	2100      	movs	r1, #0
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fca2 	bl	8003c6c <RCCEx_PLL2_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800332c:	e012      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3324      	adds	r3, #36	; 0x24
 8003332:	2102      	movs	r1, #2
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fd4b 	bl	8003dd0 <RCCEx_PLL3_Config>
 800333a:	4603      	mov	r3, r0
 800333c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800333e:	e009      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	75fb      	strb	r3, [r7, #23]
      break;
 8003344:	e006      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003346:	bf00      	nop
 8003348:	e004      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800334a:	bf00      	nop
 800334c:	e002      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800334e:	bf00      	nop
 8003350:	e000      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003352:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003354:	7dfb      	ldrb	r3, [r7, #23]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10a      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800335a:	4b67      	ldr	r3, [pc, #412]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003368:	4963      	ldr	r1, [pc, #396]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800336a:	4313      	orrs	r3, r2
 800336c:	658b      	str	r3, [r1, #88]	; 0x58
 800336e:	e001      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003370:	7dfb      	ldrb	r3, [r7, #23]
 8003372:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337c:	2b00      	cmp	r3, #0
 800337e:	d044      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003386:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800338a:	d01b      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800338c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003390:	d805      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8003392:	2b00      	cmp	r3, #0
 8003394:	d022      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800339a:	d00a      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800339c:	e01b      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800339e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a2:	d01d      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80033a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033a8:	d01c      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80033aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80033ae:	d01b      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80033b0:	e011      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3304      	adds	r3, #4
 80033b6:	2100      	movs	r1, #0
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fc57 	bl	8003c6c <RCCEx_PLL2_Config>
 80033be:	4603      	mov	r3, r0
 80033c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80033c2:	e012      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3324      	adds	r3, #36	; 0x24
 80033c8:	2102      	movs	r1, #2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fd00 	bl	8003dd0 <RCCEx_PLL3_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80033d4:	e009      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
      break;
 80033da:	e006      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80033dc:	bf00      	nop
 80033de:	e004      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80033e0:	bf00      	nop
 80033e2:	e002      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80033e4:	bf00      	nop
 80033e6:	e000      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80033e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80033f0:	4b41      	ldr	r3, [pc, #260]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033fe:	493e      	ldr	r1, [pc, #248]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003400:	4313      	orrs	r3, r2
 8003402:	658b      	str	r3, [r1, #88]	; 0x58
 8003404:	e001      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003406:	7dfb      	ldrb	r3, [r7, #23]
 8003408:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d01a      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800341c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003420:	d10a      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3324      	adds	r3, #36	; 0x24
 8003426:	2102      	movs	r1, #2
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fcd1 	bl	8003dd0 <RCCEx_PLL3_Config>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003438:	4b2f      	ldr	r3, [pc, #188]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003446:	492c      	ldr	r1, [pc, #176]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003448:	4313      	orrs	r3, r2
 800344a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800345e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003462:	d10a      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3324      	adds	r3, #36	; 0x24
 8003468:	2102      	movs	r1, #2
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fcb0 	bl	8003dd0 <RCCEx_PLL3_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800347a:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800347c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003488:	491b      	ldr	r1, [pc, #108]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800348a:	4313      	orrs	r3, r2
 800348c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d032      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a4:	d00d      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80034a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034aa:	d016      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d111      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3304      	adds	r3, #4
 80034b4:	2100      	movs	r1, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fbd8 	bl	8003c6c <RCCEx_PLL2_Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80034c0:	e00c      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3324      	adds	r3, #36	; 0x24
 80034c6:	2102      	movs	r1, #2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fc81 	bl	8003dd0 <RCCEx_PLL3_Config>
 80034ce:	4603      	mov	r3, r0
 80034d0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80034d2:	e003      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	75fb      	strb	r3, [r7, #23]
      break;
 80034d8:	e000      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80034da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10c      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034f0:	4901      	ldr	r1, [pc, #4]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	658b      	str	r3, [r1, #88]	; 0x58
 80034f6:	e003      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80034f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
 80034fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d02f      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003512:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003516:	d00c      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003518:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800351c:	d015      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800351e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003522:	d10f      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003524:	4b79      	ldr	r3, [pc, #484]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	4a78      	ldr	r2, [pc, #480]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800352a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003530:	e00c      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3324      	adds	r3, #36	; 0x24
 8003536:	2101      	movs	r1, #1
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fc49 	bl	8003dd0 <RCCEx_PLL3_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003542:	e003      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	75fb      	strb	r3, [r7, #23]
      break;
 8003548:	e000      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800354a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003552:	4b6e      	ldr	r3, [pc, #440]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003560:	496a      	ldr	r1, [pc, #424]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003562:	4313      	orrs	r3, r2
 8003564:	654b      	str	r3, [r1, #84]	; 0x54
 8003566:	e001      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d029      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003584:	d007      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8003586:	e00f      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003588:	4b60      	ldr	r3, [pc, #384]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	4a5f      	ldr	r2, [pc, #380]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800358e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003592:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003594:	e00b      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3304      	adds	r3, #4
 800359a:	2102      	movs	r1, #2
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fb65 	bl	8003c6c <RCCEx_PLL2_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80035a6:	e002      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	75fb      	strb	r3, [r7, #23]
      break;
 80035ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ae:	7dfb      	ldrb	r3, [r7, #23]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d109      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80035b4:	4b55      	ldr	r3, [pc, #340]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80035b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c0:	4952      	ldr	r1, [pc, #328]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80035c6:	e001      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
 80035ca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3324      	adds	r3, #36	; 0x24
 80035dc:	2102      	movs	r1, #2
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fbf6 	bl	8003dd0 <RCCEx_PLL3_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d02f      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003602:	d00c      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003608:	d802      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800360a:	2b00      	cmp	r3, #0
 800360c:	d011      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800360e:	e00d      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8003610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003614:	d00f      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8003616:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800361a:	d00e      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800361c:	e006      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800361e:	4b3b      	ldr	r3, [pc, #236]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	4a3a      	ldr	r2, [pc, #232]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003628:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800362a:	e007      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	75fb      	strb	r3, [r7, #23]
      break;
 8003630:	e004      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003632:	bf00      	nop
 8003634:	e002      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003636:	bf00      	nop
 8003638:	e000      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800363a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800363c:	7dfb      	ldrb	r3, [r7, #23]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003642:	4b32      	ldr	r3, [pc, #200]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003646:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800364e:	492f      	ldr	r1, [pc, #188]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003650:	4313      	orrs	r3, r2
 8003652:	654b      	str	r3, [r1, #84]	; 0x54
 8003654:	e001      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003656:	7dfb      	ldrb	r3, [r7, #23]
 8003658:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003666:	4b29      	ldr	r3, [pc, #164]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	4926      	ldr	r1, [pc, #152]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003674:	4313      	orrs	r3, r2
 8003676:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d009      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003684:	4b21      	ldr	r3, [pc, #132]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003692:	491e      	ldr	r1, [pc, #120]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003694:	4313      	orrs	r3, r2
 8003696:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036a4:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80036a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b0:	4916      	ldr	r1, [pc, #88]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00d      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036c2:	4b12      	ldr	r3, [pc, #72]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	4a11      	ldr	r2, [pc, #68]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80036c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036cc:	6113      	str	r3, [r2, #16]
 80036ce:	4b0f      	ldr	r3, [pc, #60]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80036d8:	490c      	ldr	r1, [pc, #48]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	da08      	bge.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80036e6:	4b09      	ldr	r3, [pc, #36]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80036e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f2:	4906      	ldr	r1, [pc, #24]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80036f8:	7dbb      	ldrb	r3, [r7, #22]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	e000      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	58024400 	.word	0x58024400

08003710 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003714:	f7ff f8b2 	bl	800287c <HAL_RCC_GetHCLKFreq>
 8003718:	4601      	mov	r1, r0
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	091b      	lsrs	r3, r3, #4
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	4a04      	ldr	r2, [pc, #16]	; (8003738 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003726:	5cd3      	ldrb	r3, [r2, r3]
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003730:	4618      	mov	r0, r3
 8003732:	bd80      	pop	{r7, pc}
 8003734:	58024400 	.word	0x58024400
 8003738:	08006724 	.word	0x08006724

0800373c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800373c:	b480      	push	{r7}
 800373e:	b089      	sub	sp, #36	; 0x24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003744:	4b9d      	ldr	r3, [pc, #628]	; (80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800374e:	4b9b      	ldr	r3, [pc, #620]	; (80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003752:	0b1b      	lsrs	r3, r3, #12
 8003754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003758:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800375a:	4b98      	ldr	r3, [pc, #608]	; (80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003766:	4b95      	ldr	r3, [pc, #596]	; (80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376a:	08db      	lsrs	r3, r3, #3
 800376c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	fb02 f303 	mul.w	r3, r2, r3
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 810a 	beq.w	800399e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d05a      	beq.n	8003846 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8003790:	2b01      	cmp	r3, #1
 8003792:	d302      	bcc.n	800379a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8003794:	2b02      	cmp	r3, #2
 8003796:	d078      	beq.n	800388a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8003798:	e099      	b.n	80038ce <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800379a:	4b88      	ldr	r3, [pc, #544]	; (80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d02d      	beq.n	8003802 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037a6:	4b85      	ldr	r3, [pc, #532]	; (80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	08db      	lsrs	r3, r3, #3
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	4a83      	ldr	r2, [pc, #524]	; (80039c0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80037b2:	fa22 f303 	lsr.w	r3, r2, r3
 80037b6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	ee07 3a90 	vmov	s15, r3
 80037c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037d0:	4b7a      	ldr	r3, [pc, #488]	; (80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d8:	ee07 3a90 	vmov	s15, r3
 80037dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80037e4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80037e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003800:	e087      	b.n	8003912 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	ee07 3a90 	vmov	s15, r3
 8003808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8003810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003814:	4b69      	ldr	r3, [pc, #420]	; (80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800381c:	ee07 3a90 	vmov	s15, r3
 8003820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003824:	ed97 6a03 	vldr	s12, [r7, #12]
 8003828:	eddf 5a66 	vldr	s11, [pc, #408]	; 80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800382c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003830:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003834:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003838:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800383c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003840:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003844:	e065      	b.n	8003912 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	ee07 3a90 	vmov	s15, r3
 800384c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003850:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80039cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003858:	4b58      	ldr	r3, [pc, #352]	; (80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003860:	ee07 3a90 	vmov	s15, r3
 8003864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003868:	ed97 6a03 	vldr	s12, [r7, #12]
 800386c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003870:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003874:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003878:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800387c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003884:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003888:	e043      	b.n	8003912 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	ee07 3a90 	vmov	s15, r3
 8003890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003894:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003898:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800389c:	4b47      	ldr	r3, [pc, #284]	; (80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a4:	ee07 3a90 	vmov	s15, r3
 80038a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80038b0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80038b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038cc:	e021      	b.n	8003912 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	ee07 3a90 	vmov	s15, r3
 80038d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80039cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80038dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e0:	4b36      	ldr	r3, [pc, #216]	; (80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e8:	ee07 3a90 	vmov	s15, r3
 80038ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80038f4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80038f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003900:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003904:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003910:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003912:	4b2a      	ldr	r3, [pc, #168]	; (80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	0a5b      	lsrs	r3, r3, #9
 8003918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003928:	ee37 7a87 	vadd.f32	s14, s15, s14
 800392c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003938:	ee17 2a90 	vmov	r2, s15
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003940:	4b1e      	ldr	r3, [pc, #120]	; (80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003952:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003956:	ee37 7a87 	vadd.f32	s14, s15, s14
 800395a:	edd7 6a07 	vldr	s13, [r7, #28]
 800395e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003966:	ee17 2a90 	vmov	r2, s15
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800396e:	4b13      	ldr	r3, [pc, #76]	; (80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	0e1b      	lsrs	r3, r3, #24
 8003974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003978:	ee07 3a90 	vmov	s15, r3
 800397c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003980:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003984:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003988:	edd7 6a07 	vldr	s13, [r7, #28]
 800398c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003994:	ee17 2a90 	vmov	r2, s15
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800399c:	e008      	b.n	80039b0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	609a      	str	r2, [r3, #8]
}
 80039b0:	bf00      	nop
 80039b2:	3724      	adds	r7, #36	; 0x24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	58024400 	.word	0x58024400
 80039c0:	03d09000 	.word	0x03d09000
 80039c4:	46000000 	.word	0x46000000
 80039c8:	4c742400 	.word	0x4c742400
 80039cc:	4a742400 	.word	0x4a742400
 80039d0:	4bbebc20 	.word	0x4bbebc20

080039d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039dc:	4b9d      	ldr	r3, [pc, #628]	; (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80039e6:	4b9b      	ldr	r3, [pc, #620]	; (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80039e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ea:	0d1b      	lsrs	r3, r3, #20
 80039ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80039f2:	4b98      	ldr	r3, [pc, #608]	; (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80039fe:	4b95      	ldr	r3, [pc, #596]	; (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	08db      	lsrs	r3, r3, #3
 8003a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	fb02 f303 	mul.w	r3, r2, r3
 8003a0e:	ee07 3a90 	vmov	s15, r3
 8003a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 810a 	beq.w	8003c36 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d05a      	beq.n	8003ade <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d302      	bcc.n	8003a32 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d078      	beq.n	8003b22 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8003a30:	e099      	b.n	8003b66 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a32:	4b88      	ldr	r3, [pc, #544]	; (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d02d      	beq.n	8003a9a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a3e:	4b85      	ldr	r3, [pc, #532]	; (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	08db      	lsrs	r3, r3, #3
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	4a83      	ldr	r2, [pc, #524]	; (8003c58 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	ee07 3a90 	vmov	s15, r3
 8003a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a68:	4b7a      	ldr	r3, [pc, #488]	; (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a70:	ee07 3a90 	vmov	s15, r3
 8003a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a78:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a7c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003c5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003a80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a94:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003a98:	e087      	b.n	8003baa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	ee07 3a90 	vmov	s15, r3
 8003aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003c60 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aac:	4b69      	ldr	r3, [pc, #420]	; (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab4:	ee07 3a90 	vmov	s15, r3
 8003ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003abc:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ac0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003c5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003ac4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003acc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003adc:	e065      	b.n	8003baa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	ee07 3a90 	vmov	s15, r3
 8003ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003aec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af0:	4b58      	ldr	r3, [pc, #352]	; (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af8:	ee07 3a90 	vmov	s15, r3
 8003afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b00:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b04:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003c5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003b08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b20:	e043      	b.n	8003baa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003c68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8003b30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b34:	4b47      	ldr	r3, [pc, #284]	; (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3c:	ee07 3a90 	vmov	s15, r3
 8003b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b44:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b48:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003c5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003b4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b64:	e021      	b.n	8003baa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	ee07 3a90 	vmov	s15, r3
 8003b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b70:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b78:	4b36      	ldr	r3, [pc, #216]	; (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b80:	ee07 3a90 	vmov	s15, r3
 8003b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b88:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b8c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003c5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003b90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ba8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003baa:	4b2a      	ldr	r3, [pc, #168]	; (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	0a5b      	lsrs	r3, r3, #9
 8003bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bb4:	ee07 3a90 	vmov	s15, r3
 8003bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bd0:	ee17 2a90 	vmov	r2, s15
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003bd8:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bfe:	ee17 2a90 	vmov	r2, s15
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003c06:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	0e1b      	lsrs	r3, r3, #24
 8003c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c10:	ee07 3a90 	vmov	s15, r3
 8003c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c2c:	ee17 2a90 	vmov	r2, s15
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003c34:	e008      	b.n	8003c48 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	609a      	str	r2, [r3, #8]
}
 8003c48:	bf00      	nop
 8003c4a:	3724      	adds	r7, #36	; 0x24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	58024400 	.word	0x58024400
 8003c58:	03d09000 	.word	0x03d09000
 8003c5c:	46000000 	.word	0x46000000
 8003c60:	4c742400 	.word	0x4c742400
 8003c64:	4a742400 	.word	0x4a742400
 8003c68:	4bbebc20 	.word	0x4bbebc20

08003c6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c7a:	4b53      	ldr	r3, [pc, #332]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d101      	bne.n	8003c8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e099      	b.n	8003dbe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003c8a:	4b4f      	ldr	r3, [pc, #316]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a4e      	ldr	r2, [pc, #312]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003c90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c96:	f7fd fbb1 	bl	80013fc <HAL_GetTick>
 8003c9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c9c:	e008      	b.n	8003cb0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003c9e:	f7fd fbad 	bl	80013fc <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e086      	b.n	8003dbe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cb0:	4b45      	ldr	r3, [pc, #276]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f0      	bne.n	8003c9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003cbc:	4b42      	ldr	r3, [pc, #264]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	031b      	lsls	r3, r3, #12
 8003cca:	493f      	ldr	r1, [pc, #252]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	628b      	str	r3, [r1, #40]	; 0x28
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	025b      	lsls	r3, r3, #9
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	061b      	lsls	r3, r3, #24
 8003cfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d00:	4931      	ldr	r1, [pc, #196]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d06:	4b30      	ldr	r3, [pc, #192]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	492d      	ldr	r1, [pc, #180]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d18:	4b2b      	ldr	r3, [pc, #172]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	f023 0220 	bic.w	r2, r3, #32
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	4928      	ldr	r1, [pc, #160]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d2a:	4b27      	ldr	r3, [pc, #156]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	4a26      	ldr	r2, [pc, #152]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d30:	f023 0310 	bic.w	r3, r3, #16
 8003d34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d36:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d3a:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <RCCEx_PLL2_Config+0x160>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	69d2      	ldr	r2, [r2, #28]
 8003d42:	00d2      	lsls	r2, r2, #3
 8003d44:	4920      	ldr	r1, [pc, #128]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d4a:	4b1f      	ldr	r3, [pc, #124]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	4a1e      	ldr	r2, [pc, #120]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d50:	f043 0310 	orr.w	r3, r3, #16
 8003d54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d106      	bne.n	8003d6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d68:	e00f      	b.n	8003d8a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d106      	bne.n	8003d7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003d70:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	4a14      	ldr	r2, [pc, #80]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d7c:	e005      	b.n	8003d8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003d7e:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	4a11      	ldr	r2, [pc, #68]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003d8a:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a0e      	ldr	r2, [pc, #56]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d96:	f7fd fb31 	bl	80013fc <HAL_GetTick>
 8003d9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d9c:	e008      	b.n	8003db0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d9e:	f7fd fb2d 	bl	80013fc <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e006      	b.n	8003dbe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f0      	beq.n	8003d9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	58024400 	.word	0x58024400
 8003dcc:	ffff0007 	.word	0xffff0007

08003dd0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003dde:	4b53      	ldr	r3, [pc, #332]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d101      	bne.n	8003dee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e099      	b.n	8003f22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003dee:	4b4f      	ldr	r3, [pc, #316]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a4e      	ldr	r2, [pc, #312]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfa:	f7fd faff 	bl	80013fc <HAL_GetTick>
 8003dfe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e00:	e008      	b.n	8003e14 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e02:	f7fd fafb 	bl	80013fc <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e086      	b.n	8003f22 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e14:	4b45      	ldr	r3, [pc, #276]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f0      	bne.n	8003e02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e20:	4b42      	ldr	r3, [pc, #264]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e24:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	051b      	lsls	r3, r3, #20
 8003e2e:	493f      	ldr	r1, [pc, #252]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	628b      	str	r3, [r1, #40]	; 0x28
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	025b      	lsls	r3, r3, #9
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	041b      	lsls	r3, r3, #16
 8003e52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	061b      	lsls	r3, r3, #24
 8003e60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e64:	4931      	ldr	r1, [pc, #196]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e6a:	4b30      	ldr	r3, [pc, #192]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	492d      	ldr	r1, [pc, #180]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003e7c:	4b2b      	ldr	r3, [pc, #172]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	4928      	ldr	r1, [pc, #160]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003e8e:	4b27      	ldr	r3, [pc, #156]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	4a26      	ldr	r2, [pc, #152]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003e9a:	4b24      	ldr	r3, [pc, #144]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e9e:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <RCCEx_PLL3_Config+0x160>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	69d2      	ldr	r2, [r2, #28]
 8003ea6:	00d2      	lsls	r2, r2, #3
 8003ea8:	4920      	ldr	r1, [pc, #128]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003eae:	4b1f      	ldr	r3, [pc, #124]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	4a1e      	ldr	r2, [pc, #120]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d106      	bne.n	8003ece <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ec0:	4b1a      	ldr	r3, [pc, #104]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	4a19      	ldr	r2, [pc, #100]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003ec6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003eca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ecc:	e00f      	b.n	8003eee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d106      	bne.n	8003ee2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003ed4:	4b15      	ldr	r3, [pc, #84]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	4a14      	ldr	r2, [pc, #80]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003eda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ede:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ee0:	e005      	b.n	8003eee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003ee2:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	4a11      	ldr	r2, [pc, #68]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003ee8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003eee:	4b0f      	ldr	r3, [pc, #60]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a0e      	ldr	r2, [pc, #56]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efa:	f7fd fa7f 	bl	80013fc <HAL_GetTick>
 8003efe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f00:	e008      	b.n	8003f14 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003f02:	f7fd fa7b 	bl	80013fc <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e006      	b.n	8003f22 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f14:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0f0      	beq.n	8003f02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	58024400 	.word	0x58024400
 8003f30:	ffff0007 	.word	0xffff0007

08003f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e049      	b.n	8003fda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fc ff8c 	bl	8000e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	4619      	mov	r1, r3
 8003f72:	4610      	mov	r0, r2
 8003f74:	f000 fb48 	bl	8004608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e049      	b.n	8004088 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d106      	bne.n	800400e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f841 	bl	8004090 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2202      	movs	r2, #2
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3304      	adds	r3, #4
 800401e:	4619      	mov	r1, r3
 8004020:	4610      	mov	r0, r2
 8004022:	f000 faf1 	bl	8004608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d109      	bne.n	80040c8 <HAL_TIM_PWM_Start+0x24>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b01      	cmp	r3, #1
 80040be:	bf14      	ite	ne
 80040c0:	2301      	movne	r3, #1
 80040c2:	2300      	moveq	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	e03c      	b.n	8004142 <HAL_TIM_PWM_Start+0x9e>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d109      	bne.n	80040e2 <HAL_TIM_PWM_Start+0x3e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	bf14      	ite	ne
 80040da:	2301      	movne	r3, #1
 80040dc:	2300      	moveq	r3, #0
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	e02f      	b.n	8004142 <HAL_TIM_PWM_Start+0x9e>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d109      	bne.n	80040fc <HAL_TIM_PWM_Start+0x58>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	bf14      	ite	ne
 80040f4:	2301      	movne	r3, #1
 80040f6:	2300      	moveq	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	e022      	b.n	8004142 <HAL_TIM_PWM_Start+0x9e>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b0c      	cmp	r3, #12
 8004100:	d109      	bne.n	8004116 <HAL_TIM_PWM_Start+0x72>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b01      	cmp	r3, #1
 800410c:	bf14      	ite	ne
 800410e:	2301      	movne	r3, #1
 8004110:	2300      	moveq	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	e015      	b.n	8004142 <HAL_TIM_PWM_Start+0x9e>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b10      	cmp	r3, #16
 800411a:	d109      	bne.n	8004130 <HAL_TIM_PWM_Start+0x8c>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	bf14      	ite	ne
 8004128:	2301      	movne	r3, #1
 800412a:	2300      	moveq	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	e008      	b.n	8004142 <HAL_TIM_PWM_Start+0x9e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e06e      	b.n	8004228 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d104      	bne.n	800415a <HAL_TIM_PWM_Start+0xb6>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004158:	e023      	b.n	80041a2 <HAL_TIM_PWM_Start+0xfe>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b04      	cmp	r3, #4
 800415e:	d104      	bne.n	800416a <HAL_TIM_PWM_Start+0xc6>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004168:	e01b      	b.n	80041a2 <HAL_TIM_PWM_Start+0xfe>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b08      	cmp	r3, #8
 800416e:	d104      	bne.n	800417a <HAL_TIM_PWM_Start+0xd6>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004178:	e013      	b.n	80041a2 <HAL_TIM_PWM_Start+0xfe>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b0c      	cmp	r3, #12
 800417e:	d104      	bne.n	800418a <HAL_TIM_PWM_Start+0xe6>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004188:	e00b      	b.n	80041a2 <HAL_TIM_PWM_Start+0xfe>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b10      	cmp	r3, #16
 800418e:	d104      	bne.n	800419a <HAL_TIM_PWM_Start+0xf6>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004198:	e003      	b.n	80041a2 <HAL_TIM_PWM_Start+0xfe>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2202      	movs	r2, #2
 800419e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2201      	movs	r2, #1
 80041a8:	6839      	ldr	r1, [r7, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fe32 	bl	8004e14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a1e      	ldr	r2, [pc, #120]	; (8004230 <HAL_TIM_PWM_Start+0x18c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x13e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a1d      	ldr	r2, [pc, #116]	; (8004234 <HAL_TIM_PWM_Start+0x190>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00e      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x13e>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1b      	ldr	r2, [pc, #108]	; (8004238 <HAL_TIM_PWM_Start+0x194>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d009      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x13e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a1a      	ldr	r2, [pc, #104]	; (800423c <HAL_TIM_PWM_Start+0x198>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d004      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x13e>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a18      	ldr	r2, [pc, #96]	; (8004240 <HAL_TIM_PWM_Start+0x19c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_PWM_Start+0x142>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <HAL_TIM_PWM_Start+0x144>
 80041e6:	2300      	movs	r3, #0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d007      	beq.n	80041fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	4b10      	ldr	r3, [pc, #64]	; (8004244 <HAL_TIM_PWM_Start+0x1a0>)
 8004204:	4013      	ands	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b06      	cmp	r3, #6
 800420c:	d00b      	beq.n	8004226 <HAL_TIM_PWM_Start+0x182>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004214:	d007      	beq.n	8004226 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0201 	orr.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40010000 	.word	0x40010000
 8004234:	40010400 	.word	0x40010400
 8004238:	40014000 	.word	0x40014000
 800423c:	40014400 	.word	0x40014400
 8004240:	40014800 	.word	0x40014800
 8004244:	00010007 	.word	0x00010007

08004248 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800425e:	2302      	movs	r3, #2
 8004260:	e0fd      	b.n	800445e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b14      	cmp	r3, #20
 800426e:	f200 80f0 	bhi.w	8004452 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004272:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	080042cd 	.word	0x080042cd
 800427c:	08004453 	.word	0x08004453
 8004280:	08004453 	.word	0x08004453
 8004284:	08004453 	.word	0x08004453
 8004288:	0800430d 	.word	0x0800430d
 800428c:	08004453 	.word	0x08004453
 8004290:	08004453 	.word	0x08004453
 8004294:	08004453 	.word	0x08004453
 8004298:	0800434f 	.word	0x0800434f
 800429c:	08004453 	.word	0x08004453
 80042a0:	08004453 	.word	0x08004453
 80042a4:	08004453 	.word	0x08004453
 80042a8:	0800438f 	.word	0x0800438f
 80042ac:	08004453 	.word	0x08004453
 80042b0:	08004453 	.word	0x08004453
 80042b4:	08004453 	.word	0x08004453
 80042b8:	080043d1 	.word	0x080043d1
 80042bc:	08004453 	.word	0x08004453
 80042c0:	08004453 	.word	0x08004453
 80042c4:	08004453 	.word	0x08004453
 80042c8:	08004411 	.word	0x08004411
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fa32 	bl	800473c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0208 	orr.w	r2, r2, #8
 80042e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0204 	bic.w	r2, r2, #4
 80042f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6999      	ldr	r1, [r3, #24]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	619a      	str	r2, [r3, #24]
      break;
 800430a:	e0a3      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 faa2 	bl	800485c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6999      	ldr	r1, [r3, #24]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	021a      	lsls	r2, r3, #8
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	619a      	str	r2, [r3, #24]
      break;
 800434c:	e082      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fb0b 	bl	8004970 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0208 	orr.w	r2, r2, #8
 8004368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0204 	bic.w	r2, r2, #4
 8004378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69d9      	ldr	r1, [r3, #28]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	61da      	str	r2, [r3, #28]
      break;
 800438c:	e062      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fb71 	bl	8004a7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69d9      	ldr	r1, [r3, #28]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	021a      	lsls	r2, r3, #8
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	61da      	str	r2, [r3, #28]
      break;
 80043ce:	e041      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fbb8 	bl	8004b4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0208 	orr.w	r2, r2, #8
 80043ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0204 	bic.w	r2, r2, #4
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800440e:	e021      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fbfa 	bl	8004c10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800442a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	021a      	lsls	r2, r3, #8
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004450:	e000      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004452:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop

08004468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_TIM_ConfigClockSource+0x18>
 800447c:	2302      	movs	r3, #2
 800447e:	e0b7      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x188>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4b57      	ldr	r3, [pc, #348]	; (80045f8 <HAL_TIM_ConfigClockSource+0x190>)
 800449c:	4013      	ands	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b70      	cmp	r3, #112	; 0x70
 80044b6:	d02e      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0xae>
 80044b8:	2b70      	cmp	r3, #112	; 0x70
 80044ba:	d812      	bhi.n	80044e2 <HAL_TIM_ConfigClockSource+0x7a>
 80044bc:	2b30      	cmp	r3, #48	; 0x30
 80044be:	f000 8084 	beq.w	80045ca <HAL_TIM_ConfigClockSource+0x162>
 80044c2:	2b30      	cmp	r3, #48	; 0x30
 80044c4:	d806      	bhi.n	80044d4 <HAL_TIM_ConfigClockSource+0x6c>
 80044c6:	2b10      	cmp	r3, #16
 80044c8:	d07f      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x162>
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d07d      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x162>
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d07b      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80044d2:	e084      	b.n	80045de <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80044d4:	2b50      	cmp	r3, #80	; 0x50
 80044d6:	d048      	beq.n	800456a <HAL_TIM_ConfigClockSource+0x102>
 80044d8:	2b60      	cmp	r3, #96	; 0x60
 80044da:	d056      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x122>
 80044dc:	2b40      	cmp	r3, #64	; 0x40
 80044de:	d064      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0x142>
      break;
 80044e0:	e07d      	b.n	80045de <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80044e2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80044e6:	d070      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x162>
 80044e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80044ec:	d809      	bhi.n	8004502 <HAL_TIM_ConfigClockSource+0x9a>
 80044ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f2:	d027      	beq.n	8004544 <HAL_TIM_ConfigClockSource+0xdc>
 80044f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f8:	d067      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x162>
 80044fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044fe:	d06d      	beq.n	80045dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004500:	e06d      	b.n	80045de <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004502:	4a3e      	ldr	r2, [pc, #248]	; (80045fc <HAL_TIM_ConfigClockSource+0x194>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d060      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x162>
 8004508:	4a3d      	ldr	r2, [pc, #244]	; (8004600 <HAL_TIM_ConfigClockSource+0x198>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d05d      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x162>
 800450e:	4a3d      	ldr	r2, [pc, #244]	; (8004604 <HAL_TIM_ConfigClockSource+0x19c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d05a      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x162>
      break;
 8004514:	e063      	b.n	80045de <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6899      	ldr	r1, [r3, #8]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f000 fc55 	bl	8004dd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004538:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	609a      	str	r2, [r3, #8]
      break;
 8004542:	e04c      	b.n	80045de <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6899      	ldr	r1, [r3, #8]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f000 fc3e 	bl	8004dd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004566:	609a      	str	r2, [r3, #8]
      break;
 8004568:	e039      	b.n	80045de <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6818      	ldr	r0, [r3, #0]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6859      	ldr	r1, [r3, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	461a      	mov	r2, r3
 8004578:	f000 fbae 	bl	8004cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2150      	movs	r1, #80	; 0x50
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fc08 	bl	8004d98 <TIM_ITRx_SetConfig>
      break;
 8004588:	e029      	b.n	80045de <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6859      	ldr	r1, [r3, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	461a      	mov	r2, r3
 8004598:	f000 fbcd 	bl	8004d36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2160      	movs	r1, #96	; 0x60
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fbf8 	bl	8004d98 <TIM_ITRx_SetConfig>
      break;
 80045a8:	e019      	b.n	80045de <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6859      	ldr	r1, [r3, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	461a      	mov	r2, r3
 80045b8:	f000 fb8e 	bl	8004cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2140      	movs	r1, #64	; 0x40
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fbe8 	bl	8004d98 <TIM_ITRx_SetConfig>
      break;
 80045c8:	e009      	b.n	80045de <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f000 fbdf 	bl	8004d98 <TIM_ITRx_SetConfig>
      break;
 80045da:	e000      	b.n	80045de <HAL_TIM_ConfigClockSource+0x176>
      break;
 80045dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	ffceff88 	.word	0xffceff88
 80045fc:	00100030 	.word	0x00100030
 8004600:	00100040 	.word	0x00100040
 8004604:	00100020 	.word	0x00100020

08004608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a40      	ldr	r2, [pc, #256]	; (800471c <TIM_Base_SetConfig+0x114>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d013      	beq.n	8004648 <TIM_Base_SetConfig+0x40>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004626:	d00f      	beq.n	8004648 <TIM_Base_SetConfig+0x40>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a3d      	ldr	r2, [pc, #244]	; (8004720 <TIM_Base_SetConfig+0x118>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00b      	beq.n	8004648 <TIM_Base_SetConfig+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a3c      	ldr	r2, [pc, #240]	; (8004724 <TIM_Base_SetConfig+0x11c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d007      	beq.n	8004648 <TIM_Base_SetConfig+0x40>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a3b      	ldr	r2, [pc, #236]	; (8004728 <TIM_Base_SetConfig+0x120>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d003      	beq.n	8004648 <TIM_Base_SetConfig+0x40>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a3a      	ldr	r2, [pc, #232]	; (800472c <TIM_Base_SetConfig+0x124>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d108      	bne.n	800465a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a2f      	ldr	r2, [pc, #188]	; (800471c <TIM_Base_SetConfig+0x114>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d01f      	beq.n	80046a2 <TIM_Base_SetConfig+0x9a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004668:	d01b      	beq.n	80046a2 <TIM_Base_SetConfig+0x9a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a2c      	ldr	r2, [pc, #176]	; (8004720 <TIM_Base_SetConfig+0x118>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d017      	beq.n	80046a2 <TIM_Base_SetConfig+0x9a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a2b      	ldr	r2, [pc, #172]	; (8004724 <TIM_Base_SetConfig+0x11c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d013      	beq.n	80046a2 <TIM_Base_SetConfig+0x9a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a2a      	ldr	r2, [pc, #168]	; (8004728 <TIM_Base_SetConfig+0x120>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00f      	beq.n	80046a2 <TIM_Base_SetConfig+0x9a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a29      	ldr	r2, [pc, #164]	; (800472c <TIM_Base_SetConfig+0x124>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d00b      	beq.n	80046a2 <TIM_Base_SetConfig+0x9a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a28      	ldr	r2, [pc, #160]	; (8004730 <TIM_Base_SetConfig+0x128>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d007      	beq.n	80046a2 <TIM_Base_SetConfig+0x9a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a27      	ldr	r2, [pc, #156]	; (8004734 <TIM_Base_SetConfig+0x12c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d003      	beq.n	80046a2 <TIM_Base_SetConfig+0x9a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a26      	ldr	r2, [pc, #152]	; (8004738 <TIM_Base_SetConfig+0x130>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d108      	bne.n	80046b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a10      	ldr	r2, [pc, #64]	; (800471c <TIM_Base_SetConfig+0x114>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00f      	beq.n	8004700 <TIM_Base_SetConfig+0xf8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a12      	ldr	r2, [pc, #72]	; (800472c <TIM_Base_SetConfig+0x124>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00b      	beq.n	8004700 <TIM_Base_SetConfig+0xf8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a11      	ldr	r2, [pc, #68]	; (8004730 <TIM_Base_SetConfig+0x128>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d007      	beq.n	8004700 <TIM_Base_SetConfig+0xf8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a10      	ldr	r2, [pc, #64]	; (8004734 <TIM_Base_SetConfig+0x12c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d003      	beq.n	8004700 <TIM_Base_SetConfig+0xf8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a0f      	ldr	r2, [pc, #60]	; (8004738 <TIM_Base_SetConfig+0x130>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d103      	bne.n	8004708 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	615a      	str	r2, [r3, #20]
}
 800470e:	bf00      	nop
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40010000 	.word	0x40010000
 8004720:	40000400 	.word	0x40000400
 8004724:	40000800 	.word	0x40000800
 8004728:	40000c00 	.word	0x40000c00
 800472c:	40010400 	.word	0x40010400
 8004730:	40014000 	.word	0x40014000
 8004734:	40014400 	.word	0x40014400
 8004738:	40014800 	.word	0x40014800

0800473c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f023 0201 	bic.w	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4b37      	ldr	r3, [pc, #220]	; (8004844 <TIM_OC1_SetConfig+0x108>)
 8004768:	4013      	ands	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0303 	bic.w	r3, r3, #3
 8004772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f023 0302 	bic.w	r3, r3, #2
 8004784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a2d      	ldr	r2, [pc, #180]	; (8004848 <TIM_OC1_SetConfig+0x10c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d00f      	beq.n	80047b8 <TIM_OC1_SetConfig+0x7c>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a2c      	ldr	r2, [pc, #176]	; (800484c <TIM_OC1_SetConfig+0x110>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00b      	beq.n	80047b8 <TIM_OC1_SetConfig+0x7c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a2b      	ldr	r2, [pc, #172]	; (8004850 <TIM_OC1_SetConfig+0x114>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d007      	beq.n	80047b8 <TIM_OC1_SetConfig+0x7c>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a2a      	ldr	r2, [pc, #168]	; (8004854 <TIM_OC1_SetConfig+0x118>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d003      	beq.n	80047b8 <TIM_OC1_SetConfig+0x7c>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a29      	ldr	r2, [pc, #164]	; (8004858 <TIM_OC1_SetConfig+0x11c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d10c      	bne.n	80047d2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f023 0308 	bic.w	r3, r3, #8
 80047be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f023 0304 	bic.w	r3, r3, #4
 80047d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a1c      	ldr	r2, [pc, #112]	; (8004848 <TIM_OC1_SetConfig+0x10c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00f      	beq.n	80047fa <TIM_OC1_SetConfig+0xbe>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a1b      	ldr	r2, [pc, #108]	; (800484c <TIM_OC1_SetConfig+0x110>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00b      	beq.n	80047fa <TIM_OC1_SetConfig+0xbe>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a1a      	ldr	r2, [pc, #104]	; (8004850 <TIM_OC1_SetConfig+0x114>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d007      	beq.n	80047fa <TIM_OC1_SetConfig+0xbe>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a19      	ldr	r2, [pc, #100]	; (8004854 <TIM_OC1_SetConfig+0x118>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d003      	beq.n	80047fa <TIM_OC1_SetConfig+0xbe>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a18      	ldr	r2, [pc, #96]	; (8004858 <TIM_OC1_SetConfig+0x11c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d111      	bne.n	800481e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	621a      	str	r2, [r3, #32]
}
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	fffeff8f 	.word	0xfffeff8f
 8004848:	40010000 	.word	0x40010000
 800484c:	40010400 	.word	0x40010400
 8004850:	40014000 	.word	0x40014000
 8004854:	40014400 	.word	0x40014400
 8004858:	40014800 	.word	0x40014800

0800485c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f023 0210 	bic.w	r2, r3, #16
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4b34      	ldr	r3, [pc, #208]	; (8004958 <TIM_OC2_SetConfig+0xfc>)
 8004888:	4013      	ands	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f023 0320 	bic.w	r3, r3, #32
 80048a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a29      	ldr	r2, [pc, #164]	; (800495c <TIM_OC2_SetConfig+0x100>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d003      	beq.n	80048c4 <TIM_OC2_SetConfig+0x68>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a28      	ldr	r2, [pc, #160]	; (8004960 <TIM_OC2_SetConfig+0x104>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d10d      	bne.n	80048e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a1e      	ldr	r2, [pc, #120]	; (800495c <TIM_OC2_SetConfig+0x100>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d00f      	beq.n	8004908 <TIM_OC2_SetConfig+0xac>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a1d      	ldr	r2, [pc, #116]	; (8004960 <TIM_OC2_SetConfig+0x104>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00b      	beq.n	8004908 <TIM_OC2_SetConfig+0xac>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a1c      	ldr	r2, [pc, #112]	; (8004964 <TIM_OC2_SetConfig+0x108>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d007      	beq.n	8004908 <TIM_OC2_SetConfig+0xac>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a1b      	ldr	r2, [pc, #108]	; (8004968 <TIM_OC2_SetConfig+0x10c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <TIM_OC2_SetConfig+0xac>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a1a      	ldr	r2, [pc, #104]	; (800496c <TIM_OC2_SetConfig+0x110>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d113      	bne.n	8004930 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800490e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	621a      	str	r2, [r3, #32]
}
 800494a:	bf00      	nop
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	feff8fff 	.word	0xfeff8fff
 800495c:	40010000 	.word	0x40010000
 8004960:	40010400 	.word	0x40010400
 8004964:	40014000 	.word	0x40014000
 8004968:	40014400 	.word	0x40014400
 800496c:	40014800 	.word	0x40014800

08004970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0303 	bic.w	r3, r3, #3
 80049a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	021b      	lsls	r3, r3, #8
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a27      	ldr	r2, [pc, #156]	; (8004a68 <TIM_OC3_SetConfig+0xf8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d003      	beq.n	80049d6 <TIM_OC3_SetConfig+0x66>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a26      	ldr	r2, [pc, #152]	; (8004a6c <TIM_OC3_SetConfig+0xfc>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d10d      	bne.n	80049f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	021b      	lsls	r3, r3, #8
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a1c      	ldr	r2, [pc, #112]	; (8004a68 <TIM_OC3_SetConfig+0xf8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00f      	beq.n	8004a1a <TIM_OC3_SetConfig+0xaa>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a1b      	ldr	r2, [pc, #108]	; (8004a6c <TIM_OC3_SetConfig+0xfc>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00b      	beq.n	8004a1a <TIM_OC3_SetConfig+0xaa>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a1a      	ldr	r2, [pc, #104]	; (8004a70 <TIM_OC3_SetConfig+0x100>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d007      	beq.n	8004a1a <TIM_OC3_SetConfig+0xaa>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a19      	ldr	r2, [pc, #100]	; (8004a74 <TIM_OC3_SetConfig+0x104>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d003      	beq.n	8004a1a <TIM_OC3_SetConfig+0xaa>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a18      	ldr	r2, [pc, #96]	; (8004a78 <TIM_OC3_SetConfig+0x108>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d113      	bne.n	8004a42 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	621a      	str	r2, [r3, #32]
}
 8004a5c:	bf00      	nop
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40010400 	.word	0x40010400
 8004a70:	40014000 	.word	0x40014000
 8004a74:	40014400 	.word	0x40014400
 8004a78:	40014800 	.word	0x40014800

08004a7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	031b      	lsls	r3, r3, #12
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a18      	ldr	r2, [pc, #96]	; (8004b38 <TIM_OC4_SetConfig+0xbc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00f      	beq.n	8004afc <TIM_OC4_SetConfig+0x80>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a17      	ldr	r2, [pc, #92]	; (8004b3c <TIM_OC4_SetConfig+0xc0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00b      	beq.n	8004afc <TIM_OC4_SetConfig+0x80>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a16      	ldr	r2, [pc, #88]	; (8004b40 <TIM_OC4_SetConfig+0xc4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d007      	beq.n	8004afc <TIM_OC4_SetConfig+0x80>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <TIM_OC4_SetConfig+0xc8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <TIM_OC4_SetConfig+0x80>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a14      	ldr	r2, [pc, #80]	; (8004b48 <TIM_OC4_SetConfig+0xcc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d109      	bne.n	8004b10 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	40010400 	.word	0x40010400
 8004b40:	40014000 	.word	0x40014000
 8004b44:	40014400 	.word	0x40014400
 8004b48:	40014800 	.word	0x40014800

08004b4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	041b      	lsls	r3, r3, #16
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <TIM_OC5_SetConfig+0xb0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00f      	beq.n	8004bc2 <TIM_OC5_SetConfig+0x76>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a16      	ldr	r2, [pc, #88]	; (8004c00 <TIM_OC5_SetConfig+0xb4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00b      	beq.n	8004bc2 <TIM_OC5_SetConfig+0x76>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a15      	ldr	r2, [pc, #84]	; (8004c04 <TIM_OC5_SetConfig+0xb8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d007      	beq.n	8004bc2 <TIM_OC5_SetConfig+0x76>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <TIM_OC5_SetConfig+0xbc>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d003      	beq.n	8004bc2 <TIM_OC5_SetConfig+0x76>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <TIM_OC5_SetConfig+0xc0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d109      	bne.n	8004bd6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	621a      	str	r2, [r3, #32]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	40010000 	.word	0x40010000
 8004c00:	40010400 	.word	0x40010400
 8004c04:	40014000 	.word	0x40014000
 8004c08:	40014400 	.word	0x40014400
 8004c0c:	40014800 	.word	0x40014800

08004c10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	021b      	lsls	r3, r3, #8
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	051b      	lsls	r3, r3, #20
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a18      	ldr	r2, [pc, #96]	; (8004cc4 <TIM_OC6_SetConfig+0xb4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00f      	beq.n	8004c88 <TIM_OC6_SetConfig+0x78>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a17      	ldr	r2, [pc, #92]	; (8004cc8 <TIM_OC6_SetConfig+0xb8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00b      	beq.n	8004c88 <TIM_OC6_SetConfig+0x78>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a16      	ldr	r2, [pc, #88]	; (8004ccc <TIM_OC6_SetConfig+0xbc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d007      	beq.n	8004c88 <TIM_OC6_SetConfig+0x78>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a15      	ldr	r2, [pc, #84]	; (8004cd0 <TIM_OC6_SetConfig+0xc0>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <TIM_OC6_SetConfig+0x78>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a14      	ldr	r2, [pc, #80]	; (8004cd4 <TIM_OC6_SetConfig+0xc4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d109      	bne.n	8004c9c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	029b      	lsls	r3, r3, #10
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	621a      	str	r2, [r3, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40010000 	.word	0x40010000
 8004cc8:	40010400 	.word	0x40010400
 8004ccc:	40014000 	.word	0x40014000
 8004cd0:	40014400 	.word	0x40014400
 8004cd4:	40014800 	.word	0x40014800

08004cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f023 0201 	bic.w	r2, r3, #1
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f023 030a 	bic.w	r3, r3, #10
 8004d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	621a      	str	r2, [r3, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b087      	sub	sp, #28
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	f023 0210 	bic.w	r2, r3, #16
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	031b      	lsls	r3, r3, #12
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	621a      	str	r2, [r3, #32]
}
 8004d8a:	bf00      	nop
 8004d8c:	371c      	adds	r7, #28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <TIM_ITRx_SetConfig+0x38>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f043 0307 	orr.w	r3, r3, #7
 8004dba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	609a      	str	r2, [r3, #8]
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	ffcfff8f 	.word	0xffcfff8f

08004dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	021a      	lsls	r2, r3, #8
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	609a      	str	r2, [r3, #8]
}
 8004e08:	bf00      	nop
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f003 031f 	and.w	r3, r3, #31
 8004e26:	2201      	movs	r2, #1
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a1a      	ldr	r2, [r3, #32]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	43db      	mvns	r3, r3
 8004e36:	401a      	ands	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a1a      	ldr	r2, [r3, #32]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f003 031f 	and.w	r3, r3, #31
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	621a      	str	r2, [r3, #32]
}
 8004e52:	bf00      	nop
 8004e54:	371c      	adds	r7, #28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
	...

08004e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e068      	b.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a2e      	ldr	r2, [pc, #184]	; (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d004      	beq.n	8004eac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a2d      	ldr	r2, [pc, #180]	; (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d108      	bne.n	8004ebe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004eb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a1e      	ldr	r2, [pc, #120]	; (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01d      	beq.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eea:	d018      	beq.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a1b      	ldr	r2, [pc, #108]	; (8004f60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d013      	beq.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a1a      	ldr	r2, [pc, #104]	; (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00e      	beq.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d009      	beq.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a13      	ldr	r2, [pc, #76]	; (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d004      	beq.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a14      	ldr	r2, [pc, #80]	; (8004f6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d10c      	bne.n	8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	40010000 	.word	0x40010000
 8004f5c:	40010400 	.word	0x40010400
 8004f60:	40000400 	.word	0x40000400
 8004f64:	40000800 	.word	0x40000800
 8004f68:	40000c00 	.word	0x40000c00
 8004f6c:	40001800 	.word	0x40001800

08004f70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e065      	b.n	8005058 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	041b      	lsls	r3, r3, #16
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a16      	ldr	r2, [pc, #88]	; (8005064 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d004      	beq.n	800501a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a14      	ldr	r2, [pc, #80]	; (8005068 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d115      	bne.n	8005046 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	051b      	lsls	r3, r3, #20
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	40010000 	.word	0x40010000
 8005068:	40010400 	.word	0x40010400

0800506c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e042      	b.n	8005104 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005084:	2b00      	cmp	r3, #0
 8005086:	d106      	bne.n	8005096 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7fb ff91 	bl	8000fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2224      	movs	r2, #36	; 0x24
 800509a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f90e 	bl	80052d0 <UART_SetConfig>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d101      	bne.n	80050be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e022      	b.n	8005104 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 feb2 	bl	8005e30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 ff39 	bl	8005f74 <UART_CheckIdleState>
 8005102:	4603      	mov	r3, r0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	4613      	mov	r3, r2
 8005118:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005120:	2b20      	cmp	r3, #32
 8005122:	f040 80bc 	bne.w	800529e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_UART_Receive_IT+0x26>
 800512c:	88fb      	ldrh	r3, [r7, #6]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e0b4      	b.n	80052a0 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_UART_Receive_IT+0x38>
 8005140:	2302      	movs	r3, #2
 8005142:	e0ad      	b.n	80052a0 <HAL_UART_Receive_IT+0x194>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	88fa      	ldrh	r2, [r7, #6]
 8005156:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	88fa      	ldrh	r2, [r7, #6]
 800515e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005170:	d10e      	bne.n	8005190 <HAL_UART_Receive_IT+0x84>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d105      	bne.n	8005186 <HAL_UART_Receive_IT+0x7a>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005180:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005184:	e02d      	b.n	80051e2 <HAL_UART_Receive_IT+0xd6>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	22ff      	movs	r2, #255	; 0xff
 800518a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800518e:	e028      	b.n	80051e2 <HAL_UART_Receive_IT+0xd6>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10d      	bne.n	80051b4 <HAL_UART_Receive_IT+0xa8>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d104      	bne.n	80051aa <HAL_UART_Receive_IT+0x9e>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	22ff      	movs	r2, #255	; 0xff
 80051a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80051a8:	e01b      	b.n	80051e2 <HAL_UART_Receive_IT+0xd6>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	227f      	movs	r2, #127	; 0x7f
 80051ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80051b2:	e016      	b.n	80051e2 <HAL_UART_Receive_IT+0xd6>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051bc:	d10d      	bne.n	80051da <HAL_UART_Receive_IT+0xce>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d104      	bne.n	80051d0 <HAL_UART_Receive_IT+0xc4>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	227f      	movs	r2, #127	; 0x7f
 80051ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80051ce:	e008      	b.n	80051e2 <HAL_UART_Receive_IT+0xd6>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	223f      	movs	r2, #63	; 0x3f
 80051d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80051d8:	e003      	b.n	80051e2 <HAL_UART_Receive_IT+0xd6>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2222      	movs	r2, #34	; 0x22
 80051ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f042 0201 	orr.w	r2, r2, #1
 8005200:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800520a:	d12a      	bne.n	8005262 <HAL_UART_Receive_IT+0x156>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005212:	88fa      	ldrh	r2, [r7, #6]
 8005214:	429a      	cmp	r2, r3
 8005216:	d324      	bcc.n	8005262 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005220:	d107      	bne.n	8005232 <HAL_UART_Receive_IT+0x126>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d103      	bne.n	8005232 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4a1f      	ldr	r2, [pc, #124]	; (80052ac <HAL_UART_Receive_IT+0x1a0>)
 800522e:	66da      	str	r2, [r3, #108]	; 0x6c
 8005230:	e002      	b.n	8005238 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4a1e      	ldr	r2, [pc, #120]	; (80052b0 <HAL_UART_Receive_IT+0x1a4>)
 8005236:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800524e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800525e:	609a      	str	r2, [r3, #8]
 8005260:	e01b      	b.n	800529a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526a:	d107      	bne.n	800527c <HAL_UART_Receive_IT+0x170>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d103      	bne.n	800527c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4a0f      	ldr	r2, [pc, #60]	; (80052b4 <HAL_UART_Receive_IT+0x1a8>)
 8005278:	66da      	str	r2, [r3, #108]	; 0x6c
 800527a:	e002      	b.n	8005282 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4a0e      	ldr	r2, [pc, #56]	; (80052b8 <HAL_UART_Receive_IT+0x1ac>)
 8005280:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005298:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	e000      	b.n	80052a0 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800529e:	2302      	movs	r3, #2
  }
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	08006361 	.word	0x08006361
 80052b0:	08006259 	.word	0x08006259
 80052b4:	080061af 	.word	0x080061af
 80052b8:	08006105 	.word	0x08006105

080052bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80052d4:	b08e      	sub	sp, #56	; 0x38
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052fe:	4313      	orrs	r3, r2
 8005300:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	4bc1      	ldr	r3, [pc, #772]	; (8005610 <UART_SetConfig+0x340>)
 800530a:	4013      	ands	r3, r2
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005312:	430b      	orrs	r3, r1
 8005314:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4ab7      	ldr	r2, [pc, #732]	; (8005614 <UART_SetConfig+0x344>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d004      	beq.n	8005346 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005342:	4313      	orrs	r3, r2
 8005344:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	4bb2      	ldr	r3, [pc, #712]	; (8005618 <UART_SetConfig+0x348>)
 800534e:	4013      	ands	r3, r2
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005356:	430b      	orrs	r3, r1
 8005358:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	f023 010f 	bic.w	r1, r3, #15
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4aa9      	ldr	r2, [pc, #676]	; (800561c <UART_SetConfig+0x34c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d177      	bne.n	800546a <UART_SetConfig+0x19a>
 800537a:	4ba9      	ldr	r3, [pc, #676]	; (8005620 <UART_SetConfig+0x350>)
 800537c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005382:	2b28      	cmp	r3, #40	; 0x28
 8005384:	d86c      	bhi.n	8005460 <UART_SetConfig+0x190>
 8005386:	a201      	add	r2, pc, #4	; (adr r2, 800538c <UART_SetConfig+0xbc>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	08005431 	.word	0x08005431
 8005390:	08005461 	.word	0x08005461
 8005394:	08005461 	.word	0x08005461
 8005398:	08005461 	.word	0x08005461
 800539c:	08005461 	.word	0x08005461
 80053a0:	08005461 	.word	0x08005461
 80053a4:	08005461 	.word	0x08005461
 80053a8:	08005461 	.word	0x08005461
 80053ac:	08005439 	.word	0x08005439
 80053b0:	08005461 	.word	0x08005461
 80053b4:	08005461 	.word	0x08005461
 80053b8:	08005461 	.word	0x08005461
 80053bc:	08005461 	.word	0x08005461
 80053c0:	08005461 	.word	0x08005461
 80053c4:	08005461 	.word	0x08005461
 80053c8:	08005461 	.word	0x08005461
 80053cc:	08005441 	.word	0x08005441
 80053d0:	08005461 	.word	0x08005461
 80053d4:	08005461 	.word	0x08005461
 80053d8:	08005461 	.word	0x08005461
 80053dc:	08005461 	.word	0x08005461
 80053e0:	08005461 	.word	0x08005461
 80053e4:	08005461 	.word	0x08005461
 80053e8:	08005461 	.word	0x08005461
 80053ec:	08005449 	.word	0x08005449
 80053f0:	08005461 	.word	0x08005461
 80053f4:	08005461 	.word	0x08005461
 80053f8:	08005461 	.word	0x08005461
 80053fc:	08005461 	.word	0x08005461
 8005400:	08005461 	.word	0x08005461
 8005404:	08005461 	.word	0x08005461
 8005408:	08005461 	.word	0x08005461
 800540c:	08005451 	.word	0x08005451
 8005410:	08005461 	.word	0x08005461
 8005414:	08005461 	.word	0x08005461
 8005418:	08005461 	.word	0x08005461
 800541c:	08005461 	.word	0x08005461
 8005420:	08005461 	.word	0x08005461
 8005424:	08005461 	.word	0x08005461
 8005428:	08005461 	.word	0x08005461
 800542c:	08005459 	.word	0x08005459
 8005430:	2301      	movs	r3, #1
 8005432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005436:	e233      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005438:	2304      	movs	r3, #4
 800543a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800543e:	e22f      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005440:	2308      	movs	r3, #8
 8005442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005446:	e22b      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005448:	2310      	movs	r3, #16
 800544a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800544e:	e227      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005450:	2320      	movs	r3, #32
 8005452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005456:	e223      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005458:	2340      	movs	r3, #64	; 0x40
 800545a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800545e:	e21f      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005466:	bf00      	nop
 8005468:	e21a      	b.n	80058a0 <UART_SetConfig+0x5d0>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a6d      	ldr	r2, [pc, #436]	; (8005624 <UART_SetConfig+0x354>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d132      	bne.n	80054da <UART_SetConfig+0x20a>
 8005474:	4b6a      	ldr	r3, [pc, #424]	; (8005620 <UART_SetConfig+0x350>)
 8005476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	2b05      	cmp	r3, #5
 800547e:	d827      	bhi.n	80054d0 <UART_SetConfig+0x200>
 8005480:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <UART_SetConfig+0x1b8>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	080054a1 	.word	0x080054a1
 800548c:	080054a9 	.word	0x080054a9
 8005490:	080054b1 	.word	0x080054b1
 8005494:	080054b9 	.word	0x080054b9
 8005498:	080054c1 	.word	0x080054c1
 800549c:	080054c9 	.word	0x080054c9
 80054a0:	2300      	movs	r3, #0
 80054a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054a6:	e1fb      	b.n	80058a0 <UART_SetConfig+0x5d0>
 80054a8:	2304      	movs	r3, #4
 80054aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ae:	e1f7      	b.n	80058a0 <UART_SetConfig+0x5d0>
 80054b0:	2308      	movs	r3, #8
 80054b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054b6:	e1f3      	b.n	80058a0 <UART_SetConfig+0x5d0>
 80054b8:	2310      	movs	r3, #16
 80054ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054be:	e1ef      	b.n	80058a0 <UART_SetConfig+0x5d0>
 80054c0:	2320      	movs	r3, #32
 80054c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054c6:	e1eb      	b.n	80058a0 <UART_SetConfig+0x5d0>
 80054c8:	2340      	movs	r3, #64	; 0x40
 80054ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ce:	e1e7      	b.n	80058a0 <UART_SetConfig+0x5d0>
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054d6:	bf00      	nop
 80054d8:	e1e2      	b.n	80058a0 <UART_SetConfig+0x5d0>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a52      	ldr	r2, [pc, #328]	; (8005628 <UART_SetConfig+0x358>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d132      	bne.n	800554a <UART_SetConfig+0x27a>
 80054e4:	4b4e      	ldr	r3, [pc, #312]	; (8005620 <UART_SetConfig+0x350>)
 80054e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	2b05      	cmp	r3, #5
 80054ee:	d827      	bhi.n	8005540 <UART_SetConfig+0x270>
 80054f0:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <UART_SetConfig+0x228>)
 80054f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f6:	bf00      	nop
 80054f8:	08005511 	.word	0x08005511
 80054fc:	08005519 	.word	0x08005519
 8005500:	08005521 	.word	0x08005521
 8005504:	08005529 	.word	0x08005529
 8005508:	08005531 	.word	0x08005531
 800550c:	08005539 	.word	0x08005539
 8005510:	2300      	movs	r3, #0
 8005512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005516:	e1c3      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005518:	2304      	movs	r3, #4
 800551a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800551e:	e1bf      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005520:	2308      	movs	r3, #8
 8005522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005526:	e1bb      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005528:	2310      	movs	r3, #16
 800552a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800552e:	e1b7      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005530:	2320      	movs	r3, #32
 8005532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005536:	e1b3      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005538:	2340      	movs	r3, #64	; 0x40
 800553a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800553e:	e1af      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005546:	bf00      	nop
 8005548:	e1aa      	b.n	80058a0 <UART_SetConfig+0x5d0>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a37      	ldr	r2, [pc, #220]	; (800562c <UART_SetConfig+0x35c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d132      	bne.n	80055ba <UART_SetConfig+0x2ea>
 8005554:	4b32      	ldr	r3, [pc, #200]	; (8005620 <UART_SetConfig+0x350>)
 8005556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	2b05      	cmp	r3, #5
 800555e:	d827      	bhi.n	80055b0 <UART_SetConfig+0x2e0>
 8005560:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <UART_SetConfig+0x298>)
 8005562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005566:	bf00      	nop
 8005568:	08005581 	.word	0x08005581
 800556c:	08005589 	.word	0x08005589
 8005570:	08005591 	.word	0x08005591
 8005574:	08005599 	.word	0x08005599
 8005578:	080055a1 	.word	0x080055a1
 800557c:	080055a9 	.word	0x080055a9
 8005580:	2300      	movs	r3, #0
 8005582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005586:	e18b      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005588:	2304      	movs	r3, #4
 800558a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800558e:	e187      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005590:	2308      	movs	r3, #8
 8005592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005596:	e183      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005598:	2310      	movs	r3, #16
 800559a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800559e:	e17f      	b.n	80058a0 <UART_SetConfig+0x5d0>
 80055a0:	2320      	movs	r3, #32
 80055a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055a6:	e17b      	b.n	80058a0 <UART_SetConfig+0x5d0>
 80055a8:	2340      	movs	r3, #64	; 0x40
 80055aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ae:	e177      	b.n	80058a0 <UART_SetConfig+0x5d0>
 80055b0:	2380      	movs	r3, #128	; 0x80
 80055b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055b6:	bf00      	nop
 80055b8:	e172      	b.n	80058a0 <UART_SetConfig+0x5d0>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1c      	ldr	r2, [pc, #112]	; (8005630 <UART_SetConfig+0x360>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d144      	bne.n	800564e <UART_SetConfig+0x37e>
 80055c4:	4b16      	ldr	r3, [pc, #88]	; (8005620 <UART_SetConfig+0x350>)
 80055c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	2b05      	cmp	r3, #5
 80055ce:	d839      	bhi.n	8005644 <UART_SetConfig+0x374>
 80055d0:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <UART_SetConfig+0x308>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	080055f1 	.word	0x080055f1
 80055dc:	080055f9 	.word	0x080055f9
 80055e0:	08005601 	.word	0x08005601
 80055e4:	08005609 	.word	0x08005609
 80055e8:	08005635 	.word	0x08005635
 80055ec:	0800563d 	.word	0x0800563d
 80055f0:	2300      	movs	r3, #0
 80055f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055f6:	e153      	b.n	80058a0 <UART_SetConfig+0x5d0>
 80055f8:	2304      	movs	r3, #4
 80055fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055fe:	e14f      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005600:	2308      	movs	r3, #8
 8005602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005606:	e14b      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005608:	2310      	movs	r3, #16
 800560a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800560e:	e147      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005610:	cfff69f3 	.word	0xcfff69f3
 8005614:	58000c00 	.word	0x58000c00
 8005618:	11fff4ff 	.word	0x11fff4ff
 800561c:	40011000 	.word	0x40011000
 8005620:	58024400 	.word	0x58024400
 8005624:	40004400 	.word	0x40004400
 8005628:	40004800 	.word	0x40004800
 800562c:	40004c00 	.word	0x40004c00
 8005630:	40005000 	.word	0x40005000
 8005634:	2320      	movs	r3, #32
 8005636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800563a:	e131      	b.n	80058a0 <UART_SetConfig+0x5d0>
 800563c:	2340      	movs	r3, #64	; 0x40
 800563e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005642:	e12d      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005644:	2380      	movs	r3, #128	; 0x80
 8005646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800564a:	bf00      	nop
 800564c:	e128      	b.n	80058a0 <UART_SetConfig+0x5d0>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4ab6      	ldr	r2, [pc, #728]	; (800592c <UART_SetConfig+0x65c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d178      	bne.n	800574a <UART_SetConfig+0x47a>
 8005658:	4bb5      	ldr	r3, [pc, #724]	; (8005930 <UART_SetConfig+0x660>)
 800565a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005660:	2b28      	cmp	r3, #40	; 0x28
 8005662:	d86d      	bhi.n	8005740 <UART_SetConfig+0x470>
 8005664:	a201      	add	r2, pc, #4	; (adr r2, 800566c <UART_SetConfig+0x39c>)
 8005666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566a:	bf00      	nop
 800566c:	08005711 	.word	0x08005711
 8005670:	08005741 	.word	0x08005741
 8005674:	08005741 	.word	0x08005741
 8005678:	08005741 	.word	0x08005741
 800567c:	08005741 	.word	0x08005741
 8005680:	08005741 	.word	0x08005741
 8005684:	08005741 	.word	0x08005741
 8005688:	08005741 	.word	0x08005741
 800568c:	08005719 	.word	0x08005719
 8005690:	08005741 	.word	0x08005741
 8005694:	08005741 	.word	0x08005741
 8005698:	08005741 	.word	0x08005741
 800569c:	08005741 	.word	0x08005741
 80056a0:	08005741 	.word	0x08005741
 80056a4:	08005741 	.word	0x08005741
 80056a8:	08005741 	.word	0x08005741
 80056ac:	08005721 	.word	0x08005721
 80056b0:	08005741 	.word	0x08005741
 80056b4:	08005741 	.word	0x08005741
 80056b8:	08005741 	.word	0x08005741
 80056bc:	08005741 	.word	0x08005741
 80056c0:	08005741 	.word	0x08005741
 80056c4:	08005741 	.word	0x08005741
 80056c8:	08005741 	.word	0x08005741
 80056cc:	08005729 	.word	0x08005729
 80056d0:	08005741 	.word	0x08005741
 80056d4:	08005741 	.word	0x08005741
 80056d8:	08005741 	.word	0x08005741
 80056dc:	08005741 	.word	0x08005741
 80056e0:	08005741 	.word	0x08005741
 80056e4:	08005741 	.word	0x08005741
 80056e8:	08005741 	.word	0x08005741
 80056ec:	08005731 	.word	0x08005731
 80056f0:	08005741 	.word	0x08005741
 80056f4:	08005741 	.word	0x08005741
 80056f8:	08005741 	.word	0x08005741
 80056fc:	08005741 	.word	0x08005741
 8005700:	08005741 	.word	0x08005741
 8005704:	08005741 	.word	0x08005741
 8005708:	08005741 	.word	0x08005741
 800570c:	08005739 	.word	0x08005739
 8005710:	2301      	movs	r3, #1
 8005712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005716:	e0c3      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005718:	2304      	movs	r3, #4
 800571a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800571e:	e0bf      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005720:	2308      	movs	r3, #8
 8005722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005726:	e0bb      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005728:	2310      	movs	r3, #16
 800572a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800572e:	e0b7      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005730:	2320      	movs	r3, #32
 8005732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005736:	e0b3      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005738:	2340      	movs	r3, #64	; 0x40
 800573a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800573e:	e0af      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005740:	2380      	movs	r3, #128	; 0x80
 8005742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005746:	bf00      	nop
 8005748:	e0aa      	b.n	80058a0 <UART_SetConfig+0x5d0>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a79      	ldr	r2, [pc, #484]	; (8005934 <UART_SetConfig+0x664>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d132      	bne.n	80057ba <UART_SetConfig+0x4ea>
 8005754:	4b76      	ldr	r3, [pc, #472]	; (8005930 <UART_SetConfig+0x660>)
 8005756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	2b05      	cmp	r3, #5
 800575e:	d827      	bhi.n	80057b0 <UART_SetConfig+0x4e0>
 8005760:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <UART_SetConfig+0x498>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	08005781 	.word	0x08005781
 800576c:	08005789 	.word	0x08005789
 8005770:	08005791 	.word	0x08005791
 8005774:	08005799 	.word	0x08005799
 8005778:	080057a1 	.word	0x080057a1
 800577c:	080057a9 	.word	0x080057a9
 8005780:	2300      	movs	r3, #0
 8005782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005786:	e08b      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005788:	2304      	movs	r3, #4
 800578a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800578e:	e087      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005790:	2308      	movs	r3, #8
 8005792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005796:	e083      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005798:	2310      	movs	r3, #16
 800579a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800579e:	e07f      	b.n	80058a0 <UART_SetConfig+0x5d0>
 80057a0:	2320      	movs	r3, #32
 80057a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057a6:	e07b      	b.n	80058a0 <UART_SetConfig+0x5d0>
 80057a8:	2340      	movs	r3, #64	; 0x40
 80057aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ae:	e077      	b.n	80058a0 <UART_SetConfig+0x5d0>
 80057b0:	2380      	movs	r3, #128	; 0x80
 80057b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057b6:	bf00      	nop
 80057b8:	e072      	b.n	80058a0 <UART_SetConfig+0x5d0>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a5e      	ldr	r2, [pc, #376]	; (8005938 <UART_SetConfig+0x668>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d132      	bne.n	800582a <UART_SetConfig+0x55a>
 80057c4:	4b5a      	ldr	r3, [pc, #360]	; (8005930 <UART_SetConfig+0x660>)
 80057c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	2b05      	cmp	r3, #5
 80057ce:	d827      	bhi.n	8005820 <UART_SetConfig+0x550>
 80057d0:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <UART_SetConfig+0x508>)
 80057d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d6:	bf00      	nop
 80057d8:	080057f1 	.word	0x080057f1
 80057dc:	080057f9 	.word	0x080057f9
 80057e0:	08005801 	.word	0x08005801
 80057e4:	08005809 	.word	0x08005809
 80057e8:	08005811 	.word	0x08005811
 80057ec:	08005819 	.word	0x08005819
 80057f0:	2300      	movs	r3, #0
 80057f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057f6:	e053      	b.n	80058a0 <UART_SetConfig+0x5d0>
 80057f8:	2304      	movs	r3, #4
 80057fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057fe:	e04f      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005800:	2308      	movs	r3, #8
 8005802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005806:	e04b      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005808:	2310      	movs	r3, #16
 800580a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800580e:	e047      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005810:	2320      	movs	r3, #32
 8005812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005816:	e043      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005818:	2340      	movs	r3, #64	; 0x40
 800581a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800581e:	e03f      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005820:	2380      	movs	r3, #128	; 0x80
 8005822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005826:	bf00      	nop
 8005828:	e03a      	b.n	80058a0 <UART_SetConfig+0x5d0>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a43      	ldr	r2, [pc, #268]	; (800593c <UART_SetConfig+0x66c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d132      	bne.n	800589a <UART_SetConfig+0x5ca>
 8005834:	4b3e      	ldr	r3, [pc, #248]	; (8005930 <UART_SetConfig+0x660>)
 8005836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	2b05      	cmp	r3, #5
 800583e:	d827      	bhi.n	8005890 <UART_SetConfig+0x5c0>
 8005840:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <UART_SetConfig+0x578>)
 8005842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005846:	bf00      	nop
 8005848:	08005861 	.word	0x08005861
 800584c:	08005869 	.word	0x08005869
 8005850:	08005871 	.word	0x08005871
 8005854:	08005879 	.word	0x08005879
 8005858:	08005881 	.word	0x08005881
 800585c:	08005889 	.word	0x08005889
 8005860:	2302      	movs	r3, #2
 8005862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005866:	e01b      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005868:	2304      	movs	r3, #4
 800586a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800586e:	e017      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005870:	2308      	movs	r3, #8
 8005872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005876:	e013      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005878:	2310      	movs	r3, #16
 800587a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800587e:	e00f      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005880:	2320      	movs	r3, #32
 8005882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005886:	e00b      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005888:	2340      	movs	r3, #64	; 0x40
 800588a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800588e:	e007      	b.n	80058a0 <UART_SetConfig+0x5d0>
 8005890:	2380      	movs	r3, #128	; 0x80
 8005892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005896:	bf00      	nop
 8005898:	e002      	b.n	80058a0 <UART_SetConfig+0x5d0>
 800589a:	2380      	movs	r3, #128	; 0x80
 800589c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a25      	ldr	r2, [pc, #148]	; (800593c <UART_SetConfig+0x66c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	f040 80b8 	bne.w	8005a1c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d019      	beq.n	80058e8 <UART_SetConfig+0x618>
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	dc04      	bgt.n	80058c2 <UART_SetConfig+0x5f2>
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d009      	beq.n	80058d0 <UART_SetConfig+0x600>
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d00b      	beq.n	80058d8 <UART_SetConfig+0x608>
 80058c0:	e042      	b.n	8005948 <UART_SetConfig+0x678>
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	d02b      	beq.n	800591e <UART_SetConfig+0x64e>
 80058c6:	2b40      	cmp	r3, #64	; 0x40
 80058c8:	d02c      	beq.n	8005924 <UART_SetConfig+0x654>
 80058ca:	2b10      	cmp	r3, #16
 80058cc:	d014      	beq.n	80058f8 <UART_SetConfig+0x628>
 80058ce:	e03b      	b.n	8005948 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80058d0:	f7fd ff1e 	bl	8003710 <HAL_RCCEx_GetD3PCLK1Freq>
 80058d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80058d6:	e03d      	b.n	8005954 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058d8:	f107 0314 	add.w	r3, r7, #20
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fd ff2d 	bl	800373c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058e6:	e035      	b.n	8005954 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058e8:	f107 0308 	add.w	r3, r7, #8
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fe f871 	bl	80039d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058f6:	e02d      	b.n	8005954 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058f8:	4b0d      	ldr	r3, [pc, #52]	; (8005930 <UART_SetConfig+0x660>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0320 	and.w	r3, r3, #32
 8005900:	2b00      	cmp	r3, #0
 8005902:	d009      	beq.n	8005918 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005904:	4b0a      	ldr	r3, [pc, #40]	; (8005930 <UART_SetConfig+0x660>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	08db      	lsrs	r3, r3, #3
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	4a0c      	ldr	r2, [pc, #48]	; (8005940 <UART_SetConfig+0x670>)
 8005910:	fa22 f303 	lsr.w	r3, r2, r3
 8005914:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005916:	e01d      	b.n	8005954 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8005918:	4b09      	ldr	r3, [pc, #36]	; (8005940 <UART_SetConfig+0x670>)
 800591a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800591c:	e01a      	b.n	8005954 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800591e:	4b09      	ldr	r3, [pc, #36]	; (8005944 <UART_SetConfig+0x674>)
 8005920:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005922:	e017      	b.n	8005954 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005924:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005928:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800592a:	e013      	b.n	8005954 <UART_SetConfig+0x684>
 800592c:	40011400 	.word	0x40011400
 8005930:	58024400 	.word	0x58024400
 8005934:	40007800 	.word	0x40007800
 8005938:	40007c00 	.word	0x40007c00
 800593c:	58000c00 	.word	0x58000c00
 8005940:	03d09000 	.word	0x03d09000
 8005944:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005952:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 824d 	beq.w	8005df6 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	4aad      	ldr	r2, [pc, #692]	; (8005c18 <UART_SetConfig+0x948>)
 8005962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005966:	461a      	mov	r2, r3
 8005968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596a:	fbb3 f3f2 	udiv	r3, r3, r2
 800596e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	4613      	mov	r3, r2
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	4413      	add	r3, r2
 800597a:	6a3a      	ldr	r2, [r7, #32]
 800597c:	429a      	cmp	r2, r3
 800597e:	d305      	bcc.n	800598c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005986:	6a3a      	ldr	r2, [r7, #32]
 8005988:	429a      	cmp	r2, r3
 800598a:	d903      	bls.n	8005994 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005992:	e230      	b.n	8005df6 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005996:	4618      	mov	r0, r3
 8005998:	f04f 0100 	mov.w	r1, #0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	4a9d      	ldr	r2, [pc, #628]	; (8005c18 <UART_SetConfig+0x948>)
 80059a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	f04f 0400 	mov.w	r4, #0
 80059ac:	461a      	mov	r2, r3
 80059ae:	4623      	mov	r3, r4
 80059b0:	f7fa fc92 	bl	80002d8 <__aeabi_uldivmod>
 80059b4:	4603      	mov	r3, r0
 80059b6:	460c      	mov	r4, r1
 80059b8:	4619      	mov	r1, r3
 80059ba:	4622      	mov	r2, r4
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	f04f 0400 	mov.w	r4, #0
 80059c4:	0214      	lsls	r4, r2, #8
 80059c6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80059ca:	020b      	lsls	r3, r1, #8
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6852      	ldr	r2, [r2, #4]
 80059d0:	0852      	lsrs	r2, r2, #1
 80059d2:	4611      	mov	r1, r2
 80059d4:	f04f 0200 	mov.w	r2, #0
 80059d8:	eb13 0b01 	adds.w	fp, r3, r1
 80059dc:	eb44 0c02 	adc.w	ip, r4, r2
 80059e0:	4658      	mov	r0, fp
 80059e2:	4661      	mov	r1, ip
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f04f 0400 	mov.w	r4, #0
 80059ec:	461a      	mov	r2, r3
 80059ee:	4623      	mov	r3, r4
 80059f0:	f7fa fc72 	bl	80002d8 <__aeabi_uldivmod>
 80059f4:	4603      	mov	r3, r0
 80059f6:	460c      	mov	r4, r1
 80059f8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a00:	d308      	bcc.n	8005a14 <UART_SetConfig+0x744>
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a08:	d204      	bcs.n	8005a14 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a10:	60da      	str	r2, [r3, #12]
 8005a12:	e1f0      	b.n	8005df6 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005a1a:	e1ec      	b.n	8005df6 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a24:	f040 8100 	bne.w	8005c28 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8005a28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a2c:	2b40      	cmp	r3, #64	; 0x40
 8005a2e:	f200 80b7 	bhi.w	8005ba0 <UART_SetConfig+0x8d0>
 8005a32:	a201      	add	r2, pc, #4	; (adr r2, 8005a38 <UART_SetConfig+0x768>)
 8005a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a38:	08005b3d 	.word	0x08005b3d
 8005a3c:	08005b45 	.word	0x08005b45
 8005a40:	08005ba1 	.word	0x08005ba1
 8005a44:	08005ba1 	.word	0x08005ba1
 8005a48:	08005b4d 	.word	0x08005b4d
 8005a4c:	08005ba1 	.word	0x08005ba1
 8005a50:	08005ba1 	.word	0x08005ba1
 8005a54:	08005ba1 	.word	0x08005ba1
 8005a58:	08005b5d 	.word	0x08005b5d
 8005a5c:	08005ba1 	.word	0x08005ba1
 8005a60:	08005ba1 	.word	0x08005ba1
 8005a64:	08005ba1 	.word	0x08005ba1
 8005a68:	08005ba1 	.word	0x08005ba1
 8005a6c:	08005ba1 	.word	0x08005ba1
 8005a70:	08005ba1 	.word	0x08005ba1
 8005a74:	08005ba1 	.word	0x08005ba1
 8005a78:	08005b6d 	.word	0x08005b6d
 8005a7c:	08005ba1 	.word	0x08005ba1
 8005a80:	08005ba1 	.word	0x08005ba1
 8005a84:	08005ba1 	.word	0x08005ba1
 8005a88:	08005ba1 	.word	0x08005ba1
 8005a8c:	08005ba1 	.word	0x08005ba1
 8005a90:	08005ba1 	.word	0x08005ba1
 8005a94:	08005ba1 	.word	0x08005ba1
 8005a98:	08005ba1 	.word	0x08005ba1
 8005a9c:	08005ba1 	.word	0x08005ba1
 8005aa0:	08005ba1 	.word	0x08005ba1
 8005aa4:	08005ba1 	.word	0x08005ba1
 8005aa8:	08005ba1 	.word	0x08005ba1
 8005aac:	08005ba1 	.word	0x08005ba1
 8005ab0:	08005ba1 	.word	0x08005ba1
 8005ab4:	08005ba1 	.word	0x08005ba1
 8005ab8:	08005b93 	.word	0x08005b93
 8005abc:	08005ba1 	.word	0x08005ba1
 8005ac0:	08005ba1 	.word	0x08005ba1
 8005ac4:	08005ba1 	.word	0x08005ba1
 8005ac8:	08005ba1 	.word	0x08005ba1
 8005acc:	08005ba1 	.word	0x08005ba1
 8005ad0:	08005ba1 	.word	0x08005ba1
 8005ad4:	08005ba1 	.word	0x08005ba1
 8005ad8:	08005ba1 	.word	0x08005ba1
 8005adc:	08005ba1 	.word	0x08005ba1
 8005ae0:	08005ba1 	.word	0x08005ba1
 8005ae4:	08005ba1 	.word	0x08005ba1
 8005ae8:	08005ba1 	.word	0x08005ba1
 8005aec:	08005ba1 	.word	0x08005ba1
 8005af0:	08005ba1 	.word	0x08005ba1
 8005af4:	08005ba1 	.word	0x08005ba1
 8005af8:	08005ba1 	.word	0x08005ba1
 8005afc:	08005ba1 	.word	0x08005ba1
 8005b00:	08005ba1 	.word	0x08005ba1
 8005b04:	08005ba1 	.word	0x08005ba1
 8005b08:	08005ba1 	.word	0x08005ba1
 8005b0c:	08005ba1 	.word	0x08005ba1
 8005b10:	08005ba1 	.word	0x08005ba1
 8005b14:	08005ba1 	.word	0x08005ba1
 8005b18:	08005ba1 	.word	0x08005ba1
 8005b1c:	08005ba1 	.word	0x08005ba1
 8005b20:	08005ba1 	.word	0x08005ba1
 8005b24:	08005ba1 	.word	0x08005ba1
 8005b28:	08005ba1 	.word	0x08005ba1
 8005b2c:	08005ba1 	.word	0x08005ba1
 8005b30:	08005ba1 	.word	0x08005ba1
 8005b34:	08005ba1 	.word	0x08005ba1
 8005b38:	08005b99 	.word	0x08005b99
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b3c:	f7fc fece 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 8005b40:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b42:	e033      	b.n	8005bac <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b44:	f7fc fee0 	bl	8002908 <HAL_RCC_GetPCLK2Freq>
 8005b48:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b4a:	e02f      	b.n	8005bac <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b4c:	f107 0314 	add.w	r3, r7, #20
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fd fdf3 	bl	800373c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b5a:	e027      	b.n	8005bac <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b5c:	f107 0308 	add.w	r3, r7, #8
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fd ff37 	bl	80039d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b6a:	e01f      	b.n	8005bac <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b6c:	4b2b      	ldr	r3, [pc, #172]	; (8005c1c <UART_SetConfig+0x94c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0320 	and.w	r3, r3, #32
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d009      	beq.n	8005b8c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b78:	4b28      	ldr	r3, [pc, #160]	; (8005c1c <UART_SetConfig+0x94c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	08db      	lsrs	r3, r3, #3
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	4a27      	ldr	r2, [pc, #156]	; (8005c20 <UART_SetConfig+0x950>)
 8005b84:	fa22 f303 	lsr.w	r3, r2, r3
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b8a:	e00f      	b.n	8005bac <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8005b8c:	4b24      	ldr	r3, [pc, #144]	; (8005c20 <UART_SetConfig+0x950>)
 8005b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b90:	e00c      	b.n	8005bac <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b92:	4b24      	ldr	r3, [pc, #144]	; (8005c24 <UART_SetConfig+0x954>)
 8005b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b96:	e009      	b.n	8005bac <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b9e:	e005      	b.n	8005bac <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005baa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 8121 	beq.w	8005df6 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <UART_SetConfig+0x948>)
 8005bba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bc6:	005a      	lsls	r2, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	085b      	lsrs	r3, r3, #1
 8005bce:	441a      	add	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bde:	2b0f      	cmp	r3, #15
 8005be0:	d916      	bls.n	8005c10 <UART_SetConfig+0x940>
 8005be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be8:	d212      	bcs.n	8005c10 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f023 030f 	bic.w	r3, r3, #15
 8005bf2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	085b      	lsrs	r3, r3, #1
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c02:	4313      	orrs	r3, r2
 8005c04:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005c0c:	60da      	str	r2, [r3, #12]
 8005c0e:	e0f2      	b.n	8005df6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005c16:	e0ee      	b.n	8005df6 <UART_SetConfig+0xb26>
 8005c18:	08006734 	.word	0x08006734
 8005c1c:	58024400 	.word	0x58024400
 8005c20:	03d09000 	.word	0x03d09000
 8005c24:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c2c:	2b40      	cmp	r3, #64	; 0x40
 8005c2e:	f200 80b7 	bhi.w	8005da0 <UART_SetConfig+0xad0>
 8005c32:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <UART_SetConfig+0x968>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005d3d 	.word	0x08005d3d
 8005c3c:	08005d45 	.word	0x08005d45
 8005c40:	08005da1 	.word	0x08005da1
 8005c44:	08005da1 	.word	0x08005da1
 8005c48:	08005d4d 	.word	0x08005d4d
 8005c4c:	08005da1 	.word	0x08005da1
 8005c50:	08005da1 	.word	0x08005da1
 8005c54:	08005da1 	.word	0x08005da1
 8005c58:	08005d5d 	.word	0x08005d5d
 8005c5c:	08005da1 	.word	0x08005da1
 8005c60:	08005da1 	.word	0x08005da1
 8005c64:	08005da1 	.word	0x08005da1
 8005c68:	08005da1 	.word	0x08005da1
 8005c6c:	08005da1 	.word	0x08005da1
 8005c70:	08005da1 	.word	0x08005da1
 8005c74:	08005da1 	.word	0x08005da1
 8005c78:	08005d6d 	.word	0x08005d6d
 8005c7c:	08005da1 	.word	0x08005da1
 8005c80:	08005da1 	.word	0x08005da1
 8005c84:	08005da1 	.word	0x08005da1
 8005c88:	08005da1 	.word	0x08005da1
 8005c8c:	08005da1 	.word	0x08005da1
 8005c90:	08005da1 	.word	0x08005da1
 8005c94:	08005da1 	.word	0x08005da1
 8005c98:	08005da1 	.word	0x08005da1
 8005c9c:	08005da1 	.word	0x08005da1
 8005ca0:	08005da1 	.word	0x08005da1
 8005ca4:	08005da1 	.word	0x08005da1
 8005ca8:	08005da1 	.word	0x08005da1
 8005cac:	08005da1 	.word	0x08005da1
 8005cb0:	08005da1 	.word	0x08005da1
 8005cb4:	08005da1 	.word	0x08005da1
 8005cb8:	08005d93 	.word	0x08005d93
 8005cbc:	08005da1 	.word	0x08005da1
 8005cc0:	08005da1 	.word	0x08005da1
 8005cc4:	08005da1 	.word	0x08005da1
 8005cc8:	08005da1 	.word	0x08005da1
 8005ccc:	08005da1 	.word	0x08005da1
 8005cd0:	08005da1 	.word	0x08005da1
 8005cd4:	08005da1 	.word	0x08005da1
 8005cd8:	08005da1 	.word	0x08005da1
 8005cdc:	08005da1 	.word	0x08005da1
 8005ce0:	08005da1 	.word	0x08005da1
 8005ce4:	08005da1 	.word	0x08005da1
 8005ce8:	08005da1 	.word	0x08005da1
 8005cec:	08005da1 	.word	0x08005da1
 8005cf0:	08005da1 	.word	0x08005da1
 8005cf4:	08005da1 	.word	0x08005da1
 8005cf8:	08005da1 	.word	0x08005da1
 8005cfc:	08005da1 	.word	0x08005da1
 8005d00:	08005da1 	.word	0x08005da1
 8005d04:	08005da1 	.word	0x08005da1
 8005d08:	08005da1 	.word	0x08005da1
 8005d0c:	08005da1 	.word	0x08005da1
 8005d10:	08005da1 	.word	0x08005da1
 8005d14:	08005da1 	.word	0x08005da1
 8005d18:	08005da1 	.word	0x08005da1
 8005d1c:	08005da1 	.word	0x08005da1
 8005d20:	08005da1 	.word	0x08005da1
 8005d24:	08005da1 	.word	0x08005da1
 8005d28:	08005da1 	.word	0x08005da1
 8005d2c:	08005da1 	.word	0x08005da1
 8005d30:	08005da1 	.word	0x08005da1
 8005d34:	08005da1 	.word	0x08005da1
 8005d38:	08005d99 	.word	0x08005d99
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d3c:	f7fc fdce 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 8005d40:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005d42:	e033      	b.n	8005dac <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d44:	f7fc fde0 	bl	8002908 <HAL_RCC_GetPCLK2Freq>
 8005d48:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005d4a:	e02f      	b.n	8005dac <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d4c:	f107 0314 	add.w	r3, r7, #20
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fd fcf3 	bl	800373c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d5a:	e027      	b.n	8005dac <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d5c:	f107 0308 	add.w	r3, r7, #8
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fd fe37 	bl	80039d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d6a:	e01f      	b.n	8005dac <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d6c:	4b2c      	ldr	r3, [pc, #176]	; (8005e20 <UART_SetConfig+0xb50>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d009      	beq.n	8005d8c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d78:	4b29      	ldr	r3, [pc, #164]	; (8005e20 <UART_SetConfig+0xb50>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	08db      	lsrs	r3, r3, #3
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	4a28      	ldr	r2, [pc, #160]	; (8005e24 <UART_SetConfig+0xb54>)
 8005d84:	fa22 f303 	lsr.w	r3, r2, r3
 8005d88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d8a:	e00f      	b.n	8005dac <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8005d8c:	4b25      	ldr	r3, [pc, #148]	; (8005e24 <UART_SetConfig+0xb54>)
 8005d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d90:	e00c      	b.n	8005dac <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d92:	4b25      	ldr	r3, [pc, #148]	; (8005e28 <UART_SetConfig+0xb58>)
 8005d94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d96:	e009      	b.n	8005dac <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d9e:	e005      	b.n	8005dac <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005daa:	bf00      	nop
    }

    if (pclk != 0U)
 8005dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d021      	beq.n	8005df6 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	4a1d      	ldr	r2, [pc, #116]	; (8005e2c <UART_SetConfig+0xb5c>)
 8005db8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc0:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	085b      	lsrs	r3, r3, #1
 8005dca:	441a      	add	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	2b0f      	cmp	r3, #15
 8005ddc:	d908      	bls.n	8005df0 <UART_SetConfig+0xb20>
 8005dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de4:	d204      	bcs.n	8005df0 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dec:	60da      	str	r2, [r3, #12]
 8005dee:	e002      	b.n	8005df6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005e12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3738      	adds	r7, #56	; 0x38
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005e20:	58024400 	.word	0x58024400
 8005e24:	03d09000 	.word	0x03d09000
 8005e28:	003d0900 	.word	0x003d0900
 8005e2c:	08006734 	.word	0x08006734

08005e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00a      	beq.n	8005e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00a      	beq.n	8005ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01a      	beq.n	8005f46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f2e:	d10a      	bne.n	8005f46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	605a      	str	r2, [r3, #4]
  }
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005f84:	f7fb fa3a 	bl	80013fc <HAL_GetTick>
 8005f88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0308 	and.w	r3, r3, #8
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d10e      	bne.n	8005fb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f82c 	bl	8006004 <UART_WaitOnFlagUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e022      	b.n	8005ffc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d10e      	bne.n	8005fe2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f816 	bl	8006004 <UART_WaitOnFlagUntilTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e00c      	b.n	8005ffc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	4613      	mov	r3, r2
 8006012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006014:	e062      	b.n	80060dc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601c:	d05e      	beq.n	80060dc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601e:	f7fb f9ed 	bl	80013fc <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	429a      	cmp	r2, r3
 800602c:	d302      	bcc.n	8006034 <UART_WaitOnFlagUntilTimeout+0x30>
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d11d      	bne.n	8006070 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006042:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 0201 	bic.w	r2, r2, #1
 8006052:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2220      	movs	r2, #32
 8006058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e045      	b.n	80060fc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0304 	and.w	r3, r3, #4
 800607a:	2b00      	cmp	r3, #0
 800607c:	d02e      	beq.n	80060dc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800608c:	d126      	bne.n	80060dc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006096:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060a6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0201 	bic.w	r2, r2, #1
 80060b6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2220      	movs	r2, #32
 80060bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e00f      	b.n	80060fc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69da      	ldr	r2, [r3, #28]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	4013      	ands	r3, r2
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	bf0c      	ite	eq
 80060ec:	2301      	moveq	r3, #1
 80060ee:	2300      	movne	r3, #0
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	461a      	mov	r2, r3
 80060f4:	79fb      	ldrb	r3, [r7, #7]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d08d      	beq.n	8006016 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006112:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800611a:	2b22      	cmp	r3, #34	; 0x22
 800611c:	d13b      	bne.n	8006196 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006126:	89bb      	ldrh	r3, [r7, #12]
 8006128:	b2d9      	uxtb	r1, r3
 800612a:	89fb      	ldrh	r3, [r7, #14]
 800612c:	b2da      	uxtb	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006132:	400a      	ands	r2, r1
 8006134:	b2d2      	uxtb	r2, r2
 8006136:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800615a:	b29b      	uxth	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d122      	bne.n	80061a6 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800616e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0201 	bic.w	r2, r2, #1
 800617e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2220      	movs	r2, #32
 8006184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff f894 	bl	80052bc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006194:	e007      	b.n	80061a6 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	699a      	ldr	r2, [r3, #24]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f042 0208 	orr.w	r2, r2, #8
 80061a4:	619a      	str	r2, [r3, #24]
}
 80061a6:	bf00      	nop
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80061bc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c4:	2b22      	cmp	r3, #34	; 0x22
 80061c6:	d13b      	bne.n	8006240 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80061d6:	89ba      	ldrh	r2, [r7, #12]
 80061d8:	89fb      	ldrh	r3, [r7, #14]
 80061da:	4013      	ands	r3, r2
 80061dc:	b29a      	uxth	r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e6:	1c9a      	adds	r2, r3, #2
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d122      	bne.n	8006250 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006218:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0201 	bic.w	r2, r2, #1
 8006228:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2220      	movs	r2, #32
 800622e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff f83f 	bl	80052bc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800623e:	e007      	b.n	8006250 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699a      	ldr	r2, [r3, #24]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0208 	orr.w	r2, r2, #8
 800624e:	619a      	str	r2, [r3, #24]
}
 8006250:	bf00      	nop
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006266:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800626e:	2b22      	cmp	r3, #34	; 0x22
 8006270:	d166      	bne.n	8006340 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006278:	81fb      	strh	r3, [r7, #14]
 800627a:	e03d      	b.n	80062f8 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006284:	893b      	ldrh	r3, [r7, #8]
 8006286:	b2d9      	uxtb	r1, r3
 8006288:	89bb      	ldrh	r3, [r7, #12]
 800628a:	b2da      	uxtb	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006290:	400a      	ands	r2, r1
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d119      	bne.n	80062f2 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062cc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6899      	ldr	r1, [r3, #8]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	4b1f      	ldr	r3, [pc, #124]	; (8006358 <UART_RxISR_8BIT_FIFOEN+0x100>)
 80062da:	400b      	ands	r3, r1
 80062dc:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7fe ffe5 	bl	80052bc <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80062f2:	89fb      	ldrh	r3, [r7, #14]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	81fb      	strh	r3, [r7, #14]
 80062f8:	89fb      	ldrh	r3, [r7, #14]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1be      	bne.n	800627c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006304:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006306:	897b      	ldrh	r3, [r7, #10]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d021      	beq.n	8006350 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006312:	897a      	ldrh	r2, [r7, #10]
 8006314:	429a      	cmp	r2, r3
 8006316:	d21b      	bcs.n	8006350 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006326:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a0c      	ldr	r2, [pc, #48]	; (800635c <UART_RxISR_8BIT_FIFOEN+0x104>)
 800632c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f042 0220 	orr.w	r2, r2, #32
 800633c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800633e:	e007      	b.n	8006350 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699a      	ldr	r2, [r3, #24]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0208 	orr.w	r2, r2, #8
 800634e:	619a      	str	r2, [r3, #24]
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	effffffe 	.word	0xeffffffe
 800635c:	08006105 	.word	0x08006105

08006360 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800636e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006376:	2b22      	cmp	r3, #34	; 0x22
 8006378:	d166      	bne.n	8006448 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006380:	82fb      	strh	r3, [r7, #22]
 8006382:	e03d      	b.n	8006400 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006390:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006392:	8a3a      	ldrh	r2, [r7, #16]
 8006394:	8abb      	ldrh	r3, [r7, #20]
 8006396:	4013      	ands	r3, r2
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a2:	1c9a      	adds	r2, r3, #2
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d119      	bne.n	80063fa <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063d4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6899      	ldr	r1, [r3, #8]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	4b1f      	ldr	r3, [pc, #124]	; (8006460 <UART_RxISR_16BIT_FIFOEN+0x100>)
 80063e2:	400b      	ands	r3, r1
 80063e4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7fe ff61 	bl	80052bc <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80063fa:	8afb      	ldrh	r3, [r7, #22]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	82fb      	strh	r3, [r7, #22]
 8006400:	8afb      	ldrh	r3, [r7, #22]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1be      	bne.n	8006384 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800640c:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800640e:	8a7b      	ldrh	r3, [r7, #18]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d021      	beq.n	8006458 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800641a:	8a7a      	ldrh	r2, [r7, #18]
 800641c:	429a      	cmp	r2, r3
 800641e:	d21b      	bcs.n	8006458 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800642e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a0c      	ldr	r2, [pc, #48]	; (8006464 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8006434:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f042 0220 	orr.w	r2, r2, #32
 8006444:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006446:	e007      	b.n	8006458 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0208 	orr.w	r2, r2, #8
 8006456:	619a      	str	r2, [r3, #24]
}
 8006458:	bf00      	nop
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	effffffe 	.word	0xeffffffe
 8006464:	080061af 	.word	0x080061af

08006468 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_UARTEx_DisableFifoMode+0x16>
 800647a:	2302      	movs	r3, #2
 800647c:	e027      	b.n	80064ce <HAL_UARTEx_DisableFifoMode+0x66>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2224      	movs	r2, #36	; 0x24
 800648a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0201 	bic.w	r2, r2, #1
 80064a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2220      	movs	r2, #32
 80064c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d101      	bne.n	80064f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064ee:	2302      	movs	r3, #2
 80064f0:	e02d      	b.n	800654e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2224      	movs	r2, #36	; 0x24
 80064fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0201 	bic.w	r2, r2, #1
 8006518:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f850 	bl	80065d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2220      	movs	r2, #32
 8006540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800656a:	2302      	movs	r3, #2
 800656c:	e02d      	b.n	80065ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2224      	movs	r2, #36	; 0x24
 800657a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0201 	bic.w	r2, r2, #1
 8006594:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f812 	bl	80065d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b089      	sub	sp, #36	; 0x24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80065dc:	4a2f      	ldr	r2, [pc, #188]	; (800669c <UARTEx_SetNbDataToProcess+0xc8>)
 80065de:	f107 0314 	add.w	r3, r7, #20
 80065e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065e6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80065ea:	4a2d      	ldr	r2, [pc, #180]	; (80066a0 <UARTEx_SetNbDataToProcess+0xcc>)
 80065ec:	f107 030c 	add.w	r3, r7, #12
 80065f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065f4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d108      	bne.n	8006612 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006610:	e03d      	b.n	800668e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006612:	2310      	movs	r3, #16
 8006614:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006616:	2310      	movs	r3, #16
 8006618:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	0e5b      	lsrs	r3, r3, #25
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	0f5b      	lsrs	r3, r3, #29
 8006632:	b2db      	uxtb	r3, r3
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800663a:	7fbb      	ldrb	r3, [r7, #30]
 800663c:	7f3a      	ldrb	r2, [r7, #28]
 800663e:	f107 0120 	add.w	r1, r7, #32
 8006642:	440a      	add	r2, r1
 8006644:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006648:	fb02 f303 	mul.w	r3, r2, r3
 800664c:	7f3a      	ldrb	r2, [r7, #28]
 800664e:	f107 0120 	add.w	r1, r7, #32
 8006652:	440a      	add	r2, r1
 8006654:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006658:	fb93 f3f2 	sdiv	r3, r3, r2
 800665c:	b29a      	uxth	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006664:	7ffb      	ldrb	r3, [r7, #31]
 8006666:	7f7a      	ldrb	r2, [r7, #29]
 8006668:	f107 0120 	add.w	r1, r7, #32
 800666c:	440a      	add	r2, r1
 800666e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006672:	fb02 f303 	mul.w	r3, r2, r3
 8006676:	7f7a      	ldrb	r2, [r7, #29]
 8006678:	f107 0120 	add.w	r1, r7, #32
 800667c:	440a      	add	r2, r1
 800667e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006682:	fb93 f3f2 	sdiv	r3, r3, r2
 8006686:	b29a      	uxth	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800668e:	bf00      	nop
 8006690:	3724      	adds	r7, #36	; 0x24
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	08006714 	.word	0x08006714
 80066a0:	0800671c 	.word	0x0800671c

080066a4 <__libc_init_array>:
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	4e0d      	ldr	r6, [pc, #52]	; (80066dc <__libc_init_array+0x38>)
 80066a8:	4c0d      	ldr	r4, [pc, #52]	; (80066e0 <__libc_init_array+0x3c>)
 80066aa:	1ba4      	subs	r4, r4, r6
 80066ac:	10a4      	asrs	r4, r4, #2
 80066ae:	2500      	movs	r5, #0
 80066b0:	42a5      	cmp	r5, r4
 80066b2:	d109      	bne.n	80066c8 <__libc_init_array+0x24>
 80066b4:	4e0b      	ldr	r6, [pc, #44]	; (80066e4 <__libc_init_array+0x40>)
 80066b6:	4c0c      	ldr	r4, [pc, #48]	; (80066e8 <__libc_init_array+0x44>)
 80066b8:	f000 f820 	bl	80066fc <_init>
 80066bc:	1ba4      	subs	r4, r4, r6
 80066be:	10a4      	asrs	r4, r4, #2
 80066c0:	2500      	movs	r5, #0
 80066c2:	42a5      	cmp	r5, r4
 80066c4:	d105      	bne.n	80066d2 <__libc_init_array+0x2e>
 80066c6:	bd70      	pop	{r4, r5, r6, pc}
 80066c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066cc:	4798      	blx	r3
 80066ce:	3501      	adds	r5, #1
 80066d0:	e7ee      	b.n	80066b0 <__libc_init_array+0xc>
 80066d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066d6:	4798      	blx	r3
 80066d8:	3501      	adds	r5, #1
 80066da:	e7f2      	b.n	80066c2 <__libc_init_array+0x1e>
 80066dc:	08006754 	.word	0x08006754
 80066e0:	08006754 	.word	0x08006754
 80066e4:	08006754 	.word	0x08006754
 80066e8:	08006758 	.word	0x08006758

080066ec <memset>:
 80066ec:	4402      	add	r2, r0
 80066ee:	4603      	mov	r3, r0
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d100      	bne.n	80066f6 <memset+0xa>
 80066f4:	4770      	bx	lr
 80066f6:	f803 1b01 	strb.w	r1, [r3], #1
 80066fa:	e7f9      	b.n	80066f0 <memset+0x4>

080066fc <_init>:
 80066fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fe:	bf00      	nop
 8006700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006702:	bc08      	pop	{r3}
 8006704:	469e      	mov	lr, r3
 8006706:	4770      	bx	lr

08006708 <_fini>:
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670a:	bf00      	nop
 800670c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670e:	bc08      	pop	{r3}
 8006710:	469e      	mov	lr, r3
 8006712:	4770      	bx	lr
