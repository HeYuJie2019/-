
erche.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070fc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007394  08007394  00017394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073cc  080073cc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080073cc  080073cc  000173cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073d4  080073d4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073d4  080073d4  000173d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073d8  080073d8  000173d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  080073dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  24000078  08007454  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000308  08007454  00020308  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d90c  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aba  00000000  00000000  0003d9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00040470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00041420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000365d3  00000000  00000000  00042318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001428d  00000000  00000000  000788eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001618e6  00000000  00000000  0008cb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ee45e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042cc  00000000  00000000  001ee4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800737c 	.word	0x0800737c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	0800737c 	.word	0x0800737c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <adjust>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void adjust(int n)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if(n==1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d11f      	bne.n	800061e <adjust+0x4e>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <adjust+0x5c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2200      	movs	r2, #0
 80005e4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,27);
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <adjust+0x5c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	221b      	movs	r2, #27
 80005ec:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,26);
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <adjust+0x5c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	221a      	movs	r2, #26
 80005f4:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <adjust+0x5c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2200      	movs	r2, #0
 80005fc:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,0);
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <adjust+0x60>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2200      	movs	r2, #0
 8000604:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,22);
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <adjust+0x60>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2216      	movs	r2, #22
 800060c:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,25);
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <adjust+0x60>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2219      	movs	r2, #25
 8000614:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <adjust+0x60>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	24000228 	.word	0x24000228
 8000630:	240000b0 	.word	0x240000b0

08000634 <move>:
void move(int n)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	if(n==1)//直行
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b01      	cmp	r3, #1
 8000640:	f040 80a3 	bne.w	800078a <move+0x156>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000648:	48a2      	ldr	r0, [pc, #648]	; (80008d4 <move+0x2a0>)
 800064a:	f002 f81b 	bl	8002684 <HAL_GPIO_ReadPin>
 800064e:	4603      	mov	r3, r0
 8000650:	2b01      	cmp	r3, #1
 8000652:	d127      	bne.n	80006a4 <move+0x70>
 8000654:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000658:	489e      	ldr	r0, [pc, #632]	; (80008d4 <move+0x2a0>)
 800065a:	f002 f813 	bl	8002684 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d11f      	bne.n	80006a4 <move+0x70>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,25);
 8000664:	4b9c      	ldr	r3, [pc, #624]	; (80008d8 <move+0x2a4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2219      	movs	r2, #25
 800066a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800066c:	4b9a      	ldr	r3, [pc, #616]	; (80008d8 <move+0x2a4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2200      	movs	r2, #0
 8000672:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,25);
 8000674:	4b98      	ldr	r3, [pc, #608]	; (80008d8 <move+0x2a4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2219      	movs	r2, #25
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 800067c:	4b96      	ldr	r3, [pc, #600]	; (80008d8 <move+0x2a4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2200      	movs	r2, #0
 8000682:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,12);
 8000684:	4b95      	ldr	r3, [pc, #596]	; (80008dc <move+0x2a8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	220c      	movs	r2, #12
 800068a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 800068c:	4b93      	ldr	r3, [pc, #588]	; (80008dc <move+0x2a8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2200      	movs	r2, #0
 8000692:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,30);
 8000694:	4b91      	ldr	r3, [pc, #580]	; (80008dc <move+0x2a8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	221e      	movs	r2, #30
 800069a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 800069c:	4b8f      	ldr	r3, [pc, #572]	; (80008dc <move+0x2a8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2200      	movs	r2, #0
 80006a2:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 80006a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a8:	488a      	ldr	r0, [pc, #552]	; (80008d4 <move+0x2a0>)
 80006aa:	f001 ffeb 	bl	8002684 <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d127      	bne.n	8000704 <move+0xd0>
 80006b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b8:	4886      	ldr	r0, [pc, #536]	; (80008d4 <move+0x2a0>)
 80006ba:	f001 ffe3 	bl	8002684 <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d11f      	bne.n	8000704 <move+0xd0>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,25);
 80006c4:	4b84      	ldr	r3, [pc, #528]	; (80008d8 <move+0x2a4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2219      	movs	r2, #25
 80006ca:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80006cc:	4b82      	ldr	r3, [pc, #520]	; (80008d8 <move+0x2a4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2200      	movs	r2, #0
 80006d2:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,25);
 80006d4:	4b80      	ldr	r3, [pc, #512]	; (80008d8 <move+0x2a4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2219      	movs	r2, #25
 80006da:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80006dc:	4b7e      	ldr	r3, [pc, #504]	; (80008d8 <move+0x2a4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2200      	movs	r2, #0
 80006e2:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,30);
 80006e4:	4b7d      	ldr	r3, [pc, #500]	; (80008dc <move+0x2a8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	221e      	movs	r2, #30
 80006ea:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 80006ec:	4b7b      	ldr	r3, [pc, #492]	; (80008dc <move+0x2a8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2200      	movs	r2, #0
 80006f2:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,11);
 80006f4:	4b79      	ldr	r3, [pc, #484]	; (80008dc <move+0x2a8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	220b      	movs	r2, #11
 80006fa:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 80006fc:	4b77      	ldr	r3, [pc, #476]	; (80008dc <move+0x2a8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2200      	movs	r2, #0
 8000702:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000704:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000708:	4872      	ldr	r0, [pc, #456]	; (80008d4 <move+0x2a0>)
 800070a:	f001 ffbb 	bl	8002684 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d127      	bne.n	8000764 <move+0x130>
 8000714:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000718:	486e      	ldr	r0, [pc, #440]	; (80008d4 <move+0x2a0>)
 800071a:	f001 ffb3 	bl	8002684 <HAL_GPIO_ReadPin>
 800071e:	4603      	mov	r3, r0
 8000720:	2b01      	cmp	r3, #1
 8000722:	d11f      	bne.n	8000764 <move+0x130>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,25);
 8000724:	4b6c      	ldr	r3, [pc, #432]	; (80008d8 <move+0x2a4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2219      	movs	r2, #25
 800072a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800072c:	4b6a      	ldr	r3, [pc, #424]	; (80008d8 <move+0x2a4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2200      	movs	r2, #0
 8000732:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,25);
 8000734:	4b68      	ldr	r3, [pc, #416]	; (80008d8 <move+0x2a4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2219      	movs	r2, #25
 800073a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 800073c:	4b66      	ldr	r3, [pc, #408]	; (80008d8 <move+0x2a4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2200      	movs	r2, #0
 8000742:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,12);
 8000744:	4b65      	ldr	r3, [pc, #404]	; (80008dc <move+0x2a8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	220c      	movs	r2, #12
 800074a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 800074c:	4b63      	ldr	r3, [pc, #396]	; (80008dc <move+0x2a8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2200      	movs	r2, #0
 8000752:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,11);
 8000754:	4b61      	ldr	r3, [pc, #388]	; (80008dc <move+0x2a8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	220b      	movs	r2, #11
 800075a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 800075c:	4b5f      	ldr	r3, [pc, #380]	; (80008dc <move+0x2a8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2200      	movs	r2, #0
 8000762:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000764:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000768:	485a      	ldr	r0, [pc, #360]	; (80008d4 <move+0x2a0>)
 800076a:	f001 ff8b 	bl	8002684 <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d10a      	bne.n	800078a <move+0x156>
 8000774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000778:	4856      	ldr	r0, [pc, #344]	; (80008d4 <move+0x2a0>)
 800077a:	f001 ff83 	bl	8002684 <HAL_GPIO_ReadPin>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d102      	bne.n	800078a <move+0x156>
		{
			  			adjust(1);
 8000784:	2001      	movs	r0, #1
 8000786:	f7ff ff23 	bl	80005d0 <adjust>
//
//			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
//			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
		}
	}
	if(n==2)//右行
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b02      	cmp	r3, #2
 800078e:	f040 80c7 	bne.w	8000920 <move+0x2ec>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1)
 8000792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000796:	4852      	ldr	r0, [pc, #328]	; (80008e0 <move+0x2ac>)
 8000798:	f001 ff74 	bl	8002684 <HAL_GPIO_ReadPin>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d126      	bne.n	80007f0 <move+0x1bc>
 80007a2:	2120      	movs	r1, #32
 80007a4:	484f      	ldr	r0, [pc, #316]	; (80008e4 <move+0x2b0>)
 80007a6:	f001 ff6d 	bl	8002684 <HAL_GPIO_ReadPin>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d11f      	bne.n	80007f0 <move+0x1bc>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,19);
 80007b0:	4b49      	ldr	r3, [pc, #292]	; (80008d8 <move+0x2a4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2213      	movs	r2, #19
 80007b6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80007b8:	4b47      	ldr	r3, [pc, #284]	; (80008d8 <move+0x2a4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2200      	movs	r2, #0
 80007be:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80007c0:	4b45      	ldr	r3, [pc, #276]	; (80008d8 <move+0x2a4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2200      	movs	r2, #0
 80007c6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,22);
 80007c8:	4b43      	ldr	r3, [pc, #268]	; (80008d8 <move+0x2a4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2216      	movs	r2, #22
 80007ce:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 80007d0:	4b42      	ldr	r3, [pc, #264]	; (80008dc <move+0x2a8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2210      	movs	r2, #16
 80007d6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 80007d8:	4b40      	ldr	r3, [pc, #256]	; (80008dc <move+0x2a8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2200      	movs	r2, #0
 80007de:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 80007e0:	4b3e      	ldr	r3, [pc, #248]	; (80008dc <move+0x2a8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2200      	movs	r2, #0
 80007e6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,24);
 80007e8:	4b3c      	ldr	r3, [pc, #240]	; (80008dc <move+0x2a8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2218      	movs	r2, #24
 80007ee:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 80007f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f4:	483a      	ldr	r0, [pc, #232]	; (80008e0 <move+0x2ac>)
 80007f6:	f001 ff45 	bl	8002684 <HAL_GPIO_ReadPin>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d126      	bne.n	800084e <move+0x21a>
 8000800:	2120      	movs	r1, #32
 8000802:	4838      	ldr	r0, [pc, #224]	; (80008e4 <move+0x2b0>)
 8000804:	f001 ff3e 	bl	8002684 <HAL_GPIO_ReadPin>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d11f      	bne.n	800084e <move+0x21a>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,24);
 800080e:	4b32      	ldr	r3, [pc, #200]	; (80008d8 <move+0x2a4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2218      	movs	r2, #24
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 8000816:	4b30      	ldr	r3, [pc, #192]	; (80008d8 <move+0x2a4>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2200      	movs	r2, #0
 800081c:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 800081e:	4b2e      	ldr	r3, [pc, #184]	; (80008d8 <move+0x2a4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2200      	movs	r2, #0
 8000824:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,21);
 8000826:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <move+0x2a4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2215      	movs	r2, #21
 800082c:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,18);
 800082e:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <move+0x2a8>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2212      	movs	r2, #18
 8000834:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000836:	4b29      	ldr	r3, [pc, #164]	; (80008dc <move+0x2a8>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2200      	movs	r2, #0
 800083c:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 800083e:	4b27      	ldr	r3, [pc, #156]	; (80008dc <move+0x2a8>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2200      	movs	r2, #0
 8000844:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,19);
 8000846:	4b25      	ldr	r3, [pc, #148]	; (80008dc <move+0x2a8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2213      	movs	r2, #19
 800084c:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1)
 800084e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000852:	4823      	ldr	r0, [pc, #140]	; (80008e0 <move+0x2ac>)
 8000854:	f001 ff16 	bl	8002684 <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b01      	cmp	r3, #1
 800085c:	d126      	bne.n	80008ac <move+0x278>
 800085e:	2120      	movs	r1, #32
 8000860:	4820      	ldr	r0, [pc, #128]	; (80008e4 <move+0x2b0>)
 8000862:	f001 ff0f 	bl	8002684 <HAL_GPIO_ReadPin>
 8000866:	4603      	mov	r3, r0
 8000868:	2b01      	cmp	r3, #1
 800086a:	d11f      	bne.n	80008ac <move+0x278>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,19);
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <move+0x2a4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2213      	movs	r2, #19
 8000872:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <move+0x2a4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <move+0x2a4>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2200      	movs	r2, #0
 8000882:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,20);
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <move+0x2a4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2214      	movs	r2, #20
 800088a:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <move+0x2a8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2210      	movs	r2, #16
 8000892:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <move+0x2a8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2200      	movs	r2, #0
 800089a:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <move+0x2a8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2200      	movs	r2, #0
 80008a2:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,19);
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <move+0x2a8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2213      	movs	r2, #19
 80008aa:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 80008ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b0:	480b      	ldr	r0, [pc, #44]	; (80008e0 <move+0x2ac>)
 80008b2:	f001 fee7 	bl	8002684 <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d131      	bne.n	8000920 <move+0x2ec>
 80008bc:	2120      	movs	r1, #32
 80008be:	4809      	ldr	r0, [pc, #36]	; (80008e4 <move+0x2b0>)
 80008c0:	f001 fee0 	bl	8002684 <HAL_GPIO_ReadPin>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d12a      	bne.n	8000920 <move+0x2ec>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 80008ca:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <move+0x2a4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2264      	movs	r2, #100	; 0x64
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
 80008d2:	e009      	b.n	80008e8 <move+0x2b4>
 80008d4:	58020400 	.word	0x58020400
 80008d8:	24000228 	.word	0x24000228
 80008dc:	240000b0 	.word	0x240000b0
 80008e0:	58020800 	.word	0x58020800
 80008e4:	58021000 	.word	0x58021000
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 80008e8:	4b97      	ldr	r3, [pc, #604]	; (8000b48 <move+0x514>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2264      	movs	r2, #100	; 0x64
 80008ee:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 80008f0:	4b95      	ldr	r3, [pc, #596]	; (8000b48 <move+0x514>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2264      	movs	r2, #100	; 0x64
 80008f6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 80008f8:	4b93      	ldr	r3, [pc, #588]	; (8000b48 <move+0x514>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2264      	movs	r2, #100	; 0x64
 80008fe:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 8000900:	4b92      	ldr	r3, [pc, #584]	; (8000b4c <move+0x518>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2264      	movs	r2, #100	; 0x64
 8000906:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 8000908:	4b90      	ldr	r3, [pc, #576]	; (8000b4c <move+0x518>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2264      	movs	r2, #100	; 0x64
 800090e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 8000910:	4b8e      	ldr	r3, [pc, #568]	; (8000b4c <move+0x518>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2264      	movs	r2, #100	; 0x64
 8000916:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 8000918:	4b8c      	ldr	r3, [pc, #560]	; (8000b4c <move+0x518>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2264      	movs	r2, #100	; 0x64
 800091e:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	if(n==3)//旋转
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b03      	cmp	r3, #3
 8000924:	d11f      	bne.n	8000966 <move+0x332>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8000926:	4b88      	ldr	r3, [pc, #544]	; (8000b48 <move+0x514>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2200      	movs	r2, #0
 800092c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,21);//23
 800092e:	4b86      	ldr	r3, [pc, #536]	; (8000b48 <move+0x514>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2215      	movs	r2, #21
 8000934:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,24);//22
 8000936:	4b84      	ldr	r3, [pc, #528]	; (8000b48 <move+0x514>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2218      	movs	r2, #24
 800093c:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,0);
 800093e:	4b82      	ldr	r3, [pc, #520]	; (8000b48 <move+0x514>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2200      	movs	r2, #0
 8000944:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,23);//22
 8000946:	4b81      	ldr	r3, [pc, #516]	; (8000b4c <move+0x518>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2217      	movs	r2, #23
 800094c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 800094e:	4b7f      	ldr	r3, [pc, #508]	; (8000b4c <move+0x518>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2200      	movs	r2, #0
 8000954:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 8000956:	4b7d      	ldr	r3, [pc, #500]	; (8000b4c <move+0x518>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2200      	movs	r2, #0
 800095c:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,21);//23
 800095e:	4b7b      	ldr	r3, [pc, #492]	; (8000b4c <move+0x518>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2215      	movs	r2, #21
 8000964:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==4)//刹车
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b04      	cmp	r3, #4
 800096a:	d11f      	bne.n	80009ac <move+0x378>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 800096c:	4b76      	ldr	r3, [pc, #472]	; (8000b48 <move+0x514>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2264      	movs	r2, #100	; 0x64
 8000972:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 8000974:	4b74      	ldr	r3, [pc, #464]	; (8000b48 <move+0x514>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2264      	movs	r2, #100	; 0x64
 800097a:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,100);
 800097c:	4b72      	ldr	r3, [pc, #456]	; (8000b48 <move+0x514>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2264      	movs	r2, #100	; 0x64
 8000982:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,100);
 8000984:	4b70      	ldr	r3, [pc, #448]	; (8000b48 <move+0x514>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2264      	movs	r2, #100	; 0x64
 800098a:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,100);
 800098c:	4b6f      	ldr	r3, [pc, #444]	; (8000b4c <move+0x518>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2264      	movs	r2, #100	; 0x64
 8000992:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,100);
 8000994:	4b6d      	ldr	r3, [pc, #436]	; (8000b4c <move+0x518>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2264      	movs	r2, #100	; 0x64
 800099a:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,100);
 800099c:	4b6b      	ldr	r3, [pc, #428]	; (8000b4c <move+0x518>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2264      	movs	r2, #100	; 0x64
 80009a2:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,100);
 80009a4:	4b69      	ldr	r3, [pc, #420]	; (8000b4c <move+0x518>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2264      	movs	r2, #100	; 0x64
 80009aa:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==5)//倒车入库
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b05      	cmp	r3, #5
 80009b0:	d11f      	bne.n	80009f2 <move+0x3be>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 80009b2:	4b65      	ldr	r3, [pc, #404]	; (8000b48 <move+0x514>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2264      	movs	r2, #100	; 0x64
 80009b8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 80009ba:	4b63      	ldr	r3, [pc, #396]	; (8000b48 <move+0x514>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2264      	movs	r2, #100	; 0x64
 80009c0:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,35);
 80009c2:	4b61      	ldr	r3, [pc, #388]	; (8000b48 <move+0x514>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2223      	movs	r2, #35	; 0x23
 80009c8:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80009ca:	4b5f      	ldr	r3, [pc, #380]	; (8000b48 <move+0x514>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,100);
 80009d2:	4b5e      	ldr	r3, [pc, #376]	; (8000b4c <move+0x518>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2264      	movs	r2, #100	; 0x64
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,100);
 80009da:	4b5c      	ldr	r3, [pc, #368]	; (8000b4c <move+0x518>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2264      	movs	r2, #100	; 0x64
 80009e0:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,33);
 80009e2:	4b5a      	ldr	r3, [pc, #360]	; (8000b4c <move+0x518>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2221      	movs	r2, #33	; 0x21
 80009e8:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 80009ea:	4b58      	ldr	r3, [pc, #352]	; (8000b4c <move+0x518>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2200      	movs	r2, #0
 80009f0:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==6)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b06      	cmp	r3, #6
 80009f6:	f040 80a3 	bne.w	8000b40 <move+0x50c>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 80009fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009fe:	4854      	ldr	r0, [pc, #336]	; (8000b50 <move+0x51c>)
 8000a00:	f001 fe40 	bl	8002684 <HAL_GPIO_ReadPin>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d127      	bne.n	8000a5a <move+0x426>
 8000a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a0e:	4850      	ldr	r0, [pc, #320]	; (8000b50 <move+0x51c>)
 8000a10:	f001 fe38 	bl	8002684 <HAL_GPIO_ReadPin>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d11f      	bne.n	8000a5a <move+0x426>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,15);
 8000a1a:	4b4b      	ldr	r3, [pc, #300]	; (8000b48 <move+0x514>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	220f      	movs	r2, #15
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000a22:	4b49      	ldr	r3, [pc, #292]	; (8000b48 <move+0x514>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2200      	movs	r2, #0
 8000a28:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,15);
 8000a2a:	4b47      	ldr	r3, [pc, #284]	; (8000b48 <move+0x514>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	220f      	movs	r2, #15
 8000a30:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000a32:	4b45      	ldr	r3, [pc, #276]	; (8000b48 <move+0x514>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2200      	movs	r2, #0
 8000a38:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,7);
 8000a3a:	4b44      	ldr	r3, [pc, #272]	; (8000b4c <move+0x518>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2207      	movs	r2, #7
 8000a40:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000a42:	4b42      	ldr	r3, [pc, #264]	; (8000b4c <move+0x518>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2200      	movs	r2, #0
 8000a48:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,32);
 8000a4a:	4b40      	ldr	r3, [pc, #256]	; (8000b4c <move+0x518>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2220      	movs	r2, #32
 8000a50:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000a52:	4b3e      	ldr	r3, [pc, #248]	; (8000b4c <move+0x518>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2200      	movs	r2, #0
 8000a58:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000a5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a5e:	483c      	ldr	r0, [pc, #240]	; (8000b50 <move+0x51c>)
 8000a60:	f001 fe10 	bl	8002684 <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d127      	bne.n	8000aba <move+0x486>
 8000a6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6e:	4838      	ldr	r0, [pc, #224]	; (8000b50 <move+0x51c>)
 8000a70:	f001 fe08 	bl	8002684 <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d11f      	bne.n	8000aba <move+0x486>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,15);
 8000a7a:	4b33      	ldr	r3, [pc, #204]	; (8000b48 <move+0x514>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	220f      	movs	r2, #15
 8000a80:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000a82:	4b31      	ldr	r3, [pc, #196]	; (8000b48 <move+0x514>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2200      	movs	r2, #0
 8000a88:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,15);
 8000a8a:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <move+0x514>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	220f      	movs	r2, #15
 8000a90:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000a92:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <move+0x514>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2200      	movs	r2, #0
 8000a98:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,32);
 8000a9a:	4b2c      	ldr	r3, [pc, #176]	; (8000b4c <move+0x518>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <move+0x518>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,7);
 8000aaa:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <move+0x518>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2207      	movs	r2, #7
 8000ab0:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000ab2:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <move+0x518>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000aba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000abe:	4824      	ldr	r0, [pc, #144]	; (8000b50 <move+0x51c>)
 8000ac0:	f001 fde0 	bl	8002684 <HAL_GPIO_ReadPin>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d127      	bne.n	8000b1a <move+0x4e6>
 8000aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ace:	4820      	ldr	r0, [pc, #128]	; (8000b50 <move+0x51c>)
 8000ad0:	f001 fdd8 	bl	8002684 <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d11f      	bne.n	8000b1a <move+0x4e6>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,15);
 8000ada:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <move+0x514>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	220f      	movs	r2, #15
 8000ae0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <move+0x514>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,15);
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <move+0x514>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	220f      	movs	r2, #15
 8000af0:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <move+0x514>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2200      	movs	r2, #0
 8000af8:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,7);
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <move+0x518>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2207      	movs	r2, #7
 8000b00:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <move+0x518>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2200      	movs	r2, #0
 8000b08:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,7);
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <move+0x518>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2207      	movs	r2, #7
 8000b10:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <move+0x518>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2200      	movs	r2, #0
 8000b18:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000b1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b1e:	480c      	ldr	r0, [pc, #48]	; (8000b50 <move+0x51c>)
 8000b20:	f001 fdb0 	bl	8002684 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d10a      	bne.n	8000b40 <move+0x50c>
 8000b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2e:	4808      	ldr	r0, [pc, #32]	; (8000b50 <move+0x51c>)
 8000b30:	f001 fda8 	bl	8002684 <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <move+0x50c>
		{
			adjust(1);
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f7ff fd48 	bl	80005d0 <adjust>
		}
	}
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	24000228 	.word	0x24000228
 8000b4c:	240000b0 	.word	0x240000b0
 8000b50:	58020400 	.word	0x58020400

08000b54 <shuxian>:

void shuxian()
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	if(step==1)//直走
 8000b58:	4b87      	ldr	r3, [pc, #540]	; (8000d78 <shuxian+0x224>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d11c      	bne.n	8000b9a <shuxian+0x46>
	{
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000b60:	2120      	movs	r1, #32
 8000b62:	4886      	ldr	r0, [pc, #536]	; (8000d7c <shuxian+0x228>)
 8000b64:	f001 fd8e 	bl	8002684 <HAL_GPIO_ReadPin>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d102      	bne.n	8000b74 <shuxian+0x20>
		{
			Xflag=1;
 8000b6e:	4b84      	ldr	r3, [pc, #528]	; (8000d80 <shuxian+0x22c>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Xflag==1)
 8000b74:	2120      	movs	r1, #32
 8000b76:	4881      	ldr	r0, [pc, #516]	; (8000d7c <shuxian+0x228>)
 8000b78:	f001 fd84 	bl	8002684 <HAL_GPIO_ReadPin>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d10b      	bne.n	8000b9a <shuxian+0x46>
 8000b82:	4b7f      	ldr	r3, [pc, #508]	; (8000d80 <shuxian+0x22c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d107      	bne.n	8000b9a <shuxian+0x46>
		{
			X+=1;
 8000b8a:	4b7e      	ldr	r3, [pc, #504]	; (8000d84 <shuxian+0x230>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	4a7c      	ldr	r2, [pc, #496]	; (8000d84 <shuxian+0x230>)
 8000b92:	6013      	str	r3, [r2, #0]
			Xflag=0;
 8000b94:	4b7a      	ldr	r3, [pc, #488]	; (8000d80 <shuxian+0x22c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==2||step==4||step==6||step==12||step==14)//旋转
 8000b9a:	4b77      	ldr	r3, [pc, #476]	; (8000d78 <shuxian+0x224>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d00f      	beq.n	8000bc2 <shuxian+0x6e>
 8000ba2:	4b75      	ldr	r3, [pc, #468]	; (8000d78 <shuxian+0x224>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	d00b      	beq.n	8000bc2 <shuxian+0x6e>
 8000baa:	4b73      	ldr	r3, [pc, #460]	; (8000d78 <shuxian+0x224>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d007      	beq.n	8000bc2 <shuxian+0x6e>
 8000bb2:	4b71      	ldr	r3, [pc, #452]	; (8000d78 <shuxian+0x224>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b0c      	cmp	r3, #12
 8000bb8:	d003      	beq.n	8000bc2 <shuxian+0x6e>
 8000bba:	4b6f      	ldr	r3, [pc, #444]	; (8000d78 <shuxian+0x224>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b0e      	cmp	r3, #14
 8000bc0:	d12e      	bne.n	8000c20 <shuxian+0xcc>
	{
		if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1)&&turnflag==1)
 8000bc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc6:	4870      	ldr	r0, [pc, #448]	; (8000d88 <shuxian+0x234>)
 8000bc8:	f001 fd5c 	bl	8002684 <HAL_GPIO_ReadPin>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d113      	bne.n	8000bfa <shuxian+0xa6>
 8000bd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bd6:	486c      	ldr	r0, [pc, #432]	; (8000d88 <shuxian+0x234>)
 8000bd8:	f001 fd54 	bl	8002684 <HAL_GPIO_ReadPin>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d10b      	bne.n	8000bfa <shuxian+0xa6>
 8000be2:	4b6a      	ldr	r3, [pc, #424]	; (8000d8c <shuxian+0x238>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d107      	bne.n	8000bfa <shuxian+0xa6>
		{
			turn+=1;
 8000bea:	4b69      	ldr	r3, [pc, #420]	; (8000d90 <shuxian+0x23c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	4a67      	ldr	r2, [pc, #412]	; (8000d90 <shuxian+0x23c>)
 8000bf2:	6013      	str	r3, [r2, #0]
			turnflag=0;
 8000bf4:	4b65      	ldr	r3, [pc, #404]	; (8000d8c <shuxian+0x238>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0||HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0)
 8000bfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bfe:	4862      	ldr	r0, [pc, #392]	; (8000d88 <shuxian+0x234>)
 8000c00:	f001 fd40 	bl	8002684 <HAL_GPIO_ReadPin>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d007      	beq.n	8000c1a <shuxian+0xc6>
 8000c0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c0e:	485e      	ldr	r0, [pc, #376]	; (8000d88 <shuxian+0x234>)
 8000c10:	f001 fd38 	bl	8002684 <HAL_GPIO_ReadPin>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d102      	bne.n	8000c20 <shuxian+0xcc>
		{
			turnflag=1;
 8000c1a:	4b5c      	ldr	r3, [pc, #368]	; (8000d8c <shuxian+0x238>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==3||step==11||step==-1)//直走
 8000c20:	4b55      	ldr	r3, [pc, #340]	; (8000d78 <shuxian+0x224>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	d008      	beq.n	8000c3a <shuxian+0xe6>
 8000c28:	4b53      	ldr	r3, [pc, #332]	; (8000d78 <shuxian+0x224>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b0b      	cmp	r3, #11
 8000c2e:	d004      	beq.n	8000c3a <shuxian+0xe6>
 8000c30:	4b51      	ldr	r3, [pc, #324]	; (8000d78 <shuxian+0x224>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c38:	d122      	bne.n	8000c80 <shuxian+0x12c>
	{
		turn=0;
 8000c3a:	4b55      	ldr	r3, [pc, #340]	; (8000d90 <shuxian+0x23c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000c40:	4b52      	ldr	r3, [pc, #328]	; (8000d8c <shuxian+0x238>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Yflag==1)
 8000c46:	2120      	movs	r1, #32
 8000c48:	484c      	ldr	r0, [pc, #304]	; (8000d7c <shuxian+0x228>)
 8000c4a:	f001 fd1b 	bl	8002684 <HAL_GPIO_ReadPin>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d10b      	bne.n	8000c6c <shuxian+0x118>
 8000c54:	4b4f      	ldr	r3, [pc, #316]	; (8000d94 <shuxian+0x240>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d107      	bne.n	8000c6c <shuxian+0x118>
		{
			Y+=1;
 8000c5c:	4b4e      	ldr	r3, [pc, #312]	; (8000d98 <shuxian+0x244>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	4a4d      	ldr	r2, [pc, #308]	; (8000d98 <shuxian+0x244>)
 8000c64:	6013      	str	r3, [r2, #0]
			Yflag=0;
 8000c66:	4b4b      	ldr	r3, [pc, #300]	; (8000d94 <shuxian+0x240>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000c6c:	2120      	movs	r1, #32
 8000c6e:	4843      	ldr	r0, [pc, #268]	; (8000d7c <shuxian+0x228>)
 8000c70:	f001 fd08 	bl	8002684 <HAL_GPIO_ReadPin>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d102      	bne.n	8000c80 <shuxian+0x12c>
		{
			Yflag=1;
 8000c7a:	4b46      	ldr	r3, [pc, #280]	; (8000d94 <shuxian+0x240>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==5||step==13)//�?????回一�?????
 8000c80:	4b3d      	ldr	r3, [pc, #244]	; (8000d78 <shuxian+0x224>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b05      	cmp	r3, #5
 8000c86:	d003      	beq.n	8000c90 <shuxian+0x13c>
 8000c88:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <shuxian+0x224>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b0d      	cmp	r3, #13
 8000c8e:	d122      	bne.n	8000cd6 <shuxian+0x182>
	{
		turn=0;
 8000c90:	4b3f      	ldr	r3, [pc, #252]	; (8000d90 <shuxian+0x23c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000c96:	4b3d      	ldr	r3, [pc, #244]	; (8000d8c <shuxian+0x238>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Xflag==1)
 8000c9c:	2120      	movs	r1, #32
 8000c9e:	4837      	ldr	r0, [pc, #220]	; (8000d7c <shuxian+0x228>)
 8000ca0:	f001 fcf0 	bl	8002684 <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d10b      	bne.n	8000cc2 <shuxian+0x16e>
 8000caa:	4b35      	ldr	r3, [pc, #212]	; (8000d80 <shuxian+0x22c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d107      	bne.n	8000cc2 <shuxian+0x16e>
		{
			X-=1;
 8000cb2:	4b34      	ldr	r3, [pc, #208]	; (8000d84 <shuxian+0x230>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	4a32      	ldr	r2, [pc, #200]	; (8000d84 <shuxian+0x230>)
 8000cba:	6013      	str	r3, [r2, #0]
			Xflag=0;
 8000cbc:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <shuxian+0x22c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000cc2:	2120      	movs	r1, #32
 8000cc4:	482d      	ldr	r0, [pc, #180]	; (8000d7c <shuxian+0x228>)
 8000cc6:	f001 fcdd 	bl	8002684 <HAL_GPIO_ReadPin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d102      	bne.n	8000cd6 <shuxian+0x182>
		{
			Xflag=1;
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <shuxian+0x22c>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==7||step==15)//�?????回一�?????
 8000cd6:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <shuxian+0x224>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b07      	cmp	r3, #7
 8000cdc:	d003      	beq.n	8000ce6 <shuxian+0x192>
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <shuxian+0x224>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b0f      	cmp	r3, #15
 8000ce4:	d122      	bne.n	8000d2c <shuxian+0x1d8>
	{
		turn=0;
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <shuxian+0x23c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000cec:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <shuxian+0x238>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Yflag==1)
 8000cf2:	2120      	movs	r1, #32
 8000cf4:	4821      	ldr	r0, [pc, #132]	; (8000d7c <shuxian+0x228>)
 8000cf6:	f001 fcc5 	bl	8002684 <HAL_GPIO_ReadPin>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d10b      	bne.n	8000d18 <shuxian+0x1c4>
 8000d00:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <shuxian+0x240>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d107      	bne.n	8000d18 <shuxian+0x1c4>
		{
			Y-=1;
 8000d08:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <shuxian+0x244>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	4a22      	ldr	r2, [pc, #136]	; (8000d98 <shuxian+0x244>)
 8000d10:	6013      	str	r3, [r2, #0]
			Yflag=0;
 8000d12:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <shuxian+0x240>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000d18:	2120      	movs	r1, #32
 8000d1a:	4818      	ldr	r0, [pc, #96]	; (8000d7c <shuxian+0x228>)
 8000d1c:	f001 fcb2 	bl	8002684 <HAL_GPIO_ReadPin>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d102      	bne.n	8000d2c <shuxian+0x1d8>
		{
			Yflag=1;
 8000d26:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <shuxian+0x240>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==8)
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <shuxian+0x224>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b08      	cmp	r3, #8
 8000d32:	d11e      	bne.n	8000d72 <shuxian+0x21e>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
 8000d34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d38:	4818      	ldr	r0, [pc, #96]	; (8000d9c <shuxian+0x248>)
 8000d3a:	f001 fca3 	bl	8002684 <HAL_GPIO_ReadPin>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <shuxian+0x1f6>
		{
			Zflag=1;
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <shuxian+0x24c>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&Zflag==1)
 8000d4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4e:	4813      	ldr	r0, [pc, #76]	; (8000d9c <shuxian+0x248>)
 8000d50:	f001 fc98 	bl	8002684 <HAL_GPIO_ReadPin>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d10b      	bne.n	8000d72 <shuxian+0x21e>
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <shuxian+0x24c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d107      	bne.n	8000d72 <shuxian+0x21e>
		{
			Z+=1;
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <shuxian+0x250>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <shuxian+0x250>)
 8000d6a:	6013      	str	r3, [r2, #0]
			Zflag=0;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <shuxian+0x24c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	24000094 	.word	0x24000094
 8000d7c:	58021000 	.word	0x58021000
 8000d80:	24000058 	.word	0x24000058
 8000d84:	24000098 	.word	0x24000098
 8000d88:	58020400 	.word	0x58020400
 8000d8c:	24000064 	.word	0x24000064
 8000d90:	240000a4 	.word	0x240000a4
 8000d94:	2400005c 	.word	0x2400005c
 8000d98:	2400009c 	.word	0x2400009c
 8000d9c:	58020800 	.word	0x58020800
 8000da0:	24000060 	.word	0x24000060
 8000da4:	240000a0 	.word	0x240000a0

08000da8 <buzhou>:


void buzhou()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	if(step==0)//等待语音
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <buzhou+0xb0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d171      	bne.n	8000e98 <buzhou+0xf0>
	{
		HAL_UART_Receive(&huart3,&color,1,HAL_MAX_DELAY);
 8000db4:	f04f 33ff 	mov.w	r3, #4294967295
 8000db8:	2201      	movs	r2, #1
 8000dba:	4928      	ldr	r1, [pc, #160]	; (8000e5c <buzhou+0xb4>)
 8000dbc:	4828      	ldr	r0, [pc, #160]	; (8000e60 <buzhou+0xb8>)
 8000dbe:	f005 f9c5 	bl	800614c <HAL_UART_Receive>
		if(color==1)
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <buzhou+0xb4>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d10a      	bne.n	8000de0 <buzhou+0x38>
		{
			HAL_UART_Transmit(&huart2,redGreen,sizeof(redGreen),1000);
 8000dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dce:	2208      	movs	r2, #8
 8000dd0:	4924      	ldr	r1, [pc, #144]	; (8000e64 <buzhou+0xbc>)
 8000dd2:	4825      	ldr	r0, [pc, #148]	; (8000e68 <buzhou+0xc0>)
 8000dd4:	f005 f924 	bl	8006020 <HAL_UART_Transmit>
			step=1;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <buzhou+0xb0>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	e05b      	b.n	8000e98 <buzhou+0xf0>
		}
		else if(color==2)
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <buzhou+0xb4>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d10a      	bne.n	8000dfe <buzhou+0x56>
		{
			HAL_UART_Transmit(&huart2,redBlue,sizeof(redBlue),1000);
 8000de8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dec:	2208      	movs	r2, #8
 8000dee:	491f      	ldr	r1, [pc, #124]	; (8000e6c <buzhou+0xc4>)
 8000df0:	481d      	ldr	r0, [pc, #116]	; (8000e68 <buzhou+0xc0>)
 8000df2:	f005 f915 	bl	8006020 <HAL_UART_Transmit>
			step=1;
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <buzhou+0xb0>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	e04c      	b.n	8000e98 <buzhou+0xf0>
		}
		else if(color==3)
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <buzhou+0xb4>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d10a      	bne.n	8000e1c <buzhou+0x74>
		{
			HAL_UART_Transmit(&huart2,greenBlue,sizeof(greenBlue),1000);
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	4918      	ldr	r1, [pc, #96]	; (8000e70 <buzhou+0xc8>)
 8000e0e:	4816      	ldr	r0, [pc, #88]	; (8000e68 <buzhou+0xc0>)
 8000e10:	f005 f906 	bl	8006020 <HAL_UART_Transmit>
			step=1;
 8000e14:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <buzhou+0xb0>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e03d      	b.n	8000e98 <buzhou+0xf0>
		}
		else if(color==4)
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <buzhou+0xb4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d10a      	bne.n	8000e3a <buzhou+0x92>
		{
			HAL_UART_Transmit(&huart2,greenRed,sizeof(greenRed),1000);
 8000e24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e28:	2208      	movs	r2, #8
 8000e2a:	4912      	ldr	r1, [pc, #72]	; (8000e74 <buzhou+0xcc>)
 8000e2c:	480e      	ldr	r0, [pc, #56]	; (8000e68 <buzhou+0xc0>)
 8000e2e:	f005 f8f7 	bl	8006020 <HAL_UART_Transmit>
			step=1;
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <buzhou+0xb0>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	e02e      	b.n	8000e98 <buzhou+0xf0>
		}
		else if(color==5)
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <buzhou+0xb4>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b05      	cmp	r3, #5
 8000e40:	d11c      	bne.n	8000e7c <buzhou+0xd4>
		{
			HAL_UART_Transmit(&huart2,blueRed,sizeof(blueRed),1000);
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	2208      	movs	r2, #8
 8000e48:	490b      	ldr	r1, [pc, #44]	; (8000e78 <buzhou+0xd0>)
 8000e4a:	4807      	ldr	r0, [pc, #28]	; (8000e68 <buzhou+0xc0>)
 8000e4c:	f005 f8e8 	bl	8006020 <HAL_UART_Transmit>
			step=1;
 8000e50:	4b01      	ldr	r3, [pc, #4]	; (8000e58 <buzhou+0xb0>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e01f      	b.n	8000e98 <buzhou+0xf0>
 8000e58:	24000094 	.word	0x24000094
 8000e5c:	240000ac 	.word	0x240000ac
 8000e60:	240000fc 	.word	0x240000fc
 8000e64:	24000000 	.word	0x24000000
 8000e68:	24000274 	.word	0x24000274
 8000e6c:	24000010 	.word	0x24000010
 8000e70:	24000028 	.word	0x24000028
 8000e74:	24000008 	.word	0x24000008
 8000e78:	24000018 	.word	0x24000018
		}
		else if(color==6)
 8000e7c:	4bb5      	ldr	r3, [pc, #724]	; (8001154 <buzhou+0x3ac>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b06      	cmp	r3, #6
 8000e82:	d109      	bne.n	8000e98 <buzhou+0xf0>
		{
			HAL_UART_Transmit(&huart2,blueGreen,sizeof(blueGreen),1000);
 8000e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e88:	2208      	movs	r2, #8
 8000e8a:	49b3      	ldr	r1, [pc, #716]	; (8001158 <buzhou+0x3b0>)
 8000e8c:	48b3      	ldr	r0, [pc, #716]	; (800115c <buzhou+0x3b4>)
 8000e8e:	f005 f8c7 	bl	8006020 <HAL_UART_Transmit>
			step=1;
 8000e92:	4bb3      	ldr	r3, [pc, #716]	; (8001160 <buzhou+0x3b8>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
		}

//		step=1;
	}
	if(step==1)//move straight
 8000e98:	4bb1      	ldr	r3, [pc, #708]	; (8001160 <buzhou+0x3b8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d11a      	bne.n	8000ed6 <buzhou+0x12e>
	{
		move(6);
 8000ea0:	2006      	movs	r0, #6
 8000ea2:	f7ff fbc7 	bl	8000634 <move>
		shuxian();
 8000ea6:	f7ff fe55 	bl	8000b54 <shuxian>
		if(X==2&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000eaa:	4bae      	ldr	r3, [pc, #696]	; (8001164 <buzhou+0x3bc>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d111      	bne.n	8000ed6 <buzhou+0x12e>
 8000eb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb6:	48ac      	ldr	r0, [pc, #688]	; (8001168 <buzhou+0x3c0>)
 8000eb8:	f001 fbe4 	bl	8002684 <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d109      	bne.n	8000ed6 <buzhou+0x12e>
		{
			move(4);
 8000ec2:	2004      	movs	r0, #4
 8000ec4:	f7ff fbb6 	bl	8000634 <move>
			HAL_Delay(500);
 8000ec8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ecc:	f001 f916 	bl	80020fc <HAL_Delay>
			step=2;
 8000ed0:	4ba3      	ldr	r3, [pc, #652]	; (8001160 <buzhou+0x3b8>)
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==2)//turn right
 8000ed6:	4ba2      	ldr	r3, [pc, #648]	; (8001160 <buzhou+0x3b8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d10e      	bne.n	8000efc <buzhou+0x154>
	{
		move(3);
 8000ede:	2003      	movs	r0, #3
 8000ee0:	f7ff fba8 	bl	8000634 <move>
		shuxian();
 8000ee4:	f7ff fe36 	bl	8000b54 <shuxian>
		if(turn==2)
 8000ee8:	4ba0      	ldr	r3, [pc, #640]	; (800116c <buzhou+0x3c4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d105      	bne.n	8000efc <buzhou+0x154>
		{
			move(4);
 8000ef0:	2004      	movs	r0, #4
 8000ef2:	f7ff fb9f 	bl	8000634 <move>
//			step=-1;
			step=3;//直接停到白色区域
 8000ef6:	4b9a      	ldr	r3, [pc, #616]	; (8001160 <buzhou+0x3b8>)
 8000ef8:	2203      	movs	r2, #3
 8000efa:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-1)//move straight
 8000efc:	4b98      	ldr	r3, [pc, #608]	; (8001160 <buzhou+0x3b8>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d117      	bne.n	8000f36 <buzhou+0x18e>
	{
		move(6);
 8000f06:	2006      	movs	r0, #6
 8000f08:	f7ff fb94 	bl	8000634 <move>
		shuxian();
 8000f0c:	f7ff fe22 	bl	8000b54 <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000f10:	4b97      	ldr	r3, [pc, #604]	; (8001170 <buzhou+0x3c8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d10e      	bne.n	8000f36 <buzhou+0x18e>
 8000f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1c:	4892      	ldr	r0, [pc, #584]	; (8001168 <buzhou+0x3c0>)
 8000f1e:	f001 fbb1 	bl	8002684 <HAL_GPIO_ReadPin>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d106      	bne.n	8000f36 <buzhou+0x18e>
		{
			move(4);
 8000f28:	2004      	movs	r0, #4
 8000f2a:	f7ff fb83 	bl	8000634 <move>
			step=-2;
 8000f2e:	4b8c      	ldr	r3, [pc, #560]	; (8001160 <buzhou+0x3b8>)
 8000f30:	f06f 0201 	mvn.w	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-2)//wait for car1 and activate arm
 8000f36:	4b8a      	ldr	r3, [pc, #552]	; (8001160 <buzhou+0x3b8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f113 0f02 	cmn.w	r3, #2
 8000f3e:	d11e      	bne.n	8000f7e <buzhou+0x1d6>
	{
		if(arm==0)
 8000f40:	4b8c      	ldr	r3, [pc, #560]	; (8001174 <buzhou+0x3cc>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d109      	bne.n	8000f5c <buzhou+0x1b4>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A0,sizeof(A0),0xffff);//机械臂初始化
 8000f48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f4c:	2205      	movs	r2, #5
 8000f4e:	498a      	ldr	r1, [pc, #552]	; (8001178 <buzhou+0x3d0>)
 8000f50:	488a      	ldr	r0, [pc, #552]	; (800117c <buzhou+0x3d4>)
 8000f52:	f005 f865 	bl	8006020 <HAL_UART_Transmit>
			arm=1;
 8000f56:	4b87      	ldr	r3, [pc, #540]	; (8001174 <buzhou+0x3cc>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]
		}
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK&&arm==1)
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f60:	2201      	movs	r2, #1
 8000f62:	4987      	ldr	r1, [pc, #540]	; (8001180 <buzhou+0x3d8>)
 8000f64:	4887      	ldr	r0, [pc, #540]	; (8001184 <buzhou+0x3dc>)
 8000f66:	f005 f8f1 	bl	800614c <HAL_UART_Receive>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d106      	bne.n	8000f7e <buzhou+0x1d6>
 8000f70:	4b80      	ldr	r3, [pc, #512]	; (8001174 <buzhou+0x3cc>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d102      	bne.n	8000f7e <buzhou+0x1d6>
		{
			step=3;
 8000f78:	4b79      	ldr	r3, [pc, #484]	; (8001160 <buzhou+0x3b8>)
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==3)//move straight
 8000f7e:	4b78      	ldr	r3, [pc, #480]	; (8001160 <buzhou+0x3b8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d122      	bne.n	8000fcc <buzhou+0x224>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)A0,sizeof(A0),0xffff);
 8000f86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f8a:	2205      	movs	r2, #5
 8000f8c:	497a      	ldr	r1, [pc, #488]	; (8001178 <buzhou+0x3d0>)
 8000f8e:	487b      	ldr	r0, [pc, #492]	; (800117c <buzhou+0x3d4>)
 8000f90:	f005 f846 	bl	8006020 <HAL_UART_Transmit>
		move(6);
 8000f94:	2006      	movs	r0, #6
 8000f96:	f7ff fb4d 	bl	8000634 <move>
		shuxian();
 8000f9a:	f7ff fddb 	bl	8000b54 <shuxian>
		if(Y==2&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000f9e:	4b74      	ldr	r3, [pc, #464]	; (8001170 <buzhou+0x3c8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d112      	bne.n	8000fcc <buzhou+0x224>
 8000fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000faa:	486f      	ldr	r0, [pc, #444]	; (8001168 <buzhou+0x3c0>)
 8000fac:	f001 fb6a 	bl	8002684 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d10a      	bne.n	8000fcc <buzhou+0x224>
		{
			move(4);
 8000fb6:	2004      	movs	r0, #4
 8000fb8:	f7ff fb3c 	bl	8000634 <move>
			HAL_Delay(1000);
 8000fbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc0:	f001 f89c 	bl	80020fc <HAL_Delay>
//			step=11;
//			step=4;
			step=-4;
 8000fc4:	4b66      	ldr	r3, [pc, #408]	; (8001160 <buzhou+0x3b8>)
 8000fc6:	f06f 0203 	mvn.w	r2, #3
 8000fca:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-4)//wait for car1 to catch
 8000fcc:	4b64      	ldr	r3, [pc, #400]	; (8001160 <buzhou+0x3b8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f113 0f04 	cmn.w	r3, #4
 8000fd4:	d114      	bne.n	8001000 <buzhou+0x258>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4968      	ldr	r1, [pc, #416]	; (8001180 <buzhou+0x3d8>)
 8000fde:	4869      	ldr	r0, [pc, #420]	; (8001184 <buzhou+0x3dc>)
 8000fe0:	f005 f8b4 	bl	800614c <HAL_UART_Receive>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10a      	bne.n	8001000 <buzhou+0x258>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A1,sizeof(A1),0xffff);
 8000fea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fee:	2205      	movs	r2, #5
 8000ff0:	4965      	ldr	r1, [pc, #404]	; (8001188 <buzhou+0x3e0>)
 8000ff2:	4862      	ldr	r0, [pc, #392]	; (800117c <buzhou+0x3d4>)
 8000ff4:	f005 f814 	bl	8006020 <HAL_UART_Transmit>
			step=-5;
 8000ff8:	4b59      	ldr	r3, [pc, #356]	; (8001160 <buzhou+0x3b8>)
 8000ffa:	f06f 0204 	mvn.w	r2, #4
 8000ffe:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-5)
 8001000:	4b57      	ldr	r3, [pc, #348]	; (8001160 <buzhou+0x3b8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f113 0f05 	cmn.w	r3, #5
 8001008:	d114      	bne.n	8001034 <buzhou+0x28c>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	2201      	movs	r2, #1
 8001010:	495b      	ldr	r1, [pc, #364]	; (8001180 <buzhou+0x3d8>)
 8001012:	485c      	ldr	r0, [pc, #368]	; (8001184 <buzhou+0x3dc>)
 8001014:	f005 f89a 	bl	800614c <HAL_UART_Receive>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10a      	bne.n	8001034 <buzhou+0x28c>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A2,sizeof(A2),0xffff);
 800101e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001022:	2205      	movs	r2, #5
 8001024:	4959      	ldr	r1, [pc, #356]	; (800118c <buzhou+0x3e4>)
 8001026:	4855      	ldr	r0, [pc, #340]	; (800117c <buzhou+0x3d4>)
 8001028:	f004 fffa 	bl	8006020 <HAL_UART_Transmit>
			step=-6;
 800102c:	4b4c      	ldr	r3, [pc, #304]	; (8001160 <buzhou+0x3b8>)
 800102e:	f06f 0205 	mvn.w	r2, #5
 8001032:	601a      	str	r2, [r3, #0]
//			HAL_Delay(26000);    //初赛这两行
//			step=4;
		}
	}
	if(step==-6)//wait for car1 to move
 8001034:	4b4a      	ldr	r3, [pc, #296]	; (8001160 <buzhou+0x3b8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f113 0f06 	cmn.w	r3, #6
 800103c:	d10c      	bne.n	8001058 <buzhou+0x2b0>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	2201      	movs	r2, #1
 8001044:	494e      	ldr	r1, [pc, #312]	; (8001180 <buzhou+0x3d8>)
 8001046:	484f      	ldr	r0, [pc, #316]	; (8001184 <buzhou+0x3dc>)
 8001048:	f005 f880 	bl	800614c <HAL_UART_Receive>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d102      	bne.n	8001058 <buzhou+0x2b0>
		{
			step=11;
 8001052:	4b43      	ldr	r3, [pc, #268]	; (8001160 <buzhou+0x3b8>)
 8001054:	220b      	movs	r2, #11
 8001056:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==4)//turn right
 8001058:	4b41      	ldr	r3, [pc, #260]	; (8001160 <buzhou+0x3b8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b04      	cmp	r3, #4
 800105e:	d10e      	bne.n	800107e <buzhou+0x2d6>
	{
		move(3);
 8001060:	2003      	movs	r0, #3
 8001062:	f7ff fae7 	bl	8000634 <move>
		shuxian();
 8001066:	f7ff fd75 	bl	8000b54 <shuxian>
		if(turn==2)
 800106a:	4b40      	ldr	r3, [pc, #256]	; (800116c <buzhou+0x3c4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d105      	bne.n	800107e <buzhou+0x2d6>
		{
			move(4);
 8001072:	2004      	movs	r0, #4
 8001074:	f7ff fade 	bl	8000634 <move>
			step=5;
 8001078:	4b39      	ldr	r3, [pc, #228]	; (8001160 <buzhou+0x3b8>)
 800107a:	2205      	movs	r2, #5
 800107c:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==5)//move straight
 800107e:	4b38      	ldr	r3, [pc, #224]	; (8001160 <buzhou+0x3b8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b05      	cmp	r3, #5
 8001084:	d116      	bne.n	80010b4 <buzhou+0x30c>
	{
		move(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff fad4 	bl	8000634 <move>
		shuxian();
 800108c:	f7ff fd62 	bl	8000b54 <shuxian>
		if(X==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8001090:	4b34      	ldr	r3, [pc, #208]	; (8001164 <buzhou+0x3bc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d10d      	bne.n	80010b4 <buzhou+0x30c>
 8001098:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109c:	4832      	ldr	r0, [pc, #200]	; (8001168 <buzhou+0x3c0>)
 800109e:	f001 faf1 	bl	8002684 <HAL_GPIO_ReadPin>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d105      	bne.n	80010b4 <buzhou+0x30c>
		{
			move(4);
 80010a8:	2004      	movs	r0, #4
 80010aa:	f7ff fac3 	bl	8000634 <move>
			step=6;
 80010ae:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <buzhou+0x3b8>)
 80010b0:	2206      	movs	r2, #6
 80010b2:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==6)//turn right
 80010b4:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <buzhou+0x3b8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b06      	cmp	r3, #6
 80010ba:	d10e      	bne.n	80010da <buzhou+0x332>
	{
		move(3);
 80010bc:	2003      	movs	r0, #3
 80010be:	f7ff fab9 	bl	8000634 <move>
		shuxian();
 80010c2:	f7ff fd47 	bl	8000b54 <shuxian>
		if(turn==2)
 80010c6:	4b29      	ldr	r3, [pc, #164]	; (800116c <buzhou+0x3c4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d105      	bne.n	80010da <buzhou+0x332>
		{
			move(4);
 80010ce:	2004      	movs	r0, #4
 80010d0:	f7ff fab0 	bl	8000634 <move>
			step=7;
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <buzhou+0x3b8>)
 80010d6:	2207      	movs	r2, #7
 80010d8:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==7)//move straight
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <buzhou+0x3b8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b07      	cmp	r3, #7
 80010e0:	d116      	bne.n	8001110 <buzhou+0x368>
	{
		move(1);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f7ff faa6 	bl	8000634 <move>
		shuxian();
 80010e8:	f7ff fd34 	bl	8000b54 <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 80010ec:	4b20      	ldr	r3, [pc, #128]	; (8001170 <buzhou+0x3c8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d10d      	bne.n	8001110 <buzhou+0x368>
 80010f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f8:	481b      	ldr	r0, [pc, #108]	; (8001168 <buzhou+0x3c0>)
 80010fa:	f001 fac3 	bl	8002684 <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b01      	cmp	r3, #1
 8001102:	d105      	bne.n	8001110 <buzhou+0x368>
		{
			move(4);
 8001104:	2004      	movs	r0, #4
 8001106:	f7ff fa95 	bl	8000634 <move>
			step=8;
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <buzhou+0x3b8>)
 800110c:	2208      	movs	r2, #8
 800110e:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==8)
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <buzhou+0x3b8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b08      	cmp	r3, #8
 8001116:	d10e      	bne.n	8001136 <buzhou+0x38e>
	{
		move(5);
 8001118:	2005      	movs	r0, #5
 800111a:	f7ff fa8b 	bl	8000634 <move>
		shuxian();
 800111e:	f7ff fd19 	bl	8000b54 <shuxian>
		if(Z==3)
 8001122:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <buzhou+0x3e8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b03      	cmp	r3, #3
 8001128:	d105      	bne.n	8001136 <buzhou+0x38e>
		{
			move(4);
 800112a:	2004      	movs	r0, #4
 800112c:	f7ff fa82 	bl	8000634 <move>
			step=9;
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <buzhou+0x3b8>)
 8001132:	2209      	movs	r2, #9
 8001134:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==11)//move straight
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <buzhou+0x3b8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b0b      	cmp	r3, #11
 800113c:	d13d      	bne.n	80011ba <buzhou+0x412>
	{
		move(6);
 800113e:	2006      	movs	r0, #6
 8001140:	f7ff fa78 	bl	8000634 <move>
		shuxian();
 8001144:	f7ff fd06 	bl	8000b54 <shuxian>
		if(Y==4&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <buzhou+0x3c8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b04      	cmp	r3, #4
 800114e:	d134      	bne.n	80011ba <buzhou+0x412>
 8001150:	e020      	b.n	8001194 <buzhou+0x3ec>
 8001152:	bf00      	nop
 8001154:	240000ac 	.word	0x240000ac
 8001158:	24000020 	.word	0x24000020
 800115c:	24000274 	.word	0x24000274
 8001160:	24000094 	.word	0x24000094
 8001164:	24000098 	.word	0x24000098
 8001168:	58020800 	.word	0x58020800
 800116c:	240000a4 	.word	0x240000a4
 8001170:	2400009c 	.word	0x2400009c
 8001174:	240000a8 	.word	0x240000a8
 8001178:	24000030 	.word	0x24000030
 800117c:	24000198 	.word	0x24000198
 8001180:	240000ad 	.word	0x240000ad
 8001184:	240000fc 	.word	0x240000fc
 8001188:	24000038 	.word	0x24000038
 800118c:	24000040 	.word	0x24000040
 8001190:	240000a0 	.word	0x240000a0
 8001194:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001198:	485d      	ldr	r0, [pc, #372]	; (8001310 <buzhou+0x568>)
 800119a:	f001 fa73 	bl	8002684 <HAL_GPIO_ReadPin>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d10a      	bne.n	80011ba <buzhou+0x412>
		{
			move(4);
 80011a4:	2004      	movs	r0, #4
 80011a6:	f7ff fa45 	bl	8000634 <move>
			HAL_Delay(1000);
 80011aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ae:	f000 ffa5 	bl	80020fc <HAL_Delay>
			step=-8;
 80011b2:	4b58      	ldr	r3, [pc, #352]	; (8001314 <buzhou+0x56c>)
 80011b4:	f06f 0207 	mvn.w	r2, #7
 80011b8:	601a      	str	r2, [r3, #0]
//			step=12;
		}
	}
	if(step==-8)//arm move
 80011ba:	4b56      	ldr	r3, [pc, #344]	; (8001314 <buzhou+0x56c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f113 0f08 	cmn.w	r3, #8
 80011c2:	d114      	bne.n	80011ee <buzhou+0x446>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	2201      	movs	r2, #1
 80011ca:	4953      	ldr	r1, [pc, #332]	; (8001318 <buzhou+0x570>)
 80011cc:	4853      	ldr	r0, [pc, #332]	; (800131c <buzhou+0x574>)
 80011ce:	f004 ffbd 	bl	800614c <HAL_UART_Receive>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d10a      	bne.n	80011ee <buzhou+0x446>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A6,sizeof(A6),0xffff);
 80011d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011dc:	2205      	movs	r2, #5
 80011de:	4950      	ldr	r1, [pc, #320]	; (8001320 <buzhou+0x578>)
 80011e0:	4850      	ldr	r0, [pc, #320]	; (8001324 <buzhou+0x57c>)
 80011e2:	f004 ff1d 	bl	8006020 <HAL_UART_Transmit>
			step=-9;
 80011e6:	4b4b      	ldr	r3, [pc, #300]	; (8001314 <buzhou+0x56c>)
 80011e8:	f06f 0208 	mvn.w	r2, #8
 80011ec:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-9)//arm move
 80011ee:	4b49      	ldr	r3, [pc, #292]	; (8001314 <buzhou+0x56c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f113 0f09 	cmn.w	r3, #9
 80011f6:	d117      	bne.n	8001228 <buzhou+0x480>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	2201      	movs	r2, #1
 80011fe:	4946      	ldr	r1, [pc, #280]	; (8001318 <buzhou+0x570>)
 8001200:	4846      	ldr	r0, [pc, #280]	; (800131c <buzhou+0x574>)
 8001202:	f004 ffa3 	bl	800614c <HAL_UART_Receive>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d10d      	bne.n	8001228 <buzhou+0x480>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A5,sizeof(A5),0xffff);
 800120c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001210:	2205      	movs	r2, #5
 8001212:	4945      	ldr	r1, [pc, #276]	; (8001328 <buzhou+0x580>)
 8001214:	4843      	ldr	r0, [pc, #268]	; (8001324 <buzhou+0x57c>)
 8001216:	f004 ff03 	bl	8006020 <HAL_UART_Transmit>
			HAL_Delay(35000);
 800121a:	f648 00b8 	movw	r0, #35000	; 0x88b8
 800121e:	f000 ff6d 	bl	80020fc <HAL_Delay>
			step=12;
 8001222:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <buzhou+0x56c>)
 8001224:	220c      	movs	r2, #12
 8001226:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-10)//wait for car1
 8001228:	4b3a      	ldr	r3, [pc, #232]	; (8001314 <buzhou+0x56c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f113 0f0a 	cmn.w	r3, #10
 8001230:	d10c      	bne.n	800124c <buzhou+0x4a4>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	2201      	movs	r2, #1
 8001238:	4937      	ldr	r1, [pc, #220]	; (8001318 <buzhou+0x570>)
 800123a:	4838      	ldr	r0, [pc, #224]	; (800131c <buzhou+0x574>)
 800123c:	f004 ff86 	bl	800614c <HAL_UART_Receive>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d102      	bne.n	800124c <buzhou+0x4a4>
		{
			step=12;
 8001246:	4b33      	ldr	r3, [pc, #204]	; (8001314 <buzhou+0x56c>)
 8001248:	220c      	movs	r2, #12
 800124a:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==12)
 800124c:	4b31      	ldr	r3, [pc, #196]	; (8001314 <buzhou+0x56c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b0c      	cmp	r3, #12
 8001252:	d10e      	bne.n	8001272 <buzhou+0x4ca>
	{
		move(3);
 8001254:	2003      	movs	r0, #3
 8001256:	f7ff f9ed 	bl	8000634 <move>
		shuxian();
 800125a:	f7ff fc7b 	bl	8000b54 <shuxian>
		if(turn==2)
 800125e:	4b33      	ldr	r3, [pc, #204]	; (800132c <buzhou+0x584>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d105      	bne.n	8001272 <buzhou+0x4ca>
		{
			move(4);
 8001266:	2004      	movs	r0, #4
 8001268:	f7ff f9e4 	bl	8000634 <move>
			step=13;
 800126c:	4b29      	ldr	r3, [pc, #164]	; (8001314 <buzhou+0x56c>)
 800126e:	220d      	movs	r2, #13
 8001270:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==13)
 8001272:	4b28      	ldr	r3, [pc, #160]	; (8001314 <buzhou+0x56c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b0d      	cmp	r3, #13
 8001278:	d11a      	bne.n	80012b0 <buzhou+0x508>
	{
		move(6);
 800127a:	2006      	movs	r0, #6
 800127c:	f7ff f9da 	bl	8000634 <move>
		shuxian();
 8001280:	f7ff fc68 	bl	8000b54 <shuxian>
		if(X==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8001284:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <buzhou+0x588>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d111      	bne.n	80012b0 <buzhou+0x508>
 800128c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001290:	481f      	ldr	r0, [pc, #124]	; (8001310 <buzhou+0x568>)
 8001292:	f001 f9f7 	bl	8002684 <HAL_GPIO_ReadPin>
 8001296:	4603      	mov	r3, r0
 8001298:	2b01      	cmp	r3, #1
 800129a:	d109      	bne.n	80012b0 <buzhou+0x508>
		{
			move(4);
 800129c:	2004      	movs	r0, #4
 800129e:	f7ff f9c9 	bl	8000634 <move>
			HAL_Delay(500);
 80012a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a6:	f000 ff29 	bl	80020fc <HAL_Delay>
			step=14;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <buzhou+0x56c>)
 80012ac:	220e      	movs	r2, #14
 80012ae:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==14)
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <buzhou+0x56c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b0e      	cmp	r3, #14
 80012b6:	d10e      	bne.n	80012d6 <buzhou+0x52e>
	{
		move(3);
 80012b8:	2003      	movs	r0, #3
 80012ba:	f7ff f9bb 	bl	8000634 <move>
		shuxian();
 80012be:	f7ff fc49 	bl	8000b54 <shuxian>
		if(turn==2)
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <buzhou+0x584>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d105      	bne.n	80012d6 <buzhou+0x52e>
		{
			move(4);
 80012ca:	2004      	movs	r0, #4
 80012cc:	f7ff f9b2 	bl	8000634 <move>
			step=15;
 80012d0:	4b10      	ldr	r3, [pc, #64]	; (8001314 <buzhou+0x56c>)
 80012d2:	220f      	movs	r2, #15
 80012d4:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==15)//move straight
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <buzhou+0x56c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b0f      	cmp	r3, #15
 80012dc:	d116      	bne.n	800130c <buzhou+0x564>
	{
		move(1);
 80012de:	2001      	movs	r0, #1
 80012e0:	f7ff f9a8 	bl	8000634 <move>
		shuxian();
 80012e4:	f7ff fc36 	bl	8000b54 <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <buzhou+0x58c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d10d      	bne.n	800130c <buzhou+0x564>
 80012f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f4:	4806      	ldr	r0, [pc, #24]	; (8001310 <buzhou+0x568>)
 80012f6:	f001 f9c5 	bl	8002684 <HAL_GPIO_ReadPin>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d105      	bne.n	800130c <buzhou+0x564>
		{
			move(4);
 8001300:	2004      	movs	r0, #4
 8001302:	f7ff f997 	bl	8000634 <move>
			step=8;
 8001306:	4b03      	ldr	r3, [pc, #12]	; (8001314 <buzhou+0x56c>)
 8001308:	2208      	movs	r2, #8
 800130a:	601a      	str	r2, [r3, #0]
		}
	}

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	58020800 	.word	0x58020800
 8001314:	24000094 	.word	0x24000094
 8001318:	240000ad 	.word	0x240000ad
 800131c:	240000fc 	.word	0x240000fc
 8001320:	24000050 	.word	0x24000050
 8001324:	24000198 	.word	0x24000198
 8001328:	24000048 	.word	0x24000048
 800132c:	240000a4 	.word	0x240000a4
 8001330:	24000098 	.word	0x24000098
 8001334:	2400009c 	.word	0x2400009c

08001338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133c:	f000 fe4c 	bl	8001fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001340:	f000 f834 	bl	80013ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001344:	f000 fb22 	bl	800198c <MX_GPIO_Init>
  MX_TIM8_Init();
 8001348:	f000 f96c 	bl	8001624 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800134c:	f000 fa3a 	bl	80017c4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001350:	f000 fa84 	bl	800185c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001354:	f000 f896 	bl	8001484 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001358:	f000 facc 	bl	80018f4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800135c:	2100      	movs	r1, #0
 800135e:	4811      	ldr	r0, [pc, #68]	; (80013a4 <main+0x6c>)
 8001360:	f003 fdb4 	bl	8004ecc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001364:	2104      	movs	r1, #4
 8001366:	480f      	ldr	r0, [pc, #60]	; (80013a4 <main+0x6c>)
 8001368:	f003 fdb0 	bl	8004ecc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 800136c:	2108      	movs	r1, #8
 800136e:	480d      	ldr	r0, [pc, #52]	; (80013a4 <main+0x6c>)
 8001370:	f003 fdac 	bl	8004ecc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8001374:	210c      	movs	r1, #12
 8001376:	480b      	ldr	r0, [pc, #44]	; (80013a4 <main+0x6c>)
 8001378:	f003 fda8 	bl	8004ecc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 800137c:	2100      	movs	r1, #0
 800137e:	480a      	ldr	r0, [pc, #40]	; (80013a8 <main+0x70>)
 8001380:	f003 fda4 	bl	8004ecc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8001384:	2104      	movs	r1, #4
 8001386:	4808      	ldr	r0, [pc, #32]	; (80013a8 <main+0x70>)
 8001388:	f003 fda0 	bl	8004ecc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 800138c:	2108      	movs	r1, #8
 800138e:	4806      	ldr	r0, [pc, #24]	; (80013a8 <main+0x70>)
 8001390:	f003 fd9c 	bl	8004ecc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);
 8001394:	210c      	movs	r1, #12
 8001396:	4804      	ldr	r0, [pc, #16]	; (80013a8 <main+0x70>)
 8001398:	f003 fd98 	bl	8004ecc <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  buzhou();
 800139c:	f7ff fd04 	bl	8000da8 <buzhou>
 80013a0:	e7fc      	b.n	800139c <main+0x64>
 80013a2:	bf00      	nop
 80013a4:	24000228 	.word	0x24000228
 80013a8:	240000b0 	.word	0x240000b0

080013ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b09c      	sub	sp, #112	; 0x70
 80013b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	224c      	movs	r2, #76	; 0x4c
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f005 ffd6 	bl	800736c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2220      	movs	r2, #32
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f005 ffd0 	bl	800736c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013cc:	2002      	movs	r0, #2
 80013ce:	f001 f971 	bl	80026b4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	4b29      	ldr	r3, [pc, #164]	; (800147c <SystemClock_Config+0xd0>)
 80013d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013da:	4a28      	ldr	r2, [pc, #160]	; (800147c <SystemClock_Config+0xd0>)
 80013dc:	f023 0301 	bic.w	r3, r3, #1
 80013e0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013e2:	4b26      	ldr	r3, [pc, #152]	; (800147c <SystemClock_Config+0xd0>)
 80013e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <SystemClock_Config+0xd4>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013f4:	4a22      	ldr	r2, [pc, #136]	; (8001480 <SystemClock_Config+0xd4>)
 80013f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <SystemClock_Config+0xd4>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001408:	bf00      	nop
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <SystemClock_Config+0xd4>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001416:	d1f8      	bne.n	800140a <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001418:	2302      	movs	r3, #2
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800141c:	2301      	movs	r3, #1
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001420:	2340      	movs	r3, #64	; 0x40
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001424:	2300      	movs	r3, #0
 8001426:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142c:	4618      	mov	r0, r3
 800142e:	f001 f97b 	bl	8002728 <HAL_RCC_OscConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001438:	f000 fb30 	bl	8001a9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143c:	233f      	movs	r3, #63	; 0x3f
 800143e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001450:	2340      	movs	r3, #64	; 0x40
 8001452:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001458:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2101      	movs	r1, #1
 8001462:	4618      	mov	r0, r3
 8001464:	f001 fd8c 	bl	8002f80 <HAL_RCC_ClockConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800146e:	f000 fb15 	bl	8001a9c <Error_Handler>
  }
}
 8001472:	bf00      	nop
 8001474:	3770      	adds	r7, #112	; 0x70
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	58000400 	.word	0x58000400
 8001480:	58024800 	.word	0x58024800

08001484 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b09a      	sub	sp, #104	; 0x68
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001498:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
 80014b4:	615a      	str	r2, [r3, #20]
 80014b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	222c      	movs	r2, #44	; 0x2c
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 ff54 	bl	800736c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014c4:	4b55      	ldr	r3, [pc, #340]	; (800161c <MX_TIM1_Init+0x198>)
 80014c6:	4a56      	ldr	r2, [pc, #344]	; (8001620 <MX_TIM1_Init+0x19c>)
 80014c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 80014ca:	4b54      	ldr	r3, [pc, #336]	; (800161c <MX_TIM1_Init+0x198>)
 80014cc:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80014d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b52      	ldr	r3, [pc, #328]	; (800161c <MX_TIM1_Init+0x198>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80014d8:	4b50      	ldr	r3, [pc, #320]	; (800161c <MX_TIM1_Init+0x198>)
 80014da:	2263      	movs	r2, #99	; 0x63
 80014dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014de:	4b4f      	ldr	r3, [pc, #316]	; (800161c <MX_TIM1_Init+0x198>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e4:	4b4d      	ldr	r3, [pc, #308]	; (800161c <MX_TIM1_Init+0x198>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b4c      	ldr	r3, [pc, #304]	; (800161c <MX_TIM1_Init+0x198>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014f0:	484a      	ldr	r0, [pc, #296]	; (800161c <MX_TIM1_Init+0x198>)
 80014f2:	f003 fc33 	bl	8004d5c <HAL_TIM_Base_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80014fc:	f000 face 	bl	8001a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001504:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001506:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800150a:	4619      	mov	r1, r3
 800150c:	4843      	ldr	r0, [pc, #268]	; (800161c <MX_TIM1_Init+0x198>)
 800150e:	f003 feff 	bl	8005310 <HAL_TIM_ConfigClockSource>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001518:	f000 fac0 	bl	8001a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800151c:	483f      	ldr	r0, [pc, #252]	; (800161c <MX_TIM1_Init+0x198>)
 800151e:	f003 fc74 	bl	8004e0a <HAL_TIM_PWM_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001528:	f000 fab8 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152c:	2300      	movs	r3, #0
 800152e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001538:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800153c:	4619      	mov	r1, r3
 800153e:	4837      	ldr	r0, [pc, #220]	; (800161c <MX_TIM1_Init+0x198>)
 8001540:	f004 fc12 	bl	8005d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800154a:	f000 faa7 	bl	8001a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154e:	2360      	movs	r3, #96	; 0x60
 8001550:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001556:	2300      	movs	r3, #0
 8001558:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800155a:	2300      	movs	r3, #0
 800155c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800156a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800156e:	2200      	movs	r2, #0
 8001570:	4619      	mov	r1, r3
 8001572:	482a      	ldr	r0, [pc, #168]	; (800161c <MX_TIM1_Init+0x198>)
 8001574:	f003 fdb8 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800157e:	f000 fa8d 	bl	8001a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001582:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001586:	2204      	movs	r2, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4824      	ldr	r0, [pc, #144]	; (800161c <MX_TIM1_Init+0x198>)
 800158c:	f003 fdac 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001596:	f000 fa81 	bl	8001a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800159a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800159e:	2208      	movs	r2, #8
 80015a0:	4619      	mov	r1, r3
 80015a2:	481e      	ldr	r0, [pc, #120]	; (800161c <MX_TIM1_Init+0x198>)
 80015a4:	f003 fda0 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80015ae:	f000 fa75 	bl	8001a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015b6:	220c      	movs	r2, #12
 80015b8:	4619      	mov	r1, r3
 80015ba:	4818      	ldr	r0, [pc, #96]	; (800161c <MX_TIM1_Init+0x198>)
 80015bc:	f003 fd94 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80015c6:	f000 fa69 	bl	8001a9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <MX_TIM1_Init+0x198>)
 8001600:	f004 fc40 	bl	8005e84 <HAL_TIMEx_ConfigBreakDeadTime>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 800160a:	f000 fa47 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800160e:	4803      	ldr	r0, [pc, #12]	; (800161c <MX_TIM1_Init+0x198>)
 8001610:	f000 fa9e 	bl	8001b50 <HAL_TIM_MspPostInit>

}
 8001614:	bf00      	nop
 8001616:	3768      	adds	r7, #104	; 0x68
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	24000228 	.word	0x24000228
 8001620:	40010000 	.word	0x40010000

08001624 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b09a      	sub	sp, #104	; 0x68
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001644:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
 8001654:	615a      	str	r2, [r3, #20]
 8001656:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	222c      	movs	r2, #44	; 0x2c
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f005 fe84 	bl	800736c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001664:	4b55      	ldr	r3, [pc, #340]	; (80017bc <MX_TIM8_Init+0x198>)
 8001666:	4a56      	ldr	r2, [pc, #344]	; (80017c0 <MX_TIM8_Init+0x19c>)
 8001668:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 6400;
 800166a:	4b54      	ldr	r3, [pc, #336]	; (80017bc <MX_TIM8_Init+0x198>)
 800166c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001670:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	4b52      	ldr	r3, [pc, #328]	; (80017bc <MX_TIM8_Init+0x198>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 8001678:	4b50      	ldr	r3, [pc, #320]	; (80017bc <MX_TIM8_Init+0x198>)
 800167a:	2263      	movs	r2, #99	; 0x63
 800167c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167e:	4b4f      	ldr	r3, [pc, #316]	; (80017bc <MX_TIM8_Init+0x198>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001684:	4b4d      	ldr	r3, [pc, #308]	; (80017bc <MX_TIM8_Init+0x198>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168a:	4b4c      	ldr	r3, [pc, #304]	; (80017bc <MX_TIM8_Init+0x198>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001690:	484a      	ldr	r0, [pc, #296]	; (80017bc <MX_TIM8_Init+0x198>)
 8001692:	f003 fb63 	bl	8004d5c <HAL_TIM_Base_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800169c:	f000 f9fe 	bl	8001a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016aa:	4619      	mov	r1, r3
 80016ac:	4843      	ldr	r0, [pc, #268]	; (80017bc <MX_TIM8_Init+0x198>)
 80016ae:	f003 fe2f 	bl	8005310 <HAL_TIM_ConfigClockSource>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80016b8:	f000 f9f0 	bl	8001a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016bc:	483f      	ldr	r0, [pc, #252]	; (80017bc <MX_TIM8_Init+0x198>)
 80016be:	f003 fba4 	bl	8004e0a <HAL_TIM_PWM_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80016c8:	f000 f9e8 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016dc:	4619      	mov	r1, r3
 80016de:	4837      	ldr	r0, [pc, #220]	; (80017bc <MX_TIM8_Init+0x198>)
 80016e0:	f004 fb42 	bl	8005d68 <HAL_TIMEx_MasterConfigSynchronization>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80016ea:	f000 f9d7 	bl	8001a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ee:	2360      	movs	r3, #96	; 0x60
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f6:	2300      	movs	r3, #0
 80016f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016fa:	2300      	movs	r3, #0
 80016fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800170e:	2200      	movs	r2, #0
 8001710:	4619      	mov	r1, r3
 8001712:	482a      	ldr	r0, [pc, #168]	; (80017bc <MX_TIM8_Init+0x198>)
 8001714:	f003 fce8 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800171e:	f000 f9bd 	bl	8001a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001722:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001726:	2204      	movs	r2, #4
 8001728:	4619      	mov	r1, r3
 800172a:	4824      	ldr	r0, [pc, #144]	; (80017bc <MX_TIM8_Init+0x198>)
 800172c:	f003 fcdc 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8001736:	f000 f9b1 	bl	8001a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800173a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800173e:	2208      	movs	r2, #8
 8001740:	4619      	mov	r1, r3
 8001742:	481e      	ldr	r0, [pc, #120]	; (80017bc <MX_TIM8_Init+0x198>)
 8001744:	f003 fcd0 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 800174e:	f000 f9a5 	bl	8001a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001752:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001756:	220c      	movs	r2, #12
 8001758:	4619      	mov	r1, r3
 800175a:	4818      	ldr	r0, [pc, #96]	; (80017bc <MX_TIM8_Init+0x198>)
 800175c:	f003 fcc4 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 8001766:	f000 f999 	bl	8001a9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800177e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001782:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800178c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	4619      	mov	r1, r3
 800179e:	4807      	ldr	r0, [pc, #28]	; (80017bc <MX_TIM8_Init+0x198>)
 80017a0:	f004 fb70 	bl	8005e84 <HAL_TIMEx_ConfigBreakDeadTime>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 80017aa:	f000 f977 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80017ae:	4803      	ldr	r0, [pc, #12]	; (80017bc <MX_TIM8_Init+0x198>)
 80017b0:	f000 f9ce 	bl	8001b50 <HAL_TIM_MspPostInit>

}
 80017b4:	bf00      	nop
 80017b6:	3768      	adds	r7, #104	; 0x68
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	240000b0 	.word	0x240000b0
 80017c0:	40010400 	.word	0x40010400

080017c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017c8:	4b22      	ldr	r3, [pc, #136]	; (8001854 <MX_USART1_UART_Init+0x90>)
 80017ca:	4a23      	ldr	r2, [pc, #140]	; (8001858 <MX_USART1_UART_Init+0x94>)
 80017cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017ce:	4b21      	ldr	r3, [pc, #132]	; (8001854 <MX_USART1_UART_Init+0x90>)
 80017d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017d6:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <MX_USART1_UART_Init+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017dc:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <MX_USART1_UART_Init+0x90>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017e2:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <MX_USART1_UART_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <MX_USART1_UART_Init+0x90>)
 80017ea:	220c      	movs	r2, #12
 80017ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <MX_USART1_UART_Init+0x90>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <MX_USART1_UART_Init+0x90>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <MX_USART1_UART_Init+0x90>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001800:	4b14      	ldr	r3, [pc, #80]	; (8001854 <MX_USART1_UART_Init+0x90>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <MX_USART1_UART_Init+0x90>)
 8001808:	2200      	movs	r2, #0
 800180a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800180c:	4811      	ldr	r0, [pc, #68]	; (8001854 <MX_USART1_UART_Init+0x90>)
 800180e:	f004 fbb7 	bl	8005f80 <HAL_UART_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001818:	f000 f940 	bl	8001a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800181c:	2100      	movs	r1, #0
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <MX_USART1_UART_Init+0x90>)
 8001820:	f005 fcb6 	bl	8007190 <HAL_UARTEx_SetTxFifoThreshold>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800182a:	f000 f937 	bl	8001a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800182e:	2100      	movs	r1, #0
 8001830:	4808      	ldr	r0, [pc, #32]	; (8001854 <MX_USART1_UART_Init+0x90>)
 8001832:	f005 fceb 	bl	800720c <HAL_UARTEx_SetRxFifoThreshold>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800183c:	f000 f92e 	bl	8001a9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001840:	4804      	ldr	r0, [pc, #16]	; (8001854 <MX_USART1_UART_Init+0x90>)
 8001842:	f005 fc6c 	bl	800711e <HAL_UARTEx_DisableFifoMode>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800184c:	f000 f926 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	24000198 	.word	0x24000198
 8001858:	40011000 	.word	0x40011000

0800185c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <MX_USART2_UART_Init+0x90>)
 8001862:	4a23      	ldr	r2, [pc, #140]	; (80018f0 <MX_USART2_UART_Init+0x94>)
 8001864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001866:	4b21      	ldr	r3, [pc, #132]	; (80018ec <MX_USART2_UART_Init+0x90>)
 8001868:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800186c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800186e:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <MX_USART2_UART_Init+0x90>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001874:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <MX_USART2_UART_Init+0x90>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <MX_USART2_UART_Init+0x90>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001880:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <MX_USART2_UART_Init+0x90>)
 8001882:	220c      	movs	r2, #12
 8001884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <MX_USART2_UART_Init+0x90>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800188c:	4b17      	ldr	r3, [pc, #92]	; (80018ec <MX_USART2_UART_Init+0x90>)
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <MX_USART2_UART_Init+0x90>)
 8001894:	2200      	movs	r2, #0
 8001896:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <MX_USART2_UART_Init+0x90>)
 800189a:	2200      	movs	r2, #0
 800189c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <MX_USART2_UART_Init+0x90>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018a4:	4811      	ldr	r0, [pc, #68]	; (80018ec <MX_USART2_UART_Init+0x90>)
 80018a6:	f004 fb6b 	bl	8005f80 <HAL_UART_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80018b0:	f000 f8f4 	bl	8001a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018b4:	2100      	movs	r1, #0
 80018b6:	480d      	ldr	r0, [pc, #52]	; (80018ec <MX_USART2_UART_Init+0x90>)
 80018b8:	f005 fc6a 	bl	8007190 <HAL_UARTEx_SetTxFifoThreshold>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80018c2:	f000 f8eb 	bl	8001a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018c6:	2100      	movs	r1, #0
 80018c8:	4808      	ldr	r0, [pc, #32]	; (80018ec <MX_USART2_UART_Init+0x90>)
 80018ca:	f005 fc9f 	bl	800720c <HAL_UARTEx_SetRxFifoThreshold>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80018d4:	f000 f8e2 	bl	8001a9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <MX_USART2_UART_Init+0x90>)
 80018da:	f005 fc20 	bl	800711e <HAL_UARTEx_DisableFifoMode>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80018e4:	f000 f8da 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	24000274 	.word	0x24000274
 80018f0:	40004400 	.word	0x40004400

080018f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018f8:	4b22      	ldr	r3, [pc, #136]	; (8001984 <MX_USART3_UART_Init+0x90>)
 80018fa:	4a23      	ldr	r2, [pc, #140]	; (8001988 <MX_USART3_UART_Init+0x94>)
 80018fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80018fe:	4b21      	ldr	r3, [pc, #132]	; (8001984 <MX_USART3_UART_Init+0x90>)
 8001900:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001904:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001906:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <MX_USART3_UART_Init+0x90>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <MX_USART3_UART_Init+0x90>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001912:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <MX_USART3_UART_Init+0x90>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001918:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <MX_USART3_UART_Init+0x90>)
 800191a:	220c      	movs	r2, #12
 800191c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <MX_USART3_UART_Init+0x90>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <MX_USART3_UART_Init+0x90>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800192a:	4b16      	ldr	r3, [pc, #88]	; (8001984 <MX_USART3_UART_Init+0x90>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001930:	4b14      	ldr	r3, [pc, #80]	; (8001984 <MX_USART3_UART_Init+0x90>)
 8001932:	2200      	movs	r2, #0
 8001934:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <MX_USART3_UART_Init+0x90>)
 8001938:	2200      	movs	r2, #0
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800193c:	4811      	ldr	r0, [pc, #68]	; (8001984 <MX_USART3_UART_Init+0x90>)
 800193e:	f004 fb1f 	bl	8005f80 <HAL_UART_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001948:	f000 f8a8 	bl	8001a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800194c:	2100      	movs	r1, #0
 800194e:	480d      	ldr	r0, [pc, #52]	; (8001984 <MX_USART3_UART_Init+0x90>)
 8001950:	f005 fc1e 	bl	8007190 <HAL_UARTEx_SetTxFifoThreshold>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800195a:	f000 f89f 	bl	8001a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800195e:	2100      	movs	r1, #0
 8001960:	4808      	ldr	r0, [pc, #32]	; (8001984 <MX_USART3_UART_Init+0x90>)
 8001962:	f005 fc53 	bl	800720c <HAL_UARTEx_SetRxFifoThreshold>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800196c:	f000 f896 	bl	8001a9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001970:	4804      	ldr	r0, [pc, #16]	; (8001984 <MX_USART3_UART_Init+0x90>)
 8001972:	f005 fbd4 	bl	800711e <HAL_UARTEx_DisableFifoMode>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800197c:	f000 f88e 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	240000fc 	.word	0x240000fc
 8001988:	40004800 	.word	0x40004800

0800198c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019a2:	4b3a      	ldr	r3, [pc, #232]	; (8001a8c <MX_GPIO_Init+0x100>)
 80019a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a8:	4a38      	ldr	r2, [pc, #224]	; (8001a8c <MX_GPIO_Init+0x100>)
 80019aa:	f043 0310 	orr.w	r3, r3, #16
 80019ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b2:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <MX_GPIO_Init+0x100>)
 80019b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c0:	4b32      	ldr	r3, [pc, #200]	; (8001a8c <MX_GPIO_Init+0x100>)
 80019c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c6:	4a31      	ldr	r2, [pc, #196]	; (8001a8c <MX_GPIO_Init+0x100>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d0:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <MX_GPIO_Init+0x100>)
 80019d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <MX_GPIO_Init+0x100>)
 80019e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e4:	4a29      	ldr	r2, [pc, #164]	; (8001a8c <MX_GPIO_Init+0x100>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ee:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <MX_GPIO_Init+0x100>)
 80019f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <MX_GPIO_Init+0x100>)
 80019fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a02:	4a22      	ldr	r2, [pc, #136]	; (8001a8c <MX_GPIO_Init+0x100>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <MX_GPIO_Init+0x100>)
 8001a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <MX_GPIO_Init+0x100>)
 8001a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a20:	4a1a      	ldr	r2, [pc, #104]	; (8001a8c <MX_GPIO_Init+0x100>)
 8001a22:	f043 0308 	orr.w	r3, r3, #8
 8001a26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <MX_GPIO_Init+0x100>)
 8001a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a38:	2320      	movs	r3, #32
 8001a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4811      	ldr	r0, [pc, #68]	; (8001a90 <MX_GPIO_Init+0x104>)
 8001a4c:	f000 fc6a 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	480b      	ldr	r0, [pc, #44]	; (8001a94 <MX_GPIO_Init+0x108>)
 8001a66:	f000 fc5d 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4806      	ldr	r0, [pc, #24]	; (8001a98 <MX_GPIO_Init+0x10c>)
 8001a80:	f000 fc50 	bl	8002324 <HAL_GPIO_Init>

}
 8001a84:	bf00      	nop
 8001a86:	3728      	adds	r7, #40	; 0x28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	58024400 	.word	0x58024400
 8001a90:	58021000 	.word	0x58021000
 8001a94:	58020800 	.word	0x58020800
 8001a98:	58020400 	.word	0x58020400

08001a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa0:	b672      	cpsid	i
}
 8001aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <Error_Handler+0x8>
	...

08001aa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_MspInit+0x30>)
 8001ab0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ab4:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <HAL_MspInit+0x30>)
 8001ab6:	f043 0302 	orr.w	r3, r3, #2
 8001aba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_MspInit+0x30>)
 8001ac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	58024400 	.word	0x58024400

08001adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a16      	ldr	r2, [pc, #88]	; (8001b44 <HAL_TIM_Base_MspInit+0x68>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d10f      	bne.n	8001b0e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <HAL_TIM_Base_MspInit+0x6c>)
 8001af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001af4:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <HAL_TIM_Base_MspInit+0x6c>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_TIM_Base_MspInit+0x6c>)
 8001b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001b0c:	e013      	b.n	8001b36 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM8)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <HAL_TIM_Base_MspInit+0x70>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d10e      	bne.n	8001b36 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_TIM_Base_MspInit+0x6c>)
 8001b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_TIM_Base_MspInit+0x6c>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <HAL_TIM_Base_MspInit+0x6c>)
 8001b2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40010000 	.word	0x40010000
 8001b48:	58024400 	.word	0x58024400
 8001b4c:	40010400 	.word	0x40010400

08001b50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a26      	ldr	r2, [pc, #152]	; (8001c08 <HAL_TIM_MspPostInit+0xb8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d120      	bne.n	8001bb4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <HAL_TIM_MspPostInit+0xbc>)
 8001b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b78:	4a24      	ldr	r2, [pc, #144]	; (8001c0c <HAL_TIM_MspPostInit+0xbc>)
 8001b7a:	f043 0310 	orr.w	r3, r3, #16
 8001b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b82:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <HAL_TIM_MspPostInit+0xbc>)
 8001b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001b90:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	4818      	ldr	r0, [pc, #96]	; (8001c10 <HAL_TIM_MspPostInit+0xc0>)
 8001bae:	f000 fbb9 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001bb2:	e024      	b.n	8001bfe <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM8)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a16      	ldr	r2, [pc, #88]	; (8001c14 <HAL_TIM_MspPostInit+0xc4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d11f      	bne.n	8001bfe <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <HAL_TIM_MspPostInit+0xbc>)
 8001bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc4:	4a11      	ldr	r2, [pc, #68]	; (8001c0c <HAL_TIM_MspPostInit+0xbc>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_TIM_MspPostInit+0xbc>)
 8001bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001bdc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4807      	ldr	r0, [pc, #28]	; (8001c18 <HAL_TIM_MspPostInit+0xc8>)
 8001bfa:	f000 fb93 	bl	8002324 <HAL_GPIO_Init>
}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	58024400 	.word	0x58024400
 8001c10:	58021000 	.word	0x58021000
 8001c14:	40010400 	.word	0x40010400
 8001c18:	58020800 	.word	0x58020800

08001c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b0bc      	sub	sp, #240	; 0xf0
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c34:	f107 0320 	add.w	r3, r7, #32
 8001c38:	22bc      	movs	r2, #188	; 0xbc
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f005 fb95 	bl	800736c <memset>
  if(huart->Instance==USART1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a6d      	ldr	r2, [pc, #436]	; (8001dfc <HAL_UART_MspInit+0x1e0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d143      	bne.n	8001cd4 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c56:	f107 0320 	add.w	r3, r7, #32
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f001 fd1c 	bl	8003698 <HAL_RCCEx_PeriphCLKConfig>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c66:	f7ff ff19 	bl	8001a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c6a:	4b65      	ldr	r3, [pc, #404]	; (8001e00 <HAL_UART_MspInit+0x1e4>)
 8001c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c70:	4a63      	ldr	r2, [pc, #396]	; (8001e00 <HAL_UART_MspInit+0x1e4>)
 8001c72:	f043 0310 	orr.w	r3, r3, #16
 8001c76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c7a:	4b61      	ldr	r3, [pc, #388]	; (8001e00 <HAL_UART_MspInit+0x1e4>)
 8001c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c88:	4b5d      	ldr	r3, [pc, #372]	; (8001e00 <HAL_UART_MspInit+0x1e4>)
 8001c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8e:	4a5c      	ldr	r2, [pc, #368]	; (8001e00 <HAL_UART_MspInit+0x1e4>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c98:	4b59      	ldr	r3, [pc, #356]	; (8001e00 <HAL_UART_MspInit+0x1e4>)
 8001c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001ca6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001caa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cca:	4619      	mov	r1, r3
 8001ccc:	484d      	ldr	r0, [pc, #308]	; (8001e04 <HAL_UART_MspInit+0x1e8>)
 8001cce:	f000 fb29 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cd2:	e08f      	b.n	8001df4 <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a4b      	ldr	r2, [pc, #300]	; (8001e08 <HAL_UART_MspInit+0x1ec>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d142      	bne.n	8001d64 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ce8:	f107 0320 	add.w	r3, r7, #32
 8001cec:	4618      	mov	r0, r3
 8001cee:	f001 fcd3 	bl	8003698 <HAL_RCCEx_PeriphCLKConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001cf8:	f7ff fed0 	bl	8001a9c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cfc:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <HAL_UART_MspInit+0x1e4>)
 8001cfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d02:	4a3f      	ldr	r2, [pc, #252]	; (8001e00 <HAL_UART_MspInit+0x1e4>)
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d0c:	4b3c      	ldr	r3, [pc, #240]	; (8001e00 <HAL_UART_MspInit+0x1e4>)
 8001d0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <HAL_UART_MspInit+0x1e4>)
 8001d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d20:	4a37      	ldr	r2, [pc, #220]	; (8001e00 <HAL_UART_MspInit+0x1e4>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2a:	4b35      	ldr	r3, [pc, #212]	; (8001e00 <HAL_UART_MspInit+0x1e4>)
 8001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d38:	230c      	movs	r3, #12
 8001d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d50:	2307      	movs	r3, #7
 8001d52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	482b      	ldr	r0, [pc, #172]	; (8001e0c <HAL_UART_MspInit+0x1f0>)
 8001d5e:	f000 fae1 	bl	8002324 <HAL_GPIO_Init>
}
 8001d62:	e047      	b.n	8001df4 <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART3)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a29      	ldr	r2, [pc, #164]	; (8001e10 <HAL_UART_MspInit+0x1f4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d142      	bne.n	8001df4 <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d78:	f107 0320 	add.w	r3, r7, #32
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f001 fc8b 	bl	8003698 <HAL_RCCEx_PeriphCLKConfig>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_UART_MspInit+0x170>
      Error_Handler();
 8001d88:	f7ff fe88 	bl	8001a9c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d8c:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <HAL_UART_MspInit+0x1e4>)
 8001d8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d92:	4a1b      	ldr	r2, [pc, #108]	; (8001e00 <HAL_UART_MspInit+0x1e4>)
 8001d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d9c:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <HAL_UART_MspInit+0x1e4>)
 8001d9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_UART_MspInit+0x1e4>)
 8001dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db0:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <HAL_UART_MspInit+0x1e4>)
 8001db2:	f043 0308 	orr.w	r3, r3, #8
 8001db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_UART_MspInit+0x1e4>)
 8001dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001de2:	2307      	movs	r3, #7
 8001de4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001de8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001dec:	4619      	mov	r1, r3
 8001dee:	4809      	ldr	r0, [pc, #36]	; (8001e14 <HAL_UART_MspInit+0x1f8>)
 8001df0:	f000 fa98 	bl	8002324 <HAL_GPIO_Init>
}
 8001df4:	bf00      	nop
 8001df6:	37f0      	adds	r7, #240	; 0xf0
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40011000 	.word	0x40011000
 8001e00:	58024400 	.word	0x58024400
 8001e04:	58020400 	.word	0x58020400
 8001e08:	40004400 	.word	0x40004400
 8001e0c:	58020000 	.word	0x58020000
 8001e10:	40004800 	.word	0x40004800
 8001e14:	58020c00 	.word	0x58020c00

08001e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <NMI_Handler+0x4>

08001e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <HardFault_Handler+0x4>

08001e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <MemManage_Handler+0x4>

08001e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <BusFault_Handler+0x4>

08001e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <UsageFault_Handler+0x4>

08001e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e64:	f000 f92a 	bl	80020bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e70:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <SystemInit+0xec>)
 8001e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e76:	4a38      	ldr	r2, [pc, #224]	; (8001f58 <SystemInit+0xec>)
 8001e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e80:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <SystemInit+0xf0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	2b06      	cmp	r3, #6
 8001e8a:	d807      	bhi.n	8001e9c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e8c:	4b33      	ldr	r3, [pc, #204]	; (8001f5c <SystemInit+0xf0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 030f 	bic.w	r3, r3, #15
 8001e94:	4a31      	ldr	r2, [pc, #196]	; (8001f5c <SystemInit+0xf0>)
 8001e96:	f043 0307 	orr.w	r3, r3, #7
 8001e9a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e9c:	4b30      	ldr	r3, [pc, #192]	; (8001f60 <SystemInit+0xf4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a2f      	ldr	r2, [pc, #188]	; (8001f60 <SystemInit+0xf4>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <SystemInit+0xf4>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001eae:	4b2c      	ldr	r3, [pc, #176]	; (8001f60 <SystemInit+0xf4>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	492b      	ldr	r1, [pc, #172]	; (8001f60 <SystemInit+0xf4>)
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <SystemInit+0xf8>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001eba:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <SystemInit+0xf0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ec6:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <SystemInit+0xf0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 030f 	bic.w	r3, r3, #15
 8001ece:	4a23      	ldr	r2, [pc, #140]	; (8001f5c <SystemInit+0xf0>)
 8001ed0:	f043 0307 	orr.w	r3, r3, #7
 8001ed4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <SystemInit+0xf4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001edc:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <SystemInit+0xf4>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <SystemInit+0xf4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <SystemInit+0xf4>)
 8001eea:	4a1f      	ldr	r2, [pc, #124]	; (8001f68 <SystemInit+0xfc>)
 8001eec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001eee:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <SystemInit+0xf4>)
 8001ef0:	4a1e      	ldr	r2, [pc, #120]	; (8001f6c <SystemInit+0x100>)
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <SystemInit+0xf4>)
 8001ef6:	4a1e      	ldr	r2, [pc, #120]	; (8001f70 <SystemInit+0x104>)
 8001ef8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001efa:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <SystemInit+0xf4>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <SystemInit+0xf4>)
 8001f02:	4a1b      	ldr	r2, [pc, #108]	; (8001f70 <SystemInit+0x104>)
 8001f04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <SystemInit+0xf4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <SystemInit+0xf4>)
 8001f0e:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <SystemInit+0x104>)
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f12:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <SystemInit+0xf4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <SystemInit+0xf4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <SystemInit+0xf4>)
 8001f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <SystemInit+0xf4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <SystemInit+0x108>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <SystemInit+0x10c>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f36:	d202      	bcs.n	8001f3e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001f38:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <SystemInit+0x110>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <SystemInit+0x114>)
 8001f40:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f44:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f46:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <SystemInit+0xec>)
 8001f48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f4c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00
 8001f5c:	52002000 	.word	0x52002000
 8001f60:	58024400 	.word	0x58024400
 8001f64:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f68:	02020200 	.word	0x02020200
 8001f6c:	01ff0000 	.word	0x01ff0000
 8001f70:	01010280 	.word	0x01010280
 8001f74:	5c001000 	.word	0x5c001000
 8001f78:	ffff0000 	.word	0xffff0000
 8001f7c:	51008108 	.word	0x51008108
 8001f80:	52004000 	.word	0x52004000

08001f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fbc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f88:	f7ff ff70 	bl	8001e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f8e:	e003      	b.n	8001f98 <LoopCopyDataInit>

08001f90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001f92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f96:	3104      	adds	r1, #4

08001f98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f98:	480a      	ldr	r0, [pc, #40]	; (8001fc4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001f9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fa0:	d3f6      	bcc.n	8001f90 <CopyDataInit>
  ldr  r2, =_sbss
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001fa4:	e002      	b.n	8001fac <LoopFillZerobss>

08001fa6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fa6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fa8:	f842 3b04 	str.w	r3, [r2], #4

08001fac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001fae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fb0:	d3f9      	bcc.n	8001fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fb2:	f005 f9b7 	bl	8007324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fb6:	f7ff f9bf 	bl	8001338 <main>
  bx  lr    
 8001fba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fbc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001fc0:	080073dc 	.word	0x080073dc
  ldr  r0, =_sdata
 8001fc4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001fc8:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 8001fcc:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 8001fd0:	24000308 	.word	0x24000308

08001fd4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd4:	e7fe      	b.n	8001fd4 <ADC3_IRQHandler>
	...

08001fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fde:	2003      	movs	r0, #3
 8001fe0:	f000 f96e 	bl	80022c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fe4:	f001 f982 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_Init+0x68>)
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	4913      	ldr	r1, [pc, #76]	; (8002044 <HAL_Init+0x6c>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8002000:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_Init+0x68>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <HAL_Init+0x6c>)
 800200c:	5cd3      	ldrb	r3, [r2, r3]
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	fa22 f303 	lsr.w	r3, r2, r3
 8002018:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <HAL_Init+0x70>)
 800201a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800201c:	4a0b      	ldr	r2, [pc, #44]	; (800204c <HAL_Init+0x74>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002022:	2000      	movs	r0, #0
 8002024:	f000 f814 	bl	8002050 <HAL_InitTick>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e002      	b.n	8002038 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002032:	f7ff fd39 	bl	8001aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	58024400 	.word	0x58024400
 8002044:	08007394 	.word	0x08007394
 8002048:	2400006c 	.word	0x2400006c
 800204c:	24000068 	.word	0x24000068

08002050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_InitTick+0x60>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e021      	b.n	80020a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <HAL_InitTick+0x64>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <HAL_InitTick+0x60>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002072:	fbb3 f3f1 	udiv	r3, r3, r1
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f945 	bl	800230a <HAL_SYSTICK_Config>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e00e      	b.n	80020a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b0f      	cmp	r3, #15
 800208e:	d80a      	bhi.n	80020a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002090:	2200      	movs	r2, #0
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f000 f91d 	bl	80022d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800209c:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <HAL_InitTick+0x68>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	24000074 	.word	0x24000074
 80020b4:	24000068 	.word	0x24000068
 80020b8:	24000070 	.word	0x24000070

080020bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_IncTick+0x20>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_IncTick+0x24>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_IncTick+0x24>)
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	24000074 	.word	0x24000074
 80020e0:	24000304 	.word	0x24000304

080020e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return uwTick;
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <HAL_GetTick+0x14>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	24000304 	.word	0x24000304

080020fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff ffee 	bl	80020e4 <HAL_GetTick>
 8002108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d005      	beq.n	8002122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_Delay+0x44>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002122:	bf00      	nop
 8002124:	f7ff ffde 	bl	80020e4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	429a      	cmp	r2, r3
 8002132:	d8f7      	bhi.n	8002124 <HAL_Delay+0x28>
  {
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	24000074 	.word	0x24000074

08002144 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <HAL_GetREVID+0x14>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	0c1b      	lsrs	r3, r3, #16
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	5c001000 	.word	0x5c001000

0800215c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <__NVIC_SetPriorityGrouping+0x40>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002178:	4013      	ands	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002186:	4313      	orrs	r3, r2
 8002188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218a:	4a04      	ldr	r2, [pc, #16]	; (800219c <__NVIC_SetPriorityGrouping+0x40>)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	60d3      	str	r3, [r2, #12]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00
 80021a0:	05fa0000 	.word	0x05fa0000

080021a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <__NVIC_GetPriorityGrouping+0x18>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	f003 0307 	and.w	r3, r3, #7
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	db0a      	blt.n	80021ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	490c      	ldr	r1, [pc, #48]	; (800220c <__NVIC_SetPriority+0x4c>)
 80021da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021de:	0112      	lsls	r2, r2, #4
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	440b      	add	r3, r1
 80021e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e8:	e00a      	b.n	8002200 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	4908      	ldr	r1, [pc, #32]	; (8002210 <__NVIC_SetPriority+0x50>)
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	3b04      	subs	r3, #4
 80021f8:	0112      	lsls	r2, r2, #4
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	440b      	add	r3, r1
 80021fe:	761a      	strb	r2, [r3, #24]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000e100 	.word	0xe000e100
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f1c3 0307 	rsb	r3, r3, #7
 800222e:	2b04      	cmp	r3, #4
 8002230:	bf28      	it	cs
 8002232:	2304      	movcs	r3, #4
 8002234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3304      	adds	r3, #4
 800223a:	2b06      	cmp	r3, #6
 800223c:	d902      	bls.n	8002244 <NVIC_EncodePriority+0x30>
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3b03      	subs	r3, #3
 8002242:	e000      	b.n	8002246 <NVIC_EncodePriority+0x32>
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	f04f 32ff 	mov.w	r2, #4294967295
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43da      	mvns	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	401a      	ands	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800225c:	f04f 31ff 	mov.w	r1, #4294967295
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa01 f303 	lsl.w	r3, r1, r3
 8002266:	43d9      	mvns	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	4313      	orrs	r3, r2
         );
}
 800226e:	4618      	mov	r0, r3
 8002270:	3724      	adds	r7, #36	; 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800228c:	d301      	bcc.n	8002292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800228e:	2301      	movs	r3, #1
 8002290:	e00f      	b.n	80022b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002292:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <SysTick_Config+0x40>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3b01      	subs	r3, #1
 8002298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229a:	210f      	movs	r1, #15
 800229c:	f04f 30ff 	mov.w	r0, #4294967295
 80022a0:	f7ff ff8e 	bl	80021c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <SysTick_Config+0x40>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022aa:	4b04      	ldr	r3, [pc, #16]	; (80022bc <SysTick_Config+0x40>)
 80022ac:	2207      	movs	r2, #7
 80022ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	e000e010 	.word	0xe000e010

080022c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ff47 	bl	800215c <__NVIC_SetPriorityGrouping>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b086      	sub	sp, #24
 80022da:	af00      	add	r7, sp, #0
 80022dc:	4603      	mov	r3, r0
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022e4:	f7ff ff5e 	bl	80021a4 <__NVIC_GetPriorityGrouping>
 80022e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	6978      	ldr	r0, [r7, #20]
 80022f0:	f7ff ff90 	bl	8002214 <NVIC_EncodePriority>
 80022f4:	4602      	mov	r2, r0
 80022f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff5f 	bl	80021c0 <__NVIC_SetPriority>
}
 8002302:	bf00      	nop
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ffb2 	bl	800227c <SysTick_Config>
 8002318:	4603      	mov	r3, r0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002332:	4b89      	ldr	r3, [pc, #548]	; (8002558 <HAL_GPIO_Init+0x234>)
 8002334:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002336:	e194      	b.n	8002662 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	2101      	movs	r1, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa01 f303 	lsl.w	r3, r1, r3
 8002344:	4013      	ands	r3, r2
 8002346:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8186 	beq.w	800265c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b01      	cmp	r3, #1
 800235a:	d005      	beq.n	8002368 <HAL_GPIO_Init+0x44>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d130      	bne.n	80023ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	2203      	movs	r2, #3
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800239e:	2201      	movs	r2, #1
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	091b      	lsrs	r3, r3, #4
 80023b4:	f003 0201 	and.w	r2, r3, #1
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d017      	beq.n	8002406 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	2203      	movs	r2, #3
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d123      	bne.n	800245a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	08da      	lsrs	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3208      	adds	r2, #8
 800241a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	220f      	movs	r2, #15
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	08da      	lsrs	r2, r3, #3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3208      	adds	r2, #8
 8002454:	69b9      	ldr	r1, [r7, #24]
 8002456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2203      	movs	r2, #3
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0203 	and.w	r2, r3, #3
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 80e0 	beq.w	800265c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249c:	4b2f      	ldr	r3, [pc, #188]	; (800255c <HAL_GPIO_Init+0x238>)
 800249e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024a2:	4a2e      	ldr	r2, [pc, #184]	; (800255c <HAL_GPIO_Init+0x238>)
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80024ac:	4b2b      	ldr	r3, [pc, #172]	; (800255c <HAL_GPIO_Init+0x238>)
 80024ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ba:	4a29      	ldr	r2, [pc, #164]	; (8002560 <HAL_GPIO_Init+0x23c>)
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	3302      	adds	r3, #2
 80024c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	220f      	movs	r2, #15
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a20      	ldr	r2, [pc, #128]	; (8002564 <HAL_GPIO_Init+0x240>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d052      	beq.n	800258c <HAL_GPIO_Init+0x268>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a1f      	ldr	r2, [pc, #124]	; (8002568 <HAL_GPIO_Init+0x244>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d031      	beq.n	8002552 <HAL_GPIO_Init+0x22e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a1e      	ldr	r2, [pc, #120]	; (800256c <HAL_GPIO_Init+0x248>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d02b      	beq.n	800254e <HAL_GPIO_Init+0x22a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <HAL_GPIO_Init+0x24c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d025      	beq.n	800254a <HAL_GPIO_Init+0x226>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a1c      	ldr	r2, [pc, #112]	; (8002574 <HAL_GPIO_Init+0x250>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d01f      	beq.n	8002546 <HAL_GPIO_Init+0x222>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a1b      	ldr	r2, [pc, #108]	; (8002578 <HAL_GPIO_Init+0x254>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d019      	beq.n	8002542 <HAL_GPIO_Init+0x21e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a1a      	ldr	r2, [pc, #104]	; (800257c <HAL_GPIO_Init+0x258>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d013      	beq.n	800253e <HAL_GPIO_Init+0x21a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a19      	ldr	r2, [pc, #100]	; (8002580 <HAL_GPIO_Init+0x25c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00d      	beq.n	800253a <HAL_GPIO_Init+0x216>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a18      	ldr	r2, [pc, #96]	; (8002584 <HAL_GPIO_Init+0x260>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d007      	beq.n	8002536 <HAL_GPIO_Init+0x212>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a17      	ldr	r2, [pc, #92]	; (8002588 <HAL_GPIO_Init+0x264>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d101      	bne.n	8002532 <HAL_GPIO_Init+0x20e>
 800252e:	2309      	movs	r3, #9
 8002530:	e02d      	b.n	800258e <HAL_GPIO_Init+0x26a>
 8002532:	230a      	movs	r3, #10
 8002534:	e02b      	b.n	800258e <HAL_GPIO_Init+0x26a>
 8002536:	2308      	movs	r3, #8
 8002538:	e029      	b.n	800258e <HAL_GPIO_Init+0x26a>
 800253a:	2307      	movs	r3, #7
 800253c:	e027      	b.n	800258e <HAL_GPIO_Init+0x26a>
 800253e:	2306      	movs	r3, #6
 8002540:	e025      	b.n	800258e <HAL_GPIO_Init+0x26a>
 8002542:	2305      	movs	r3, #5
 8002544:	e023      	b.n	800258e <HAL_GPIO_Init+0x26a>
 8002546:	2304      	movs	r3, #4
 8002548:	e021      	b.n	800258e <HAL_GPIO_Init+0x26a>
 800254a:	2303      	movs	r3, #3
 800254c:	e01f      	b.n	800258e <HAL_GPIO_Init+0x26a>
 800254e:	2302      	movs	r3, #2
 8002550:	e01d      	b.n	800258e <HAL_GPIO_Init+0x26a>
 8002552:	2301      	movs	r3, #1
 8002554:	e01b      	b.n	800258e <HAL_GPIO_Init+0x26a>
 8002556:	bf00      	nop
 8002558:	58000080 	.word	0x58000080
 800255c:	58024400 	.word	0x58024400
 8002560:	58000400 	.word	0x58000400
 8002564:	58020000 	.word	0x58020000
 8002568:	58020400 	.word	0x58020400
 800256c:	58020800 	.word	0x58020800
 8002570:	58020c00 	.word	0x58020c00
 8002574:	58021000 	.word	0x58021000
 8002578:	58021400 	.word	0x58021400
 800257c:	58021800 	.word	0x58021800
 8002580:	58021c00 	.word	0x58021c00
 8002584:	58022000 	.word	0x58022000
 8002588:	58022400 	.word	0x58022400
 800258c:	2300      	movs	r3, #0
 800258e:	69fa      	ldr	r2, [r7, #28]
 8002590:	f002 0203 	and.w	r2, r2, #3
 8002594:	0092      	lsls	r2, r2, #2
 8002596:	4093      	lsls	r3, r2
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800259e:	4938      	ldr	r1, [pc, #224]	; (8002680 <HAL_GPIO_Init+0x35c>)
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	3302      	adds	r3, #2
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80025d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80025da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	3301      	adds	r3, #1
 8002660:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	f47f ae63 	bne.w	8002338 <HAL_GPIO_Init+0x14>
  }
}
 8002672:	bf00      	nop
 8002674:	bf00      	nop
 8002676:	3724      	adds	r7, #36	; 0x24
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	58000400 	.word	0x58000400

08002684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	887b      	ldrh	r3, [r7, #2]
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
 80026a0:	e001      	b.n	80026a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_PWREx_ConfigSupply+0x70>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d00a      	beq.n	80026de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_PWREx_ConfigSupply+0x70>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d001      	beq.n	80026da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e01f      	b.n	800271a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e01d      	b.n	800271a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <HAL_PWREx_ConfigSupply+0x70>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f023 0207 	bic.w	r2, r3, #7
 80026e6:	490f      	ldr	r1, [pc, #60]	; (8002724 <HAL_PWREx_ConfigSupply+0x70>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80026ee:	f7ff fcf9 	bl	80020e4 <HAL_GetTick>
 80026f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026f4:	e009      	b.n	800270a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026f6:	f7ff fcf5 	bl	80020e4 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002704:	d901      	bls.n	800270a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e007      	b.n	800271a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_PWREx_ConfigSupply+0x70>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002716:	d1ee      	bne.n	80026f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	58024800 	.word	0x58024800

08002728 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08c      	sub	sp, #48	; 0x30
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d102      	bne.n	800273c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	f000 bc1c 	b.w	8002f74 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 8087 	beq.w	8002858 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800274a:	4b9e      	ldr	r3, [pc, #632]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002754:	4b9b      	ldr	r3, [pc, #620]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	2b10      	cmp	r3, #16
 800275e:	d007      	beq.n	8002770 <HAL_RCC_OscConfig+0x48>
 8002760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002762:	2b18      	cmp	r3, #24
 8002764:	d110      	bne.n	8002788 <HAL_RCC_OscConfig+0x60>
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d10b      	bne.n	8002788 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	4b94      	ldr	r3, [pc, #592]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d06c      	beq.n	8002856 <HAL_RCC_OscConfig+0x12e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d168      	bne.n	8002856 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e3f5      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d106      	bne.n	80027a0 <HAL_RCC_OscConfig+0x78>
 8002792:	4b8c      	ldr	r3, [pc, #560]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a8b      	ldr	r2, [pc, #556]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e02e      	b.n	80027fe <HAL_RCC_OscConfig+0xd6>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10c      	bne.n	80027c2 <HAL_RCC_OscConfig+0x9a>
 80027a8:	4b86      	ldr	r3, [pc, #536]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a85      	ldr	r2, [pc, #532]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80027ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	4b83      	ldr	r3, [pc, #524]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a82      	ldr	r2, [pc, #520]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80027ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	e01d      	b.n	80027fe <HAL_RCC_OscConfig+0xd6>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027ca:	d10c      	bne.n	80027e6 <HAL_RCC_OscConfig+0xbe>
 80027cc:	4b7d      	ldr	r3, [pc, #500]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a7c      	ldr	r2, [pc, #496]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80027d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	4b7a      	ldr	r3, [pc, #488]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a79      	ldr	r2, [pc, #484]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80027de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	e00b      	b.n	80027fe <HAL_RCC_OscConfig+0xd6>
 80027e6:	4b77      	ldr	r3, [pc, #476]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a76      	ldr	r2, [pc, #472]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80027ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	4b74      	ldr	r3, [pc, #464]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a73      	ldr	r2, [pc, #460]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80027f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d013      	beq.n	800282e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002806:	f7ff fc6d 	bl	80020e4 <HAL_GetTick>
 800280a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280e:	f7ff fc69 	bl	80020e4 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b64      	cmp	r3, #100	; 0x64
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e3a9      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002820:	4b68      	ldr	r3, [pc, #416]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0xe6>
 800282c:	e014      	b.n	8002858 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7ff fc59 	bl	80020e4 <HAL_GetTick>
 8002832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002836:	f7ff fc55 	bl	80020e4 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b64      	cmp	r3, #100	; 0x64
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e395      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002848:	4b5e      	ldr	r3, [pc, #376]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f0      	bne.n	8002836 <HAL_RCC_OscConfig+0x10e>
 8002854:	e000      	b.n	8002858 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002856:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80ca 	beq.w	80029fa <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002866:	4b57      	ldr	r3, [pc, #348]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800286e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002870:	4b54      	ldr	r3, [pc, #336]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d007      	beq.n	800288c <HAL_RCC_OscConfig+0x164>
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	2b18      	cmp	r3, #24
 8002880:	d156      	bne.n	8002930 <HAL_RCC_OscConfig+0x208>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d151      	bne.n	8002930 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800288c:	4b4d      	ldr	r3, [pc, #308]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_OscConfig+0x17c>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e367      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028a4:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f023 0219 	bic.w	r2, r3, #25
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4944      	ldr	r1, [pc, #272]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028b6:	f7ff fc15 	bl	80020e4 <HAL_GetTick>
 80028ba:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028be:	f7ff fc11 	bl	80020e4 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e351      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028d0:	4b3c      	ldr	r3, [pc, #240]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	f7ff fc32 	bl	8002144 <HAL_GetREVID>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d817      	bhi.n	800291a <HAL_RCC_OscConfig+0x1f2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b40      	cmp	r3, #64	; 0x40
 80028f0:	d108      	bne.n	8002904 <HAL_RCC_OscConfig+0x1dc>
 80028f2:	4b34      	ldr	r3, [pc, #208]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80028fa:	4a32      	ldr	r2, [pc, #200]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80028fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002900:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002902:	e07a      	b.n	80029fa <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4b2f      	ldr	r3, [pc, #188]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	031b      	lsls	r3, r3, #12
 8002912:	492c      	ldr	r1, [pc, #176]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002918:	e06f      	b.n	80029fa <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291a:	4b2a      	ldr	r3, [pc, #168]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	061b      	lsls	r3, r3, #24
 8002928:	4926      	ldr	r1, [pc, #152]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800292e:	e064      	b.n	80029fa <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d047      	beq.n	80029c8 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 0219 	bic.w	r2, r3, #25
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	491f      	ldr	r1, [pc, #124]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7ff fbcb 	bl	80020e4 <HAL_GetTick>
 800294e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002952:	f7ff fbc7 	bl	80020e4 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e307      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002964:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	f7ff fbe8 	bl	8002144 <HAL_GetREVID>
 8002974:	4603      	mov	r3, r0
 8002976:	f241 0203 	movw	r2, #4099	; 0x1003
 800297a:	4293      	cmp	r3, r2
 800297c:	d817      	bhi.n	80029ae <HAL_RCC_OscConfig+0x286>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2b40      	cmp	r3, #64	; 0x40
 8002984:	d108      	bne.n	8002998 <HAL_RCC_OscConfig+0x270>
 8002986:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800298e:	4a0d      	ldr	r2, [pc, #52]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 8002990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002994:	6053      	str	r3, [r2, #4]
 8002996:	e030      	b.n	80029fa <HAL_RCC_OscConfig+0x2d2>
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	031b      	lsls	r3, r3, #12
 80029a6:	4907      	ldr	r1, [pc, #28]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
 80029ac:	e025      	b.n	80029fa <HAL_RCC_OscConfig+0x2d2>
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	061b      	lsls	r3, r3, #24
 80029bc:	4901      	ldr	r1, [pc, #4]	; (80029c4 <HAL_RCC_OscConfig+0x29c>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
 80029c2:	e01a      	b.n	80029fa <HAL_RCC_OscConfig+0x2d2>
 80029c4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c8:	4b9e      	ldr	r3, [pc, #632]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a9d      	ldr	r2, [pc, #628]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7ff fb86 	bl	80020e4 <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029dc:	f7ff fb82 	bl	80020e4 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e2c2      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029ee:	4b95      	ldr	r3, [pc, #596]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 80a9 	beq.w	8002b5a <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a08:	4b8e      	ldr	r3, [pc, #568]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a10:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a12:	4b8c      	ldr	r3, [pc, #560]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d007      	beq.n	8002a2e <HAL_RCC_OscConfig+0x306>
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b18      	cmp	r3, #24
 8002a22:	d13a      	bne.n	8002a9a <HAL_RCC_OscConfig+0x372>
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d135      	bne.n	8002a9a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a2e:	4b85      	ldr	r3, [pc, #532]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_RCC_OscConfig+0x31e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	2b80      	cmp	r3, #128	; 0x80
 8002a40:	d001      	beq.n	8002a46 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e296      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a46:	f7ff fb7d 	bl	8002144 <HAL_GetREVID>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d817      	bhi.n	8002a84 <HAL_RCC_OscConfig+0x35c>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d108      	bne.n	8002a6e <HAL_RCC_OscConfig+0x346>
 8002a5c:	4b79      	ldr	r3, [pc, #484]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a64:	4a77      	ldr	r2, [pc, #476]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002a66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a6a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a6c:	e075      	b.n	8002b5a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a6e:	4b75      	ldr	r3, [pc, #468]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	069b      	lsls	r3, r3, #26
 8002a7c:	4971      	ldr	r1, [pc, #452]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a82:	e06a      	b.n	8002b5a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a84:	4b6f      	ldr	r3, [pc, #444]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	061b      	lsls	r3, r3, #24
 8002a92:	496c      	ldr	r1, [pc, #432]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a98:	e05f      	b.n	8002b5a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d042      	beq.n	8002b28 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002aa2:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a67      	ldr	r2, [pc, #412]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aae:	f7ff fb19 	bl	80020e4 <HAL_GetTick>
 8002ab2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ab6:	f7ff fb15 	bl	80020e4 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e255      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ac8:	4b5e      	ldr	r3, [pc, #376]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ad4:	f7ff fb36 	bl	8002144 <HAL_GetREVID>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d817      	bhi.n	8002b12 <HAL_RCC_OscConfig+0x3ea>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	d108      	bne.n	8002afc <HAL_RCC_OscConfig+0x3d4>
 8002aea:	4b56      	ldr	r3, [pc, #344]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002af2:	4a54      	ldr	r2, [pc, #336]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002af4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002af8:	6053      	str	r3, [r2, #4]
 8002afa:	e02e      	b.n	8002b5a <HAL_RCC_OscConfig+0x432>
 8002afc:	4b51      	ldr	r3, [pc, #324]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	069b      	lsls	r3, r3, #26
 8002b0a:	494e      	ldr	r1, [pc, #312]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
 8002b10:	e023      	b.n	8002b5a <HAL_RCC_OscConfig+0x432>
 8002b12:	4b4c      	ldr	r3, [pc, #304]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	061b      	lsls	r3, r3, #24
 8002b20:	4948      	ldr	r1, [pc, #288]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60cb      	str	r3, [r1, #12]
 8002b26:	e018      	b.n	8002b5a <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b28:	4b46      	ldr	r3, [pc, #280]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a45      	ldr	r2, [pc, #276]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7ff fad6 	bl	80020e4 <HAL_GetTick>
 8002b38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b3c:	f7ff fad2 	bl	80020e4 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e212      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b4e:	4b3d      	ldr	r3, [pc, #244]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d036      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d019      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6e:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b72:	4a34      	ldr	r2, [pc, #208]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7a:	f7ff fab3 	bl	80020e4 <HAL_GetTick>
 8002b7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b82:	f7ff faaf 	bl	80020e4 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e1ef      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b94:	4b2b      	ldr	r3, [pc, #172]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x45a>
 8002ba0:	e018      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba2:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba6:	4a27      	ldr	r2, [pc, #156]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002ba8:	f023 0301 	bic.w	r3, r3, #1
 8002bac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bae:	f7ff fa99 	bl	80020e4 <HAL_GetTick>
 8002bb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb6:	f7ff fa95 	bl	80020e4 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e1d5      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bc8:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f0      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d039      	beq.n	8002c54 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d019      	beq.n	8002c1c <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002be8:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002bee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bf2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bf4:	f7ff fa76 	bl	80020e4 <HAL_GetTick>
 8002bf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bfc:	f7ff fa72 	bl	80020e4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e1b2      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x4d4>
 8002c1a:	e01b      	b.n	8002c54 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a08      	ldr	r2, [pc, #32]	; (8002c44 <HAL_RCC_OscConfig+0x51c>)
 8002c22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c28:	f7ff fa5c 	bl	80020e4 <HAL_GetTick>
 8002c2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c30:	f7ff fa58 	bl	80020e4 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d904      	bls.n	8002c48 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e198      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
 8002c42:	bf00      	nop
 8002c44:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c48:	4ba3      	ldr	r3, [pc, #652]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1ed      	bne.n	8002c30 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8081 	beq.w	8002d64 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c62:	4b9e      	ldr	r3, [pc, #632]	; (8002edc <HAL_RCC_OscConfig+0x7b4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a9d      	ldr	r2, [pc, #628]	; (8002edc <HAL_RCC_OscConfig+0x7b4>)
 8002c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c6e:	f7ff fa39 	bl	80020e4 <HAL_GetTick>
 8002c72:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c76:	f7ff fa35 	bl	80020e4 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b64      	cmp	r3, #100	; 0x64
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e175      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c88:	4b94      	ldr	r3, [pc, #592]	; (8002edc <HAL_RCC_OscConfig+0x7b4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d106      	bne.n	8002caa <HAL_RCC_OscConfig+0x582>
 8002c9c:	4b8e      	ldr	r3, [pc, #568]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	4a8d      	ldr	r2, [pc, #564]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca8:	e02d      	b.n	8002d06 <HAL_RCC_OscConfig+0x5de>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x5a4>
 8002cb2:	4b89      	ldr	r3, [pc, #548]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb6:	4a88      	ldr	r2, [pc, #544]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cbe:	4b86      	ldr	r3, [pc, #536]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc2:	4a85      	ldr	r2, [pc, #532]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002cc4:	f023 0304 	bic.w	r3, r3, #4
 8002cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cca:	e01c      	b.n	8002d06 <HAL_RCC_OscConfig+0x5de>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d10c      	bne.n	8002cee <HAL_RCC_OscConfig+0x5c6>
 8002cd4:	4b80      	ldr	r3, [pc, #512]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	4a7f      	ldr	r2, [pc, #508]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce0:	4b7d      	ldr	r3, [pc, #500]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	4a7c      	ldr	r2, [pc, #496]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6713      	str	r3, [r2, #112]	; 0x70
 8002cec:	e00b      	b.n	8002d06 <HAL_RCC_OscConfig+0x5de>
 8002cee:	4b7a      	ldr	r3, [pc, #488]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	4a79      	ldr	r2, [pc, #484]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfa:	4b77      	ldr	r3, [pc, #476]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfe:	4a76      	ldr	r2, [pc, #472]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002d00:	f023 0304 	bic.w	r3, r3, #4
 8002d04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d015      	beq.n	8002d3a <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0e:	f7ff f9e9 	bl	80020e4 <HAL_GetTick>
 8002d12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d16:	f7ff f9e5 	bl	80020e4 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e123      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d2c:	4b6a      	ldr	r3, [pc, #424]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ee      	beq.n	8002d16 <HAL_RCC_OscConfig+0x5ee>
 8002d38:	e014      	b.n	8002d64 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3a:	f7ff f9d3 	bl	80020e4 <HAL_GetTick>
 8002d3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d40:	e00a      	b.n	8002d58 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d42:	f7ff f9cf 	bl	80020e4 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e10d      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d58:	4b5f      	ldr	r3, [pc, #380]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1ee      	bne.n	8002d42 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 8102 	beq.w	8002f72 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d6e:	4b5a      	ldr	r3, [pc, #360]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d76:	2b18      	cmp	r3, #24
 8002d78:	f000 80bd 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	f040 8095 	bne.w	8002eb0 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d86:	4b54      	ldr	r3, [pc, #336]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a53      	ldr	r2, [pc, #332]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002d8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d92:	f7ff f9a7 	bl	80020e4 <HAL_GetTick>
 8002d96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7ff f9a3 	bl	80020e4 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e0e3      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dac:	4b4a      	ldr	r3, [pc, #296]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002db8:	4b47      	ldr	r3, [pc, #284]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dbc:	4b48      	ldr	r3, [pc, #288]	; (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002dc8:	0112      	lsls	r2, r2, #4
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	4942      	ldr	r1, [pc, #264]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	628b      	str	r3, [r1, #40]	; 0x28
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de0:	3b01      	subs	r3, #1
 8002de2:	025b      	lsls	r3, r3, #9
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	3b01      	subs	r3, #1
 8002dee:	041b      	lsls	r3, r3, #16
 8002df0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	061b      	lsls	r3, r3, #24
 8002dfe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002e02:	4935      	ldr	r1, [pc, #212]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002e08:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	4a32      	ldr	r2, [pc, #200]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e14:	4b30      	ldr	r3, [pc, #192]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e18:	4b32      	ldr	r3, [pc, #200]	; (8002ee4 <HAL_RCC_OscConfig+0x7bc>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e20:	00d2      	lsls	r2, r2, #3
 8002e22:	492d      	ldr	r1, [pc, #180]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e28:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	f023 020c 	bic.w	r2, r3, #12
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	4928      	ldr	r1, [pc, #160]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e3a:	4b27      	ldr	r3, [pc, #156]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	f023 0202 	bic.w	r2, r3, #2
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e46:	4924      	ldr	r1, [pc, #144]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e4c:	4b22      	ldr	r3, [pc, #136]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	4a21      	ldr	r2, [pc, #132]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e58:	4b1f      	ldr	r3, [pc, #124]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	4a1e      	ldr	r2, [pc, #120]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e64:	4b1c      	ldr	r3, [pc, #112]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	4a1b      	ldr	r2, [pc, #108]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002e70:	4b19      	ldr	r3, [pc, #100]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e7c:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a15      	ldr	r2, [pc, #84]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7ff f92c 	bl	80020e4 <HAL_GetTick>
 8002e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e90:	f7ff f928 	bl	80020e4 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e068      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x768>
 8002eae:	e060      	b.n	8002f72 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb0:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a08      	ldr	r2, [pc, #32]	; (8002ed8 <HAL_RCC_OscConfig+0x7b0>)
 8002eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7ff f912 	bl	80020e4 <HAL_GetTick>
 8002ec0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ec2:	e011      	b.n	8002ee8 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7ff f90e 	bl	80020e4 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d90a      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e04e      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
 8002ed6:	bf00      	nop
 8002ed8:	58024400 	.word	0x58024400
 8002edc:	58024800 	.word	0x58024800
 8002ee0:	fffffc0c 	.word	0xfffffc0c
 8002ee4:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ee8:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <HAL_RCC_OscConfig+0x854>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1e7      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x79c>
 8002ef4:	e03d      	b.n	8002f72 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ef6:	4b21      	ldr	r3, [pc, #132]	; (8002f7c <HAL_RCC_OscConfig+0x854>)
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002efc:	4b1f      	ldr	r3, [pc, #124]	; (8002f7c <HAL_RCC_OscConfig+0x854>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d031      	beq.n	8002f6e <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f003 0203 	and.w	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d12a      	bne.n	8002f6e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d122      	bne.n	8002f6e <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d11a      	bne.n	8002f6e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	0a5b      	lsrs	r3, r3, #9
 8002f3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f44:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d111      	bne.n	8002f6e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	0c1b      	lsrs	r3, r3, #16
 8002f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f56:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d108      	bne.n	8002f6e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	0e1b      	lsrs	r3, r3, #24
 8002f60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f68:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3730      	adds	r7, #48	; 0x30
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	58024400 	.word	0x58024400

08002f80 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e19c      	b.n	80032ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f94:	4b8a      	ldr	r3, [pc, #552]	; (80031c0 <HAL_RCC_ClockConfig+0x240>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d910      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b87      	ldr	r3, [pc, #540]	; (80031c0 <HAL_RCC_ClockConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 020f 	bic.w	r2, r3, #15
 8002faa:	4985      	ldr	r1, [pc, #532]	; (80031c0 <HAL_RCC_ClockConfig+0x240>)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb2:	4b83      	ldr	r3, [pc, #524]	; (80031c0 <HAL_RCC_ClockConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e184      	b.n	80032ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d010      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	4b7b      	ldr	r3, [pc, #492]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d908      	bls.n	8002ff2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fe0:	4b78      	ldr	r3, [pc, #480]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	4975      	ldr	r1, [pc, #468]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d010      	beq.n	8003020 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	4b70      	ldr	r3, [pc, #448]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800300a:	429a      	cmp	r2, r3
 800300c:	d908      	bls.n	8003020 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800300e:	4b6d      	ldr	r3, [pc, #436]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	496a      	ldr	r1, [pc, #424]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 800301c:	4313      	orrs	r3, r2
 800301e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0310 	and.w	r3, r3, #16
 8003028:	2b00      	cmp	r3, #0
 800302a:	d010      	beq.n	800304e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699a      	ldr	r2, [r3, #24]
 8003030:	4b64      	ldr	r3, [pc, #400]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003038:	429a      	cmp	r2, r3
 800303a:	d908      	bls.n	800304e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800303c:	4b61      	ldr	r3, [pc, #388]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	495e      	ldr	r1, [pc, #376]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 800304a:	4313      	orrs	r3, r2
 800304c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	d010      	beq.n	800307c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69da      	ldr	r2, [r3, #28]
 800305e:	4b59      	ldr	r3, [pc, #356]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003066:	429a      	cmp	r2, r3
 8003068:	d908      	bls.n	800307c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800306a:	4b56      	ldr	r3, [pc, #344]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	4953      	ldr	r1, [pc, #332]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 8003078:	4313      	orrs	r3, r2
 800307a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d010      	beq.n	80030aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	4b4d      	ldr	r3, [pc, #308]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	429a      	cmp	r2, r3
 8003096:	d908      	bls.n	80030aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003098:	4b4a      	ldr	r3, [pc, #296]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f023 020f 	bic.w	r2, r3, #15
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4947      	ldr	r1, [pc, #284]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d055      	beq.n	8003162 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030b6:	4b43      	ldr	r3, [pc, #268]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	4940      	ldr	r1, [pc, #256]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030d0:	4b3c      	ldr	r3, [pc, #240]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d121      	bne.n	8003120 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0f6      	b.n	80032ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d107      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030e8:	4b36      	ldr	r3, [pc, #216]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d115      	bne.n	8003120 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0ea      	b.n	80032ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d107      	bne.n	8003110 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003100:	4b30      	ldr	r3, [pc, #192]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d109      	bne.n	8003120 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0de      	b.n	80032ce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003110:	4b2c      	ldr	r3, [pc, #176]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0d6      	b.n	80032ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003120:	4b28      	ldr	r3, [pc, #160]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f023 0207 	bic.w	r2, r3, #7
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4925      	ldr	r1, [pc, #148]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 800312e:	4313      	orrs	r3, r2
 8003130:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003132:	f7fe ffd7 	bl	80020e4 <HAL_GetTick>
 8003136:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003138:	e00a      	b.n	8003150 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800313a:	f7fe ffd3 	bl	80020e4 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	f241 3288 	movw	r2, #5000	; 0x1388
 8003148:	4293      	cmp	r3, r2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e0be      	b.n	80032ce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003150:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	429a      	cmp	r2, r3
 8003160:	d1eb      	bne.n	800313a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d010      	beq.n	8003190 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	429a      	cmp	r2, r3
 800317c:	d208      	bcs.n	8003190 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	f023 020f 	bic.w	r2, r3, #15
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	490e      	ldr	r1, [pc, #56]	; (80031c4 <HAL_RCC_ClockConfig+0x244>)
 800318c:	4313      	orrs	r3, r2
 800318e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <HAL_RCC_ClockConfig+0x240>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d214      	bcs.n	80031c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <HAL_RCC_ClockConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 020f 	bic.w	r2, r3, #15
 80031a6:	4906      	ldr	r1, [pc, #24]	; (80031c0 <HAL_RCC_ClockConfig+0x240>)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <HAL_RCC_ClockConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d005      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e086      	b.n	80032ce <HAL_RCC_ClockConfig+0x34e>
 80031c0:	52002000 	.word	0x52002000
 80031c4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d010      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	4b3f      	ldr	r3, [pc, #252]	; (80032d8 <HAL_RCC_ClockConfig+0x358>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d208      	bcs.n	80031f6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031e4:	4b3c      	ldr	r3, [pc, #240]	; (80032d8 <HAL_RCC_ClockConfig+0x358>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	4939      	ldr	r1, [pc, #228]	; (80032d8 <HAL_RCC_ClockConfig+0x358>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d010      	beq.n	8003224 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695a      	ldr	r2, [r3, #20]
 8003206:	4b34      	ldr	r3, [pc, #208]	; (80032d8 <HAL_RCC_ClockConfig+0x358>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800320e:	429a      	cmp	r2, r3
 8003210:	d208      	bcs.n	8003224 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003212:	4b31      	ldr	r3, [pc, #196]	; (80032d8 <HAL_RCC_ClockConfig+0x358>)
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	492e      	ldr	r1, [pc, #184]	; (80032d8 <HAL_RCC_ClockConfig+0x358>)
 8003220:	4313      	orrs	r3, r2
 8003222:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b00      	cmp	r3, #0
 800322e:	d010      	beq.n	8003252 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699a      	ldr	r2, [r3, #24]
 8003234:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <HAL_RCC_ClockConfig+0x358>)
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800323c:	429a      	cmp	r2, r3
 800323e:	d208      	bcs.n	8003252 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003240:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <HAL_RCC_ClockConfig+0x358>)
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	4922      	ldr	r1, [pc, #136]	; (80032d8 <HAL_RCC_ClockConfig+0x358>)
 800324e:	4313      	orrs	r3, r2
 8003250:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b00      	cmp	r3, #0
 800325c:	d010      	beq.n	8003280 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69da      	ldr	r2, [r3, #28]
 8003262:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <HAL_RCC_ClockConfig+0x358>)
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800326a:	429a      	cmp	r2, r3
 800326c:	d208      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800326e:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <HAL_RCC_ClockConfig+0x358>)
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	4917      	ldr	r1, [pc, #92]	; (80032d8 <HAL_RCC_ClockConfig+0x358>)
 800327c:	4313      	orrs	r3, r2
 800327e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003280:	f000 f834 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 8003284:	4602      	mov	r2, r0
 8003286:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <HAL_RCC_ClockConfig+0x358>)
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	4912      	ldr	r1, [pc, #72]	; (80032dc <HAL_RCC_ClockConfig+0x35c>)
 8003292:	5ccb      	ldrb	r3, [r1, r3]
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
 800329c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800329e:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <HAL_RCC_ClockConfig+0x358>)
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <HAL_RCC_ClockConfig+0x35c>)
 80032a8:	5cd3      	ldrb	r3, [r2, r3]
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
 80032b4:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <HAL_RCC_ClockConfig+0x360>)
 80032b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032b8:	4a0a      	ldr	r2, [pc, #40]	; (80032e4 <HAL_RCC_ClockConfig+0x364>)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <HAL_RCC_ClockConfig+0x368>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fec4 	bl	8002050 <HAL_InitTick>
 80032c8:	4603      	mov	r3, r0
 80032ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	58024400 	.word	0x58024400
 80032dc:	08007394 	.word	0x08007394
 80032e0:	2400006c 	.word	0x2400006c
 80032e4:	24000068 	.word	0x24000068
 80032e8:	24000070 	.word	0x24000070

080032ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b089      	sub	sp, #36	; 0x24
 80032f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032f2:	4bb3      	ldr	r3, [pc, #716]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032fa:	2b18      	cmp	r3, #24
 80032fc:	f200 8155 	bhi.w	80035aa <HAL_RCC_GetSysClockFreq+0x2be>
 8003300:	a201      	add	r2, pc, #4	; (adr r2, 8003308 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003306:	bf00      	nop
 8003308:	0800336d 	.word	0x0800336d
 800330c:	080035ab 	.word	0x080035ab
 8003310:	080035ab 	.word	0x080035ab
 8003314:	080035ab 	.word	0x080035ab
 8003318:	080035ab 	.word	0x080035ab
 800331c:	080035ab 	.word	0x080035ab
 8003320:	080035ab 	.word	0x080035ab
 8003324:	080035ab 	.word	0x080035ab
 8003328:	08003393 	.word	0x08003393
 800332c:	080035ab 	.word	0x080035ab
 8003330:	080035ab 	.word	0x080035ab
 8003334:	080035ab 	.word	0x080035ab
 8003338:	080035ab 	.word	0x080035ab
 800333c:	080035ab 	.word	0x080035ab
 8003340:	080035ab 	.word	0x080035ab
 8003344:	080035ab 	.word	0x080035ab
 8003348:	08003399 	.word	0x08003399
 800334c:	080035ab 	.word	0x080035ab
 8003350:	080035ab 	.word	0x080035ab
 8003354:	080035ab 	.word	0x080035ab
 8003358:	080035ab 	.word	0x080035ab
 800335c:	080035ab 	.word	0x080035ab
 8003360:	080035ab 	.word	0x080035ab
 8003364:	080035ab 	.word	0x080035ab
 8003368:	0800339f 	.word	0x0800339f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800336c:	4b94      	ldr	r3, [pc, #592]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b00      	cmp	r3, #0
 8003376:	d009      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003378:	4b91      	ldr	r3, [pc, #580]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	08db      	lsrs	r3, r3, #3
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	4a90      	ldr	r2, [pc, #576]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
 8003388:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800338a:	e111      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800338c:	4b8d      	ldr	r3, [pc, #564]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800338e:	61bb      	str	r3, [r7, #24]
    break;
 8003390:	e10e      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003392:	4b8d      	ldr	r3, [pc, #564]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003394:	61bb      	str	r3, [r7, #24]
    break;
 8003396:	e10b      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003398:	4b8c      	ldr	r3, [pc, #560]	; (80035cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800339a:	61bb      	str	r3, [r7, #24]
    break;
 800339c:	e108      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800339e:	4b88      	ldr	r3, [pc, #544]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80033a8:	4b85      	ldr	r3, [pc, #532]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033b4:	4b82      	ldr	r3, [pc, #520]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80033be:	4b80      	ldr	r3, [pc, #512]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c2:	08db      	lsrs	r3, r3, #3
 80033c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	fb02 f303 	mul.w	r3, r2, r3
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80e1 	beq.w	80035a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	f000 8083 	beq.w	80034f0 <HAL_RCC_GetSysClockFreq+0x204>
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	f200 80a1 	bhi.w	8003534 <HAL_RCC_GetSysClockFreq+0x248>
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x114>
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d056      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80033fe:	e099      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003400:	4b6f      	ldr	r3, [pc, #444]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0320 	and.w	r3, r3, #32
 8003408:	2b00      	cmp	r3, #0
 800340a:	d02d      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800340c:	4b6c      	ldr	r3, [pc, #432]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	08db      	lsrs	r3, r3, #3
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	4a6b      	ldr	r2, [pc, #428]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
 800341c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	ee07 3a90 	vmov	s15, r3
 8003424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003436:	4b62      	ldr	r3, [pc, #392]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003446:	ed97 6a02 	vldr	s12, [r7, #8]
 800344a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80035d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800344e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800345a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800345e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003462:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003466:	e087      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	ee07 3a90 	vmov	s15, r3
 800346e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003472:	eddf 6a58 	vldr	s13, [pc, #352]	; 80035d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800347a:	4b51      	ldr	r3, [pc, #324]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800348a:	ed97 6a02 	vldr	s12, [r7, #8]
 800348e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80035d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800349a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800349e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034aa:	e065      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	ee07 3a90 	vmov	s15, r3
 80034b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80035d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034be:	4b40      	ldr	r3, [pc, #256]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80034d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80035d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034ee:	e043      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80035dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80034fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003502:	4b2f      	ldr	r3, [pc, #188]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003512:	ed97 6a02 	vldr	s12, [r7, #8]
 8003516:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80035d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800351a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800351e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800352a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800352e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003532:	e021      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80035d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003546:	4b1e      	ldr	r3, [pc, #120]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003556:	ed97 6a02 	vldr	s12, [r7, #8]
 800355a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80035d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800355e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800356a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800356e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003576:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003578:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	0a5b      	lsrs	r3, r3, #9
 800357e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003582:	3301      	adds	r3, #1
 8003584:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	ee07 3a90 	vmov	s15, r3
 800358c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003590:	edd7 6a07 	vldr	s13, [r7, #28]
 8003594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800359c:	ee17 3a90 	vmov	r3, s15
 80035a0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80035a2:	e005      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61bb      	str	r3, [r7, #24]
    break;
 80035a8:	e002      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035ac:	61bb      	str	r3, [r7, #24]
    break;
 80035ae:	bf00      	nop
  }

  return sysclockfreq;
 80035b0:	69bb      	ldr	r3, [r7, #24]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3724      	adds	r7, #36	; 0x24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	58024400 	.word	0x58024400
 80035c4:	03d09000 	.word	0x03d09000
 80035c8:	003d0900 	.word	0x003d0900
 80035cc:	017d7840 	.word	0x017d7840
 80035d0:	46000000 	.word	0x46000000
 80035d4:	4c742400 	.word	0x4c742400
 80035d8:	4a742400 	.word	0x4a742400
 80035dc:	4bbebc20 	.word	0x4bbebc20

080035e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035e6:	f7ff fe81 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 80035ea:	4602      	mov	r2, r0
 80035ec:	4b10      	ldr	r3, [pc, #64]	; (8003630 <HAL_RCC_GetHCLKFreq+0x50>)
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	0a1b      	lsrs	r3, r3, #8
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	490f      	ldr	r1, [pc, #60]	; (8003634 <HAL_RCC_GetHCLKFreq+0x54>)
 80035f8:	5ccb      	ldrb	r3, [r1, r3]
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003602:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003604:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <HAL_RCC_GetHCLKFreq+0x50>)
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	4a09      	ldr	r2, [pc, #36]	; (8003634 <HAL_RCC_GetHCLKFreq+0x54>)
 800360e:	5cd3      	ldrb	r3, [r2, r3]
 8003610:	f003 031f 	and.w	r3, r3, #31
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	fa22 f303 	lsr.w	r3, r2, r3
 800361a:	4a07      	ldr	r2, [pc, #28]	; (8003638 <HAL_RCC_GetHCLKFreq+0x58>)
 800361c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800361e:	4a07      	ldr	r2, [pc, #28]	; (800363c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <HAL_RCC_GetHCLKFreq+0x58>)
 8003626:	681b      	ldr	r3, [r3, #0]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	58024400 	.word	0x58024400
 8003634:	08007394 	.word	0x08007394
 8003638:	2400006c 	.word	0x2400006c
 800363c:	24000068 	.word	0x24000068

08003640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003644:	f7ff ffcc 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_RCC_GetPCLK1Freq+0x24>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	091b      	lsrs	r3, r3, #4
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4904      	ldr	r1, [pc, #16]	; (8003668 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	58024400 	.word	0x58024400
 8003668:	08007394 	.word	0x08007394

0800366c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003670:	f7ff ffb6 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 8003674:	4602      	mov	r2, r0
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	0a1b      	lsrs	r3, r3, #8
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	4904      	ldr	r1, [pc, #16]	; (8003694 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003682:	5ccb      	ldrb	r3, [r1, r3]
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800368c:	4618      	mov	r0, r3
 800368e:	bd80      	pop	{r7, pc}
 8003690:	58024400 	.word	0x58024400
 8003694:	08007394 	.word	0x08007394

08003698 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036a0:	2300      	movs	r3, #0
 80036a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036a4:	2300      	movs	r3, #0
 80036a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d03f      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036bc:	d02a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036c2:	d824      	bhi.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036c8:	d018      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036ce:	d81e      	bhi.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036d8:	d007      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036da:	e018      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036dc:	4bab      	ldr	r3, [pc, #684]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	4aaa      	ldr	r2, [pc, #680]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036e8:	e015      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	2102      	movs	r1, #2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f001 f9cf 	bl	8004a94 <RCCEx_PLL2_Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036fa:	e00c      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3324      	adds	r3, #36	; 0x24
 8003700:	2102      	movs	r1, #2
 8003702:	4618      	mov	r0, r3
 8003704:	f001 fa78 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800370c:	e003      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	75fb      	strb	r3, [r7, #23]
      break;
 8003712:	e000      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003716:	7dfb      	ldrb	r3, [r7, #23]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d109      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800371c:	4b9b      	ldr	r3, [pc, #620]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800371e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003720:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003728:	4998      	ldr	r1, [pc, #608]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800372a:	4313      	orrs	r3, r2
 800372c:	650b      	str	r3, [r1, #80]	; 0x50
 800372e:	e001      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d03d      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003744:	2b04      	cmp	r3, #4
 8003746:	d826      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003748:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800374a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374e:	bf00      	nop
 8003750:	08003765 	.word	0x08003765
 8003754:	08003773 	.word	0x08003773
 8003758:	08003785 	.word	0x08003785
 800375c:	0800379d 	.word	0x0800379d
 8003760:	0800379d 	.word	0x0800379d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003764:	4b89      	ldr	r3, [pc, #548]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	4a88      	ldr	r2, [pc, #544]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800376a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800376e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003770:	e015      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3304      	adds	r3, #4
 8003776:	2100      	movs	r1, #0
 8003778:	4618      	mov	r0, r3
 800377a:	f001 f98b 	bl	8004a94 <RCCEx_PLL2_Config>
 800377e:	4603      	mov	r3, r0
 8003780:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003782:	e00c      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3324      	adds	r3, #36	; 0x24
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f001 fa34 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003794:	e003      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	75fb      	strb	r3, [r7, #23]
      break;
 800379a:	e000      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800379c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800379e:	7dfb      	ldrb	r3, [r7, #23]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d109      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037a4:	4b79      	ldr	r3, [pc, #484]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a8:	f023 0207 	bic.w	r2, r3, #7
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b0:	4976      	ldr	r1, [pc, #472]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	650b      	str	r3, [r1, #80]	; 0x50
 80037b6:	e001      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
 80037ba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d042      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d0:	d02b      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80037d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d6:	d825      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80037d8:	2bc0      	cmp	r3, #192	; 0xc0
 80037da:	d028      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80037dc:	2bc0      	cmp	r3, #192	; 0xc0
 80037de:	d821      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80037e0:	2b80      	cmp	r3, #128	; 0x80
 80037e2:	d016      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80037e4:	2b80      	cmp	r3, #128	; 0x80
 80037e6:	d81d      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80037ec:	2b40      	cmp	r3, #64	; 0x40
 80037ee:	d007      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80037f0:	e018      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f2:	4b66      	ldr	r3, [pc, #408]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	4a65      	ldr	r2, [pc, #404]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037fe:	e017      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f001 f944 	bl	8004a94 <RCCEx_PLL2_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003810:	e00e      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3324      	adds	r3, #36	; 0x24
 8003816:	2100      	movs	r1, #0
 8003818:	4618      	mov	r0, r3
 800381a:	f001 f9ed 	bl	8004bf8 <RCCEx_PLL3_Config>
 800381e:	4603      	mov	r3, r0
 8003820:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003822:	e005      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	75fb      	strb	r3, [r7, #23]
      break;
 8003828:	e002      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800382a:	bf00      	nop
 800382c:	e000      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800382e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003836:	4b55      	ldr	r3, [pc, #340]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003842:	4952      	ldr	r1, [pc, #328]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003844:	4313      	orrs	r3, r2
 8003846:	650b      	str	r3, [r1, #80]	; 0x50
 8003848:	e001      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384a:	7dfb      	ldrb	r3, [r7, #23]
 800384c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003856:	2b00      	cmp	r3, #0
 8003858:	d049      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003860:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003864:	d030      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003866:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800386a:	d82a      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800386c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003870:	d02c      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003872:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003876:	d824      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003878:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800387c:	d018      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800387e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003882:	d81e      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003888:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800388c:	d007      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800388e:	e018      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003890:	4b3e      	ldr	r3, [pc, #248]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	4a3d      	ldr	r2, [pc, #244]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800389a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800389c:	e017      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3304      	adds	r3, #4
 80038a2:	2100      	movs	r1, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f001 f8f5 	bl	8004a94 <RCCEx_PLL2_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80038ae:	e00e      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3324      	adds	r3, #36	; 0x24
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f001 f99e 	bl	8004bf8 <RCCEx_PLL3_Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038c0:	e005      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	75fb      	strb	r3, [r7, #23]
      break;
 80038c6:	e002      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80038c8:	bf00      	nop
 80038ca:	e000      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80038cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ce:	7dfb      	ldrb	r3, [r7, #23]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10a      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038d4:	4b2d      	ldr	r3, [pc, #180]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038e2:	492a      	ldr	r1, [pc, #168]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	658b      	str	r3, [r1, #88]	; 0x58
 80038e8:	e001      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
 80038ec:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d04c      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003904:	d030      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003906:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800390a:	d82a      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800390c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003910:	d02c      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003912:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003916:	d824      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003918:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800391c:	d018      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800391e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003922:	d81e      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800392c:	d007      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800392e:	e018      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003930:	4b16      	ldr	r3, [pc, #88]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	4a15      	ldr	r2, [pc, #84]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800393a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800393c:	e017      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3304      	adds	r3, #4
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f001 f8a5 	bl	8004a94 <RCCEx_PLL2_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800394e:	e00e      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3324      	adds	r3, #36	; 0x24
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f001 f94e 	bl	8004bf8 <RCCEx_PLL3_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003960:	e005      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	75fb      	strb	r3, [r7, #23]
      break;
 8003966:	e002      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003968:	bf00      	nop
 800396a:	e000      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800396c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800396e:	7dfb      	ldrb	r3, [r7, #23]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10d      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003982:	4902      	ldr	r1, [pc, #8]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003984:	4313      	orrs	r3, r2
 8003986:	658b      	str	r3, [r1, #88]	; 0x58
 8003988:	e004      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800398a:	bf00      	nop
 800398c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003990:	7dfb      	ldrb	r3, [r7, #23]
 8003992:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d032      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a4:	2b30      	cmp	r3, #48	; 0x30
 80039a6:	d01c      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80039a8:	2b30      	cmp	r3, #48	; 0x30
 80039aa:	d817      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x344>
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	d00c      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x332>
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d813      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x344>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d016      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80039b8:	2b10      	cmp	r3, #16
 80039ba:	d10f      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039bc:	4baf      	ldr	r3, [pc, #700]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	4aae      	ldr	r2, [pc, #696]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80039c8:	e00e      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3304      	adds	r3, #4
 80039ce:	2102      	movs	r1, #2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 f85f 	bl	8004a94 <RCCEx_PLL2_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80039da:	e005      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	75fb      	strb	r3, [r7, #23]
      break;
 80039e0:	e002      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80039e2:	bf00      	nop
 80039e4:	e000      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80039e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039ee:	4ba3      	ldr	r3, [pc, #652]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fa:	49a0      	ldr	r1, [pc, #640]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a00:	e001      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
 8003a04:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d047      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a1a:	d030      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a20:	d82a      	bhi.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a26:	d02c      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003a28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a2c:	d824      	bhi.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a32:	d018      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a38:	d81e      	bhi.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a42:	d007      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003a44:	e018      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a46:	4b8d      	ldr	r3, [pc, #564]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	4a8c      	ldr	r2, [pc, #560]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a52:	e017      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3304      	adds	r3, #4
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f001 f81a 	bl	8004a94 <RCCEx_PLL2_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a64:	e00e      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3324      	adds	r3, #36	; 0x24
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f001 f8c3 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003a72:	4603      	mov	r3, r0
 8003a74:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a76:	e005      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a7c:	e002      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003a7e:	bf00      	nop
 8003a80:	e000      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a8a:	4b7c      	ldr	r3, [pc, #496]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a96:	4979      	ldr	r1, [pc, #484]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	650b      	str	r3, [r1, #80]	; 0x50
 8003a9c:	e001      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9e:	7dfb      	ldrb	r3, [r7, #23]
 8003aa0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d049      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ab6:	d02e      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003abc:	d828      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003abe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ac2:	d02a      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003ac4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ac8:	d822      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003aca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ace:	d026      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ad0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ad4:	d81c      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003ad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ada:	d010      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ae0:	d816      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d01d      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aea:	d111      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3304      	adds	r3, #4
 8003af0:	2101      	movs	r1, #1
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 ffce 	bl	8004a94 <RCCEx_PLL2_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003afc:	e012      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3324      	adds	r3, #36	; 0x24
 8003b02:	2101      	movs	r1, #1
 8003b04:	4618      	mov	r0, r3
 8003b06:	f001 f877 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b0e:	e009      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	75fb      	strb	r3, [r7, #23]
      break;
 8003b14:	e006      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b16:	bf00      	nop
 8003b18:	e004      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e002      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e000      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b2a:	4b54      	ldr	r3, [pc, #336]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b36:	4951      	ldr	r1, [pc, #324]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	650b      	str	r3, [r1, #80]	; 0x50
 8003b3c:	e001      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
 8003b40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d04b      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b58:	d02e      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b5e:	d828      	bhi.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b64:	d02a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6a:	d822      	bhi.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b70:	d026      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003b72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b76:	d81c      	bhi.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b7c:	d010      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b82:	d816      	bhi.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01d      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003b88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b8c:	d111      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3304      	adds	r3, #4
 8003b92:	2101      	movs	r1, #1
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 ff7d 	bl	8004a94 <RCCEx_PLL2_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b9e:	e012      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3324      	adds	r3, #36	; 0x24
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f001 f826 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003bb0:	e009      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb6:	e006      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003bb8:	bf00      	nop
 8003bba:	e004      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003bbc:	bf00      	nop
 8003bbe:	e002      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003bc0:	bf00      	nop
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bcc:	4b2b      	ldr	r3, [pc, #172]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bda:	4928      	ldr	r1, [pc, #160]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	658b      	str	r3, [r1, #88]	; 0x58
 8003be0:	e001      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be2:	7dfb      	ldrb	r3, [r7, #23]
 8003be4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d02f      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bfa:	d00e      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c00:	d814      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d015      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c0a:	d10f      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	4a1a      	ldr	r2, [pc, #104]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c18:	e00c      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	2101      	movs	r1, #1
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 ff37 	bl	8004a94 <RCCEx_PLL2_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c2a:	e003      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c30:	e000      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003c32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c3a:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c46:	490d      	ldr	r1, [pc, #52]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	650b      	str	r3, [r1, #80]	; 0x50
 8003c4c:	e001      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
 8003c50:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d033      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d81c      	bhi.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003c66:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6c:	08003ca7 	.word	0x08003ca7
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003c8f 	.word	0x08003c8f
 8003c78:	08003ca7 	.word	0x08003ca7
 8003c7c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c80:	4bb8      	ldr	r3, [pc, #736]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	4ab7      	ldr	r2, [pc, #732]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c8c:	e00c      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3304      	adds	r3, #4
 8003c92:	2102      	movs	r1, #2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fefd 	bl	8004a94 <RCCEx_PLL2_Config>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c9e:	e003      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca4:	e000      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003ca6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003cae:	4bad      	ldr	r3, [pc, #692]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb2:	f023 0203 	bic.w	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	49aa      	ldr	r1, [pc, #680]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cc0:	e001      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 8086 	beq.w	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cd4:	4ba4      	ldr	r3, [pc, #656]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4aa3      	ldr	r2, [pc, #652]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ce0:	f7fe fa00 	bl	80020e4 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ce6:	e009      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce8:	f7fe f9fc 	bl	80020e4 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	; 0x64
 8003cf4:	d902      	bls.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	75fb      	strb	r3, [r7, #23]
        break;
 8003cfa:	e005      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cfc:	4b9a      	ldr	r3, [pc, #616]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0ef      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d166      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d0e:	4b95      	ldr	r3, [pc, #596]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d18:	4053      	eors	r3, r2
 8003d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d013      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d22:	4b90      	ldr	r3, [pc, #576]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d2c:	4b8d      	ldr	r3, [pc, #564]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	4a8c      	ldr	r2, [pc, #560]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d36:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d38:	4b8a      	ldr	r3, [pc, #552]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	4a89      	ldr	r2, [pc, #548]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d42:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d44:	4a87      	ldr	r2, [pc, #540]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d54:	d115      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d56:	f7fe f9c5 	bl	80020e4 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d5c:	e00b      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5e:	f7fe f9c1 	bl	80020e4 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d902      	bls.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	75fb      	strb	r3, [r7, #23]
            break;
 8003d74:	e005      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d76:	4b7b      	ldr	r3, [pc, #492]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0ed      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003d82:	7dfb      	ldrb	r3, [r7, #23]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d126      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d96:	d10d      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003d98:	4b72      	ldr	r3, [pc, #456]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003da6:	0919      	lsrs	r1, r3, #4
 8003da8:	4b70      	ldr	r3, [pc, #448]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003daa:	400b      	ands	r3, r1
 8003dac:	496d      	ldr	r1, [pc, #436]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	610b      	str	r3, [r1, #16]
 8003db2:	e005      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003db4:	4b6b      	ldr	r3, [pc, #428]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	4a6a      	ldr	r2, [pc, #424]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003dbe:	6113      	str	r3, [r2, #16]
 8003dc0:	4b68      	ldr	r3, [pc, #416]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dce:	4965      	ldr	r1, [pc, #404]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	670b      	str	r3, [r1, #112]	; 0x70
 8003dd4:	e004      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
 8003dd8:	75bb      	strb	r3, [r7, #22]
 8003dda:	e001      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
 8003dde:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d07e      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003df0:	2b28      	cmp	r3, #40	; 0x28
 8003df2:	d867      	bhi.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003df4:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfa:	bf00      	nop
 8003dfc:	08003ecb 	.word	0x08003ecb
 8003e00:	08003ec5 	.word	0x08003ec5
 8003e04:	08003ec5 	.word	0x08003ec5
 8003e08:	08003ec5 	.word	0x08003ec5
 8003e0c:	08003ec5 	.word	0x08003ec5
 8003e10:	08003ec5 	.word	0x08003ec5
 8003e14:	08003ec5 	.word	0x08003ec5
 8003e18:	08003ec5 	.word	0x08003ec5
 8003e1c:	08003ea1 	.word	0x08003ea1
 8003e20:	08003ec5 	.word	0x08003ec5
 8003e24:	08003ec5 	.word	0x08003ec5
 8003e28:	08003ec5 	.word	0x08003ec5
 8003e2c:	08003ec5 	.word	0x08003ec5
 8003e30:	08003ec5 	.word	0x08003ec5
 8003e34:	08003ec5 	.word	0x08003ec5
 8003e38:	08003ec5 	.word	0x08003ec5
 8003e3c:	08003eb3 	.word	0x08003eb3
 8003e40:	08003ec5 	.word	0x08003ec5
 8003e44:	08003ec5 	.word	0x08003ec5
 8003e48:	08003ec5 	.word	0x08003ec5
 8003e4c:	08003ec5 	.word	0x08003ec5
 8003e50:	08003ec5 	.word	0x08003ec5
 8003e54:	08003ec5 	.word	0x08003ec5
 8003e58:	08003ec5 	.word	0x08003ec5
 8003e5c:	08003ecb 	.word	0x08003ecb
 8003e60:	08003ec5 	.word	0x08003ec5
 8003e64:	08003ec5 	.word	0x08003ec5
 8003e68:	08003ec5 	.word	0x08003ec5
 8003e6c:	08003ec5 	.word	0x08003ec5
 8003e70:	08003ec5 	.word	0x08003ec5
 8003e74:	08003ec5 	.word	0x08003ec5
 8003e78:	08003ec5 	.word	0x08003ec5
 8003e7c:	08003ecb 	.word	0x08003ecb
 8003e80:	08003ec5 	.word	0x08003ec5
 8003e84:	08003ec5 	.word	0x08003ec5
 8003e88:	08003ec5 	.word	0x08003ec5
 8003e8c:	08003ec5 	.word	0x08003ec5
 8003e90:	08003ec5 	.word	0x08003ec5
 8003e94:	08003ec5 	.word	0x08003ec5
 8003e98:	08003ec5 	.word	0x08003ec5
 8003e9c:	08003ecb 	.word	0x08003ecb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fdf4 	bl	8004a94 <RCCEx_PLL2_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003eb0:	e00c      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3324      	adds	r3, #36	; 0x24
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fe9d 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ec2:	e003      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ec8:	e000      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003eca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ecc:	7dfb      	ldrb	r3, [r7, #23]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d109      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ed2:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ede:	4921      	ldr	r1, [pc, #132]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	654b      	str	r3, [r1, #84]	; 0x54
 8003ee4:	e001      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
 8003ee8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d03e      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efa:	2b05      	cmp	r3, #5
 8003efc:	d820      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003efe:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f04:	08003f47 	.word	0x08003f47
 8003f08:	08003f1d 	.word	0x08003f1d
 8003f0c:	08003f2f 	.word	0x08003f2f
 8003f10:	08003f47 	.word	0x08003f47
 8003f14:	08003f47 	.word	0x08003f47
 8003f18:	08003f47 	.word	0x08003f47
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	2101      	movs	r1, #1
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fdb6 	bl	8004a94 <RCCEx_PLL2_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f2c:	e00c      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3324      	adds	r3, #36	; 0x24
 8003f32:	2101      	movs	r1, #1
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fe5f 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f3e:	e003      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	75fb      	strb	r3, [r7, #23]
      break;
 8003f44:	e000      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f48:	7dfb      	ldrb	r3, [r7, #23]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d110      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f4e:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f52:	f023 0207 	bic.w	r2, r3, #7
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5a:	4902      	ldr	r1, [pc, #8]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	654b      	str	r3, [r1, #84]	; 0x54
 8003f60:	e008      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003f62:	bf00      	nop
 8003f64:	58024400 	.word	0x58024400
 8003f68:	58024800 	.word	0x58024800
 8003f6c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
 8003f72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d039      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f86:	2b05      	cmp	r3, #5
 8003f88:	d820      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003f8a:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fd3 	.word	0x08003fd3
 8003f94:	08003fa9 	.word	0x08003fa9
 8003f98:	08003fbb 	.word	0x08003fbb
 8003f9c:	08003fd3 	.word	0x08003fd3
 8003fa0:	08003fd3 	.word	0x08003fd3
 8003fa4:	08003fd3 	.word	0x08003fd3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	2101      	movs	r1, #1
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fd70 	bl	8004a94 <RCCEx_PLL2_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fb8:	e00c      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3324      	adds	r3, #36	; 0x24
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fe19 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fca:	e003      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd0:	e000      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fda:	4bb7      	ldr	r3, [pc, #732]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fde:	f023 0207 	bic.w	r2, r3, #7
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe8:	49b3      	ldr	r1, [pc, #716]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	658b      	str	r3, [r1, #88]	; 0x58
 8003fee:	e001      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d04b      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004006:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800400a:	d02e      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800400c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004010:	d828      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004016:	d02a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401c:	d822      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800401e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004022:	d026      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004024:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004028:	d81c      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800402a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800402e:	d010      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004034:	d816      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01d      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800403a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800403e:	d111      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3304      	adds	r3, #4
 8004044:	2100      	movs	r1, #0
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fd24 	bl	8004a94 <RCCEx_PLL2_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004050:	e012      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3324      	adds	r3, #36	; 0x24
 8004056:	2102      	movs	r1, #2
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fdcd 	bl	8004bf8 <RCCEx_PLL3_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004062:	e009      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	75fb      	strb	r3, [r7, #23]
      break;
 8004068:	e006      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800406a:	bf00      	nop
 800406c:	e004      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800406e:	bf00      	nop
 8004070:	e002      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004072:	bf00      	nop
 8004074:	e000      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004078:	7dfb      	ldrb	r3, [r7, #23]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10a      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800407e:	4b8e      	ldr	r3, [pc, #568]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800408c:	498a      	ldr	r1, [pc, #552]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800408e:	4313      	orrs	r3, r2
 8004090:	654b      	str	r3, [r1, #84]	; 0x54
 8004092:	e001      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d04b      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040ae:	d02e      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80040b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040b4:	d828      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80040b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ba:	d02a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80040bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c0:	d822      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80040c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040c6:	d026      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80040c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040cc:	d81c      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80040ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d2:	d010      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80040d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d8:	d816      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d01d      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80040de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e2:	d111      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	2100      	movs	r1, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fcd2 	bl	8004a94 <RCCEx_PLL2_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80040f4:	e012      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3324      	adds	r3, #36	; 0x24
 80040fa:	2102      	movs	r1, #2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fd7b 	bl	8004bf8 <RCCEx_PLL3_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004106:	e009      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	75fb      	strb	r3, [r7, #23]
      break;
 800410c:	e006      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800410e:	bf00      	nop
 8004110:	e004      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004112:	bf00      	nop
 8004114:	e002      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004116:	bf00      	nop
 8004118:	e000      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800411a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800411c:	7dfb      	ldrb	r3, [r7, #23]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004122:	4b65      	ldr	r3, [pc, #404]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004126:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004130:	4961      	ldr	r1, [pc, #388]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004132:	4313      	orrs	r3, r2
 8004134:	658b      	str	r3, [r1, #88]	; 0x58
 8004136:	e001      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	7dfb      	ldrb	r3, [r7, #23]
 800413a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004144:	2b00      	cmp	r3, #0
 8004146:	d04b      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800414e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004152:	d02e      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004154:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004158:	d828      	bhi.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800415a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800415e:	d02a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004164:	d822      	bhi.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004166:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800416a:	d026      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800416c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004170:	d81c      	bhi.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004172:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004176:	d010      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800417c:	d816      	bhi.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d01d      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004186:	d111      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3304      	adds	r3, #4
 800418c:	2100      	movs	r1, #0
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fc80 	bl	8004a94 <RCCEx_PLL2_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004198:	e012      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3324      	adds	r3, #36	; 0x24
 800419e:	2102      	movs	r1, #2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fd29 	bl	8004bf8 <RCCEx_PLL3_Config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80041aa:	e009      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	75fb      	strb	r3, [r7, #23]
      break;
 80041b0:	e006      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041b2:	bf00      	nop
 80041b4:	e004      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041b6:	bf00      	nop
 80041b8:	e002      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041ba:	bf00      	nop
 80041bc:	e000      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041c6:	4b3c      	ldr	r3, [pc, #240]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d4:	4938      	ldr	r1, [pc, #224]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	658b      	str	r3, [r1, #88]	; 0x58
 80041da:	e001      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f6:	d10a      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3324      	adds	r3, #36	; 0x24
 80041fc:	2102      	movs	r1, #2
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fcfa 	bl	8004bf8 <RCCEx_PLL3_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800420e:	4b2a      	ldr	r3, [pc, #168]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004212:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800421c:	4926      	ldr	r1, [pc, #152]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800421e:	4313      	orrs	r3, r2
 8004220:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b00      	cmp	r3, #0
 800422c:	d01a      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004238:	d10a      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3324      	adds	r3, #36	; 0x24
 800423e:	2102      	movs	r1, #2
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fcd9 	bl	8004bf8 <RCCEx_PLL3_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004250:	4b19      	ldr	r3, [pc, #100]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004254:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425e:	4916      	ldr	r1, [pc, #88]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004260:	4313      	orrs	r3, r2
 8004262:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d036      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004276:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800427a:	d01f      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800427c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004280:	d817      	bhi.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428a:	d009      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800428c:	e011      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3304      	adds	r3, #4
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fbfd 	bl	8004a94 <RCCEx_PLL2_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800429e:	e00e      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3324      	adds	r3, #36	; 0x24
 80042a4:	2102      	movs	r1, #2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fca6 	bl	8004bf8 <RCCEx_PLL3_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80042b0:	e005      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	75fb      	strb	r3, [r7, #23]
      break;
 80042b6:	e002      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80042b8:	58024400 	.word	0x58024400
      break;
 80042bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042be:	7dfb      	ldrb	r3, [r7, #23]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10a      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042c4:	4b93      	ldr	r3, [pc, #588]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042d2:	4990      	ldr	r1, [pc, #576]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	658b      	str	r3, [r1, #88]	; 0x58
 80042d8:	e001      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042da:	7dfb      	ldrb	r3, [r7, #23]
 80042dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d033      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042f4:	d01c      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80042f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042fa:	d816      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80042fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004300:	d003      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004306:	d007      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004308:	e00f      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800430a:	4b82      	ldr	r3, [pc, #520]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	4a81      	ldr	r2, [pc, #516]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004314:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004316:	e00c      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3324      	adds	r3, #36	; 0x24
 800431c:	2101      	movs	r1, #1
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fc6a 	bl	8004bf8 <RCCEx_PLL3_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004328:	e003      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	75fb      	strb	r3, [r7, #23]
      break;
 800432e:	e000      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004332:	7dfb      	ldrb	r3, [r7, #23]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004338:	4b76      	ldr	r3, [pc, #472]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004346:	4973      	ldr	r1, [pc, #460]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004348:	4313      	orrs	r3, r2
 800434a:	654b      	str	r3, [r1, #84]	; 0x54
 800434c:	e001      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434e:	7dfb      	ldrb	r3, [r7, #23]
 8004350:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d029      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436a:	d007      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800436c:	e00f      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800436e:	4b69      	ldr	r3, [pc, #420]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	4a68      	ldr	r2, [pc, #416]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004378:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800437a:	e00b      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	2102      	movs	r1, #2
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fb86 	bl	8004a94 <RCCEx_PLL2_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800438c:	e002      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	75fb      	strb	r3, [r7, #23]
      break;
 8004392:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004394:	7dfb      	ldrb	r3, [r7, #23]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800439a:	4b5e      	ldr	r3, [pc, #376]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800439c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a6:	495b      	ldr	r1, [pc, #364]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80043ac:	e001      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
 80043b0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3324      	adds	r3, #36	; 0x24
 80043c2:	2102      	movs	r1, #2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fc17 	bl	8004bf8 <RCCEx_PLL3_Config>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d030      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e8:	d017      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80043ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ee:	d811      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80043f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f4:	d013      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80043f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043fa:	d80b      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d010      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004404:	d106      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004406:	4b43      	ldr	r3, [pc, #268]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	4a42      	ldr	r2, [pc, #264]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800440c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004410:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004412:	e007      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	75fb      	strb	r3, [r7, #23]
      break;
 8004418:	e004      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800441a:	bf00      	nop
 800441c:	e002      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800441e:	bf00      	nop
 8004420:	e000      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004422:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004424:	7dfb      	ldrb	r3, [r7, #23]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800442a:	4b3a      	ldr	r3, [pc, #232]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800442c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004436:	4937      	ldr	r1, [pc, #220]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004438:	4313      	orrs	r3, r2
 800443a:	654b      	str	r3, [r1, #84]	; 0x54
 800443c:	e001      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443e:	7dfb      	ldrb	r3, [r7, #23]
 8004440:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800444e:	4b31      	ldr	r3, [pc, #196]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004452:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	492e      	ldr	r1, [pc, #184]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800445c:	4313      	orrs	r3, r2
 800445e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d009      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800446c:	4b29      	ldr	r3, [pc, #164]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800447a:	4926      	ldr	r1, [pc, #152]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800447c:	4313      	orrs	r3, r2
 800447e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d008      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800448c:	4b21      	ldr	r3, [pc, #132]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800448e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004490:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004498:	491e      	ldr	r1, [pc, #120]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800449a:	4313      	orrs	r3, r2
 800449c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00d      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044aa:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	4a19      	ldr	r2, [pc, #100]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044b4:	6113      	str	r3, [r2, #16]
 80044b6:	4b17      	ldr	r3, [pc, #92]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80044c0:	4914      	ldr	r1, [pc, #80]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	da08      	bge.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044ce:	4b11      	ldr	r3, [pc, #68]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044da:	490e      	ldr	r1, [pc, #56]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d009      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044ec:	4b09      	ldr	r3, [pc, #36]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	4906      	ldr	r1, [pc, #24]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004500:	7dbb      	ldrb	r3, [r7, #22]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	e000      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
}
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	58024400 	.word	0x58024400

08004518 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800451c:	f7ff f860 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 8004520:	4602      	mov	r2, r0
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	4904      	ldr	r1, [pc, #16]	; (8004540 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800452e:	5ccb      	ldrb	r3, [r1, r3]
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004538:	4618      	mov	r0, r3
 800453a:	bd80      	pop	{r7, pc}
 800453c:	58024400 	.word	0x58024400
 8004540:	08007394 	.word	0x08007394

08004544 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004544:	b480      	push	{r7}
 8004546:	b089      	sub	sp, #36	; 0x24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800454c:	4ba1      	ldr	r3, [pc, #644]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004556:	4b9f      	ldr	r3, [pc, #636]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455a:	0b1b      	lsrs	r3, r3, #12
 800455c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004560:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004562:	4b9c      	ldr	r3, [pc, #624]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	091b      	lsrs	r3, r3, #4
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800456e:	4b99      	ldr	r3, [pc, #612]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	08db      	lsrs	r3, r3, #3
 8004574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	fb02 f303 	mul.w	r3, r2, r3
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004586:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8111 	beq.w	80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	2b02      	cmp	r3, #2
 8004596:	f000 8083 	beq.w	80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b02      	cmp	r3, #2
 800459e:	f200 80a1 	bhi.w	80046e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d056      	beq.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80045ae:	e099      	b.n	80046e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045b0:	4b88      	ldr	r3, [pc, #544]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d02d      	beq.n	8004618 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045bc:	4b85      	ldr	r3, [pc, #532]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	08db      	lsrs	r3, r3, #3
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	4a84      	ldr	r2, [pc, #528]	; (80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
 80045cc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	ee07 3a90 	vmov	s15, r3
 80045d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e6:	4b7b      	ldr	r3, [pc, #492]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800460a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004612:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004616:	e087      	b.n	8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004622:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800462a:	4b6a      	ldr	r3, [pc, #424]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800463a:	ed97 6a03 	vldr	s12, [r7, #12]
 800463e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800464a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800464e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800465a:	e065      	b.n	8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004666:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800466a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800466e:	4b59      	ldr	r3, [pc, #356]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800467e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004682:	eddf 5a56 	vldr	s11, [pc, #344]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800468a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800468e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800469e:	e043      	b.n	8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80046ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b2:	4b48      	ldr	r3, [pc, #288]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046e2:	e021      	b.n	8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f6:	4b37      	ldr	r3, [pc, #220]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004706:	ed97 6a03 	vldr	s12, [r7, #12]
 800470a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800470e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800471a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004722:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004726:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004728:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	0a5b      	lsrs	r3, r3, #9
 800472e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800473e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004742:	edd7 6a07 	vldr	s13, [r7, #28]
 8004746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800474a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800474e:	ee17 2a90 	vmov	r2, s15
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004756:	4b1f      	ldr	r3, [pc, #124]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	0c1b      	lsrs	r3, r3, #16
 800475c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004760:	ee07 3a90 	vmov	s15, r3
 8004764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800476c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004770:	edd7 6a07 	vldr	s13, [r7, #28]
 8004774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800477c:	ee17 2a90 	vmov	r2, s15
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004784:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	0e1b      	lsrs	r3, r3, #24
 800478a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004796:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800479a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800479e:	edd7 6a07 	vldr	s13, [r7, #28]
 80047a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047aa:	ee17 2a90 	vmov	r2, s15
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047b2:	e008      	b.n	80047c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
}
 80047c6:	bf00      	nop
 80047c8:	3724      	adds	r7, #36	; 0x24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	58024400 	.word	0x58024400
 80047d8:	03d09000 	.word	0x03d09000
 80047dc:	46000000 	.word	0x46000000
 80047e0:	4c742400 	.word	0x4c742400
 80047e4:	4a742400 	.word	0x4a742400
 80047e8:	4bbebc20 	.word	0x4bbebc20

080047ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b089      	sub	sp, #36	; 0x24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047f4:	4ba1      	ldr	r3, [pc, #644]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80047fe:	4b9f      	ldr	r3, [pc, #636]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	0d1b      	lsrs	r3, r3, #20
 8004804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004808:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800480a:	4b9c      	ldr	r3, [pc, #624]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	0a1b      	lsrs	r3, r3, #8
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004816:	4b99      	ldr	r3, [pc, #612]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	08db      	lsrs	r3, r3, #3
 800481c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8111 	beq.w	8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b02      	cmp	r3, #2
 800483e:	f000 8083 	beq.w	8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b02      	cmp	r3, #2
 8004846:	f200 80a1 	bhi.w	800498c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d056      	beq.n	8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004856:	e099      	b.n	800498c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004858:	4b88      	ldr	r3, [pc, #544]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d02d      	beq.n	80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004864:	4b85      	ldr	r3, [pc, #532]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	08db      	lsrs	r3, r3, #3
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	4a84      	ldr	r2, [pc, #528]	; (8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
 8004874:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	ee07 3a90 	vmov	s15, r3
 800487c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488e:	4b7b      	ldr	r3, [pc, #492]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489e:	ed97 6a03 	vldr	s12, [r7, #12]
 80048a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80048be:	e087      	b.n	80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80048ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d2:	4b6a      	ldr	r3, [pc, #424]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004902:	e065      	b.n	80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	ee07 3a90 	vmov	s15, r3
 800490a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004916:	4b59      	ldr	r3, [pc, #356]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004926:	ed97 6a03 	vldr	s12, [r7, #12]
 800492a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800492e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800493a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800493e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004942:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004946:	e043      	b.n	80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	ee07 3a90 	vmov	s15, r3
 800494e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004952:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800495a:	4b48      	ldr	r3, [pc, #288]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496a:	ed97 6a03 	vldr	s12, [r7, #12]
 800496e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800497a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800497e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004986:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800498a:	e021      	b.n	80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004996:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800499a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499e:	4b37      	ldr	r3, [pc, #220]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80049b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80049d0:	4b2a      	ldr	r3, [pc, #168]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	0a5b      	lsrs	r3, r3, #9
 80049d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049f6:	ee17 2a90 	vmov	r2, s15
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80049fe:	4b1f      	ldr	r3, [pc, #124]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	0c1b      	lsrs	r3, r3, #16
 8004a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a08:	ee07 3a90 	vmov	s15, r3
 8004a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a18:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a24:	ee17 2a90 	vmov	r2, s15
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004a2c:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	0e1b      	lsrs	r3, r3, #24
 8004a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a52:	ee17 2a90 	vmov	r2, s15
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a5a:	e008      	b.n	8004a6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	609a      	str	r2, [r3, #8]
}
 8004a6e:	bf00      	nop
 8004a70:	3724      	adds	r7, #36	; 0x24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	58024400 	.word	0x58024400
 8004a80:	03d09000 	.word	0x03d09000
 8004a84:	46000000 	.word	0x46000000
 8004a88:	4c742400 	.word	0x4c742400
 8004a8c:	4a742400 	.word	0x4a742400
 8004a90:	4bbebc20 	.word	0x4bbebc20

08004a94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004aa2:	4b53      	ldr	r3, [pc, #332]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d101      	bne.n	8004ab2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e099      	b.n	8004be6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ab2:	4b4f      	ldr	r3, [pc, #316]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a4e      	ldr	r2, [pc, #312]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004ab8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004abc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004abe:	f7fd fb11 	bl	80020e4 <HAL_GetTick>
 8004ac2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ac4:	e008      	b.n	8004ad8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004ac6:	f7fd fb0d 	bl	80020e4 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e086      	b.n	8004be6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ad8:	4b45      	ldr	r3, [pc, #276]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1f0      	bne.n	8004ac6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ae4:	4b42      	ldr	r3, [pc, #264]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	031b      	lsls	r3, r3, #12
 8004af2:	493f      	ldr	r1, [pc, #252]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	628b      	str	r3, [r1, #40]	; 0x28
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	025b      	lsls	r3, r3, #9
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	061b      	lsls	r3, r3, #24
 8004b24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b28:	4931      	ldr	r1, [pc, #196]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b2e:	4b30      	ldr	r3, [pc, #192]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	492d      	ldr	r1, [pc, #180]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b40:	4b2b      	ldr	r3, [pc, #172]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	f023 0220 	bic.w	r2, r3, #32
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	4928      	ldr	r1, [pc, #160]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b52:	4b27      	ldr	r3, [pc, #156]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	4a26      	ldr	r2, [pc, #152]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b58:	f023 0310 	bic.w	r3, r3, #16
 8004b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b5e:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b62:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <RCCEx_PLL2_Config+0x160>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	69d2      	ldr	r2, [r2, #28]
 8004b6a:	00d2      	lsls	r2, r2, #3
 8004b6c:	4920      	ldr	r1, [pc, #128]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b72:	4b1f      	ldr	r3, [pc, #124]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	4a1e      	ldr	r2, [pc, #120]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b78:	f043 0310 	orr.w	r3, r3, #16
 8004b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d106      	bne.n	8004b92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b84:	4b1a      	ldr	r3, [pc, #104]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b90:	e00f      	b.n	8004bb2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d106      	bne.n	8004ba6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	4a14      	ldr	r2, [pc, #80]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ba2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ba4:	e005      	b.n	8004bb2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ba6:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	4a11      	ldr	r2, [pc, #68]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004bac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004bb2:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a0e      	ldr	r2, [pc, #56]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004bb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bbe:	f7fd fa91 	bl	80020e4 <HAL_GetTick>
 8004bc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bc4:	e008      	b.n	8004bd8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004bc6:	f7fd fa8d 	bl	80020e4 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e006      	b.n	8004be6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bd8:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0f0      	beq.n	8004bc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	58024400 	.word	0x58024400
 8004bf4:	ffff0007 	.word	0xffff0007

08004bf8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c06:	4b53      	ldr	r3, [pc, #332]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d101      	bne.n	8004c16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e099      	b.n	8004d4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c16:	4b4f      	ldr	r3, [pc, #316]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a4e      	ldr	r2, [pc, #312]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c22:	f7fd fa5f 	bl	80020e4 <HAL_GetTick>
 8004c26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c28:	e008      	b.n	8004c3c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c2a:	f7fd fa5b 	bl	80020e4 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e086      	b.n	8004d4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c3c:	4b45      	ldr	r3, [pc, #276]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f0      	bne.n	8004c2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c48:	4b42      	ldr	r3, [pc, #264]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	051b      	lsls	r3, r3, #20
 8004c56:	493f      	ldr	r1, [pc, #252]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	628b      	str	r3, [r1, #40]	; 0x28
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	025b      	lsls	r3, r3, #9
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	041b      	lsls	r3, r3, #16
 8004c7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	061b      	lsls	r3, r3, #24
 8004c88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c8c:	4931      	ldr	r1, [pc, #196]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c92:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	492d      	ldr	r1, [pc, #180]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ca4:	4b2b      	ldr	r3, [pc, #172]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	4928      	ldr	r1, [pc, #160]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004cb6:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	4a26      	ldr	r2, [pc, #152]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004cc2:	4b24      	ldr	r3, [pc, #144]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc6:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <RCCEx_PLL3_Config+0x160>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	69d2      	ldr	r2, [r2, #28]
 8004cce:	00d2      	lsls	r2, r2, #3
 8004cd0:	4920      	ldr	r1, [pc, #128]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cd6:	4b1f      	ldr	r3, [pc, #124]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	4a1e      	ldr	r2, [pc, #120]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ce8:	4b1a      	ldr	r3, [pc, #104]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	4a19      	ldr	r2, [pc, #100]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cf4:	e00f      	b.n	8004d16 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d106      	bne.n	8004d0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004cfc:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	4a14      	ldr	r2, [pc, #80]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004d02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d08:	e005      	b.n	8004d16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d0a:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	4a11      	ldr	r2, [pc, #68]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004d10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d16:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a0e      	ldr	r2, [pc, #56]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d22:	f7fd f9df 	bl	80020e4 <HAL_GetTick>
 8004d26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d28:	e008      	b.n	8004d3c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d2a:	f7fd f9db 	bl	80020e4 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e006      	b.n	8004d4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	58024400 	.word	0x58024400
 8004d58:	ffff0007 	.word	0xffff0007

08004d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e049      	b.n	8004e02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fc feaa 	bl	8001adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3304      	adds	r3, #4
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	f000 fbb0 	bl	8005500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b082      	sub	sp, #8
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e049      	b.n	8004eb0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d106      	bne.n	8004e36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f841 	bl	8004eb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3304      	adds	r3, #4
 8004e46:	4619      	mov	r1, r3
 8004e48:	4610      	mov	r0, r2
 8004e4a:	f000 fb59 	bl	8005500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d109      	bne.n	8004ef0 <HAL_TIM_PWM_Start+0x24>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	bf14      	ite	ne
 8004ee8:	2301      	movne	r3, #1
 8004eea:	2300      	moveq	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	e03c      	b.n	8004f6a <HAL_TIM_PWM_Start+0x9e>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d109      	bne.n	8004f0a <HAL_TIM_PWM_Start+0x3e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	bf14      	ite	ne
 8004f02:	2301      	movne	r3, #1
 8004f04:	2300      	moveq	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	e02f      	b.n	8004f6a <HAL_TIM_PWM_Start+0x9e>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d109      	bne.n	8004f24 <HAL_TIM_PWM_Start+0x58>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	e022      	b.n	8004f6a <HAL_TIM_PWM_Start+0x9e>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b0c      	cmp	r3, #12
 8004f28:	d109      	bne.n	8004f3e <HAL_TIM_PWM_Start+0x72>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	bf14      	ite	ne
 8004f36:	2301      	movne	r3, #1
 8004f38:	2300      	moveq	r3, #0
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	e015      	b.n	8004f6a <HAL_TIM_PWM_Start+0x9e>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b10      	cmp	r3, #16
 8004f42:	d109      	bne.n	8004f58 <HAL_TIM_PWM_Start+0x8c>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	bf14      	ite	ne
 8004f50:	2301      	movne	r3, #1
 8004f52:	2300      	moveq	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	e008      	b.n	8004f6a <HAL_TIM_PWM_Start+0x9e>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	bf14      	ite	ne
 8004f64:	2301      	movne	r3, #1
 8004f66:	2300      	moveq	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e0a1      	b.n	80050b6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d104      	bne.n	8004f82 <HAL_TIM_PWM_Start+0xb6>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f80:	e023      	b.n	8004fca <HAL_TIM_PWM_Start+0xfe>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d104      	bne.n	8004f92 <HAL_TIM_PWM_Start+0xc6>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f90:	e01b      	b.n	8004fca <HAL_TIM_PWM_Start+0xfe>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d104      	bne.n	8004fa2 <HAL_TIM_PWM_Start+0xd6>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa0:	e013      	b.n	8004fca <HAL_TIM_PWM_Start+0xfe>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b0c      	cmp	r3, #12
 8004fa6:	d104      	bne.n	8004fb2 <HAL_TIM_PWM_Start+0xe6>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fb0:	e00b      	b.n	8004fca <HAL_TIM_PWM_Start+0xfe>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d104      	bne.n	8004fc2 <HAL_TIM_PWM_Start+0xf6>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fc0:	e003      	b.n	8004fca <HAL_TIM_PWM_Start+0xfe>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	6839      	ldr	r1, [r7, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fea2 	bl	8005d1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a38      	ldr	r2, [pc, #224]	; (80050c0 <HAL_TIM_PWM_Start+0x1f4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d013      	beq.n	800500a <HAL_TIM_PWM_Start+0x13e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a37      	ldr	r2, [pc, #220]	; (80050c4 <HAL_TIM_PWM_Start+0x1f8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00e      	beq.n	800500a <HAL_TIM_PWM_Start+0x13e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a35      	ldr	r2, [pc, #212]	; (80050c8 <HAL_TIM_PWM_Start+0x1fc>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d009      	beq.n	800500a <HAL_TIM_PWM_Start+0x13e>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a34      	ldr	r2, [pc, #208]	; (80050cc <HAL_TIM_PWM_Start+0x200>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d004      	beq.n	800500a <HAL_TIM_PWM_Start+0x13e>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a32      	ldr	r2, [pc, #200]	; (80050d0 <HAL_TIM_PWM_Start+0x204>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d101      	bne.n	800500e <HAL_TIM_PWM_Start+0x142>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <HAL_TIM_PWM_Start+0x144>
 800500e:	2300      	movs	r3, #0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d007      	beq.n	8005024 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005022:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a25      	ldr	r2, [pc, #148]	; (80050c0 <HAL_TIM_PWM_Start+0x1f4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d022      	beq.n	8005074 <HAL_TIM_PWM_Start+0x1a8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005036:	d01d      	beq.n	8005074 <HAL_TIM_PWM_Start+0x1a8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a25      	ldr	r2, [pc, #148]	; (80050d4 <HAL_TIM_PWM_Start+0x208>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d018      	beq.n	8005074 <HAL_TIM_PWM_Start+0x1a8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a24      	ldr	r2, [pc, #144]	; (80050d8 <HAL_TIM_PWM_Start+0x20c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d013      	beq.n	8005074 <HAL_TIM_PWM_Start+0x1a8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a22      	ldr	r2, [pc, #136]	; (80050dc <HAL_TIM_PWM_Start+0x210>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00e      	beq.n	8005074 <HAL_TIM_PWM_Start+0x1a8>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1a      	ldr	r2, [pc, #104]	; (80050c4 <HAL_TIM_PWM_Start+0x1f8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d009      	beq.n	8005074 <HAL_TIM_PWM_Start+0x1a8>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1e      	ldr	r2, [pc, #120]	; (80050e0 <HAL_TIM_PWM_Start+0x214>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d004      	beq.n	8005074 <HAL_TIM_PWM_Start+0x1a8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a16      	ldr	r2, [pc, #88]	; (80050c8 <HAL_TIM_PWM_Start+0x1fc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d115      	bne.n	80050a0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	4b1a      	ldr	r3, [pc, #104]	; (80050e4 <HAL_TIM_PWM_Start+0x218>)
 800507c:	4013      	ands	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b06      	cmp	r3, #6
 8005084:	d015      	beq.n	80050b2 <HAL_TIM_PWM_Start+0x1e6>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508c:	d011      	beq.n	80050b2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0201 	orr.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509e:	e008      	b.n	80050b2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	e000      	b.n	80050b4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	40010000 	.word	0x40010000
 80050c4:	40010400 	.word	0x40010400
 80050c8:	40014000 	.word	0x40014000
 80050cc:	40014400 	.word	0x40014400
 80050d0:	40014800 	.word	0x40014800
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800
 80050dc:	40000c00 	.word	0x40000c00
 80050e0:	40001800 	.word	0x40001800
 80050e4:	00010007 	.word	0x00010007

080050e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005102:	2302      	movs	r3, #2
 8005104:	e0ff      	b.n	8005306 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b14      	cmp	r3, #20
 8005112:	f200 80f0 	bhi.w	80052f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005116:	a201      	add	r2, pc, #4	; (adr r2, 800511c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511c:	08005171 	.word	0x08005171
 8005120:	080052f7 	.word	0x080052f7
 8005124:	080052f7 	.word	0x080052f7
 8005128:	080052f7 	.word	0x080052f7
 800512c:	080051b1 	.word	0x080051b1
 8005130:	080052f7 	.word	0x080052f7
 8005134:	080052f7 	.word	0x080052f7
 8005138:	080052f7 	.word	0x080052f7
 800513c:	080051f3 	.word	0x080051f3
 8005140:	080052f7 	.word	0x080052f7
 8005144:	080052f7 	.word	0x080052f7
 8005148:	080052f7 	.word	0x080052f7
 800514c:	08005233 	.word	0x08005233
 8005150:	080052f7 	.word	0x080052f7
 8005154:	080052f7 	.word	0x080052f7
 8005158:	080052f7 	.word	0x080052f7
 800515c:	08005275 	.word	0x08005275
 8005160:	080052f7 	.word	0x080052f7
 8005164:	080052f7 	.word	0x080052f7
 8005168:	080052f7 	.word	0x080052f7
 800516c:	080052b5 	.word	0x080052b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fa5c 	bl	8005634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0208 	orr.w	r2, r2, #8
 800518a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699a      	ldr	r2, [r3, #24]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0204 	bic.w	r2, r2, #4
 800519a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6999      	ldr	r1, [r3, #24]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	619a      	str	r2, [r3, #24]
      break;
 80051ae:	e0a5      	b.n	80052fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 facc 	bl	8005754 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699a      	ldr	r2, [r3, #24]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6999      	ldr	r1, [r3, #24]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	021a      	lsls	r2, r3, #8
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	619a      	str	r2, [r3, #24]
      break;
 80051f0:	e084      	b.n	80052fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68b9      	ldr	r1, [r7, #8]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fb35 	bl	8005868 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0208 	orr.w	r2, r2, #8
 800520c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69da      	ldr	r2, [r3, #28]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0204 	bic.w	r2, r2, #4
 800521c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69d9      	ldr	r1, [r3, #28]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	61da      	str	r2, [r3, #28]
      break;
 8005230:	e064      	b.n	80052fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fb9d 	bl	8005978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800524c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69d9      	ldr	r1, [r3, #28]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	021a      	lsls	r2, r3, #8
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	61da      	str	r2, [r3, #28]
      break;
 8005272:	e043      	b.n	80052fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fbe6 	bl	8005a4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0208 	orr.w	r2, r2, #8
 800528e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0204 	bic.w	r2, r2, #4
 800529e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052b2:	e023      	b.n	80052fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fc2a 	bl	8005b14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	021a      	lsls	r2, r3, #8
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052f4:	e002      	b.n	80052fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	75fb      	strb	r3, [r7, #23]
      break;
 80052fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005304:	7dfb      	ldrb	r3, [r7, #23]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop

08005310 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_TIM_ConfigClockSource+0x1c>
 8005328:	2302      	movs	r3, #2
 800532a:	e0dc      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x1d6>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	4b6a      	ldr	r3, [pc, #424]	; (80054f0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005348:	4013      	ands	r3, r2
 800534a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005352:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a64      	ldr	r2, [pc, #400]	; (80054f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	f000 80a9 	beq.w	80054ba <HAL_TIM_ConfigClockSource+0x1aa>
 8005368:	4a62      	ldr	r2, [pc, #392]	; (80054f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	f200 80ae 	bhi.w	80054cc <HAL_TIM_ConfigClockSource+0x1bc>
 8005370:	4a61      	ldr	r2, [pc, #388]	; (80054f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	f000 80a1 	beq.w	80054ba <HAL_TIM_ConfigClockSource+0x1aa>
 8005378:	4a5f      	ldr	r2, [pc, #380]	; (80054f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	f200 80a6 	bhi.w	80054cc <HAL_TIM_ConfigClockSource+0x1bc>
 8005380:	4a5e      	ldr	r2, [pc, #376]	; (80054fc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005382:	4293      	cmp	r3, r2
 8005384:	f000 8099 	beq.w	80054ba <HAL_TIM_ConfigClockSource+0x1aa>
 8005388:	4a5c      	ldr	r2, [pc, #368]	; (80054fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800538a:	4293      	cmp	r3, r2
 800538c:	f200 809e 	bhi.w	80054cc <HAL_TIM_ConfigClockSource+0x1bc>
 8005390:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005394:	f000 8091 	beq.w	80054ba <HAL_TIM_ConfigClockSource+0x1aa>
 8005398:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800539c:	f200 8096 	bhi.w	80054cc <HAL_TIM_ConfigClockSource+0x1bc>
 80053a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053a4:	f000 8089 	beq.w	80054ba <HAL_TIM_ConfigClockSource+0x1aa>
 80053a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ac:	f200 808e 	bhi.w	80054cc <HAL_TIM_ConfigClockSource+0x1bc>
 80053b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b4:	d03e      	beq.n	8005434 <HAL_TIM_ConfigClockSource+0x124>
 80053b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ba:	f200 8087 	bhi.w	80054cc <HAL_TIM_ConfigClockSource+0x1bc>
 80053be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c2:	f000 8086 	beq.w	80054d2 <HAL_TIM_ConfigClockSource+0x1c2>
 80053c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ca:	d87f      	bhi.n	80054cc <HAL_TIM_ConfigClockSource+0x1bc>
 80053cc:	2b70      	cmp	r3, #112	; 0x70
 80053ce:	d01a      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0xf6>
 80053d0:	2b70      	cmp	r3, #112	; 0x70
 80053d2:	d87b      	bhi.n	80054cc <HAL_TIM_ConfigClockSource+0x1bc>
 80053d4:	2b60      	cmp	r3, #96	; 0x60
 80053d6:	d050      	beq.n	800547a <HAL_TIM_ConfigClockSource+0x16a>
 80053d8:	2b60      	cmp	r3, #96	; 0x60
 80053da:	d877      	bhi.n	80054cc <HAL_TIM_ConfigClockSource+0x1bc>
 80053dc:	2b50      	cmp	r3, #80	; 0x50
 80053de:	d03c      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x14a>
 80053e0:	2b50      	cmp	r3, #80	; 0x50
 80053e2:	d873      	bhi.n	80054cc <HAL_TIM_ConfigClockSource+0x1bc>
 80053e4:	2b40      	cmp	r3, #64	; 0x40
 80053e6:	d058      	beq.n	800549a <HAL_TIM_ConfigClockSource+0x18a>
 80053e8:	2b40      	cmp	r3, #64	; 0x40
 80053ea:	d86f      	bhi.n	80054cc <HAL_TIM_ConfigClockSource+0x1bc>
 80053ec:	2b30      	cmp	r3, #48	; 0x30
 80053ee:	d064      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0x1aa>
 80053f0:	2b30      	cmp	r3, #48	; 0x30
 80053f2:	d86b      	bhi.n	80054cc <HAL_TIM_ConfigClockSource+0x1bc>
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d060      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0x1aa>
 80053f8:	2b20      	cmp	r3, #32
 80053fa:	d867      	bhi.n	80054cc <HAL_TIM_ConfigClockSource+0x1bc>
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d05c      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0x1aa>
 8005400:	2b10      	cmp	r3, #16
 8005402:	d05a      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0x1aa>
 8005404:	e062      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	6899      	ldr	r1, [r3, #8]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f000 fc61 	bl	8005cdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005428:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	609a      	str	r2, [r3, #8]
      break;
 8005432:	e04f      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	6899      	ldr	r1, [r3, #8]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f000 fc4a 	bl	8005cdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005456:	609a      	str	r2, [r3, #8]
      break;
 8005458:	e03c      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	6859      	ldr	r1, [r3, #4]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	461a      	mov	r2, r3
 8005468:	f000 fbba 	bl	8005be0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2150      	movs	r1, #80	; 0x50
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fc14 	bl	8005ca0 <TIM_ITRx_SetConfig>
      break;
 8005478:	e02c      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6859      	ldr	r1, [r3, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	461a      	mov	r2, r3
 8005488:	f000 fbd9 	bl	8005c3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2160      	movs	r1, #96	; 0x60
 8005492:	4618      	mov	r0, r3
 8005494:	f000 fc04 	bl	8005ca0 <TIM_ITRx_SetConfig>
      break;
 8005498:	e01c      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6859      	ldr	r1, [r3, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	461a      	mov	r2, r3
 80054a8:	f000 fb9a 	bl	8005be0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2140      	movs	r1, #64	; 0x40
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fbf4 	bl	8005ca0 <TIM_ITRx_SetConfig>
      break;
 80054b8:	e00c      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4619      	mov	r1, r3
 80054c4:	4610      	mov	r0, r2
 80054c6:	f000 fbeb 	bl	8005ca0 <TIM_ITRx_SetConfig>
      break;
 80054ca:	e003      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	73fb      	strb	r3, [r7, #15]
      break;
 80054d0:	e000      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80054d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	ffceff88 	.word	0xffceff88
 80054f4:	00100040 	.word	0x00100040
 80054f8:	00100030 	.word	0x00100030
 80054fc:	00100020 	.word	0x00100020

08005500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a40      	ldr	r2, [pc, #256]	; (8005614 <TIM_Base_SetConfig+0x114>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d013      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551e:	d00f      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a3d      	ldr	r2, [pc, #244]	; (8005618 <TIM_Base_SetConfig+0x118>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00b      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a3c      	ldr	r2, [pc, #240]	; (800561c <TIM_Base_SetConfig+0x11c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d007      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a3b      	ldr	r2, [pc, #236]	; (8005620 <TIM_Base_SetConfig+0x120>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a3a      	ldr	r2, [pc, #232]	; (8005624 <TIM_Base_SetConfig+0x124>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d108      	bne.n	8005552 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a2f      	ldr	r2, [pc, #188]	; (8005614 <TIM_Base_SetConfig+0x114>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01f      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005560:	d01b      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a2c      	ldr	r2, [pc, #176]	; (8005618 <TIM_Base_SetConfig+0x118>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d017      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a2b      	ldr	r2, [pc, #172]	; (800561c <TIM_Base_SetConfig+0x11c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d013      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a2a      	ldr	r2, [pc, #168]	; (8005620 <TIM_Base_SetConfig+0x120>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00f      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a29      	ldr	r2, [pc, #164]	; (8005624 <TIM_Base_SetConfig+0x124>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00b      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a28      	ldr	r2, [pc, #160]	; (8005628 <TIM_Base_SetConfig+0x128>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d007      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a27      	ldr	r2, [pc, #156]	; (800562c <TIM_Base_SetConfig+0x12c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d003      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a26      	ldr	r2, [pc, #152]	; (8005630 <TIM_Base_SetConfig+0x130>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d108      	bne.n	80055ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a10      	ldr	r2, [pc, #64]	; (8005614 <TIM_Base_SetConfig+0x114>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00f      	beq.n	80055f8 <TIM_Base_SetConfig+0xf8>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a12      	ldr	r2, [pc, #72]	; (8005624 <TIM_Base_SetConfig+0x124>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00b      	beq.n	80055f8 <TIM_Base_SetConfig+0xf8>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a11      	ldr	r2, [pc, #68]	; (8005628 <TIM_Base_SetConfig+0x128>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d007      	beq.n	80055f8 <TIM_Base_SetConfig+0xf8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a10      	ldr	r2, [pc, #64]	; (800562c <TIM_Base_SetConfig+0x12c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d003      	beq.n	80055f8 <TIM_Base_SetConfig+0xf8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a0f      	ldr	r2, [pc, #60]	; (8005630 <TIM_Base_SetConfig+0x130>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d103      	bne.n	8005600 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	615a      	str	r2, [r3, #20]
}
 8005606:	bf00      	nop
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40010000 	.word	0x40010000
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40000c00 	.word	0x40000c00
 8005624:	40010400 	.word	0x40010400
 8005628:	40014000 	.word	0x40014000
 800562c:	40014400 	.word	0x40014400
 8005630:	40014800 	.word	0x40014800

08005634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f023 0201 	bic.w	r2, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4b37      	ldr	r3, [pc, #220]	; (800573c <TIM_OC1_SetConfig+0x108>)
 8005660:	4013      	ands	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0303 	bic.w	r3, r3, #3
 800566a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f023 0302 	bic.w	r3, r3, #2
 800567c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a2d      	ldr	r2, [pc, #180]	; (8005740 <TIM_OC1_SetConfig+0x10c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00f      	beq.n	80056b0 <TIM_OC1_SetConfig+0x7c>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a2c      	ldr	r2, [pc, #176]	; (8005744 <TIM_OC1_SetConfig+0x110>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00b      	beq.n	80056b0 <TIM_OC1_SetConfig+0x7c>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a2b      	ldr	r2, [pc, #172]	; (8005748 <TIM_OC1_SetConfig+0x114>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d007      	beq.n	80056b0 <TIM_OC1_SetConfig+0x7c>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a2a      	ldr	r2, [pc, #168]	; (800574c <TIM_OC1_SetConfig+0x118>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d003      	beq.n	80056b0 <TIM_OC1_SetConfig+0x7c>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a29      	ldr	r2, [pc, #164]	; (8005750 <TIM_OC1_SetConfig+0x11c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d10c      	bne.n	80056ca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f023 0308 	bic.w	r3, r3, #8
 80056b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f023 0304 	bic.w	r3, r3, #4
 80056c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a1c      	ldr	r2, [pc, #112]	; (8005740 <TIM_OC1_SetConfig+0x10c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00f      	beq.n	80056f2 <TIM_OC1_SetConfig+0xbe>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a1b      	ldr	r2, [pc, #108]	; (8005744 <TIM_OC1_SetConfig+0x110>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00b      	beq.n	80056f2 <TIM_OC1_SetConfig+0xbe>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a1a      	ldr	r2, [pc, #104]	; (8005748 <TIM_OC1_SetConfig+0x114>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d007      	beq.n	80056f2 <TIM_OC1_SetConfig+0xbe>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a19      	ldr	r2, [pc, #100]	; (800574c <TIM_OC1_SetConfig+0x118>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d003      	beq.n	80056f2 <TIM_OC1_SetConfig+0xbe>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a18      	ldr	r2, [pc, #96]	; (8005750 <TIM_OC1_SetConfig+0x11c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d111      	bne.n	8005716 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	621a      	str	r2, [r3, #32]
}
 8005730:	bf00      	nop
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	fffeff8f 	.word	0xfffeff8f
 8005740:	40010000 	.word	0x40010000
 8005744:	40010400 	.word	0x40010400
 8005748:	40014000 	.word	0x40014000
 800574c:	40014400 	.word	0x40014400
 8005750:	40014800 	.word	0x40014800

08005754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f023 0210 	bic.w	r2, r3, #16
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4b34      	ldr	r3, [pc, #208]	; (8005850 <TIM_OC2_SetConfig+0xfc>)
 8005780:	4013      	ands	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	021b      	lsls	r3, r3, #8
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f023 0320 	bic.w	r3, r3, #32
 800579e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a29      	ldr	r2, [pc, #164]	; (8005854 <TIM_OC2_SetConfig+0x100>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_OC2_SetConfig+0x68>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a28      	ldr	r2, [pc, #160]	; (8005858 <TIM_OC2_SetConfig+0x104>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d10d      	bne.n	80057d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	011b      	lsls	r3, r3, #4
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a1e      	ldr	r2, [pc, #120]	; (8005854 <TIM_OC2_SetConfig+0x100>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00f      	beq.n	8005800 <TIM_OC2_SetConfig+0xac>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a1d      	ldr	r2, [pc, #116]	; (8005858 <TIM_OC2_SetConfig+0x104>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00b      	beq.n	8005800 <TIM_OC2_SetConfig+0xac>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a1c      	ldr	r2, [pc, #112]	; (800585c <TIM_OC2_SetConfig+0x108>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d007      	beq.n	8005800 <TIM_OC2_SetConfig+0xac>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a1b      	ldr	r2, [pc, #108]	; (8005860 <TIM_OC2_SetConfig+0x10c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d003      	beq.n	8005800 <TIM_OC2_SetConfig+0xac>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a1a      	ldr	r2, [pc, #104]	; (8005864 <TIM_OC2_SetConfig+0x110>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d113      	bne.n	8005828 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005806:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800580e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	feff8fff 	.word	0xfeff8fff
 8005854:	40010000 	.word	0x40010000
 8005858:	40010400 	.word	0x40010400
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800

08005868 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4b33      	ldr	r3, [pc, #204]	; (8005960 <TIM_OC3_SetConfig+0xf8>)
 8005894:	4013      	ands	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0303 	bic.w	r3, r3, #3
 800589e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a28      	ldr	r2, [pc, #160]	; (8005964 <TIM_OC3_SetConfig+0xfc>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d003      	beq.n	80058ce <TIM_OC3_SetConfig+0x66>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a27      	ldr	r2, [pc, #156]	; (8005968 <TIM_OC3_SetConfig+0x100>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d10d      	bne.n	80058ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	021b      	lsls	r3, r3, #8
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a1d      	ldr	r2, [pc, #116]	; (8005964 <TIM_OC3_SetConfig+0xfc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00f      	beq.n	8005912 <TIM_OC3_SetConfig+0xaa>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a1c      	ldr	r2, [pc, #112]	; (8005968 <TIM_OC3_SetConfig+0x100>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00b      	beq.n	8005912 <TIM_OC3_SetConfig+0xaa>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a1b      	ldr	r2, [pc, #108]	; (800596c <TIM_OC3_SetConfig+0x104>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d007      	beq.n	8005912 <TIM_OC3_SetConfig+0xaa>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a1a      	ldr	r2, [pc, #104]	; (8005970 <TIM_OC3_SetConfig+0x108>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d003      	beq.n	8005912 <TIM_OC3_SetConfig+0xaa>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a19      	ldr	r2, [pc, #100]	; (8005974 <TIM_OC3_SetConfig+0x10c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d113      	bne.n	800593a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	621a      	str	r2, [r3, #32]
}
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	fffeff8f 	.word	0xfffeff8f
 8005964:	40010000 	.word	0x40010000
 8005968:	40010400 	.word	0x40010400
 800596c:	40014000 	.word	0x40014000
 8005970:	40014400 	.word	0x40014400
 8005974:	40014800 	.word	0x40014800

08005978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4b24      	ldr	r3, [pc, #144]	; (8005a34 <TIM_OC4_SetConfig+0xbc>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	021b      	lsls	r3, r3, #8
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	031b      	lsls	r3, r3, #12
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a19      	ldr	r2, [pc, #100]	; (8005a38 <TIM_OC4_SetConfig+0xc0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00f      	beq.n	80059f8 <TIM_OC4_SetConfig+0x80>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a18      	ldr	r2, [pc, #96]	; (8005a3c <TIM_OC4_SetConfig+0xc4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00b      	beq.n	80059f8 <TIM_OC4_SetConfig+0x80>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a17      	ldr	r2, [pc, #92]	; (8005a40 <TIM_OC4_SetConfig+0xc8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d007      	beq.n	80059f8 <TIM_OC4_SetConfig+0x80>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a16      	ldr	r2, [pc, #88]	; (8005a44 <TIM_OC4_SetConfig+0xcc>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d003      	beq.n	80059f8 <TIM_OC4_SetConfig+0x80>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a15      	ldr	r2, [pc, #84]	; (8005a48 <TIM_OC4_SetConfig+0xd0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d109      	bne.n	8005a0c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	019b      	lsls	r3, r3, #6
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	621a      	str	r2, [r3, #32]
}
 8005a26:	bf00      	nop
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	feff8fff 	.word	0xfeff8fff
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40010400 	.word	0x40010400
 8005a40:	40014000 	.word	0x40014000
 8005a44:	40014400 	.word	0x40014400
 8005a48:	40014800 	.word	0x40014800

08005a4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4b21      	ldr	r3, [pc, #132]	; (8005afc <TIM_OC5_SetConfig+0xb0>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	041b      	lsls	r3, r3, #16
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a18      	ldr	r2, [pc, #96]	; (8005b00 <TIM_OC5_SetConfig+0xb4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d00f      	beq.n	8005ac2 <TIM_OC5_SetConfig+0x76>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a17      	ldr	r2, [pc, #92]	; (8005b04 <TIM_OC5_SetConfig+0xb8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00b      	beq.n	8005ac2 <TIM_OC5_SetConfig+0x76>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a16      	ldr	r2, [pc, #88]	; (8005b08 <TIM_OC5_SetConfig+0xbc>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d007      	beq.n	8005ac2 <TIM_OC5_SetConfig+0x76>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a15      	ldr	r2, [pc, #84]	; (8005b0c <TIM_OC5_SetConfig+0xc0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d003      	beq.n	8005ac2 <TIM_OC5_SetConfig+0x76>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a14      	ldr	r2, [pc, #80]	; (8005b10 <TIM_OC5_SetConfig+0xc4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d109      	bne.n	8005ad6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	021b      	lsls	r3, r3, #8
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	621a      	str	r2, [r3, #32]
}
 8005af0:	bf00      	nop
 8005af2:	371c      	adds	r7, #28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	fffeff8f 	.word	0xfffeff8f
 8005b00:	40010000 	.word	0x40010000
 8005b04:	40010400 	.word	0x40010400
 8005b08:	40014000 	.word	0x40014000
 8005b0c:	40014400 	.word	0x40014400
 8005b10:	40014800 	.word	0x40014800

08005b14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4b22      	ldr	r3, [pc, #136]	; (8005bc8 <TIM_OC6_SetConfig+0xb4>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	051b      	lsls	r3, r3, #20
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a19      	ldr	r2, [pc, #100]	; (8005bcc <TIM_OC6_SetConfig+0xb8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00f      	beq.n	8005b8c <TIM_OC6_SetConfig+0x78>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a18      	ldr	r2, [pc, #96]	; (8005bd0 <TIM_OC6_SetConfig+0xbc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00b      	beq.n	8005b8c <TIM_OC6_SetConfig+0x78>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a17      	ldr	r2, [pc, #92]	; (8005bd4 <TIM_OC6_SetConfig+0xc0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d007      	beq.n	8005b8c <TIM_OC6_SetConfig+0x78>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a16      	ldr	r2, [pc, #88]	; (8005bd8 <TIM_OC6_SetConfig+0xc4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_OC6_SetConfig+0x78>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a15      	ldr	r2, [pc, #84]	; (8005bdc <TIM_OC6_SetConfig+0xc8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d109      	bne.n	8005ba0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	029b      	lsls	r3, r3, #10
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	feff8fff 	.word	0xfeff8fff
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40010400 	.word	0x40010400
 8005bd4:	40014000 	.word	0x40014000
 8005bd8:	40014400 	.word	0x40014400
 8005bdc:	40014800 	.word	0x40014800

08005be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	f023 0201 	bic.w	r2, r3, #1
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f023 030a 	bic.w	r3, r3, #10
 8005c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	621a      	str	r2, [r3, #32]
}
 8005c32:	bf00      	nop
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b087      	sub	sp, #28
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f023 0210 	bic.w	r2, r3, #16
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	031b      	lsls	r3, r3, #12
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	621a      	str	r2, [r3, #32]
}
 8005c92:	bf00      	nop
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
	...

08005ca0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <TIM_ITRx_SetConfig+0x38>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f043 0307 	orr.w	r3, r3, #7
 8005cc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	609a      	str	r2, [r3, #8]
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	ffcfff8f 	.word	0xffcfff8f

08005cdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	021a      	lsls	r2, r3, #8
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	609a      	str	r2, [r3, #8]
}
 8005d10:	bf00      	nop
 8005d12:	371c      	adds	r7, #28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f003 031f 	and.w	r3, r3, #31
 8005d2e:	2201      	movs	r2, #1
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a1a      	ldr	r2, [r3, #32]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	401a      	ands	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a1a      	ldr	r2, [r3, #32]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f003 031f 	and.w	r3, r3, #31
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	fa01 f303 	lsl.w	r3, r1, r3
 8005d54:	431a      	orrs	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	621a      	str	r2, [r3, #32]
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
	...

08005d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d101      	bne.n	8005d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e06d      	b.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a30      	ldr	r2, [pc, #192]	; (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d004      	beq.n	8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a2f      	ldr	r2, [pc, #188]	; (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d108      	bne.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005dba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a20      	ldr	r2, [pc, #128]	; (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d022      	beq.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df2:	d01d      	beq.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a1d      	ldr	r2, [pc, #116]	; (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d018      	beq.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a1c      	ldr	r2, [pc, #112]	; (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d013      	beq.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1a      	ldr	r2, [pc, #104]	; (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00e      	beq.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a15      	ldr	r2, [pc, #84]	; (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d009      	beq.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a16      	ldr	r2, [pc, #88]	; (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d004      	beq.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a15      	ldr	r2, [pc, #84]	; (8005e80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d10c      	bne.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	40010000 	.word	0x40010000
 8005e6c:	40010400 	.word	0x40010400
 8005e70:	40000400 	.word	0x40000400
 8005e74:	40000800 	.word	0x40000800
 8005e78:	40000c00 	.word	0x40000c00
 8005e7c:	40001800 	.word	0x40001800
 8005e80:	40014000 	.word	0x40014000

08005e84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e065      	b.n	8005f6c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	041b      	lsls	r3, r3, #16
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a16      	ldr	r2, [pc, #88]	; (8005f78 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d004      	beq.n	8005f2e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a14      	ldr	r2, [pc, #80]	; (8005f7c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d115      	bne.n	8005f5a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	051b      	lsls	r3, r3, #20
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	40010000 	.word	0x40010000
 8005f7c:	40010400 	.word	0x40010400

08005f80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e042      	b.n	8006018 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d106      	bne.n	8005faa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7fb fe39 	bl	8001c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2224      	movs	r2, #36	; 0x24
 8005fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0201 	bic.w	r2, r2, #1
 8005fc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f996 	bl	80062f4 <UART_SetConfig>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d101      	bne.n	8005fd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e022      	b.n	8006018 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 feea 	bl	8006db4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ffe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 ff71 	bl	8006ef8 <UART_CheckIdleState>
 8006016:	4603      	mov	r3, r0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08a      	sub	sp, #40	; 0x28
 8006024:	af02      	add	r7, sp, #8
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	4613      	mov	r3, r2
 800602e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006036:	2b20      	cmp	r3, #32
 8006038:	f040 8083 	bne.w	8006142 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <HAL_UART_Transmit+0x28>
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e07b      	b.n	8006144 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006052:	2b01      	cmp	r3, #1
 8006054:	d101      	bne.n	800605a <HAL_UART_Transmit+0x3a>
 8006056:	2302      	movs	r3, #2
 8006058:	e074      	b.n	8006144 <HAL_UART_Transmit+0x124>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2221      	movs	r2, #33	; 0x21
 800606e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006072:	f7fc f837 	bl	80020e4 <HAL_GetTick>
 8006076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	88fa      	ldrh	r2, [r7, #6]
 800607c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	88fa      	ldrh	r2, [r7, #6]
 8006084:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006090:	d108      	bne.n	80060a4 <HAL_UART_Transmit+0x84>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d104      	bne.n	80060a4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800609a:	2300      	movs	r3, #0
 800609c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	61bb      	str	r3, [r7, #24]
 80060a2:	e003      	b.n	80060ac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80060b4:	e02c      	b.n	8006110 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2200      	movs	r2, #0
 80060be:	2180      	movs	r1, #128	; 0x80
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 ff64 	bl	8006f8e <UART_WaitOnFlagUntilTimeout>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e039      	b.n	8006144 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10b      	bne.n	80060ee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	3302      	adds	r3, #2
 80060ea:	61bb      	str	r3, [r7, #24]
 80060ec:	e007      	b.n	80060fe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	781a      	ldrb	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	3301      	adds	r3, #1
 80060fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006104:	b29b      	uxth	r3, r3
 8006106:	3b01      	subs	r3, #1
 8006108:	b29a      	uxth	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1cc      	bne.n	80060b6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	2200      	movs	r2, #0
 8006124:	2140      	movs	r1, #64	; 0x40
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 ff31 	bl	8006f8e <UART_WaitOnFlagUntilTimeout>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e006      	b.n	8006144 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2220      	movs	r2, #32
 800613a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	e000      	b.n	8006144 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006142:	2302      	movs	r3, #2
  }
}
 8006144:	4618      	mov	r0, r3
 8006146:	3720      	adds	r7, #32
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08a      	sub	sp, #40	; 0x28
 8006150:	af02      	add	r7, sp, #8
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	603b      	str	r3, [r7, #0]
 8006158:	4613      	mov	r3, r2
 800615a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006162:	2b20      	cmp	r3, #32
 8006164:	f040 80c0 	bne.w	80062e8 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <HAL_UART_Receive+0x28>
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e0b8      	b.n	80062ea <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <HAL_UART_Receive+0x3a>
 8006182:	2302      	movs	r3, #2
 8006184:	e0b1      	b.n	80062ea <HAL_UART_Receive+0x19e>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2222      	movs	r2, #34	; 0x22
 800619a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061a4:	f7fb ff9e 	bl	80020e4 <HAL_GetTick>
 80061a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	88fa      	ldrh	r2, [r7, #6]
 80061ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	88fa      	ldrh	r2, [r7, #6]
 80061b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c2:	d10e      	bne.n	80061e2 <HAL_UART_Receive+0x96>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d105      	bne.n	80061d8 <HAL_UART_Receive+0x8c>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80061d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061d6:	e02d      	b.n	8006234 <HAL_UART_Receive+0xe8>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	22ff      	movs	r2, #255	; 0xff
 80061dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061e0:	e028      	b.n	8006234 <HAL_UART_Receive+0xe8>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10d      	bne.n	8006206 <HAL_UART_Receive+0xba>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d104      	bne.n	80061fc <HAL_UART_Receive+0xb0>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	22ff      	movs	r2, #255	; 0xff
 80061f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061fa:	e01b      	b.n	8006234 <HAL_UART_Receive+0xe8>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	227f      	movs	r2, #127	; 0x7f
 8006200:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006204:	e016      	b.n	8006234 <HAL_UART_Receive+0xe8>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800620e:	d10d      	bne.n	800622c <HAL_UART_Receive+0xe0>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d104      	bne.n	8006222 <HAL_UART_Receive+0xd6>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	227f      	movs	r2, #127	; 0x7f
 800621c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006220:	e008      	b.n	8006234 <HAL_UART_Receive+0xe8>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	223f      	movs	r2, #63	; 0x3f
 8006226:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800622a:	e003      	b.n	8006234 <HAL_UART_Receive+0xe8>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800623a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006244:	d108      	bne.n	8006258 <HAL_UART_Receive+0x10c>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d104      	bne.n	8006258 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800624e:	2300      	movs	r3, #0
 8006250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	e003      	b.n	8006260 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800625c:	2300      	movs	r3, #0
 800625e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006268:	e032      	b.n	80062d0 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2200      	movs	r2, #0
 8006272:	2120      	movs	r1, #32
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 fe8a 	bl	8006f8e <UART_WaitOnFlagUntilTimeout>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e032      	b.n	80062ea <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10c      	bne.n	80062a4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	b29a      	uxth	r2, r3
 8006292:	8a7b      	ldrh	r3, [r7, #18]
 8006294:	4013      	ands	r3, r2
 8006296:	b29a      	uxth	r2, r3
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	3302      	adds	r3, #2
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	e00c      	b.n	80062be <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	8a7b      	ldrh	r3, [r7, #18]
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	4013      	ands	r3, r2
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	3301      	adds	r3, #1
 80062bc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1c6      	bne.n	800626a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2220      	movs	r2, #32
 80062e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	e000      	b.n	80062ea <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80062e8:	2302      	movs	r3, #2
  }
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3720      	adds	r7, #32
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
	...

080062f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062f4:	b5b0      	push	{r4, r5, r7, lr}
 80062f6:	b08e      	sub	sp, #56	; 0x38
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	431a      	orrs	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	4313      	orrs	r3, r2
 8006318:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	4bbf      	ldr	r3, [pc, #764]	; (8006620 <UART_SetConfig+0x32c>)
 8006322:	4013      	ands	r3, r2
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6812      	ldr	r2, [r2, #0]
 8006328:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800632a:	430b      	orrs	r3, r1
 800632c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4ab5      	ldr	r2, [pc, #724]	; (8006624 <UART_SetConfig+0x330>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d004      	beq.n	800635e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800635a:	4313      	orrs	r3, r2
 800635c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	4bb0      	ldr	r3, [pc, #704]	; (8006628 <UART_SetConfig+0x334>)
 8006366:	4013      	ands	r3, r2
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	6812      	ldr	r2, [r2, #0]
 800636c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800636e:	430b      	orrs	r3, r1
 8006370:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	f023 010f 	bic.w	r1, r3, #15
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4aa7      	ldr	r2, [pc, #668]	; (800662c <UART_SetConfig+0x338>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d176      	bne.n	8006480 <UART_SetConfig+0x18c>
 8006392:	4ba7      	ldr	r3, [pc, #668]	; (8006630 <UART_SetConfig+0x33c>)
 8006394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006396:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800639a:	2b28      	cmp	r3, #40	; 0x28
 800639c:	d86c      	bhi.n	8006478 <UART_SetConfig+0x184>
 800639e:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <UART_SetConfig+0xb0>)
 80063a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a4:	08006449 	.word	0x08006449
 80063a8:	08006479 	.word	0x08006479
 80063ac:	08006479 	.word	0x08006479
 80063b0:	08006479 	.word	0x08006479
 80063b4:	08006479 	.word	0x08006479
 80063b8:	08006479 	.word	0x08006479
 80063bc:	08006479 	.word	0x08006479
 80063c0:	08006479 	.word	0x08006479
 80063c4:	08006451 	.word	0x08006451
 80063c8:	08006479 	.word	0x08006479
 80063cc:	08006479 	.word	0x08006479
 80063d0:	08006479 	.word	0x08006479
 80063d4:	08006479 	.word	0x08006479
 80063d8:	08006479 	.word	0x08006479
 80063dc:	08006479 	.word	0x08006479
 80063e0:	08006479 	.word	0x08006479
 80063e4:	08006459 	.word	0x08006459
 80063e8:	08006479 	.word	0x08006479
 80063ec:	08006479 	.word	0x08006479
 80063f0:	08006479 	.word	0x08006479
 80063f4:	08006479 	.word	0x08006479
 80063f8:	08006479 	.word	0x08006479
 80063fc:	08006479 	.word	0x08006479
 8006400:	08006479 	.word	0x08006479
 8006404:	08006461 	.word	0x08006461
 8006408:	08006479 	.word	0x08006479
 800640c:	08006479 	.word	0x08006479
 8006410:	08006479 	.word	0x08006479
 8006414:	08006479 	.word	0x08006479
 8006418:	08006479 	.word	0x08006479
 800641c:	08006479 	.word	0x08006479
 8006420:	08006479 	.word	0x08006479
 8006424:	08006469 	.word	0x08006469
 8006428:	08006479 	.word	0x08006479
 800642c:	08006479 	.word	0x08006479
 8006430:	08006479 	.word	0x08006479
 8006434:	08006479 	.word	0x08006479
 8006438:	08006479 	.word	0x08006479
 800643c:	08006479 	.word	0x08006479
 8006440:	08006479 	.word	0x08006479
 8006444:	08006471 	.word	0x08006471
 8006448:	2301      	movs	r3, #1
 800644a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800644e:	e222      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006450:	2304      	movs	r3, #4
 8006452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006456:	e21e      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006458:	2308      	movs	r3, #8
 800645a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800645e:	e21a      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006460:	2310      	movs	r3, #16
 8006462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006466:	e216      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006468:	2320      	movs	r3, #32
 800646a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800646e:	e212      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006470:	2340      	movs	r3, #64	; 0x40
 8006472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006476:	e20e      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006478:	2380      	movs	r3, #128	; 0x80
 800647a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800647e:	e20a      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a6b      	ldr	r2, [pc, #428]	; (8006634 <UART_SetConfig+0x340>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d130      	bne.n	80064ec <UART_SetConfig+0x1f8>
 800648a:	4b69      	ldr	r3, [pc, #420]	; (8006630 <UART_SetConfig+0x33c>)
 800648c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	2b05      	cmp	r3, #5
 8006494:	d826      	bhi.n	80064e4 <UART_SetConfig+0x1f0>
 8006496:	a201      	add	r2, pc, #4	; (adr r2, 800649c <UART_SetConfig+0x1a8>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	080064b5 	.word	0x080064b5
 80064a0:	080064bd 	.word	0x080064bd
 80064a4:	080064c5 	.word	0x080064c5
 80064a8:	080064cd 	.word	0x080064cd
 80064ac:	080064d5 	.word	0x080064d5
 80064b0:	080064dd 	.word	0x080064dd
 80064b4:	2300      	movs	r3, #0
 80064b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ba:	e1ec      	b.n	8006896 <UART_SetConfig+0x5a2>
 80064bc:	2304      	movs	r3, #4
 80064be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064c2:	e1e8      	b.n	8006896 <UART_SetConfig+0x5a2>
 80064c4:	2308      	movs	r3, #8
 80064c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ca:	e1e4      	b.n	8006896 <UART_SetConfig+0x5a2>
 80064cc:	2310      	movs	r3, #16
 80064ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064d2:	e1e0      	b.n	8006896 <UART_SetConfig+0x5a2>
 80064d4:	2320      	movs	r3, #32
 80064d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064da:	e1dc      	b.n	8006896 <UART_SetConfig+0x5a2>
 80064dc:	2340      	movs	r3, #64	; 0x40
 80064de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064e2:	e1d8      	b.n	8006896 <UART_SetConfig+0x5a2>
 80064e4:	2380      	movs	r3, #128	; 0x80
 80064e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ea:	e1d4      	b.n	8006896 <UART_SetConfig+0x5a2>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a51      	ldr	r2, [pc, #324]	; (8006638 <UART_SetConfig+0x344>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d130      	bne.n	8006558 <UART_SetConfig+0x264>
 80064f6:	4b4e      	ldr	r3, [pc, #312]	; (8006630 <UART_SetConfig+0x33c>)
 80064f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fa:	f003 0307 	and.w	r3, r3, #7
 80064fe:	2b05      	cmp	r3, #5
 8006500:	d826      	bhi.n	8006550 <UART_SetConfig+0x25c>
 8006502:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <UART_SetConfig+0x214>)
 8006504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006508:	08006521 	.word	0x08006521
 800650c:	08006529 	.word	0x08006529
 8006510:	08006531 	.word	0x08006531
 8006514:	08006539 	.word	0x08006539
 8006518:	08006541 	.word	0x08006541
 800651c:	08006549 	.word	0x08006549
 8006520:	2300      	movs	r3, #0
 8006522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006526:	e1b6      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006528:	2304      	movs	r3, #4
 800652a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800652e:	e1b2      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006530:	2308      	movs	r3, #8
 8006532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006536:	e1ae      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006538:	2310      	movs	r3, #16
 800653a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800653e:	e1aa      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006540:	2320      	movs	r3, #32
 8006542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006546:	e1a6      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006548:	2340      	movs	r3, #64	; 0x40
 800654a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800654e:	e1a2      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006550:	2380      	movs	r3, #128	; 0x80
 8006552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006556:	e19e      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a37      	ldr	r2, [pc, #220]	; (800663c <UART_SetConfig+0x348>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d130      	bne.n	80065c4 <UART_SetConfig+0x2d0>
 8006562:	4b33      	ldr	r3, [pc, #204]	; (8006630 <UART_SetConfig+0x33c>)
 8006564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	2b05      	cmp	r3, #5
 800656c:	d826      	bhi.n	80065bc <UART_SetConfig+0x2c8>
 800656e:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <UART_SetConfig+0x280>)
 8006570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006574:	0800658d 	.word	0x0800658d
 8006578:	08006595 	.word	0x08006595
 800657c:	0800659d 	.word	0x0800659d
 8006580:	080065a5 	.word	0x080065a5
 8006584:	080065ad 	.word	0x080065ad
 8006588:	080065b5 	.word	0x080065b5
 800658c:	2300      	movs	r3, #0
 800658e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006592:	e180      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006594:	2304      	movs	r3, #4
 8006596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800659a:	e17c      	b.n	8006896 <UART_SetConfig+0x5a2>
 800659c:	2308      	movs	r3, #8
 800659e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065a2:	e178      	b.n	8006896 <UART_SetConfig+0x5a2>
 80065a4:	2310      	movs	r3, #16
 80065a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065aa:	e174      	b.n	8006896 <UART_SetConfig+0x5a2>
 80065ac:	2320      	movs	r3, #32
 80065ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065b2:	e170      	b.n	8006896 <UART_SetConfig+0x5a2>
 80065b4:	2340      	movs	r3, #64	; 0x40
 80065b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ba:	e16c      	b.n	8006896 <UART_SetConfig+0x5a2>
 80065bc:	2380      	movs	r3, #128	; 0x80
 80065be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065c2:	e168      	b.n	8006896 <UART_SetConfig+0x5a2>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1d      	ldr	r2, [pc, #116]	; (8006640 <UART_SetConfig+0x34c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d142      	bne.n	8006654 <UART_SetConfig+0x360>
 80065ce:	4b18      	ldr	r3, [pc, #96]	; (8006630 <UART_SetConfig+0x33c>)
 80065d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	2b05      	cmp	r3, #5
 80065d8:	d838      	bhi.n	800664c <UART_SetConfig+0x358>
 80065da:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <UART_SetConfig+0x2ec>)
 80065dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e0:	080065f9 	.word	0x080065f9
 80065e4:	08006601 	.word	0x08006601
 80065e8:	08006609 	.word	0x08006609
 80065ec:	08006611 	.word	0x08006611
 80065f0:	08006619 	.word	0x08006619
 80065f4:	08006645 	.word	0x08006645
 80065f8:	2300      	movs	r3, #0
 80065fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065fe:	e14a      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006600:	2304      	movs	r3, #4
 8006602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006606:	e146      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006608:	2308      	movs	r3, #8
 800660a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800660e:	e142      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006610:	2310      	movs	r3, #16
 8006612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006616:	e13e      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006618:	2320      	movs	r3, #32
 800661a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800661e:	e13a      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006620:	cfff69f3 	.word	0xcfff69f3
 8006624:	58000c00 	.word	0x58000c00
 8006628:	11fff4ff 	.word	0x11fff4ff
 800662c:	40011000 	.word	0x40011000
 8006630:	58024400 	.word	0x58024400
 8006634:	40004400 	.word	0x40004400
 8006638:	40004800 	.word	0x40004800
 800663c:	40004c00 	.word	0x40004c00
 8006640:	40005000 	.word	0x40005000
 8006644:	2340      	movs	r3, #64	; 0x40
 8006646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800664a:	e124      	b.n	8006896 <UART_SetConfig+0x5a2>
 800664c:	2380      	movs	r3, #128	; 0x80
 800664e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006652:	e120      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4acc      	ldr	r2, [pc, #816]	; (800698c <UART_SetConfig+0x698>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d176      	bne.n	800674c <UART_SetConfig+0x458>
 800665e:	4bcc      	ldr	r3, [pc, #816]	; (8006990 <UART_SetConfig+0x69c>)
 8006660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006666:	2b28      	cmp	r3, #40	; 0x28
 8006668:	d86c      	bhi.n	8006744 <UART_SetConfig+0x450>
 800666a:	a201      	add	r2, pc, #4	; (adr r2, 8006670 <UART_SetConfig+0x37c>)
 800666c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006670:	08006715 	.word	0x08006715
 8006674:	08006745 	.word	0x08006745
 8006678:	08006745 	.word	0x08006745
 800667c:	08006745 	.word	0x08006745
 8006680:	08006745 	.word	0x08006745
 8006684:	08006745 	.word	0x08006745
 8006688:	08006745 	.word	0x08006745
 800668c:	08006745 	.word	0x08006745
 8006690:	0800671d 	.word	0x0800671d
 8006694:	08006745 	.word	0x08006745
 8006698:	08006745 	.word	0x08006745
 800669c:	08006745 	.word	0x08006745
 80066a0:	08006745 	.word	0x08006745
 80066a4:	08006745 	.word	0x08006745
 80066a8:	08006745 	.word	0x08006745
 80066ac:	08006745 	.word	0x08006745
 80066b0:	08006725 	.word	0x08006725
 80066b4:	08006745 	.word	0x08006745
 80066b8:	08006745 	.word	0x08006745
 80066bc:	08006745 	.word	0x08006745
 80066c0:	08006745 	.word	0x08006745
 80066c4:	08006745 	.word	0x08006745
 80066c8:	08006745 	.word	0x08006745
 80066cc:	08006745 	.word	0x08006745
 80066d0:	0800672d 	.word	0x0800672d
 80066d4:	08006745 	.word	0x08006745
 80066d8:	08006745 	.word	0x08006745
 80066dc:	08006745 	.word	0x08006745
 80066e0:	08006745 	.word	0x08006745
 80066e4:	08006745 	.word	0x08006745
 80066e8:	08006745 	.word	0x08006745
 80066ec:	08006745 	.word	0x08006745
 80066f0:	08006735 	.word	0x08006735
 80066f4:	08006745 	.word	0x08006745
 80066f8:	08006745 	.word	0x08006745
 80066fc:	08006745 	.word	0x08006745
 8006700:	08006745 	.word	0x08006745
 8006704:	08006745 	.word	0x08006745
 8006708:	08006745 	.word	0x08006745
 800670c:	08006745 	.word	0x08006745
 8006710:	0800673d 	.word	0x0800673d
 8006714:	2301      	movs	r3, #1
 8006716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800671a:	e0bc      	b.n	8006896 <UART_SetConfig+0x5a2>
 800671c:	2304      	movs	r3, #4
 800671e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006722:	e0b8      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006724:	2308      	movs	r3, #8
 8006726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800672a:	e0b4      	b.n	8006896 <UART_SetConfig+0x5a2>
 800672c:	2310      	movs	r3, #16
 800672e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006732:	e0b0      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006734:	2320      	movs	r3, #32
 8006736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800673a:	e0ac      	b.n	8006896 <UART_SetConfig+0x5a2>
 800673c:	2340      	movs	r3, #64	; 0x40
 800673e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006742:	e0a8      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006744:	2380      	movs	r3, #128	; 0x80
 8006746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800674a:	e0a4      	b.n	8006896 <UART_SetConfig+0x5a2>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a90      	ldr	r2, [pc, #576]	; (8006994 <UART_SetConfig+0x6a0>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d130      	bne.n	80067b8 <UART_SetConfig+0x4c4>
 8006756:	4b8e      	ldr	r3, [pc, #568]	; (8006990 <UART_SetConfig+0x69c>)
 8006758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675a:	f003 0307 	and.w	r3, r3, #7
 800675e:	2b05      	cmp	r3, #5
 8006760:	d826      	bhi.n	80067b0 <UART_SetConfig+0x4bc>
 8006762:	a201      	add	r2, pc, #4	; (adr r2, 8006768 <UART_SetConfig+0x474>)
 8006764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006768:	08006781 	.word	0x08006781
 800676c:	08006789 	.word	0x08006789
 8006770:	08006791 	.word	0x08006791
 8006774:	08006799 	.word	0x08006799
 8006778:	080067a1 	.word	0x080067a1
 800677c:	080067a9 	.word	0x080067a9
 8006780:	2300      	movs	r3, #0
 8006782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006786:	e086      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006788:	2304      	movs	r3, #4
 800678a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800678e:	e082      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006790:	2308      	movs	r3, #8
 8006792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006796:	e07e      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006798:	2310      	movs	r3, #16
 800679a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800679e:	e07a      	b.n	8006896 <UART_SetConfig+0x5a2>
 80067a0:	2320      	movs	r3, #32
 80067a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067a6:	e076      	b.n	8006896 <UART_SetConfig+0x5a2>
 80067a8:	2340      	movs	r3, #64	; 0x40
 80067aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ae:	e072      	b.n	8006896 <UART_SetConfig+0x5a2>
 80067b0:	2380      	movs	r3, #128	; 0x80
 80067b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067b6:	e06e      	b.n	8006896 <UART_SetConfig+0x5a2>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a76      	ldr	r2, [pc, #472]	; (8006998 <UART_SetConfig+0x6a4>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d130      	bne.n	8006824 <UART_SetConfig+0x530>
 80067c2:	4b73      	ldr	r3, [pc, #460]	; (8006990 <UART_SetConfig+0x69c>)
 80067c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	2b05      	cmp	r3, #5
 80067cc:	d826      	bhi.n	800681c <UART_SetConfig+0x528>
 80067ce:	a201      	add	r2, pc, #4	; (adr r2, 80067d4 <UART_SetConfig+0x4e0>)
 80067d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d4:	080067ed 	.word	0x080067ed
 80067d8:	080067f5 	.word	0x080067f5
 80067dc:	080067fd 	.word	0x080067fd
 80067e0:	08006805 	.word	0x08006805
 80067e4:	0800680d 	.word	0x0800680d
 80067e8:	08006815 	.word	0x08006815
 80067ec:	2300      	movs	r3, #0
 80067ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067f2:	e050      	b.n	8006896 <UART_SetConfig+0x5a2>
 80067f4:	2304      	movs	r3, #4
 80067f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067fa:	e04c      	b.n	8006896 <UART_SetConfig+0x5a2>
 80067fc:	2308      	movs	r3, #8
 80067fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006802:	e048      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006804:	2310      	movs	r3, #16
 8006806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800680a:	e044      	b.n	8006896 <UART_SetConfig+0x5a2>
 800680c:	2320      	movs	r3, #32
 800680e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006812:	e040      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006814:	2340      	movs	r3, #64	; 0x40
 8006816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800681a:	e03c      	b.n	8006896 <UART_SetConfig+0x5a2>
 800681c:	2380      	movs	r3, #128	; 0x80
 800681e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006822:	e038      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a5c      	ldr	r2, [pc, #368]	; (800699c <UART_SetConfig+0x6a8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d130      	bne.n	8006890 <UART_SetConfig+0x59c>
 800682e:	4b58      	ldr	r3, [pc, #352]	; (8006990 <UART_SetConfig+0x69c>)
 8006830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	2b05      	cmp	r3, #5
 8006838:	d826      	bhi.n	8006888 <UART_SetConfig+0x594>
 800683a:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <UART_SetConfig+0x54c>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	08006859 	.word	0x08006859
 8006844:	08006861 	.word	0x08006861
 8006848:	08006869 	.word	0x08006869
 800684c:	08006871 	.word	0x08006871
 8006850:	08006879 	.word	0x08006879
 8006854:	08006881 	.word	0x08006881
 8006858:	2302      	movs	r3, #2
 800685a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800685e:	e01a      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006860:	2304      	movs	r3, #4
 8006862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006866:	e016      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006868:	2308      	movs	r3, #8
 800686a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800686e:	e012      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006870:	2310      	movs	r3, #16
 8006872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006876:	e00e      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006878:	2320      	movs	r3, #32
 800687a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800687e:	e00a      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006880:	2340      	movs	r3, #64	; 0x40
 8006882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006886:	e006      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006888:	2380      	movs	r3, #128	; 0x80
 800688a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800688e:	e002      	b.n	8006896 <UART_SetConfig+0x5a2>
 8006890:	2380      	movs	r3, #128	; 0x80
 8006892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a40      	ldr	r2, [pc, #256]	; (800699c <UART_SetConfig+0x6a8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	f040 80ef 	bne.w	8006a80 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	dc46      	bgt.n	8006938 <UART_SetConfig+0x644>
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	f2c0 8081 	blt.w	80069b2 <UART_SetConfig+0x6be>
 80068b0:	3b02      	subs	r3, #2
 80068b2:	2b1e      	cmp	r3, #30
 80068b4:	d87d      	bhi.n	80069b2 <UART_SetConfig+0x6be>
 80068b6:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <UART_SetConfig+0x5c8>)
 80068b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068bc:	0800693f 	.word	0x0800693f
 80068c0:	080069b3 	.word	0x080069b3
 80068c4:	08006947 	.word	0x08006947
 80068c8:	080069b3 	.word	0x080069b3
 80068cc:	080069b3 	.word	0x080069b3
 80068d0:	080069b3 	.word	0x080069b3
 80068d4:	08006957 	.word	0x08006957
 80068d8:	080069b3 	.word	0x080069b3
 80068dc:	080069b3 	.word	0x080069b3
 80068e0:	080069b3 	.word	0x080069b3
 80068e4:	080069b3 	.word	0x080069b3
 80068e8:	080069b3 	.word	0x080069b3
 80068ec:	080069b3 	.word	0x080069b3
 80068f0:	080069b3 	.word	0x080069b3
 80068f4:	08006967 	.word	0x08006967
 80068f8:	080069b3 	.word	0x080069b3
 80068fc:	080069b3 	.word	0x080069b3
 8006900:	080069b3 	.word	0x080069b3
 8006904:	080069b3 	.word	0x080069b3
 8006908:	080069b3 	.word	0x080069b3
 800690c:	080069b3 	.word	0x080069b3
 8006910:	080069b3 	.word	0x080069b3
 8006914:	080069b3 	.word	0x080069b3
 8006918:	080069b3 	.word	0x080069b3
 800691c:	080069b3 	.word	0x080069b3
 8006920:	080069b3 	.word	0x080069b3
 8006924:	080069b3 	.word	0x080069b3
 8006928:	080069b3 	.word	0x080069b3
 800692c:	080069b3 	.word	0x080069b3
 8006930:	080069b3 	.word	0x080069b3
 8006934:	080069a5 	.word	0x080069a5
 8006938:	2b40      	cmp	r3, #64	; 0x40
 800693a:	d036      	beq.n	80069aa <UART_SetConfig+0x6b6>
 800693c:	e039      	b.n	80069b2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800693e:	f7fd fdeb 	bl	8004518 <HAL_RCCEx_GetD3PCLK1Freq>
 8006942:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006944:	e03b      	b.n	80069be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006946:	f107 0314 	add.w	r3, r7, #20
 800694a:	4618      	mov	r0, r3
 800694c:	f7fd fdfa 	bl	8004544 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006954:	e033      	b.n	80069be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006956:	f107 0308 	add.w	r3, r7, #8
 800695a:	4618      	mov	r0, r3
 800695c:	f7fd ff46 	bl	80047ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006964:	e02b      	b.n	80069be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006966:	4b0a      	ldr	r3, [pc, #40]	; (8006990 <UART_SetConfig+0x69c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006972:	4b07      	ldr	r3, [pc, #28]	; (8006990 <UART_SetConfig+0x69c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	08db      	lsrs	r3, r3, #3
 8006978:	f003 0303 	and.w	r3, r3, #3
 800697c:	4a08      	ldr	r2, [pc, #32]	; (80069a0 <UART_SetConfig+0x6ac>)
 800697e:	fa22 f303 	lsr.w	r3, r2, r3
 8006982:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006984:	e01b      	b.n	80069be <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8006986:	4b06      	ldr	r3, [pc, #24]	; (80069a0 <UART_SetConfig+0x6ac>)
 8006988:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800698a:	e018      	b.n	80069be <UART_SetConfig+0x6ca>
 800698c:	40011400 	.word	0x40011400
 8006990:	58024400 	.word	0x58024400
 8006994:	40007800 	.word	0x40007800
 8006998:	40007c00 	.word	0x40007c00
 800699c:	58000c00 	.word	0x58000c00
 80069a0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069a4:	4bc4      	ldr	r3, [pc, #784]	; (8006cb8 <UART_SetConfig+0x9c4>)
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069a8:	e009      	b.n	80069be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069b0:	e005      	b.n	80069be <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80069bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 81da 	beq.w	8006d7a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	4abc      	ldr	r2, [pc, #752]	; (8006cbc <UART_SetConfig+0x9c8>)
 80069cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069d0:	461a      	mov	r2, r3
 80069d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80069d8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	4613      	mov	r3, r2
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	4413      	add	r3, r2
 80069e4:	6a3a      	ldr	r2, [r7, #32]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d305      	bcc.n	80069f6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069f0:	6a3a      	ldr	r2, [r7, #32]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d903      	bls.n	80069fe <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80069fc:	e1bd      	b.n	8006d7a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a00:	4618      	mov	r0, r3
 8006a02:	f04f 0100 	mov.w	r1, #0
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	4aac      	ldr	r2, [pc, #688]	; (8006cbc <UART_SetConfig+0x9c8>)
 8006a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	f04f 0300 	mov.w	r3, #0
 8006a16:	f7f9 fc5f 	bl	80002d8 <__aeabi_uldivmod>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4610      	mov	r0, r2
 8006a20:	4619      	mov	r1, r3
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	f04f 0300 	mov.w	r3, #0
 8006a2a:	020b      	lsls	r3, r1, #8
 8006a2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a30:	0202      	lsls	r2, r0, #8
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	6849      	ldr	r1, [r1, #4]
 8006a36:	0849      	lsrs	r1, r1, #1
 8006a38:	4608      	mov	r0, r1
 8006a3a:	f04f 0100 	mov.w	r1, #0
 8006a3e:	1814      	adds	r4, r2, r0
 8006a40:	eb43 0501 	adc.w	r5, r3, r1
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	f04f 0300 	mov.w	r3, #0
 8006a4e:	4620      	mov	r0, r4
 8006a50:	4629      	mov	r1, r5
 8006a52:	f7f9 fc41 	bl	80002d8 <__aeabi_uldivmod>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a64:	d308      	bcc.n	8006a78 <UART_SetConfig+0x784>
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a6c:	d204      	bcs.n	8006a78 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a74:	60da      	str	r2, [r3, #12]
 8006a76:	e180      	b.n	8006d7a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006a7e:	e17c      	b.n	8006d7a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a88:	f040 80be 	bne.w	8006c08 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8006a8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a90:	2b20      	cmp	r3, #32
 8006a92:	dc49      	bgt.n	8006b28 <UART_SetConfig+0x834>
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	db7c      	blt.n	8006b92 <UART_SetConfig+0x89e>
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d87a      	bhi.n	8006b92 <UART_SetConfig+0x89e>
 8006a9c:	a201      	add	r2, pc, #4	; (adr r2, 8006aa4 <UART_SetConfig+0x7b0>)
 8006a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa2:	bf00      	nop
 8006aa4:	08006b2f 	.word	0x08006b2f
 8006aa8:	08006b37 	.word	0x08006b37
 8006aac:	08006b93 	.word	0x08006b93
 8006ab0:	08006b93 	.word	0x08006b93
 8006ab4:	08006b3f 	.word	0x08006b3f
 8006ab8:	08006b93 	.word	0x08006b93
 8006abc:	08006b93 	.word	0x08006b93
 8006ac0:	08006b93 	.word	0x08006b93
 8006ac4:	08006b4f 	.word	0x08006b4f
 8006ac8:	08006b93 	.word	0x08006b93
 8006acc:	08006b93 	.word	0x08006b93
 8006ad0:	08006b93 	.word	0x08006b93
 8006ad4:	08006b93 	.word	0x08006b93
 8006ad8:	08006b93 	.word	0x08006b93
 8006adc:	08006b93 	.word	0x08006b93
 8006ae0:	08006b93 	.word	0x08006b93
 8006ae4:	08006b5f 	.word	0x08006b5f
 8006ae8:	08006b93 	.word	0x08006b93
 8006aec:	08006b93 	.word	0x08006b93
 8006af0:	08006b93 	.word	0x08006b93
 8006af4:	08006b93 	.word	0x08006b93
 8006af8:	08006b93 	.word	0x08006b93
 8006afc:	08006b93 	.word	0x08006b93
 8006b00:	08006b93 	.word	0x08006b93
 8006b04:	08006b93 	.word	0x08006b93
 8006b08:	08006b93 	.word	0x08006b93
 8006b0c:	08006b93 	.word	0x08006b93
 8006b10:	08006b93 	.word	0x08006b93
 8006b14:	08006b93 	.word	0x08006b93
 8006b18:	08006b93 	.word	0x08006b93
 8006b1c:	08006b93 	.word	0x08006b93
 8006b20:	08006b93 	.word	0x08006b93
 8006b24:	08006b85 	.word	0x08006b85
 8006b28:	2b40      	cmp	r3, #64	; 0x40
 8006b2a:	d02e      	beq.n	8006b8a <UART_SetConfig+0x896>
 8006b2c:	e031      	b.n	8006b92 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b2e:	f7fc fd87 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8006b32:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006b34:	e033      	b.n	8006b9e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b36:	f7fc fd99 	bl	800366c <HAL_RCC_GetPCLK2Freq>
 8006b3a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006b3c:	e02f      	b.n	8006b9e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b3e:	f107 0314 	add.w	r3, r7, #20
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fd fcfe 	bl	8004544 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b4c:	e027      	b.n	8006b9e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b4e:	f107 0308 	add.w	r3, r7, #8
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fd fe4a 	bl	80047ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b5c:	e01f      	b.n	8006b9e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b5e:	4b58      	ldr	r3, [pc, #352]	; (8006cc0 <UART_SetConfig+0x9cc>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0320 	and.w	r3, r3, #32
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d009      	beq.n	8006b7e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b6a:	4b55      	ldr	r3, [pc, #340]	; (8006cc0 <UART_SetConfig+0x9cc>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	08db      	lsrs	r3, r3, #3
 8006b70:	f003 0303 	and.w	r3, r3, #3
 8006b74:	4a53      	ldr	r2, [pc, #332]	; (8006cc4 <UART_SetConfig+0x9d0>)
 8006b76:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b7c:	e00f      	b.n	8006b9e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006b7e:	4b51      	ldr	r3, [pc, #324]	; (8006cc4 <UART_SetConfig+0x9d0>)
 8006b80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b82:	e00c      	b.n	8006b9e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b84:	4b4c      	ldr	r3, [pc, #304]	; (8006cb8 <UART_SetConfig+0x9c4>)
 8006b86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b88:	e009      	b.n	8006b9e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b90:	e005      	b.n	8006b9e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006b9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80ea 	beq.w	8006d7a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	4a44      	ldr	r2, [pc, #272]	; (8006cbc <UART_SetConfig+0x9c8>)
 8006bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bb8:	005a      	lsls	r2, r3, #1
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	085b      	lsrs	r3, r3, #1
 8006bc0:	441a      	add	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bce:	2b0f      	cmp	r3, #15
 8006bd0:	d916      	bls.n	8006c00 <UART_SetConfig+0x90c>
 8006bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd8:	d212      	bcs.n	8006c00 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	f023 030f 	bic.w	r3, r3, #15
 8006be2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	085b      	lsrs	r3, r3, #1
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	f003 0307 	and.w	r3, r3, #7
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006bfc:	60da      	str	r2, [r3, #12]
 8006bfe:	e0bc      	b.n	8006d7a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006c06:	e0b8      	b.n	8006d7a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	dc4b      	bgt.n	8006ca8 <UART_SetConfig+0x9b4>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f2c0 8087 	blt.w	8006d24 <UART_SetConfig+0xa30>
 8006c16:	2b20      	cmp	r3, #32
 8006c18:	f200 8084 	bhi.w	8006d24 <UART_SetConfig+0xa30>
 8006c1c:	a201      	add	r2, pc, #4	; (adr r2, 8006c24 <UART_SetConfig+0x930>)
 8006c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c22:	bf00      	nop
 8006c24:	08006caf 	.word	0x08006caf
 8006c28:	08006cc9 	.word	0x08006cc9
 8006c2c:	08006d25 	.word	0x08006d25
 8006c30:	08006d25 	.word	0x08006d25
 8006c34:	08006cd1 	.word	0x08006cd1
 8006c38:	08006d25 	.word	0x08006d25
 8006c3c:	08006d25 	.word	0x08006d25
 8006c40:	08006d25 	.word	0x08006d25
 8006c44:	08006ce1 	.word	0x08006ce1
 8006c48:	08006d25 	.word	0x08006d25
 8006c4c:	08006d25 	.word	0x08006d25
 8006c50:	08006d25 	.word	0x08006d25
 8006c54:	08006d25 	.word	0x08006d25
 8006c58:	08006d25 	.word	0x08006d25
 8006c5c:	08006d25 	.word	0x08006d25
 8006c60:	08006d25 	.word	0x08006d25
 8006c64:	08006cf1 	.word	0x08006cf1
 8006c68:	08006d25 	.word	0x08006d25
 8006c6c:	08006d25 	.word	0x08006d25
 8006c70:	08006d25 	.word	0x08006d25
 8006c74:	08006d25 	.word	0x08006d25
 8006c78:	08006d25 	.word	0x08006d25
 8006c7c:	08006d25 	.word	0x08006d25
 8006c80:	08006d25 	.word	0x08006d25
 8006c84:	08006d25 	.word	0x08006d25
 8006c88:	08006d25 	.word	0x08006d25
 8006c8c:	08006d25 	.word	0x08006d25
 8006c90:	08006d25 	.word	0x08006d25
 8006c94:	08006d25 	.word	0x08006d25
 8006c98:	08006d25 	.word	0x08006d25
 8006c9c:	08006d25 	.word	0x08006d25
 8006ca0:	08006d25 	.word	0x08006d25
 8006ca4:	08006d17 	.word	0x08006d17
 8006ca8:	2b40      	cmp	r3, #64	; 0x40
 8006caa:	d037      	beq.n	8006d1c <UART_SetConfig+0xa28>
 8006cac:	e03a      	b.n	8006d24 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cae:	f7fc fcc7 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8006cb2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006cb4:	e03c      	b.n	8006d30 <UART_SetConfig+0xa3c>
 8006cb6:	bf00      	nop
 8006cb8:	003d0900 	.word	0x003d0900
 8006cbc:	080073a4 	.word	0x080073a4
 8006cc0:	58024400 	.word	0x58024400
 8006cc4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cc8:	f7fc fcd0 	bl	800366c <HAL_RCC_GetPCLK2Freq>
 8006ccc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006cce:	e02f      	b.n	8006d30 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cd0:	f107 0314 	add.w	r3, r7, #20
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7fd fc35 	bl	8004544 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cde:	e027      	b.n	8006d30 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ce0:	f107 0308 	add.w	r3, r7, #8
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7fd fd81 	bl	80047ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cee:	e01f      	b.n	8006d30 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cf0:	4b2c      	ldr	r3, [pc, #176]	; (8006da4 <UART_SetConfig+0xab0>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0320 	and.w	r3, r3, #32
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d009      	beq.n	8006d10 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cfc:	4b29      	ldr	r3, [pc, #164]	; (8006da4 <UART_SetConfig+0xab0>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	08db      	lsrs	r3, r3, #3
 8006d02:	f003 0303 	and.w	r3, r3, #3
 8006d06:	4a28      	ldr	r2, [pc, #160]	; (8006da8 <UART_SetConfig+0xab4>)
 8006d08:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d0e:	e00f      	b.n	8006d30 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006d10:	4b25      	ldr	r3, [pc, #148]	; (8006da8 <UART_SetConfig+0xab4>)
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d14:	e00c      	b.n	8006d30 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d16:	4b25      	ldr	r3, [pc, #148]	; (8006dac <UART_SetConfig+0xab8>)
 8006d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d1a:	e009      	b.n	8006d30 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d22:	e005      	b.n	8006d30 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006d2e:	bf00      	nop
    }

    if (pclk != 0U)
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d021      	beq.n	8006d7a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	4a1d      	ldr	r2, [pc, #116]	; (8006db0 <UART_SetConfig+0xabc>)
 8006d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d40:	461a      	mov	r2, r3
 8006d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d44:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	085b      	lsrs	r3, r3, #1
 8006d4e:	441a      	add	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d58:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	2b0f      	cmp	r3, #15
 8006d5e:	d909      	bls.n	8006d74 <UART_SetConfig+0xa80>
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d66:	d205      	bcs.n	8006d74 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	60da      	str	r2, [r3, #12]
 8006d72:	e002      	b.n	8006d7a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006d96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3738      	adds	r7, #56	; 0x38
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bdb0      	pop	{r4, r5, r7, pc}
 8006da2:	bf00      	nop
 8006da4:	58024400 	.word	0x58024400
 8006da8:	03d09000 	.word	0x03d09000
 8006dac:	003d0900 	.word	0x003d0900
 8006db0:	080073a4 	.word	0x080073a4

08006db4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00a      	beq.n	8006dde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e04:	f003 0304 	and.w	r3, r3, #4
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00a      	beq.n	8006e22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e26:	f003 0308 	and.w	r3, r3, #8
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00a      	beq.n	8006e66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6a:	f003 0320 	and.w	r3, r3, #32
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01a      	beq.n	8006eca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eb2:	d10a      	bne.n	8006eca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	605a      	str	r2, [r3, #4]
  }
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f08:	f7fb f8ec 	bl	80020e4 <HAL_GetTick>
 8006f0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0308 	and.w	r3, r3, #8
 8006f18:	2b08      	cmp	r3, #8
 8006f1a:	d10e      	bne.n	8006f3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f82f 	bl	8006f8e <UART_WaitOnFlagUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e025      	b.n	8006f86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	d10e      	bne.n	8006f66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f819 	bl	8006f8e <UART_WaitOnFlagUntilTimeout>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e00f      	b.n	8006f86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b09c      	sub	sp, #112	; 0x70
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	603b      	str	r3, [r7, #0]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f9e:	e0a9      	b.n	80070f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa6:	f000 80a5 	beq.w	80070f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006faa:	f7fb f89b 	bl	80020e4 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d302      	bcc.n	8006fc0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006fba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d140      	bne.n	8007042 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fd4:	667b      	str	r3, [r7, #100]	; 0x64
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fe0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fe4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e6      	bne.n	8006fc0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3308      	adds	r3, #8
 8006ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ffc:	e853 3f00 	ldrex	r3, [r3]
 8007000:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007004:	f023 0301 	bic.w	r3, r3, #1
 8007008:	663b      	str	r3, [r7, #96]	; 0x60
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3308      	adds	r3, #8
 8007010:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007012:	64ba      	str	r2, [r7, #72]	; 0x48
 8007014:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007016:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800701a:	e841 2300 	strex	r3, r2, [r1]
 800701e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1e5      	bne.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2220      	movs	r2, #32
 800702a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2220      	movs	r2, #32
 8007032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e069      	b.n	8007116 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	2b00      	cmp	r3, #0
 800704e:	d051      	beq.n	80070f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800705a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800705e:	d149      	bne.n	80070f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007068:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007072:	e853 3f00 	ldrex	r3, [r3]
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800707e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	461a      	mov	r2, r3
 8007086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007088:	637b      	str	r3, [r7, #52]	; 0x34
 800708a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800708e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007090:	e841 2300 	strex	r3, r2, [r1]
 8007094:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e6      	bne.n	800706a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3308      	adds	r3, #8
 80070a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	613b      	str	r3, [r7, #16]
   return(result);
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f023 0301 	bic.w	r3, r3, #1
 80070b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3308      	adds	r3, #8
 80070ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070bc:	623a      	str	r2, [r7, #32]
 80070be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	69f9      	ldr	r1, [r7, #28]
 80070c2:	6a3a      	ldr	r2, [r7, #32]
 80070c4:	e841 2300 	strex	r3, r2, [r1]
 80070c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1e5      	bne.n	800709c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2220      	movs	r2, #32
 80070dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e010      	b.n	8007116 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	69da      	ldr	r2, [r3, #28]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	4013      	ands	r3, r2
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	429a      	cmp	r2, r3
 8007102:	bf0c      	ite	eq
 8007104:	2301      	moveq	r3, #1
 8007106:	2300      	movne	r3, #0
 8007108:	b2db      	uxtb	r3, r3
 800710a:	461a      	mov	r2, r3
 800710c:	79fb      	ldrb	r3, [r7, #7]
 800710e:	429a      	cmp	r2, r3
 8007110:	f43f af46 	beq.w	8006fa0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3770      	adds	r7, #112	; 0x70
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800711e:	b480      	push	{r7}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <HAL_UARTEx_DisableFifoMode+0x16>
 8007130:	2302      	movs	r3, #2
 8007132:	e027      	b.n	8007184 <HAL_UARTEx_DisableFifoMode+0x66>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2224      	movs	r2, #36	; 0x24
 8007140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0201 	bic.w	r2, r2, #1
 800715a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007162:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2220      	movs	r2, #32
 8007176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d101      	bne.n	80071a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071a4:	2302      	movs	r3, #2
 80071a6:	e02d      	b.n	8007204 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2224      	movs	r2, #36	; 0x24
 80071b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 0201 	bic.w	r2, r2, #1
 80071ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f84f 	bl	8007288 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800721c:	2b01      	cmp	r3, #1
 800721e:	d101      	bne.n	8007224 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007220:	2302      	movs	r3, #2
 8007222:	e02d      	b.n	8007280 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2224      	movs	r2, #36	; 0x24
 8007230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0201 	bic.w	r2, r2, #1
 800724a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f811 	bl	8007288 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007294:	2b00      	cmp	r3, #0
 8007296:	d108      	bne.n	80072aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072a8:	e031      	b.n	800730e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072aa:	2310      	movs	r3, #16
 80072ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072ae:	2310      	movs	r3, #16
 80072b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	0e5b      	lsrs	r3, r3, #25
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	f003 0307 	and.w	r3, r3, #7
 80072c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	0f5b      	lsrs	r3, r3, #29
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	f003 0307 	and.w	r3, r3, #7
 80072d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072d2:	7bbb      	ldrb	r3, [r7, #14]
 80072d4:	7b3a      	ldrb	r2, [r7, #12]
 80072d6:	4911      	ldr	r1, [pc, #68]	; (800731c <UARTEx_SetNbDataToProcess+0x94>)
 80072d8:	5c8a      	ldrb	r2, [r1, r2]
 80072da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072de:	7b3a      	ldrb	r2, [r7, #12]
 80072e0:	490f      	ldr	r1, [pc, #60]	; (8007320 <UARTEx_SetNbDataToProcess+0x98>)
 80072e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	7b7a      	ldrb	r2, [r7, #13]
 80072f4:	4909      	ldr	r1, [pc, #36]	; (800731c <UARTEx_SetNbDataToProcess+0x94>)
 80072f6:	5c8a      	ldrb	r2, [r1, r2]
 80072f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072fc:	7b7a      	ldrb	r2, [r7, #13]
 80072fe:	4908      	ldr	r1, [pc, #32]	; (8007320 <UARTEx_SetNbDataToProcess+0x98>)
 8007300:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007302:	fb93 f3f2 	sdiv	r3, r3, r2
 8007306:	b29a      	uxth	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800730e:	bf00      	nop
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	080073bc 	.word	0x080073bc
 8007320:	080073c4 	.word	0x080073c4

08007324 <__libc_init_array>:
 8007324:	b570      	push	{r4, r5, r6, lr}
 8007326:	4d0d      	ldr	r5, [pc, #52]	; (800735c <__libc_init_array+0x38>)
 8007328:	4c0d      	ldr	r4, [pc, #52]	; (8007360 <__libc_init_array+0x3c>)
 800732a:	1b64      	subs	r4, r4, r5
 800732c:	10a4      	asrs	r4, r4, #2
 800732e:	2600      	movs	r6, #0
 8007330:	42a6      	cmp	r6, r4
 8007332:	d109      	bne.n	8007348 <__libc_init_array+0x24>
 8007334:	4d0b      	ldr	r5, [pc, #44]	; (8007364 <__libc_init_array+0x40>)
 8007336:	4c0c      	ldr	r4, [pc, #48]	; (8007368 <__libc_init_array+0x44>)
 8007338:	f000 f820 	bl	800737c <_init>
 800733c:	1b64      	subs	r4, r4, r5
 800733e:	10a4      	asrs	r4, r4, #2
 8007340:	2600      	movs	r6, #0
 8007342:	42a6      	cmp	r6, r4
 8007344:	d105      	bne.n	8007352 <__libc_init_array+0x2e>
 8007346:	bd70      	pop	{r4, r5, r6, pc}
 8007348:	f855 3b04 	ldr.w	r3, [r5], #4
 800734c:	4798      	blx	r3
 800734e:	3601      	adds	r6, #1
 8007350:	e7ee      	b.n	8007330 <__libc_init_array+0xc>
 8007352:	f855 3b04 	ldr.w	r3, [r5], #4
 8007356:	4798      	blx	r3
 8007358:	3601      	adds	r6, #1
 800735a:	e7f2      	b.n	8007342 <__libc_init_array+0x1e>
 800735c:	080073d4 	.word	0x080073d4
 8007360:	080073d4 	.word	0x080073d4
 8007364:	080073d4 	.word	0x080073d4
 8007368:	080073d8 	.word	0x080073d8

0800736c <memset>:
 800736c:	4402      	add	r2, r0
 800736e:	4603      	mov	r3, r0
 8007370:	4293      	cmp	r3, r2
 8007372:	d100      	bne.n	8007376 <memset+0xa>
 8007374:	4770      	bx	lr
 8007376:	f803 1b01 	strb.w	r1, [r3], #1
 800737a:	e7f9      	b.n	8007370 <memset+0x4>

0800737c <_init>:
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737e:	bf00      	nop
 8007380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007382:	bc08      	pop	{r3}
 8007384:	469e      	mov	lr, r3
 8007386:	4770      	bx	lr

08007388 <_fini>:
 8007388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738a:	bf00      	nop
 800738c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800738e:	bc08      	pop	{r3}
 8007390:	469e      	mov	lr, r3
 8007392:	4770      	bx	lr
