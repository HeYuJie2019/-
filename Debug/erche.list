
erche.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f70  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007240  08007240  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  08007240  08007240  00017240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007248  08007248  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007248  08007248  00017248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800724c  0800724c  0001724c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  24000000  08007250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  24000038  08007288  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240002c8  08007288  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d90c  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a9e  00000000  00000000  0003d972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00040410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  000413c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000365d3  00000000  00000000  000422b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141fc  00000000  00000000  0007888b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001618e6  00000000  00000000  0008ca87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ee36d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c8  00000000  00000000  001ee3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000038 	.word	0x24000038
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080071f0 	.word	0x080071f0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400003c 	.word	0x2400003c
 80002d4:	080071f0 	.word	0x080071f0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <move>:
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,25);
		HAL_Delay(700);*/
	}
}
void move(int n)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if(n==1)//直行
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	f040 80c0 	bne.w	8000760 <move+0x190>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 80005e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e4:	48a0      	ldr	r0, [pc, #640]	; (8000868 <move+0x298>)
 80005e6:	f001 ff87 	bl	80024f8 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d127      	bne.n	8000640 <move+0x70>
 80005f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f4:	489c      	ldr	r0, [pc, #624]	; (8000868 <move+0x298>)
 80005f6:	f001 ff7f 	bl	80024f8 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d11f      	bne.n	8000640 <move+0x70>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,28);
 8000600:	4b9a      	ldr	r3, [pc, #616]	; (800086c <move+0x29c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	221c      	movs	r2, #28
 8000606:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000608:	4b98      	ldr	r3, [pc, #608]	; (800086c <move+0x29c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,28);
 8000610:	4b96      	ldr	r3, [pc, #600]	; (800086c <move+0x29c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	221c      	movs	r2, #28
 8000616:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000618:	4b94      	ldr	r3, [pc, #592]	; (800086c <move+0x29c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2200      	movs	r2, #0
 800061e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,14);
 8000620:	4b93      	ldr	r3, [pc, #588]	; (8000870 <move+0x2a0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	220e      	movs	r2, #14
 8000626:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000628:	4b91      	ldr	r3, [pc, #580]	; (8000870 <move+0x2a0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,30);
 8000630:	4b8f      	ldr	r3, [pc, #572]	; (8000870 <move+0x2a0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	221e      	movs	r2, #30
 8000636:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000638:	4b8d      	ldr	r3, [pc, #564]	; (8000870 <move+0x2a0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2200      	movs	r2, #0
 800063e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000640:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000644:	4888      	ldr	r0, [pc, #544]	; (8000868 <move+0x298>)
 8000646:	f001 ff57 	bl	80024f8 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d127      	bne.n	80006a0 <move+0xd0>
 8000650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000654:	4884      	ldr	r0, [pc, #528]	; (8000868 <move+0x298>)
 8000656:	f001 ff4f 	bl	80024f8 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d11f      	bne.n	80006a0 <move+0xd0>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,28);
 8000660:	4b82      	ldr	r3, [pc, #520]	; (800086c <move+0x29c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	221c      	movs	r2, #28
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000668:	4b80      	ldr	r3, [pc, #512]	; (800086c <move+0x29c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,28);
 8000670:	4b7e      	ldr	r3, [pc, #504]	; (800086c <move+0x29c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	221c      	movs	r2, #28
 8000676:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000678:	4b7c      	ldr	r3, [pc, #496]	; (800086c <move+0x29c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2200      	movs	r2, #0
 800067e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,30);
 8000680:	4b7b      	ldr	r3, [pc, #492]	; (8000870 <move+0x2a0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	221e      	movs	r2, #30
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000688:	4b79      	ldr	r3, [pc, #484]	; (8000870 <move+0x2a0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,14);
 8000690:	4b77      	ldr	r3, [pc, #476]	; (8000870 <move+0x2a0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	220e      	movs	r2, #14
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000698:	4b75      	ldr	r3, [pc, #468]	; (8000870 <move+0x2a0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2200      	movs	r2, #0
 800069e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 80006a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a4:	4870      	ldr	r0, [pc, #448]	; (8000868 <move+0x298>)
 80006a6:	f001 ff27 	bl	80024f8 <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d127      	bne.n	8000700 <move+0x130>
 80006b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b4:	486c      	ldr	r0, [pc, #432]	; (8000868 <move+0x298>)
 80006b6:	f001 ff1f 	bl	80024f8 <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d11f      	bne.n	8000700 <move+0x130>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,28);
 80006c0:	4b6a      	ldr	r3, [pc, #424]	; (800086c <move+0x29c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	221c      	movs	r2, #28
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80006c8:	4b68      	ldr	r3, [pc, #416]	; (800086c <move+0x29c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2200      	movs	r2, #0
 80006ce:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,28);
 80006d0:	4b66      	ldr	r3, [pc, #408]	; (800086c <move+0x29c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	221c      	movs	r2, #28
 80006d6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80006d8:	4b64      	ldr	r3, [pc, #400]	; (800086c <move+0x29c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2200      	movs	r2, #0
 80006de:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,14);
 80006e0:	4b63      	ldr	r3, [pc, #396]	; (8000870 <move+0x2a0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	220e      	movs	r2, #14
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 80006e8:	4b61      	ldr	r3, [pc, #388]	; (8000870 <move+0x2a0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2200      	movs	r2, #0
 80006ee:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,14);
 80006f0:	4b5f      	ldr	r3, [pc, #380]	; (8000870 <move+0x2a0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	220e      	movs	r2, #14
 80006f6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 80006f8:	4b5d      	ldr	r3, [pc, #372]	; (8000870 <move+0x2a0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2200      	movs	r2, #0
 80006fe:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000700:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000704:	4858      	ldr	r0, [pc, #352]	; (8000868 <move+0x298>)
 8000706:	f001 fef7 	bl	80024f8 <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d127      	bne.n	8000760 <move+0x190>
 8000710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000714:	4854      	ldr	r0, [pc, #336]	; (8000868 <move+0x298>)
 8000716:	f001 feef 	bl	80024f8 <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d11f      	bne.n	8000760 <move+0x190>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 8000720:	4b52      	ldr	r3, [pc, #328]	; (800086c <move+0x29c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2264      	movs	r2, #100	; 0x64
 8000726:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 8000728:	4b50      	ldr	r3, [pc, #320]	; (800086c <move+0x29c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2264      	movs	r2, #100	; 0x64
 800072e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 8000730:	4b4e      	ldr	r3, [pc, #312]	; (800086c <move+0x29c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2264      	movs	r2, #100	; 0x64
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 8000738:	4b4c      	ldr	r3, [pc, #304]	; (800086c <move+0x29c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2264      	movs	r2, #100	; 0x64
 800073e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 8000740:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <move+0x2a0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2264      	movs	r2, #100	; 0x64
 8000746:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 8000748:	4b49      	ldr	r3, [pc, #292]	; (8000870 <move+0x2a0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2264      	movs	r2, #100	; 0x64
 800074e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 8000750:	4b47      	ldr	r3, [pc, #284]	; (8000870 <move+0x2a0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2264      	movs	r2, #100	; 0x64
 8000756:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 8000758:	4b45      	ldr	r3, [pc, #276]	; (8000870 <move+0x2a0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2264      	movs	r2, #100	; 0x64
 800075e:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	if(n==2)//右行
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b02      	cmp	r3, #2
 8000764:	f040 80c7 	bne.w	80008f6 <move+0x326>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1)
 8000768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076c:	4841      	ldr	r0, [pc, #260]	; (8000874 <move+0x2a4>)
 800076e:	f001 fec3 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d126      	bne.n	80007c6 <move+0x1f6>
 8000778:	2120      	movs	r1, #32
 800077a:	483f      	ldr	r0, [pc, #252]	; (8000878 <move+0x2a8>)
 800077c:	f001 febc 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d11f      	bne.n	80007c6 <move+0x1f6>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,19);
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <move+0x29c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2213      	movs	r2, #19
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800078e:	4b37      	ldr	r3, [pc, #220]	; (800086c <move+0x29c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2200      	movs	r2, #0
 8000794:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000796:	4b35      	ldr	r3, [pc, #212]	; (800086c <move+0x29c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2200      	movs	r2, #0
 800079c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,22);
 800079e:	4b33      	ldr	r3, [pc, #204]	; (800086c <move+0x29c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2216      	movs	r2, #22
 80007a4:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 80007a6:	4b32      	ldr	r3, [pc, #200]	; (8000870 <move+0x2a0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2210      	movs	r2, #16
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 80007ae:	4b30      	ldr	r3, [pc, #192]	; (8000870 <move+0x2a0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2200      	movs	r2, #0
 80007b4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 80007b6:	4b2e      	ldr	r3, [pc, #184]	; (8000870 <move+0x2a0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2200      	movs	r2, #0
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,24);
 80007be:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <move+0x2a0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2218      	movs	r2, #24
 80007c4:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 80007c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ca:	482a      	ldr	r0, [pc, #168]	; (8000874 <move+0x2a4>)
 80007cc:	f001 fe94 	bl	80024f8 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d126      	bne.n	8000824 <move+0x254>
 80007d6:	2120      	movs	r1, #32
 80007d8:	4827      	ldr	r0, [pc, #156]	; (8000878 <move+0x2a8>)
 80007da:	f001 fe8d 	bl	80024f8 <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d11f      	bne.n	8000824 <move+0x254>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,24);
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <move+0x29c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2218      	movs	r2, #24
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <move+0x29c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2200      	movs	r2, #0
 80007f2:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <move+0x29c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2200      	movs	r2, #0
 80007fa:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,21);
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <move+0x29c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2215      	movs	r2, #21
 8000802:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,18);
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <move+0x2a0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2212      	movs	r2, #18
 800080a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <move+0x2a0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2200      	movs	r2, #0
 8000812:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <move+0x2a0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2200      	movs	r2, #0
 800081a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,19);
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <move+0x2a0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2213      	movs	r2, #19
 8000822:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1)
 8000824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000828:	4812      	ldr	r0, [pc, #72]	; (8000874 <move+0x2a4>)
 800082a:	f001 fe65 	bl	80024f8 <HAL_GPIO_ReadPin>
 800082e:	4603      	mov	r3, r0
 8000830:	2b01      	cmp	r3, #1
 8000832:	d131      	bne.n	8000898 <move+0x2c8>
 8000834:	2120      	movs	r1, #32
 8000836:	4810      	ldr	r0, [pc, #64]	; (8000878 <move+0x2a8>)
 8000838:	f001 fe5e 	bl	80024f8 <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b01      	cmp	r3, #1
 8000840:	d12a      	bne.n	8000898 <move+0x2c8>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,19);
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <move+0x29c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2213      	movs	r2, #19
 8000848:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <move+0x29c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2200      	movs	r2, #0
 8000850:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <move+0x29c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2200      	movs	r2, #0
 8000858:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,20);
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <move+0x29c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2214      	movs	r2, #20
 8000860:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 8000862:	4b03      	ldr	r3, [pc, #12]	; (8000870 <move+0x2a0>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	e009      	b.n	800087c <move+0x2ac>
 8000868:	58020400 	.word	0x58020400
 800086c:	240001e8 	.word	0x240001e8
 8000870:	24000070 	.word	0x24000070
 8000874:	58020800 	.word	0x58020800
 8000878:	58021000 	.word	0x58021000
 800087c:	2210      	movs	r2, #16
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000880:	4b9a      	ldr	r3, [pc, #616]	; (8000aec <move+0x51c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2200      	movs	r2, #0
 8000886:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 8000888:	4b98      	ldr	r3, [pc, #608]	; (8000aec <move+0x51c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,19);
 8000890:	4b96      	ldr	r3, [pc, #600]	; (8000aec <move+0x51c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2213      	movs	r2, #19
 8000896:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	4894      	ldr	r0, [pc, #592]	; (8000af0 <move+0x520>)
 800089e:	f001 fe2b 	bl	80024f8 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d126      	bne.n	80008f6 <move+0x326>
 80008a8:	2120      	movs	r1, #32
 80008aa:	4892      	ldr	r0, [pc, #584]	; (8000af4 <move+0x524>)
 80008ac:	f001 fe24 	bl	80024f8 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d11f      	bne.n	80008f6 <move+0x326>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 80008b6:	4b90      	ldr	r3, [pc, #576]	; (8000af8 <move+0x528>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2264      	movs	r2, #100	; 0x64
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 80008be:	4b8e      	ldr	r3, [pc, #568]	; (8000af8 <move+0x528>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2264      	movs	r2, #100	; 0x64
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 80008c6:	4b8c      	ldr	r3, [pc, #560]	; (8000af8 <move+0x528>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2264      	movs	r2, #100	; 0x64
 80008cc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 80008ce:	4b8a      	ldr	r3, [pc, #552]	; (8000af8 <move+0x528>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2264      	movs	r2, #100	; 0x64
 80008d4:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 80008d6:	4b85      	ldr	r3, [pc, #532]	; (8000aec <move+0x51c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2264      	movs	r2, #100	; 0x64
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 80008de:	4b83      	ldr	r3, [pc, #524]	; (8000aec <move+0x51c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2264      	movs	r2, #100	; 0x64
 80008e4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 80008e6:	4b81      	ldr	r3, [pc, #516]	; (8000aec <move+0x51c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2264      	movs	r2, #100	; 0x64
 80008ec:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 80008ee:	4b7f      	ldr	r3, [pc, #508]	; (8000aec <move+0x51c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2264      	movs	r2, #100	; 0x64
 80008f4:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	if(n==3)//旋转
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d11f      	bne.n	800093c <move+0x36c>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 80008fc:	4b7e      	ldr	r3, [pc, #504]	; (8000af8 <move+0x528>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2200      	movs	r2, #0
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,27);//27
 8000904:	4b7c      	ldr	r3, [pc, #496]	; (8000af8 <move+0x528>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	221b      	movs	r2, #27
 800090a:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,24);//21
 800090c:	4b7a      	ldr	r3, [pc, #488]	; (8000af8 <move+0x528>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2218      	movs	r2, #24
 8000912:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,0);
 8000914:	4b78      	ldr	r3, [pc, #480]	; (8000af8 <move+0x528>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2200      	movs	r2, #0
 800091a:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,20);//20
 800091c:	4b73      	ldr	r3, [pc, #460]	; (8000aec <move+0x51c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2214      	movs	r2, #20
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000924:	4b71      	ldr	r3, [pc, #452]	; (8000aec <move+0x51c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2200      	movs	r2, #0
 800092a:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 800092c:	4b6f      	ldr	r3, [pc, #444]	; (8000aec <move+0x51c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2200      	movs	r2, #0
 8000932:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,21);//21
 8000934:	4b6d      	ldr	r3, [pc, #436]	; (8000aec <move+0x51c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2215      	movs	r2, #21
 800093a:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==4)//刹车
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b04      	cmp	r3, #4
 8000940:	d11f      	bne.n	8000982 <move+0x3b2>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 8000942:	4b6d      	ldr	r3, [pc, #436]	; (8000af8 <move+0x528>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2264      	movs	r2, #100	; 0x64
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 800094a:	4b6b      	ldr	r3, [pc, #428]	; (8000af8 <move+0x528>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2264      	movs	r2, #100	; 0x64
 8000950:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,100);
 8000952:	4b69      	ldr	r3, [pc, #420]	; (8000af8 <move+0x528>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2264      	movs	r2, #100	; 0x64
 8000958:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,100);
 800095a:	4b67      	ldr	r3, [pc, #412]	; (8000af8 <move+0x528>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2264      	movs	r2, #100	; 0x64
 8000960:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,100);
 8000962:	4b62      	ldr	r3, [pc, #392]	; (8000aec <move+0x51c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2264      	movs	r2, #100	; 0x64
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,100);
 800096a:	4b60      	ldr	r3, [pc, #384]	; (8000aec <move+0x51c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2264      	movs	r2, #100	; 0x64
 8000970:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,100);
 8000972:	4b5e      	ldr	r3, [pc, #376]	; (8000aec <move+0x51c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2264      	movs	r2, #100	; 0x64
 8000978:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,100);
 800097a:	4b5c      	ldr	r3, [pc, #368]	; (8000aec <move+0x51c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2264      	movs	r2, #100	; 0x64
 8000980:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==5)//倒车入库
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b05      	cmp	r3, #5
 8000986:	d11f      	bne.n	80009c8 <move+0x3f8>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 8000988:	4b5b      	ldr	r3, [pc, #364]	; (8000af8 <move+0x528>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2264      	movs	r2, #100	; 0x64
 800098e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 8000990:	4b59      	ldr	r3, [pc, #356]	; (8000af8 <move+0x528>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2264      	movs	r2, #100	; 0x64
 8000996:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,30);
 8000998:	4b57      	ldr	r3, [pc, #348]	; (8000af8 <move+0x528>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	221e      	movs	r2, #30
 800099e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80009a0:	4b55      	ldr	r3, [pc, #340]	; (8000af8 <move+0x528>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2200      	movs	r2, #0
 80009a6:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,100);
 80009a8:	4b50      	ldr	r3, [pc, #320]	; (8000aec <move+0x51c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2264      	movs	r2, #100	; 0x64
 80009ae:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,100);
 80009b0:	4b4e      	ldr	r3, [pc, #312]	; (8000aec <move+0x51c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2264      	movs	r2, #100	; 0x64
 80009b6:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,30);
 80009b8:	4b4c      	ldr	r3, [pc, #304]	; (8000aec <move+0x51c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	221e      	movs	r2, #30
 80009be:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 80009c0:	4b4a      	ldr	r3, [pc, #296]	; (8000aec <move+0x51c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2200      	movs	r2, #0
 80009c6:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==6)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	f040 80cc 	bne.w	8000b68 <move+0x598>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 80009d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d4:	4849      	ldr	r0, [pc, #292]	; (8000afc <move+0x52c>)
 80009d6:	f001 fd8f 	bl	80024f8 <HAL_GPIO_ReadPin>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d127      	bne.n	8000a30 <move+0x460>
 80009e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e4:	4845      	ldr	r0, [pc, #276]	; (8000afc <move+0x52c>)
 80009e6:	f001 fd87 	bl	80024f8 <HAL_GPIO_ReadPin>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d11f      	bne.n	8000a30 <move+0x460>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,26.1);
 80009f0:	4b41      	ldr	r3, [pc, #260]	; (8000af8 <move+0x528>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	221a      	movs	r2, #26
 80009f6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80009f8:	4b3f      	ldr	r3, [pc, #252]	; (8000af8 <move+0x528>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2200      	movs	r2, #0
 80009fe:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,23.4);
 8000a00:	4b3d      	ldr	r3, [pc, #244]	; (8000af8 <move+0x528>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2217      	movs	r2, #23
 8000a06:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000a08:	4b3b      	ldr	r3, [pc, #236]	; (8000af8 <move+0x528>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,12.6);
 8000a10:	4b36      	ldr	r3, [pc, #216]	; (8000aec <move+0x51c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	220c      	movs	r2, #12
 8000a16:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000a18:	4b34      	ldr	r3, [pc, #208]	; (8000aec <move+0x51c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,27);
 8000a20:	4b32      	ldr	r3, [pc, #200]	; (8000aec <move+0x51c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	221b      	movs	r2, #27
 8000a26:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000a28:	4b30      	ldr	r3, [pc, #192]	; (8000aec <move+0x51c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000a30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a34:	4831      	ldr	r0, [pc, #196]	; (8000afc <move+0x52c>)
 8000a36:	f001 fd5f 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d127      	bne.n	8000a90 <move+0x4c0>
 8000a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a44:	482d      	ldr	r0, [pc, #180]	; (8000afc <move+0x52c>)
 8000a46:	f001 fd57 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d11f      	bne.n	8000a90 <move+0x4c0>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,26.1);
 8000a50:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <move+0x528>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	221a      	movs	r2, #26
 8000a56:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <move+0x528>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,23.4);
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <move+0x528>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2217      	movs	r2, #23
 8000a66:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000a68:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <move+0x528>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,27);
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <move+0x51c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	221b      	movs	r2, #27
 8000a76:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <move+0x51c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,14.4);
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <move+0x51c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	220e      	movs	r2, #14
 8000a86:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <move+0x51c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000a90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a94:	4819      	ldr	r0, [pc, #100]	; (8000afc <move+0x52c>)
 8000a96:	f001 fd2f 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d133      	bne.n	8000b08 <move+0x538>
 8000aa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa4:	4815      	ldr	r0, [pc, #84]	; (8000afc <move+0x52c>)
 8000aa6:	f001 fd27 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d12b      	bne.n	8000b08 <move+0x538>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,26.1);
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <move+0x528>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	221a      	movs	r2, #26
 8000ab6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <move+0x528>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2200      	movs	r2, #0
 8000abe:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,23.4);
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <move+0x528>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2217      	movs	r2, #23
 8000ac6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <move+0x528>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2200      	movs	r2, #0
 8000ace:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,12.6);
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <move+0x51c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	220c      	movs	r2, #12
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <move+0x51c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2200      	movs	r2, #0
 8000ade:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,14.4);
 8000ae0:	4b02      	ldr	r3, [pc, #8]	; (8000aec <move+0x51c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	220e      	movs	r2, #14
 8000ae6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ae8:	e00a      	b.n	8000b00 <move+0x530>
 8000aea:	bf00      	nop
 8000aec:	24000070 	.word	0x24000070
 8000af0:	58020800 	.word	0x58020800
 8000af4:	58021000 	.word	0x58021000
 8000af8:	240001e8 	.word	0x240001e8
 8000afc:	58020400 	.word	0x58020400
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <move+0x5a0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2200      	movs	r2, #0
 8000b06:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000b08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b0c:	4819      	ldr	r0, [pc, #100]	; (8000b74 <move+0x5a4>)
 8000b0e:	f001 fcf3 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d127      	bne.n	8000b68 <move+0x598>
 8000b18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1c:	4815      	ldr	r0, [pc, #84]	; (8000b74 <move+0x5a4>)
 8000b1e:	f001 fceb 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d11f      	bne.n	8000b68 <move+0x598>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <move+0x5a8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2264      	movs	r2, #100	; 0x64
 8000b2e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <move+0x5a8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2264      	movs	r2, #100	; 0x64
 8000b36:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <move+0x5a8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2264      	movs	r2, #100	; 0x64
 8000b3e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <move+0x5a8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2264      	movs	r2, #100	; 0x64
 8000b46:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <move+0x5a0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2264      	movs	r2, #100	; 0x64
 8000b4e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <move+0x5a0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2264      	movs	r2, #100	; 0x64
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <move+0x5a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2264      	movs	r2, #100	; 0x64
 8000b5e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <move+0x5a0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2264      	movs	r2, #100	; 0x64
 8000b66:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	24000070 	.word	0x24000070
 8000b74:	58020400 	.word	0x58020400
 8000b78:	240001e8 	.word	0x240001e8

08000b7c <shuxian>:

void shuxian()
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	if(step==1)//直走
 8000b80:	4b7f      	ldr	r3, [pc, #508]	; (8000d80 <shuxian+0x204>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d11c      	bne.n	8000bc2 <shuxian+0x46>
	{
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000b88:	2120      	movs	r1, #32
 8000b8a:	487e      	ldr	r0, [pc, #504]	; (8000d84 <shuxian+0x208>)
 8000b8c:	f001 fcb4 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d102      	bne.n	8000b9c <shuxian+0x20>
		{
			Xflag=1;
 8000b96:	4b7c      	ldr	r3, [pc, #496]	; (8000d88 <shuxian+0x20c>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Xflag==1)
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	4879      	ldr	r0, [pc, #484]	; (8000d84 <shuxian+0x208>)
 8000ba0:	f001 fcaa 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d10b      	bne.n	8000bc2 <shuxian+0x46>
 8000baa:	4b77      	ldr	r3, [pc, #476]	; (8000d88 <shuxian+0x20c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d107      	bne.n	8000bc2 <shuxian+0x46>
		{
			X+=1;
 8000bb2:	4b76      	ldr	r3, [pc, #472]	; (8000d8c <shuxian+0x210>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	4a74      	ldr	r2, [pc, #464]	; (8000d8c <shuxian+0x210>)
 8000bba:	6013      	str	r3, [r2, #0]
			Xflag=0;
 8000bbc:	4b72      	ldr	r3, [pc, #456]	; (8000d88 <shuxian+0x20c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==2||step==4||step==6||step==12||step==14)//旋转
 8000bc2:	4b6f      	ldr	r3, [pc, #444]	; (8000d80 <shuxian+0x204>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d00f      	beq.n	8000bea <shuxian+0x6e>
 8000bca:	4b6d      	ldr	r3, [pc, #436]	; (8000d80 <shuxian+0x204>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	d00b      	beq.n	8000bea <shuxian+0x6e>
 8000bd2:	4b6b      	ldr	r3, [pc, #428]	; (8000d80 <shuxian+0x204>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b06      	cmp	r3, #6
 8000bd8:	d007      	beq.n	8000bea <shuxian+0x6e>
 8000bda:	4b69      	ldr	r3, [pc, #420]	; (8000d80 <shuxian+0x204>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b0c      	cmp	r3, #12
 8000be0:	d003      	beq.n	8000bea <shuxian+0x6e>
 8000be2:	4b67      	ldr	r3, [pc, #412]	; (8000d80 <shuxian+0x204>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b0e      	cmp	r3, #14
 8000be8:	d11e      	bne.n	8000c28 <shuxian+0xac>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1&&turnflag==1)
 8000bea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bee:	4868      	ldr	r0, [pc, #416]	; (8000d90 <shuxian+0x214>)
 8000bf0:	f001 fc82 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d10b      	bne.n	8000c12 <shuxian+0x96>
 8000bfa:	4b66      	ldr	r3, [pc, #408]	; (8000d94 <shuxian+0x218>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d107      	bne.n	8000c12 <shuxian+0x96>
		{
			turn+=1;
 8000c02:	4b65      	ldr	r3, [pc, #404]	; (8000d98 <shuxian+0x21c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	3301      	adds	r3, #1
 8000c08:	4a63      	ldr	r2, [pc, #396]	; (8000d98 <shuxian+0x21c>)
 8000c0a:	6013      	str	r3, [r2, #0]
			turnflag=0;
 8000c0c:	4b61      	ldr	r3, [pc, #388]	; (8000d94 <shuxian+0x218>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000c12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c16:	485e      	ldr	r0, [pc, #376]	; (8000d90 <shuxian+0x214>)
 8000c18:	f001 fc6e 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d102      	bne.n	8000c28 <shuxian+0xac>
		{
			turnflag=1;
 8000c22:	4b5c      	ldr	r3, [pc, #368]	; (8000d94 <shuxian+0x218>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==3||step==11||step==-1)//直走
 8000c28:	4b55      	ldr	r3, [pc, #340]	; (8000d80 <shuxian+0x204>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	d008      	beq.n	8000c42 <shuxian+0xc6>
 8000c30:	4b53      	ldr	r3, [pc, #332]	; (8000d80 <shuxian+0x204>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b0b      	cmp	r3, #11
 8000c36:	d004      	beq.n	8000c42 <shuxian+0xc6>
 8000c38:	4b51      	ldr	r3, [pc, #324]	; (8000d80 <shuxian+0x204>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c40:	d122      	bne.n	8000c88 <shuxian+0x10c>
	{
		turn=0;
 8000c42:	4b55      	ldr	r3, [pc, #340]	; (8000d98 <shuxian+0x21c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000c48:	4b52      	ldr	r3, [pc, #328]	; (8000d94 <shuxian+0x218>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Yflag==1)
 8000c4e:	2120      	movs	r1, #32
 8000c50:	484c      	ldr	r0, [pc, #304]	; (8000d84 <shuxian+0x208>)
 8000c52:	f001 fc51 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d10b      	bne.n	8000c74 <shuxian+0xf8>
 8000c5c:	4b4f      	ldr	r3, [pc, #316]	; (8000d9c <shuxian+0x220>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d107      	bne.n	8000c74 <shuxian+0xf8>
		{
			Y+=1;
 8000c64:	4b4e      	ldr	r3, [pc, #312]	; (8000da0 <shuxian+0x224>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	4a4d      	ldr	r2, [pc, #308]	; (8000da0 <shuxian+0x224>)
 8000c6c:	6013      	str	r3, [r2, #0]
			Yflag=0;
 8000c6e:	4b4b      	ldr	r3, [pc, #300]	; (8000d9c <shuxian+0x220>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000c74:	2120      	movs	r1, #32
 8000c76:	4843      	ldr	r0, [pc, #268]	; (8000d84 <shuxian+0x208>)
 8000c78:	f001 fc3e 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d102      	bne.n	8000c88 <shuxian+0x10c>
		{
			Yflag=1;
 8000c82:	4b46      	ldr	r3, [pc, #280]	; (8000d9c <shuxian+0x220>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==5||step==13)//�????回一�????
 8000c88:	4b3d      	ldr	r3, [pc, #244]	; (8000d80 <shuxian+0x204>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b05      	cmp	r3, #5
 8000c8e:	d003      	beq.n	8000c98 <shuxian+0x11c>
 8000c90:	4b3b      	ldr	r3, [pc, #236]	; (8000d80 <shuxian+0x204>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b0d      	cmp	r3, #13
 8000c96:	d122      	bne.n	8000cde <shuxian+0x162>
	{
		turn=0;
 8000c98:	4b3f      	ldr	r3, [pc, #252]	; (8000d98 <shuxian+0x21c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000c9e:	4b3d      	ldr	r3, [pc, #244]	; (8000d94 <shuxian+0x218>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Xflag==1)
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	4837      	ldr	r0, [pc, #220]	; (8000d84 <shuxian+0x208>)
 8000ca8:	f001 fc26 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d10b      	bne.n	8000cca <shuxian+0x14e>
 8000cb2:	4b35      	ldr	r3, [pc, #212]	; (8000d88 <shuxian+0x20c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d107      	bne.n	8000cca <shuxian+0x14e>
		{
			X-=1;
 8000cba:	4b34      	ldr	r3, [pc, #208]	; (8000d8c <shuxian+0x210>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	4a32      	ldr	r2, [pc, #200]	; (8000d8c <shuxian+0x210>)
 8000cc2:	6013      	str	r3, [r2, #0]
			Xflag=0;
 8000cc4:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <shuxian+0x20c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000cca:	2120      	movs	r1, #32
 8000ccc:	482d      	ldr	r0, [pc, #180]	; (8000d84 <shuxian+0x208>)
 8000cce:	f001 fc13 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <shuxian+0x162>
		{
			Xflag=1;
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <shuxian+0x20c>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==7||step==15)//�????回一�????
 8000cde:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <shuxian+0x204>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b07      	cmp	r3, #7
 8000ce4:	d003      	beq.n	8000cee <shuxian+0x172>
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <shuxian+0x204>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b0f      	cmp	r3, #15
 8000cec:	d122      	bne.n	8000d34 <shuxian+0x1b8>
	{
		turn=0;
 8000cee:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <shuxian+0x21c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000cf4:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <shuxian+0x218>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Yflag==1)
 8000cfa:	2120      	movs	r1, #32
 8000cfc:	4821      	ldr	r0, [pc, #132]	; (8000d84 <shuxian+0x208>)
 8000cfe:	f001 fbfb 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d10b      	bne.n	8000d20 <shuxian+0x1a4>
 8000d08:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <shuxian+0x220>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d107      	bne.n	8000d20 <shuxian+0x1a4>
		{
			Y-=1;
 8000d10:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <shuxian+0x224>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <shuxian+0x224>)
 8000d18:	6013      	str	r3, [r2, #0]
			Yflag=0;
 8000d1a:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <shuxian+0x220>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000d20:	2120      	movs	r1, #32
 8000d22:	4818      	ldr	r0, [pc, #96]	; (8000d84 <shuxian+0x208>)
 8000d24:	f001 fbe8 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <shuxian+0x1b8>
		{
			Yflag=1;
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <shuxian+0x220>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==8)
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <shuxian+0x204>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b08      	cmp	r3, #8
 8000d3a:	d11e      	bne.n	8000d7a <shuxian+0x1fe>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
 8000d3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d40:	4818      	ldr	r0, [pc, #96]	; (8000da4 <shuxian+0x228>)
 8000d42:	f001 fbd9 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <shuxian+0x1d6>
		{
			Zflag=1;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <shuxian+0x22c>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&Zflag==1)
 8000d52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d56:	4813      	ldr	r0, [pc, #76]	; (8000da4 <shuxian+0x228>)
 8000d58:	f001 fbce 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d10b      	bne.n	8000d7a <shuxian+0x1fe>
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <shuxian+0x22c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d107      	bne.n	8000d7a <shuxian+0x1fe>
		{
			Z+=1;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <shuxian+0x230>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <shuxian+0x230>)
 8000d72:	6013      	str	r3, [r2, #0]
			Zflag=0;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <shuxian+0x22c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	24000054 	.word	0x24000054
 8000d84:	58021000 	.word	0x58021000
 8000d88:	24000018 	.word	0x24000018
 8000d8c:	24000058 	.word	0x24000058
 8000d90:	58020400 	.word	0x58020400
 8000d94:	24000024 	.word	0x24000024
 8000d98:	24000064 	.word	0x24000064
 8000d9c:	2400001c 	.word	0x2400001c
 8000da0:	2400005c 	.word	0x2400005c
 8000da4:	58020800 	.word	0x58020800
 8000da8:	24000020 	.word	0x24000020
 8000dac:	24000060 	.word	0x24000060

08000db0 <buzhou>:


void buzhou()
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	if(step==0)//等待语音
 8000db4:	4bb3      	ldr	r3, [pc, #716]	; (8001084 <buzhou+0x2d4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <buzhou+0x12>
		{
			HAL_UART_Transmit(&huart2,blueGreen,sizeof(blueGreen),1000);
			step=1;
		}
		HAL_Delay(2000);*/
		step=1;
 8000dbc:	4bb1      	ldr	r3, [pc, #708]	; (8001084 <buzhou+0x2d4>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	601a      	str	r2, [r3, #0]
	}
	if(step==1)//move straight
 8000dc2:	4bb0      	ldr	r3, [pc, #704]	; (8001084 <buzhou+0x2d4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d116      	bne.n	8000df8 <buzhou+0x48>
	{
		move(1);
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f7ff fc00 	bl	80005d0 <move>
		shuxian();
 8000dd0:	f7ff fed4 	bl	8000b7c <shuxian>
		if(X==2&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000dd4:	4bac      	ldr	r3, [pc, #688]	; (8001088 <buzhou+0x2d8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d10d      	bne.n	8000df8 <buzhou+0x48>
 8000ddc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de0:	48aa      	ldr	r0, [pc, #680]	; (800108c <buzhou+0x2dc>)
 8000de2:	f001 fb89 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d105      	bne.n	8000df8 <buzhou+0x48>
		{
			move(4);
 8000dec:	2004      	movs	r0, #4
 8000dee:	f7ff fbef 	bl	80005d0 <move>
			step=2;
 8000df2:	4ba4      	ldr	r3, [pc, #656]	; (8001084 <buzhou+0x2d4>)
 8000df4:	2202      	movs	r2, #2
 8000df6:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==2)//turn right
 8000df8:	4ba2      	ldr	r3, [pc, #648]	; (8001084 <buzhou+0x2d4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d10e      	bne.n	8000e1e <buzhou+0x6e>
	{
		move(3);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f7ff fbe5 	bl	80005d0 <move>
		shuxian();
 8000e06:	f7ff feb9 	bl	8000b7c <shuxian>
		if(turn==3)
 8000e0a:	4ba1      	ldr	r3, [pc, #644]	; (8001090 <buzhou+0x2e0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d105      	bne.n	8000e1e <buzhou+0x6e>
		{
			move(4);
 8000e12:	2004      	movs	r0, #4
 8000e14:	f7ff fbdc 	bl	80005d0 <move>
//			step=-1;
			step=3;
 8000e18:	4b9a      	ldr	r3, [pc, #616]	; (8001084 <buzhou+0x2d4>)
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-1)//move straight
 8000e1e:	4b99      	ldr	r3, [pc, #612]	; (8001084 <buzhou+0x2d4>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e26:	d117      	bne.n	8000e58 <buzhou+0xa8>
	{
		move(1);
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f7ff fbd1 	bl	80005d0 <move>
		shuxian();
 8000e2e:	f7ff fea5 	bl	8000b7c <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000e32:	4b98      	ldr	r3, [pc, #608]	; (8001094 <buzhou+0x2e4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d10e      	bne.n	8000e58 <buzhou+0xa8>
 8000e3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e3e:	4893      	ldr	r0, [pc, #588]	; (800108c <buzhou+0x2dc>)
 8000e40:	f001 fb5a 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d106      	bne.n	8000e58 <buzhou+0xa8>
		{
			move(4);
 8000e4a:	2004      	movs	r0, #4
 8000e4c:	f7ff fbc0 	bl	80005d0 <move>
			step=-2;
 8000e50:	4b8c      	ldr	r3, [pc, #560]	; (8001084 <buzhou+0x2d4>)
 8000e52:	f06f 0201 	mvn.w	r2, #1
 8000e56:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-2)//wait for car1 and activate arm
 8000e58:	4b8a      	ldr	r3, [pc, #552]	; (8001084 <buzhou+0x2d4>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f113 0f02 	cmn.w	r3, #2
 8000e60:	d11a      	bne.n	8000e98 <buzhou+0xe8>
	{
		if(arm==0)
 8000e62:	4b8d      	ldr	r3, [pc, #564]	; (8001098 <buzhou+0x2e8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d109      	bne.n	8000e7e <buzhou+0xce>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A0,sizeof(A0),0xffff);//机械臂初始化
 8000e6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e6e:	2205      	movs	r2, #5
 8000e70:	498a      	ldr	r1, [pc, #552]	; (800109c <buzhou+0x2ec>)
 8000e72:	488b      	ldr	r0, [pc, #556]	; (80010a0 <buzhou+0x2f0>)
 8000e74:	f005 f80e 	bl	8005e94 <HAL_UART_Transmit>
			arm=1;
 8000e78:	4b87      	ldr	r3, [pc, #540]	; (8001098 <buzhou+0x2e8>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]
		}
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e82:	2201      	movs	r2, #1
 8000e84:	4987      	ldr	r1, [pc, #540]	; (80010a4 <buzhou+0x2f4>)
 8000e86:	4888      	ldr	r0, [pc, #544]	; (80010a8 <buzhou+0x2f8>)
 8000e88:	f005 f89a 	bl	8005fc0 <HAL_UART_Receive>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <buzhou+0xe8>
		{
			step=3;
 8000e92:	4b7c      	ldr	r3, [pc, #496]	; (8001084 <buzhou+0x2d4>)
 8000e94:	2203      	movs	r2, #3
 8000e96:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==3)//move straight
 8000e98:	4b7a      	ldr	r3, [pc, #488]	; (8001084 <buzhou+0x2d4>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d11a      	bne.n	8000ed6 <buzhou+0x126>
	{
		move(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f7ff fb95 	bl	80005d0 <move>
		shuxian();
 8000ea6:	f7ff fe69 	bl	8000b7c <shuxian>
		if(Y==2&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000eaa:	4b7a      	ldr	r3, [pc, #488]	; (8001094 <buzhou+0x2e4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d111      	bne.n	8000ed6 <buzhou+0x126>
 8000eb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb6:	4875      	ldr	r0, [pc, #468]	; (800108c <buzhou+0x2dc>)
 8000eb8:	f001 fb1e 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d109      	bne.n	8000ed6 <buzhou+0x126>
		{
			move(4);
 8000ec2:	2004      	movs	r0, #4
 8000ec4:	f7ff fb84 	bl	80005d0 <move>
			HAL_Delay(3000);
 8000ec8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ecc:	f001 f850 	bl	8001f70 <HAL_Delay>
//			step=-4;
			step=99;
 8000ed0:	4b6c      	ldr	r3, [pc, #432]	; (8001084 <buzhou+0x2d4>)
 8000ed2:	2263      	movs	r2, #99	; 0x63
 8000ed4:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-4)//wait for car1 to catch
 8000ed6:	4b6b      	ldr	r3, [pc, #428]	; (8001084 <buzhou+0x2d4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f113 0f04 	cmn.w	r3, #4
 8000ede:	d114      	bne.n	8000f0a <buzhou+0x15a>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	496f      	ldr	r1, [pc, #444]	; (80010a4 <buzhou+0x2f4>)
 8000ee8:	486f      	ldr	r0, [pc, #444]	; (80010a8 <buzhou+0x2f8>)
 8000eea:	f005 f869 	bl	8005fc0 <HAL_UART_Receive>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10a      	bne.n	8000f0a <buzhou+0x15a>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A3,sizeof(A3),0xffff);//left_turn
 8000ef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ef8:	2205      	movs	r2, #5
 8000efa:	496c      	ldr	r1, [pc, #432]	; (80010ac <buzhou+0x2fc>)
 8000efc:	4868      	ldr	r0, [pc, #416]	; (80010a0 <buzhou+0x2f0>)
 8000efe:	f004 ffc9 	bl	8005e94 <HAL_UART_Transmit>
			step=-5;
 8000f02:	4b60      	ldr	r3, [pc, #384]	; (8001084 <buzhou+0x2d4>)
 8000f04:	f06f 0204 	mvn.w	r2, #4
 8000f08:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-5)
 8000f0a:	4b5e      	ldr	r3, [pc, #376]	; (8001084 <buzhou+0x2d4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f113 0f05 	cmn.w	r3, #5
 8000f12:	d114      	bne.n	8000f3e <buzhou+0x18e>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4962      	ldr	r1, [pc, #392]	; (80010a4 <buzhou+0x2f4>)
 8000f1c:	4862      	ldr	r0, [pc, #392]	; (80010a8 <buzhou+0x2f8>)
 8000f1e:	f005 f84f 	bl	8005fc0 <HAL_UART_Receive>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d10a      	bne.n	8000f3e <buzhou+0x18e>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A4,sizeof(A4),0xffff);//right_turn
 8000f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f2c:	2205      	movs	r2, #5
 8000f2e:	4960      	ldr	r1, [pc, #384]	; (80010b0 <buzhou+0x300>)
 8000f30:	485b      	ldr	r0, [pc, #364]	; (80010a0 <buzhou+0x2f0>)
 8000f32:	f004 ffaf 	bl	8005e94 <HAL_UART_Transmit>
			step=-6;
 8000f36:	4b53      	ldr	r3, [pc, #332]	; (8001084 <buzhou+0x2d4>)
 8000f38:	f06f 0205 	mvn.w	r2, #5
 8000f3c:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-6)//wait for car1 to move
 8000f3e:	4b51      	ldr	r3, [pc, #324]	; (8001084 <buzhou+0x2d4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f113 0f06 	cmn.w	r3, #6
 8000f46:	d10c      	bne.n	8000f62 <buzhou+0x1b2>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4955      	ldr	r1, [pc, #340]	; (80010a4 <buzhou+0x2f4>)
 8000f50:	4855      	ldr	r0, [pc, #340]	; (80010a8 <buzhou+0x2f8>)
 8000f52:	f005 f835 	bl	8005fc0 <HAL_UART_Receive>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <buzhou+0x1b2>
		{
//			step=4;
			step=11;
 8000f5c:	4b49      	ldr	r3, [pc, #292]	; (8001084 <buzhou+0x2d4>)
 8000f5e:	220b      	movs	r2, #11
 8000f60:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==4)//turn right
 8000f62:	4b48      	ldr	r3, [pc, #288]	; (8001084 <buzhou+0x2d4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	d10e      	bne.n	8000f88 <buzhou+0x1d8>
	{
		move(3);
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f7ff fb30 	bl	80005d0 <move>
		shuxian();
 8000f70:	f7ff fe04 	bl	8000b7c <shuxian>
		if(turn==3)
 8000f74:	4b46      	ldr	r3, [pc, #280]	; (8001090 <buzhou+0x2e0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d105      	bne.n	8000f88 <buzhou+0x1d8>
		{
			move(4);
 8000f7c:	2004      	movs	r0, #4
 8000f7e:	f7ff fb27 	bl	80005d0 <move>
			step=5;
 8000f82:	4b40      	ldr	r3, [pc, #256]	; (8001084 <buzhou+0x2d4>)
 8000f84:	2205      	movs	r2, #5
 8000f86:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==5)//move straight
 8000f88:	4b3e      	ldr	r3, [pc, #248]	; (8001084 <buzhou+0x2d4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b05      	cmp	r3, #5
 8000f8e:	d116      	bne.n	8000fbe <buzhou+0x20e>
	{
		move(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f7ff fb1d 	bl	80005d0 <move>
		shuxian();
 8000f96:	f7ff fdf1 	bl	8000b7c <shuxian>
		if(X==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000f9a:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <buzhou+0x2d8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d10d      	bne.n	8000fbe <buzhou+0x20e>
 8000fa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa6:	4839      	ldr	r0, [pc, #228]	; (800108c <buzhou+0x2dc>)
 8000fa8:	f001 faa6 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d105      	bne.n	8000fbe <buzhou+0x20e>
		{
			move(4);
 8000fb2:	2004      	movs	r0, #4
 8000fb4:	f7ff fb0c 	bl	80005d0 <move>
			step=6;
 8000fb8:	4b32      	ldr	r3, [pc, #200]	; (8001084 <buzhou+0x2d4>)
 8000fba:	2206      	movs	r2, #6
 8000fbc:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==6)//turn right
 8000fbe:	4b31      	ldr	r3, [pc, #196]	; (8001084 <buzhou+0x2d4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d10e      	bne.n	8000fe4 <buzhou+0x234>
	{
		move(3);
 8000fc6:	2003      	movs	r0, #3
 8000fc8:	f7ff fb02 	bl	80005d0 <move>
		shuxian();
 8000fcc:	f7ff fdd6 	bl	8000b7c <shuxian>
		if(turn==3)
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <buzhou+0x2e0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d105      	bne.n	8000fe4 <buzhou+0x234>
		{
			move(4);
 8000fd8:	2004      	movs	r0, #4
 8000fda:	f7ff faf9 	bl	80005d0 <move>
			step=7;
 8000fde:	4b29      	ldr	r3, [pc, #164]	; (8001084 <buzhou+0x2d4>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==7)
 8000fe4:	4b27      	ldr	r3, [pc, #156]	; (8001084 <buzhou+0x2d4>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b07      	cmp	r3, #7
 8000fea:	d116      	bne.n	800101a <buzhou+0x26a>
	{
		move(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f7ff faef 	bl	80005d0 <move>
		shuxian();
 8000ff2:	f7ff fdc3 	bl	8000b7c <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000ff6:	4b27      	ldr	r3, [pc, #156]	; (8001094 <buzhou+0x2e4>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d10d      	bne.n	800101a <buzhou+0x26a>
 8000ffe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001002:	4822      	ldr	r0, [pc, #136]	; (800108c <buzhou+0x2dc>)
 8001004:	f001 fa78 	bl	80024f8 <HAL_GPIO_ReadPin>
 8001008:	4603      	mov	r3, r0
 800100a:	2b01      	cmp	r3, #1
 800100c:	d105      	bne.n	800101a <buzhou+0x26a>
		{
			move(4);
 800100e:	2004      	movs	r0, #4
 8001010:	f7ff fade 	bl	80005d0 <move>
			step=8;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <buzhou+0x2d4>)
 8001016:	2208      	movs	r2, #8
 8001018:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==8)
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <buzhou+0x2d4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b08      	cmp	r3, #8
 8001020:	d10e      	bne.n	8001040 <buzhou+0x290>
	{
		move(5);
 8001022:	2005      	movs	r0, #5
 8001024:	f7ff fad4 	bl	80005d0 <move>
		shuxian();
 8001028:	f7ff fda8 	bl	8000b7c <shuxian>
		if(Z==3)
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <buzhou+0x304>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b03      	cmp	r3, #3
 8001032:	d105      	bne.n	8001040 <buzhou+0x290>
		{
			move(4);
 8001034:	2004      	movs	r0, #4
 8001036:	f7ff facb 	bl	80005d0 <move>
			step=9;
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <buzhou+0x2d4>)
 800103c:	2209      	movs	r2, #9
 800103e:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==11)
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <buzhou+0x2d4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b0b      	cmp	r3, #11
 8001046:	d117      	bne.n	8001078 <buzhou+0x2c8>
	{
		move(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff fac1 	bl	80005d0 <move>
		shuxian();
 800104e:	f7ff fd95 	bl	8000b7c <shuxian>
		if(Y==4&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <buzhou+0x2e4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b04      	cmp	r3, #4
 8001058:	d10e      	bne.n	8001078 <buzhou+0x2c8>
 800105a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105e:	480b      	ldr	r0, [pc, #44]	; (800108c <buzhou+0x2dc>)
 8001060:	f001 fa4a 	bl	80024f8 <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b01      	cmp	r3, #1
 8001068:	d106      	bne.n	8001078 <buzhou+0x2c8>
		{
			move(4);
 800106a:	2004      	movs	r0, #4
 800106c:	f7ff fab0 	bl	80005d0 <move>
			step=-6;
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <buzhou+0x2d4>)
 8001072:	f06f 0205 	mvn.w	r2, #5
 8001076:	601a      	str	r2, [r3, #0]
//			step=12;
		}
	}
	if(step==-6)//arm move
 8001078:	4b02      	ldr	r3, [pc, #8]	; (8001084 <buzhou+0x2d4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f113 0f06 	cmn.w	r3, #6
 8001080:	d127      	bne.n	80010d2 <buzhou+0x322>
 8001082:	e019      	b.n	80010b8 <buzhou+0x308>
 8001084:	24000054 	.word	0x24000054
 8001088:	24000058 	.word	0x24000058
 800108c:	58020800 	.word	0x58020800
 8001090:	24000064 	.word	0x24000064
 8001094:	2400005c 	.word	0x2400005c
 8001098:	24000068 	.word	0x24000068
 800109c:	24000000 	.word	0x24000000
 80010a0:	24000158 	.word	0x24000158
 80010a4:	2400006c 	.word	0x2400006c
 80010a8:	240000bc 	.word	0x240000bc
 80010ac:	24000008 	.word	0x24000008
 80010b0:	24000010 	.word	0x24000010
 80010b4:	24000060 	.word	0x24000060
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
 80010bc:	2201      	movs	r2, #1
 80010be:	4934      	ldr	r1, [pc, #208]	; (8001190 <buzhou+0x3e0>)
 80010c0:	4834      	ldr	r0, [pc, #208]	; (8001194 <buzhou+0x3e4>)
 80010c2:	f004 ff7d 	bl	8005fc0 <HAL_UART_Receive>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <buzhou+0x322>
		{
			step=12;
 80010cc:	4b32      	ldr	r3, [pc, #200]	; (8001198 <buzhou+0x3e8>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==12)
 80010d2:	4b31      	ldr	r3, [pc, #196]	; (8001198 <buzhou+0x3e8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b0c      	cmp	r3, #12
 80010d8:	d10e      	bne.n	80010f8 <buzhou+0x348>
	{
		move(3);
 80010da:	2003      	movs	r0, #3
 80010dc:	f7ff fa78 	bl	80005d0 <move>
		shuxian();
 80010e0:	f7ff fd4c 	bl	8000b7c <shuxian>
		if(turn==3)
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <buzhou+0x3ec>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d105      	bne.n	80010f8 <buzhou+0x348>
		{
			move(4);
 80010ec:	2004      	movs	r0, #4
 80010ee:	f7ff fa6f 	bl	80005d0 <move>
			step=13;
 80010f2:	4b29      	ldr	r3, [pc, #164]	; (8001198 <buzhou+0x3e8>)
 80010f4:	220d      	movs	r2, #13
 80010f6:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==13)
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <buzhou+0x3e8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b0d      	cmp	r3, #13
 80010fe:	d116      	bne.n	800112e <buzhou+0x37e>
	{
		move(6);
 8001100:	2006      	movs	r0, #6
 8001102:	f7ff fa65 	bl	80005d0 <move>
		shuxian();
 8001106:	f7ff fd39 	bl	8000b7c <shuxian>
		if(X==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <buzhou+0x3f0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d10d      	bne.n	800112e <buzhou+0x37e>
 8001112:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001116:	4823      	ldr	r0, [pc, #140]	; (80011a4 <buzhou+0x3f4>)
 8001118:	f001 f9ee 	bl	80024f8 <HAL_GPIO_ReadPin>
 800111c:	4603      	mov	r3, r0
 800111e:	2b01      	cmp	r3, #1
 8001120:	d105      	bne.n	800112e <buzhou+0x37e>
		{
			move(4);
 8001122:	2004      	movs	r0, #4
 8001124:	f7ff fa54 	bl	80005d0 <move>
			step=14;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <buzhou+0x3e8>)
 800112a:	220e      	movs	r2, #14
 800112c:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==14)
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <buzhou+0x3e8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b0e      	cmp	r3, #14
 8001134:	d10e      	bne.n	8001154 <buzhou+0x3a4>
	{
		move(3);
 8001136:	2003      	movs	r0, #3
 8001138:	f7ff fa4a 	bl	80005d0 <move>
		shuxian();
 800113c:	f7ff fd1e 	bl	8000b7c <shuxian>
		if(turn==3)
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <buzhou+0x3ec>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b03      	cmp	r3, #3
 8001146:	d105      	bne.n	8001154 <buzhou+0x3a4>
		{
			move(4);
 8001148:	2004      	movs	r0, #4
 800114a:	f7ff fa41 	bl	80005d0 <move>
			step=15;
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <buzhou+0x3e8>)
 8001150:	220f      	movs	r2, #15
 8001152:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==15)
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <buzhou+0x3e8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b0f      	cmp	r3, #15
 800115a:	d116      	bne.n	800118a <buzhou+0x3da>
	{
		move(1);
 800115c:	2001      	movs	r0, #1
 800115e:	f7ff fa37 	bl	80005d0 <move>
		shuxian();
 8001162:	f7ff fd0b 	bl	8000b7c <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <buzhou+0x3f8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d10d      	bne.n	800118a <buzhou+0x3da>
 800116e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001172:	480c      	ldr	r0, [pc, #48]	; (80011a4 <buzhou+0x3f4>)
 8001174:	f001 f9c0 	bl	80024f8 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b01      	cmp	r3, #1
 800117c:	d105      	bne.n	800118a <buzhou+0x3da>
		{
			move(4);
 800117e:	2004      	movs	r0, #4
 8001180:	f7ff fa26 	bl	80005d0 <move>
			step=8;
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <buzhou+0x3e8>)
 8001186:	2208      	movs	r2, #8
 8001188:	601a      	str	r2, [r3, #0]
		}
	}

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2400006c 	.word	0x2400006c
 8001194:	240000bc 	.word	0x240000bc
 8001198:	24000054 	.word	0x24000054
 800119c:	24000064 	.word	0x24000064
 80011a0:	24000058 	.word	0x24000058
 80011a4:	58020800 	.word	0x58020800
 80011a8:	2400005c 	.word	0x2400005c

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b0:	f000 fe4c 	bl	8001e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b4:	f000 f834 	bl	8001220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b8:	f000 fb22 	bl	8001800 <MX_GPIO_Init>
  MX_TIM8_Init();
 80011bc:	f000 f96c 	bl	8001498 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80011c0:	f000 fa3a 	bl	8001638 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80011c4:	f000 fa84 	bl	80016d0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80011c8:	f000 f896 	bl	80012f8 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80011cc:	f000 facc 	bl	8001768 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80011d0:	2100      	movs	r1, #0
 80011d2:	4811      	ldr	r0, [pc, #68]	; (8001218 <main+0x6c>)
 80011d4:	f003 fdb4 	bl	8004d40 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80011d8:	2104      	movs	r1, #4
 80011da:	480f      	ldr	r0, [pc, #60]	; (8001218 <main+0x6c>)
 80011dc:	f003 fdb0 	bl	8004d40 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 80011e0:	2108      	movs	r1, #8
 80011e2:	480d      	ldr	r0, [pc, #52]	; (8001218 <main+0x6c>)
 80011e4:	f003 fdac 	bl	8004d40 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 80011e8:	210c      	movs	r1, #12
 80011ea:	480b      	ldr	r0, [pc, #44]	; (8001218 <main+0x6c>)
 80011ec:	f003 fda8 	bl	8004d40 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 80011f0:	2100      	movs	r1, #0
 80011f2:	480a      	ldr	r0, [pc, #40]	; (800121c <main+0x70>)
 80011f4:	f003 fda4 	bl	8004d40 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 80011f8:	2104      	movs	r1, #4
 80011fa:	4808      	ldr	r0, [pc, #32]	; (800121c <main+0x70>)
 80011fc:	f003 fda0 	bl	8004d40 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 8001200:	2108      	movs	r1, #8
 8001202:	4806      	ldr	r0, [pc, #24]	; (800121c <main+0x70>)
 8001204:	f003 fd9c 	bl	8004d40 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);
 8001208:	210c      	movs	r1, #12
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <main+0x70>)
 800120c:	f003 fd98 	bl	8004d40 <HAL_TIM_PWM_Start>
//	       HAL_UART_Transmit(&huart1, (uint8_t *)A1,sizeof(A1),0xffff);
//	       HAL_Delay(2000);
	  /*HAL_UART_Transmit(&huart2,redGreen,sizeof(redGreen),1000);
	  HAL_UART_Transmit(&huart1, (uint8_t *)A1,sizeof(A1),0xffff);
	  HAL_Delay(10000);*/
	  buzhou();
 8001210:	f7ff fdce 	bl	8000db0 <buzhou>
 8001214:	e7fc      	b.n	8001210 <main+0x64>
 8001216:	bf00      	nop
 8001218:	240001e8 	.word	0x240001e8
 800121c:	24000070 	.word	0x24000070

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b09c      	sub	sp, #112	; 0x70
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122a:	224c      	movs	r2, #76	; 0x4c
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f005 ffd6 	bl	80071e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2220      	movs	r2, #32
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f005 ffd0 	bl	80071e0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001240:	2002      	movs	r0, #2
 8001242:	f001 f971 	bl	8002528 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <SystemClock_Config+0xd0>)
 800124c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124e:	4a28      	ldr	r2, [pc, #160]	; (80012f0 <SystemClock_Config+0xd0>)
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <SystemClock_Config+0xd0>)
 8001258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <SystemClock_Config+0xd4>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001268:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <SystemClock_Config+0xd4>)
 800126a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <SystemClock_Config+0xd4>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800127c:	bf00      	nop
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <SystemClock_Config+0xd4>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800128a:	d1f8      	bne.n	800127e <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800128c:	2302      	movs	r3, #2
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001290:	2301      	movs	r3, #1
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001294:	2340      	movs	r3, #64	; 0x40
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001298:	2300      	movs	r3, #0
 800129a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 f97b 	bl	800259c <HAL_RCC_OscConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012ac:	f000 fb30 	bl	8001910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b0:	233f      	movs	r3, #63	; 0x3f
 80012b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012c4:	2340      	movs	r3, #64	; 0x40
 80012c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2101      	movs	r1, #1
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 fd8c 	bl	8002df4 <HAL_RCC_ClockConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012e2:	f000 fb15 	bl	8001910 <Error_Handler>
  }
}
 80012e6:	bf00      	nop
 80012e8:	3770      	adds	r7, #112	; 0x70
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	58000400 	.word	0x58000400
 80012f4:	58024800 	.word	0x58024800

080012f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b09a      	sub	sp, #104	; 0x68
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001318:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	615a      	str	r2, [r3, #20]
 800132a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	222c      	movs	r2, #44	; 0x2c
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f005 ff54 	bl	80071e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001338:	4b55      	ldr	r3, [pc, #340]	; (8001490 <MX_TIM1_Init+0x198>)
 800133a:	4a56      	ldr	r2, [pc, #344]	; (8001494 <MX_TIM1_Init+0x19c>)
 800133c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 800133e:	4b54      	ldr	r3, [pc, #336]	; (8001490 <MX_TIM1_Init+0x198>)
 8001340:	221f      	movs	r2, #31
 8001342:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001344:	4b52      	ldr	r3, [pc, #328]	; (8001490 <MX_TIM1_Init+0x198>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800134a:	4b51      	ldr	r3, [pc, #324]	; (8001490 <MX_TIM1_Init+0x198>)
 800134c:	2263      	movs	r2, #99	; 0x63
 800134e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001350:	4b4f      	ldr	r3, [pc, #316]	; (8001490 <MX_TIM1_Init+0x198>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001356:	4b4e      	ldr	r3, [pc, #312]	; (8001490 <MX_TIM1_Init+0x198>)
 8001358:	2200      	movs	r2, #0
 800135a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135c:	4b4c      	ldr	r3, [pc, #304]	; (8001490 <MX_TIM1_Init+0x198>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001362:	484b      	ldr	r0, [pc, #300]	; (8001490 <MX_TIM1_Init+0x198>)
 8001364:	f003 fc34 	bl	8004bd0 <HAL_TIM_Base_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800136e:	f000 facf 	bl	8001910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001376:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001378:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800137c:	4619      	mov	r1, r3
 800137e:	4844      	ldr	r0, [pc, #272]	; (8001490 <MX_TIM1_Init+0x198>)
 8001380:	f003 ff00 	bl	8005184 <HAL_TIM_ConfigClockSource>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800138a:	f000 fac1 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800138e:	4840      	ldr	r0, [pc, #256]	; (8001490 <MX_TIM1_Init+0x198>)
 8001390:	f003 fc75 	bl	8004c7e <HAL_TIM_PWM_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800139a:	f000 fab9 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013ae:	4619      	mov	r1, r3
 80013b0:	4837      	ldr	r0, [pc, #220]	; (8001490 <MX_TIM1_Init+0x198>)
 80013b2:	f004 fc13 	bl	8005bdc <HAL_TIMEx_MasterConfigSynchronization>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80013bc:	f000 faa8 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c0:	2360      	movs	r3, #96	; 0x60
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c8:	2300      	movs	r3, #0
 80013ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013cc:	2300      	movs	r3, #0
 80013ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013e0:	2200      	movs	r2, #0
 80013e2:	4619      	mov	r1, r3
 80013e4:	482a      	ldr	r0, [pc, #168]	; (8001490 <MX_TIM1_Init+0x198>)
 80013e6:	f003 fdb9 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80013f0:	f000 fa8e 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013f8:	2204      	movs	r2, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4824      	ldr	r0, [pc, #144]	; (8001490 <MX_TIM1_Init+0x198>)
 80013fe:	f003 fdad 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001408:	f000 fa82 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800140c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001410:	2208      	movs	r2, #8
 8001412:	4619      	mov	r1, r3
 8001414:	481e      	ldr	r0, [pc, #120]	; (8001490 <MX_TIM1_Init+0x198>)
 8001416:	f003 fda1 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001420:	f000 fa76 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001424:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001428:	220c      	movs	r2, #12
 800142a:	4619      	mov	r1, r3
 800142c:	4818      	ldr	r0, [pc, #96]	; (8001490 <MX_TIM1_Init+0x198>)
 800142e:	f003 fd95 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001438:	f000 fa6a 	bl	8001910 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001454:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800145e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4619      	mov	r1, r3
 8001470:	4807      	ldr	r0, [pc, #28]	; (8001490 <MX_TIM1_Init+0x198>)
 8001472:	f004 fc41 	bl	8005cf8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 800147c:	f000 fa48 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001480:	4803      	ldr	r0, [pc, #12]	; (8001490 <MX_TIM1_Init+0x198>)
 8001482:	f000 fa9f 	bl	80019c4 <HAL_TIM_MspPostInit>

}
 8001486:	bf00      	nop
 8001488:	3768      	adds	r7, #104	; 0x68
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	240001e8 	.word	0x240001e8
 8001494:	40010000 	.word	0x40010000

08001498 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b09a      	sub	sp, #104	; 0x68
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
 80014c8:	615a      	str	r2, [r3, #20]
 80014ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	222c      	movs	r2, #44	; 0x2c
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f005 fe84 	bl	80071e0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014d8:	4b55      	ldr	r3, [pc, #340]	; (8001630 <MX_TIM8_Init+0x198>)
 80014da:	4a56      	ldr	r2, [pc, #344]	; (8001634 <MX_TIM8_Init+0x19c>)
 80014dc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 80014de:	4b54      	ldr	r3, [pc, #336]	; (8001630 <MX_TIM8_Init+0x198>)
 80014e0:	223f      	movs	r2, #63	; 0x3f
 80014e2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b52      	ldr	r3, [pc, #328]	; (8001630 <MX_TIM8_Init+0x198>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 80014ea:	4b51      	ldr	r3, [pc, #324]	; (8001630 <MX_TIM8_Init+0x198>)
 80014ec:	2263      	movs	r2, #99	; 0x63
 80014ee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f0:	4b4f      	ldr	r3, [pc, #316]	; (8001630 <MX_TIM8_Init+0x198>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014f6:	4b4e      	ldr	r3, [pc, #312]	; (8001630 <MX_TIM8_Init+0x198>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fc:	4b4c      	ldr	r3, [pc, #304]	; (8001630 <MX_TIM8_Init+0x198>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001502:	484b      	ldr	r0, [pc, #300]	; (8001630 <MX_TIM8_Init+0x198>)
 8001504:	f003 fb64 	bl	8004bd0 <HAL_TIM_Base_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800150e:	f000 f9ff 	bl	8001910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001516:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001518:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800151c:	4619      	mov	r1, r3
 800151e:	4844      	ldr	r0, [pc, #272]	; (8001630 <MX_TIM8_Init+0x198>)
 8001520:	f003 fe30 	bl	8005184 <HAL_TIM_ConfigClockSource>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800152a:	f000 f9f1 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800152e:	4840      	ldr	r0, [pc, #256]	; (8001630 <MX_TIM8_Init+0x198>)
 8001530:	f003 fba5 	bl	8004c7e <HAL_TIM_PWM_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800153a:	f000 f9e9 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800154a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800154e:	4619      	mov	r1, r3
 8001550:	4837      	ldr	r0, [pc, #220]	; (8001630 <MX_TIM8_Init+0x198>)
 8001552:	f004 fb43 	bl	8005bdc <HAL_TIMEx_MasterConfigSynchronization>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 800155c:	f000 f9d8 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001560:	2360      	movs	r3, #96	; 0x60
 8001562:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001568:	2300      	movs	r3, #0
 800156a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800156c:	2300      	movs	r3, #0
 800156e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001578:	2300      	movs	r3, #0
 800157a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800157c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001580:	2200      	movs	r2, #0
 8001582:	4619      	mov	r1, r3
 8001584:	482a      	ldr	r0, [pc, #168]	; (8001630 <MX_TIM8_Init+0x198>)
 8001586:	f003 fce9 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8001590:	f000 f9be 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001594:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001598:	2204      	movs	r2, #4
 800159a:	4619      	mov	r1, r3
 800159c:	4824      	ldr	r0, [pc, #144]	; (8001630 <MX_TIM8_Init+0x198>)
 800159e:	f003 fcdd 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 80015a8:	f000 f9b2 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015b0:	2208      	movs	r2, #8
 80015b2:	4619      	mov	r1, r3
 80015b4:	481e      	ldr	r0, [pc, #120]	; (8001630 <MX_TIM8_Init+0x198>)
 80015b6:	f003 fcd1 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 80015c0:	f000 f9a6 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015c8:	220c      	movs	r2, #12
 80015ca:	4619      	mov	r1, r3
 80015cc:	4818      	ldr	r0, [pc, #96]	; (8001630 <MX_TIM8_Init+0x198>)
 80015ce:	f003 fcc5 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 80015d8:	f000 f99a 	bl	8001910 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	4619      	mov	r1, r3
 8001610:	4807      	ldr	r0, [pc, #28]	; (8001630 <MX_TIM8_Init+0x198>)
 8001612:	f004 fb71 	bl	8005cf8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM8_Init+0x188>
  {
    Error_Handler();
 800161c:	f000 f978 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001620:	4803      	ldr	r0, [pc, #12]	; (8001630 <MX_TIM8_Init+0x198>)
 8001622:	f000 f9cf 	bl	80019c4 <HAL_TIM_MspPostInit>

}
 8001626:	bf00      	nop
 8001628:	3768      	adds	r7, #104	; 0x68
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	24000070 	.word	0x24000070
 8001634:	40010400 	.word	0x40010400

08001638 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800163c:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <MX_USART1_UART_Init+0x90>)
 800163e:	4a23      	ldr	r2, [pc, #140]	; (80016cc <MX_USART1_UART_Init+0x94>)
 8001640:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001642:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <MX_USART1_UART_Init+0x90>)
 8001644:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001648:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <MX_USART1_UART_Init+0x90>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <MX_USART1_UART_Init+0x90>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <MX_USART1_UART_Init+0x90>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <MX_USART1_UART_Init+0x90>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <MX_USART1_UART_Init+0x90>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <MX_USART1_UART_Init+0x90>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <MX_USART1_UART_Init+0x90>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_USART1_UART_Init+0x90>)
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <MX_USART1_UART_Init+0x90>)
 800167c:	2200      	movs	r2, #0
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001680:	4811      	ldr	r0, [pc, #68]	; (80016c8 <MX_USART1_UART_Init+0x90>)
 8001682:	f004 fbb7 	bl	8005df4 <HAL_UART_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800168c:	f000 f940 	bl	8001910 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001690:	2100      	movs	r1, #0
 8001692:	480d      	ldr	r0, [pc, #52]	; (80016c8 <MX_USART1_UART_Init+0x90>)
 8001694:	f005 fcb6 	bl	8007004 <HAL_UARTEx_SetTxFifoThreshold>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800169e:	f000 f937 	bl	8001910 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016a2:	2100      	movs	r1, #0
 80016a4:	4808      	ldr	r0, [pc, #32]	; (80016c8 <MX_USART1_UART_Init+0x90>)
 80016a6:	f005 fceb 	bl	8007080 <HAL_UARTEx_SetRxFifoThreshold>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016b0:	f000 f92e 	bl	8001910 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016b4:	4804      	ldr	r0, [pc, #16]	; (80016c8 <MX_USART1_UART_Init+0x90>)
 80016b6:	f005 fc6c 	bl	8006f92 <HAL_UARTEx_DisableFifoMode>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016c0:	f000 f926 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	24000158 	.word	0x24000158
 80016cc:	40011000 	.word	0x40011000

080016d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d4:	4b22      	ldr	r3, [pc, #136]	; (8001760 <MX_USART2_UART_Init+0x90>)
 80016d6:	4a23      	ldr	r2, [pc, #140]	; (8001764 <MX_USART2_UART_Init+0x94>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80016da:	4b21      	ldr	r3, [pc, #132]	; (8001760 <MX_USART2_UART_Init+0x90>)
 80016dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <MX_USART2_UART_Init+0x90>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <MX_USART2_UART_Init+0x90>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <MX_USART2_UART_Init+0x90>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <MX_USART2_UART_Init+0x90>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b19      	ldr	r3, [pc, #100]	; (8001760 <MX_USART2_UART_Init+0x90>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b17      	ldr	r3, [pc, #92]	; (8001760 <MX_USART2_UART_Init+0x90>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <MX_USART2_UART_Init+0x90>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <MX_USART2_UART_Init+0x90>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001712:	4b13      	ldr	r3, [pc, #76]	; (8001760 <MX_USART2_UART_Init+0x90>)
 8001714:	2200      	movs	r2, #0
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001718:	4811      	ldr	r0, [pc, #68]	; (8001760 <MX_USART2_UART_Init+0x90>)
 800171a:	f004 fb6b 	bl	8005df4 <HAL_UART_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001724:	f000 f8f4 	bl	8001910 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001728:	2100      	movs	r1, #0
 800172a:	480d      	ldr	r0, [pc, #52]	; (8001760 <MX_USART2_UART_Init+0x90>)
 800172c:	f005 fc6a 	bl	8007004 <HAL_UARTEx_SetTxFifoThreshold>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001736:	f000 f8eb 	bl	8001910 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800173a:	2100      	movs	r1, #0
 800173c:	4808      	ldr	r0, [pc, #32]	; (8001760 <MX_USART2_UART_Init+0x90>)
 800173e:	f005 fc9f 	bl	8007080 <HAL_UARTEx_SetRxFifoThreshold>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001748:	f000 f8e2 	bl	8001910 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800174c:	4804      	ldr	r0, [pc, #16]	; (8001760 <MX_USART2_UART_Init+0x90>)
 800174e:	f005 fc20 	bl	8006f92 <HAL_UARTEx_DisableFifoMode>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001758:	f000 f8da 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	24000234 	.word	0x24000234
 8001764:	40004400 	.word	0x40004400

08001768 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800176c:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <MX_USART3_UART_Init+0x90>)
 800176e:	4a23      	ldr	r2, [pc, #140]	; (80017fc <MX_USART3_UART_Init+0x94>)
 8001770:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <MX_USART3_UART_Init+0x90>)
 8001774:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001778:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <MX_USART3_UART_Init+0x90>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <MX_USART3_UART_Init+0x90>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_USART3_UART_Init+0x90>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <MX_USART3_UART_Init+0x90>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_USART3_UART_Init+0x90>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MX_USART3_UART_Init+0x90>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <MX_USART3_UART_Init+0x90>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_USART3_UART_Init+0x90>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_USART3_UART_Init+0x90>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017b0:	4811      	ldr	r0, [pc, #68]	; (80017f8 <MX_USART3_UART_Init+0x90>)
 80017b2:	f004 fb1f 	bl	8005df4 <HAL_UART_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017bc:	f000 f8a8 	bl	8001910 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017c0:	2100      	movs	r1, #0
 80017c2:	480d      	ldr	r0, [pc, #52]	; (80017f8 <MX_USART3_UART_Init+0x90>)
 80017c4:	f005 fc1e 	bl	8007004 <HAL_UARTEx_SetTxFifoThreshold>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017ce:	f000 f89f 	bl	8001910 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d2:	2100      	movs	r1, #0
 80017d4:	4808      	ldr	r0, [pc, #32]	; (80017f8 <MX_USART3_UART_Init+0x90>)
 80017d6:	f005 fc53 	bl	8007080 <HAL_UARTEx_SetRxFifoThreshold>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017e0:	f000 f896 	bl	8001910 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <MX_USART3_UART_Init+0x90>)
 80017e6:	f005 fbd4 	bl	8006f92 <HAL_UARTEx_DisableFifoMode>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017f0:	f000 f88e 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	240000bc 	.word	0x240000bc
 80017fc:	40004800 	.word	0x40004800

08001800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	4b3a      	ldr	r3, [pc, #232]	; (8001900 <MX_GPIO_Init+0x100>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181c:	4a38      	ldr	r2, [pc, #224]	; (8001900 <MX_GPIO_Init+0x100>)
 800181e:	f043 0310 	orr.w	r3, r3, #16
 8001822:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001826:	4b36      	ldr	r3, [pc, #216]	; (8001900 <MX_GPIO_Init+0x100>)
 8001828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001834:	4b32      	ldr	r3, [pc, #200]	; (8001900 <MX_GPIO_Init+0x100>)
 8001836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183a:	4a31      	ldr	r2, [pc, #196]	; (8001900 <MX_GPIO_Init+0x100>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001844:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <MX_GPIO_Init+0x100>)
 8001846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <MX_GPIO_Init+0x100>)
 8001854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001858:	4a29      	ldr	r2, [pc, #164]	; (8001900 <MX_GPIO_Init+0x100>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001862:	4b27      	ldr	r3, [pc, #156]	; (8001900 <MX_GPIO_Init+0x100>)
 8001864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <MX_GPIO_Init+0x100>)
 8001872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001876:	4a22      	ldr	r2, [pc, #136]	; (8001900 <MX_GPIO_Init+0x100>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001880:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <MX_GPIO_Init+0x100>)
 8001882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <MX_GPIO_Init+0x100>)
 8001890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001894:	4a1a      	ldr	r2, [pc, #104]	; (8001900 <MX_GPIO_Init+0x100>)
 8001896:	f043 0308 	orr.w	r3, r3, #8
 800189a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <MX_GPIO_Init+0x100>)
 80018a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018ac:	2320      	movs	r3, #32
 80018ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	4811      	ldr	r0, [pc, #68]	; (8001904 <MX_GPIO_Init+0x104>)
 80018c0:	f000 fc6a 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	480b      	ldr	r0, [pc, #44]	; (8001908 <MX_GPIO_Init+0x108>)
 80018da:	f000 fc5d 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	4806      	ldr	r0, [pc, #24]	; (800190c <MX_GPIO_Init+0x10c>)
 80018f4:	f000 fc50 	bl	8002198 <HAL_GPIO_Init>

}
 80018f8:	bf00      	nop
 80018fa:	3728      	adds	r7, #40	; 0x28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	58024400 	.word	0x58024400
 8001904:	58021000 	.word	0x58021000
 8001908:	58020800 	.word	0x58020800
 800190c:	58020400 	.word	0x58020400

08001910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001914:	b672      	cpsid	i
}
 8001916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001918:	e7fe      	b.n	8001918 <Error_Handler+0x8>
	...

0800191c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_MspInit+0x30>)
 8001924:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001928:	4a08      	ldr	r2, [pc, #32]	; (800194c <HAL_MspInit+0x30>)
 800192a:	f043 0302 	orr.w	r3, r3, #2
 800192e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_MspInit+0x30>)
 8001934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	58024400 	.word	0x58024400

08001950 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a16      	ldr	r2, [pc, #88]	; (80019b8 <HAL_TIM_Base_MspInit+0x68>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d10f      	bne.n	8001982 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_TIM_Base_MspInit+0x6c>)
 8001964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001968:	4a14      	ldr	r2, [pc, #80]	; (80019bc <HAL_TIM_Base_MspInit+0x6c>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001972:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_TIM_Base_MspInit+0x6c>)
 8001974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001980:	e013      	b.n	80019aa <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM8)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <HAL_TIM_Base_MspInit+0x70>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d10e      	bne.n	80019aa <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_TIM_Base_MspInit+0x6c>)
 800198e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <HAL_TIM_Base_MspInit+0x6c>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <HAL_TIM_Base_MspInit+0x6c>)
 800199e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40010000 	.word	0x40010000
 80019bc:	58024400 	.word	0x58024400
 80019c0:	40010400 	.word	0x40010400

080019c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a26      	ldr	r2, [pc, #152]	; (8001a7c <HAL_TIM_MspPostInit+0xb8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d120      	bne.n	8001a28 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e6:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <HAL_TIM_MspPostInit+0xbc>)
 80019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ec:	4a24      	ldr	r2, [pc, #144]	; (8001a80 <HAL_TIM_MspPostInit+0xbc>)
 80019ee:	f043 0310 	orr.w	r3, r3, #16
 80019f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f6:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <HAL_TIM_MspPostInit+0xbc>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001a04:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a16:	2301      	movs	r3, #1
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4818      	ldr	r0, [pc, #96]	; (8001a84 <HAL_TIM_MspPostInit+0xc0>)
 8001a22:	f000 fbb9 	bl	8002198 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001a26:	e024      	b.n	8001a72 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM8)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a16      	ldr	r2, [pc, #88]	; (8001a88 <HAL_TIM_MspPostInit+0xc4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d11f      	bne.n	8001a72 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <HAL_TIM_MspPostInit+0xbc>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	4a11      	ldr	r2, [pc, #68]	; (8001a80 <HAL_TIM_MspPostInit+0xbc>)
 8001a3a:	f043 0304 	orr.w	r3, r3, #4
 8001a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a42:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_TIM_MspPostInit+0xbc>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001a50:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a62:	2303      	movs	r3, #3
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4807      	ldr	r0, [pc, #28]	; (8001a8c <HAL_TIM_MspPostInit+0xc8>)
 8001a6e:	f000 fb93 	bl	8002198 <HAL_GPIO_Init>
}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	; 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	58024400 	.word	0x58024400
 8001a84:	58021000 	.word	0x58021000
 8001a88:	40010400 	.word	0x40010400
 8001a8c:	58020800 	.word	0x58020800

08001a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b0bc      	sub	sp, #240	; 0xf0
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa8:	f107 0320 	add.w	r3, r7, #32
 8001aac:	22bc      	movs	r2, #188	; 0xbc
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f005 fb95 	bl	80071e0 <memset>
  if(huart->Instance==USART1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a6d      	ldr	r2, [pc, #436]	; (8001c70 <HAL_UART_MspInit+0x1e0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d143      	bne.n	8001b48 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aca:	f107 0320 	add.w	r3, r7, #32
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f001 fd1c 	bl	800350c <HAL_RCCEx_PeriphCLKConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ada:	f7ff ff19 	bl	8001910 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ade:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ae4:	4a63      	ldr	r2, [pc, #396]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001ae6:	f043 0310 	orr.w	r3, r3, #16
 8001aea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001aee:	4b61      	ldr	r3, [pc, #388]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afc:	4b5d      	ldr	r3, [pc, #372]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b02:	4a5c      	ldr	r2, [pc, #368]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b0c:	4b59      	ldr	r3, [pc, #356]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001b34:	2304      	movs	r3, #4
 8001b36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b3e:	4619      	mov	r1, r3
 8001b40:	484d      	ldr	r0, [pc, #308]	; (8001c78 <HAL_UART_MspInit+0x1e8>)
 8001b42:	f000 fb29 	bl	8002198 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b46:	e08f      	b.n	8001c68 <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a4b      	ldr	r2, [pc, #300]	; (8001c7c <HAL_UART_MspInit+0x1ec>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d142      	bne.n	8001bd8 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b52:	2302      	movs	r3, #2
 8001b54:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b5c:	f107 0320 	add.w	r3, r7, #32
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 fcd3 	bl	800350c <HAL_RCCEx_PeriphCLKConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001b6c:	f7ff fed0 	bl	8001910 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b70:	4b40      	ldr	r3, [pc, #256]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001b72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b76:	4a3f      	ldr	r2, [pc, #252]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b80:	4b3c      	ldr	r3, [pc, #240]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b39      	ldr	r3, [pc, #228]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b94:	4a37      	ldr	r2, [pc, #220]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b9e:	4b35      	ldr	r3, [pc, #212]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bac:	230c      	movs	r3, #12
 8001bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bc4:	2307      	movs	r3, #7
 8001bc6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bce:	4619      	mov	r1, r3
 8001bd0:	482b      	ldr	r0, [pc, #172]	; (8001c80 <HAL_UART_MspInit+0x1f0>)
 8001bd2:	f000 fae1 	bl	8002198 <HAL_GPIO_Init>
}
 8001bd6:	e047      	b.n	8001c68 <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART3)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a29      	ldr	r2, [pc, #164]	; (8001c84 <HAL_UART_MspInit+0x1f4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d142      	bne.n	8001c68 <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001be2:	2302      	movs	r3, #2
 8001be4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bec:	f107 0320 	add.w	r3, r7, #32
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f001 fc8b 	bl	800350c <HAL_RCCEx_PeriphCLKConfig>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8001bfc:	f7ff fe88 	bl	8001910 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c00:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001c02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c06:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001c12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c24:	4a13      	ldr	r2, [pc, #76]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001c26:	f043 0308 	orr.w	r3, r3, #8
 8001c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c56:	2307      	movs	r3, #7
 8001c58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c60:	4619      	mov	r1, r3
 8001c62:	4809      	ldr	r0, [pc, #36]	; (8001c88 <HAL_UART_MspInit+0x1f8>)
 8001c64:	f000 fa98 	bl	8002198 <HAL_GPIO_Init>
}
 8001c68:	bf00      	nop
 8001c6a:	37f0      	adds	r7, #240	; 0xf0
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40011000 	.word	0x40011000
 8001c74:	58024400 	.word	0x58024400
 8001c78:	58020400 	.word	0x58020400
 8001c7c:	40004400 	.word	0x40004400
 8001c80:	58020000 	.word	0x58020000
 8001c84:	40004800 	.word	0x40004800
 8001c88:	58020c00 	.word	0x58020c00

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <NMI_Handler+0x4>

08001c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c96:	e7fe      	b.n	8001c96 <HardFault_Handler+0x4>

08001c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <MemManage_Handler+0x4>

08001c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca2:	e7fe      	b.n	8001ca2 <BusFault_Handler+0x4>

08001ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <UsageFault_Handler+0x4>

08001caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd8:	f000 f92a 	bl	8001f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <SystemInit+0xec>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cea:	4a38      	ldr	r2, [pc, #224]	; (8001dcc <SystemInit+0xec>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cf4:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <SystemInit+0xf0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	2b06      	cmp	r3, #6
 8001cfe:	d807      	bhi.n	8001d10 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d00:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <SystemInit+0xf0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 030f 	bic.w	r3, r3, #15
 8001d08:	4a31      	ldr	r2, [pc, #196]	; (8001dd0 <SystemInit+0xf0>)
 8001d0a:	f043 0307 	orr.w	r3, r3, #7
 8001d0e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d10:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <SystemInit+0xf4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a2f      	ldr	r2, [pc, #188]	; (8001dd4 <SystemInit+0xf4>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <SystemInit+0xf4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d22:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <SystemInit+0xf4>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	492b      	ldr	r1, [pc, #172]	; (8001dd4 <SystemInit+0xf4>)
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <SystemInit+0xf8>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d2e:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <SystemInit+0xf0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <SystemInit+0xf0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 030f 	bic.w	r3, r3, #15
 8001d42:	4a23      	ldr	r2, [pc, #140]	; (8001dd0 <SystemInit+0xf0>)
 8001d44:	f043 0307 	orr.w	r3, r3, #7
 8001d48:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d4a:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <SystemInit+0xf4>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d50:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <SystemInit+0xf4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d56:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <SystemInit+0xf4>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <SystemInit+0xf4>)
 8001d5e:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <SystemInit+0xfc>)
 8001d60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d62:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <SystemInit+0xf4>)
 8001d64:	4a1e      	ldr	r2, [pc, #120]	; (8001de0 <SystemInit+0x100>)
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d68:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <SystemInit+0xf4>)
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <SystemInit+0x104>)
 8001d6c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <SystemInit+0xf4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d74:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <SystemInit+0xf4>)
 8001d76:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <SystemInit+0x104>)
 8001d78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <SystemInit+0xf4>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <SystemInit+0xf4>)
 8001d82:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <SystemInit+0x104>)
 8001d84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <SystemInit+0xf4>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <SystemInit+0xf4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <SystemInit+0xf4>)
 8001d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d98:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <SystemInit+0xf4>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <SystemInit+0x108>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <SystemInit+0x10c>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001daa:	d202      	bcs.n	8001db2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001dac:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <SystemInit+0x110>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <SystemInit+0x114>)
 8001db4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001db8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <SystemInit+0xec>)
 8001dbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dc0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00
 8001dd0:	52002000 	.word	0x52002000
 8001dd4:	58024400 	.word	0x58024400
 8001dd8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ddc:	02020200 	.word	0x02020200
 8001de0:	01ff0000 	.word	0x01ff0000
 8001de4:	01010280 	.word	0x01010280
 8001de8:	5c001000 	.word	0x5c001000
 8001dec:	ffff0000 	.word	0xffff0000
 8001df0:	51008108 	.word	0x51008108
 8001df4:	52004000 	.word	0x52004000

08001df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e30 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001dfc:	f7ff ff70 	bl	8001ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e02:	e003      	b.n	8001e0c <LoopCopyDataInit>

08001e04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001e06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e0a:	3104      	adds	r1, #4

08001e0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e0c:	480a      	ldr	r0, [pc, #40]	; (8001e38 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001e10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e14:	d3f6      	bcc.n	8001e04 <CopyDataInit>
  ldr  r2, =_sbss
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001e18:	e002      	b.n	8001e20 <LoopFillZerobss>

08001e1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e1c:	f842 3b04 	str.w	r3, [r2], #4

08001e20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001e22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e24:	d3f9      	bcc.n	8001e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e26:	f005 f9b7 	bl	8007198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2a:	f7ff f9bf 	bl	80011ac <main>
  bx  lr    
 8001e2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e30:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001e34:	08007250 	.word	0x08007250
  ldr  r0, =_sdata
 8001e38:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001e3c:	24000038 	.word	0x24000038
  ldr  r2, =_sbss
 8001e40:	24000038 	.word	0x24000038
  ldr  r3, = _ebss
 8001e44:	240002c8 	.word	0x240002c8

08001e48 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC3_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e52:	2003      	movs	r0, #3
 8001e54:	f000 f96e 	bl	8002134 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e58:	f001 f982 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_Init+0x68>)
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	0a1b      	lsrs	r3, r3, #8
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	4913      	ldr	r1, [pc, #76]	; (8001eb8 <HAL_Init+0x6c>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	fa22 f303 	lsr.w	r3, r2, r3
 8001e74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_Init+0x68>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	4a0e      	ldr	r2, [pc, #56]	; (8001eb8 <HAL_Init+0x6c>)
 8001e80:	5cd3      	ldrb	r3, [r2, r3]
 8001e82:	f003 031f 	and.w	r3, r3, #31
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8c:	4a0b      	ldr	r2, [pc, #44]	; (8001ebc <HAL_Init+0x70>)
 8001e8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e90:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <HAL_Init+0x74>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e96:	2000      	movs	r0, #0
 8001e98:	f000 f814 	bl	8001ec4 <HAL_InitTick>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e002      	b.n	8001eac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea6:	f7ff fd39 	bl	800191c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	58024400 	.word	0x58024400
 8001eb8:	08007208 	.word	0x08007208
 8001ebc:	2400002c 	.word	0x2400002c
 8001ec0:	24000028 	.word	0x24000028

08001ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ecc:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <HAL_InitTick+0x60>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e021      	b.n	8001f1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ed8:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_InitTick+0x64>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_InitTick+0x60>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f945 	bl	800217e <HAL_SYSTICK_Config>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00e      	b.n	8001f1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b0f      	cmp	r3, #15
 8001f02:	d80a      	bhi.n	8001f1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f04:	2200      	movs	r2, #0
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	f000 f91d 	bl	800214a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f10:	4a06      	ldr	r2, [pc, #24]	; (8001f2c <HAL_InitTick+0x68>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e000      	b.n	8001f1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	24000034 	.word	0x24000034
 8001f28:	24000028 	.word	0x24000028
 8001f2c:	24000030 	.word	0x24000030

08001f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_IncTick+0x20>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_IncTick+0x24>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <HAL_IncTick+0x24>)
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	24000034 	.word	0x24000034
 8001f54:	240002c4 	.word	0x240002c4

08001f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <HAL_GetTick+0x14>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	240002c4 	.word	0x240002c4

08001f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f78:	f7ff ffee 	bl	8001f58 <HAL_GetTick>
 8001f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f88:	d005      	beq.n	8001f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <HAL_Delay+0x44>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f96:	bf00      	nop
 8001f98:	f7ff ffde 	bl	8001f58 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d8f7      	bhi.n	8001f98 <HAL_Delay+0x28>
  {
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	24000034 	.word	0x24000034

08001fb8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <HAL_GetREVID+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0c1b      	lsrs	r3, r3, #16
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	5c001000 	.word	0x5c001000

08001fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <__NVIC_SetPriorityGrouping+0x40>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fec:	4013      	ands	r3, r2
 8001fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <__NVIC_SetPriorityGrouping+0x44>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffe:	4a04      	ldr	r2, [pc, #16]	; (8002010 <__NVIC_SetPriorityGrouping+0x40>)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	60d3      	str	r3, [r2, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00
 8002014:	05fa0000 	.word	0x05fa0000

08002018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <__NVIC_GetPriorityGrouping+0x18>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	f003 0307 	and.w	r3, r3, #7
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002044:	2b00      	cmp	r3, #0
 8002046:	db0a      	blt.n	800205e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	490c      	ldr	r1, [pc, #48]	; (8002080 <__NVIC_SetPriority+0x4c>)
 800204e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	440b      	add	r3, r1
 8002058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800205c:	e00a      	b.n	8002074 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4908      	ldr	r1, [pc, #32]	; (8002084 <__NVIC_SetPriority+0x50>)
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	3b04      	subs	r3, #4
 800206c:	0112      	lsls	r2, r2, #4
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	440b      	add	r3, r1
 8002072:	761a      	strb	r2, [r3, #24]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f1c3 0307 	rsb	r3, r3, #7
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	bf28      	it	cs
 80020a6:	2304      	movcs	r3, #4
 80020a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3304      	adds	r3, #4
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d902      	bls.n	80020b8 <NVIC_EncodePriority+0x30>
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3b03      	subs	r3, #3
 80020b6:	e000      	b.n	80020ba <NVIC_EncodePriority+0x32>
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	401a      	ands	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	43d9      	mvns	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	4313      	orrs	r3, r2
         );
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3724      	adds	r7, #36	; 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002100:	d301      	bcc.n	8002106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002102:	2301      	movs	r3, #1
 8002104:	e00f      	b.n	8002126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002106:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <SysTick_Config+0x40>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210e:	210f      	movs	r1, #15
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	f7ff ff8e 	bl	8002034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <SysTick_Config+0x40>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211e:	4b04      	ldr	r3, [pc, #16]	; (8002130 <SysTick_Config+0x40>)
 8002120:	2207      	movs	r2, #7
 8002122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	e000e010 	.word	0xe000e010

08002134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ff47 	bl	8001fd0 <__NVIC_SetPriorityGrouping>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002158:	f7ff ff5e 	bl	8002018 <__NVIC_GetPriorityGrouping>
 800215c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	6978      	ldr	r0, [r7, #20]
 8002164:	f7ff ff90 	bl	8002088 <NVIC_EncodePriority>
 8002168:	4602      	mov	r2, r0
 800216a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff5f 	bl	8002034 <__NVIC_SetPriority>
}
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ffb2 	bl	80020f0 <SysTick_Config>
 800218c:	4603      	mov	r3, r0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	; 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80021a6:	4b89      	ldr	r3, [pc, #548]	; (80023cc <HAL_GPIO_Init+0x234>)
 80021a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021aa:	e194      	b.n	80024d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	2101      	movs	r1, #1
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8186 	beq.w	80024d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d005      	beq.n	80021dc <HAL_GPIO_Init+0x44>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d130      	bne.n	800223e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	2203      	movs	r2, #3
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002212:	2201      	movs	r2, #1
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	f003 0201 	and.w	r2, r3, #1
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b03      	cmp	r3, #3
 8002248:	d017      	beq.n	800227a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	2203      	movs	r2, #3
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d123      	bne.n	80022ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	08da      	lsrs	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3208      	adds	r2, #8
 800228e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	220f      	movs	r2, #15
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	08da      	lsrs	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3208      	adds	r2, #8
 80022c8:	69b9      	ldr	r1, [r7, #24]
 80022ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	2203      	movs	r2, #3
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0203 	and.w	r2, r3, #3
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 80e0 	beq.w	80024d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002310:	4b2f      	ldr	r3, [pc, #188]	; (80023d0 <HAL_GPIO_Init+0x238>)
 8002312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002316:	4a2e      	ldr	r2, [pc, #184]	; (80023d0 <HAL_GPIO_Init+0x238>)
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002320:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <HAL_GPIO_Init+0x238>)
 8002322:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800232e:	4a29      	ldr	r2, [pc, #164]	; (80023d4 <HAL_GPIO_Init+0x23c>)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	220f      	movs	r2, #15
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a20      	ldr	r2, [pc, #128]	; (80023d8 <HAL_GPIO_Init+0x240>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d052      	beq.n	8002400 <HAL_GPIO_Init+0x268>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a1f      	ldr	r2, [pc, #124]	; (80023dc <HAL_GPIO_Init+0x244>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d031      	beq.n	80023c6 <HAL_GPIO_Init+0x22e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a1e      	ldr	r2, [pc, #120]	; (80023e0 <HAL_GPIO_Init+0x248>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d02b      	beq.n	80023c2 <HAL_GPIO_Init+0x22a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <HAL_GPIO_Init+0x24c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d025      	beq.n	80023be <HAL_GPIO_Init+0x226>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a1c      	ldr	r2, [pc, #112]	; (80023e8 <HAL_GPIO_Init+0x250>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01f      	beq.n	80023ba <HAL_GPIO_Init+0x222>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a1b      	ldr	r2, [pc, #108]	; (80023ec <HAL_GPIO_Init+0x254>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d019      	beq.n	80023b6 <HAL_GPIO_Init+0x21e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a1a      	ldr	r2, [pc, #104]	; (80023f0 <HAL_GPIO_Init+0x258>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_GPIO_Init+0x21a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a19      	ldr	r2, [pc, #100]	; (80023f4 <HAL_GPIO_Init+0x25c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00d      	beq.n	80023ae <HAL_GPIO_Init+0x216>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a18      	ldr	r2, [pc, #96]	; (80023f8 <HAL_GPIO_Init+0x260>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <HAL_GPIO_Init+0x212>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a17      	ldr	r2, [pc, #92]	; (80023fc <HAL_GPIO_Init+0x264>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_GPIO_Init+0x20e>
 80023a2:	2309      	movs	r3, #9
 80023a4:	e02d      	b.n	8002402 <HAL_GPIO_Init+0x26a>
 80023a6:	230a      	movs	r3, #10
 80023a8:	e02b      	b.n	8002402 <HAL_GPIO_Init+0x26a>
 80023aa:	2308      	movs	r3, #8
 80023ac:	e029      	b.n	8002402 <HAL_GPIO_Init+0x26a>
 80023ae:	2307      	movs	r3, #7
 80023b0:	e027      	b.n	8002402 <HAL_GPIO_Init+0x26a>
 80023b2:	2306      	movs	r3, #6
 80023b4:	e025      	b.n	8002402 <HAL_GPIO_Init+0x26a>
 80023b6:	2305      	movs	r3, #5
 80023b8:	e023      	b.n	8002402 <HAL_GPIO_Init+0x26a>
 80023ba:	2304      	movs	r3, #4
 80023bc:	e021      	b.n	8002402 <HAL_GPIO_Init+0x26a>
 80023be:	2303      	movs	r3, #3
 80023c0:	e01f      	b.n	8002402 <HAL_GPIO_Init+0x26a>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e01d      	b.n	8002402 <HAL_GPIO_Init+0x26a>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e01b      	b.n	8002402 <HAL_GPIO_Init+0x26a>
 80023ca:	bf00      	nop
 80023cc:	58000080 	.word	0x58000080
 80023d0:	58024400 	.word	0x58024400
 80023d4:	58000400 	.word	0x58000400
 80023d8:	58020000 	.word	0x58020000
 80023dc:	58020400 	.word	0x58020400
 80023e0:	58020800 	.word	0x58020800
 80023e4:	58020c00 	.word	0x58020c00
 80023e8:	58021000 	.word	0x58021000
 80023ec:	58021400 	.word	0x58021400
 80023f0:	58021800 	.word	0x58021800
 80023f4:	58021c00 	.word	0x58021c00
 80023f8:	58022000 	.word	0x58022000
 80023fc:	58022400 	.word	0x58022400
 8002400:	2300      	movs	r3, #0
 8002402:	69fa      	ldr	r2, [r7, #28]
 8002404:	f002 0203 	and.w	r2, r2, #3
 8002408:	0092      	lsls	r2, r2, #2
 800240a:	4093      	lsls	r3, r2
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002412:	4938      	ldr	r1, [pc, #224]	; (80024f4 <HAL_GPIO_Init+0x35c>)
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	3302      	adds	r3, #2
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002446:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800244e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002474:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	3301      	adds	r3, #1
 80024d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f47f ae63 	bne.w	80021ac <HAL_GPIO_Init+0x14>
  }
}
 80024e6:	bf00      	nop
 80024e8:	bf00      	nop
 80024ea:	3724      	adds	r7, #36	; 0x24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	58000400 	.word	0x58000400

080024f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	887b      	ldrh	r3, [r7, #2]
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	e001      	b.n	800251a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002516:	2300      	movs	r3, #0
 8002518:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800251a:	7bfb      	ldrb	r3, [r7, #15]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_PWREx_ConfigSupply+0x70>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b04      	cmp	r3, #4
 800253a:	d00a      	beq.n	8002552 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800253c:	4b16      	ldr	r3, [pc, #88]	; (8002598 <HAL_PWREx_ConfigSupply+0x70>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	429a      	cmp	r2, r3
 8002548:	d001      	beq.n	800254e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e01f      	b.n	800258e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e01d      	b.n	800258e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_PWREx_ConfigSupply+0x70>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f023 0207 	bic.w	r2, r3, #7
 800255a:	490f      	ldr	r1, [pc, #60]	; (8002598 <HAL_PWREx_ConfigSupply+0x70>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4313      	orrs	r3, r2
 8002560:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002562:	f7ff fcf9 	bl	8001f58 <HAL_GetTick>
 8002566:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002568:	e009      	b.n	800257e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800256a:	f7ff fcf5 	bl	8001f58 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002578:	d901      	bls.n	800257e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e007      	b.n	800258e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_PWREx_ConfigSupply+0x70>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800258a:	d1ee      	bne.n	800256a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	58024800 	.word	0x58024800

0800259c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08c      	sub	sp, #48	; 0x30
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d102      	bne.n	80025b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	f000 bc1c 	b.w	8002de8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 8087 	beq.w	80026cc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025be:	4b9e      	ldr	r3, [pc, #632]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025c8:	4b9b      	ldr	r3, [pc, #620]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d0:	2b10      	cmp	r3, #16
 80025d2:	d007      	beq.n	80025e4 <HAL_RCC_OscConfig+0x48>
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	2b18      	cmp	r3, #24
 80025d8:	d110      	bne.n	80025fc <HAL_RCC_OscConfig+0x60>
 80025da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d10b      	bne.n	80025fc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	4b94      	ldr	r3, [pc, #592]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d06c      	beq.n	80026ca <HAL_RCC_OscConfig+0x12e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d168      	bne.n	80026ca <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e3f5      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002604:	d106      	bne.n	8002614 <HAL_RCC_OscConfig+0x78>
 8002606:	4b8c      	ldr	r3, [pc, #560]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a8b      	ldr	r2, [pc, #556]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 800260c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e02e      	b.n	8002672 <HAL_RCC_OscConfig+0xd6>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10c      	bne.n	8002636 <HAL_RCC_OscConfig+0x9a>
 800261c:	4b86      	ldr	r3, [pc, #536]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a85      	ldr	r2, [pc, #532]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	4b83      	ldr	r3, [pc, #524]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a82      	ldr	r2, [pc, #520]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 800262e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e01d      	b.n	8002672 <HAL_RCC_OscConfig+0xd6>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800263e:	d10c      	bne.n	800265a <HAL_RCC_OscConfig+0xbe>
 8002640:	4b7d      	ldr	r3, [pc, #500]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a7c      	ldr	r2, [pc, #496]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002646:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	4b7a      	ldr	r3, [pc, #488]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a79      	ldr	r2, [pc, #484]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	e00b      	b.n	8002672 <HAL_RCC_OscConfig+0xd6>
 800265a:	4b77      	ldr	r3, [pc, #476]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a76      	ldr	r2, [pc, #472]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b74      	ldr	r3, [pc, #464]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a73      	ldr	r2, [pc, #460]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 800266c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002670:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d013      	beq.n	80026a2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7ff fc6d 	bl	8001f58 <HAL_GetTick>
 800267e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002682:	f7ff fc69 	bl	8001f58 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b64      	cmp	r3, #100	; 0x64
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e3a9      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002694:	4b68      	ldr	r3, [pc, #416]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0xe6>
 80026a0:	e014      	b.n	80026cc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7ff fc59 	bl	8001f58 <HAL_GetTick>
 80026a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026aa:	f7ff fc55 	bl	8001f58 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b64      	cmp	r3, #100	; 0x64
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e395      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026bc:	4b5e      	ldr	r3, [pc, #376]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f0      	bne.n	80026aa <HAL_RCC_OscConfig+0x10e>
 80026c8:	e000      	b.n	80026cc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80ca 	beq.w	800286e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026da:	4b57      	ldr	r3, [pc, #348]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026e2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026e4:	4b54      	ldr	r3, [pc, #336]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d007      	beq.n	8002700 <HAL_RCC_OscConfig+0x164>
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	2b18      	cmp	r3, #24
 80026f4:	d156      	bne.n	80027a4 <HAL_RCC_OscConfig+0x208>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d151      	bne.n	80027a4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002700:	4b4d      	ldr	r3, [pc, #308]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_RCC_OscConfig+0x17c>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e367      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002718:	4b47      	ldr	r3, [pc, #284]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f023 0219 	bic.w	r2, r3, #25
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4944      	ldr	r1, [pc, #272]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800272a:	f7ff fc15 	bl	8001f58 <HAL_GetTick>
 800272e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002732:	f7ff fc11 	bl	8001f58 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e351      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002744:	4b3c      	ldr	r3, [pc, #240]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002750:	f7ff fc32 	bl	8001fb8 <HAL_GetREVID>
 8002754:	4603      	mov	r3, r0
 8002756:	f241 0203 	movw	r2, #4099	; 0x1003
 800275a:	4293      	cmp	r3, r2
 800275c:	d817      	bhi.n	800278e <HAL_RCC_OscConfig+0x1f2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b40      	cmp	r3, #64	; 0x40
 8002764:	d108      	bne.n	8002778 <HAL_RCC_OscConfig+0x1dc>
 8002766:	4b34      	ldr	r3, [pc, #208]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800276e:	4a32      	ldr	r2, [pc, #200]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002774:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002776:	e07a      	b.n	800286e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002778:	4b2f      	ldr	r3, [pc, #188]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	031b      	lsls	r3, r3, #12
 8002786:	492c      	ldr	r1, [pc, #176]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800278c:	e06f      	b.n	800286e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278e:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	061b      	lsls	r3, r3, #24
 800279c:	4926      	ldr	r1, [pc, #152]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a2:	e064      	b.n	800286e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d047      	beq.n	800283c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027ac:	4b22      	ldr	r3, [pc, #136]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f023 0219 	bic.w	r2, r3, #25
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	491f      	ldr	r1, [pc, #124]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7ff fbcb 	bl	8001f58 <HAL_GetTick>
 80027c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c6:	f7ff fbc7 	bl	8001f58 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e307      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027d8:	4b17      	ldr	r3, [pc, #92]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e4:	f7ff fbe8 	bl	8001fb8 <HAL_GetREVID>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d817      	bhi.n	8002822 <HAL_RCC_OscConfig+0x286>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b40      	cmp	r3, #64	; 0x40
 80027f8:	d108      	bne.n	800280c <HAL_RCC_OscConfig+0x270>
 80027fa:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002802:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002808:	6053      	str	r3, [r2, #4]
 800280a:	e030      	b.n	800286e <HAL_RCC_OscConfig+0x2d2>
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	031b      	lsls	r3, r3, #12
 800281a:	4907      	ldr	r1, [pc, #28]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
 8002820:	e025      	b.n	800286e <HAL_RCC_OscConfig+0x2d2>
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	061b      	lsls	r3, r3, #24
 8002830:	4901      	ldr	r1, [pc, #4]	; (8002838 <HAL_RCC_OscConfig+0x29c>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]
 8002836:	e01a      	b.n	800286e <HAL_RCC_OscConfig+0x2d2>
 8002838:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283c:	4b9e      	ldr	r3, [pc, #632]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a9d      	ldr	r2, [pc, #628]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7ff fb86 	bl	8001f58 <HAL_GetTick>
 800284c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002850:	f7ff fb82 	bl	8001f58 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e2c2      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002862:	4b95      	ldr	r3, [pc, #596]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 80a9 	beq.w	80029ce <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800287c:	4b8e      	ldr	r3, [pc, #568]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002884:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002886:	4b8c      	ldr	r3, [pc, #560]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b08      	cmp	r3, #8
 8002890:	d007      	beq.n	80028a2 <HAL_RCC_OscConfig+0x306>
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2b18      	cmp	r3, #24
 8002896:	d13a      	bne.n	800290e <HAL_RCC_OscConfig+0x372>
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d135      	bne.n	800290e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028a2:	4b85      	ldr	r3, [pc, #532]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d005      	beq.n	80028ba <HAL_RCC_OscConfig+0x31e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	2b80      	cmp	r3, #128	; 0x80
 80028b4:	d001      	beq.n	80028ba <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e296      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ba:	f7ff fb7d 	bl	8001fb8 <HAL_GetREVID>
 80028be:	4603      	mov	r3, r0
 80028c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d817      	bhi.n	80028f8 <HAL_RCC_OscConfig+0x35c>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d108      	bne.n	80028e2 <HAL_RCC_OscConfig+0x346>
 80028d0:	4b79      	ldr	r3, [pc, #484]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028d8:	4a77      	ldr	r2, [pc, #476]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 80028da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028de:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028e0:	e075      	b.n	80029ce <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028e2:	4b75      	ldr	r3, [pc, #468]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	069b      	lsls	r3, r3, #26
 80028f0:	4971      	ldr	r1, [pc, #452]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028f6:	e06a      	b.n	80029ce <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028f8:	4b6f      	ldr	r3, [pc, #444]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	061b      	lsls	r3, r3, #24
 8002906:	496c      	ldr	r1, [pc, #432]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002908:	4313      	orrs	r3, r2
 800290a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800290c:	e05f      	b.n	80029ce <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d042      	beq.n	800299c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002916:	4b68      	ldr	r3, [pc, #416]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a67      	ldr	r2, [pc, #412]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 800291c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002922:	f7ff fb19 	bl	8001f58 <HAL_GetTick>
 8002926:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800292a:	f7ff fb15 	bl	8001f58 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e255      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800293c:	4b5e      	ldr	r3, [pc, #376]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002948:	f7ff fb36 	bl	8001fb8 <HAL_GetREVID>
 800294c:	4603      	mov	r3, r0
 800294e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002952:	4293      	cmp	r3, r2
 8002954:	d817      	bhi.n	8002986 <HAL_RCC_OscConfig+0x3ea>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	2b20      	cmp	r3, #32
 800295c:	d108      	bne.n	8002970 <HAL_RCC_OscConfig+0x3d4>
 800295e:	4b56      	ldr	r3, [pc, #344]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002966:	4a54      	ldr	r2, [pc, #336]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002968:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800296c:	6053      	str	r3, [r2, #4]
 800296e:	e02e      	b.n	80029ce <HAL_RCC_OscConfig+0x432>
 8002970:	4b51      	ldr	r3, [pc, #324]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	069b      	lsls	r3, r3, #26
 800297e:	494e      	ldr	r1, [pc, #312]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]
 8002984:	e023      	b.n	80029ce <HAL_RCC_OscConfig+0x432>
 8002986:	4b4c      	ldr	r3, [pc, #304]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	061b      	lsls	r3, r3, #24
 8002994:	4948      	ldr	r1, [pc, #288]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002996:	4313      	orrs	r3, r2
 8002998:	60cb      	str	r3, [r1, #12]
 800299a:	e018      	b.n	80029ce <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800299c:	4b46      	ldr	r3, [pc, #280]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a45      	ldr	r2, [pc, #276]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 80029a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7ff fad6 	bl	8001f58 <HAL_GetTick>
 80029ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80029b0:	f7ff fad2 	bl	8001f58 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e212      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029c2:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d036      	beq.n	8002a48 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d019      	beq.n	8002a16 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e2:	4b35      	ldr	r3, [pc, #212]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 80029e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e6:	4a34      	ldr	r2, [pc, #208]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ee:	f7ff fab3 	bl	8001f58 <HAL_GetTick>
 80029f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f6:	f7ff faaf 	bl	8001f58 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e1ef      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a08:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x45a>
 8002a14:	e018      	b.n	8002a48 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a16:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1a:	4a27      	ldr	r2, [pc, #156]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a22:	f7ff fa99 	bl	8001f58 <HAL_GetTick>
 8002a26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a2a:	f7ff fa95 	bl	8001f58 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e1d5      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a3c:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f0      	bne.n	8002a2a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d039      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d019      	beq.n	8002a90 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a15      	ldr	r2, [pc, #84]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002a62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a68:	f7ff fa76 	bl	8001f58 <HAL_GetTick>
 8002a6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a70:	f7ff fa72 	bl	8001f58 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e1b2      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x4d4>
 8002a8e:	e01b      	b.n	8002ac8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a08      	ldr	r2, [pc, #32]	; (8002ab8 <HAL_RCC_OscConfig+0x51c>)
 8002a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a9c:	f7ff fa5c 	bl	8001f58 <HAL_GetTick>
 8002aa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002aa2:	e00b      	b.n	8002abc <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002aa4:	f7ff fa58 	bl	8001f58 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d904      	bls.n	8002abc <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e198      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
 8002ab6:	bf00      	nop
 8002ab8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002abc:	4ba3      	ldr	r3, [pc, #652]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1ed      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 8081 	beq.w	8002bd8 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ad6:	4b9e      	ldr	r3, [pc, #632]	; (8002d50 <HAL_RCC_OscConfig+0x7b4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a9d      	ldr	r2, [pc, #628]	; (8002d50 <HAL_RCC_OscConfig+0x7b4>)
 8002adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ae2:	f7ff fa39 	bl	8001f58 <HAL_GetTick>
 8002ae6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002aea:	f7ff fa35 	bl	8001f58 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b64      	cmp	r3, #100	; 0x64
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e175      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002afc:	4b94      	ldr	r3, [pc, #592]	; (8002d50 <HAL_RCC_OscConfig+0x7b4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCC_OscConfig+0x582>
 8002b10:	4b8e      	ldr	r3, [pc, #568]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4a8d      	ldr	r2, [pc, #564]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1c:	e02d      	b.n	8002b7a <HAL_RCC_OscConfig+0x5de>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCC_OscConfig+0x5a4>
 8002b26:	4b89      	ldr	r3, [pc, #548]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	4a88      	ldr	r2, [pc, #544]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002b2c:	f023 0301 	bic.w	r3, r3, #1
 8002b30:	6713      	str	r3, [r2, #112]	; 0x70
 8002b32:	4b86      	ldr	r3, [pc, #536]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	4a85      	ldr	r2, [pc, #532]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002b38:	f023 0304 	bic.w	r3, r3, #4
 8002b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3e:	e01c      	b.n	8002b7a <HAL_RCC_OscConfig+0x5de>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	d10c      	bne.n	8002b62 <HAL_RCC_OscConfig+0x5c6>
 8002b48:	4b80      	ldr	r3, [pc, #512]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4c:	4a7f      	ldr	r2, [pc, #508]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002b4e:	f043 0304 	orr.w	r3, r3, #4
 8002b52:	6713      	str	r3, [r2, #112]	; 0x70
 8002b54:	4b7d      	ldr	r3, [pc, #500]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	4a7c      	ldr	r2, [pc, #496]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b60:	e00b      	b.n	8002b7a <HAL_RCC_OscConfig+0x5de>
 8002b62:	4b7a      	ldr	r3, [pc, #488]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b66:	4a79      	ldr	r2, [pc, #484]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6e:	4b77      	ldr	r3, [pc, #476]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	4a76      	ldr	r2, [pc, #472]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002b74:	f023 0304 	bic.w	r3, r3, #4
 8002b78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d015      	beq.n	8002bae <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b82:	f7ff f9e9 	bl	8001f58 <HAL_GetTick>
 8002b86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7ff f9e5 	bl	8001f58 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e123      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ba0:	4b6a      	ldr	r3, [pc, #424]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0ee      	beq.n	8002b8a <HAL_RCC_OscConfig+0x5ee>
 8002bac:	e014      	b.n	8002bd8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bae:	f7ff f9d3 	bl	8001f58 <HAL_GetTick>
 8002bb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb6:	f7ff f9cf 	bl	8001f58 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e10d      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bcc:	4b5f      	ldr	r3, [pc, #380]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1ee      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8102 	beq.w	8002de6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002be2:	4b5a      	ldr	r3, [pc, #360]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bea:	2b18      	cmp	r3, #24
 8002bec:	f000 80bd 	beq.w	8002d6a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	f040 8095 	bne.w	8002d24 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfa:	4b54      	ldr	r3, [pc, #336]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a53      	ldr	r2, [pc, #332]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002c00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c06:	f7ff f9a7 	bl	8001f58 <HAL_GetTick>
 8002c0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c0e:	f7ff f9a3 	bl	8001f58 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e0e3      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c20:	4b4a      	ldr	r3, [pc, #296]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f0      	bne.n	8002c0e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c2c:	4b47      	ldr	r3, [pc, #284]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c30:	4b48      	ldr	r3, [pc, #288]	; (8002d54 <HAL_RCC_OscConfig+0x7b8>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c3c:	0112      	lsls	r2, r2, #4
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	4942      	ldr	r1, [pc, #264]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	628b      	str	r3, [r1, #40]	; 0x28
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c54:	3b01      	subs	r3, #1
 8002c56:	025b      	lsls	r3, r3, #9
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	3b01      	subs	r3, #1
 8002c62:	041b      	lsls	r3, r3, #16
 8002c64:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	061b      	lsls	r3, r3, #24
 8002c72:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c76:	4935      	ldr	r1, [pc, #212]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c7c:	4b33      	ldr	r3, [pc, #204]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	4a32      	ldr	r2, [pc, #200]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c88:	4b30      	ldr	r3, [pc, #192]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c8c:	4b32      	ldr	r3, [pc, #200]	; (8002d58 <HAL_RCC_OscConfig+0x7bc>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c94:	00d2      	lsls	r2, r2, #3
 8002c96:	492d      	ldr	r1, [pc, #180]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c9c:	4b2b      	ldr	r3, [pc, #172]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	f023 020c 	bic.w	r2, r3, #12
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	4928      	ldr	r1, [pc, #160]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002cae:	4b27      	ldr	r3, [pc, #156]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	f023 0202 	bic.w	r2, r3, #2
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	4924      	ldr	r1, [pc, #144]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cc0:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ccc:	4b1f      	ldr	r3, [pc, #124]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cd8:	4b1c      	ldr	r3, [pc, #112]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	4a1b      	ldr	r2, [pc, #108]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002ce4:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	4a18      	ldr	r2, [pc, #96]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf0:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7ff f92c 	bl	8001f58 <HAL_GetTick>
 8002d00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d04:	f7ff f928 	bl	8001f58 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e068      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d16:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x768>
 8002d22:	e060      	b.n	8002de6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d24:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a08      	ldr	r2, [pc, #32]	; (8002d4c <HAL_RCC_OscConfig+0x7b0>)
 8002d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7ff f912 	bl	8001f58 <HAL_GetTick>
 8002d34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d36:	e011      	b.n	8002d5c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d38:	f7ff f90e 	bl	8001f58 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d90a      	bls.n	8002d5c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e04e      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
 8002d4a:	bf00      	nop
 8002d4c:	58024400 	.word	0x58024400
 8002d50:	58024800 	.word	0x58024800
 8002d54:	fffffc0c 	.word	0xfffffc0c
 8002d58:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d5c:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_RCC_OscConfig+0x854>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e7      	bne.n	8002d38 <HAL_RCC_OscConfig+0x79c>
 8002d68:	e03d      	b.n	8002de6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d6a:	4b21      	ldr	r3, [pc, #132]	; (8002df0 <HAL_RCC_OscConfig+0x854>)
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d70:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <HAL_RCC_OscConfig+0x854>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d031      	beq.n	8002de2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f003 0203 	and.w	r2, r3, #3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d12a      	bne.n	8002de2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d122      	bne.n	8002de2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d11a      	bne.n	8002de2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	0a5b      	lsrs	r3, r3, #9
 8002db0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d111      	bne.n	8002de2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dca:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d108      	bne.n	8002de2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	0e1b      	lsrs	r3, r3, #24
 8002dd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ddc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d001      	beq.n	8002de6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3730      	adds	r7, #48	; 0x30
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	58024400 	.word	0x58024400

08002df4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e19c      	b.n	8003142 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e08:	4b8a      	ldr	r3, [pc, #552]	; (8003034 <HAL_RCC_ClockConfig+0x240>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d910      	bls.n	8002e38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e16:	4b87      	ldr	r3, [pc, #540]	; (8003034 <HAL_RCC_ClockConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 020f 	bic.w	r2, r3, #15
 8002e1e:	4985      	ldr	r1, [pc, #532]	; (8003034 <HAL_RCC_ClockConfig+0x240>)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b83      	ldr	r3, [pc, #524]	; (8003034 <HAL_RCC_ClockConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e184      	b.n	8003142 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d010      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	4b7b      	ldr	r3, [pc, #492]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d908      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e54:	4b78      	ldr	r3, [pc, #480]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	4975      	ldr	r1, [pc, #468]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d010      	beq.n	8002e94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	4b70      	ldr	r3, [pc, #448]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d908      	bls.n	8002e94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e82:	4b6d      	ldr	r3, [pc, #436]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	496a      	ldr	r1, [pc, #424]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d010      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699a      	ldr	r2, [r3, #24]
 8002ea4:	4b64      	ldr	r3, [pc, #400]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d908      	bls.n	8002ec2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002eb0:	4b61      	ldr	r3, [pc, #388]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	495e      	ldr	r1, [pc, #376]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d010      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69da      	ldr	r2, [r3, #28]
 8002ed2:	4b59      	ldr	r3, [pc, #356]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d908      	bls.n	8002ef0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002ede:	4b56      	ldr	r3, [pc, #344]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	4953      	ldr	r1, [pc, #332]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d010      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	4b4d      	ldr	r3, [pc, #308]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d908      	bls.n	8002f1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f0c:	4b4a      	ldr	r3, [pc, #296]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f023 020f 	bic.w	r2, r3, #15
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4947      	ldr	r1, [pc, #284]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d055      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f2a:	4b43      	ldr	r3, [pc, #268]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	4940      	ldr	r1, [pc, #256]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f44:	4b3c      	ldr	r3, [pc, #240]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d121      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0f6      	b.n	8003142 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d107      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f5c:	4b36      	ldr	r3, [pc, #216]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d115      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0ea      	b.n	8003142 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d107      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f74:	4b30      	ldr	r3, [pc, #192]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d109      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0de      	b.n	8003142 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f84:	4b2c      	ldr	r3, [pc, #176]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0d6      	b.n	8003142 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f94:	4b28      	ldr	r3, [pc, #160]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f023 0207 	bic.w	r2, r3, #7
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4925      	ldr	r1, [pc, #148]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa6:	f7fe ffd7 	bl	8001f58 <HAL_GetTick>
 8002faa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fae:	f7fe ffd3 	bl	8001f58 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e0be      	b.n	8003142 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc4:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d1eb      	bne.n	8002fae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d010      	beq.n	8003004 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d208      	bcs.n	8003004 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff2:	4b11      	ldr	r3, [pc, #68]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f023 020f 	bic.w	r2, r3, #15
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	490e      	ldr	r1, [pc, #56]	; (8003038 <HAL_RCC_ClockConfig+0x244>)
 8003000:	4313      	orrs	r3, r2
 8003002:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_RCC_ClockConfig+0x240>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d214      	bcs.n	800303c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003012:	4b08      	ldr	r3, [pc, #32]	; (8003034 <HAL_RCC_ClockConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 020f 	bic.w	r2, r3, #15
 800301a:	4906      	ldr	r1, [pc, #24]	; (8003034 <HAL_RCC_ClockConfig+0x240>)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003022:	4b04      	ldr	r3, [pc, #16]	; (8003034 <HAL_RCC_ClockConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d005      	beq.n	800303c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e086      	b.n	8003142 <HAL_RCC_ClockConfig+0x34e>
 8003034:	52002000 	.word	0x52002000
 8003038:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d010      	beq.n	800306a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	4b3f      	ldr	r3, [pc, #252]	; (800314c <HAL_RCC_ClockConfig+0x358>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003054:	429a      	cmp	r2, r3
 8003056:	d208      	bcs.n	800306a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003058:	4b3c      	ldr	r3, [pc, #240]	; (800314c <HAL_RCC_ClockConfig+0x358>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	4939      	ldr	r1, [pc, #228]	; (800314c <HAL_RCC_ClockConfig+0x358>)
 8003066:	4313      	orrs	r3, r2
 8003068:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d010      	beq.n	8003098 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	4b34      	ldr	r3, [pc, #208]	; (800314c <HAL_RCC_ClockConfig+0x358>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003082:	429a      	cmp	r2, r3
 8003084:	d208      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003086:	4b31      	ldr	r3, [pc, #196]	; (800314c <HAL_RCC_ClockConfig+0x358>)
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	492e      	ldr	r1, [pc, #184]	; (800314c <HAL_RCC_ClockConfig+0x358>)
 8003094:	4313      	orrs	r3, r2
 8003096:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d010      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699a      	ldr	r2, [r3, #24]
 80030a8:	4b28      	ldr	r3, [pc, #160]	; (800314c <HAL_RCC_ClockConfig+0x358>)
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d208      	bcs.n	80030c6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030b4:	4b25      	ldr	r3, [pc, #148]	; (800314c <HAL_RCC_ClockConfig+0x358>)
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	4922      	ldr	r1, [pc, #136]	; (800314c <HAL_RCC_ClockConfig+0x358>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d010      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	4b1d      	ldr	r3, [pc, #116]	; (800314c <HAL_RCC_ClockConfig+0x358>)
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030de:	429a      	cmp	r2, r3
 80030e0:	d208      	bcs.n	80030f4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80030e2:	4b1a      	ldr	r3, [pc, #104]	; (800314c <HAL_RCC_ClockConfig+0x358>)
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	4917      	ldr	r1, [pc, #92]	; (800314c <HAL_RCC_ClockConfig+0x358>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030f4:	f000 f834 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 80030f8:	4602      	mov	r2, r0
 80030fa:	4b14      	ldr	r3, [pc, #80]	; (800314c <HAL_RCC_ClockConfig+0x358>)
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	0a1b      	lsrs	r3, r3, #8
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	4912      	ldr	r1, [pc, #72]	; (8003150 <HAL_RCC_ClockConfig+0x35c>)
 8003106:	5ccb      	ldrb	r3, [r1, r3]
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
 8003110:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <HAL_RCC_ClockConfig+0x358>)
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	4a0d      	ldr	r2, [pc, #52]	; (8003150 <HAL_RCC_ClockConfig+0x35c>)
 800311c:	5cd3      	ldrb	r3, [r2, r3]
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
 8003128:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <HAL_RCC_ClockConfig+0x360>)
 800312a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800312c:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <HAL_RCC_ClockConfig+0x364>)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_RCC_ClockConfig+0x368>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe fec4 	bl	8001ec4 <HAL_InitTick>
 800313c:	4603      	mov	r3, r0
 800313e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003140:	7bfb      	ldrb	r3, [r7, #15]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	58024400 	.word	0x58024400
 8003150:	08007208 	.word	0x08007208
 8003154:	2400002c 	.word	0x2400002c
 8003158:	24000028 	.word	0x24000028
 800315c:	24000030 	.word	0x24000030

08003160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	; 0x24
 8003164:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003166:	4bb3      	ldr	r3, [pc, #716]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800316e:	2b18      	cmp	r3, #24
 8003170:	f200 8155 	bhi.w	800341e <HAL_RCC_GetSysClockFreq+0x2be>
 8003174:	a201      	add	r2, pc, #4	; (adr r2, 800317c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317a:	bf00      	nop
 800317c:	080031e1 	.word	0x080031e1
 8003180:	0800341f 	.word	0x0800341f
 8003184:	0800341f 	.word	0x0800341f
 8003188:	0800341f 	.word	0x0800341f
 800318c:	0800341f 	.word	0x0800341f
 8003190:	0800341f 	.word	0x0800341f
 8003194:	0800341f 	.word	0x0800341f
 8003198:	0800341f 	.word	0x0800341f
 800319c:	08003207 	.word	0x08003207
 80031a0:	0800341f 	.word	0x0800341f
 80031a4:	0800341f 	.word	0x0800341f
 80031a8:	0800341f 	.word	0x0800341f
 80031ac:	0800341f 	.word	0x0800341f
 80031b0:	0800341f 	.word	0x0800341f
 80031b4:	0800341f 	.word	0x0800341f
 80031b8:	0800341f 	.word	0x0800341f
 80031bc:	0800320d 	.word	0x0800320d
 80031c0:	0800341f 	.word	0x0800341f
 80031c4:	0800341f 	.word	0x0800341f
 80031c8:	0800341f 	.word	0x0800341f
 80031cc:	0800341f 	.word	0x0800341f
 80031d0:	0800341f 	.word	0x0800341f
 80031d4:	0800341f 	.word	0x0800341f
 80031d8:	0800341f 	.word	0x0800341f
 80031dc:	08003213 	.word	0x08003213
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031e0:	4b94      	ldr	r3, [pc, #592]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0320 	and.w	r3, r3, #32
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d009      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031ec:	4b91      	ldr	r3, [pc, #580]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	08db      	lsrs	r3, r3, #3
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	4a90      	ldr	r2, [pc, #576]	; (8003438 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
 80031fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80031fe:	e111      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003200:	4b8d      	ldr	r3, [pc, #564]	; (8003438 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003202:	61bb      	str	r3, [r7, #24]
    break;
 8003204:	e10e      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003206:	4b8d      	ldr	r3, [pc, #564]	; (800343c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003208:	61bb      	str	r3, [r7, #24]
    break;
 800320a:	e10b      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800320c:	4b8c      	ldr	r3, [pc, #560]	; (8003440 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800320e:	61bb      	str	r3, [r7, #24]
    break;
 8003210:	e108      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003212:	4b88      	ldr	r3, [pc, #544]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800321c:	4b85      	ldr	r3, [pc, #532]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003226:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003228:	4b82      	ldr	r3, [pc, #520]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003232:	4b80      	ldr	r3, [pc, #512]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003236:	08db      	lsrs	r3, r3, #3
 8003238:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	fb02 f303 	mul.w	r3, r2, r3
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80e1 	beq.w	8003418 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b02      	cmp	r3, #2
 800325a:	f000 8083 	beq.w	8003364 <HAL_RCC_GetSysClockFreq+0x204>
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b02      	cmp	r3, #2
 8003262:	f200 80a1 	bhi.w	80033a8 <HAL_RCC_GetSysClockFreq+0x248>
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0x114>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d056      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003272:	e099      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003274:	4b6f      	ldr	r3, [pc, #444]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d02d      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003280:	4b6c      	ldr	r3, [pc, #432]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	08db      	lsrs	r3, r3, #3
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	4a6b      	ldr	r2, [pc, #428]	; (8003438 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
 8003290:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	ee07 3a90 	vmov	s15, r3
 8003298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	ee07 3a90 	vmov	s15, r3
 80032a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032aa:	4b62      	ldr	r3, [pc, #392]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b2:	ee07 3a90 	vmov	s15, r3
 80032b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80032be:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003444 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80032da:	e087      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003448 <HAL_RCC_GetSysClockFreq+0x2e8>
 80032ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ee:	4b51      	ldr	r3, [pc, #324]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f6:	ee07 3a90 	vmov	s15, r3
 80032fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003302:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003444 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800330a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800330e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800331a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800331e:	e065      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	ee07 3a90 	vmov	s15, r3
 8003326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800344c <HAL_RCC_GetSysClockFreq+0x2ec>
 800332e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003332:	4b40      	ldr	r3, [pc, #256]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003342:	ed97 6a02 	vldr	s12, [r7, #8]
 8003346:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003444 <HAL_RCC_GetSysClockFreq+0x2e4>
 800334a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800334e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800335a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003362:	e043      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	ee07 3a90 	vmov	s15, r3
 800336a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003450 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003376:	4b2f      	ldr	r3, [pc, #188]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337e:	ee07 3a90 	vmov	s15, r3
 8003382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003386:	ed97 6a02 	vldr	s12, [r7, #8]
 800338a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003444 <HAL_RCC_GetSysClockFreq+0x2e4>
 800338e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800339a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800339e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033a6:	e021      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800344c <HAL_RCC_GetSysClockFreq+0x2ec>
 80033b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ba:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c2:	ee07 3a90 	vmov	s15, r3
 80033c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003444 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033ea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80033ec:	4b11      	ldr	r3, [pc, #68]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	0a5b      	lsrs	r3, r3, #9
 80033f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033f6:	3301      	adds	r3, #1
 80033f8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	ee07 3a90 	vmov	s15, r3
 8003400:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003404:	edd7 6a07 	vldr	s13, [r7, #28]
 8003408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800340c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003410:	ee17 3a90 	vmov	r3, s15
 8003414:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003416:	e005      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	61bb      	str	r3, [r7, #24]
    break;
 800341c:	e002      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800341e:	4b07      	ldr	r3, [pc, #28]	; (800343c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003420:	61bb      	str	r3, [r7, #24]
    break;
 8003422:	bf00      	nop
  }

  return sysclockfreq;
 8003424:	69bb      	ldr	r3, [r7, #24]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3724      	adds	r7, #36	; 0x24
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	58024400 	.word	0x58024400
 8003438:	03d09000 	.word	0x03d09000
 800343c:	003d0900 	.word	0x003d0900
 8003440:	017d7840 	.word	0x017d7840
 8003444:	46000000 	.word	0x46000000
 8003448:	4c742400 	.word	0x4c742400
 800344c:	4a742400 	.word	0x4a742400
 8003450:	4bbebc20 	.word	0x4bbebc20

08003454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800345a:	f7ff fe81 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 800345e:	4602      	mov	r2, r0
 8003460:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	0a1b      	lsrs	r3, r3, #8
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	490f      	ldr	r1, [pc, #60]	; (80034a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800346c:	5ccb      	ldrb	r3, [r1, r3]
 800346e:	f003 031f 	and.w	r3, r3, #31
 8003472:	fa22 f303 	lsr.w	r3, r2, r3
 8003476:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	4a09      	ldr	r2, [pc, #36]	; (80034a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003482:	5cd3      	ldrb	r3, [r2, r3]
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	fa22 f303 	lsr.w	r3, r2, r3
 800348e:	4a07      	ldr	r2, [pc, #28]	; (80034ac <HAL_RCC_GetHCLKFreq+0x58>)
 8003490:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003492:	4a07      	ldr	r2, [pc, #28]	; (80034b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003498:	4b04      	ldr	r3, [pc, #16]	; (80034ac <HAL_RCC_GetHCLKFreq+0x58>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	58024400 	.word	0x58024400
 80034a8:	08007208 	.word	0x08007208
 80034ac:	2400002c 	.word	0x2400002c
 80034b0:	24000028 	.word	0x24000028

080034b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80034b8:	f7ff ffcc 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	091b      	lsrs	r3, r3, #4
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4904      	ldr	r1, [pc, #16]	; (80034dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	58024400 	.word	0x58024400
 80034dc:	08007208 	.word	0x08007208

080034e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80034e4:	f7ff ffb6 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	0a1b      	lsrs	r3, r3, #8
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	4904      	ldr	r1, [pc, #16]	; (8003508 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034f6:	5ccb      	ldrb	r3, [r1, r3]
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	58024400 	.word	0x58024400
 8003508:	08007208 	.word	0x08007208

0800350c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003514:	2300      	movs	r3, #0
 8003516:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003518:	2300      	movs	r3, #0
 800351a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d03f      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800352c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003530:	d02a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003532:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003536:	d824      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003538:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800353c:	d018      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800353e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003542:	d81e      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800354c:	d007      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800354e:	e018      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003550:	4bab      	ldr	r3, [pc, #684]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	4aaa      	ldr	r2, [pc, #680]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800355c:	e015      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	2102      	movs	r1, #2
 8003564:	4618      	mov	r0, r3
 8003566:	f001 f9cf 	bl	8004908 <RCCEx_PLL2_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800356e:	e00c      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3324      	adds	r3, #36	; 0x24
 8003574:	2102      	movs	r1, #2
 8003576:	4618      	mov	r0, r3
 8003578:	f001 fa78 	bl	8004a6c <RCCEx_PLL3_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003580:	e003      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	75fb      	strb	r3, [r7, #23]
      break;
 8003586:	e000      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800358a:	7dfb      	ldrb	r3, [r7, #23]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d109      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003590:	4b9b      	ldr	r3, [pc, #620]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800359c:	4998      	ldr	r1, [pc, #608]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	650b      	str	r3, [r1, #80]	; 0x50
 80035a2:	e001      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a4:	7dfb      	ldrb	r3, [r7, #23]
 80035a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d03d      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d826      	bhi.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80035bc:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	080035d9 	.word	0x080035d9
 80035c8:	080035e7 	.word	0x080035e7
 80035cc:	080035f9 	.word	0x080035f9
 80035d0:	08003611 	.word	0x08003611
 80035d4:	08003611 	.word	0x08003611
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d8:	4b89      	ldr	r3, [pc, #548]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	4a88      	ldr	r2, [pc, #544]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035e4:	e015      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3304      	adds	r3, #4
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 f98b 	bl	8004908 <RCCEx_PLL2_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035f6:	e00c      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3324      	adds	r3, #36	; 0x24
 80035fc:	2100      	movs	r1, #0
 80035fe:	4618      	mov	r0, r3
 8003600:	f001 fa34 	bl	8004a6c <RCCEx_PLL3_Config>
 8003604:	4603      	mov	r3, r0
 8003606:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003608:	e003      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	75fb      	strb	r3, [r7, #23]
      break;
 800360e:	e000      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003612:	7dfb      	ldrb	r3, [r7, #23]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003618:	4b79      	ldr	r3, [pc, #484]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800361a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361c:	f023 0207 	bic.w	r2, r3, #7
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003624:	4976      	ldr	r1, [pc, #472]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003626:	4313      	orrs	r3, r2
 8003628:	650b      	str	r3, [r1, #80]	; 0x50
 800362a:	e001      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362c:	7dfb      	ldrb	r3, [r7, #23]
 800362e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003638:	2b00      	cmp	r3, #0
 800363a:	d042      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003644:	d02b      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364a:	d825      	bhi.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800364c:	2bc0      	cmp	r3, #192	; 0xc0
 800364e:	d028      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003650:	2bc0      	cmp	r3, #192	; 0xc0
 8003652:	d821      	bhi.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003654:	2b80      	cmp	r3, #128	; 0x80
 8003656:	d016      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d81d      	bhi.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d007      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003664:	e018      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003666:	4b66      	ldr	r3, [pc, #408]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	4a65      	ldr	r2, [pc, #404]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800366c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003670:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003672:	e017      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3304      	adds	r3, #4
 8003678:	2100      	movs	r1, #0
 800367a:	4618      	mov	r0, r3
 800367c:	f001 f944 	bl	8004908 <RCCEx_PLL2_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003684:	e00e      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3324      	adds	r3, #36	; 0x24
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f001 f9ed 	bl	8004a6c <RCCEx_PLL3_Config>
 8003692:	4603      	mov	r3, r0
 8003694:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003696:	e005      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	75fb      	strb	r3, [r7, #23]
      break;
 800369c:	e002      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800369e:	bf00      	nop
 80036a0:	e000      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80036a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80036aa:	4b55      	ldr	r3, [pc, #340]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b6:	4952      	ldr	r1, [pc, #328]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	650b      	str	r3, [r1, #80]	; 0x50
 80036bc:	e001      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036be:	7dfb      	ldrb	r3, [r7, #23]
 80036c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d049      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036d8:	d030      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80036da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036de:	d82a      	bhi.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036e4:	d02c      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80036e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036ea:	d824      	bhi.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f0:	d018      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80036f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f6:	d81e      	bhi.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80036fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003700:	d007      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003702:	e018      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003704:	4b3e      	ldr	r3, [pc, #248]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	4a3d      	ldr	r2, [pc, #244]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800370a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003710:	e017      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f001 f8f5 	bl	8004908 <RCCEx_PLL2_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003722:	e00e      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3324      	adds	r3, #36	; 0x24
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f001 f99e 	bl	8004a6c <RCCEx_PLL3_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003734:	e005      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	75fb      	strb	r3, [r7, #23]
      break;
 800373a:	e002      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800373c:	bf00      	nop
 800373e:	e000      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003742:	7dfb      	ldrb	r3, [r7, #23]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003748:	4b2d      	ldr	r3, [pc, #180]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800374a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003756:	492a      	ldr	r1, [pc, #168]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003758:	4313      	orrs	r3, r2
 800375a:	658b      	str	r3, [r1, #88]	; 0x58
 800375c:	e001      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800376a:	2b00      	cmp	r3, #0
 800376c:	d04c      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003774:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003778:	d030      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800377a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800377e:	d82a      	bhi.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003780:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003784:	d02c      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003786:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800378a:	d824      	bhi.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800378c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003790:	d018      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003792:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003796:	d81e      	bhi.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800379c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037a0:	d007      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80037a2:	e018      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a4:	4b16      	ldr	r3, [pc, #88]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	4a15      	ldr	r2, [pc, #84]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037b0:	e017      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3304      	adds	r3, #4
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 f8a5 	bl	8004908 <RCCEx_PLL2_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037c2:	e00e      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3324      	adds	r3, #36	; 0x24
 80037c8:	2100      	movs	r1, #0
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 f94e 	bl	8004a6c <RCCEx_PLL3_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037d4:	e005      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	75fb      	strb	r3, [r7, #23]
      break;
 80037da:	e002      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80037dc:	bf00      	nop
 80037de:	e000      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80037e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037e2:	7dfb      	ldrb	r3, [r7, #23]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10d      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037f6:	4902      	ldr	r1, [pc, #8]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	658b      	str	r3, [r1, #88]	; 0x58
 80037fc:	e004      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80037fe:	bf00      	nop
 8003800:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d032      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003818:	2b30      	cmp	r3, #48	; 0x30
 800381a:	d01c      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800381c:	2b30      	cmp	r3, #48	; 0x30
 800381e:	d817      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003820:	2b20      	cmp	r3, #32
 8003822:	d00c      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003824:	2b20      	cmp	r3, #32
 8003826:	d813      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d016      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800382c:	2b10      	cmp	r3, #16
 800382e:	d10f      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003830:	4baf      	ldr	r3, [pc, #700]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	4aae      	ldr	r2, [pc, #696]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800383c:	e00e      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3304      	adds	r3, #4
 8003842:	2102      	movs	r1, #2
 8003844:	4618      	mov	r0, r3
 8003846:	f001 f85f 	bl	8004908 <RCCEx_PLL2_Config>
 800384a:	4603      	mov	r3, r0
 800384c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800384e:	e005      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	75fb      	strb	r3, [r7, #23]
      break;
 8003854:	e002      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800385a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800385c:	7dfb      	ldrb	r3, [r7, #23]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003862:	4ba3      	ldr	r3, [pc, #652]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003866:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386e:	49a0      	ldr	r1, [pc, #640]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003870:	4313      	orrs	r3, r2
 8003872:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003874:	e001      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d047      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800388e:	d030      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003890:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003894:	d82a      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003896:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800389a:	d02c      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800389c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038a0:	d824      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80038a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a6:	d018      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80038a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ac:	d81e      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80038b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b6:	d007      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80038b8:	e018      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ba:	4b8d      	ldr	r3, [pc, #564]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	4a8c      	ldr	r2, [pc, #560]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038c6:	e017      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3304      	adds	r3, #4
 80038cc:	2100      	movs	r1, #0
 80038ce:	4618      	mov	r0, r3
 80038d0:	f001 f81a 	bl	8004908 <RCCEx_PLL2_Config>
 80038d4:	4603      	mov	r3, r0
 80038d6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038d8:	e00e      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3324      	adds	r3, #36	; 0x24
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f001 f8c3 	bl	8004a6c <RCCEx_PLL3_Config>
 80038e6:	4603      	mov	r3, r0
 80038e8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038ea:	e005      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	75fb      	strb	r3, [r7, #23]
      break;
 80038f0:	e002      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80038f2:	bf00      	nop
 80038f4:	e000      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80038f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038fe:	4b7c      	ldr	r3, [pc, #496]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003902:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390a:	4979      	ldr	r1, [pc, #484]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800390c:	4313      	orrs	r3, r2
 800390e:	650b      	str	r3, [r1, #80]	; 0x50
 8003910:	e001      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003912:	7dfb      	ldrb	r3, [r7, #23]
 8003914:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d049      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003926:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800392a:	d02e      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800392c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003930:	d828      	bhi.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003932:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003936:	d02a      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003938:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800393c:	d822      	bhi.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800393e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003942:	d026      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003944:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003948:	d81c      	bhi.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800394a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800394e:	d010      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003954:	d816      	bhi.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d01d      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800395a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395e:	d111      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3304      	adds	r3, #4
 8003964:	2101      	movs	r1, #1
 8003966:	4618      	mov	r0, r3
 8003968:	f000 ffce 	bl	8004908 <RCCEx_PLL2_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003970:	e012      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3324      	adds	r3, #36	; 0x24
 8003976:	2101      	movs	r1, #1
 8003978:	4618      	mov	r0, r3
 800397a:	f001 f877 	bl	8004a6c <RCCEx_PLL3_Config>
 800397e:	4603      	mov	r3, r0
 8003980:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003982:	e009      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	75fb      	strb	r3, [r7, #23]
      break;
 8003988:	e006      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800398a:	bf00      	nop
 800398c:	e004      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800398e:	bf00      	nop
 8003990:	e002      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003992:	bf00      	nop
 8003994:	e000      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003996:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800399e:	4b54      	ldr	r3, [pc, #336]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039aa:	4951      	ldr	r1, [pc, #324]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	650b      	str	r3, [r1, #80]	; 0x50
 80039b0:	e001      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
 80039b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d04b      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039cc:	d02e      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80039ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039d2:	d828      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80039d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d8:	d02a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80039da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039de:	d822      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80039e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039e4:	d026      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80039e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039ea:	d81c      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80039ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f0:	d010      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80039f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f6:	d816      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d01d      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80039fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a00:	d111      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	2101      	movs	r1, #1
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 ff7d 	bl	8004908 <RCCEx_PLL2_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a12:	e012      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3324      	adds	r3, #36	; 0x24
 8003a18:	2101      	movs	r1, #1
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f001 f826 	bl	8004a6c <RCCEx_PLL3_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a24:	e009      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	75fb      	strb	r3, [r7, #23]
      break;
 8003a2a:	e006      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003a2c:	bf00      	nop
 8003a2e:	e004      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003a30:	bf00      	nop
 8003a32:	e002      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003a34:	bf00      	nop
 8003a36:	e000      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10a      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a40:	4b2b      	ldr	r3, [pc, #172]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a44:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a4e:	4928      	ldr	r1, [pc, #160]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	658b      	str	r3, [r1, #88]	; 0x58
 8003a54:	e001      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a56:	7dfb      	ldrb	r3, [r7, #23]
 8003a58:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d02f      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a6e:	d00e      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a74:	d814      	bhi.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d015      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a7e:	d10f      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	4a1a      	ldr	r2, [pc, #104]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a8c:	e00c      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3304      	adds	r3, #4
 8003a92:	2101      	movs	r1, #1
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 ff37 	bl	8004908 <RCCEx_PLL2_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a9e:	e003      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8003aa4:	e000      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003aa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003aae:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aba:	490d      	ldr	r1, [pc, #52]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	650b      	str	r3, [r1, #80]	; 0x50
 8003ac0:	e001      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac2:	7dfb      	ldrb	r3, [r7, #23]
 8003ac4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d033      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d81c      	bhi.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003ada:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003b1b 	.word	0x08003b1b
 8003ae4:	08003af5 	.word	0x08003af5
 8003ae8:	08003b03 	.word	0x08003b03
 8003aec:	08003b1b 	.word	0x08003b1b
 8003af0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af4:	4bb8      	ldr	r3, [pc, #736]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	4ab7      	ldr	r2, [pc, #732]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003afe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b00:	e00c      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3304      	adds	r3, #4
 8003b06:	2102      	movs	r1, #2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fefd 	bl	8004908 <RCCEx_PLL2_Config>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b12:	e003      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	75fb      	strb	r3, [r7, #23]
      break;
 8003b18:	e000      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003b1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b22:	4bad      	ldr	r3, [pc, #692]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b26:	f023 0203 	bic.w	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	49aa      	ldr	r1, [pc, #680]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b34:	e001      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b36:	7dfb      	ldrb	r3, [r7, #23]
 8003b38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 8086 	beq.w	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b48:	4ba4      	ldr	r3, [pc, #656]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4aa3      	ldr	r2, [pc, #652]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b54:	f7fe fa00 	bl	8001f58 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b5a:	e009      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5c:	f7fe f9fc 	bl	8001f58 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d902      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	75fb      	strb	r3, [r7, #23]
        break;
 8003b6e:	e005      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b70:	4b9a      	ldr	r3, [pc, #616]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0ef      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003b7c:	7dfb      	ldrb	r3, [r7, #23]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d166      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b82:	4b95      	ldr	r3, [pc, #596]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b8c:	4053      	eors	r3, r2
 8003b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d013      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b96:	4b90      	ldr	r3, [pc, #576]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ba0:	4b8d      	ldr	r3, [pc, #564]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba4:	4a8c      	ldr	r2, [pc, #560]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003baa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bac:	4b8a      	ldr	r3, [pc, #552]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb0:	4a89      	ldr	r2, [pc, #548]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bb8:	4a87      	ldr	r2, [pc, #540]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc8:	d115      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bca:	f7fe f9c5 	bl	8001f58 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bd0:	e00b      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd2:	f7fe f9c1 	bl	8001f58 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d902      	bls.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	75fb      	strb	r3, [r7, #23]
            break;
 8003be8:	e005      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bea:	4b7b      	ldr	r3, [pc, #492]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0ed      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d126      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c0a:	d10d      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003c0c:	4b72      	ldr	r3, [pc, #456]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c1a:	0919      	lsrs	r1, r3, #4
 8003c1c:	4b70      	ldr	r3, [pc, #448]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003c1e:	400b      	ands	r3, r1
 8003c20:	496d      	ldr	r1, [pc, #436]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	610b      	str	r3, [r1, #16]
 8003c26:	e005      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003c28:	4b6b      	ldr	r3, [pc, #428]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	4a6a      	ldr	r2, [pc, #424]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c32:	6113      	str	r3, [r2, #16]
 8003c34:	4b68      	ldr	r3, [pc, #416]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c42:	4965      	ldr	r1, [pc, #404]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	670b      	str	r3, [r1, #112]	; 0x70
 8003c48:	e004      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
 8003c4c:	75bb      	strb	r3, [r7, #22]
 8003c4e:	e001      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
 8003c52:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d07e      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c64:	2b28      	cmp	r3, #40	; 0x28
 8003c66:	d867      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003c68:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003d3f 	.word	0x08003d3f
 8003c74:	08003d39 	.word	0x08003d39
 8003c78:	08003d39 	.word	0x08003d39
 8003c7c:	08003d39 	.word	0x08003d39
 8003c80:	08003d39 	.word	0x08003d39
 8003c84:	08003d39 	.word	0x08003d39
 8003c88:	08003d39 	.word	0x08003d39
 8003c8c:	08003d39 	.word	0x08003d39
 8003c90:	08003d15 	.word	0x08003d15
 8003c94:	08003d39 	.word	0x08003d39
 8003c98:	08003d39 	.word	0x08003d39
 8003c9c:	08003d39 	.word	0x08003d39
 8003ca0:	08003d39 	.word	0x08003d39
 8003ca4:	08003d39 	.word	0x08003d39
 8003ca8:	08003d39 	.word	0x08003d39
 8003cac:	08003d39 	.word	0x08003d39
 8003cb0:	08003d27 	.word	0x08003d27
 8003cb4:	08003d39 	.word	0x08003d39
 8003cb8:	08003d39 	.word	0x08003d39
 8003cbc:	08003d39 	.word	0x08003d39
 8003cc0:	08003d39 	.word	0x08003d39
 8003cc4:	08003d39 	.word	0x08003d39
 8003cc8:	08003d39 	.word	0x08003d39
 8003ccc:	08003d39 	.word	0x08003d39
 8003cd0:	08003d3f 	.word	0x08003d3f
 8003cd4:	08003d39 	.word	0x08003d39
 8003cd8:	08003d39 	.word	0x08003d39
 8003cdc:	08003d39 	.word	0x08003d39
 8003ce0:	08003d39 	.word	0x08003d39
 8003ce4:	08003d39 	.word	0x08003d39
 8003ce8:	08003d39 	.word	0x08003d39
 8003cec:	08003d39 	.word	0x08003d39
 8003cf0:	08003d3f 	.word	0x08003d3f
 8003cf4:	08003d39 	.word	0x08003d39
 8003cf8:	08003d39 	.word	0x08003d39
 8003cfc:	08003d39 	.word	0x08003d39
 8003d00:	08003d39 	.word	0x08003d39
 8003d04:	08003d39 	.word	0x08003d39
 8003d08:	08003d39 	.word	0x08003d39
 8003d0c:	08003d39 	.word	0x08003d39
 8003d10:	08003d3f 	.word	0x08003d3f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	2101      	movs	r1, #1
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fdf4 	bl	8004908 <RCCEx_PLL2_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d24:	e00c      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3324      	adds	r3, #36	; 0x24
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fe9d 	bl	8004a6c <RCCEx_PLL3_Config>
 8003d32:	4603      	mov	r3, r0
 8003d34:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d36:	e003      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d3c:	e000      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d52:	4921      	ldr	r1, [pc, #132]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	654b      	str	r3, [r1, #84]	; 0x54
 8003d58:	e001      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
 8003d5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d03e      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6e:	2b05      	cmp	r3, #5
 8003d70:	d820      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003d72:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d78:	08003dbb 	.word	0x08003dbb
 8003d7c:	08003d91 	.word	0x08003d91
 8003d80:	08003da3 	.word	0x08003da3
 8003d84:	08003dbb 	.word	0x08003dbb
 8003d88:	08003dbb 	.word	0x08003dbb
 8003d8c:	08003dbb 	.word	0x08003dbb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3304      	adds	r3, #4
 8003d94:	2101      	movs	r1, #1
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fdb6 	bl	8004908 <RCCEx_PLL2_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003da0:	e00c      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3324      	adds	r3, #36	; 0x24
 8003da6:	2101      	movs	r1, #1
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fe5f 	bl	8004a6c <RCCEx_PLL3_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003db2:	e003      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	75fb      	strb	r3, [r7, #23]
      break;
 8003db8:	e000      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d110      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc6:	f023 0207 	bic.w	r2, r3, #7
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dce:	4902      	ldr	r1, [pc, #8]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	654b      	str	r3, [r1, #84]	; 0x54
 8003dd4:	e008      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003dd6:	bf00      	nop
 8003dd8:	58024400 	.word	0x58024400
 8003ddc:	58024800 	.word	0x58024800
 8003de0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de4:	7dfb      	ldrb	r3, [r7, #23]
 8003de6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d039      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfa:	2b05      	cmp	r3, #5
 8003dfc:	d820      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003dfe:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e04:	08003e47 	.word	0x08003e47
 8003e08:	08003e1d 	.word	0x08003e1d
 8003e0c:	08003e2f 	.word	0x08003e2f
 8003e10:	08003e47 	.word	0x08003e47
 8003e14:	08003e47 	.word	0x08003e47
 8003e18:	08003e47 	.word	0x08003e47
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	2101      	movs	r1, #1
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fd70 	bl	8004908 <RCCEx_PLL2_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e2c:	e00c      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3324      	adds	r3, #36	; 0x24
 8003e32:	2101      	movs	r1, #1
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fe19 	bl	8004a6c <RCCEx_PLL3_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e3e:	e003      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	75fb      	strb	r3, [r7, #23]
      break;
 8003e44:	e000      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e4e:	4bb7      	ldr	r3, [pc, #732]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e52:	f023 0207 	bic.w	r2, r3, #7
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5c:	49b3      	ldr	r1, [pc, #716]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	658b      	str	r3, [r1, #88]	; 0x58
 8003e62:	e001      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d04b      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e7e:	d02e      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e84:	d828      	bhi.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8a:	d02a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e90:	d822      	bhi.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003e92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e96:	d026      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003e98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e9c:	d81c      	bhi.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea2:	d010      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea8:	d816      	bhi.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d01d      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eb2:	d111      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fd24 	bl	8004908 <RCCEx_PLL2_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ec4:	e012      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3324      	adds	r3, #36	; 0x24
 8003eca:	2102      	movs	r1, #2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fdcd 	bl	8004a6c <RCCEx_PLL3_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ed6:	e009      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	75fb      	strb	r3, [r7, #23]
      break;
 8003edc:	e006      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003ede:	bf00      	nop
 8003ee0:	e004      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003ee2:	bf00      	nop
 8003ee4:	e002      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003ee6:	bf00      	nop
 8003ee8:	e000      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eec:	7dfb      	ldrb	r3, [r7, #23]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ef2:	4b8e      	ldr	r3, [pc, #568]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f00:	498a      	ldr	r1, [pc, #552]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	654b      	str	r3, [r1, #84]	; 0x54
 8003f06:	e001      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
 8003f0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d04b      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f22:	d02e      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003f24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f28:	d828      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2e:	d02a      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f34:	d822      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f3a:	d026      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003f3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f40:	d81c      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f46:	d010      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4c:	d816      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d01d      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f56:	d111      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fcd2 	bl	8004908 <RCCEx_PLL2_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f68:	e012      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3324      	adds	r3, #36	; 0x24
 8003f6e:	2102      	movs	r1, #2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fd7b 	bl	8004a6c <RCCEx_PLL3_Config>
 8003f76:	4603      	mov	r3, r0
 8003f78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f7a:	e009      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f80:	e006      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003f82:	bf00      	nop
 8003f84:	e004      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003f86:	bf00      	nop
 8003f88:	e002      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003f8a:	bf00      	nop
 8003f8c:	e000      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f90:	7dfb      	ldrb	r3, [r7, #23]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10a      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f96:	4b65      	ldr	r3, [pc, #404]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fa4:	4961      	ldr	r1, [pc, #388]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	658b      	str	r3, [r1, #88]	; 0x58
 8003faa:	e001      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
 8003fae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d04b      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fc2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fc6:	d02e      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003fc8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fcc:	d828      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd2:	d02a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd8:	d822      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003fda:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fde:	d026      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003fe0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fe4:	d81c      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fea:	d010      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003fec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ff0:	d816      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d01d      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffa:	d111      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3304      	adds	r3, #4
 8004000:	2100      	movs	r1, #0
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fc80 	bl	8004908 <RCCEx_PLL2_Config>
 8004008:	4603      	mov	r3, r0
 800400a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800400c:	e012      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3324      	adds	r3, #36	; 0x24
 8004012:	2102      	movs	r1, #2
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fd29 	bl	8004a6c <RCCEx_PLL3_Config>
 800401a:	4603      	mov	r3, r0
 800401c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800401e:	e009      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	75fb      	strb	r3, [r7, #23]
      break;
 8004024:	e006      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004026:	bf00      	nop
 8004028:	e004      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800402a:	bf00      	nop
 800402c:	e002      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800402e:	bf00      	nop
 8004030:	e000      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800403a:	4b3c      	ldr	r3, [pc, #240]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004048:	4938      	ldr	r1, [pc, #224]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800404a:	4313      	orrs	r3, r2
 800404c:	658b      	str	r3, [r1, #88]	; 0x58
 800404e:	e001      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004050:	7dfb      	ldrb	r3, [r7, #23]
 8004052:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406a:	d10a      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3324      	adds	r3, #36	; 0x24
 8004070:	2102      	movs	r1, #2
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fcfa 	bl	8004a6c <RCCEx_PLL3_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004082:	4b2a      	ldr	r3, [pc, #168]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004090:	4926      	ldr	r1, [pc, #152]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004092:	4313      	orrs	r3, r2
 8004094:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0310 	and.w	r3, r3, #16
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d01a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ac:	d10a      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3324      	adds	r3, #36	; 0x24
 80040b2:	2102      	movs	r1, #2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fcd9 	bl	8004a6c <RCCEx_PLL3_Config>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d2:	4916      	ldr	r1, [pc, #88]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d036      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ee:	d01f      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80040f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040f4:	d817      	bhi.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80040fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040fe:	d009      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004100:	e011      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3304      	adds	r3, #4
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f000 fbfd 	bl	8004908 <RCCEx_PLL2_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004112:	e00e      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3324      	adds	r3, #36	; 0x24
 8004118:	2102      	movs	r1, #2
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fca6 	bl	8004a6c <RCCEx_PLL3_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004124:	e005      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	75fb      	strb	r3, [r7, #23]
      break;
 800412a:	e002      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800412c:	58024400 	.word	0x58024400
      break;
 8004130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004138:	4b93      	ldr	r3, [pc, #588]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800413a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004146:	4990      	ldr	r1, [pc, #576]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004148:	4313      	orrs	r3, r2
 800414a:	658b      	str	r3, [r1, #88]	; 0x58
 800414c:	e001      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414e:	7dfb      	ldrb	r3, [r7, #23]
 8004150:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d033      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004164:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004168:	d01c      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800416a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800416e:	d816      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004174:	d003      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800417a:	d007      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800417c:	e00f      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800417e:	4b82      	ldr	r3, [pc, #520]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	4a81      	ldr	r2, [pc, #516]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004188:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800418a:	e00c      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3324      	adds	r3, #36	; 0x24
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fc6a 	bl	8004a6c <RCCEx_PLL3_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800419c:	e003      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	75fb      	strb	r3, [r7, #23]
      break;
 80041a2:	e000      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80041a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041ac:	4b76      	ldr	r3, [pc, #472]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ba:	4973      	ldr	r1, [pc, #460]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	654b      	str	r3, [r1, #84]	; 0x54
 80041c0:	e001      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
 80041c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d029      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80041da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041de:	d007      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80041e0:	e00f      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e2:	4b69      	ldr	r3, [pc, #420]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	4a68      	ldr	r2, [pc, #416]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041ee:	e00b      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	2102      	movs	r1, #2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fb86 	bl	8004908 <RCCEx_PLL2_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004200:	e002      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	75fb      	strb	r3, [r7, #23]
      break;
 8004206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800420e:	4b5e      	ldr	r3, [pc, #376]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004212:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421a:	495b      	ldr	r1, [pc, #364]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800421c:	4313      	orrs	r3, r2
 800421e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004220:	e001      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004222:	7dfb      	ldrb	r3, [r7, #23]
 8004224:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3324      	adds	r3, #36	; 0x24
 8004236:	2102      	movs	r1, #2
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fc17 	bl	8004a6c <RCCEx_PLL3_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d030      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800425c:	d017      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800425e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004262:	d811      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004268:	d013      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800426a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800426e:	d80b      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d010      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004278:	d106      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800427a:	4b43      	ldr	r3, [pc, #268]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	4a42      	ldr	r2, [pc, #264]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004284:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004286:	e007      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	75fb      	strb	r3, [r7, #23]
      break;
 800428c:	e004      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800428e:	bf00      	nop
 8004290:	e002      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004292:	bf00      	nop
 8004294:	e000      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004298:	7dfb      	ldrb	r3, [r7, #23]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d109      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800429e:	4b3a      	ldr	r3, [pc, #232]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042aa:	4937      	ldr	r1, [pc, #220]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	654b      	str	r3, [r1, #84]	; 0x54
 80042b0:	e001      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
 80042b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d008      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042c2:	4b31      	ldr	r3, [pc, #196]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	492e      	ldr	r1, [pc, #184]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d009      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80042e0:	4b29      	ldr	r3, [pc, #164]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042ee:	4926      	ldr	r1, [pc, #152]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004300:	4b21      	ldr	r3, [pc, #132]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004304:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800430c:	491e      	ldr	r1, [pc, #120]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800430e:	4313      	orrs	r3, r2
 8004310:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00d      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800431e:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	4a19      	ldr	r2, [pc, #100]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004324:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004328:	6113      	str	r3, [r2, #16]
 800432a:	4b17      	ldr	r3, [pc, #92]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004334:	4914      	ldr	r1, [pc, #80]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004336:	4313      	orrs	r3, r2
 8004338:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	da08      	bge.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004342:	4b11      	ldr	r3, [pc, #68]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004346:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434e:	490e      	ldr	r1, [pc, #56]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004350:	4313      	orrs	r3, r2
 8004352:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d009      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004360:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004364:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	4906      	ldr	r1, [pc, #24]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004370:	4313      	orrs	r3, r2
 8004372:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004374:	7dbb      	ldrb	r3, [r7, #22]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	58024400 	.word	0x58024400

0800438c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004390:	f7ff f860 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8004394:	4602      	mov	r2, r0
 8004396:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	091b      	lsrs	r3, r3, #4
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	4904      	ldr	r1, [pc, #16]	; (80043b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80043a2:	5ccb      	ldrb	r3, [r1, r3]
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	58024400 	.word	0x58024400
 80043b4:	08007208 	.word	0x08007208

080043b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b089      	sub	sp, #36	; 0x24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043c0:	4ba1      	ldr	r3, [pc, #644]	; (8004648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	f003 0303 	and.w	r3, r3, #3
 80043c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80043ca:	4b9f      	ldr	r3, [pc, #636]	; (8004648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	0b1b      	lsrs	r3, r3, #12
 80043d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80043d6:	4b9c      	ldr	r3, [pc, #624]	; (8004648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043da:	091b      	lsrs	r3, r3, #4
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80043e2:	4b99      	ldr	r3, [pc, #612]	; (8004648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e6:	08db      	lsrs	r3, r3, #3
 80043e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	ee07 3a90 	vmov	s15, r3
 80043f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 8111 	beq.w	8004628 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b02      	cmp	r3, #2
 800440a:	f000 8083 	beq.w	8004514 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	2b02      	cmp	r3, #2
 8004412:	f200 80a1 	bhi.w	8004558 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d056      	beq.n	80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004422:	e099      	b.n	8004558 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004424:	4b88      	ldr	r3, [pc, #544]	; (8004648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b00      	cmp	r3, #0
 800442e:	d02d      	beq.n	800448c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004430:	4b85      	ldr	r3, [pc, #532]	; (8004648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	08db      	lsrs	r3, r3, #3
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	4a84      	ldr	r2, [pc, #528]	; (800464c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
 8004440:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	ee07 3a90 	vmov	s15, r3
 8004448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800445a:	4b7b      	ldr	r3, [pc, #492]	; (8004648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446a:	ed97 6a03 	vldr	s12, [r7, #12]
 800446e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004650 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800447a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800447e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004486:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800448a:	e087      	b.n	800459c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	ee07 3a90 	vmov	s15, r3
 8004492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004496:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004654 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800449a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800449e:	4b6a      	ldr	r3, [pc, #424]	; (8004648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80044b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004650 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044ce:	e065      	b.n	800459c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044e2:	4b59      	ldr	r3, [pc, #356]	; (8004648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004650 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800450a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800450e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004512:	e043      	b.n	800459c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004526:	4b48      	ldr	r3, [pc, #288]	; (8004648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004536:	ed97 6a03 	vldr	s12, [r7, #12]
 800453a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004650 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800453e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800454a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800454e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004552:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004556:	e021      	b.n	800459c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	ee07 3a90 	vmov	s15, r3
 800455e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004562:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800456a:	4b37      	ldr	r3, [pc, #220]	; (8004648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800457a:	ed97 6a03 	vldr	s12, [r7, #12]
 800457e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004650 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800458a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800458e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004596:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800459a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800459c:	4b2a      	ldr	r3, [pc, #168]	; (8004648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	0a5b      	lsrs	r3, r3, #9
 80045a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045c2:	ee17 2a90 	vmov	r2, s15
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80045ca:	4b1f      	ldr	r3, [pc, #124]	; (8004648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	0c1b      	lsrs	r3, r3, #16
 80045d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80045e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045f0:	ee17 2a90 	vmov	r2, s15
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80045f8:	4b13      	ldr	r3, [pc, #76]	; (8004648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	0e1b      	lsrs	r3, r3, #24
 80045fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800460e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004612:	edd7 6a07 	vldr	s13, [r7, #28]
 8004616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800461a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800461e:	ee17 2a90 	vmov	r2, s15
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004626:	e008      	b.n	800463a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	609a      	str	r2, [r3, #8]
}
 800463a:	bf00      	nop
 800463c:	3724      	adds	r7, #36	; 0x24
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	58024400 	.word	0x58024400
 800464c:	03d09000 	.word	0x03d09000
 8004650:	46000000 	.word	0x46000000
 8004654:	4c742400 	.word	0x4c742400
 8004658:	4a742400 	.word	0x4a742400
 800465c:	4bbebc20 	.word	0x4bbebc20

08004660 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004660:	b480      	push	{r7}
 8004662:	b089      	sub	sp, #36	; 0x24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004668:	4ba1      	ldr	r3, [pc, #644]	; (80048f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	f003 0303 	and.w	r3, r3, #3
 8004670:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004672:	4b9f      	ldr	r3, [pc, #636]	; (80048f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	0d1b      	lsrs	r3, r3, #20
 8004678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800467c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800467e:	4b9c      	ldr	r3, [pc, #624]	; (80048f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	0a1b      	lsrs	r3, r3, #8
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800468a:	4b99      	ldr	r3, [pc, #612]	; (80048f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468e:	08db      	lsrs	r3, r3, #3
 8004690:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	fb02 f303 	mul.w	r3, r2, r3
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 8111 	beq.w	80048d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	f000 8083 	beq.w	80047bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	f200 80a1 	bhi.w	8004800 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d056      	beq.n	8004778 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80046ca:	e099      	b.n	8004800 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046cc:	4b88      	ldr	r3, [pc, #544]	; (80048f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d02d      	beq.n	8004734 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046d8:	4b85      	ldr	r3, [pc, #532]	; (80048f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	08db      	lsrs	r3, r3, #3
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	4a84      	ldr	r2, [pc, #528]	; (80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80046e4:	fa22 f303 	lsr.w	r3, r2, r3
 80046e8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	ee07 3a90 	vmov	s15, r3
 80046f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004702:	4b7b      	ldr	r3, [pc, #492]	; (80048f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004712:	ed97 6a03 	vldr	s12, [r7, #12]
 8004716:	eddf 5a78 	vldr	s11, [pc, #480]	; 80048f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800471a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800471e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800472a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004732:	e087      	b.n	8004844 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80048fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004746:	4b6a      	ldr	r3, [pc, #424]	; (80048f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004756:	ed97 6a03 	vldr	s12, [r7, #12]
 800475a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80048f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800475e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800476a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800476e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004772:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004776:	e065      	b.n	8004844 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004782:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478a:	4b59      	ldr	r3, [pc, #356]	; (80048f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479a:	ed97 6a03 	vldr	s12, [r7, #12]
 800479e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80048f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047ba:	e043      	b.n	8004844 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80047ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ce:	4b48      	ldr	r3, [pc, #288]	; (80048f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047de:	ed97 6a03 	vldr	s12, [r7, #12]
 80047e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80048f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047fe:	e021      	b.n	8004844 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800480e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004812:	4b37      	ldr	r3, [pc, #220]	; (80048f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004822:	ed97 6a03 	vldr	s12, [r7, #12]
 8004826:	eddf 5a34 	vldr	s11, [pc, #208]	; 80048f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800482a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004842:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004844:	4b2a      	ldr	r3, [pc, #168]	; (80048f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	0a5b      	lsrs	r3, r3, #9
 800484a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004856:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800485a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800485e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800486a:	ee17 2a90 	vmov	r2, s15
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004872:	4b1f      	ldr	r3, [pc, #124]	; (80048f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	0c1b      	lsrs	r3, r3, #16
 8004878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800487c:	ee07 3a90 	vmov	s15, r3
 8004880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004884:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004888:	ee37 7a87 	vadd.f32	s14, s15, s14
 800488c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004898:	ee17 2a90 	vmov	r2, s15
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80048a0:	4b13      	ldr	r3, [pc, #76]	; (80048f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	0e1b      	lsrs	r3, r3, #24
 80048a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80048be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048c6:	ee17 2a90 	vmov	r2, s15
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80048ce:	e008      	b.n	80048e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	609a      	str	r2, [r3, #8]
}
 80048e2:	bf00      	nop
 80048e4:	3724      	adds	r7, #36	; 0x24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	58024400 	.word	0x58024400
 80048f4:	03d09000 	.word	0x03d09000
 80048f8:	46000000 	.word	0x46000000
 80048fc:	4c742400 	.word	0x4c742400
 8004900:	4a742400 	.word	0x4a742400
 8004904:	4bbebc20 	.word	0x4bbebc20

08004908 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004916:	4b53      	ldr	r3, [pc, #332]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 8004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b03      	cmp	r3, #3
 8004920:	d101      	bne.n	8004926 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e099      	b.n	8004a5a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004926:	4b4f      	ldr	r3, [pc, #316]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a4e      	ldr	r2, [pc, #312]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 800492c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004932:	f7fd fb11 	bl	8001f58 <HAL_GetTick>
 8004936:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004938:	e008      	b.n	800494c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800493a:	f7fd fb0d 	bl	8001f58 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e086      	b.n	8004a5a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800494c:	4b45      	ldr	r3, [pc, #276]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1f0      	bne.n	800493a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004958:	4b42      	ldr	r3, [pc, #264]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 800495a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	031b      	lsls	r3, r3, #12
 8004966:	493f      	ldr	r1, [pc, #252]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 8004968:	4313      	orrs	r3, r2
 800496a:	628b      	str	r3, [r1, #40]	; 0x28
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	3b01      	subs	r3, #1
 8004972:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	3b01      	subs	r3, #1
 800497c:	025b      	lsls	r3, r3, #9
 800497e:	b29b      	uxth	r3, r3
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	3b01      	subs	r3, #1
 8004988:	041b      	lsls	r3, r3, #16
 800498a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	3b01      	subs	r3, #1
 8004996:	061b      	lsls	r3, r3, #24
 8004998:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800499c:	4931      	ldr	r1, [pc, #196]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80049a2:	4b30      	ldr	r3, [pc, #192]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	492d      	ldr	r1, [pc, #180]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80049b4:	4b2b      	ldr	r3, [pc, #172]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	f023 0220 	bic.w	r2, r3, #32
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	4928      	ldr	r1, [pc, #160]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80049c6:	4b27      	ldr	r3, [pc, #156]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	4a26      	ldr	r2, [pc, #152]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 80049cc:	f023 0310 	bic.w	r3, r3, #16
 80049d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80049d2:	4b24      	ldr	r3, [pc, #144]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 80049d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049d6:	4b24      	ldr	r3, [pc, #144]	; (8004a68 <RCCEx_PLL2_Config+0x160>)
 80049d8:	4013      	ands	r3, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	69d2      	ldr	r2, [r2, #28]
 80049de:	00d2      	lsls	r2, r2, #3
 80049e0:	4920      	ldr	r1, [pc, #128]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80049e6:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	4a1e      	ldr	r2, [pc, #120]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 80049ec:	f043 0310 	orr.w	r3, r3, #16
 80049f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d106      	bne.n	8004a06 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80049f8:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	4a19      	ldr	r2, [pc, #100]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 80049fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a04:	e00f      	b.n	8004a26 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d106      	bne.n	8004a1a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004a0c:	4b15      	ldr	r3, [pc, #84]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	4a14      	ldr	r2, [pc, #80]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 8004a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a18:	e005      	b.n	8004a26 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a1a:	4b12      	ldr	r3, [pc, #72]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	4a11      	ldr	r2, [pc, #68]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 8004a20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a26:	4b0f      	ldr	r3, [pc, #60]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a0e      	ldr	r2, [pc, #56]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 8004a2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a32:	f7fd fa91 	bl	8001f58 <HAL_GetTick>
 8004a36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a38:	e008      	b.n	8004a4c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004a3a:	f7fd fa8d 	bl	8001f58 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e006      	b.n	8004a5a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a4c:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <RCCEx_PLL2_Config+0x15c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	58024400 	.word	0x58024400
 8004a68:	ffff0007 	.word	0xffff0007

08004a6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a7a:	4b53      	ldr	r3, [pc, #332]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d101      	bne.n	8004a8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e099      	b.n	8004bbe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a8a:	4b4f      	ldr	r3, [pc, #316]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a4e      	ldr	r2, [pc, #312]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a96:	f7fd fa5f 	bl	8001f58 <HAL_GetTick>
 8004a9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a9c:	e008      	b.n	8004ab0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a9e:	f7fd fa5b 	bl	8001f58 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e086      	b.n	8004bbe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ab0:	4b45      	ldr	r3, [pc, #276]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1f0      	bne.n	8004a9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004abc:	4b42      	ldr	r3, [pc, #264]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	051b      	lsls	r3, r3, #20
 8004aca:	493f      	ldr	r1, [pc, #252]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	628b      	str	r3, [r1, #40]	; 0x28
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	025b      	lsls	r3, r3, #9
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	041b      	lsls	r3, r3, #16
 8004aee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	061b      	lsls	r3, r3, #24
 8004afc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b00:	4931      	ldr	r1, [pc, #196]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b06:	4b30      	ldr	r3, [pc, #192]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	492d      	ldr	r1, [pc, #180]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b18:	4b2b      	ldr	r3, [pc, #172]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	4928      	ldr	r1, [pc, #160]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b2a:	4b27      	ldr	r3, [pc, #156]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	4a26      	ldr	r2, [pc, #152]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b36:	4b24      	ldr	r3, [pc, #144]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b3a:	4b24      	ldr	r3, [pc, #144]	; (8004bcc <RCCEx_PLL3_Config+0x160>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	69d2      	ldr	r2, [r2, #28]
 8004b42:	00d2      	lsls	r2, r2, #3
 8004b44:	4920      	ldr	r1, [pc, #128]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004b4a:	4b1f      	ldr	r3, [pc, #124]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	4a1e      	ldr	r2, [pc, #120]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d106      	bne.n	8004b6a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b5c:	4b1a      	ldr	r3, [pc, #104]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	4a19      	ldr	r2, [pc, #100]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b68:	e00f      	b.n	8004b8a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d106      	bne.n	8004b7e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b70:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	4a14      	ldr	r2, [pc, #80]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b7c:	e005      	b.n	8004b8a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b7e:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b82:	4a11      	ldr	r2, [pc, #68]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b8a:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a0e      	ldr	r2, [pc, #56]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b96:	f7fd f9df 	bl	8001f58 <HAL_GetTick>
 8004b9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b9c:	e008      	b.n	8004bb0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b9e:	f7fd f9db 	bl	8001f58 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e006      	b.n	8004bbe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bb0:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <RCCEx_PLL3_Config+0x15c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0f0      	beq.n	8004b9e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	58024400 	.word	0x58024400
 8004bcc:	ffff0007 	.word	0xffff0007

08004bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e049      	b.n	8004c76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d106      	bne.n	8004bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fc feaa 	bl	8001950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4610      	mov	r0, r2
 8004c10:	f000 fbb0 	bl	8005374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e049      	b.n	8004d24 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d106      	bne.n	8004caa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f841 	bl	8004d2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2202      	movs	r2, #2
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	f000 fb59 	bl	8005374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d109      	bne.n	8004d64 <HAL_TIM_PWM_Start+0x24>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	bf14      	ite	ne
 8004d5c:	2301      	movne	r3, #1
 8004d5e:	2300      	moveq	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	e03c      	b.n	8004dde <HAL_TIM_PWM_Start+0x9e>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d109      	bne.n	8004d7e <HAL_TIM_PWM_Start+0x3e>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	bf14      	ite	ne
 8004d76:	2301      	movne	r3, #1
 8004d78:	2300      	moveq	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	e02f      	b.n	8004dde <HAL_TIM_PWM_Start+0x9e>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d109      	bne.n	8004d98 <HAL_TIM_PWM_Start+0x58>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	bf14      	ite	ne
 8004d90:	2301      	movne	r3, #1
 8004d92:	2300      	moveq	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	e022      	b.n	8004dde <HAL_TIM_PWM_Start+0x9e>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b0c      	cmp	r3, #12
 8004d9c:	d109      	bne.n	8004db2 <HAL_TIM_PWM_Start+0x72>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	bf14      	ite	ne
 8004daa:	2301      	movne	r3, #1
 8004dac:	2300      	moveq	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	e015      	b.n	8004dde <HAL_TIM_PWM_Start+0x9e>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b10      	cmp	r3, #16
 8004db6:	d109      	bne.n	8004dcc <HAL_TIM_PWM_Start+0x8c>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	bf14      	ite	ne
 8004dc4:	2301      	movne	r3, #1
 8004dc6:	2300      	moveq	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	e008      	b.n	8004dde <HAL_TIM_PWM_Start+0x9e>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	bf14      	ite	ne
 8004dd8:	2301      	movne	r3, #1
 8004dda:	2300      	moveq	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e0a1      	b.n	8004f2a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_PWM_Start+0xb6>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004df4:	e023      	b.n	8004e3e <HAL_TIM_PWM_Start+0xfe>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_PWM_Start+0xc6>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e04:	e01b      	b.n	8004e3e <HAL_TIM_PWM_Start+0xfe>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d104      	bne.n	8004e16 <HAL_TIM_PWM_Start+0xd6>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e14:	e013      	b.n	8004e3e <HAL_TIM_PWM_Start+0xfe>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b0c      	cmp	r3, #12
 8004e1a:	d104      	bne.n	8004e26 <HAL_TIM_PWM_Start+0xe6>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e24:	e00b      	b.n	8004e3e <HAL_TIM_PWM_Start+0xfe>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d104      	bne.n	8004e36 <HAL_TIM_PWM_Start+0xf6>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e34:	e003      	b.n	8004e3e <HAL_TIM_PWM_Start+0xfe>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2201      	movs	r2, #1
 8004e44:	6839      	ldr	r1, [r7, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fea2 	bl	8005b90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a38      	ldr	r2, [pc, #224]	; (8004f34 <HAL_TIM_PWM_Start+0x1f4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d013      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x13e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a37      	ldr	r2, [pc, #220]	; (8004f38 <HAL_TIM_PWM_Start+0x1f8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00e      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x13e>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a35      	ldr	r2, [pc, #212]	; (8004f3c <HAL_TIM_PWM_Start+0x1fc>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d009      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x13e>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a34      	ldr	r2, [pc, #208]	; (8004f40 <HAL_TIM_PWM_Start+0x200>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d004      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x13e>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a32      	ldr	r2, [pc, #200]	; (8004f44 <HAL_TIM_PWM_Start+0x204>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d101      	bne.n	8004e82 <HAL_TIM_PWM_Start+0x142>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <HAL_TIM_PWM_Start+0x144>
 8004e82:	2300      	movs	r3, #0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d007      	beq.n	8004e98 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a25      	ldr	r2, [pc, #148]	; (8004f34 <HAL_TIM_PWM_Start+0x1f4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d022      	beq.n	8004ee8 <HAL_TIM_PWM_Start+0x1a8>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eaa:	d01d      	beq.n	8004ee8 <HAL_TIM_PWM_Start+0x1a8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a25      	ldr	r2, [pc, #148]	; (8004f48 <HAL_TIM_PWM_Start+0x208>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d018      	beq.n	8004ee8 <HAL_TIM_PWM_Start+0x1a8>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a24      	ldr	r2, [pc, #144]	; (8004f4c <HAL_TIM_PWM_Start+0x20c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d013      	beq.n	8004ee8 <HAL_TIM_PWM_Start+0x1a8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a22      	ldr	r2, [pc, #136]	; (8004f50 <HAL_TIM_PWM_Start+0x210>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00e      	beq.n	8004ee8 <HAL_TIM_PWM_Start+0x1a8>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1a      	ldr	r2, [pc, #104]	; (8004f38 <HAL_TIM_PWM_Start+0x1f8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d009      	beq.n	8004ee8 <HAL_TIM_PWM_Start+0x1a8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1e      	ldr	r2, [pc, #120]	; (8004f54 <HAL_TIM_PWM_Start+0x214>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_TIM_PWM_Start+0x1a8>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a16      	ldr	r2, [pc, #88]	; (8004f3c <HAL_TIM_PWM_Start+0x1fc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d115      	bne.n	8004f14 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	4b1a      	ldr	r3, [pc, #104]	; (8004f58 <HAL_TIM_PWM_Start+0x218>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b06      	cmp	r3, #6
 8004ef8:	d015      	beq.n	8004f26 <HAL_TIM_PWM_Start+0x1e6>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f00:	d011      	beq.n	8004f26 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0201 	orr.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f12:	e008      	b.n	8004f26 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	e000      	b.n	8004f28 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40010000 	.word	0x40010000
 8004f38:	40010400 	.word	0x40010400
 8004f3c:	40014000 	.word	0x40014000
 8004f40:	40014400 	.word	0x40014400
 8004f44:	40014800 	.word	0x40014800
 8004f48:	40000400 	.word	0x40000400
 8004f4c:	40000800 	.word	0x40000800
 8004f50:	40000c00 	.word	0x40000c00
 8004f54:	40001800 	.word	0x40001800
 8004f58:	00010007 	.word	0x00010007

08004f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e0ff      	b.n	800517a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b14      	cmp	r3, #20
 8004f86:	f200 80f0 	bhi.w	800516a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f8a:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f90:	08004fe5 	.word	0x08004fe5
 8004f94:	0800516b 	.word	0x0800516b
 8004f98:	0800516b 	.word	0x0800516b
 8004f9c:	0800516b 	.word	0x0800516b
 8004fa0:	08005025 	.word	0x08005025
 8004fa4:	0800516b 	.word	0x0800516b
 8004fa8:	0800516b 	.word	0x0800516b
 8004fac:	0800516b 	.word	0x0800516b
 8004fb0:	08005067 	.word	0x08005067
 8004fb4:	0800516b 	.word	0x0800516b
 8004fb8:	0800516b 	.word	0x0800516b
 8004fbc:	0800516b 	.word	0x0800516b
 8004fc0:	080050a7 	.word	0x080050a7
 8004fc4:	0800516b 	.word	0x0800516b
 8004fc8:	0800516b 	.word	0x0800516b
 8004fcc:	0800516b 	.word	0x0800516b
 8004fd0:	080050e9 	.word	0x080050e9
 8004fd4:	0800516b 	.word	0x0800516b
 8004fd8:	0800516b 	.word	0x0800516b
 8004fdc:	0800516b 	.word	0x0800516b
 8004fe0:	08005129 	.word	0x08005129
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fa5c 	bl	80054a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699a      	ldr	r2, [r3, #24]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0208 	orr.w	r2, r2, #8
 8004ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0204 	bic.w	r2, r2, #4
 800500e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6999      	ldr	r1, [r3, #24]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	619a      	str	r2, [r3, #24]
      break;
 8005022:	e0a5      	b.n	8005170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	4618      	mov	r0, r3
 800502c:	f000 facc 	bl	80055c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800503e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699a      	ldr	r2, [r3, #24]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6999      	ldr	r1, [r3, #24]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	021a      	lsls	r2, r3, #8
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	619a      	str	r2, [r3, #24]
      break;
 8005064:	e084      	b.n	8005170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68b9      	ldr	r1, [r7, #8]
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fb35 	bl	80056dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69da      	ldr	r2, [r3, #28]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0208 	orr.w	r2, r2, #8
 8005080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0204 	bic.w	r2, r2, #4
 8005090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69d9      	ldr	r1, [r3, #28]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	61da      	str	r2, [r3, #28]
      break;
 80050a4:	e064      	b.n	8005170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fb9d 	bl	80057ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69da      	ldr	r2, [r3, #28]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69da      	ldr	r2, [r3, #28]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69d9      	ldr	r1, [r3, #28]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	021a      	lsls	r2, r3, #8
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	61da      	str	r2, [r3, #28]
      break;
 80050e6:	e043      	b.n	8005170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fbe6 	bl	80058c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0208 	orr.w	r2, r2, #8
 8005102:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0204 	bic.w	r2, r2, #4
 8005112:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	691a      	ldr	r2, [r3, #16]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005126:	e023      	b.n	8005170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fc2a 	bl	8005988 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005142:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005152:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	021a      	lsls	r2, r3, #8
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005168:	e002      	b.n	8005170 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	75fb      	strb	r3, [r7, #23]
      break;
 800516e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005178:	7dfb      	ldrb	r3, [r7, #23]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop

08005184 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_TIM_ConfigClockSource+0x1c>
 800519c:	2302      	movs	r3, #2
 800519e:	e0dc      	b.n	800535a <HAL_TIM_ConfigClockSource+0x1d6>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	4b6a      	ldr	r3, [pc, #424]	; (8005364 <HAL_TIM_ConfigClockSource+0x1e0>)
 80051bc:	4013      	ands	r3, r2
 80051be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a64      	ldr	r2, [pc, #400]	; (8005368 <HAL_TIM_ConfigClockSource+0x1e4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	f000 80a9 	beq.w	800532e <HAL_TIM_ConfigClockSource+0x1aa>
 80051dc:	4a62      	ldr	r2, [pc, #392]	; (8005368 <HAL_TIM_ConfigClockSource+0x1e4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	f200 80ae 	bhi.w	8005340 <HAL_TIM_ConfigClockSource+0x1bc>
 80051e4:	4a61      	ldr	r2, [pc, #388]	; (800536c <HAL_TIM_ConfigClockSource+0x1e8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	f000 80a1 	beq.w	800532e <HAL_TIM_ConfigClockSource+0x1aa>
 80051ec:	4a5f      	ldr	r2, [pc, #380]	; (800536c <HAL_TIM_ConfigClockSource+0x1e8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	f200 80a6 	bhi.w	8005340 <HAL_TIM_ConfigClockSource+0x1bc>
 80051f4:	4a5e      	ldr	r2, [pc, #376]	; (8005370 <HAL_TIM_ConfigClockSource+0x1ec>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	f000 8099 	beq.w	800532e <HAL_TIM_ConfigClockSource+0x1aa>
 80051fc:	4a5c      	ldr	r2, [pc, #368]	; (8005370 <HAL_TIM_ConfigClockSource+0x1ec>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	f200 809e 	bhi.w	8005340 <HAL_TIM_ConfigClockSource+0x1bc>
 8005204:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005208:	f000 8091 	beq.w	800532e <HAL_TIM_ConfigClockSource+0x1aa>
 800520c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005210:	f200 8096 	bhi.w	8005340 <HAL_TIM_ConfigClockSource+0x1bc>
 8005214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005218:	f000 8089 	beq.w	800532e <HAL_TIM_ConfigClockSource+0x1aa>
 800521c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005220:	f200 808e 	bhi.w	8005340 <HAL_TIM_ConfigClockSource+0x1bc>
 8005224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005228:	d03e      	beq.n	80052a8 <HAL_TIM_ConfigClockSource+0x124>
 800522a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800522e:	f200 8087 	bhi.w	8005340 <HAL_TIM_ConfigClockSource+0x1bc>
 8005232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005236:	f000 8086 	beq.w	8005346 <HAL_TIM_ConfigClockSource+0x1c2>
 800523a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523e:	d87f      	bhi.n	8005340 <HAL_TIM_ConfigClockSource+0x1bc>
 8005240:	2b70      	cmp	r3, #112	; 0x70
 8005242:	d01a      	beq.n	800527a <HAL_TIM_ConfigClockSource+0xf6>
 8005244:	2b70      	cmp	r3, #112	; 0x70
 8005246:	d87b      	bhi.n	8005340 <HAL_TIM_ConfigClockSource+0x1bc>
 8005248:	2b60      	cmp	r3, #96	; 0x60
 800524a:	d050      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0x16a>
 800524c:	2b60      	cmp	r3, #96	; 0x60
 800524e:	d877      	bhi.n	8005340 <HAL_TIM_ConfigClockSource+0x1bc>
 8005250:	2b50      	cmp	r3, #80	; 0x50
 8005252:	d03c      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x14a>
 8005254:	2b50      	cmp	r3, #80	; 0x50
 8005256:	d873      	bhi.n	8005340 <HAL_TIM_ConfigClockSource+0x1bc>
 8005258:	2b40      	cmp	r3, #64	; 0x40
 800525a:	d058      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x18a>
 800525c:	2b40      	cmp	r3, #64	; 0x40
 800525e:	d86f      	bhi.n	8005340 <HAL_TIM_ConfigClockSource+0x1bc>
 8005260:	2b30      	cmp	r3, #48	; 0x30
 8005262:	d064      	beq.n	800532e <HAL_TIM_ConfigClockSource+0x1aa>
 8005264:	2b30      	cmp	r3, #48	; 0x30
 8005266:	d86b      	bhi.n	8005340 <HAL_TIM_ConfigClockSource+0x1bc>
 8005268:	2b20      	cmp	r3, #32
 800526a:	d060      	beq.n	800532e <HAL_TIM_ConfigClockSource+0x1aa>
 800526c:	2b20      	cmp	r3, #32
 800526e:	d867      	bhi.n	8005340 <HAL_TIM_ConfigClockSource+0x1bc>
 8005270:	2b00      	cmp	r3, #0
 8005272:	d05c      	beq.n	800532e <HAL_TIM_ConfigClockSource+0x1aa>
 8005274:	2b10      	cmp	r3, #16
 8005276:	d05a      	beq.n	800532e <HAL_TIM_ConfigClockSource+0x1aa>
 8005278:	e062      	b.n	8005340 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6899      	ldr	r1, [r3, #8]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f000 fc61 	bl	8005b50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800529c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	609a      	str	r2, [r3, #8]
      break;
 80052a6:	e04f      	b.n	8005348 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6818      	ldr	r0, [r3, #0]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	6899      	ldr	r1, [r3, #8]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f000 fc4a 	bl	8005b50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689a      	ldr	r2, [r3, #8]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ca:	609a      	str	r2, [r3, #8]
      break;
 80052cc:	e03c      	b.n	8005348 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	6859      	ldr	r1, [r3, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	461a      	mov	r2, r3
 80052dc:	f000 fbba 	bl	8005a54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2150      	movs	r1, #80	; 0x50
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fc14 	bl	8005b14 <TIM_ITRx_SetConfig>
      break;
 80052ec:	e02c      	b.n	8005348 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	6859      	ldr	r1, [r3, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f000 fbd9 	bl	8005ab2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2160      	movs	r1, #96	; 0x60
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fc04 	bl	8005b14 <TIM_ITRx_SetConfig>
      break;
 800530c:	e01c      	b.n	8005348 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6859      	ldr	r1, [r3, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	461a      	mov	r2, r3
 800531c:	f000 fb9a 	bl	8005a54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2140      	movs	r1, #64	; 0x40
 8005326:	4618      	mov	r0, r3
 8005328:	f000 fbf4 	bl	8005b14 <TIM_ITRx_SetConfig>
      break;
 800532c:	e00c      	b.n	8005348 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4619      	mov	r1, r3
 8005338:	4610      	mov	r0, r2
 800533a:	f000 fbeb 	bl	8005b14 <TIM_ITRx_SetConfig>
      break;
 800533e:	e003      	b.n	8005348 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	73fb      	strb	r3, [r7, #15]
      break;
 8005344:	e000      	b.n	8005348 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005346:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005358:	7bfb      	ldrb	r3, [r7, #15]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	ffceff88 	.word	0xffceff88
 8005368:	00100040 	.word	0x00100040
 800536c:	00100030 	.word	0x00100030
 8005370:	00100020 	.word	0x00100020

08005374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a40      	ldr	r2, [pc, #256]	; (8005488 <TIM_Base_SetConfig+0x114>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d013      	beq.n	80053b4 <TIM_Base_SetConfig+0x40>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005392:	d00f      	beq.n	80053b4 <TIM_Base_SetConfig+0x40>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a3d      	ldr	r2, [pc, #244]	; (800548c <TIM_Base_SetConfig+0x118>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00b      	beq.n	80053b4 <TIM_Base_SetConfig+0x40>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a3c      	ldr	r2, [pc, #240]	; (8005490 <TIM_Base_SetConfig+0x11c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d007      	beq.n	80053b4 <TIM_Base_SetConfig+0x40>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a3b      	ldr	r2, [pc, #236]	; (8005494 <TIM_Base_SetConfig+0x120>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d003      	beq.n	80053b4 <TIM_Base_SetConfig+0x40>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a3a      	ldr	r2, [pc, #232]	; (8005498 <TIM_Base_SetConfig+0x124>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d108      	bne.n	80053c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a2f      	ldr	r2, [pc, #188]	; (8005488 <TIM_Base_SetConfig+0x114>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d01f      	beq.n	800540e <TIM_Base_SetConfig+0x9a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d4:	d01b      	beq.n	800540e <TIM_Base_SetConfig+0x9a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a2c      	ldr	r2, [pc, #176]	; (800548c <TIM_Base_SetConfig+0x118>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d017      	beq.n	800540e <TIM_Base_SetConfig+0x9a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a2b      	ldr	r2, [pc, #172]	; (8005490 <TIM_Base_SetConfig+0x11c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d013      	beq.n	800540e <TIM_Base_SetConfig+0x9a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a2a      	ldr	r2, [pc, #168]	; (8005494 <TIM_Base_SetConfig+0x120>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00f      	beq.n	800540e <TIM_Base_SetConfig+0x9a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a29      	ldr	r2, [pc, #164]	; (8005498 <TIM_Base_SetConfig+0x124>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00b      	beq.n	800540e <TIM_Base_SetConfig+0x9a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a28      	ldr	r2, [pc, #160]	; (800549c <TIM_Base_SetConfig+0x128>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d007      	beq.n	800540e <TIM_Base_SetConfig+0x9a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a27      	ldr	r2, [pc, #156]	; (80054a0 <TIM_Base_SetConfig+0x12c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d003      	beq.n	800540e <TIM_Base_SetConfig+0x9a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a26      	ldr	r2, [pc, #152]	; (80054a4 <TIM_Base_SetConfig+0x130>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d108      	bne.n	8005420 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4313      	orrs	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a10      	ldr	r2, [pc, #64]	; (8005488 <TIM_Base_SetConfig+0x114>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00f      	beq.n	800546c <TIM_Base_SetConfig+0xf8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a12      	ldr	r2, [pc, #72]	; (8005498 <TIM_Base_SetConfig+0x124>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00b      	beq.n	800546c <TIM_Base_SetConfig+0xf8>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a11      	ldr	r2, [pc, #68]	; (800549c <TIM_Base_SetConfig+0x128>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d007      	beq.n	800546c <TIM_Base_SetConfig+0xf8>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a10      	ldr	r2, [pc, #64]	; (80054a0 <TIM_Base_SetConfig+0x12c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d003      	beq.n	800546c <TIM_Base_SetConfig+0xf8>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a0f      	ldr	r2, [pc, #60]	; (80054a4 <TIM_Base_SetConfig+0x130>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d103      	bne.n	8005474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	615a      	str	r2, [r3, #20]
}
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40010000 	.word	0x40010000
 800548c:	40000400 	.word	0x40000400
 8005490:	40000800 	.word	0x40000800
 8005494:	40000c00 	.word	0x40000c00
 8005498:	40010400 	.word	0x40010400
 800549c:	40014000 	.word	0x40014000
 80054a0:	40014400 	.word	0x40014400
 80054a4:	40014800 	.word	0x40014800

080054a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	f023 0201 	bic.w	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4b37      	ldr	r3, [pc, #220]	; (80055b0 <TIM_OC1_SetConfig+0x108>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0303 	bic.w	r3, r3, #3
 80054de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f023 0302 	bic.w	r3, r3, #2
 80054f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a2d      	ldr	r2, [pc, #180]	; (80055b4 <TIM_OC1_SetConfig+0x10c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00f      	beq.n	8005524 <TIM_OC1_SetConfig+0x7c>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a2c      	ldr	r2, [pc, #176]	; (80055b8 <TIM_OC1_SetConfig+0x110>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00b      	beq.n	8005524 <TIM_OC1_SetConfig+0x7c>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a2b      	ldr	r2, [pc, #172]	; (80055bc <TIM_OC1_SetConfig+0x114>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d007      	beq.n	8005524 <TIM_OC1_SetConfig+0x7c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a2a      	ldr	r2, [pc, #168]	; (80055c0 <TIM_OC1_SetConfig+0x118>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <TIM_OC1_SetConfig+0x7c>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a29      	ldr	r2, [pc, #164]	; (80055c4 <TIM_OC1_SetConfig+0x11c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d10c      	bne.n	800553e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f023 0308 	bic.w	r3, r3, #8
 800552a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f023 0304 	bic.w	r3, r3, #4
 800553c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a1c      	ldr	r2, [pc, #112]	; (80055b4 <TIM_OC1_SetConfig+0x10c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00f      	beq.n	8005566 <TIM_OC1_SetConfig+0xbe>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a1b      	ldr	r2, [pc, #108]	; (80055b8 <TIM_OC1_SetConfig+0x110>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d00b      	beq.n	8005566 <TIM_OC1_SetConfig+0xbe>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a1a      	ldr	r2, [pc, #104]	; (80055bc <TIM_OC1_SetConfig+0x114>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d007      	beq.n	8005566 <TIM_OC1_SetConfig+0xbe>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a19      	ldr	r2, [pc, #100]	; (80055c0 <TIM_OC1_SetConfig+0x118>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d003      	beq.n	8005566 <TIM_OC1_SetConfig+0xbe>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a18      	ldr	r2, [pc, #96]	; (80055c4 <TIM_OC1_SetConfig+0x11c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d111      	bne.n	800558a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800556c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	4313      	orrs	r3, r2
 800557e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	621a      	str	r2, [r3, #32]
}
 80055a4:	bf00      	nop
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	fffeff8f 	.word	0xfffeff8f
 80055b4:	40010000 	.word	0x40010000
 80055b8:	40010400 	.word	0x40010400
 80055bc:	40014000 	.word	0x40014000
 80055c0:	40014400 	.word	0x40014400
 80055c4:	40014800 	.word	0x40014800

080055c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	f023 0210 	bic.w	r2, r3, #16
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	4b34      	ldr	r3, [pc, #208]	; (80056c4 <TIM_OC2_SetConfig+0xfc>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f023 0320 	bic.w	r3, r3, #32
 8005612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a29      	ldr	r2, [pc, #164]	; (80056c8 <TIM_OC2_SetConfig+0x100>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d003      	beq.n	8005630 <TIM_OC2_SetConfig+0x68>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a28      	ldr	r2, [pc, #160]	; (80056cc <TIM_OC2_SetConfig+0x104>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d10d      	bne.n	800564c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800564a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a1e      	ldr	r2, [pc, #120]	; (80056c8 <TIM_OC2_SetConfig+0x100>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00f      	beq.n	8005674 <TIM_OC2_SetConfig+0xac>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a1d      	ldr	r2, [pc, #116]	; (80056cc <TIM_OC2_SetConfig+0x104>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00b      	beq.n	8005674 <TIM_OC2_SetConfig+0xac>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a1c      	ldr	r2, [pc, #112]	; (80056d0 <TIM_OC2_SetConfig+0x108>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d007      	beq.n	8005674 <TIM_OC2_SetConfig+0xac>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a1b      	ldr	r2, [pc, #108]	; (80056d4 <TIM_OC2_SetConfig+0x10c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_OC2_SetConfig+0xac>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a1a      	ldr	r2, [pc, #104]	; (80056d8 <TIM_OC2_SetConfig+0x110>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d113      	bne.n	800569c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800567a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	feff8fff 	.word	0xfeff8fff
 80056c8:	40010000 	.word	0x40010000
 80056cc:	40010400 	.word	0x40010400
 80056d0:	40014000 	.word	0x40014000
 80056d4:	40014400 	.word	0x40014400
 80056d8:	40014800 	.word	0x40014800

080056dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4b33      	ldr	r3, [pc, #204]	; (80057d4 <TIM_OC3_SetConfig+0xf8>)
 8005708:	4013      	ands	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0303 	bic.w	r3, r3, #3
 8005712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	021b      	lsls	r3, r3, #8
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	4313      	orrs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a28      	ldr	r2, [pc, #160]	; (80057d8 <TIM_OC3_SetConfig+0xfc>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d003      	beq.n	8005742 <TIM_OC3_SetConfig+0x66>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a27      	ldr	r2, [pc, #156]	; (80057dc <TIM_OC3_SetConfig+0x100>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d10d      	bne.n	800575e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	021b      	lsls	r3, r3, #8
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	4313      	orrs	r3, r2
 8005754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800575c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a1d      	ldr	r2, [pc, #116]	; (80057d8 <TIM_OC3_SetConfig+0xfc>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d00f      	beq.n	8005786 <TIM_OC3_SetConfig+0xaa>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a1c      	ldr	r2, [pc, #112]	; (80057dc <TIM_OC3_SetConfig+0x100>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00b      	beq.n	8005786 <TIM_OC3_SetConfig+0xaa>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a1b      	ldr	r2, [pc, #108]	; (80057e0 <TIM_OC3_SetConfig+0x104>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d007      	beq.n	8005786 <TIM_OC3_SetConfig+0xaa>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a1a      	ldr	r2, [pc, #104]	; (80057e4 <TIM_OC3_SetConfig+0x108>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d003      	beq.n	8005786 <TIM_OC3_SetConfig+0xaa>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a19      	ldr	r2, [pc, #100]	; (80057e8 <TIM_OC3_SetConfig+0x10c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d113      	bne.n	80057ae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800578c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	621a      	str	r2, [r3, #32]
}
 80057c8:	bf00      	nop
 80057ca:	371c      	adds	r7, #28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	fffeff8f 	.word	0xfffeff8f
 80057d8:	40010000 	.word	0x40010000
 80057dc:	40010400 	.word	0x40010400
 80057e0:	40014000 	.word	0x40014000
 80057e4:	40014400 	.word	0x40014400
 80057e8:	40014800 	.word	0x40014800

080057ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4b24      	ldr	r3, [pc, #144]	; (80058a8 <TIM_OC4_SetConfig+0xbc>)
 8005818:	4013      	ands	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005836:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	031b      	lsls	r3, r3, #12
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a19      	ldr	r2, [pc, #100]	; (80058ac <TIM_OC4_SetConfig+0xc0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00f      	beq.n	800586c <TIM_OC4_SetConfig+0x80>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a18      	ldr	r2, [pc, #96]	; (80058b0 <TIM_OC4_SetConfig+0xc4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00b      	beq.n	800586c <TIM_OC4_SetConfig+0x80>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a17      	ldr	r2, [pc, #92]	; (80058b4 <TIM_OC4_SetConfig+0xc8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d007      	beq.n	800586c <TIM_OC4_SetConfig+0x80>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a16      	ldr	r2, [pc, #88]	; (80058b8 <TIM_OC4_SetConfig+0xcc>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d003      	beq.n	800586c <TIM_OC4_SetConfig+0x80>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a15      	ldr	r2, [pc, #84]	; (80058bc <TIM_OC4_SetConfig+0xd0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d109      	bne.n	8005880 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005872:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	019b      	lsls	r3, r3, #6
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	621a      	str	r2, [r3, #32]
}
 800589a:	bf00      	nop
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	feff8fff 	.word	0xfeff8fff
 80058ac:	40010000 	.word	0x40010000
 80058b0:	40010400 	.word	0x40010400
 80058b4:	40014000 	.word	0x40014000
 80058b8:	40014400 	.word	0x40014400
 80058bc:	40014800 	.word	0x40014800

080058c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4b21      	ldr	r3, [pc, #132]	; (8005970 <TIM_OC5_SetConfig+0xb0>)
 80058ec:	4013      	ands	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005900:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	041b      	lsls	r3, r3, #16
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a18      	ldr	r2, [pc, #96]	; (8005974 <TIM_OC5_SetConfig+0xb4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00f      	beq.n	8005936 <TIM_OC5_SetConfig+0x76>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a17      	ldr	r2, [pc, #92]	; (8005978 <TIM_OC5_SetConfig+0xb8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00b      	beq.n	8005936 <TIM_OC5_SetConfig+0x76>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a16      	ldr	r2, [pc, #88]	; (800597c <TIM_OC5_SetConfig+0xbc>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d007      	beq.n	8005936 <TIM_OC5_SetConfig+0x76>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a15      	ldr	r2, [pc, #84]	; (8005980 <TIM_OC5_SetConfig+0xc0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d003      	beq.n	8005936 <TIM_OC5_SetConfig+0x76>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a14      	ldr	r2, [pc, #80]	; (8005984 <TIM_OC5_SetConfig+0xc4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d109      	bne.n	800594a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800593c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	021b      	lsls	r3, r3, #8
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	621a      	str	r2, [r3, #32]
}
 8005964:	bf00      	nop
 8005966:	371c      	adds	r7, #28
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	fffeff8f 	.word	0xfffeff8f
 8005974:	40010000 	.word	0x40010000
 8005978:	40010400 	.word	0x40010400
 800597c:	40014000 	.word	0x40014000
 8005980:	40014400 	.word	0x40014400
 8005984:	40014800 	.word	0x40014800

08005988 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4b22      	ldr	r3, [pc, #136]	; (8005a3c <TIM_OC6_SetConfig+0xb4>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	051b      	lsls	r3, r3, #20
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a19      	ldr	r2, [pc, #100]	; (8005a40 <TIM_OC6_SetConfig+0xb8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00f      	beq.n	8005a00 <TIM_OC6_SetConfig+0x78>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a18      	ldr	r2, [pc, #96]	; (8005a44 <TIM_OC6_SetConfig+0xbc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00b      	beq.n	8005a00 <TIM_OC6_SetConfig+0x78>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a17      	ldr	r2, [pc, #92]	; (8005a48 <TIM_OC6_SetConfig+0xc0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d007      	beq.n	8005a00 <TIM_OC6_SetConfig+0x78>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a16      	ldr	r2, [pc, #88]	; (8005a4c <TIM_OC6_SetConfig+0xc4>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_OC6_SetConfig+0x78>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a15      	ldr	r2, [pc, #84]	; (8005a50 <TIM_OC6_SetConfig+0xc8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d109      	bne.n	8005a14 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	029b      	lsls	r3, r3, #10
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	621a      	str	r2, [r3, #32]
}
 8005a2e:	bf00      	nop
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	feff8fff 	.word	0xfeff8fff
 8005a40:	40010000 	.word	0x40010000
 8005a44:	40010400 	.word	0x40010400
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40014400 	.word	0x40014400
 8005a50:	40014800 	.word	0x40014800

08005a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f023 0201 	bic.w	r2, r3, #1
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f023 030a 	bic.w	r3, r3, #10
 8005a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	621a      	str	r2, [r3, #32]
}
 8005aa6:	bf00      	nop
 8005aa8:	371c      	adds	r7, #28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b087      	sub	sp, #28
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	f023 0210 	bic.w	r2, r3, #16
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005adc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	031b      	lsls	r3, r3, #12
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005aee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <TIM_ITRx_SetConfig+0x38>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	f043 0307 	orr.w	r3, r3, #7
 8005b36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	609a      	str	r2, [r3, #8]
}
 8005b3e:	bf00      	nop
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	ffcfff8f 	.word	0xffcfff8f

08005b50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	021a      	lsls	r2, r3, #8
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	431a      	orrs	r2, r3
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	609a      	str	r2, [r3, #8]
}
 8005b84:	bf00      	nop
 8005b86:	371c      	adds	r7, #28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f003 031f 	and.w	r3, r3, #31
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6a1a      	ldr	r2, [r3, #32]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	401a      	ands	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a1a      	ldr	r2, [r3, #32]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f003 031f 	and.w	r3, r3, #31
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
	...

08005bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e06d      	b.n	8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a30      	ldr	r2, [pc, #192]	; (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d004      	beq.n	8005c28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a2f      	ldr	r2, [pc, #188]	; (8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d108      	bne.n	8005c3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a20      	ldr	r2, [pc, #128]	; (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d022      	beq.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c66:	d01d      	beq.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d018      	beq.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a1c      	ldr	r2, [pc, #112]	; (8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d013      	beq.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1a      	ldr	r2, [pc, #104]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00e      	beq.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a15      	ldr	r2, [pc, #84]	; (8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d009      	beq.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a16      	ldr	r2, [pc, #88]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d004      	beq.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a15      	ldr	r2, [pc, #84]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d10c      	bne.n	8005cbe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005caa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	40010400 	.word	0x40010400
 8005ce4:	40000400 	.word	0x40000400
 8005ce8:	40000800 	.word	0x40000800
 8005cec:	40000c00 	.word	0x40000c00
 8005cf0:	40001800 	.word	0x40001800
 8005cf4:	40014000 	.word	0x40014000

08005cf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e065      	b.n	8005de0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	041b      	lsls	r3, r3, #16
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a16      	ldr	r2, [pc, #88]	; (8005dec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d004      	beq.n	8005da2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a14      	ldr	r2, [pc, #80]	; (8005df0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d115      	bne.n	8005dce <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	051b      	lsls	r3, r3, #20
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	40010000 	.word	0x40010000
 8005df0:	40010400 	.word	0x40010400

08005df4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e042      	b.n	8005e8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7fb fe39 	bl	8001a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2224      	movs	r2, #36	; 0x24
 8005e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0201 	bic.w	r2, r2, #1
 8005e34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f996 	bl	8006168 <UART_SetConfig>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e022      	b.n	8005e8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 feea 	bl	8006c28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0201 	orr.w	r2, r2, #1
 8005e82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 ff71 	bl	8006d6c <UART_CheckIdleState>
 8005e8a:	4603      	mov	r3, r0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08a      	sub	sp, #40	; 0x28
 8005e98:	af02      	add	r7, sp, #8
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	603b      	str	r3, [r7, #0]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eaa:	2b20      	cmp	r3, #32
 8005eac:	f040 8083 	bne.w	8005fb6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_UART_Transmit+0x28>
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e07b      	b.n	8005fb8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_UART_Transmit+0x3a>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e074      	b.n	8005fb8 <HAL_UART_Transmit+0x124>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2221      	movs	r2, #33	; 0x21
 8005ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ee6:	f7fc f837 	bl	8001f58 <HAL_GetTick>
 8005eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	88fa      	ldrh	r2, [r7, #6]
 8005ef0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	88fa      	ldrh	r2, [r7, #6]
 8005ef8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f04:	d108      	bne.n	8005f18 <HAL_UART_Transmit+0x84>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d104      	bne.n	8005f18 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	61bb      	str	r3, [r7, #24]
 8005f16:	e003      	b.n	8005f20 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005f28:	e02c      	b.n	8005f84 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2200      	movs	r2, #0
 8005f32:	2180      	movs	r1, #128	; 0x80
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 ff64 	bl	8006e02 <UART_WaitOnFlagUntilTimeout>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e039      	b.n	8005fb8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10b      	bne.n	8005f62 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	3302      	adds	r3, #2
 8005f5e:	61bb      	str	r3, [r7, #24]
 8005f60:	e007      	b.n	8005f72 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	781a      	ldrb	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1cc      	bne.n	8005f2a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2200      	movs	r2, #0
 8005f98:	2140      	movs	r1, #64	; 0x40
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 ff31 	bl	8006e02 <UART_WaitOnFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e006      	b.n	8005fb8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e000      	b.n	8005fb8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005fb6:	2302      	movs	r3, #2
  }
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3720      	adds	r7, #32
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08a      	sub	sp, #40	; 0x28
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	603b      	str	r3, [r7, #0]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	f040 80c0 	bne.w	800615c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <HAL_UART_Receive+0x28>
 8005fe2:	88fb      	ldrh	r3, [r7, #6]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e0b8      	b.n	800615e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_UART_Receive+0x3a>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e0b1      	b.n	800615e <HAL_UART_Receive+0x19e>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2222      	movs	r2, #34	; 0x22
 800600e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006018:	f7fb ff9e 	bl	8001f58 <HAL_GetTick>
 800601c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	88fa      	ldrh	r2, [r7, #6]
 8006022:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	88fa      	ldrh	r2, [r7, #6]
 800602a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006036:	d10e      	bne.n	8006056 <HAL_UART_Receive+0x96>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d105      	bne.n	800604c <HAL_UART_Receive+0x8c>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006046:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800604a:	e02d      	b.n	80060a8 <HAL_UART_Receive+0xe8>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	22ff      	movs	r2, #255	; 0xff
 8006050:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006054:	e028      	b.n	80060a8 <HAL_UART_Receive+0xe8>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10d      	bne.n	800607a <HAL_UART_Receive+0xba>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d104      	bne.n	8006070 <HAL_UART_Receive+0xb0>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	22ff      	movs	r2, #255	; 0xff
 800606a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800606e:	e01b      	b.n	80060a8 <HAL_UART_Receive+0xe8>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	227f      	movs	r2, #127	; 0x7f
 8006074:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006078:	e016      	b.n	80060a8 <HAL_UART_Receive+0xe8>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006082:	d10d      	bne.n	80060a0 <HAL_UART_Receive+0xe0>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d104      	bne.n	8006096 <HAL_UART_Receive+0xd6>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	227f      	movs	r2, #127	; 0x7f
 8006090:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006094:	e008      	b.n	80060a8 <HAL_UART_Receive+0xe8>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	223f      	movs	r2, #63	; 0x3f
 800609a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800609e:	e003      	b.n	80060a8 <HAL_UART_Receive+0xe8>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80060ae:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b8:	d108      	bne.n	80060cc <HAL_UART_Receive+0x10c>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d104      	bne.n	80060cc <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	e003      	b.n	80060d4 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060d0:	2300      	movs	r3, #0
 80060d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80060dc:	e032      	b.n	8006144 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2200      	movs	r2, #0
 80060e6:	2120      	movs	r1, #32
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 fe8a 	bl	8006e02 <UART_WaitOnFlagUntilTimeout>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e032      	b.n	800615e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10c      	bne.n	8006118 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	b29a      	uxth	r2, r3
 8006106:	8a7b      	ldrh	r3, [r7, #18]
 8006108:	4013      	ands	r3, r2
 800610a:	b29a      	uxth	r2, r3
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	3302      	adds	r3, #2
 8006114:	61bb      	str	r3, [r7, #24]
 8006116:	e00c      	b.n	8006132 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	b2da      	uxtb	r2, r3
 8006120:	8a7b      	ldrh	r3, [r7, #18]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	4013      	ands	r3, r2
 8006126:	b2da      	uxtb	r2, r3
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	3301      	adds	r3, #1
 8006130:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1c6      	bne.n	80060de <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2220      	movs	r2, #32
 8006154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	e000      	b.n	800615e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800615c:	2302      	movs	r3, #2
  }
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006168:	b5b0      	push	{r4, r5, r7, lr}
 800616a:	b08e      	sub	sp, #56	; 0x38
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	4313      	orrs	r3, r2
 800618c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	4bbf      	ldr	r3, [pc, #764]	; (8006494 <UART_SetConfig+0x32c>)
 8006196:	4013      	ands	r3, r2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6812      	ldr	r2, [r2, #0]
 800619c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800619e:	430b      	orrs	r3, r1
 80061a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68da      	ldr	r2, [r3, #12]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4ab5      	ldr	r2, [pc, #724]	; (8006498 <UART_SetConfig+0x330>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d004      	beq.n	80061d2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061ce:	4313      	orrs	r3, r2
 80061d0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	4bb0      	ldr	r3, [pc, #704]	; (800649c <UART_SetConfig+0x334>)
 80061da:	4013      	ands	r3, r2
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6812      	ldr	r2, [r2, #0]
 80061e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061e2:	430b      	orrs	r3, r1
 80061e4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	f023 010f 	bic.w	r1, r3, #15
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4aa7      	ldr	r2, [pc, #668]	; (80064a0 <UART_SetConfig+0x338>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d176      	bne.n	80062f4 <UART_SetConfig+0x18c>
 8006206:	4ba7      	ldr	r3, [pc, #668]	; (80064a4 <UART_SetConfig+0x33c>)
 8006208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800620e:	2b28      	cmp	r3, #40	; 0x28
 8006210:	d86c      	bhi.n	80062ec <UART_SetConfig+0x184>
 8006212:	a201      	add	r2, pc, #4	; (adr r2, 8006218 <UART_SetConfig+0xb0>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	080062bd 	.word	0x080062bd
 800621c:	080062ed 	.word	0x080062ed
 8006220:	080062ed 	.word	0x080062ed
 8006224:	080062ed 	.word	0x080062ed
 8006228:	080062ed 	.word	0x080062ed
 800622c:	080062ed 	.word	0x080062ed
 8006230:	080062ed 	.word	0x080062ed
 8006234:	080062ed 	.word	0x080062ed
 8006238:	080062c5 	.word	0x080062c5
 800623c:	080062ed 	.word	0x080062ed
 8006240:	080062ed 	.word	0x080062ed
 8006244:	080062ed 	.word	0x080062ed
 8006248:	080062ed 	.word	0x080062ed
 800624c:	080062ed 	.word	0x080062ed
 8006250:	080062ed 	.word	0x080062ed
 8006254:	080062ed 	.word	0x080062ed
 8006258:	080062cd 	.word	0x080062cd
 800625c:	080062ed 	.word	0x080062ed
 8006260:	080062ed 	.word	0x080062ed
 8006264:	080062ed 	.word	0x080062ed
 8006268:	080062ed 	.word	0x080062ed
 800626c:	080062ed 	.word	0x080062ed
 8006270:	080062ed 	.word	0x080062ed
 8006274:	080062ed 	.word	0x080062ed
 8006278:	080062d5 	.word	0x080062d5
 800627c:	080062ed 	.word	0x080062ed
 8006280:	080062ed 	.word	0x080062ed
 8006284:	080062ed 	.word	0x080062ed
 8006288:	080062ed 	.word	0x080062ed
 800628c:	080062ed 	.word	0x080062ed
 8006290:	080062ed 	.word	0x080062ed
 8006294:	080062ed 	.word	0x080062ed
 8006298:	080062dd 	.word	0x080062dd
 800629c:	080062ed 	.word	0x080062ed
 80062a0:	080062ed 	.word	0x080062ed
 80062a4:	080062ed 	.word	0x080062ed
 80062a8:	080062ed 	.word	0x080062ed
 80062ac:	080062ed 	.word	0x080062ed
 80062b0:	080062ed 	.word	0x080062ed
 80062b4:	080062ed 	.word	0x080062ed
 80062b8:	080062e5 	.word	0x080062e5
 80062bc:	2301      	movs	r3, #1
 80062be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062c2:	e222      	b.n	800670a <UART_SetConfig+0x5a2>
 80062c4:	2304      	movs	r3, #4
 80062c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ca:	e21e      	b.n	800670a <UART_SetConfig+0x5a2>
 80062cc:	2308      	movs	r3, #8
 80062ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062d2:	e21a      	b.n	800670a <UART_SetConfig+0x5a2>
 80062d4:	2310      	movs	r3, #16
 80062d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062da:	e216      	b.n	800670a <UART_SetConfig+0x5a2>
 80062dc:	2320      	movs	r3, #32
 80062de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062e2:	e212      	b.n	800670a <UART_SetConfig+0x5a2>
 80062e4:	2340      	movs	r3, #64	; 0x40
 80062e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ea:	e20e      	b.n	800670a <UART_SetConfig+0x5a2>
 80062ec:	2380      	movs	r3, #128	; 0x80
 80062ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062f2:	e20a      	b.n	800670a <UART_SetConfig+0x5a2>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a6b      	ldr	r2, [pc, #428]	; (80064a8 <UART_SetConfig+0x340>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d130      	bne.n	8006360 <UART_SetConfig+0x1f8>
 80062fe:	4b69      	ldr	r3, [pc, #420]	; (80064a4 <UART_SetConfig+0x33c>)
 8006300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006302:	f003 0307 	and.w	r3, r3, #7
 8006306:	2b05      	cmp	r3, #5
 8006308:	d826      	bhi.n	8006358 <UART_SetConfig+0x1f0>
 800630a:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <UART_SetConfig+0x1a8>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	08006329 	.word	0x08006329
 8006314:	08006331 	.word	0x08006331
 8006318:	08006339 	.word	0x08006339
 800631c:	08006341 	.word	0x08006341
 8006320:	08006349 	.word	0x08006349
 8006324:	08006351 	.word	0x08006351
 8006328:	2300      	movs	r3, #0
 800632a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800632e:	e1ec      	b.n	800670a <UART_SetConfig+0x5a2>
 8006330:	2304      	movs	r3, #4
 8006332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006336:	e1e8      	b.n	800670a <UART_SetConfig+0x5a2>
 8006338:	2308      	movs	r3, #8
 800633a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800633e:	e1e4      	b.n	800670a <UART_SetConfig+0x5a2>
 8006340:	2310      	movs	r3, #16
 8006342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006346:	e1e0      	b.n	800670a <UART_SetConfig+0x5a2>
 8006348:	2320      	movs	r3, #32
 800634a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800634e:	e1dc      	b.n	800670a <UART_SetConfig+0x5a2>
 8006350:	2340      	movs	r3, #64	; 0x40
 8006352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006356:	e1d8      	b.n	800670a <UART_SetConfig+0x5a2>
 8006358:	2380      	movs	r3, #128	; 0x80
 800635a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800635e:	e1d4      	b.n	800670a <UART_SetConfig+0x5a2>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a51      	ldr	r2, [pc, #324]	; (80064ac <UART_SetConfig+0x344>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d130      	bne.n	80063cc <UART_SetConfig+0x264>
 800636a:	4b4e      	ldr	r3, [pc, #312]	; (80064a4 <UART_SetConfig+0x33c>)
 800636c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	2b05      	cmp	r3, #5
 8006374:	d826      	bhi.n	80063c4 <UART_SetConfig+0x25c>
 8006376:	a201      	add	r2, pc, #4	; (adr r2, 800637c <UART_SetConfig+0x214>)
 8006378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637c:	08006395 	.word	0x08006395
 8006380:	0800639d 	.word	0x0800639d
 8006384:	080063a5 	.word	0x080063a5
 8006388:	080063ad 	.word	0x080063ad
 800638c:	080063b5 	.word	0x080063b5
 8006390:	080063bd 	.word	0x080063bd
 8006394:	2300      	movs	r3, #0
 8006396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800639a:	e1b6      	b.n	800670a <UART_SetConfig+0x5a2>
 800639c:	2304      	movs	r3, #4
 800639e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063a2:	e1b2      	b.n	800670a <UART_SetConfig+0x5a2>
 80063a4:	2308      	movs	r3, #8
 80063a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063aa:	e1ae      	b.n	800670a <UART_SetConfig+0x5a2>
 80063ac:	2310      	movs	r3, #16
 80063ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063b2:	e1aa      	b.n	800670a <UART_SetConfig+0x5a2>
 80063b4:	2320      	movs	r3, #32
 80063b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ba:	e1a6      	b.n	800670a <UART_SetConfig+0x5a2>
 80063bc:	2340      	movs	r3, #64	; 0x40
 80063be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063c2:	e1a2      	b.n	800670a <UART_SetConfig+0x5a2>
 80063c4:	2380      	movs	r3, #128	; 0x80
 80063c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ca:	e19e      	b.n	800670a <UART_SetConfig+0x5a2>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a37      	ldr	r2, [pc, #220]	; (80064b0 <UART_SetConfig+0x348>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d130      	bne.n	8006438 <UART_SetConfig+0x2d0>
 80063d6:	4b33      	ldr	r3, [pc, #204]	; (80064a4 <UART_SetConfig+0x33c>)
 80063d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	2b05      	cmp	r3, #5
 80063e0:	d826      	bhi.n	8006430 <UART_SetConfig+0x2c8>
 80063e2:	a201      	add	r2, pc, #4	; (adr r2, 80063e8 <UART_SetConfig+0x280>)
 80063e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e8:	08006401 	.word	0x08006401
 80063ec:	08006409 	.word	0x08006409
 80063f0:	08006411 	.word	0x08006411
 80063f4:	08006419 	.word	0x08006419
 80063f8:	08006421 	.word	0x08006421
 80063fc:	08006429 	.word	0x08006429
 8006400:	2300      	movs	r3, #0
 8006402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006406:	e180      	b.n	800670a <UART_SetConfig+0x5a2>
 8006408:	2304      	movs	r3, #4
 800640a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800640e:	e17c      	b.n	800670a <UART_SetConfig+0x5a2>
 8006410:	2308      	movs	r3, #8
 8006412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006416:	e178      	b.n	800670a <UART_SetConfig+0x5a2>
 8006418:	2310      	movs	r3, #16
 800641a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800641e:	e174      	b.n	800670a <UART_SetConfig+0x5a2>
 8006420:	2320      	movs	r3, #32
 8006422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006426:	e170      	b.n	800670a <UART_SetConfig+0x5a2>
 8006428:	2340      	movs	r3, #64	; 0x40
 800642a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800642e:	e16c      	b.n	800670a <UART_SetConfig+0x5a2>
 8006430:	2380      	movs	r3, #128	; 0x80
 8006432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006436:	e168      	b.n	800670a <UART_SetConfig+0x5a2>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1d      	ldr	r2, [pc, #116]	; (80064b4 <UART_SetConfig+0x34c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d142      	bne.n	80064c8 <UART_SetConfig+0x360>
 8006442:	4b18      	ldr	r3, [pc, #96]	; (80064a4 <UART_SetConfig+0x33c>)
 8006444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	2b05      	cmp	r3, #5
 800644c:	d838      	bhi.n	80064c0 <UART_SetConfig+0x358>
 800644e:	a201      	add	r2, pc, #4	; (adr r2, 8006454 <UART_SetConfig+0x2ec>)
 8006450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006454:	0800646d 	.word	0x0800646d
 8006458:	08006475 	.word	0x08006475
 800645c:	0800647d 	.word	0x0800647d
 8006460:	08006485 	.word	0x08006485
 8006464:	0800648d 	.word	0x0800648d
 8006468:	080064b9 	.word	0x080064b9
 800646c:	2300      	movs	r3, #0
 800646e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006472:	e14a      	b.n	800670a <UART_SetConfig+0x5a2>
 8006474:	2304      	movs	r3, #4
 8006476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800647a:	e146      	b.n	800670a <UART_SetConfig+0x5a2>
 800647c:	2308      	movs	r3, #8
 800647e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006482:	e142      	b.n	800670a <UART_SetConfig+0x5a2>
 8006484:	2310      	movs	r3, #16
 8006486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800648a:	e13e      	b.n	800670a <UART_SetConfig+0x5a2>
 800648c:	2320      	movs	r3, #32
 800648e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006492:	e13a      	b.n	800670a <UART_SetConfig+0x5a2>
 8006494:	cfff69f3 	.word	0xcfff69f3
 8006498:	58000c00 	.word	0x58000c00
 800649c:	11fff4ff 	.word	0x11fff4ff
 80064a0:	40011000 	.word	0x40011000
 80064a4:	58024400 	.word	0x58024400
 80064a8:	40004400 	.word	0x40004400
 80064ac:	40004800 	.word	0x40004800
 80064b0:	40004c00 	.word	0x40004c00
 80064b4:	40005000 	.word	0x40005000
 80064b8:	2340      	movs	r3, #64	; 0x40
 80064ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064be:	e124      	b.n	800670a <UART_SetConfig+0x5a2>
 80064c0:	2380      	movs	r3, #128	; 0x80
 80064c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064c6:	e120      	b.n	800670a <UART_SetConfig+0x5a2>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4acc      	ldr	r2, [pc, #816]	; (8006800 <UART_SetConfig+0x698>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d176      	bne.n	80065c0 <UART_SetConfig+0x458>
 80064d2:	4bcc      	ldr	r3, [pc, #816]	; (8006804 <UART_SetConfig+0x69c>)
 80064d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064da:	2b28      	cmp	r3, #40	; 0x28
 80064dc:	d86c      	bhi.n	80065b8 <UART_SetConfig+0x450>
 80064de:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <UART_SetConfig+0x37c>)
 80064e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e4:	08006589 	.word	0x08006589
 80064e8:	080065b9 	.word	0x080065b9
 80064ec:	080065b9 	.word	0x080065b9
 80064f0:	080065b9 	.word	0x080065b9
 80064f4:	080065b9 	.word	0x080065b9
 80064f8:	080065b9 	.word	0x080065b9
 80064fc:	080065b9 	.word	0x080065b9
 8006500:	080065b9 	.word	0x080065b9
 8006504:	08006591 	.word	0x08006591
 8006508:	080065b9 	.word	0x080065b9
 800650c:	080065b9 	.word	0x080065b9
 8006510:	080065b9 	.word	0x080065b9
 8006514:	080065b9 	.word	0x080065b9
 8006518:	080065b9 	.word	0x080065b9
 800651c:	080065b9 	.word	0x080065b9
 8006520:	080065b9 	.word	0x080065b9
 8006524:	08006599 	.word	0x08006599
 8006528:	080065b9 	.word	0x080065b9
 800652c:	080065b9 	.word	0x080065b9
 8006530:	080065b9 	.word	0x080065b9
 8006534:	080065b9 	.word	0x080065b9
 8006538:	080065b9 	.word	0x080065b9
 800653c:	080065b9 	.word	0x080065b9
 8006540:	080065b9 	.word	0x080065b9
 8006544:	080065a1 	.word	0x080065a1
 8006548:	080065b9 	.word	0x080065b9
 800654c:	080065b9 	.word	0x080065b9
 8006550:	080065b9 	.word	0x080065b9
 8006554:	080065b9 	.word	0x080065b9
 8006558:	080065b9 	.word	0x080065b9
 800655c:	080065b9 	.word	0x080065b9
 8006560:	080065b9 	.word	0x080065b9
 8006564:	080065a9 	.word	0x080065a9
 8006568:	080065b9 	.word	0x080065b9
 800656c:	080065b9 	.word	0x080065b9
 8006570:	080065b9 	.word	0x080065b9
 8006574:	080065b9 	.word	0x080065b9
 8006578:	080065b9 	.word	0x080065b9
 800657c:	080065b9 	.word	0x080065b9
 8006580:	080065b9 	.word	0x080065b9
 8006584:	080065b1 	.word	0x080065b1
 8006588:	2301      	movs	r3, #1
 800658a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800658e:	e0bc      	b.n	800670a <UART_SetConfig+0x5a2>
 8006590:	2304      	movs	r3, #4
 8006592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006596:	e0b8      	b.n	800670a <UART_SetConfig+0x5a2>
 8006598:	2308      	movs	r3, #8
 800659a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800659e:	e0b4      	b.n	800670a <UART_SetConfig+0x5a2>
 80065a0:	2310      	movs	r3, #16
 80065a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065a6:	e0b0      	b.n	800670a <UART_SetConfig+0x5a2>
 80065a8:	2320      	movs	r3, #32
 80065aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ae:	e0ac      	b.n	800670a <UART_SetConfig+0x5a2>
 80065b0:	2340      	movs	r3, #64	; 0x40
 80065b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065b6:	e0a8      	b.n	800670a <UART_SetConfig+0x5a2>
 80065b8:	2380      	movs	r3, #128	; 0x80
 80065ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065be:	e0a4      	b.n	800670a <UART_SetConfig+0x5a2>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a90      	ldr	r2, [pc, #576]	; (8006808 <UART_SetConfig+0x6a0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d130      	bne.n	800662c <UART_SetConfig+0x4c4>
 80065ca:	4b8e      	ldr	r3, [pc, #568]	; (8006804 <UART_SetConfig+0x69c>)
 80065cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	2b05      	cmp	r3, #5
 80065d4:	d826      	bhi.n	8006624 <UART_SetConfig+0x4bc>
 80065d6:	a201      	add	r2, pc, #4	; (adr r2, 80065dc <UART_SetConfig+0x474>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	080065f5 	.word	0x080065f5
 80065e0:	080065fd 	.word	0x080065fd
 80065e4:	08006605 	.word	0x08006605
 80065e8:	0800660d 	.word	0x0800660d
 80065ec:	08006615 	.word	0x08006615
 80065f0:	0800661d 	.word	0x0800661d
 80065f4:	2300      	movs	r3, #0
 80065f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065fa:	e086      	b.n	800670a <UART_SetConfig+0x5a2>
 80065fc:	2304      	movs	r3, #4
 80065fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006602:	e082      	b.n	800670a <UART_SetConfig+0x5a2>
 8006604:	2308      	movs	r3, #8
 8006606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800660a:	e07e      	b.n	800670a <UART_SetConfig+0x5a2>
 800660c:	2310      	movs	r3, #16
 800660e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006612:	e07a      	b.n	800670a <UART_SetConfig+0x5a2>
 8006614:	2320      	movs	r3, #32
 8006616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800661a:	e076      	b.n	800670a <UART_SetConfig+0x5a2>
 800661c:	2340      	movs	r3, #64	; 0x40
 800661e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006622:	e072      	b.n	800670a <UART_SetConfig+0x5a2>
 8006624:	2380      	movs	r3, #128	; 0x80
 8006626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800662a:	e06e      	b.n	800670a <UART_SetConfig+0x5a2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a76      	ldr	r2, [pc, #472]	; (800680c <UART_SetConfig+0x6a4>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d130      	bne.n	8006698 <UART_SetConfig+0x530>
 8006636:	4b73      	ldr	r3, [pc, #460]	; (8006804 <UART_SetConfig+0x69c>)
 8006638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	2b05      	cmp	r3, #5
 8006640:	d826      	bhi.n	8006690 <UART_SetConfig+0x528>
 8006642:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <UART_SetConfig+0x4e0>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	08006661 	.word	0x08006661
 800664c:	08006669 	.word	0x08006669
 8006650:	08006671 	.word	0x08006671
 8006654:	08006679 	.word	0x08006679
 8006658:	08006681 	.word	0x08006681
 800665c:	08006689 	.word	0x08006689
 8006660:	2300      	movs	r3, #0
 8006662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006666:	e050      	b.n	800670a <UART_SetConfig+0x5a2>
 8006668:	2304      	movs	r3, #4
 800666a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800666e:	e04c      	b.n	800670a <UART_SetConfig+0x5a2>
 8006670:	2308      	movs	r3, #8
 8006672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006676:	e048      	b.n	800670a <UART_SetConfig+0x5a2>
 8006678:	2310      	movs	r3, #16
 800667a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800667e:	e044      	b.n	800670a <UART_SetConfig+0x5a2>
 8006680:	2320      	movs	r3, #32
 8006682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006686:	e040      	b.n	800670a <UART_SetConfig+0x5a2>
 8006688:	2340      	movs	r3, #64	; 0x40
 800668a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800668e:	e03c      	b.n	800670a <UART_SetConfig+0x5a2>
 8006690:	2380      	movs	r3, #128	; 0x80
 8006692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006696:	e038      	b.n	800670a <UART_SetConfig+0x5a2>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a5c      	ldr	r2, [pc, #368]	; (8006810 <UART_SetConfig+0x6a8>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d130      	bne.n	8006704 <UART_SetConfig+0x59c>
 80066a2:	4b58      	ldr	r3, [pc, #352]	; (8006804 <UART_SetConfig+0x69c>)
 80066a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	2b05      	cmp	r3, #5
 80066ac:	d826      	bhi.n	80066fc <UART_SetConfig+0x594>
 80066ae:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <UART_SetConfig+0x54c>)
 80066b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b4:	080066cd 	.word	0x080066cd
 80066b8:	080066d5 	.word	0x080066d5
 80066bc:	080066dd 	.word	0x080066dd
 80066c0:	080066e5 	.word	0x080066e5
 80066c4:	080066ed 	.word	0x080066ed
 80066c8:	080066f5 	.word	0x080066f5
 80066cc:	2302      	movs	r3, #2
 80066ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066d2:	e01a      	b.n	800670a <UART_SetConfig+0x5a2>
 80066d4:	2304      	movs	r3, #4
 80066d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066da:	e016      	b.n	800670a <UART_SetConfig+0x5a2>
 80066dc:	2308      	movs	r3, #8
 80066de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066e2:	e012      	b.n	800670a <UART_SetConfig+0x5a2>
 80066e4:	2310      	movs	r3, #16
 80066e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ea:	e00e      	b.n	800670a <UART_SetConfig+0x5a2>
 80066ec:	2320      	movs	r3, #32
 80066ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066f2:	e00a      	b.n	800670a <UART_SetConfig+0x5a2>
 80066f4:	2340      	movs	r3, #64	; 0x40
 80066f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066fa:	e006      	b.n	800670a <UART_SetConfig+0x5a2>
 80066fc:	2380      	movs	r3, #128	; 0x80
 80066fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006702:	e002      	b.n	800670a <UART_SetConfig+0x5a2>
 8006704:	2380      	movs	r3, #128	; 0x80
 8006706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a40      	ldr	r2, [pc, #256]	; (8006810 <UART_SetConfig+0x6a8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	f040 80ef 	bne.w	80068f4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006716:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800671a:	2b20      	cmp	r3, #32
 800671c:	dc46      	bgt.n	80067ac <UART_SetConfig+0x644>
 800671e:	2b02      	cmp	r3, #2
 8006720:	f2c0 8081 	blt.w	8006826 <UART_SetConfig+0x6be>
 8006724:	3b02      	subs	r3, #2
 8006726:	2b1e      	cmp	r3, #30
 8006728:	d87d      	bhi.n	8006826 <UART_SetConfig+0x6be>
 800672a:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <UART_SetConfig+0x5c8>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	080067b3 	.word	0x080067b3
 8006734:	08006827 	.word	0x08006827
 8006738:	080067bb 	.word	0x080067bb
 800673c:	08006827 	.word	0x08006827
 8006740:	08006827 	.word	0x08006827
 8006744:	08006827 	.word	0x08006827
 8006748:	080067cb 	.word	0x080067cb
 800674c:	08006827 	.word	0x08006827
 8006750:	08006827 	.word	0x08006827
 8006754:	08006827 	.word	0x08006827
 8006758:	08006827 	.word	0x08006827
 800675c:	08006827 	.word	0x08006827
 8006760:	08006827 	.word	0x08006827
 8006764:	08006827 	.word	0x08006827
 8006768:	080067db 	.word	0x080067db
 800676c:	08006827 	.word	0x08006827
 8006770:	08006827 	.word	0x08006827
 8006774:	08006827 	.word	0x08006827
 8006778:	08006827 	.word	0x08006827
 800677c:	08006827 	.word	0x08006827
 8006780:	08006827 	.word	0x08006827
 8006784:	08006827 	.word	0x08006827
 8006788:	08006827 	.word	0x08006827
 800678c:	08006827 	.word	0x08006827
 8006790:	08006827 	.word	0x08006827
 8006794:	08006827 	.word	0x08006827
 8006798:	08006827 	.word	0x08006827
 800679c:	08006827 	.word	0x08006827
 80067a0:	08006827 	.word	0x08006827
 80067a4:	08006827 	.word	0x08006827
 80067a8:	08006819 	.word	0x08006819
 80067ac:	2b40      	cmp	r3, #64	; 0x40
 80067ae:	d036      	beq.n	800681e <UART_SetConfig+0x6b6>
 80067b0:	e039      	b.n	8006826 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80067b2:	f7fd fdeb 	bl	800438c <HAL_RCCEx_GetD3PCLK1Freq>
 80067b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80067b8:	e03b      	b.n	8006832 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ba:	f107 0314 	add.w	r3, r7, #20
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fd fdfa 	bl	80043b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067c8:	e033      	b.n	8006832 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067ca:	f107 0308 	add.w	r3, r7, #8
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fd ff46 	bl	8004660 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067d8:	e02b      	b.n	8006832 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067da:	4b0a      	ldr	r3, [pc, #40]	; (8006804 <UART_SetConfig+0x69c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0320 	and.w	r3, r3, #32
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d009      	beq.n	80067fa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067e6:	4b07      	ldr	r3, [pc, #28]	; (8006804 <UART_SetConfig+0x69c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	08db      	lsrs	r3, r3, #3
 80067ec:	f003 0303 	and.w	r3, r3, #3
 80067f0:	4a08      	ldr	r2, [pc, #32]	; (8006814 <UART_SetConfig+0x6ac>)
 80067f2:	fa22 f303 	lsr.w	r3, r2, r3
 80067f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067f8:	e01b      	b.n	8006832 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80067fa:	4b06      	ldr	r3, [pc, #24]	; (8006814 <UART_SetConfig+0x6ac>)
 80067fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067fe:	e018      	b.n	8006832 <UART_SetConfig+0x6ca>
 8006800:	40011400 	.word	0x40011400
 8006804:	58024400 	.word	0x58024400
 8006808:	40007800 	.word	0x40007800
 800680c:	40007c00 	.word	0x40007c00
 8006810:	58000c00 	.word	0x58000c00
 8006814:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006818:	4bc4      	ldr	r3, [pc, #784]	; (8006b2c <UART_SetConfig+0x9c4>)
 800681a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800681c:	e009      	b.n	8006832 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800681e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006822:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006824:	e005      	b.n	8006832 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006830:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 81da 	beq.w	8006bee <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	4abc      	ldr	r2, [pc, #752]	; (8006b30 <UART_SetConfig+0x9c8>)
 8006840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006844:	461a      	mov	r2, r3
 8006846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006848:	fbb3 f3f2 	udiv	r3, r3, r2
 800684c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	4613      	mov	r3, r2
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	4413      	add	r3, r2
 8006858:	6a3a      	ldr	r2, [r7, #32]
 800685a:	429a      	cmp	r2, r3
 800685c:	d305      	bcc.n	800686a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006864:	6a3a      	ldr	r2, [r7, #32]
 8006866:	429a      	cmp	r2, r3
 8006868:	d903      	bls.n	8006872 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006870:	e1bd      	b.n	8006bee <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	4618      	mov	r0, r3
 8006876:	f04f 0100 	mov.w	r1, #0
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	4aac      	ldr	r2, [pc, #688]	; (8006b30 <UART_SetConfig+0x9c8>)
 8006880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006884:	b29a      	uxth	r2, r3
 8006886:	f04f 0300 	mov.w	r3, #0
 800688a:	f7f9 fd25 	bl	80002d8 <__aeabi_uldivmod>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4610      	mov	r0, r2
 8006894:	4619      	mov	r1, r3
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	020b      	lsls	r3, r1, #8
 80068a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068a4:	0202      	lsls	r2, r0, #8
 80068a6:	6879      	ldr	r1, [r7, #4]
 80068a8:	6849      	ldr	r1, [r1, #4]
 80068aa:	0849      	lsrs	r1, r1, #1
 80068ac:	4608      	mov	r0, r1
 80068ae:	f04f 0100 	mov.w	r1, #0
 80068b2:	1814      	adds	r4, r2, r0
 80068b4:	eb43 0501 	adc.w	r5, r3, r1
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	461a      	mov	r2, r3
 80068be:	f04f 0300 	mov.w	r3, #0
 80068c2:	4620      	mov	r0, r4
 80068c4:	4629      	mov	r1, r5
 80068c6:	f7f9 fd07 	bl	80002d8 <__aeabi_uldivmod>
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	4613      	mov	r3, r2
 80068d0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068d8:	d308      	bcc.n	80068ec <UART_SetConfig+0x784>
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068e0:	d204      	bcs.n	80068ec <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068e8:	60da      	str	r2, [r3, #12]
 80068ea:	e180      	b.n	8006bee <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80068f2:	e17c      	b.n	8006bee <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	69db      	ldr	r3, [r3, #28]
 80068f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068fc:	f040 80be 	bne.w	8006a7c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8006900:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006904:	2b20      	cmp	r3, #32
 8006906:	dc49      	bgt.n	800699c <UART_SetConfig+0x834>
 8006908:	2b00      	cmp	r3, #0
 800690a:	db7c      	blt.n	8006a06 <UART_SetConfig+0x89e>
 800690c:	2b20      	cmp	r3, #32
 800690e:	d87a      	bhi.n	8006a06 <UART_SetConfig+0x89e>
 8006910:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <UART_SetConfig+0x7b0>)
 8006912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006916:	bf00      	nop
 8006918:	080069a3 	.word	0x080069a3
 800691c:	080069ab 	.word	0x080069ab
 8006920:	08006a07 	.word	0x08006a07
 8006924:	08006a07 	.word	0x08006a07
 8006928:	080069b3 	.word	0x080069b3
 800692c:	08006a07 	.word	0x08006a07
 8006930:	08006a07 	.word	0x08006a07
 8006934:	08006a07 	.word	0x08006a07
 8006938:	080069c3 	.word	0x080069c3
 800693c:	08006a07 	.word	0x08006a07
 8006940:	08006a07 	.word	0x08006a07
 8006944:	08006a07 	.word	0x08006a07
 8006948:	08006a07 	.word	0x08006a07
 800694c:	08006a07 	.word	0x08006a07
 8006950:	08006a07 	.word	0x08006a07
 8006954:	08006a07 	.word	0x08006a07
 8006958:	080069d3 	.word	0x080069d3
 800695c:	08006a07 	.word	0x08006a07
 8006960:	08006a07 	.word	0x08006a07
 8006964:	08006a07 	.word	0x08006a07
 8006968:	08006a07 	.word	0x08006a07
 800696c:	08006a07 	.word	0x08006a07
 8006970:	08006a07 	.word	0x08006a07
 8006974:	08006a07 	.word	0x08006a07
 8006978:	08006a07 	.word	0x08006a07
 800697c:	08006a07 	.word	0x08006a07
 8006980:	08006a07 	.word	0x08006a07
 8006984:	08006a07 	.word	0x08006a07
 8006988:	08006a07 	.word	0x08006a07
 800698c:	08006a07 	.word	0x08006a07
 8006990:	08006a07 	.word	0x08006a07
 8006994:	08006a07 	.word	0x08006a07
 8006998:	080069f9 	.word	0x080069f9
 800699c:	2b40      	cmp	r3, #64	; 0x40
 800699e:	d02e      	beq.n	80069fe <UART_SetConfig+0x896>
 80069a0:	e031      	b.n	8006a06 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069a2:	f7fc fd87 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 80069a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80069a8:	e033      	b.n	8006a12 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069aa:	f7fc fd99 	bl	80034e0 <HAL_RCC_GetPCLK2Freq>
 80069ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80069b0:	e02f      	b.n	8006a12 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069b2:	f107 0314 	add.w	r3, r7, #20
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fd fcfe 	bl	80043b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069c0:	e027      	b.n	8006a12 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069c2:	f107 0308 	add.w	r3, r7, #8
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fd fe4a 	bl	8004660 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069d0:	e01f      	b.n	8006a12 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069d2:	4b58      	ldr	r3, [pc, #352]	; (8006b34 <UART_SetConfig+0x9cc>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0320 	and.w	r3, r3, #32
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d009      	beq.n	80069f2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069de:	4b55      	ldr	r3, [pc, #340]	; (8006b34 <UART_SetConfig+0x9cc>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	08db      	lsrs	r3, r3, #3
 80069e4:	f003 0303 	and.w	r3, r3, #3
 80069e8:	4a53      	ldr	r2, [pc, #332]	; (8006b38 <UART_SetConfig+0x9d0>)
 80069ea:	fa22 f303 	lsr.w	r3, r2, r3
 80069ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069f0:	e00f      	b.n	8006a12 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80069f2:	4b51      	ldr	r3, [pc, #324]	; (8006b38 <UART_SetConfig+0x9d0>)
 80069f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069f6:	e00c      	b.n	8006a12 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069f8:	4b4c      	ldr	r3, [pc, #304]	; (8006b2c <UART_SetConfig+0x9c4>)
 80069fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069fc:	e009      	b.n	8006a12 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a04:	e005      	b.n	8006a12 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006a10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 80ea 	beq.w	8006bee <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	4a44      	ldr	r2, [pc, #272]	; (8006b30 <UART_SetConfig+0x9c8>)
 8006a20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a24:	461a      	mov	r2, r3
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a2c:	005a      	lsls	r2, r3, #1
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	085b      	lsrs	r3, r3, #1
 8006a34:	441a      	add	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a3e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	2b0f      	cmp	r3, #15
 8006a44:	d916      	bls.n	8006a74 <UART_SetConfig+0x90c>
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a4c:	d212      	bcs.n	8006a74 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	f023 030f 	bic.w	r3, r3, #15
 8006a56:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5a:	085b      	lsrs	r3, r3, #1
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a66:	4313      	orrs	r3, r2
 8006a68:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a70:	60da      	str	r2, [r3, #12]
 8006a72:	e0bc      	b.n	8006bee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006a7a:	e0b8      	b.n	8006bee <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a80:	2b20      	cmp	r3, #32
 8006a82:	dc4b      	bgt.n	8006b1c <UART_SetConfig+0x9b4>
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f2c0 8087 	blt.w	8006b98 <UART_SetConfig+0xa30>
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	f200 8084 	bhi.w	8006b98 <UART_SetConfig+0xa30>
 8006a90:	a201      	add	r2, pc, #4	; (adr r2, 8006a98 <UART_SetConfig+0x930>)
 8006a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a96:	bf00      	nop
 8006a98:	08006b23 	.word	0x08006b23
 8006a9c:	08006b3d 	.word	0x08006b3d
 8006aa0:	08006b99 	.word	0x08006b99
 8006aa4:	08006b99 	.word	0x08006b99
 8006aa8:	08006b45 	.word	0x08006b45
 8006aac:	08006b99 	.word	0x08006b99
 8006ab0:	08006b99 	.word	0x08006b99
 8006ab4:	08006b99 	.word	0x08006b99
 8006ab8:	08006b55 	.word	0x08006b55
 8006abc:	08006b99 	.word	0x08006b99
 8006ac0:	08006b99 	.word	0x08006b99
 8006ac4:	08006b99 	.word	0x08006b99
 8006ac8:	08006b99 	.word	0x08006b99
 8006acc:	08006b99 	.word	0x08006b99
 8006ad0:	08006b99 	.word	0x08006b99
 8006ad4:	08006b99 	.word	0x08006b99
 8006ad8:	08006b65 	.word	0x08006b65
 8006adc:	08006b99 	.word	0x08006b99
 8006ae0:	08006b99 	.word	0x08006b99
 8006ae4:	08006b99 	.word	0x08006b99
 8006ae8:	08006b99 	.word	0x08006b99
 8006aec:	08006b99 	.word	0x08006b99
 8006af0:	08006b99 	.word	0x08006b99
 8006af4:	08006b99 	.word	0x08006b99
 8006af8:	08006b99 	.word	0x08006b99
 8006afc:	08006b99 	.word	0x08006b99
 8006b00:	08006b99 	.word	0x08006b99
 8006b04:	08006b99 	.word	0x08006b99
 8006b08:	08006b99 	.word	0x08006b99
 8006b0c:	08006b99 	.word	0x08006b99
 8006b10:	08006b99 	.word	0x08006b99
 8006b14:	08006b99 	.word	0x08006b99
 8006b18:	08006b8b 	.word	0x08006b8b
 8006b1c:	2b40      	cmp	r3, #64	; 0x40
 8006b1e:	d037      	beq.n	8006b90 <UART_SetConfig+0xa28>
 8006b20:	e03a      	b.n	8006b98 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b22:	f7fc fcc7 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8006b26:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006b28:	e03c      	b.n	8006ba4 <UART_SetConfig+0xa3c>
 8006b2a:	bf00      	nop
 8006b2c:	003d0900 	.word	0x003d0900
 8006b30:	08007218 	.word	0x08007218
 8006b34:	58024400 	.word	0x58024400
 8006b38:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b3c:	f7fc fcd0 	bl	80034e0 <HAL_RCC_GetPCLK2Freq>
 8006b40:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006b42:	e02f      	b.n	8006ba4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b44:	f107 0314 	add.w	r3, r7, #20
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7fd fc35 	bl	80043b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b52:	e027      	b.n	8006ba4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b54:	f107 0308 	add.w	r3, r7, #8
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fd fd81 	bl	8004660 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b62:	e01f      	b.n	8006ba4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b64:	4b2c      	ldr	r3, [pc, #176]	; (8006c18 <UART_SetConfig+0xab0>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0320 	and.w	r3, r3, #32
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d009      	beq.n	8006b84 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b70:	4b29      	ldr	r3, [pc, #164]	; (8006c18 <UART_SetConfig+0xab0>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	08db      	lsrs	r3, r3, #3
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	4a28      	ldr	r2, [pc, #160]	; (8006c1c <UART_SetConfig+0xab4>)
 8006b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b82:	e00f      	b.n	8006ba4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006b84:	4b25      	ldr	r3, [pc, #148]	; (8006c1c <UART_SetConfig+0xab4>)
 8006b86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b88:	e00c      	b.n	8006ba4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b8a:	4b25      	ldr	r3, [pc, #148]	; (8006c20 <UART_SetConfig+0xab8>)
 8006b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b8e:	e009      	b.n	8006ba4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b96:	e005      	b.n	8006ba4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006ba2:	bf00      	nop
    }

    if (pclk != 0U)
 8006ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d021      	beq.n	8006bee <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <UART_SetConfig+0xabc>)
 8006bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb8:	fbb3 f2f2 	udiv	r2, r3, r2
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	085b      	lsrs	r3, r3, #1
 8006bc2:	441a      	add	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bcc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	2b0f      	cmp	r3, #15
 8006bd2:	d909      	bls.n	8006be8 <UART_SetConfig+0xa80>
 8006bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bda:	d205      	bcs.n	8006be8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	60da      	str	r2, [r3, #12]
 8006be6:	e002      	b.n	8006bee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006c0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3738      	adds	r7, #56	; 0x38
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bdb0      	pop	{r4, r5, r7, pc}
 8006c16:	bf00      	nop
 8006c18:	58024400 	.word	0x58024400
 8006c1c:	03d09000 	.word	0x03d09000
 8006c20:	003d0900 	.word	0x003d0900
 8006c24:	08007218 	.word	0x08007218

08006c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00a      	beq.n	8006c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c78:	f003 0304 	and.w	r3, r3, #4
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00a      	beq.n	8006c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9a:	f003 0308 	and.w	r3, r3, #8
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbc:	f003 0310 	and.w	r3, r3, #16
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00a      	beq.n	8006cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00a      	beq.n	8006cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d01a      	beq.n	8006d3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d26:	d10a      	bne.n	8006d3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00a      	beq.n	8006d60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	605a      	str	r2, [r3, #4]
  }
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d7c:	f7fb f8ec 	bl	8001f58 <HAL_GetTick>
 8006d80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0308 	and.w	r3, r3, #8
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	d10e      	bne.n	8006dae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f82f 	bl	8006e02 <UART_WaitOnFlagUntilTimeout>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e025      	b.n	8006dfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0304 	and.w	r3, r3, #4
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	d10e      	bne.n	8006dda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f819 	bl	8006e02 <UART_WaitOnFlagUntilTimeout>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e00f      	b.n	8006dfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2220      	movs	r2, #32
 8006de6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b09c      	sub	sp, #112	; 0x70
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	603b      	str	r3, [r7, #0]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e12:	e0a9      	b.n	8006f68 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1a:	f000 80a5 	beq.w	8006f68 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e1e:	f7fb f89b 	bl	8001f58 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d302      	bcc.n	8006e34 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d140      	bne.n	8006eb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e48:	667b      	str	r3, [r7, #100]	; 0x64
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e5a:	e841 2300 	strex	r3, r2, [r1]
 8006e5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e6      	bne.n	8006e34 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3308      	adds	r3, #8
 8006e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	f023 0301 	bic.w	r3, r3, #1
 8006e7c:	663b      	str	r3, [r7, #96]	; 0x60
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3308      	adds	r3, #8
 8006e84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e86:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e5      	bne.n	8006e66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e069      	b.n	8006f8a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d051      	beq.n	8006f68 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ed2:	d149      	bne.n	8006f68 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006edc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006efc:	637b      	str	r3, [r7, #52]	; 0x34
 8006efe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e6      	bne.n	8006ede <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3308      	adds	r3, #8
 8006f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f023 0301 	bic.w	r3, r3, #1
 8006f26:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f30:	623a      	str	r2, [r7, #32]
 8006f32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	69f9      	ldr	r1, [r7, #28]
 8006f36:	6a3a      	ldr	r2, [r7, #32]
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e5      	bne.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2220      	movs	r2, #32
 8006f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e010      	b.n	8006f8a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	69da      	ldr	r2, [r3, #28]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	4013      	ands	r3, r2
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	bf0c      	ite	eq
 8006f78:	2301      	moveq	r3, #1
 8006f7a:	2300      	movne	r3, #0
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	461a      	mov	r2, r3
 8006f80:	79fb      	ldrb	r3, [r7, #7]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	f43f af46 	beq.w	8006e14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3770      	adds	r7, #112	; 0x70
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b085      	sub	sp, #20
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d101      	bne.n	8006fa8 <HAL_UARTEx_DisableFifoMode+0x16>
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	e027      	b.n	8006ff8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2224      	movs	r2, #36	; 0x24
 8006fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0201 	bic.w	r2, r2, #1
 8006fce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006fd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007014:	2b01      	cmp	r3, #1
 8007016:	d101      	bne.n	800701c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007018:	2302      	movs	r3, #2
 800701a:	e02d      	b.n	8007078 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2224      	movs	r2, #36	; 0x24
 8007028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0201 	bic.w	r2, r2, #1
 8007042:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f84f 	bl	80070fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2220      	movs	r2, #32
 800706a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007090:	2b01      	cmp	r3, #1
 8007092:	d101      	bne.n	8007098 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007094:	2302      	movs	r3, #2
 8007096:	e02d      	b.n	80070f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2224      	movs	r2, #36	; 0x24
 80070a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 0201 	bic.w	r2, r2, #1
 80070be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f811 	bl	80070fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2220      	movs	r2, #32
 80070e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007108:	2b00      	cmp	r3, #0
 800710a:	d108      	bne.n	800711e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800711c:	e031      	b.n	8007182 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800711e:	2310      	movs	r3, #16
 8007120:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007122:	2310      	movs	r3, #16
 8007124:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	0e5b      	lsrs	r3, r3, #25
 800712e:	b2db      	uxtb	r3, r3
 8007130:	f003 0307 	and.w	r3, r3, #7
 8007134:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	0f5b      	lsrs	r3, r3, #29
 800713e:	b2db      	uxtb	r3, r3
 8007140:	f003 0307 	and.w	r3, r3, #7
 8007144:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007146:	7bbb      	ldrb	r3, [r7, #14]
 8007148:	7b3a      	ldrb	r2, [r7, #12]
 800714a:	4911      	ldr	r1, [pc, #68]	; (8007190 <UARTEx_SetNbDataToProcess+0x94>)
 800714c:	5c8a      	ldrb	r2, [r1, r2]
 800714e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007152:	7b3a      	ldrb	r2, [r7, #12]
 8007154:	490f      	ldr	r1, [pc, #60]	; (8007194 <UARTEx_SetNbDataToProcess+0x98>)
 8007156:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007158:	fb93 f3f2 	sdiv	r3, r3, r2
 800715c:	b29a      	uxth	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007164:	7bfb      	ldrb	r3, [r7, #15]
 8007166:	7b7a      	ldrb	r2, [r7, #13]
 8007168:	4909      	ldr	r1, [pc, #36]	; (8007190 <UARTEx_SetNbDataToProcess+0x94>)
 800716a:	5c8a      	ldrb	r2, [r1, r2]
 800716c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007170:	7b7a      	ldrb	r2, [r7, #13]
 8007172:	4908      	ldr	r1, [pc, #32]	; (8007194 <UARTEx_SetNbDataToProcess+0x98>)
 8007174:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007176:	fb93 f3f2 	sdiv	r3, r3, r2
 800717a:	b29a      	uxth	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007182:	bf00      	nop
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	08007230 	.word	0x08007230
 8007194:	08007238 	.word	0x08007238

08007198 <__libc_init_array>:
 8007198:	b570      	push	{r4, r5, r6, lr}
 800719a:	4d0d      	ldr	r5, [pc, #52]	; (80071d0 <__libc_init_array+0x38>)
 800719c:	4c0d      	ldr	r4, [pc, #52]	; (80071d4 <__libc_init_array+0x3c>)
 800719e:	1b64      	subs	r4, r4, r5
 80071a0:	10a4      	asrs	r4, r4, #2
 80071a2:	2600      	movs	r6, #0
 80071a4:	42a6      	cmp	r6, r4
 80071a6:	d109      	bne.n	80071bc <__libc_init_array+0x24>
 80071a8:	4d0b      	ldr	r5, [pc, #44]	; (80071d8 <__libc_init_array+0x40>)
 80071aa:	4c0c      	ldr	r4, [pc, #48]	; (80071dc <__libc_init_array+0x44>)
 80071ac:	f000 f820 	bl	80071f0 <_init>
 80071b0:	1b64      	subs	r4, r4, r5
 80071b2:	10a4      	asrs	r4, r4, #2
 80071b4:	2600      	movs	r6, #0
 80071b6:	42a6      	cmp	r6, r4
 80071b8:	d105      	bne.n	80071c6 <__libc_init_array+0x2e>
 80071ba:	bd70      	pop	{r4, r5, r6, pc}
 80071bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80071c0:	4798      	blx	r3
 80071c2:	3601      	adds	r6, #1
 80071c4:	e7ee      	b.n	80071a4 <__libc_init_array+0xc>
 80071c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ca:	4798      	blx	r3
 80071cc:	3601      	adds	r6, #1
 80071ce:	e7f2      	b.n	80071b6 <__libc_init_array+0x1e>
 80071d0:	08007248 	.word	0x08007248
 80071d4:	08007248 	.word	0x08007248
 80071d8:	08007248 	.word	0x08007248
 80071dc:	0800724c 	.word	0x0800724c

080071e0 <memset>:
 80071e0:	4402      	add	r2, r0
 80071e2:	4603      	mov	r3, r0
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d100      	bne.n	80071ea <memset+0xa>
 80071e8:	4770      	bx	lr
 80071ea:	f803 1b01 	strb.w	r1, [r3], #1
 80071ee:	e7f9      	b.n	80071e4 <memset+0x4>

080071f0 <_init>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	bf00      	nop
 80071f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f6:	bc08      	pop	{r3}
 80071f8:	469e      	mov	lr, r3
 80071fa:	4770      	bx	lr

080071fc <_fini>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	bf00      	nop
 8007200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007202:	bc08      	pop	{r3}
 8007204:	469e      	mov	lr, r3
 8007206:	4770      	bx	lr
