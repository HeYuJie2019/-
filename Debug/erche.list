
erche.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007098  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007330  08007330  00017330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007368  08007368  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007368  08007368  00017368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007370  08007370  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007370  08007370  00017370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007374  08007374  00017374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08007378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  24000078  080073f0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000308  080073f0  00020308  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d90c  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a9e  00000000  00000000  0003d9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00040450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00041400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000365d3  00000000  00000000  000422f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014277  00000000  00000000  000788cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001618e6  00000000  00000000  0008cb42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ee428  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c8  00000000  00000000  001ee47c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007318 	.word	0x08007318

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	08007318 	.word	0x08007318

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <move>:
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,25);
		HAL_Delay(700);*/
	}
}
void move(int n)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if(n==1)//直行
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	f040 80c0 	bne.w	8000760 <move+0x190>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 80005e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e4:	48a0      	ldr	r0, [pc, #640]	; (8000868 <move+0x298>)
 80005e6:	f002 f81b 	bl	8002620 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d127      	bne.n	8000640 <move+0x70>
 80005f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f4:	489c      	ldr	r0, [pc, #624]	; (8000868 <move+0x298>)
 80005f6:	f002 f813 	bl	8002620 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d11f      	bne.n	8000640 <move+0x70>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,28);
 8000600:	4b9a      	ldr	r3, [pc, #616]	; (800086c <move+0x29c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	221c      	movs	r2, #28
 8000606:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000608:	4b98      	ldr	r3, [pc, #608]	; (800086c <move+0x29c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,28);
 8000610:	4b96      	ldr	r3, [pc, #600]	; (800086c <move+0x29c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	221c      	movs	r2, #28
 8000616:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000618:	4b94      	ldr	r3, [pc, #592]	; (800086c <move+0x29c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2200      	movs	r2, #0
 800061e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,14);
 8000620:	4b93      	ldr	r3, [pc, #588]	; (8000870 <move+0x2a0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	220e      	movs	r2, #14
 8000626:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000628:	4b91      	ldr	r3, [pc, #580]	; (8000870 <move+0x2a0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,30);
 8000630:	4b8f      	ldr	r3, [pc, #572]	; (8000870 <move+0x2a0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	221e      	movs	r2, #30
 8000636:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000638:	4b8d      	ldr	r3, [pc, #564]	; (8000870 <move+0x2a0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2200      	movs	r2, #0
 800063e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000640:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000644:	4888      	ldr	r0, [pc, #544]	; (8000868 <move+0x298>)
 8000646:	f001 ffeb 	bl	8002620 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d127      	bne.n	80006a0 <move+0xd0>
 8000650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000654:	4884      	ldr	r0, [pc, #528]	; (8000868 <move+0x298>)
 8000656:	f001 ffe3 	bl	8002620 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d11f      	bne.n	80006a0 <move+0xd0>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,28);
 8000660:	4b82      	ldr	r3, [pc, #520]	; (800086c <move+0x29c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	221c      	movs	r2, #28
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000668:	4b80      	ldr	r3, [pc, #512]	; (800086c <move+0x29c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,28);
 8000670:	4b7e      	ldr	r3, [pc, #504]	; (800086c <move+0x29c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	221c      	movs	r2, #28
 8000676:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000678:	4b7c      	ldr	r3, [pc, #496]	; (800086c <move+0x29c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2200      	movs	r2, #0
 800067e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,30);
 8000680:	4b7b      	ldr	r3, [pc, #492]	; (8000870 <move+0x2a0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	221e      	movs	r2, #30
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000688:	4b79      	ldr	r3, [pc, #484]	; (8000870 <move+0x2a0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,14);
 8000690:	4b77      	ldr	r3, [pc, #476]	; (8000870 <move+0x2a0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	220e      	movs	r2, #14
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000698:	4b75      	ldr	r3, [pc, #468]	; (8000870 <move+0x2a0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2200      	movs	r2, #0
 800069e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 80006a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a4:	4870      	ldr	r0, [pc, #448]	; (8000868 <move+0x298>)
 80006a6:	f001 ffbb 	bl	8002620 <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d127      	bne.n	8000700 <move+0x130>
 80006b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b4:	486c      	ldr	r0, [pc, #432]	; (8000868 <move+0x298>)
 80006b6:	f001 ffb3 	bl	8002620 <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d11f      	bne.n	8000700 <move+0x130>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,28);
 80006c0:	4b6a      	ldr	r3, [pc, #424]	; (800086c <move+0x29c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	221c      	movs	r2, #28
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80006c8:	4b68      	ldr	r3, [pc, #416]	; (800086c <move+0x29c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2200      	movs	r2, #0
 80006ce:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,28);
 80006d0:	4b66      	ldr	r3, [pc, #408]	; (800086c <move+0x29c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	221c      	movs	r2, #28
 80006d6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80006d8:	4b64      	ldr	r3, [pc, #400]	; (800086c <move+0x29c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2200      	movs	r2, #0
 80006de:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,14);
 80006e0:	4b63      	ldr	r3, [pc, #396]	; (8000870 <move+0x2a0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	220e      	movs	r2, #14
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 80006e8:	4b61      	ldr	r3, [pc, #388]	; (8000870 <move+0x2a0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2200      	movs	r2, #0
 80006ee:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,14);
 80006f0:	4b5f      	ldr	r3, [pc, #380]	; (8000870 <move+0x2a0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	220e      	movs	r2, #14
 80006f6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 80006f8:	4b5d      	ldr	r3, [pc, #372]	; (8000870 <move+0x2a0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2200      	movs	r2, #0
 80006fe:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000700:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000704:	4858      	ldr	r0, [pc, #352]	; (8000868 <move+0x298>)
 8000706:	f001 ff8b 	bl	8002620 <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d127      	bne.n	8000760 <move+0x190>
 8000710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000714:	4854      	ldr	r0, [pc, #336]	; (8000868 <move+0x298>)
 8000716:	f001 ff83 	bl	8002620 <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d11f      	bne.n	8000760 <move+0x190>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 8000720:	4b52      	ldr	r3, [pc, #328]	; (800086c <move+0x29c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2264      	movs	r2, #100	; 0x64
 8000726:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 8000728:	4b50      	ldr	r3, [pc, #320]	; (800086c <move+0x29c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2264      	movs	r2, #100	; 0x64
 800072e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 8000730:	4b4e      	ldr	r3, [pc, #312]	; (800086c <move+0x29c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2264      	movs	r2, #100	; 0x64
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 8000738:	4b4c      	ldr	r3, [pc, #304]	; (800086c <move+0x29c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2264      	movs	r2, #100	; 0x64
 800073e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 8000740:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <move+0x2a0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2264      	movs	r2, #100	; 0x64
 8000746:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 8000748:	4b49      	ldr	r3, [pc, #292]	; (8000870 <move+0x2a0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2264      	movs	r2, #100	; 0x64
 800074e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 8000750:	4b47      	ldr	r3, [pc, #284]	; (8000870 <move+0x2a0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2264      	movs	r2, #100	; 0x64
 8000756:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 8000758:	4b45      	ldr	r3, [pc, #276]	; (8000870 <move+0x2a0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2264      	movs	r2, #100	; 0x64
 800075e:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	if(n==2)//右行
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b02      	cmp	r3, #2
 8000764:	f040 80c7 	bne.w	80008f6 <move+0x326>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1)
 8000768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076c:	4841      	ldr	r0, [pc, #260]	; (8000874 <move+0x2a4>)
 800076e:	f001 ff57 	bl	8002620 <HAL_GPIO_ReadPin>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d126      	bne.n	80007c6 <move+0x1f6>
 8000778:	2120      	movs	r1, #32
 800077a:	483f      	ldr	r0, [pc, #252]	; (8000878 <move+0x2a8>)
 800077c:	f001 ff50 	bl	8002620 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d11f      	bne.n	80007c6 <move+0x1f6>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,19);
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <move+0x29c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2213      	movs	r2, #19
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800078e:	4b37      	ldr	r3, [pc, #220]	; (800086c <move+0x29c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2200      	movs	r2, #0
 8000794:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000796:	4b35      	ldr	r3, [pc, #212]	; (800086c <move+0x29c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2200      	movs	r2, #0
 800079c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,22);
 800079e:	4b33      	ldr	r3, [pc, #204]	; (800086c <move+0x29c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2216      	movs	r2, #22
 80007a4:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 80007a6:	4b32      	ldr	r3, [pc, #200]	; (8000870 <move+0x2a0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2210      	movs	r2, #16
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 80007ae:	4b30      	ldr	r3, [pc, #192]	; (8000870 <move+0x2a0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2200      	movs	r2, #0
 80007b4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 80007b6:	4b2e      	ldr	r3, [pc, #184]	; (8000870 <move+0x2a0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2200      	movs	r2, #0
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,24);
 80007be:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <move+0x2a0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2218      	movs	r2, #24
 80007c4:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 80007c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ca:	482a      	ldr	r0, [pc, #168]	; (8000874 <move+0x2a4>)
 80007cc:	f001 ff28 	bl	8002620 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d126      	bne.n	8000824 <move+0x254>
 80007d6:	2120      	movs	r1, #32
 80007d8:	4827      	ldr	r0, [pc, #156]	; (8000878 <move+0x2a8>)
 80007da:	f001 ff21 	bl	8002620 <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d11f      	bne.n	8000824 <move+0x254>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,24);
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <move+0x29c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2218      	movs	r2, #24
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <move+0x29c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2200      	movs	r2, #0
 80007f2:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <move+0x29c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2200      	movs	r2, #0
 80007fa:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,21);
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <move+0x29c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2215      	movs	r2, #21
 8000802:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,18);
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <move+0x2a0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2212      	movs	r2, #18
 800080a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <move+0x2a0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2200      	movs	r2, #0
 8000812:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <move+0x2a0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2200      	movs	r2, #0
 800081a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,19);
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <move+0x2a0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2213      	movs	r2, #19
 8000822:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1)
 8000824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000828:	4812      	ldr	r0, [pc, #72]	; (8000874 <move+0x2a4>)
 800082a:	f001 fef9 	bl	8002620 <HAL_GPIO_ReadPin>
 800082e:	4603      	mov	r3, r0
 8000830:	2b01      	cmp	r3, #1
 8000832:	d131      	bne.n	8000898 <move+0x2c8>
 8000834:	2120      	movs	r1, #32
 8000836:	4810      	ldr	r0, [pc, #64]	; (8000878 <move+0x2a8>)
 8000838:	f001 fef2 	bl	8002620 <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b01      	cmp	r3, #1
 8000840:	d12a      	bne.n	8000898 <move+0x2c8>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,19);
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <move+0x29c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2213      	movs	r2, #19
 8000848:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <move+0x29c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2200      	movs	r2, #0
 8000850:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <move+0x29c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2200      	movs	r2, #0
 8000858:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,20);
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <move+0x29c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2214      	movs	r2, #20
 8000860:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 8000862:	4b03      	ldr	r3, [pc, #12]	; (8000870 <move+0x2a0>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	e009      	b.n	800087c <move+0x2ac>
 8000868:	58020400 	.word	0x58020400
 800086c:	24000228 	.word	0x24000228
 8000870:	240000b0 	.word	0x240000b0
 8000874:	58020800 	.word	0x58020800
 8000878:	58021000 	.word	0x58021000
 800087c:	2210      	movs	r2, #16
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000880:	4b9a      	ldr	r3, [pc, #616]	; (8000aec <move+0x51c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2200      	movs	r2, #0
 8000886:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 8000888:	4b98      	ldr	r3, [pc, #608]	; (8000aec <move+0x51c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,19);
 8000890:	4b96      	ldr	r3, [pc, #600]	; (8000aec <move+0x51c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2213      	movs	r2, #19
 8000896:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	4894      	ldr	r0, [pc, #592]	; (8000af0 <move+0x520>)
 800089e:	f001 febf 	bl	8002620 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d126      	bne.n	80008f6 <move+0x326>
 80008a8:	2120      	movs	r1, #32
 80008aa:	4892      	ldr	r0, [pc, #584]	; (8000af4 <move+0x524>)
 80008ac:	f001 feb8 	bl	8002620 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d11f      	bne.n	80008f6 <move+0x326>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 80008b6:	4b90      	ldr	r3, [pc, #576]	; (8000af8 <move+0x528>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2264      	movs	r2, #100	; 0x64
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 80008be:	4b8e      	ldr	r3, [pc, #568]	; (8000af8 <move+0x528>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2264      	movs	r2, #100	; 0x64
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 80008c6:	4b8c      	ldr	r3, [pc, #560]	; (8000af8 <move+0x528>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2264      	movs	r2, #100	; 0x64
 80008cc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 80008ce:	4b8a      	ldr	r3, [pc, #552]	; (8000af8 <move+0x528>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2264      	movs	r2, #100	; 0x64
 80008d4:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 80008d6:	4b85      	ldr	r3, [pc, #532]	; (8000aec <move+0x51c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2264      	movs	r2, #100	; 0x64
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 80008de:	4b83      	ldr	r3, [pc, #524]	; (8000aec <move+0x51c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2264      	movs	r2, #100	; 0x64
 80008e4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 80008e6:	4b81      	ldr	r3, [pc, #516]	; (8000aec <move+0x51c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2264      	movs	r2, #100	; 0x64
 80008ec:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 80008ee:	4b7f      	ldr	r3, [pc, #508]	; (8000aec <move+0x51c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2264      	movs	r2, #100	; 0x64
 80008f4:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	if(n==3)//旋转
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d11f      	bne.n	800093c <move+0x36c>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 80008fc:	4b7e      	ldr	r3, [pc, #504]	; (8000af8 <move+0x528>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2200      	movs	r2, #0
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,27);//27
 8000904:	4b7c      	ldr	r3, [pc, #496]	; (8000af8 <move+0x528>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	221b      	movs	r2, #27
 800090a:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,24);//21
 800090c:	4b7a      	ldr	r3, [pc, #488]	; (8000af8 <move+0x528>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2218      	movs	r2, #24
 8000912:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,0);
 8000914:	4b78      	ldr	r3, [pc, #480]	; (8000af8 <move+0x528>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2200      	movs	r2, #0
 800091a:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,20);//20
 800091c:	4b73      	ldr	r3, [pc, #460]	; (8000aec <move+0x51c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2214      	movs	r2, #20
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000924:	4b71      	ldr	r3, [pc, #452]	; (8000aec <move+0x51c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2200      	movs	r2, #0
 800092a:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 800092c:	4b6f      	ldr	r3, [pc, #444]	; (8000aec <move+0x51c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2200      	movs	r2, #0
 8000932:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,21);//21
 8000934:	4b6d      	ldr	r3, [pc, #436]	; (8000aec <move+0x51c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2215      	movs	r2, #21
 800093a:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==4)//刹车
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b04      	cmp	r3, #4
 8000940:	d11f      	bne.n	8000982 <move+0x3b2>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 8000942:	4b6d      	ldr	r3, [pc, #436]	; (8000af8 <move+0x528>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2264      	movs	r2, #100	; 0x64
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 800094a:	4b6b      	ldr	r3, [pc, #428]	; (8000af8 <move+0x528>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2264      	movs	r2, #100	; 0x64
 8000950:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,100);
 8000952:	4b69      	ldr	r3, [pc, #420]	; (8000af8 <move+0x528>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2264      	movs	r2, #100	; 0x64
 8000958:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,100);
 800095a:	4b67      	ldr	r3, [pc, #412]	; (8000af8 <move+0x528>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2264      	movs	r2, #100	; 0x64
 8000960:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,100);
 8000962:	4b62      	ldr	r3, [pc, #392]	; (8000aec <move+0x51c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2264      	movs	r2, #100	; 0x64
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,100);
 800096a:	4b60      	ldr	r3, [pc, #384]	; (8000aec <move+0x51c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2264      	movs	r2, #100	; 0x64
 8000970:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,100);
 8000972:	4b5e      	ldr	r3, [pc, #376]	; (8000aec <move+0x51c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2264      	movs	r2, #100	; 0x64
 8000978:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,100);
 800097a:	4b5c      	ldr	r3, [pc, #368]	; (8000aec <move+0x51c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2264      	movs	r2, #100	; 0x64
 8000980:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==5)//倒车入库
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b05      	cmp	r3, #5
 8000986:	d11f      	bne.n	80009c8 <move+0x3f8>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 8000988:	4b5b      	ldr	r3, [pc, #364]	; (8000af8 <move+0x528>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2264      	movs	r2, #100	; 0x64
 800098e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 8000990:	4b59      	ldr	r3, [pc, #356]	; (8000af8 <move+0x528>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2264      	movs	r2, #100	; 0x64
 8000996:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,30);
 8000998:	4b57      	ldr	r3, [pc, #348]	; (8000af8 <move+0x528>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	221e      	movs	r2, #30
 800099e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80009a0:	4b55      	ldr	r3, [pc, #340]	; (8000af8 <move+0x528>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2200      	movs	r2, #0
 80009a6:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,100);
 80009a8:	4b50      	ldr	r3, [pc, #320]	; (8000aec <move+0x51c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2264      	movs	r2, #100	; 0x64
 80009ae:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,100);
 80009b0:	4b4e      	ldr	r3, [pc, #312]	; (8000aec <move+0x51c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2264      	movs	r2, #100	; 0x64
 80009b6:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,30);
 80009b8:	4b4c      	ldr	r3, [pc, #304]	; (8000aec <move+0x51c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	221e      	movs	r2, #30
 80009be:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 80009c0:	4b4a      	ldr	r3, [pc, #296]	; (8000aec <move+0x51c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2200      	movs	r2, #0
 80009c6:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==6)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	f040 80cc 	bne.w	8000b68 <move+0x598>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 80009d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d4:	4849      	ldr	r0, [pc, #292]	; (8000afc <move+0x52c>)
 80009d6:	f001 fe23 	bl	8002620 <HAL_GPIO_ReadPin>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d127      	bne.n	8000a30 <move+0x460>
 80009e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e4:	4845      	ldr	r0, [pc, #276]	; (8000afc <move+0x52c>)
 80009e6:	f001 fe1b 	bl	8002620 <HAL_GPIO_ReadPin>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d11f      	bne.n	8000a30 <move+0x460>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,26.1);
 80009f0:	4b41      	ldr	r3, [pc, #260]	; (8000af8 <move+0x528>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	221a      	movs	r2, #26
 80009f6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80009f8:	4b3f      	ldr	r3, [pc, #252]	; (8000af8 <move+0x528>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2200      	movs	r2, #0
 80009fe:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,23.4);
 8000a00:	4b3d      	ldr	r3, [pc, #244]	; (8000af8 <move+0x528>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2217      	movs	r2, #23
 8000a06:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000a08:	4b3b      	ldr	r3, [pc, #236]	; (8000af8 <move+0x528>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,12.6);
 8000a10:	4b36      	ldr	r3, [pc, #216]	; (8000aec <move+0x51c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	220c      	movs	r2, #12
 8000a16:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000a18:	4b34      	ldr	r3, [pc, #208]	; (8000aec <move+0x51c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,27);
 8000a20:	4b32      	ldr	r3, [pc, #200]	; (8000aec <move+0x51c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	221b      	movs	r2, #27
 8000a26:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000a28:	4b30      	ldr	r3, [pc, #192]	; (8000aec <move+0x51c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000a30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a34:	4831      	ldr	r0, [pc, #196]	; (8000afc <move+0x52c>)
 8000a36:	f001 fdf3 	bl	8002620 <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d127      	bne.n	8000a90 <move+0x4c0>
 8000a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a44:	482d      	ldr	r0, [pc, #180]	; (8000afc <move+0x52c>)
 8000a46:	f001 fdeb 	bl	8002620 <HAL_GPIO_ReadPin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d11f      	bne.n	8000a90 <move+0x4c0>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,26.1);
 8000a50:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <move+0x528>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	221a      	movs	r2, #26
 8000a56:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <move+0x528>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,23.4);
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <move+0x528>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2217      	movs	r2, #23
 8000a66:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000a68:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <move+0x528>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,27);
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <move+0x51c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	221b      	movs	r2, #27
 8000a76:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <move+0x51c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,14.4);
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <move+0x51c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	220e      	movs	r2, #14
 8000a86:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <move+0x51c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000a90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a94:	4819      	ldr	r0, [pc, #100]	; (8000afc <move+0x52c>)
 8000a96:	f001 fdc3 	bl	8002620 <HAL_GPIO_ReadPin>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d133      	bne.n	8000b08 <move+0x538>
 8000aa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa4:	4815      	ldr	r0, [pc, #84]	; (8000afc <move+0x52c>)
 8000aa6:	f001 fdbb 	bl	8002620 <HAL_GPIO_ReadPin>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d12b      	bne.n	8000b08 <move+0x538>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,26.1);
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <move+0x528>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	221a      	movs	r2, #26
 8000ab6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <move+0x528>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2200      	movs	r2, #0
 8000abe:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,23.4);
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <move+0x528>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2217      	movs	r2, #23
 8000ac6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <move+0x528>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2200      	movs	r2, #0
 8000ace:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,12.6);
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <move+0x51c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	220c      	movs	r2, #12
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <move+0x51c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2200      	movs	r2, #0
 8000ade:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,14.4);
 8000ae0:	4b02      	ldr	r3, [pc, #8]	; (8000aec <move+0x51c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	220e      	movs	r2, #14
 8000ae6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ae8:	e00a      	b.n	8000b00 <move+0x530>
 8000aea:	bf00      	nop
 8000aec:	240000b0 	.word	0x240000b0
 8000af0:	58020800 	.word	0x58020800
 8000af4:	58021000 	.word	0x58021000
 8000af8:	24000228 	.word	0x24000228
 8000afc:	58020400 	.word	0x58020400
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <move+0x5a0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2200      	movs	r2, #0
 8000b06:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000b08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b0c:	4819      	ldr	r0, [pc, #100]	; (8000b74 <move+0x5a4>)
 8000b0e:	f001 fd87 	bl	8002620 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d127      	bne.n	8000b68 <move+0x598>
 8000b18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1c:	4815      	ldr	r0, [pc, #84]	; (8000b74 <move+0x5a4>)
 8000b1e:	f001 fd7f 	bl	8002620 <HAL_GPIO_ReadPin>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d11f      	bne.n	8000b68 <move+0x598>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <move+0x5a8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2264      	movs	r2, #100	; 0x64
 8000b2e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <move+0x5a8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2264      	movs	r2, #100	; 0x64
 8000b36:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <move+0x5a8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2264      	movs	r2, #100	; 0x64
 8000b3e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <move+0x5a8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2264      	movs	r2, #100	; 0x64
 8000b46:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <move+0x5a0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2264      	movs	r2, #100	; 0x64
 8000b4e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <move+0x5a0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2264      	movs	r2, #100	; 0x64
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <move+0x5a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2264      	movs	r2, #100	; 0x64
 8000b5e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <move+0x5a0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2264      	movs	r2, #100	; 0x64
 8000b66:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	240000b0 	.word	0x240000b0
 8000b74:	58020400 	.word	0x58020400
 8000b78:	24000228 	.word	0x24000228

08000b7c <shuxian>:

void shuxian()
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	if(step==1)//直走
 8000b80:	4b7f      	ldr	r3, [pc, #508]	; (8000d80 <shuxian+0x204>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d11c      	bne.n	8000bc2 <shuxian+0x46>
	{
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000b88:	2120      	movs	r1, #32
 8000b8a:	487e      	ldr	r0, [pc, #504]	; (8000d84 <shuxian+0x208>)
 8000b8c:	f001 fd48 	bl	8002620 <HAL_GPIO_ReadPin>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d102      	bne.n	8000b9c <shuxian+0x20>
		{
			Xflag=1;
 8000b96:	4b7c      	ldr	r3, [pc, #496]	; (8000d88 <shuxian+0x20c>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Xflag==1)
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	4879      	ldr	r0, [pc, #484]	; (8000d84 <shuxian+0x208>)
 8000ba0:	f001 fd3e 	bl	8002620 <HAL_GPIO_ReadPin>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d10b      	bne.n	8000bc2 <shuxian+0x46>
 8000baa:	4b77      	ldr	r3, [pc, #476]	; (8000d88 <shuxian+0x20c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d107      	bne.n	8000bc2 <shuxian+0x46>
		{
			X+=1;
 8000bb2:	4b76      	ldr	r3, [pc, #472]	; (8000d8c <shuxian+0x210>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	4a74      	ldr	r2, [pc, #464]	; (8000d8c <shuxian+0x210>)
 8000bba:	6013      	str	r3, [r2, #0]
			Xflag=0;
 8000bbc:	4b72      	ldr	r3, [pc, #456]	; (8000d88 <shuxian+0x20c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==2||step==4||step==6||step==12||step==14)//旋转
 8000bc2:	4b6f      	ldr	r3, [pc, #444]	; (8000d80 <shuxian+0x204>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d00f      	beq.n	8000bea <shuxian+0x6e>
 8000bca:	4b6d      	ldr	r3, [pc, #436]	; (8000d80 <shuxian+0x204>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	d00b      	beq.n	8000bea <shuxian+0x6e>
 8000bd2:	4b6b      	ldr	r3, [pc, #428]	; (8000d80 <shuxian+0x204>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b06      	cmp	r3, #6
 8000bd8:	d007      	beq.n	8000bea <shuxian+0x6e>
 8000bda:	4b69      	ldr	r3, [pc, #420]	; (8000d80 <shuxian+0x204>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b0c      	cmp	r3, #12
 8000be0:	d003      	beq.n	8000bea <shuxian+0x6e>
 8000be2:	4b67      	ldr	r3, [pc, #412]	; (8000d80 <shuxian+0x204>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b0e      	cmp	r3, #14
 8000be8:	d11e      	bne.n	8000c28 <shuxian+0xac>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1&&turnflag==1)
 8000bea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bee:	4868      	ldr	r0, [pc, #416]	; (8000d90 <shuxian+0x214>)
 8000bf0:	f001 fd16 	bl	8002620 <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d10b      	bne.n	8000c12 <shuxian+0x96>
 8000bfa:	4b66      	ldr	r3, [pc, #408]	; (8000d94 <shuxian+0x218>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d107      	bne.n	8000c12 <shuxian+0x96>
		{
			turn+=1;
 8000c02:	4b65      	ldr	r3, [pc, #404]	; (8000d98 <shuxian+0x21c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	3301      	adds	r3, #1
 8000c08:	4a63      	ldr	r2, [pc, #396]	; (8000d98 <shuxian+0x21c>)
 8000c0a:	6013      	str	r3, [r2, #0]
			turnflag=0;
 8000c0c:	4b61      	ldr	r3, [pc, #388]	; (8000d94 <shuxian+0x218>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000c12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c16:	485e      	ldr	r0, [pc, #376]	; (8000d90 <shuxian+0x214>)
 8000c18:	f001 fd02 	bl	8002620 <HAL_GPIO_ReadPin>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d102      	bne.n	8000c28 <shuxian+0xac>
		{
			turnflag=1;
 8000c22:	4b5c      	ldr	r3, [pc, #368]	; (8000d94 <shuxian+0x218>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==3||step==11||step==-1)//直走
 8000c28:	4b55      	ldr	r3, [pc, #340]	; (8000d80 <shuxian+0x204>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	d008      	beq.n	8000c42 <shuxian+0xc6>
 8000c30:	4b53      	ldr	r3, [pc, #332]	; (8000d80 <shuxian+0x204>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b0b      	cmp	r3, #11
 8000c36:	d004      	beq.n	8000c42 <shuxian+0xc6>
 8000c38:	4b51      	ldr	r3, [pc, #324]	; (8000d80 <shuxian+0x204>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c40:	d122      	bne.n	8000c88 <shuxian+0x10c>
	{
		turn=0;
 8000c42:	4b55      	ldr	r3, [pc, #340]	; (8000d98 <shuxian+0x21c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000c48:	4b52      	ldr	r3, [pc, #328]	; (8000d94 <shuxian+0x218>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Yflag==1)
 8000c4e:	2120      	movs	r1, #32
 8000c50:	484c      	ldr	r0, [pc, #304]	; (8000d84 <shuxian+0x208>)
 8000c52:	f001 fce5 	bl	8002620 <HAL_GPIO_ReadPin>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d10b      	bne.n	8000c74 <shuxian+0xf8>
 8000c5c:	4b4f      	ldr	r3, [pc, #316]	; (8000d9c <shuxian+0x220>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d107      	bne.n	8000c74 <shuxian+0xf8>
		{
			Y+=1;
 8000c64:	4b4e      	ldr	r3, [pc, #312]	; (8000da0 <shuxian+0x224>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	4a4d      	ldr	r2, [pc, #308]	; (8000da0 <shuxian+0x224>)
 8000c6c:	6013      	str	r3, [r2, #0]
			Yflag=0;
 8000c6e:	4b4b      	ldr	r3, [pc, #300]	; (8000d9c <shuxian+0x220>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000c74:	2120      	movs	r1, #32
 8000c76:	4843      	ldr	r0, [pc, #268]	; (8000d84 <shuxian+0x208>)
 8000c78:	f001 fcd2 	bl	8002620 <HAL_GPIO_ReadPin>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d102      	bne.n	8000c88 <shuxian+0x10c>
		{
			Yflag=1;
 8000c82:	4b46      	ldr	r3, [pc, #280]	; (8000d9c <shuxian+0x220>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==5||step==13)//�????回一�????
 8000c88:	4b3d      	ldr	r3, [pc, #244]	; (8000d80 <shuxian+0x204>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b05      	cmp	r3, #5
 8000c8e:	d003      	beq.n	8000c98 <shuxian+0x11c>
 8000c90:	4b3b      	ldr	r3, [pc, #236]	; (8000d80 <shuxian+0x204>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b0d      	cmp	r3, #13
 8000c96:	d122      	bne.n	8000cde <shuxian+0x162>
	{
		turn=0;
 8000c98:	4b3f      	ldr	r3, [pc, #252]	; (8000d98 <shuxian+0x21c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000c9e:	4b3d      	ldr	r3, [pc, #244]	; (8000d94 <shuxian+0x218>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Xflag==1)
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	4837      	ldr	r0, [pc, #220]	; (8000d84 <shuxian+0x208>)
 8000ca8:	f001 fcba 	bl	8002620 <HAL_GPIO_ReadPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d10b      	bne.n	8000cca <shuxian+0x14e>
 8000cb2:	4b35      	ldr	r3, [pc, #212]	; (8000d88 <shuxian+0x20c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d107      	bne.n	8000cca <shuxian+0x14e>
		{
			X-=1;
 8000cba:	4b34      	ldr	r3, [pc, #208]	; (8000d8c <shuxian+0x210>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	4a32      	ldr	r2, [pc, #200]	; (8000d8c <shuxian+0x210>)
 8000cc2:	6013      	str	r3, [r2, #0]
			Xflag=0;
 8000cc4:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <shuxian+0x20c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000cca:	2120      	movs	r1, #32
 8000ccc:	482d      	ldr	r0, [pc, #180]	; (8000d84 <shuxian+0x208>)
 8000cce:	f001 fca7 	bl	8002620 <HAL_GPIO_ReadPin>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <shuxian+0x162>
		{
			Xflag=1;
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <shuxian+0x20c>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==7||step==15)//�????回一�????
 8000cde:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <shuxian+0x204>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b07      	cmp	r3, #7
 8000ce4:	d003      	beq.n	8000cee <shuxian+0x172>
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <shuxian+0x204>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b0f      	cmp	r3, #15
 8000cec:	d122      	bne.n	8000d34 <shuxian+0x1b8>
	{
		turn=0;
 8000cee:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <shuxian+0x21c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000cf4:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <shuxian+0x218>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Yflag==1)
 8000cfa:	2120      	movs	r1, #32
 8000cfc:	4821      	ldr	r0, [pc, #132]	; (8000d84 <shuxian+0x208>)
 8000cfe:	f001 fc8f 	bl	8002620 <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d10b      	bne.n	8000d20 <shuxian+0x1a4>
 8000d08:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <shuxian+0x220>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d107      	bne.n	8000d20 <shuxian+0x1a4>
		{
			Y-=1;
 8000d10:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <shuxian+0x224>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <shuxian+0x224>)
 8000d18:	6013      	str	r3, [r2, #0]
			Yflag=0;
 8000d1a:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <shuxian+0x220>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000d20:	2120      	movs	r1, #32
 8000d22:	4818      	ldr	r0, [pc, #96]	; (8000d84 <shuxian+0x208>)
 8000d24:	f001 fc7c 	bl	8002620 <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <shuxian+0x1b8>
		{
			Yflag=1;
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <shuxian+0x220>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==8)
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <shuxian+0x204>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b08      	cmp	r3, #8
 8000d3a:	d11e      	bne.n	8000d7a <shuxian+0x1fe>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
 8000d3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d40:	4818      	ldr	r0, [pc, #96]	; (8000da4 <shuxian+0x228>)
 8000d42:	f001 fc6d 	bl	8002620 <HAL_GPIO_ReadPin>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <shuxian+0x1d6>
		{
			Zflag=1;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <shuxian+0x22c>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&Zflag==1)
 8000d52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d56:	4813      	ldr	r0, [pc, #76]	; (8000da4 <shuxian+0x228>)
 8000d58:	f001 fc62 	bl	8002620 <HAL_GPIO_ReadPin>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d10b      	bne.n	8000d7a <shuxian+0x1fe>
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <shuxian+0x22c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d107      	bne.n	8000d7a <shuxian+0x1fe>
		{
			Z+=1;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <shuxian+0x230>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <shuxian+0x230>)
 8000d72:	6013      	str	r3, [r2, #0]
			Zflag=0;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <shuxian+0x22c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	24000094 	.word	0x24000094
 8000d84:	58021000 	.word	0x58021000
 8000d88:	24000058 	.word	0x24000058
 8000d8c:	24000098 	.word	0x24000098
 8000d90:	58020400 	.word	0x58020400
 8000d94:	24000064 	.word	0x24000064
 8000d98:	240000a4 	.word	0x240000a4
 8000d9c:	2400005c 	.word	0x2400005c
 8000da0:	2400009c 	.word	0x2400009c
 8000da4:	58020800 	.word	0x58020800
 8000da8:	24000060 	.word	0x24000060
 8000dac:	240000a0 	.word	0x240000a0

08000db0 <buzhou>:


void buzhou()
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	if(step==0)//等待语音
 8000db4:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <buzhou+0xb0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d171      	bne.n	8000ea0 <buzhou+0xf0>
	{
		HAL_UART_Receive(&huart3,&color,1,HAL_MAX_DELAY);
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4928      	ldr	r1, [pc, #160]	; (8000e64 <buzhou+0xb4>)
 8000dc4:	4828      	ldr	r0, [pc, #160]	; (8000e68 <buzhou+0xb8>)
 8000dc6:	f005 f98f 	bl	80060e8 <HAL_UART_Receive>
		if(color==1)
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <buzhou+0xb4>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d10a      	bne.n	8000de8 <buzhou+0x38>
		{
			HAL_UART_Transmit(&huart2,redGreen,sizeof(redGreen),1000);
 8000dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	4924      	ldr	r1, [pc, #144]	; (8000e6c <buzhou+0xbc>)
 8000dda:	4825      	ldr	r0, [pc, #148]	; (8000e70 <buzhou+0xc0>)
 8000ddc:	f005 f8ee 	bl	8005fbc <HAL_UART_Transmit>
			step=1;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <buzhou+0xb0>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	e05b      	b.n	8000ea0 <buzhou+0xf0>
		}
		else if(color==2)
 8000de8:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <buzhou+0xb4>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d10a      	bne.n	8000e06 <buzhou+0x56>
		{
			HAL_UART_Transmit(&huart2,redBlue,sizeof(redBlue),1000);
 8000df0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df4:	2208      	movs	r2, #8
 8000df6:	491f      	ldr	r1, [pc, #124]	; (8000e74 <buzhou+0xc4>)
 8000df8:	481d      	ldr	r0, [pc, #116]	; (8000e70 <buzhou+0xc0>)
 8000dfa:	f005 f8df 	bl	8005fbc <HAL_UART_Transmit>
			step=1;
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <buzhou+0xb0>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	e04c      	b.n	8000ea0 <buzhou+0xf0>
		}
		else if(color==3)
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <buzhou+0xb4>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d10a      	bne.n	8000e24 <buzhou+0x74>
		{
			HAL_UART_Transmit(&huart2,greenBlue,sizeof(greenBlue),1000);
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	2208      	movs	r2, #8
 8000e14:	4918      	ldr	r1, [pc, #96]	; (8000e78 <buzhou+0xc8>)
 8000e16:	4816      	ldr	r0, [pc, #88]	; (8000e70 <buzhou+0xc0>)
 8000e18:	f005 f8d0 	bl	8005fbc <HAL_UART_Transmit>
			step=1;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <buzhou+0xb0>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	e03d      	b.n	8000ea0 <buzhou+0xf0>
		}
		else if(color==4)
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <buzhou+0xb4>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d10a      	bne.n	8000e42 <buzhou+0x92>
		{
			HAL_UART_Transmit(&huart2,greenRed,sizeof(greenRed),1000);
 8000e2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e30:	2208      	movs	r2, #8
 8000e32:	4912      	ldr	r1, [pc, #72]	; (8000e7c <buzhou+0xcc>)
 8000e34:	480e      	ldr	r0, [pc, #56]	; (8000e70 <buzhou+0xc0>)
 8000e36:	f005 f8c1 	bl	8005fbc <HAL_UART_Transmit>
			step=1;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <buzhou+0xb0>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	e02e      	b.n	8000ea0 <buzhou+0xf0>
		}
		else if(color==5)
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <buzhou+0xb4>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b05      	cmp	r3, #5
 8000e48:	d11c      	bne.n	8000e84 <buzhou+0xd4>
		{
			HAL_UART_Transmit(&huart2,blueRed,sizeof(blueRed),1000);
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	2208      	movs	r2, #8
 8000e50:	490b      	ldr	r1, [pc, #44]	; (8000e80 <buzhou+0xd0>)
 8000e52:	4807      	ldr	r0, [pc, #28]	; (8000e70 <buzhou+0xc0>)
 8000e54:	f005 f8b2 	bl	8005fbc <HAL_UART_Transmit>
			step=1;
 8000e58:	4b01      	ldr	r3, [pc, #4]	; (8000e60 <buzhou+0xb0>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	e01f      	b.n	8000ea0 <buzhou+0xf0>
 8000e60:	24000094 	.word	0x24000094
 8000e64:	240000ac 	.word	0x240000ac
 8000e68:	240000fc 	.word	0x240000fc
 8000e6c:	24000000 	.word	0x24000000
 8000e70:	24000274 	.word	0x24000274
 8000e74:	24000010 	.word	0x24000010
 8000e78:	24000028 	.word	0x24000028
 8000e7c:	24000008 	.word	0x24000008
 8000e80:	24000018 	.word	0x24000018
		}
		else if(color==6)
 8000e84:	4bb5      	ldr	r3, [pc, #724]	; (800115c <buzhou+0x3ac>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b06      	cmp	r3, #6
 8000e8a:	d109      	bne.n	8000ea0 <buzhou+0xf0>
		{
			HAL_UART_Transmit(&huart2,blueGreen,sizeof(blueGreen),1000);
 8000e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e90:	2208      	movs	r2, #8
 8000e92:	49b3      	ldr	r1, [pc, #716]	; (8001160 <buzhou+0x3b0>)
 8000e94:	48b3      	ldr	r0, [pc, #716]	; (8001164 <buzhou+0x3b4>)
 8000e96:	f005 f891 	bl	8005fbc <HAL_UART_Transmit>
			step=1;
 8000e9a:	4bb3      	ldr	r3, [pc, #716]	; (8001168 <buzhou+0x3b8>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]
		}
//		HAL_Delay(2000);
//		step=1;
	}
	if(step==1)//move straight
 8000ea0:	4bb1      	ldr	r3, [pc, #708]	; (8001168 <buzhou+0x3b8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d116      	bne.n	8000ed6 <buzhou+0x126>
	{
		move(1);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f7ff fb91 	bl	80005d0 <move>
		shuxian();
 8000eae:	f7ff fe65 	bl	8000b7c <shuxian>
		if(X==2&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000eb2:	4bae      	ldr	r3, [pc, #696]	; (800116c <buzhou+0x3bc>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d10d      	bne.n	8000ed6 <buzhou+0x126>
 8000eba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ebe:	48ac      	ldr	r0, [pc, #688]	; (8001170 <buzhou+0x3c0>)
 8000ec0:	f001 fbae 	bl	8002620 <HAL_GPIO_ReadPin>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d105      	bne.n	8000ed6 <buzhou+0x126>
		{
			move(4);
 8000eca:	2004      	movs	r0, #4
 8000ecc:	f7ff fb80 	bl	80005d0 <move>
			step=2;
 8000ed0:	4ba5      	ldr	r3, [pc, #660]	; (8001168 <buzhou+0x3b8>)
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==2)//turn right
 8000ed6:	4ba4      	ldr	r3, [pc, #656]	; (8001168 <buzhou+0x3b8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d10f      	bne.n	8000efe <buzhou+0x14e>
	{
		move(3);
 8000ede:	2003      	movs	r0, #3
 8000ee0:	f7ff fb76 	bl	80005d0 <move>
		shuxian();
 8000ee4:	f7ff fe4a 	bl	8000b7c <shuxian>
		if(turn==3)
 8000ee8:	4ba2      	ldr	r3, [pc, #648]	; (8001174 <buzhou+0x3c4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d106      	bne.n	8000efe <buzhou+0x14e>
		{
			move(4);
 8000ef0:	2004      	movs	r0, #4
 8000ef2:	f7ff fb6d 	bl	80005d0 <move>
			step=-1;
 8000ef6:	4b9c      	ldr	r3, [pc, #624]	; (8001168 <buzhou+0x3b8>)
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8000efc:	601a      	str	r2, [r3, #0]
//			step=3;
		}
	}
	if(step==-1)//move straight
 8000efe:	4b9a      	ldr	r3, [pc, #616]	; (8001168 <buzhou+0x3b8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f06:	d117      	bne.n	8000f38 <buzhou+0x188>
	{
		move(1);
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff fb61 	bl	80005d0 <move>
		shuxian();
 8000f0e:	f7ff fe35 	bl	8000b7c <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000f12:	4b99      	ldr	r3, [pc, #612]	; (8001178 <buzhou+0x3c8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d10e      	bne.n	8000f38 <buzhou+0x188>
 8000f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1e:	4894      	ldr	r0, [pc, #592]	; (8001170 <buzhou+0x3c0>)
 8000f20:	f001 fb7e 	bl	8002620 <HAL_GPIO_ReadPin>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d106      	bne.n	8000f38 <buzhou+0x188>
		{
			move(4);
 8000f2a:	2004      	movs	r0, #4
 8000f2c:	f7ff fb50 	bl	80005d0 <move>
			step=-2;
 8000f30:	4b8d      	ldr	r3, [pc, #564]	; (8001168 <buzhou+0x3b8>)
 8000f32:	f06f 0201 	mvn.w	r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-2)//wait for car1 and activate arm
 8000f38:	4b8b      	ldr	r3, [pc, #556]	; (8001168 <buzhou+0x3b8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f113 0f02 	cmn.w	r3, #2
 8000f40:	d11e      	bne.n	8000f80 <buzhou+0x1d0>
	{
		if(arm==0)
 8000f42:	4b8e      	ldr	r3, [pc, #568]	; (800117c <buzhou+0x3cc>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d109      	bne.n	8000f5e <buzhou+0x1ae>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A0,sizeof(A0),0xffff);//机械臂初始化
 8000f4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f4e:	2205      	movs	r2, #5
 8000f50:	498b      	ldr	r1, [pc, #556]	; (8001180 <buzhou+0x3d0>)
 8000f52:	488c      	ldr	r0, [pc, #560]	; (8001184 <buzhou+0x3d4>)
 8000f54:	f005 f832 	bl	8005fbc <HAL_UART_Transmit>
			arm=1;
 8000f58:	4b88      	ldr	r3, [pc, #544]	; (800117c <buzhou+0x3cc>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]
		}
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK&&arm==1)
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	2201      	movs	r2, #1
 8000f64:	4988      	ldr	r1, [pc, #544]	; (8001188 <buzhou+0x3d8>)
 8000f66:	4889      	ldr	r0, [pc, #548]	; (800118c <buzhou+0x3dc>)
 8000f68:	f005 f8be 	bl	80060e8 <HAL_UART_Receive>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d106      	bne.n	8000f80 <buzhou+0x1d0>
 8000f72:	4b82      	ldr	r3, [pc, #520]	; (800117c <buzhou+0x3cc>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d102      	bne.n	8000f80 <buzhou+0x1d0>
		{
			step=3;
 8000f7a:	4b7b      	ldr	r3, [pc, #492]	; (8001168 <buzhou+0x3b8>)
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==3)//move straight
 8000f80:	4b79      	ldr	r3, [pc, #484]	; (8001168 <buzhou+0x3b8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d11e      	bne.n	8000fc6 <buzhou+0x216>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)A0,sizeof(A0),0xffff);
 8000f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	497c      	ldr	r1, [pc, #496]	; (8001180 <buzhou+0x3d0>)
 8000f90:	487c      	ldr	r0, [pc, #496]	; (8001184 <buzhou+0x3d4>)
 8000f92:	f005 f813 	bl	8005fbc <HAL_UART_Transmit>
		move(1);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f7ff fb1a 	bl	80005d0 <move>
		shuxian();
 8000f9c:	f7ff fdee 	bl	8000b7c <shuxian>
		if(Y==2&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000fa0:	4b75      	ldr	r3, [pc, #468]	; (8001178 <buzhou+0x3c8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d10e      	bne.n	8000fc6 <buzhou+0x216>
 8000fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fac:	4870      	ldr	r0, [pc, #448]	; (8001170 <buzhou+0x3c0>)
 8000fae:	f001 fb37 	bl	8002620 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d106      	bne.n	8000fc6 <buzhou+0x216>
		{
			move(4);
 8000fb8:	2004      	movs	r0, #4
 8000fba:	f7ff fb09 	bl	80005d0 <move>
			step=-4;
 8000fbe:	4b6a      	ldr	r3, [pc, #424]	; (8001168 <buzhou+0x3b8>)
 8000fc0:	f06f 0203 	mvn.w	r2, #3
 8000fc4:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-4)//wait for car1 to catch
 8000fc6:	4b68      	ldr	r3, [pc, #416]	; (8001168 <buzhou+0x3b8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f113 0f04 	cmn.w	r3, #4
 8000fce:	d114      	bne.n	8000ffa <buzhou+0x24a>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	496c      	ldr	r1, [pc, #432]	; (8001188 <buzhou+0x3d8>)
 8000fd8:	486c      	ldr	r0, [pc, #432]	; (800118c <buzhou+0x3dc>)
 8000fda:	f005 f885 	bl	80060e8 <HAL_UART_Receive>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10a      	bne.n	8000ffa <buzhou+0x24a>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A1,sizeof(A1),0xffff);
 8000fe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fe8:	2205      	movs	r2, #5
 8000fea:	4969      	ldr	r1, [pc, #420]	; (8001190 <buzhou+0x3e0>)
 8000fec:	4865      	ldr	r0, [pc, #404]	; (8001184 <buzhou+0x3d4>)
 8000fee:	f004 ffe5 	bl	8005fbc <HAL_UART_Transmit>
			step=-5;
 8000ff2:	4b5d      	ldr	r3, [pc, #372]	; (8001168 <buzhou+0x3b8>)
 8000ff4:	f06f 0204 	mvn.w	r2, #4
 8000ff8:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-5)
 8000ffa:	4b5b      	ldr	r3, [pc, #364]	; (8001168 <buzhou+0x3b8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f113 0f05 	cmn.w	r3, #5
 8001002:	d114      	bne.n	800102e <buzhou+0x27e>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	2201      	movs	r2, #1
 800100a:	495f      	ldr	r1, [pc, #380]	; (8001188 <buzhou+0x3d8>)
 800100c:	485f      	ldr	r0, [pc, #380]	; (800118c <buzhou+0x3dc>)
 800100e:	f005 f86b 	bl	80060e8 <HAL_UART_Receive>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d10a      	bne.n	800102e <buzhou+0x27e>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A2,sizeof(A2),0xffff);
 8001018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800101c:	2205      	movs	r2, #5
 800101e:	495d      	ldr	r1, [pc, #372]	; (8001194 <buzhou+0x3e4>)
 8001020:	4858      	ldr	r0, [pc, #352]	; (8001184 <buzhou+0x3d4>)
 8001022:	f004 ffcb 	bl	8005fbc <HAL_UART_Transmit>
			step=-6;
 8001026:	4b50      	ldr	r3, [pc, #320]	; (8001168 <buzhou+0x3b8>)
 8001028:	f06f 0205 	mvn.w	r2, #5
 800102c:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-6)//wait for car1 to move
 800102e:	4b4e      	ldr	r3, [pc, #312]	; (8001168 <buzhou+0x3b8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f113 0f06 	cmn.w	r3, #6
 8001036:	d10c      	bne.n	8001052 <buzhou+0x2a2>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	2201      	movs	r2, #1
 800103e:	4952      	ldr	r1, [pc, #328]	; (8001188 <buzhou+0x3d8>)
 8001040:	4852      	ldr	r0, [pc, #328]	; (800118c <buzhou+0x3dc>)
 8001042:	f005 f851 	bl	80060e8 <HAL_UART_Receive>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d102      	bne.n	8001052 <buzhou+0x2a2>
		{
//			step=4;
			step=11;
 800104c:	4b46      	ldr	r3, [pc, #280]	; (8001168 <buzhou+0x3b8>)
 800104e:	220b      	movs	r2, #11
 8001050:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==4)//turn right
 8001052:	4b45      	ldr	r3, [pc, #276]	; (8001168 <buzhou+0x3b8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b04      	cmp	r3, #4
 8001058:	d10e      	bne.n	8001078 <buzhou+0x2c8>
	{
		move(3);
 800105a:	2003      	movs	r0, #3
 800105c:	f7ff fab8 	bl	80005d0 <move>
		shuxian();
 8001060:	f7ff fd8c 	bl	8000b7c <shuxian>
		if(turn==3)
 8001064:	4b43      	ldr	r3, [pc, #268]	; (8001174 <buzhou+0x3c4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b03      	cmp	r3, #3
 800106a:	d105      	bne.n	8001078 <buzhou+0x2c8>
		{
			move(4);
 800106c:	2004      	movs	r0, #4
 800106e:	f7ff faaf 	bl	80005d0 <move>
			step=5;
 8001072:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <buzhou+0x3b8>)
 8001074:	2205      	movs	r2, #5
 8001076:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==5)//move straight
 8001078:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <buzhou+0x3b8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b05      	cmp	r3, #5
 800107e:	d116      	bne.n	80010ae <buzhou+0x2fe>
	{
		move(1);
 8001080:	2001      	movs	r0, #1
 8001082:	f7ff faa5 	bl	80005d0 <move>
		shuxian();
 8001086:	f7ff fd79 	bl	8000b7c <shuxian>
		if(X==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 800108a:	4b38      	ldr	r3, [pc, #224]	; (800116c <buzhou+0x3bc>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d10d      	bne.n	80010ae <buzhou+0x2fe>
 8001092:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001096:	4836      	ldr	r0, [pc, #216]	; (8001170 <buzhou+0x3c0>)
 8001098:	f001 fac2 	bl	8002620 <HAL_GPIO_ReadPin>
 800109c:	4603      	mov	r3, r0
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d105      	bne.n	80010ae <buzhou+0x2fe>
		{
			move(4);
 80010a2:	2004      	movs	r0, #4
 80010a4:	f7ff fa94 	bl	80005d0 <move>
			step=6;
 80010a8:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <buzhou+0x3b8>)
 80010aa:	2206      	movs	r2, #6
 80010ac:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==6)//turn right
 80010ae:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <buzhou+0x3b8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d10e      	bne.n	80010d4 <buzhou+0x324>
	{
		move(3);
 80010b6:	2003      	movs	r0, #3
 80010b8:	f7ff fa8a 	bl	80005d0 <move>
		shuxian();
 80010bc:	f7ff fd5e 	bl	8000b7c <shuxian>
		if(turn==3)
 80010c0:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <buzhou+0x3c4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d105      	bne.n	80010d4 <buzhou+0x324>
		{
			move(4);
 80010c8:	2004      	movs	r0, #4
 80010ca:	f7ff fa81 	bl	80005d0 <move>
			step=7;
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <buzhou+0x3b8>)
 80010d0:	2207      	movs	r2, #7
 80010d2:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==7)
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <buzhou+0x3b8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b07      	cmp	r3, #7
 80010da:	d116      	bne.n	800110a <buzhou+0x35a>
	{
		move(1);
 80010dc:	2001      	movs	r0, #1
 80010de:	f7ff fa77 	bl	80005d0 <move>
		shuxian();
 80010e2:	f7ff fd4b 	bl	8000b7c <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 80010e6:	4b24      	ldr	r3, [pc, #144]	; (8001178 <buzhou+0x3c8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d10d      	bne.n	800110a <buzhou+0x35a>
 80010ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f2:	481f      	ldr	r0, [pc, #124]	; (8001170 <buzhou+0x3c0>)
 80010f4:	f001 fa94 	bl	8002620 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d105      	bne.n	800110a <buzhou+0x35a>
		{
			move(4);
 80010fe:	2004      	movs	r0, #4
 8001100:	f7ff fa66 	bl	80005d0 <move>
			step=8;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <buzhou+0x3b8>)
 8001106:	2208      	movs	r2, #8
 8001108:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==8)
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <buzhou+0x3b8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b08      	cmp	r3, #8
 8001110:	d10e      	bne.n	8001130 <buzhou+0x380>
	{
		move(5);
 8001112:	2005      	movs	r0, #5
 8001114:	f7ff fa5c 	bl	80005d0 <move>
		shuxian();
 8001118:	f7ff fd30 	bl	8000b7c <shuxian>
		if(Z==3)
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <buzhou+0x3e8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d105      	bne.n	8001130 <buzhou+0x380>
		{
			move(4);
 8001124:	2004      	movs	r0, #4
 8001126:	f7ff fa53 	bl	80005d0 <move>
			step=9;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <buzhou+0x3b8>)
 800112c:	2209      	movs	r2, #9
 800112e:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==11)
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <buzhou+0x3b8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b0b      	cmp	r3, #11
 8001136:	d138      	bne.n	80011aa <buzhou+0x3fa>
	{
		move(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f7ff fa49 	bl	80005d0 <move>
		shuxian();
 800113e:	f7ff fd1d 	bl	8000b7c <shuxian>
		if(Y==4&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <buzhou+0x3c8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b04      	cmp	r3, #4
 8001148:	d12f      	bne.n	80011aa <buzhou+0x3fa>
 800114a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114e:	4808      	ldr	r0, [pc, #32]	; (8001170 <buzhou+0x3c0>)
 8001150:	f001 fa66 	bl	8002620 <HAL_GPIO_ReadPin>
 8001154:	4603      	mov	r3, r0
 8001156:	2b01      	cmp	r3, #1
 8001158:	d127      	bne.n	80011aa <buzhou+0x3fa>
 800115a:	e01f      	b.n	800119c <buzhou+0x3ec>
 800115c:	240000ac 	.word	0x240000ac
 8001160:	24000020 	.word	0x24000020
 8001164:	24000274 	.word	0x24000274
 8001168:	24000094 	.word	0x24000094
 800116c:	24000098 	.word	0x24000098
 8001170:	58020800 	.word	0x58020800
 8001174:	240000a4 	.word	0x240000a4
 8001178:	2400009c 	.word	0x2400009c
 800117c:	240000a8 	.word	0x240000a8
 8001180:	24000030 	.word	0x24000030
 8001184:	24000198 	.word	0x24000198
 8001188:	240000ad 	.word	0x240000ad
 800118c:	240000fc 	.word	0x240000fc
 8001190:	24000038 	.word	0x24000038
 8001194:	24000040 	.word	0x24000040
 8001198:	240000a0 	.word	0x240000a0
		{
			move(4);
 800119c:	2004      	movs	r0, #4
 800119e:	f7ff fa17 	bl	80005d0 <move>
			step=-6;
 80011a2:	4b54      	ldr	r3, [pc, #336]	; (80012f4 <buzhou+0x544>)
 80011a4:	f06f 0205 	mvn.w	r2, #5
 80011a8:	601a      	str	r2, [r3, #0]
//			step=12;
		}
	}
	if(step==-6)//arm move
 80011aa:	4b52      	ldr	r3, [pc, #328]	; (80012f4 <buzhou+0x544>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f113 0f06 	cmn.w	r3, #6
 80011b2:	d114      	bne.n	80011de <buzhou+0x42e>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	2201      	movs	r2, #1
 80011ba:	494f      	ldr	r1, [pc, #316]	; (80012f8 <buzhou+0x548>)
 80011bc:	484f      	ldr	r0, [pc, #316]	; (80012fc <buzhou+0x54c>)
 80011be:	f004 ff93 	bl	80060e8 <HAL_UART_Receive>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10a      	bne.n	80011de <buzhou+0x42e>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A5,sizeof(A5),0xffff);
 80011c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011cc:	2205      	movs	r2, #5
 80011ce:	494c      	ldr	r1, [pc, #304]	; (8001300 <buzhou+0x550>)
 80011d0:	484c      	ldr	r0, [pc, #304]	; (8001304 <buzhou+0x554>)
 80011d2:	f004 fef3 	bl	8005fbc <HAL_UART_Transmit>
			step=-7;
 80011d6:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <buzhou+0x544>)
 80011d8:	f06f 0206 	mvn.w	r2, #6
 80011dc:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-7)//arm move
 80011de:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <buzhou+0x544>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f113 0f07 	cmn.w	r3, #7
 80011e6:	d114      	bne.n	8001212 <buzhou+0x462>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	2201      	movs	r2, #1
 80011ee:	4942      	ldr	r1, [pc, #264]	; (80012f8 <buzhou+0x548>)
 80011f0:	4842      	ldr	r0, [pc, #264]	; (80012fc <buzhou+0x54c>)
 80011f2:	f004 ff79 	bl	80060e8 <HAL_UART_Receive>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10a      	bne.n	8001212 <buzhou+0x462>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A6,sizeof(A6),0xffff);
 80011fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001200:	2205      	movs	r2, #5
 8001202:	4941      	ldr	r1, [pc, #260]	; (8001308 <buzhou+0x558>)
 8001204:	483f      	ldr	r0, [pc, #252]	; (8001304 <buzhou+0x554>)
 8001206:	f004 fed9 	bl	8005fbc <HAL_UART_Transmit>
			step=-8;
 800120a:	4b3a      	ldr	r3, [pc, #232]	; (80012f4 <buzhou+0x544>)
 800120c:	f06f 0207 	mvn.w	r2, #7
 8001210:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-8)//wait for car1
 8001212:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <buzhou+0x544>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f113 0f08 	cmn.w	r3, #8
 800121a:	d10c      	bne.n	8001236 <buzhou+0x486>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	2201      	movs	r2, #1
 8001222:	4935      	ldr	r1, [pc, #212]	; (80012f8 <buzhou+0x548>)
 8001224:	4835      	ldr	r0, [pc, #212]	; (80012fc <buzhou+0x54c>)
 8001226:	f004 ff5f 	bl	80060e8 <HAL_UART_Receive>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <buzhou+0x486>
		{
			step=12;
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <buzhou+0x544>)
 8001232:	220c      	movs	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==12)
 8001236:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <buzhou+0x544>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b0c      	cmp	r3, #12
 800123c:	d10e      	bne.n	800125c <buzhou+0x4ac>
	{
		move(3);
 800123e:	2003      	movs	r0, #3
 8001240:	f7ff f9c6 	bl	80005d0 <move>
		shuxian();
 8001244:	f7ff fc9a 	bl	8000b7c <shuxian>
		if(turn==3)
 8001248:	4b30      	ldr	r3, [pc, #192]	; (800130c <buzhou+0x55c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b03      	cmp	r3, #3
 800124e:	d105      	bne.n	800125c <buzhou+0x4ac>
		{
			move(4);
 8001250:	2004      	movs	r0, #4
 8001252:	f7ff f9bd 	bl	80005d0 <move>
			step=13;
 8001256:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <buzhou+0x544>)
 8001258:	220d      	movs	r2, #13
 800125a:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==13)
 800125c:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <buzhou+0x544>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b0d      	cmp	r3, #13
 8001262:	d116      	bne.n	8001292 <buzhou+0x4e2>
	{
		move(6);
 8001264:	2006      	movs	r0, #6
 8001266:	f7ff f9b3 	bl	80005d0 <move>
		shuxian();
 800126a:	f7ff fc87 	bl	8000b7c <shuxian>
		if(X==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 800126e:	4b28      	ldr	r3, [pc, #160]	; (8001310 <buzhou+0x560>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d10d      	bne.n	8001292 <buzhou+0x4e2>
 8001276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127a:	4826      	ldr	r0, [pc, #152]	; (8001314 <buzhou+0x564>)
 800127c:	f001 f9d0 	bl	8002620 <HAL_GPIO_ReadPin>
 8001280:	4603      	mov	r3, r0
 8001282:	2b01      	cmp	r3, #1
 8001284:	d105      	bne.n	8001292 <buzhou+0x4e2>
		{
			move(4);
 8001286:	2004      	movs	r0, #4
 8001288:	f7ff f9a2 	bl	80005d0 <move>
			step=14;
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <buzhou+0x544>)
 800128e:	220e      	movs	r2, #14
 8001290:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==14)
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <buzhou+0x544>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b0e      	cmp	r3, #14
 8001298:	d10e      	bne.n	80012b8 <buzhou+0x508>
	{
		move(3);
 800129a:	2003      	movs	r0, #3
 800129c:	f7ff f998 	bl	80005d0 <move>
		shuxian();
 80012a0:	f7ff fc6c 	bl	8000b7c <shuxian>
		if(turn==3)
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <buzhou+0x55c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d105      	bne.n	80012b8 <buzhou+0x508>
		{
			move(4);
 80012ac:	2004      	movs	r0, #4
 80012ae:	f7ff f98f 	bl	80005d0 <move>
			step=15;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <buzhou+0x544>)
 80012b4:	220f      	movs	r2, #15
 80012b6:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==15)
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <buzhou+0x544>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d116      	bne.n	80012ee <buzhou+0x53e>
	{
		move(1);
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff f985 	bl	80005d0 <move>
		shuxian();
 80012c6:	f7ff fc59 	bl	8000b7c <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <buzhou+0x568>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d10d      	bne.n	80012ee <buzhou+0x53e>
 80012d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d6:	480f      	ldr	r0, [pc, #60]	; (8001314 <buzhou+0x564>)
 80012d8:	f001 f9a2 	bl	8002620 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d105      	bne.n	80012ee <buzhou+0x53e>
		{
			move(4);
 80012e2:	2004      	movs	r0, #4
 80012e4:	f7ff f974 	bl	80005d0 <move>
			step=8;
 80012e8:	4b02      	ldr	r3, [pc, #8]	; (80012f4 <buzhou+0x544>)
 80012ea:	2208      	movs	r2, #8
 80012ec:	601a      	str	r2, [r3, #0]
		}
	}

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	24000094 	.word	0x24000094
 80012f8:	240000ad 	.word	0x240000ad
 80012fc:	240000fc 	.word	0x240000fc
 8001300:	24000048 	.word	0x24000048
 8001304:	24000198 	.word	0x24000198
 8001308:	24000050 	.word	0x24000050
 800130c:	240000a4 	.word	0x240000a4
 8001310:	24000098 	.word	0x24000098
 8001314:	58020800 	.word	0x58020800
 8001318:	2400009c 	.word	0x2400009c

0800131c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001320:	f000 fe4c 	bl	8001fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001324:	f000 f834 	bl	8001390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001328:	f000 fb22 	bl	8001970 <MX_GPIO_Init>
  MX_TIM8_Init();
 800132c:	f000 f96c 	bl	8001608 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001330:	f000 fa3a 	bl	80017a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001334:	f000 fa84 	bl	8001840 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001338:	f000 f896 	bl	8001468 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800133c:	f000 facc 	bl	80018d8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001340:	2100      	movs	r1, #0
 8001342:	4811      	ldr	r0, [pc, #68]	; (8001388 <main+0x6c>)
 8001344:	f003 fd90 	bl	8004e68 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001348:	2104      	movs	r1, #4
 800134a:	480f      	ldr	r0, [pc, #60]	; (8001388 <main+0x6c>)
 800134c:	f003 fd8c 	bl	8004e68 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8001350:	2108      	movs	r1, #8
 8001352:	480d      	ldr	r0, [pc, #52]	; (8001388 <main+0x6c>)
 8001354:	f003 fd88 	bl	8004e68 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8001358:	210c      	movs	r1, #12
 800135a:	480b      	ldr	r0, [pc, #44]	; (8001388 <main+0x6c>)
 800135c:	f003 fd84 	bl	8004e68 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8001360:	2100      	movs	r1, #0
 8001362:	480a      	ldr	r0, [pc, #40]	; (800138c <main+0x70>)
 8001364:	f003 fd80 	bl	8004e68 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8001368:	2104      	movs	r1, #4
 800136a:	4808      	ldr	r0, [pc, #32]	; (800138c <main+0x70>)
 800136c:	f003 fd7c 	bl	8004e68 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 8001370:	2108      	movs	r1, #8
 8001372:	4806      	ldr	r0, [pc, #24]	; (800138c <main+0x70>)
 8001374:	f003 fd78 	bl	8004e68 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);
 8001378:	210c      	movs	r1, #12
 800137a:	4804      	ldr	r0, [pc, #16]	; (800138c <main+0x70>)
 800137c:	f003 fd74 	bl	8004e68 <HAL_TIM_PWM_Start>
//	       HAL_UART_Transmit(&huart1, (uint8_t *)A1,sizeof(A1),0xffff);
//	       HAL_Delay(2000);
	  /*HAL_UART_Transmit(&huart2,redGreen,sizeof(redGreen),1000);
	  HAL_UART_Transmit(&huart1, (uint8_t *)A1,sizeof(A1),0xffff);
	  HAL_Delay(10000);*/
	  buzhou();
 8001380:	f7ff fd16 	bl	8000db0 <buzhou>
 8001384:	e7fc      	b.n	8001380 <main+0x64>
 8001386:	bf00      	nop
 8001388:	24000228 	.word	0x24000228
 800138c:	240000b0 	.word	0x240000b0

08001390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b09c      	sub	sp, #112	; 0x70
 8001394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139a:	224c      	movs	r2, #76	; 0x4c
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f005 ffb2 	bl	8007308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2220      	movs	r2, #32
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f005 ffac 	bl	8007308 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013b0:	2002      	movs	r0, #2
 80013b2:	f001 f94d 	bl	8002650 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <SystemClock_Config+0xd0>)
 80013bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013be:	4a28      	ldr	r2, [pc, #160]	; (8001460 <SystemClock_Config+0xd0>)
 80013c0:	f023 0301 	bic.w	r3, r3, #1
 80013c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <SystemClock_Config+0xd0>)
 80013c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <SystemClock_Config+0xd4>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013d8:	4a22      	ldr	r2, [pc, #136]	; (8001464 <SystemClock_Config+0xd4>)
 80013da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b20      	ldr	r3, [pc, #128]	; (8001464 <SystemClock_Config+0xd4>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013ec:	bf00      	nop
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <SystemClock_Config+0xd4>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013fa:	d1f8      	bne.n	80013ee <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013fc:	2302      	movs	r3, #2
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001400:	2301      	movs	r3, #1
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001404:	2340      	movs	r3, #64	; 0x40
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001408:	2300      	movs	r3, #0
 800140a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001410:	4618      	mov	r0, r3
 8001412:	f001 f957 	bl	80026c4 <HAL_RCC_OscConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800141c:	f000 fb30 	bl	8001a80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001420:	233f      	movs	r3, #63	; 0x3f
 8001422:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001434:	2340      	movs	r3, #64	; 0x40
 8001436:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800143c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2101      	movs	r1, #1
 8001446:	4618      	mov	r0, r3
 8001448:	f001 fd68 	bl	8002f1c <HAL_RCC_ClockConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001452:	f000 fb15 	bl	8001a80 <Error_Handler>
  }
}
 8001456:	bf00      	nop
 8001458:	3770      	adds	r7, #112	; 0x70
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	58000400 	.word	0x58000400
 8001464:	58024800 	.word	0x58024800

08001468 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b09a      	sub	sp, #104	; 0x68
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001488:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	615a      	str	r2, [r3, #20]
 800149a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	222c      	movs	r2, #44	; 0x2c
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f005 ff30 	bl	8007308 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014a8:	4b55      	ldr	r3, [pc, #340]	; (8001600 <MX_TIM1_Init+0x198>)
 80014aa:	4a56      	ldr	r2, [pc, #344]	; (8001604 <MX_TIM1_Init+0x19c>)
 80014ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 80014ae:	4b54      	ldr	r3, [pc, #336]	; (8001600 <MX_TIM1_Init+0x198>)
 80014b0:	221f      	movs	r2, #31
 80014b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b52      	ldr	r3, [pc, #328]	; (8001600 <MX_TIM1_Init+0x198>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80014ba:	4b51      	ldr	r3, [pc, #324]	; (8001600 <MX_TIM1_Init+0x198>)
 80014bc:	2263      	movs	r2, #99	; 0x63
 80014be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	4b4f      	ldr	r3, [pc, #316]	; (8001600 <MX_TIM1_Init+0x198>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014c6:	4b4e      	ldr	r3, [pc, #312]	; (8001600 <MX_TIM1_Init+0x198>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014cc:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <MX_TIM1_Init+0x198>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014d2:	484b      	ldr	r0, [pc, #300]	; (8001600 <MX_TIM1_Init+0x198>)
 80014d4:	f003 fc10 	bl	8004cf8 <HAL_TIM_Base_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014de:	f000 facf 	bl	8001a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014ec:	4619      	mov	r1, r3
 80014ee:	4844      	ldr	r0, [pc, #272]	; (8001600 <MX_TIM1_Init+0x198>)
 80014f0:	f003 fedc 	bl	80052ac <HAL_TIM_ConfigClockSource>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014fa:	f000 fac1 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014fe:	4840      	ldr	r0, [pc, #256]	; (8001600 <MX_TIM1_Init+0x198>)
 8001500:	f003 fc51 	bl	8004da6 <HAL_TIM_PWM_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800150a:	f000 fab9 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800151a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800151e:	4619      	mov	r1, r3
 8001520:	4837      	ldr	r0, [pc, #220]	; (8001600 <MX_TIM1_Init+0x198>)
 8001522:	f004 fbef 	bl	8005d04 <HAL_TIMEx_MasterConfigSynchronization>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800152c:	f000 faa8 	bl	8001a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001530:	2360      	movs	r3, #96	; 0x60
 8001532:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001538:	2300      	movs	r3, #0
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800153c:	2300      	movs	r3, #0
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001550:	2200      	movs	r2, #0
 8001552:	4619      	mov	r1, r3
 8001554:	482a      	ldr	r0, [pc, #168]	; (8001600 <MX_TIM1_Init+0x198>)
 8001556:	f003 fd95 	bl	8005084 <HAL_TIM_PWM_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001560:	f000 fa8e 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001564:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001568:	2204      	movs	r2, #4
 800156a:	4619      	mov	r1, r3
 800156c:	4824      	ldr	r0, [pc, #144]	; (8001600 <MX_TIM1_Init+0x198>)
 800156e:	f003 fd89 	bl	8005084 <HAL_TIM_PWM_ConfigChannel>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001578:	f000 fa82 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800157c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001580:	2208      	movs	r2, #8
 8001582:	4619      	mov	r1, r3
 8001584:	481e      	ldr	r0, [pc, #120]	; (8001600 <MX_TIM1_Init+0x198>)
 8001586:	f003 fd7d 	bl	8005084 <HAL_TIM_PWM_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001590:	f000 fa76 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001594:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001598:	220c      	movs	r2, #12
 800159a:	4619      	mov	r1, r3
 800159c:	4818      	ldr	r0, [pc, #96]	; (8001600 <MX_TIM1_Init+0x198>)
 800159e:	f003 fd71 	bl	8005084 <HAL_TIM_PWM_ConfigChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80015a8:	f000 fa6a 	bl	8001a80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	4619      	mov	r1, r3
 80015e0:	4807      	ldr	r0, [pc, #28]	; (8001600 <MX_TIM1_Init+0x198>)
 80015e2:	f004 fc1d 	bl	8005e20 <HAL_TIMEx_ConfigBreakDeadTime>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 80015ec:	f000 fa48 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <MX_TIM1_Init+0x198>)
 80015f2:	f000 fa9f 	bl	8001b34 <HAL_TIM_MspPostInit>

}
 80015f6:	bf00      	nop
 80015f8:	3768      	adds	r7, #104	; 0x68
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	24000228 	.word	0x24000228
 8001604:	40010000 	.word	0x40010000

08001608 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b09a      	sub	sp, #104	; 0x68
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001628:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
 8001638:	615a      	str	r2, [r3, #20]
 800163a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	222c      	movs	r2, #44	; 0x2c
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f005 fe60 	bl	8007308 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001648:	4b55      	ldr	r3, [pc, #340]	; (80017a0 <MX_TIM8_Init+0x198>)
 800164a:	4a56      	ldr	r2, [pc, #344]	; (80017a4 <MX_TIM8_Init+0x19c>)
 800164c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 800164e:	4b54      	ldr	r3, [pc, #336]	; (80017a0 <MX_TIM8_Init+0x198>)
 8001650:	223f      	movs	r2, #63	; 0x3f
 8001652:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001654:	4b52      	ldr	r3, [pc, #328]	; (80017a0 <MX_TIM8_Init+0x198>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 800165a:	4b51      	ldr	r3, [pc, #324]	; (80017a0 <MX_TIM8_Init+0x198>)
 800165c:	2263      	movs	r2, #99	; 0x63
 800165e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001660:	4b4f      	ldr	r3, [pc, #316]	; (80017a0 <MX_TIM8_Init+0x198>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001666:	4b4e      	ldr	r3, [pc, #312]	; (80017a0 <MX_TIM8_Init+0x198>)
 8001668:	2200      	movs	r2, #0
 800166a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166c:	4b4c      	ldr	r3, [pc, #304]	; (80017a0 <MX_TIM8_Init+0x198>)
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001672:	484b      	ldr	r0, [pc, #300]	; (80017a0 <MX_TIM8_Init+0x198>)
 8001674:	f003 fb40 	bl	8004cf8 <HAL_TIM_Base_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800167e:	f000 f9ff 	bl	8001a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001686:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001688:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800168c:	4619      	mov	r1, r3
 800168e:	4844      	ldr	r0, [pc, #272]	; (80017a0 <MX_TIM8_Init+0x198>)
 8001690:	f003 fe0c 	bl	80052ac <HAL_TIM_ConfigClockSource>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800169a:	f000 f9f1 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800169e:	4840      	ldr	r0, [pc, #256]	; (80017a0 <MX_TIM8_Init+0x198>)
 80016a0:	f003 fb81 	bl	8004da6 <HAL_TIM_PWM_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80016aa:	f000 f9e9 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016be:	4619      	mov	r1, r3
 80016c0:	4837      	ldr	r0, [pc, #220]	; (80017a0 <MX_TIM8_Init+0x198>)
 80016c2:	f004 fb1f 	bl	8005d04 <HAL_TIMEx_MasterConfigSynchronization>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 80016cc:	f000 f9d8 	bl	8001a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d0:	2360      	movs	r3, #96	; 0x60
 80016d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d8:	2300      	movs	r3, #0
 80016da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016dc:	2300      	movs	r3, #0
 80016de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016f0:	2200      	movs	r2, #0
 80016f2:	4619      	mov	r1, r3
 80016f4:	482a      	ldr	r0, [pc, #168]	; (80017a0 <MX_TIM8_Init+0x198>)
 80016f6:	f003 fcc5 	bl	8005084 <HAL_TIM_PWM_ConfigChannel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8001700:	f000 f9be 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001704:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001708:	2204      	movs	r2, #4
 800170a:	4619      	mov	r1, r3
 800170c:	4824      	ldr	r0, [pc, #144]	; (80017a0 <MX_TIM8_Init+0x198>)
 800170e:	f003 fcb9 	bl	8005084 <HAL_TIM_PWM_ConfigChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8001718:	f000 f9b2 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800171c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001720:	2208      	movs	r2, #8
 8001722:	4619      	mov	r1, r3
 8001724:	481e      	ldr	r0, [pc, #120]	; (80017a0 <MX_TIM8_Init+0x198>)
 8001726:	f003 fcad 	bl	8005084 <HAL_TIM_PWM_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8001730:	f000 f9a6 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001734:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001738:	220c      	movs	r2, #12
 800173a:	4619      	mov	r1, r3
 800173c:	4818      	ldr	r0, [pc, #96]	; (80017a0 <MX_TIM8_Init+0x198>)
 800173e:	f003 fca1 	bl	8005084 <HAL_TIM_PWM_ConfigChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8001748:	f000 f99a 	bl	8001a80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001764:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800176e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	4619      	mov	r1, r3
 8001780:	4807      	ldr	r0, [pc, #28]	; (80017a0 <MX_TIM8_Init+0x198>)
 8001782:	f004 fb4d 	bl	8005e20 <HAL_TIMEx_ConfigBreakDeadTime>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM8_Init+0x188>
  {
    Error_Handler();
 800178c:	f000 f978 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001790:	4803      	ldr	r0, [pc, #12]	; (80017a0 <MX_TIM8_Init+0x198>)
 8001792:	f000 f9cf 	bl	8001b34 <HAL_TIM_MspPostInit>

}
 8001796:	bf00      	nop
 8001798:	3768      	adds	r7, #104	; 0x68
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	240000b0 	.word	0x240000b0
 80017a4:	40010400 	.word	0x40010400

080017a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <MX_USART1_UART_Init+0x90>)
 80017ae:	4a23      	ldr	r2, [pc, #140]	; (800183c <MX_USART1_UART_Init+0x94>)
 80017b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <MX_USART1_UART_Init+0x90>)
 80017b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ba:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <MX_USART1_UART_Init+0x90>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <MX_USART1_UART_Init+0x90>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <MX_USART1_UART_Init+0x90>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017cc:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <MX_USART1_UART_Init+0x90>)
 80017ce:	220c      	movs	r2, #12
 80017d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d2:	4b19      	ldr	r3, [pc, #100]	; (8001838 <MX_USART1_UART_Init+0x90>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d8:	4b17      	ldr	r3, [pc, #92]	; (8001838 <MX_USART1_UART_Init+0x90>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <MX_USART1_UART_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017e4:	4b14      	ldr	r3, [pc, #80]	; (8001838 <MX_USART1_UART_Init+0x90>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <MX_USART1_UART_Init+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017f0:	4811      	ldr	r0, [pc, #68]	; (8001838 <MX_USART1_UART_Init+0x90>)
 80017f2:	f004 fb93 	bl	8005f1c <HAL_UART_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80017fc:	f000 f940 	bl	8001a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001800:	2100      	movs	r1, #0
 8001802:	480d      	ldr	r0, [pc, #52]	; (8001838 <MX_USART1_UART_Init+0x90>)
 8001804:	f005 fc92 	bl	800712c <HAL_UARTEx_SetTxFifoThreshold>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800180e:	f000 f937 	bl	8001a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001812:	2100      	movs	r1, #0
 8001814:	4808      	ldr	r0, [pc, #32]	; (8001838 <MX_USART1_UART_Init+0x90>)
 8001816:	f005 fcc7 	bl	80071a8 <HAL_UARTEx_SetRxFifoThreshold>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001820:	f000 f92e 	bl	8001a80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001824:	4804      	ldr	r0, [pc, #16]	; (8001838 <MX_USART1_UART_Init+0x90>)
 8001826:	f005 fc48 	bl	80070ba <HAL_UARTEx_DisableFifoMode>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001830:	f000 f926 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	24000198 	.word	0x24000198
 800183c:	40011000 	.word	0x40011000

08001840 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001844:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 8001846:	4a23      	ldr	r2, [pc, #140]	; (80018d4 <MX_USART2_UART_Init+0x94>)
 8001848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 800184c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001852:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001858:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800185e:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 8001884:	2200      	movs	r2, #0
 8001886:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001888:	4811      	ldr	r0, [pc, #68]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 800188a:	f004 fb47 	bl	8005f1c <HAL_UART_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001894:	f000 f8f4 	bl	8001a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001898:	2100      	movs	r1, #0
 800189a:	480d      	ldr	r0, [pc, #52]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 800189c:	f005 fc46 	bl	800712c <HAL_UARTEx_SetTxFifoThreshold>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80018a6:	f000 f8eb 	bl	8001a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018aa:	2100      	movs	r1, #0
 80018ac:	4808      	ldr	r0, [pc, #32]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 80018ae:	f005 fc7b 	bl	80071a8 <HAL_UARTEx_SetRxFifoThreshold>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80018b8:	f000 f8e2 	bl	8001a80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 80018be:	f005 fbfc 	bl	80070ba <HAL_UARTEx_DisableFifoMode>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80018c8:	f000 f8da 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	24000274 	.word	0x24000274
 80018d4:	40004400 	.word	0x40004400

080018d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018dc:	4b22      	ldr	r3, [pc, #136]	; (8001968 <MX_USART3_UART_Init+0x90>)
 80018de:	4a23      	ldr	r2, [pc, #140]	; (800196c <MX_USART3_UART_Init+0x94>)
 80018e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80018e2:	4b21      	ldr	r3, [pc, #132]	; (8001968 <MX_USART3_UART_Init+0x90>)
 80018e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <MX_USART3_UART_Init+0x90>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <MX_USART3_UART_Init+0x90>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <MX_USART3_UART_Init+0x90>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_USART3_UART_Init+0x90>)
 80018fe:	220c      	movs	r2, #12
 8001900:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <MX_USART3_UART_Init+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <MX_USART3_UART_Init+0x90>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <MX_USART3_UART_Init+0x90>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <MX_USART3_UART_Init+0x90>)
 8001916:	2200      	movs	r2, #0
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <MX_USART3_UART_Init+0x90>)
 800191c:	2200      	movs	r2, #0
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001920:	4811      	ldr	r0, [pc, #68]	; (8001968 <MX_USART3_UART_Init+0x90>)
 8001922:	f004 fafb 	bl	8005f1c <HAL_UART_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800192c:	f000 f8a8 	bl	8001a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001930:	2100      	movs	r1, #0
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <MX_USART3_UART_Init+0x90>)
 8001934:	f005 fbfa 	bl	800712c <HAL_UARTEx_SetTxFifoThreshold>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800193e:	f000 f89f 	bl	8001a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001942:	2100      	movs	r1, #0
 8001944:	4808      	ldr	r0, [pc, #32]	; (8001968 <MX_USART3_UART_Init+0x90>)
 8001946:	f005 fc2f 	bl	80071a8 <HAL_UARTEx_SetRxFifoThreshold>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001950:	f000 f896 	bl	8001a80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <MX_USART3_UART_Init+0x90>)
 8001956:	f005 fbb0 	bl	80070ba <HAL_UARTEx_DisableFifoMode>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001960:	f000 f88e 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	240000fc 	.word	0x240000fc
 800196c:	40004800 	.word	0x40004800

08001970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08a      	sub	sp, #40	; 0x28
 8001974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001986:	4b3a      	ldr	r3, [pc, #232]	; (8001a70 <MX_GPIO_Init+0x100>)
 8001988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800198c:	4a38      	ldr	r2, [pc, #224]	; (8001a70 <MX_GPIO_Init+0x100>)
 800198e:	f043 0310 	orr.w	r3, r3, #16
 8001992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001996:	4b36      	ldr	r3, [pc, #216]	; (8001a70 <MX_GPIO_Init+0x100>)
 8001998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a4:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <MX_GPIO_Init+0x100>)
 80019a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019aa:	4a31      	ldr	r2, [pc, #196]	; (8001a70 <MX_GPIO_Init+0x100>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b4:	4b2e      	ldr	r3, [pc, #184]	; (8001a70 <MX_GPIO_Init+0x100>)
 80019b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <MX_GPIO_Init+0x100>)
 80019c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c8:	4a29      	ldr	r2, [pc, #164]	; (8001a70 <MX_GPIO_Init+0x100>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d2:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <MX_GPIO_Init+0x100>)
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e0:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <MX_GPIO_Init+0x100>)
 80019e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e6:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <MX_GPIO_Init+0x100>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f0:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <MX_GPIO_Init+0x100>)
 80019f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <MX_GPIO_Init+0x100>)
 8001a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a04:	4a1a      	ldr	r2, [pc, #104]	; (8001a70 <MX_GPIO_Init+0x100>)
 8001a06:	f043 0308 	orr.w	r3, r3, #8
 8001a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <MX_GPIO_Init+0x100>)
 8001a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a1c:	2320      	movs	r3, #32
 8001a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4811      	ldr	r0, [pc, #68]	; (8001a74 <MX_GPIO_Init+0x104>)
 8001a30:	f000 fc46 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	4619      	mov	r1, r3
 8001a48:	480b      	ldr	r0, [pc, #44]	; (8001a78 <MX_GPIO_Init+0x108>)
 8001a4a:	f000 fc39 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4619      	mov	r1, r3
 8001a62:	4806      	ldr	r0, [pc, #24]	; (8001a7c <MX_GPIO_Init+0x10c>)
 8001a64:	f000 fc2c 	bl	80022c0 <HAL_GPIO_Init>

}
 8001a68:	bf00      	nop
 8001a6a:	3728      	adds	r7, #40	; 0x28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	58024400 	.word	0x58024400
 8001a74:	58021000 	.word	0x58021000
 8001a78:	58020800 	.word	0x58020800
 8001a7c:	58020400 	.word	0x58020400

08001a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a84:	b672      	cpsid	i
}
 8001a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <Error_Handler+0x8>
	...

08001a8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_MspInit+0x30>)
 8001a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a98:	4a08      	ldr	r2, [pc, #32]	; (8001abc <HAL_MspInit+0x30>)
 8001a9a:	f043 0302 	orr.w	r3, r3, #2
 8001a9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_MspInit+0x30>)
 8001aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	58024400 	.word	0x58024400

08001ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a16      	ldr	r2, [pc, #88]	; (8001b28 <HAL_TIM_Base_MspInit+0x68>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d10f      	bne.n	8001af2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <HAL_TIM_Base_MspInit+0x6c>)
 8001ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <HAL_TIM_Base_MspInit+0x6c>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_TIM_Base_MspInit+0x6c>)
 8001ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001af0:	e013      	b.n	8001b1a <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM8)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <HAL_TIM_Base_MspInit+0x70>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d10e      	bne.n	8001b1a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_TIM_Base_MspInit+0x6c>)
 8001afe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <HAL_TIM_Base_MspInit+0x6c>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <HAL_TIM_Base_MspInit+0x6c>)
 8001b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	58024400 	.word	0x58024400
 8001b30:	40010400 	.word	0x40010400

08001b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a26      	ldr	r2, [pc, #152]	; (8001bec <HAL_TIM_MspPostInit+0xb8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d120      	bne.n	8001b98 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <HAL_TIM_MspPostInit+0xbc>)
 8001b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5c:	4a24      	ldr	r2, [pc, #144]	; (8001bf0 <HAL_TIM_MspPostInit+0xbc>)
 8001b5e:	f043 0310 	orr.w	r3, r3, #16
 8001b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b66:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <HAL_TIM_MspPostInit+0xbc>)
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001b74:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4818      	ldr	r0, [pc, #96]	; (8001bf4 <HAL_TIM_MspPostInit+0xc0>)
 8001b92:	f000 fb95 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001b96:	e024      	b.n	8001be2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM8)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a16      	ldr	r2, [pc, #88]	; (8001bf8 <HAL_TIM_MspPostInit+0xc4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d11f      	bne.n	8001be2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <HAL_TIM_MspPostInit+0xbc>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba8:	4a11      	ldr	r2, [pc, #68]	; (8001bf0 <HAL_TIM_MspPostInit+0xbc>)
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_TIM_MspPostInit+0xbc>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001bc0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4807      	ldr	r0, [pc, #28]	; (8001bfc <HAL_TIM_MspPostInit+0xc8>)
 8001bde:	f000 fb6f 	bl	80022c0 <HAL_GPIO_Init>
}
 8001be2:	bf00      	nop
 8001be4:	3728      	adds	r7, #40	; 0x28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40010000 	.word	0x40010000
 8001bf0:	58024400 	.word	0x58024400
 8001bf4:	58021000 	.word	0x58021000
 8001bf8:	40010400 	.word	0x40010400
 8001bfc:	58020800 	.word	0x58020800

08001c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b0bc      	sub	sp, #240	; 0xf0
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c18:	f107 0320 	add.w	r3, r7, #32
 8001c1c:	22bc      	movs	r2, #188	; 0xbc
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f005 fb71 	bl	8007308 <memset>
  if(huart->Instance==USART1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a6d      	ldr	r2, [pc, #436]	; (8001de0 <HAL_UART_MspInit+0x1e0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d143      	bne.n	8001cb8 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c30:	2301      	movs	r3, #1
 8001c32:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c3a:	f107 0320 	add.w	r3, r7, #32
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f001 fcf8 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c4a:	f7ff ff19 	bl	8001a80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c4e:	4b65      	ldr	r3, [pc, #404]	; (8001de4 <HAL_UART_MspInit+0x1e4>)
 8001c50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c54:	4a63      	ldr	r2, [pc, #396]	; (8001de4 <HAL_UART_MspInit+0x1e4>)
 8001c56:	f043 0310 	orr.w	r3, r3, #16
 8001c5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c5e:	4b61      	ldr	r3, [pc, #388]	; (8001de4 <HAL_UART_MspInit+0x1e4>)
 8001c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6c:	4b5d      	ldr	r3, [pc, #372]	; (8001de4 <HAL_UART_MspInit+0x1e4>)
 8001c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c72:	4a5c      	ldr	r2, [pc, #368]	; (8001de4 <HAL_UART_MspInit+0x1e4>)
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c7c:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <HAL_UART_MspInit+0x1e4>)
 8001c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	61bb      	str	r3, [r7, #24]
 8001c88:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c8a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001caa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cae:	4619      	mov	r1, r3
 8001cb0:	484d      	ldr	r0, [pc, #308]	; (8001de8 <HAL_UART_MspInit+0x1e8>)
 8001cb2:	f000 fb05 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cb6:	e08f      	b.n	8001dd8 <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a4b      	ldr	r2, [pc, #300]	; (8001dec <HAL_UART_MspInit+0x1ec>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d142      	bne.n	8001d48 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ccc:	f107 0320 	add.w	r3, r7, #32
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 fcaf 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001cdc:	f7ff fed0 	bl	8001a80 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ce0:	4b40      	ldr	r3, [pc, #256]	; (8001de4 <HAL_UART_MspInit+0x1e4>)
 8001ce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ce6:	4a3f      	ldr	r2, [pc, #252]	; (8001de4 <HAL_UART_MspInit+0x1e4>)
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cf0:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <HAL_UART_MspInit+0x1e4>)
 8001cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	4b39      	ldr	r3, [pc, #228]	; (8001de4 <HAL_UART_MspInit+0x1e4>)
 8001d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d04:	4a37      	ldr	r2, [pc, #220]	; (8001de4 <HAL_UART_MspInit+0x1e4>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d0e:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <HAL_UART_MspInit+0x1e4>)
 8001d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d34:	2307      	movs	r3, #7
 8001d36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d3e:	4619      	mov	r1, r3
 8001d40:	482b      	ldr	r0, [pc, #172]	; (8001df0 <HAL_UART_MspInit+0x1f0>)
 8001d42:	f000 fabd 	bl	80022c0 <HAL_GPIO_Init>
}
 8001d46:	e047      	b.n	8001dd8 <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART3)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a29      	ldr	r2, [pc, #164]	; (8001df4 <HAL_UART_MspInit+0x1f4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d142      	bne.n	8001dd8 <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d52:	2302      	movs	r3, #2
 8001d54:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d5c:	f107 0320 	add.w	r3, r7, #32
 8001d60:	4618      	mov	r0, r3
 8001d62:	f001 fc67 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8001d6c:	f7ff fe88 	bl	8001a80 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <HAL_UART_MspInit+0x1e4>)
 8001d72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d76:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <HAL_UART_MspInit+0x1e4>)
 8001d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_UART_MspInit+0x1e4>)
 8001d82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_UART_MspInit+0x1e4>)
 8001d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d94:	4a13      	ldr	r2, [pc, #76]	; (8001de4 <HAL_UART_MspInit+0x1e4>)
 8001d96:	f043 0308 	orr.w	r3, r3, #8
 8001d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <HAL_UART_MspInit+0x1e4>)
 8001da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001db0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dc6:	2307      	movs	r3, #7
 8001dc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dcc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4809      	ldr	r0, [pc, #36]	; (8001df8 <HAL_UART_MspInit+0x1f8>)
 8001dd4:	f000 fa74 	bl	80022c0 <HAL_GPIO_Init>
}
 8001dd8:	bf00      	nop
 8001dda:	37f0      	adds	r7, #240	; 0xf0
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40011000 	.word	0x40011000
 8001de4:	58024400 	.word	0x58024400
 8001de8:	58020400 	.word	0x58020400
 8001dec:	40004400 	.word	0x40004400
 8001df0:	58020000 	.word	0x58020000
 8001df4:	40004800 	.word	0x40004800
 8001df8:	58020c00 	.word	0x58020c00

08001dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <NMI_Handler+0x4>

08001e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <HardFault_Handler+0x4>

08001e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <MemManage_Handler+0x4>

08001e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <BusFault_Handler+0x4>

08001e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <UsageFault_Handler+0x4>

08001e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e48:	f000 f92a 	bl	80020a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e54:	4b39      	ldr	r3, [pc, #228]	; (8001f3c <SystemInit+0xec>)
 8001e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5a:	4a38      	ldr	r2, [pc, #224]	; (8001f3c <SystemInit+0xec>)
 8001e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e64:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <SystemInit+0xf0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	2b06      	cmp	r3, #6
 8001e6e:	d807      	bhi.n	8001e80 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e70:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <SystemInit+0xf0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f023 030f 	bic.w	r3, r3, #15
 8001e78:	4a31      	ldr	r2, [pc, #196]	; (8001f40 <SystemInit+0xf0>)
 8001e7a:	f043 0307 	orr.w	r3, r3, #7
 8001e7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e80:	4b30      	ldr	r3, [pc, #192]	; (8001f44 <SystemInit+0xf4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a2f      	ldr	r2, [pc, #188]	; (8001f44 <SystemInit+0xf4>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e8c:	4b2d      	ldr	r3, [pc, #180]	; (8001f44 <SystemInit+0xf4>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e92:	4b2c      	ldr	r3, [pc, #176]	; (8001f44 <SystemInit+0xf4>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	492b      	ldr	r1, [pc, #172]	; (8001f44 <SystemInit+0xf4>)
 8001e98:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <SystemInit+0xf8>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e9e:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <SystemInit+0xf0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d007      	beq.n	8001eba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001eaa:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <SystemInit+0xf0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 030f 	bic.w	r3, r3, #15
 8001eb2:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <SystemInit+0xf0>)
 8001eb4:	f043 0307 	orr.w	r3, r3, #7
 8001eb8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001eba:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <SystemInit+0xf4>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <SystemInit+0xf4>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <SystemInit+0xf4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <SystemInit+0xf4>)
 8001ece:	4a1f      	ldr	r2, [pc, #124]	; (8001f4c <SystemInit+0xfc>)
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <SystemInit+0xf4>)
 8001ed4:	4a1e      	ldr	r2, [pc, #120]	; (8001f50 <SystemInit+0x100>)
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <SystemInit+0xf4>)
 8001eda:	4a1e      	ldr	r2, [pc, #120]	; (8001f54 <SystemInit+0x104>)
 8001edc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <SystemInit+0xf4>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ee4:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <SystemInit+0xf4>)
 8001ee6:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <SystemInit+0x104>)
 8001ee8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <SystemInit+0xf4>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ef0:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <SystemInit+0xf4>)
 8001ef2:	4a18      	ldr	r2, [pc, #96]	; (8001f54 <SystemInit+0x104>)
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <SystemInit+0xf4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <SystemInit+0xf4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a10      	ldr	r2, [pc, #64]	; (8001f44 <SystemInit+0xf4>)
 8001f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f08:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <SystemInit+0xf4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <SystemInit+0x108>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <SystemInit+0x10c>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f1a:	d202      	bcs.n	8001f22 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <SystemInit+0x110>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <SystemInit+0x114>)
 8001f24:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f28:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f2a:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <SystemInit+0xec>)
 8001f2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f30:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00
 8001f40:	52002000 	.word	0x52002000
 8001f44:	58024400 	.word	0x58024400
 8001f48:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f4c:	02020200 	.word	0x02020200
 8001f50:	01ff0000 	.word	0x01ff0000
 8001f54:	01010280 	.word	0x01010280
 8001f58:	5c001000 	.word	0x5c001000
 8001f5c:	ffff0000 	.word	0xffff0000
 8001f60:	51008108 	.word	0x51008108
 8001f64:	52004000 	.word	0x52004000

08001f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f6c:	f7ff ff70 	bl	8001e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f72:	e003      	b.n	8001f7c <LoopCopyDataInit>

08001f74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001f76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f7a:	3104      	adds	r1, #4

08001f7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f7c:	480a      	ldr	r0, [pc, #40]	; (8001fa8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001f80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f84:	d3f6      	bcc.n	8001f74 <CopyDataInit>
  ldr  r2, =_sbss
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001f88:	e002      	b.n	8001f90 <LoopFillZerobss>

08001f8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f8c:	f842 3b04 	str.w	r3, [r2], #4

08001f90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001f92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f94:	d3f9      	bcc.n	8001f8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f96:	f005 f993 	bl	80072c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9a:	f7ff f9bf 	bl	800131c <main>
  bx  lr    
 8001f9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fa0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001fa4:	08007378 	.word	0x08007378
  ldr  r0, =_sdata
 8001fa8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001fac:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 8001fb0:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 8001fb4:	24000308 	.word	0x24000308

08001fb8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC3_IRQHandler>
	...

08001fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc2:	2003      	movs	r0, #3
 8001fc4:	f000 f94a 	bl	800225c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fc8:	f001 f95e 	bl	8003288 <HAL_RCC_GetSysClockFreq>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <HAL_Init+0x68>)
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	4913      	ldr	r1, [pc, #76]	; (8002028 <HAL_Init+0x6c>)
 8001fda:	5ccb      	ldrb	r3, [r1, r3]
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <HAL_Init+0x68>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	4a0e      	ldr	r2, [pc, #56]	; (8002028 <HAL_Init+0x6c>)
 8001ff0:	5cd3      	ldrb	r3, [r2, r3]
 8001ff2:	f003 031f 	and.w	r3, r3, #31
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffc:	4a0b      	ldr	r2, [pc, #44]	; (800202c <HAL_Init+0x70>)
 8001ffe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002000:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <HAL_Init+0x74>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002006:	2000      	movs	r0, #0
 8002008:	f000 f814 	bl	8002034 <HAL_InitTick>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e002      	b.n	800201c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002016:	f7ff fd39 	bl	8001a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	58024400 	.word	0x58024400
 8002028:	08007330 	.word	0x08007330
 800202c:	2400006c 	.word	0x2400006c
 8002030:	24000068 	.word	0x24000068

08002034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800203c:	4b15      	ldr	r3, [pc, #84]	; (8002094 <HAL_InitTick+0x60>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e021      	b.n	800208c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002048:	4b13      	ldr	r3, [pc, #76]	; (8002098 <HAL_InitTick+0x64>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_InitTick+0x60>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002056:	fbb3 f3f1 	udiv	r3, r3, r1
 800205a:	fbb2 f3f3 	udiv	r3, r2, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f921 	bl	80022a6 <HAL_SYSTICK_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e00e      	b.n	800208c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b0f      	cmp	r3, #15
 8002072:	d80a      	bhi.n	800208a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002074:	2200      	movs	r2, #0
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f000 f8f9 	bl	8002272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002080:	4a06      	ldr	r2, [pc, #24]	; (800209c <HAL_InitTick+0x68>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	24000074 	.word	0x24000074
 8002098:	24000068 	.word	0x24000068
 800209c:	24000070 	.word	0x24000070

080020a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_IncTick+0x20>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_IncTick+0x24>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <HAL_IncTick+0x24>)
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	24000074 	.word	0x24000074
 80020c4:	24000304 	.word	0x24000304

080020c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTick;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_GetTick+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	24000304 	.word	0x24000304

080020e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_GetREVID+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	0c1b      	lsrs	r3, r3, #16
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	5c001000 	.word	0x5c001000

080020f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <__NVIC_SetPriorityGrouping+0x40>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002114:	4013      	ands	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 8002122:	4313      	orrs	r3, r2
 8002124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002126:	4a04      	ldr	r2, [pc, #16]	; (8002138 <__NVIC_SetPriorityGrouping+0x40>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00
 800213c:	05fa0000 	.word	0x05fa0000

08002140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <__NVIC_GetPriorityGrouping+0x18>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f003 0307 	and.w	r3, r3, #7
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	; (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002228:	d301      	bcc.n	800222e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222a:	2301      	movs	r3, #1
 800222c:	e00f      	b.n	800224e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222e:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <SysTick_Config+0x40>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002236:	210f      	movs	r1, #15
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f7ff ff8e 	bl	800215c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <SysTick_Config+0x40>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <SysTick_Config+0x40>)
 8002248:	2207      	movs	r2, #7
 800224a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	e000e010 	.word	0xe000e010

0800225c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff47 	bl	80020f8 <__NVIC_SetPriorityGrouping>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002280:	f7ff ff5e 	bl	8002140 <__NVIC_GetPriorityGrouping>
 8002284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f7ff ff90 	bl	80021b0 <NVIC_EncodePriority>
 8002290:	4602      	mov	r2, r0
 8002292:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff5f 	bl	800215c <__NVIC_SetPriority>
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ffb2 	bl	8002218 <SysTick_Config>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80022ce:	4b89      	ldr	r3, [pc, #548]	; (80024f4 <HAL_GPIO_Init+0x234>)
 80022d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022d2:	e194      	b.n	80025fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	2101      	movs	r1, #1
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8186 	beq.w	80025f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d005      	beq.n	8002304 <HAL_GPIO_Init+0x44>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d130      	bne.n	8002366 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	2203      	movs	r2, #3
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800233a:	2201      	movs	r2, #1
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	f003 0201 	and.w	r2, r3, #1
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b03      	cmp	r3, #3
 8002370:	d017      	beq.n	80023a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d123      	bne.n	80023f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	08da      	lsrs	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3208      	adds	r2, #8
 80023b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	220f      	movs	r2, #15
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	08da      	lsrs	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3208      	adds	r2, #8
 80023f0:	69b9      	ldr	r1, [r7, #24]
 80023f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2203      	movs	r2, #3
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0203 	and.w	r2, r3, #3
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80e0 	beq.w	80025f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002438:	4b2f      	ldr	r3, [pc, #188]	; (80024f8 <HAL_GPIO_Init+0x238>)
 800243a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800243e:	4a2e      	ldr	r2, [pc, #184]	; (80024f8 <HAL_GPIO_Init+0x238>)
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002448:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <HAL_GPIO_Init+0x238>)
 800244a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002456:	4a29      	ldr	r2, [pc, #164]	; (80024fc <HAL_GPIO_Init+0x23c>)
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	3302      	adds	r3, #2
 800245e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	220f      	movs	r2, #15
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a20      	ldr	r2, [pc, #128]	; (8002500 <HAL_GPIO_Init+0x240>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d052      	beq.n	8002528 <HAL_GPIO_Init+0x268>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a1f      	ldr	r2, [pc, #124]	; (8002504 <HAL_GPIO_Init+0x244>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d031      	beq.n	80024ee <HAL_GPIO_Init+0x22e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <HAL_GPIO_Init+0x248>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d02b      	beq.n	80024ea <HAL_GPIO_Init+0x22a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a1d      	ldr	r2, [pc, #116]	; (800250c <HAL_GPIO_Init+0x24c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d025      	beq.n	80024e6 <HAL_GPIO_Init+0x226>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a1c      	ldr	r2, [pc, #112]	; (8002510 <HAL_GPIO_Init+0x250>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d01f      	beq.n	80024e2 <HAL_GPIO_Init+0x222>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a1b      	ldr	r2, [pc, #108]	; (8002514 <HAL_GPIO_Init+0x254>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d019      	beq.n	80024de <HAL_GPIO_Init+0x21e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <HAL_GPIO_Init+0x258>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d013      	beq.n	80024da <HAL_GPIO_Init+0x21a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a19      	ldr	r2, [pc, #100]	; (800251c <HAL_GPIO_Init+0x25c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00d      	beq.n	80024d6 <HAL_GPIO_Init+0x216>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a18      	ldr	r2, [pc, #96]	; (8002520 <HAL_GPIO_Init+0x260>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d007      	beq.n	80024d2 <HAL_GPIO_Init+0x212>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a17      	ldr	r2, [pc, #92]	; (8002524 <HAL_GPIO_Init+0x264>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d101      	bne.n	80024ce <HAL_GPIO_Init+0x20e>
 80024ca:	2309      	movs	r3, #9
 80024cc:	e02d      	b.n	800252a <HAL_GPIO_Init+0x26a>
 80024ce:	230a      	movs	r3, #10
 80024d0:	e02b      	b.n	800252a <HAL_GPIO_Init+0x26a>
 80024d2:	2308      	movs	r3, #8
 80024d4:	e029      	b.n	800252a <HAL_GPIO_Init+0x26a>
 80024d6:	2307      	movs	r3, #7
 80024d8:	e027      	b.n	800252a <HAL_GPIO_Init+0x26a>
 80024da:	2306      	movs	r3, #6
 80024dc:	e025      	b.n	800252a <HAL_GPIO_Init+0x26a>
 80024de:	2305      	movs	r3, #5
 80024e0:	e023      	b.n	800252a <HAL_GPIO_Init+0x26a>
 80024e2:	2304      	movs	r3, #4
 80024e4:	e021      	b.n	800252a <HAL_GPIO_Init+0x26a>
 80024e6:	2303      	movs	r3, #3
 80024e8:	e01f      	b.n	800252a <HAL_GPIO_Init+0x26a>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e01d      	b.n	800252a <HAL_GPIO_Init+0x26a>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e01b      	b.n	800252a <HAL_GPIO_Init+0x26a>
 80024f2:	bf00      	nop
 80024f4:	58000080 	.word	0x58000080
 80024f8:	58024400 	.word	0x58024400
 80024fc:	58000400 	.word	0x58000400
 8002500:	58020000 	.word	0x58020000
 8002504:	58020400 	.word	0x58020400
 8002508:	58020800 	.word	0x58020800
 800250c:	58020c00 	.word	0x58020c00
 8002510:	58021000 	.word	0x58021000
 8002514:	58021400 	.word	0x58021400
 8002518:	58021800 	.word	0x58021800
 800251c:	58021c00 	.word	0x58021c00
 8002520:	58022000 	.word	0x58022000
 8002524:	58022400 	.word	0x58022400
 8002528:	2300      	movs	r3, #0
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	f002 0203 	and.w	r2, r2, #3
 8002530:	0092      	lsls	r2, r2, #2
 8002532:	4093      	lsls	r3, r2
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800253a:	4938      	ldr	r1, [pc, #224]	; (800261c <HAL_GPIO_Init+0x35c>)
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	3302      	adds	r3, #2
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800256e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800259c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	3301      	adds	r3, #1
 80025fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	f47f ae63 	bne.w	80022d4 <HAL_GPIO_Init+0x14>
  }
}
 800260e:	bf00      	nop
 8002610:	bf00      	nop
 8002612:	3724      	adds	r7, #36	; 0x24
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	58000400 	.word	0x58000400

08002620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	887b      	ldrh	r3, [r7, #2]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	e001      	b.n	8002642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002642:	7bfb      	ldrb	r3, [r7, #15]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <HAL_PWREx_ConfigSupply+0x70>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b04      	cmp	r3, #4
 8002662:	d00a      	beq.n	800267a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002664:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <HAL_PWREx_ConfigSupply+0x70>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	429a      	cmp	r2, r3
 8002670:	d001      	beq.n	8002676 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e01f      	b.n	80026b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	e01d      	b.n	80026b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <HAL_PWREx_ConfigSupply+0x70>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f023 0207 	bic.w	r2, r3, #7
 8002682:	490f      	ldr	r1, [pc, #60]	; (80026c0 <HAL_PWREx_ConfigSupply+0x70>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4313      	orrs	r3, r2
 8002688:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800268a:	f7ff fd1d 	bl	80020c8 <HAL_GetTick>
 800268e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002690:	e009      	b.n	80026a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002692:	f7ff fd19 	bl	80020c8 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026a0:	d901      	bls.n	80026a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e007      	b.n	80026b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_PWREx_ConfigSupply+0x70>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026b2:	d1ee      	bne.n	8002692 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	58024800 	.word	0x58024800

080026c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	; 0x30
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d102      	bne.n	80026d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	f000 bc1c 	b.w	8002f10 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8087 	beq.w	80027f4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e6:	4b9e      	ldr	r3, [pc, #632]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026f0:	4b9b      	ldr	r3, [pc, #620]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d007      	beq.n	800270c <HAL_RCC_OscConfig+0x48>
 80026fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fe:	2b18      	cmp	r3, #24
 8002700:	d110      	bne.n	8002724 <HAL_RCC_OscConfig+0x60>
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d10b      	bne.n	8002724 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	4b94      	ldr	r3, [pc, #592]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d06c      	beq.n	80027f2 <HAL_RCC_OscConfig+0x12e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d168      	bne.n	80027f2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e3f5      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272c:	d106      	bne.n	800273c <HAL_RCC_OscConfig+0x78>
 800272e:	4b8c      	ldr	r3, [pc, #560]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a8b      	ldr	r2, [pc, #556]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 8002734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	e02e      	b.n	800279a <HAL_RCC_OscConfig+0xd6>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10c      	bne.n	800275e <HAL_RCC_OscConfig+0x9a>
 8002744:	4b86      	ldr	r3, [pc, #536]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a85      	ldr	r2, [pc, #532]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 800274a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	4b83      	ldr	r3, [pc, #524]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a82      	ldr	r2, [pc, #520]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 8002756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	e01d      	b.n	800279a <HAL_RCC_OscConfig+0xd6>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002766:	d10c      	bne.n	8002782 <HAL_RCC_OscConfig+0xbe>
 8002768:	4b7d      	ldr	r3, [pc, #500]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a7c      	ldr	r2, [pc, #496]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 800276e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	4b7a      	ldr	r3, [pc, #488]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a79      	ldr	r2, [pc, #484]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 800277a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	e00b      	b.n	800279a <HAL_RCC_OscConfig+0xd6>
 8002782:	4b77      	ldr	r3, [pc, #476]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a76      	ldr	r2, [pc, #472]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 8002788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b74      	ldr	r3, [pc, #464]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a73      	ldr	r2, [pc, #460]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 8002794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002798:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d013      	beq.n	80027ca <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7ff fc91 	bl	80020c8 <HAL_GetTick>
 80027a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027aa:	f7ff fc8d 	bl	80020c8 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b64      	cmp	r3, #100	; 0x64
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e3a9      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027bc:	4b68      	ldr	r3, [pc, #416]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0xe6>
 80027c8:	e014      	b.n	80027f4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ca:	f7ff fc7d 	bl	80020c8 <HAL_GetTick>
 80027ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d2:	f7ff fc79 	bl	80020c8 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b64      	cmp	r3, #100	; 0x64
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e395      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027e4:	4b5e      	ldr	r3, [pc, #376]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f0      	bne.n	80027d2 <HAL_RCC_OscConfig+0x10e>
 80027f0:	e000      	b.n	80027f4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80ca 	beq.w	8002996 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002802:	4b57      	ldr	r3, [pc, #348]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800280a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800280c:	4b54      	ldr	r3, [pc, #336]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_RCC_OscConfig+0x164>
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	2b18      	cmp	r3, #24
 800281c:	d156      	bne.n	80028cc <HAL_RCC_OscConfig+0x208>
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d151      	bne.n	80028cc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002828:	4b4d      	ldr	r3, [pc, #308]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_OscConfig+0x17c>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e367      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002840:	4b47      	ldr	r3, [pc, #284]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f023 0219 	bic.w	r2, r3, #25
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4944      	ldr	r1, [pc, #272]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002852:	f7ff fc39 	bl	80020c8 <HAL_GetTick>
 8002856:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285a:	f7ff fc35 	bl	80020c8 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e351      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800286c:	4b3c      	ldr	r3, [pc, #240]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002878:	f7ff fc32 	bl	80020e0 <HAL_GetREVID>
 800287c:	4603      	mov	r3, r0
 800287e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002882:	4293      	cmp	r3, r2
 8002884:	d817      	bhi.n	80028b6 <HAL_RCC_OscConfig+0x1f2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b40      	cmp	r3, #64	; 0x40
 800288c:	d108      	bne.n	80028a0 <HAL_RCC_OscConfig+0x1dc>
 800288e:	4b34      	ldr	r3, [pc, #208]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002896:	4a32      	ldr	r2, [pc, #200]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 8002898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800289e:	e07a      	b.n	8002996 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a0:	4b2f      	ldr	r3, [pc, #188]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	031b      	lsls	r3, r3, #12
 80028ae:	492c      	ldr	r1, [pc, #176]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b4:	e06f      	b.n	8002996 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b6:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	061b      	lsls	r3, r3, #24
 80028c4:	4926      	ldr	r1, [pc, #152]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ca:	e064      	b.n	8002996 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d047      	beq.n	8002964 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028d4:	4b22      	ldr	r3, [pc, #136]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f023 0219 	bic.w	r2, r3, #25
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	491f      	ldr	r1, [pc, #124]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e6:	f7ff fbef 	bl	80020c8 <HAL_GetTick>
 80028ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ee:	f7ff fbeb 	bl	80020c8 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e307      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002900:	4b17      	ldr	r3, [pc, #92]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290c:	f7ff fbe8 	bl	80020e0 <HAL_GetREVID>
 8002910:	4603      	mov	r3, r0
 8002912:	f241 0203 	movw	r2, #4099	; 0x1003
 8002916:	4293      	cmp	r3, r2
 8002918:	d817      	bhi.n	800294a <HAL_RCC_OscConfig+0x286>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d108      	bne.n	8002934 <HAL_RCC_OscConfig+0x270>
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800292a:	4a0d      	ldr	r2, [pc, #52]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 800292c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002930:	6053      	str	r3, [r2, #4]
 8002932:	e030      	b.n	8002996 <HAL_RCC_OscConfig+0x2d2>
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	031b      	lsls	r3, r3, #12
 8002942:	4907      	ldr	r1, [pc, #28]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
 8002948:	e025      	b.n	8002996 <HAL_RCC_OscConfig+0x2d2>
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	061b      	lsls	r3, r3, #24
 8002958:	4901      	ldr	r1, [pc, #4]	; (8002960 <HAL_RCC_OscConfig+0x29c>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
 800295e:	e01a      	b.n	8002996 <HAL_RCC_OscConfig+0x2d2>
 8002960:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002964:	4b9e      	ldr	r3, [pc, #632]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a9d      	ldr	r2, [pc, #628]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7ff fbaa 	bl	80020c8 <HAL_GetTick>
 8002974:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002978:	f7ff fba6 	bl	80020c8 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e2c2      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800298a:	4b95      	ldr	r3, [pc, #596]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 80a9 	beq.w	8002af6 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a4:	4b8e      	ldr	r3, [pc, #568]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029ac:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029ae:	4b8c      	ldr	r3, [pc, #560]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 80029b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d007      	beq.n	80029ca <HAL_RCC_OscConfig+0x306>
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b18      	cmp	r3, #24
 80029be:	d13a      	bne.n	8002a36 <HAL_RCC_OscConfig+0x372>
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d135      	bne.n	8002a36 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029ca:	4b85      	ldr	r3, [pc, #532]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_RCC_OscConfig+0x31e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	2b80      	cmp	r3, #128	; 0x80
 80029dc:	d001      	beq.n	80029e2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e296      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029e2:	f7ff fb7d 	bl	80020e0 <HAL_GetREVID>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d817      	bhi.n	8002a20 <HAL_RCC_OscConfig+0x35c>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d108      	bne.n	8002a0a <HAL_RCC_OscConfig+0x346>
 80029f8:	4b79      	ldr	r3, [pc, #484]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a00:	4a77      	ldr	r2, [pc, #476]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002a02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a06:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a08:	e075      	b.n	8002af6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a0a:	4b75      	ldr	r3, [pc, #468]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	069b      	lsls	r3, r3, #26
 8002a18:	4971      	ldr	r1, [pc, #452]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a1e:	e06a      	b.n	8002af6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a20:	4b6f      	ldr	r3, [pc, #444]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	496c      	ldr	r1, [pc, #432]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a34:	e05f      	b.n	8002af6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d042      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a3e:	4b68      	ldr	r3, [pc, #416]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a67      	ldr	r2, [pc, #412]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7ff fb3d 	bl	80020c8 <HAL_GetTick>
 8002a4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a52:	f7ff fb39 	bl	80020c8 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e255      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a64:	4b5e      	ldr	r3, [pc, #376]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a70:	f7ff fb36 	bl	80020e0 <HAL_GetREVID>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d817      	bhi.n	8002aae <HAL_RCC_OscConfig+0x3ea>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	d108      	bne.n	8002a98 <HAL_RCC_OscConfig+0x3d4>
 8002a86:	4b56      	ldr	r3, [pc, #344]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a8e:	4a54      	ldr	r2, [pc, #336]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002a90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a94:	6053      	str	r3, [r2, #4]
 8002a96:	e02e      	b.n	8002af6 <HAL_RCC_OscConfig+0x432>
 8002a98:	4b51      	ldr	r3, [pc, #324]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	069b      	lsls	r3, r3, #26
 8002aa6:	494e      	ldr	r1, [pc, #312]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]
 8002aac:	e023      	b.n	8002af6 <HAL_RCC_OscConfig+0x432>
 8002aae:	4b4c      	ldr	r3, [pc, #304]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	061b      	lsls	r3, r3, #24
 8002abc:	4948      	ldr	r1, [pc, #288]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60cb      	str	r3, [r1, #12]
 8002ac2:	e018      	b.n	8002af6 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ac4:	4b46      	ldr	r3, [pc, #280]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a45      	ldr	r2, [pc, #276]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7ff fafa 	bl	80020c8 <HAL_GetTick>
 8002ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ad8:	f7ff faf6 	bl	80020c8 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e212      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002aea:	4b3d      	ldr	r3, [pc, #244]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d036      	beq.n	8002b70 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d019      	beq.n	8002b3e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b0a:	4b35      	ldr	r3, [pc, #212]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0e:	4a34      	ldr	r2, [pc, #208]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b16:	f7ff fad7 	bl	80020c8 <HAL_GetTick>
 8002b1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b1e:	f7ff fad3 	bl	80020c8 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e1ef      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b30:	4b2b      	ldr	r3, [pc, #172]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x45a>
 8002b3c:	e018      	b.n	8002b70 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b3e:	4b28      	ldr	r3, [pc, #160]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b42:	4a27      	ldr	r2, [pc, #156]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002b44:	f023 0301 	bic.w	r3, r3, #1
 8002b48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4a:	f7ff fabd 	bl	80020c8 <HAL_GetTick>
 8002b4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b52:	f7ff fab9 	bl	80020c8 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e1d5      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b64:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f0      	bne.n	8002b52 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d039      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d019      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b84:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a15      	ldr	r2, [pc, #84]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002b8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b90:	f7ff fa9a 	bl	80020c8 <HAL_GetTick>
 8002b94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b98:	f7ff fa96 	bl	80020c8 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e1b2      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002baa:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4d4>
 8002bb6:	e01b      	b.n	8002bf0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a08      	ldr	r2, [pc, #32]	; (8002be0 <HAL_RCC_OscConfig+0x51c>)
 8002bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bc4:	f7ff fa80 	bl	80020c8 <HAL_GetTick>
 8002bc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bca:	e00b      	b.n	8002be4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bcc:	f7ff fa7c 	bl	80020c8 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d904      	bls.n	8002be4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e198      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
 8002bde:	bf00      	nop
 8002be0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002be4:	4ba3      	ldr	r3, [pc, #652]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1ed      	bne.n	8002bcc <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8081 	beq.w	8002d00 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bfe:	4b9e      	ldr	r3, [pc, #632]	; (8002e78 <HAL_RCC_OscConfig+0x7b4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a9d      	ldr	r2, [pc, #628]	; (8002e78 <HAL_RCC_OscConfig+0x7b4>)
 8002c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c0a:	f7ff fa5d 	bl	80020c8 <HAL_GetTick>
 8002c0e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c12:	f7ff fa59 	bl	80020c8 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b64      	cmp	r3, #100	; 0x64
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e175      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c24:	4b94      	ldr	r3, [pc, #592]	; (8002e78 <HAL_RCC_OscConfig+0x7b4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d106      	bne.n	8002c46 <HAL_RCC_OscConfig+0x582>
 8002c38:	4b8e      	ldr	r3, [pc, #568]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	4a8d      	ldr	r2, [pc, #564]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6713      	str	r3, [r2, #112]	; 0x70
 8002c44:	e02d      	b.n	8002ca2 <HAL_RCC_OscConfig+0x5de>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x5a4>
 8002c4e:	4b89      	ldr	r3, [pc, #548]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c52:	4a88      	ldr	r2, [pc, #544]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002c54:	f023 0301 	bic.w	r3, r3, #1
 8002c58:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5a:	4b86      	ldr	r3, [pc, #536]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	4a85      	ldr	r2, [pc, #532]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002c60:	f023 0304 	bic.w	r3, r3, #4
 8002c64:	6713      	str	r3, [r2, #112]	; 0x70
 8002c66:	e01c      	b.n	8002ca2 <HAL_RCC_OscConfig+0x5de>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b05      	cmp	r3, #5
 8002c6e:	d10c      	bne.n	8002c8a <HAL_RCC_OscConfig+0x5c6>
 8002c70:	4b80      	ldr	r3, [pc, #512]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	4a7f      	ldr	r2, [pc, #508]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002c76:	f043 0304 	orr.w	r3, r3, #4
 8002c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7c:	4b7d      	ldr	r3, [pc, #500]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c80:	4a7c      	ldr	r2, [pc, #496]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6713      	str	r3, [r2, #112]	; 0x70
 8002c88:	e00b      	b.n	8002ca2 <HAL_RCC_OscConfig+0x5de>
 8002c8a:	4b7a      	ldr	r3, [pc, #488]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	4a79      	ldr	r2, [pc, #484]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	6713      	str	r3, [r2, #112]	; 0x70
 8002c96:	4b77      	ldr	r3, [pc, #476]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9a:	4a76      	ldr	r2, [pc, #472]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002c9c:	f023 0304 	bic.w	r3, r3, #4
 8002ca0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d015      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002caa:	f7ff fa0d 	bl	80020c8 <HAL_GetTick>
 8002cae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cb0:	e00a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb2:	f7ff fa09 	bl	80020c8 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e123      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cc8:	4b6a      	ldr	r3, [pc, #424]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0ee      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x5ee>
 8002cd4:	e014      	b.n	8002d00 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7ff f9f7 	bl	80020c8 <HAL_GetTick>
 8002cda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7ff f9f3 	bl	80020c8 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e10d      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cf4:	4b5f      	ldr	r3, [pc, #380]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1ee      	bne.n	8002cde <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 8102 	beq.w	8002f0e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d0a:	4b5a      	ldr	r3, [pc, #360]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d12:	2b18      	cmp	r3, #24
 8002d14:	f000 80bd 	beq.w	8002e92 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	f040 8095 	bne.w	8002e4c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d22:	4b54      	ldr	r3, [pc, #336]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a53      	ldr	r2, [pc, #332]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002d28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2e:	f7ff f9cb 	bl	80020c8 <HAL_GetTick>
 8002d32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d36:	f7ff f9c7 	bl	80020c8 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e0e3      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d48:	4b4a      	ldr	r3, [pc, #296]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f0      	bne.n	8002d36 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d54:	4b47      	ldr	r3, [pc, #284]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002d56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d58:	4b48      	ldr	r3, [pc, #288]	; (8002e7c <HAL_RCC_OscConfig+0x7b8>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d64:	0112      	lsls	r2, r2, #4
 8002d66:	430a      	orrs	r2, r1
 8002d68:	4942      	ldr	r1, [pc, #264]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	628b      	str	r3, [r1, #40]	; 0x28
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	3b01      	subs	r3, #1
 8002d74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	025b      	lsls	r3, r3, #9
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d96:	3b01      	subs	r3, #1
 8002d98:	061b      	lsls	r3, r3, #24
 8002d9a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d9e:	4935      	ldr	r1, [pc, #212]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002da4:	4b33      	ldr	r3, [pc, #204]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	4a32      	ldr	r2, [pc, #200]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002daa:	f023 0301 	bic.w	r3, r3, #1
 8002dae:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002db0:	4b30      	ldr	r3, [pc, #192]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db4:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <HAL_RCC_OscConfig+0x7bc>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002dbc:	00d2      	lsls	r2, r2, #3
 8002dbe:	492d      	ldr	r1, [pc, #180]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002dc4:	4b2b      	ldr	r3, [pc, #172]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	f023 020c 	bic.w	r2, r3, #12
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	4928      	ldr	r1, [pc, #160]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002dd6:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	f023 0202 	bic.w	r2, r3, #2
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	4924      	ldr	r1, [pc, #144]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002de8:	4b22      	ldr	r3, [pc, #136]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	4a21      	ldr	r2, [pc, #132]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002df4:	4b1f      	ldr	r3, [pc, #124]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	4a1e      	ldr	r2, [pc, #120]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e00:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	4a1b      	ldr	r2, [pc, #108]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002e06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	4a18      	ldr	r2, [pc, #96]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e18:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a15      	ldr	r2, [pc, #84]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7ff f950 	bl	80020c8 <HAL_GetTick>
 8002e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7ff f94c 	bl	80020c8 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e068      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x768>
 8002e4a:	e060      	b.n	8002f0e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a08      	ldr	r2, [pc, #32]	; (8002e74 <HAL_RCC_OscConfig+0x7b0>)
 8002e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7ff f936 	bl	80020c8 <HAL_GetTick>
 8002e5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e5e:	e011      	b.n	8002e84 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e60:	f7ff f932 	bl	80020c8 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d90a      	bls.n	8002e84 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e04e      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
 8002e72:	bf00      	nop
 8002e74:	58024400 	.word	0x58024400
 8002e78:	58024800 	.word	0x58024800
 8002e7c:	fffffc0c 	.word	0xfffffc0c
 8002e80:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e84:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <HAL_RCC_OscConfig+0x854>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e7      	bne.n	8002e60 <HAL_RCC_OscConfig+0x79c>
 8002e90:	e03d      	b.n	8002f0e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e92:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <HAL_RCC_OscConfig+0x854>)
 8002e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e96:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e98:	4b1f      	ldr	r3, [pc, #124]	; (8002f18 <HAL_RCC_OscConfig+0x854>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d031      	beq.n	8002f0a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f003 0203 	and.w	r2, r3, #3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d12a      	bne.n	8002f0a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	091b      	lsrs	r3, r3, #4
 8002eb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d122      	bne.n	8002f0a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d11a      	bne.n	8002f0a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	0a5b      	lsrs	r3, r3, #9
 8002ed8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d111      	bne.n	8002f0a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	0c1b      	lsrs	r3, r3, #16
 8002eea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d108      	bne.n	8002f0a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	0e1b      	lsrs	r3, r3, #24
 8002efc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f04:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d001      	beq.n	8002f0e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3730      	adds	r7, #48	; 0x30
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	58024400 	.word	0x58024400

08002f1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e19c      	b.n	800326a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f30:	4b8a      	ldr	r3, [pc, #552]	; (800315c <HAL_RCC_ClockConfig+0x240>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d910      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3e:	4b87      	ldr	r3, [pc, #540]	; (800315c <HAL_RCC_ClockConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 020f 	bic.w	r2, r3, #15
 8002f46:	4985      	ldr	r1, [pc, #532]	; (800315c <HAL_RCC_ClockConfig+0x240>)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b83      	ldr	r3, [pc, #524]	; (800315c <HAL_RCC_ClockConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e184      	b.n	800326a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d010      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	4b7b      	ldr	r3, [pc, #492]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d908      	bls.n	8002f8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f7c:	4b78      	ldr	r3, [pc, #480]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	4975      	ldr	r1, [pc, #468]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d010      	beq.n	8002fbc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	4b70      	ldr	r3, [pc, #448]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d908      	bls.n	8002fbc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002faa:	4b6d      	ldr	r3, [pc, #436]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	496a      	ldr	r1, [pc, #424]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d010      	beq.n	8002fea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699a      	ldr	r2, [r3, #24]
 8002fcc:	4b64      	ldr	r3, [pc, #400]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d908      	bls.n	8002fea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fd8:	4b61      	ldr	r3, [pc, #388]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	495e      	ldr	r1, [pc, #376]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d010      	beq.n	8003018 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69da      	ldr	r2, [r3, #28]
 8002ffa:	4b59      	ldr	r3, [pc, #356]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003002:	429a      	cmp	r2, r3
 8003004:	d908      	bls.n	8003018 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003006:	4b56      	ldr	r3, [pc, #344]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	4953      	ldr	r1, [pc, #332]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8003014:	4313      	orrs	r3, r2
 8003016:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d010      	beq.n	8003046 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	4b4d      	ldr	r3, [pc, #308]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	429a      	cmp	r2, r3
 8003032:	d908      	bls.n	8003046 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003034:	4b4a      	ldr	r3, [pc, #296]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f023 020f 	bic.w	r2, r3, #15
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4947      	ldr	r1, [pc, #284]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8003042:	4313      	orrs	r3, r2
 8003044:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d055      	beq.n	80030fe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003052:	4b43      	ldr	r3, [pc, #268]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	4940      	ldr	r1, [pc, #256]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8003060:	4313      	orrs	r3, r2
 8003062:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d107      	bne.n	800307c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800306c:	4b3c      	ldr	r3, [pc, #240]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d121      	bne.n	80030bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0f6      	b.n	800326a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d107      	bne.n	8003094 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003084:	4b36      	ldr	r3, [pc, #216]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d115      	bne.n	80030bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0ea      	b.n	800326a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d107      	bne.n	80030ac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800309c:	4b30      	ldr	r3, [pc, #192]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0de      	b.n	800326a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030ac:	4b2c      	ldr	r3, [pc, #176]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0d6      	b.n	800326a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030bc:	4b28      	ldr	r3, [pc, #160]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	f023 0207 	bic.w	r2, r3, #7
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4925      	ldr	r1, [pc, #148]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ce:	f7fe fffb 	bl	80020c8 <HAL_GetTick>
 80030d2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d4:	e00a      	b.n	80030ec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d6:	f7fe fff7 	bl	80020c8 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e0be      	b.n	800326a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ec:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d1eb      	bne.n	80030d6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d010      	beq.n	800312c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	4b14      	ldr	r3, [pc, #80]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	429a      	cmp	r2, r3
 8003118:	d208      	bcs.n	800312c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311a:	4b11      	ldr	r3, [pc, #68]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f023 020f 	bic.w	r2, r3, #15
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	490e      	ldr	r1, [pc, #56]	; (8003160 <HAL_RCC_ClockConfig+0x244>)
 8003128:	4313      	orrs	r3, r2
 800312a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_RCC_ClockConfig+0x240>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d214      	bcs.n	8003164 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b08      	ldr	r3, [pc, #32]	; (800315c <HAL_RCC_ClockConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 020f 	bic.w	r2, r3, #15
 8003142:	4906      	ldr	r1, [pc, #24]	; (800315c <HAL_RCC_ClockConfig+0x240>)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	4313      	orrs	r3, r2
 8003148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	4b04      	ldr	r3, [pc, #16]	; (800315c <HAL_RCC_ClockConfig+0x240>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e086      	b.n	800326a <HAL_RCC_ClockConfig+0x34e>
 800315c:	52002000 	.word	0x52002000
 8003160:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d010      	beq.n	8003192 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	4b3f      	ldr	r3, [pc, #252]	; (8003274 <HAL_RCC_ClockConfig+0x358>)
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800317c:	429a      	cmp	r2, r3
 800317e:	d208      	bcs.n	8003192 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003180:	4b3c      	ldr	r3, [pc, #240]	; (8003274 <HAL_RCC_ClockConfig+0x358>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	4939      	ldr	r1, [pc, #228]	; (8003274 <HAL_RCC_ClockConfig+0x358>)
 800318e:	4313      	orrs	r3, r2
 8003190:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d010      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695a      	ldr	r2, [r3, #20]
 80031a2:	4b34      	ldr	r3, [pc, #208]	; (8003274 <HAL_RCC_ClockConfig+0x358>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d208      	bcs.n	80031c0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031ae:	4b31      	ldr	r3, [pc, #196]	; (8003274 <HAL_RCC_ClockConfig+0x358>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	492e      	ldr	r1, [pc, #184]	; (8003274 <HAL_RCC_ClockConfig+0x358>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d010      	beq.n	80031ee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699a      	ldr	r2, [r3, #24]
 80031d0:	4b28      	ldr	r3, [pc, #160]	; (8003274 <HAL_RCC_ClockConfig+0x358>)
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031d8:	429a      	cmp	r2, r3
 80031da:	d208      	bcs.n	80031ee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031dc:	4b25      	ldr	r3, [pc, #148]	; (8003274 <HAL_RCC_ClockConfig+0x358>)
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	4922      	ldr	r1, [pc, #136]	; (8003274 <HAL_RCC_ClockConfig+0x358>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d010      	beq.n	800321c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <HAL_RCC_ClockConfig+0x358>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003206:	429a      	cmp	r2, r3
 8003208:	d208      	bcs.n	800321c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800320a:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <HAL_RCC_ClockConfig+0x358>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	4917      	ldr	r1, [pc, #92]	; (8003274 <HAL_RCC_ClockConfig+0x358>)
 8003218:	4313      	orrs	r3, r2
 800321a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800321c:	f000 f834 	bl	8003288 <HAL_RCC_GetSysClockFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	4b14      	ldr	r3, [pc, #80]	; (8003274 <HAL_RCC_ClockConfig+0x358>)
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	4912      	ldr	r1, [pc, #72]	; (8003278 <HAL_RCC_ClockConfig+0x35c>)
 800322e:	5ccb      	ldrb	r3, [r1, r3]
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
 8003238:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <HAL_RCC_ClockConfig+0x358>)
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	4a0d      	ldr	r2, [pc, #52]	; (8003278 <HAL_RCC_ClockConfig+0x35c>)
 8003244:	5cd3      	ldrb	r3, [r2, r3]
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	fa22 f303 	lsr.w	r3, r2, r3
 8003250:	4a0a      	ldr	r2, [pc, #40]	; (800327c <HAL_RCC_ClockConfig+0x360>)
 8003252:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003254:	4a0a      	ldr	r2, [pc, #40]	; (8003280 <HAL_RCC_ClockConfig+0x364>)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800325a:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <HAL_RCC_ClockConfig+0x368>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe fee8 	bl	8002034 <HAL_InitTick>
 8003264:	4603      	mov	r3, r0
 8003266:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003268:	7bfb      	ldrb	r3, [r7, #15]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	58024400 	.word	0x58024400
 8003278:	08007330 	.word	0x08007330
 800327c:	2400006c 	.word	0x2400006c
 8003280:	24000068 	.word	0x24000068
 8003284:	24000070 	.word	0x24000070

08003288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003288:	b480      	push	{r7}
 800328a:	b089      	sub	sp, #36	; 0x24
 800328c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800328e:	4bb3      	ldr	r3, [pc, #716]	; (800355c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003296:	2b18      	cmp	r3, #24
 8003298:	f200 8155 	bhi.w	8003546 <HAL_RCC_GetSysClockFreq+0x2be>
 800329c:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800329e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a2:	bf00      	nop
 80032a4:	08003309 	.word	0x08003309
 80032a8:	08003547 	.word	0x08003547
 80032ac:	08003547 	.word	0x08003547
 80032b0:	08003547 	.word	0x08003547
 80032b4:	08003547 	.word	0x08003547
 80032b8:	08003547 	.word	0x08003547
 80032bc:	08003547 	.word	0x08003547
 80032c0:	08003547 	.word	0x08003547
 80032c4:	0800332f 	.word	0x0800332f
 80032c8:	08003547 	.word	0x08003547
 80032cc:	08003547 	.word	0x08003547
 80032d0:	08003547 	.word	0x08003547
 80032d4:	08003547 	.word	0x08003547
 80032d8:	08003547 	.word	0x08003547
 80032dc:	08003547 	.word	0x08003547
 80032e0:	08003547 	.word	0x08003547
 80032e4:	08003335 	.word	0x08003335
 80032e8:	08003547 	.word	0x08003547
 80032ec:	08003547 	.word	0x08003547
 80032f0:	08003547 	.word	0x08003547
 80032f4:	08003547 	.word	0x08003547
 80032f8:	08003547 	.word	0x08003547
 80032fc:	08003547 	.word	0x08003547
 8003300:	08003547 	.word	0x08003547
 8003304:	0800333b 	.word	0x0800333b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003308:	4b94      	ldr	r3, [pc, #592]	; (800355c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d009      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003314:	4b91      	ldr	r3, [pc, #580]	; (800355c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	08db      	lsrs	r3, r3, #3
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	4a90      	ldr	r2, [pc, #576]	; (8003560 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
 8003324:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003326:	e111      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003328:	4b8d      	ldr	r3, [pc, #564]	; (8003560 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800332a:	61bb      	str	r3, [r7, #24]
    break;
 800332c:	e10e      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800332e:	4b8d      	ldr	r3, [pc, #564]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003330:	61bb      	str	r3, [r7, #24]
    break;
 8003332:	e10b      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003334:	4b8c      	ldr	r3, [pc, #560]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003336:	61bb      	str	r3, [r7, #24]
    break;
 8003338:	e108      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800333a:	4b88      	ldr	r3, [pc, #544]	; (800355c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003344:	4b85      	ldr	r3, [pc, #532]	; (800355c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	091b      	lsrs	r3, r3, #4
 800334a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800334e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003350:	4b82      	ldr	r3, [pc, #520]	; (800355c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800335a:	4b80      	ldr	r3, [pc, #512]	; (800355c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800335c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335e:	08db      	lsrs	r3, r3, #3
 8003360:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	ee07 3a90 	vmov	s15, r3
 800336e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003372:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80e1 	beq.w	8003540 <HAL_RCC_GetSysClockFreq+0x2b8>
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b02      	cmp	r3, #2
 8003382:	f000 8083 	beq.w	800348c <HAL_RCC_GetSysClockFreq+0x204>
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b02      	cmp	r3, #2
 800338a:	f200 80a1 	bhi.w	80034d0 <HAL_RCC_GetSysClockFreq+0x248>
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0x114>
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d056      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x1c0>
 800339a:	e099      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800339c:	4b6f      	ldr	r3, [pc, #444]	; (800355c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d02d      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033a8:	4b6c      	ldr	r3, [pc, #432]	; (800355c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	08db      	lsrs	r3, r3, #3
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	4a6b      	ldr	r2, [pc, #428]	; (8003560 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
 80033b8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	ee07 3a90 	vmov	s15, r3
 80033c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	ee07 3a90 	vmov	s15, r3
 80033ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033d2:	4b62      	ldr	r3, [pc, #392]	; (800355c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800356c <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003402:	e087      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	ee07 3a90 	vmov	s15, r3
 800340a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003570 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003416:	4b51      	ldr	r3, [pc, #324]	; (800355c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003426:	ed97 6a02 	vldr	s12, [r7, #8]
 800342a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800356c <HAL_RCC_GetSysClockFreq+0x2e4>
 800342e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800343a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800343e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003446:	e065      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	ee07 3a90 	vmov	s15, r3
 800344e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003452:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003574 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800345a:	4b40      	ldr	r3, [pc, #256]	; (800355c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003462:	ee07 3a90 	vmov	s15, r3
 8003466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800346a:	ed97 6a02 	vldr	s12, [r7, #8]
 800346e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800356c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800347a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800347e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800348a:	e043      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	ee07 3a90 	vmov	s15, r3
 8003492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003496:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003578 <HAL_RCC_GetSysClockFreq+0x2f0>
 800349a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800349e:	4b2f      	ldr	r3, [pc, #188]	; (800355c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034a6:	ee07 3a90 	vmov	s15, r3
 80034aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80034b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800356c <HAL_RCC_GetSysClockFreq+0x2e4>
 80034b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034ce:	e021      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	ee07 3a90 	vmov	s15, r3
 80034d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003574 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034e2:	4b1e      	ldr	r3, [pc, #120]	; (800355c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ea:	ee07 3a90 	vmov	s15, r3
 80034ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800356c <HAL_RCC_GetSysClockFreq+0x2e4>
 80034fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800350a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800350e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003512:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003514:	4b11      	ldr	r3, [pc, #68]	; (800355c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	0a5b      	lsrs	r3, r3, #9
 800351a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800351e:	3301      	adds	r3, #1
 8003520:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	ee07 3a90 	vmov	s15, r3
 8003528:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800352c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003538:	ee17 3a90 	vmov	r3, s15
 800353c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800353e:	e005      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	61bb      	str	r3, [r7, #24]
    break;
 8003544:	e002      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003546:	4b07      	ldr	r3, [pc, #28]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003548:	61bb      	str	r3, [r7, #24]
    break;
 800354a:	bf00      	nop
  }

  return sysclockfreq;
 800354c:	69bb      	ldr	r3, [r7, #24]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3724      	adds	r7, #36	; 0x24
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	58024400 	.word	0x58024400
 8003560:	03d09000 	.word	0x03d09000
 8003564:	003d0900 	.word	0x003d0900
 8003568:	017d7840 	.word	0x017d7840
 800356c:	46000000 	.word	0x46000000
 8003570:	4c742400 	.word	0x4c742400
 8003574:	4a742400 	.word	0x4a742400
 8003578:	4bbebc20 	.word	0x4bbebc20

0800357c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003582:	f7ff fe81 	bl	8003288 <HAL_RCC_GetSysClockFreq>
 8003586:	4602      	mov	r2, r0
 8003588:	4b10      	ldr	r3, [pc, #64]	; (80035cc <HAL_RCC_GetHCLKFreq+0x50>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	0a1b      	lsrs	r3, r3, #8
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	490f      	ldr	r1, [pc, #60]	; (80035d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003594:	5ccb      	ldrb	r3, [r1, r3]
 8003596:	f003 031f 	and.w	r3, r3, #31
 800359a:	fa22 f303 	lsr.w	r3, r2, r3
 800359e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035a0:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <HAL_RCC_GetHCLKFreq+0x50>)
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	4a09      	ldr	r2, [pc, #36]	; (80035d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80035aa:	5cd3      	ldrb	r3, [r2, r3]
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	fa22 f303 	lsr.w	r3, r2, r3
 80035b6:	4a07      	ldr	r2, [pc, #28]	; (80035d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80035b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035ba:	4a07      	ldr	r2, [pc, #28]	; (80035d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035c0:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80035c2:	681b      	ldr	r3, [r3, #0]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	58024400 	.word	0x58024400
 80035d0:	08007330 	.word	0x08007330
 80035d4:	2400006c 	.word	0x2400006c
 80035d8:	24000068 	.word	0x24000068

080035dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80035e0:	f7ff ffcc 	bl	800357c <HAL_RCC_GetHCLKFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	4904      	ldr	r1, [pc, #16]	; (8003604 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035f2:	5ccb      	ldrb	r3, [r1, r3]
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	58024400 	.word	0x58024400
 8003604:	08007330 	.word	0x08007330

08003608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800360c:	f7ff ffb6 	bl	800357c <HAL_RCC_GetHCLKFreq>
 8003610:	4602      	mov	r2, r0
 8003612:	4b06      	ldr	r3, [pc, #24]	; (800362c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	0a1b      	lsrs	r3, r3, #8
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	4904      	ldr	r1, [pc, #16]	; (8003630 <HAL_RCC_GetPCLK2Freq+0x28>)
 800361e:	5ccb      	ldrb	r3, [r1, r3]
 8003620:	f003 031f 	and.w	r3, r3, #31
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003628:	4618      	mov	r0, r3
 800362a:	bd80      	pop	{r7, pc}
 800362c:	58024400 	.word	0x58024400
 8003630:	08007330 	.word	0x08007330

08003634 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800363c:	2300      	movs	r3, #0
 800363e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003640:	2300      	movs	r3, #0
 8003642:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d03f      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003654:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003658:	d02a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800365a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800365e:	d824      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003660:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003664:	d018      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800366a:	d81e      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003674:	d007      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003676:	e018      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003678:	4bab      	ldr	r3, [pc, #684]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	4aaa      	ldr	r2, [pc, #680]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800367e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003682:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003684:	e015      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3304      	adds	r3, #4
 800368a:	2102      	movs	r1, #2
 800368c:	4618      	mov	r0, r3
 800368e:	f001 f9cf 	bl	8004a30 <RCCEx_PLL2_Config>
 8003692:	4603      	mov	r3, r0
 8003694:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003696:	e00c      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3324      	adds	r3, #36	; 0x24
 800369c:	2102      	movs	r1, #2
 800369e:	4618      	mov	r0, r3
 80036a0:	f001 fa78 	bl	8004b94 <RCCEx_PLL3_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036a8:	e003      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	75fb      	strb	r3, [r7, #23]
      break;
 80036ae:	e000      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80036b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b2:	7dfb      	ldrb	r3, [r7, #23]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d109      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036b8:	4b9b      	ldr	r3, [pc, #620]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036c4:	4998      	ldr	r1, [pc, #608]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	650b      	str	r3, [r1, #80]	; 0x50
 80036ca:	e001      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
 80036ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d03d      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d826      	bhi.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036e4:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80036e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ea:	bf00      	nop
 80036ec:	08003701 	.word	0x08003701
 80036f0:	0800370f 	.word	0x0800370f
 80036f4:	08003721 	.word	0x08003721
 80036f8:	08003739 	.word	0x08003739
 80036fc:	08003739 	.word	0x08003739
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003700:	4b89      	ldr	r3, [pc, #548]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	4a88      	ldr	r2, [pc, #544]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800370c:	e015      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3304      	adds	r3, #4
 8003712:	2100      	movs	r1, #0
 8003714:	4618      	mov	r0, r3
 8003716:	f001 f98b 	bl	8004a30 <RCCEx_PLL2_Config>
 800371a:	4603      	mov	r3, r0
 800371c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800371e:	e00c      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3324      	adds	r3, #36	; 0x24
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f001 fa34 	bl	8004b94 <RCCEx_PLL3_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003730:	e003      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	75fb      	strb	r3, [r7, #23]
      break;
 8003736:	e000      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800373a:	7dfb      	ldrb	r3, [r7, #23]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d109      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003740:	4b79      	ldr	r3, [pc, #484]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003744:	f023 0207 	bic.w	r2, r3, #7
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374c:	4976      	ldr	r1, [pc, #472]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	650b      	str	r3, [r1, #80]	; 0x50
 8003752:	e001      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003754:	7dfb      	ldrb	r3, [r7, #23]
 8003756:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003760:	2b00      	cmp	r3, #0
 8003762:	d042      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376c:	d02b      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800376e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003772:	d825      	bhi.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003774:	2bc0      	cmp	r3, #192	; 0xc0
 8003776:	d028      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003778:	2bc0      	cmp	r3, #192	; 0xc0
 800377a:	d821      	bhi.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800377c:	2b80      	cmp	r3, #128	; 0x80
 800377e:	d016      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003780:	2b80      	cmp	r3, #128	; 0x80
 8003782:	d81d      	bhi.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003788:	2b40      	cmp	r3, #64	; 0x40
 800378a:	d007      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800378c:	e018      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800378e:	4b66      	ldr	r3, [pc, #408]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	4a65      	ldr	r2, [pc, #404]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003798:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800379a:	e017      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3304      	adds	r3, #4
 80037a0:	2100      	movs	r1, #0
 80037a2:	4618      	mov	r0, r3
 80037a4:	f001 f944 	bl	8004a30 <RCCEx_PLL2_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037ac:	e00e      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3324      	adds	r3, #36	; 0x24
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f001 f9ed 	bl	8004b94 <RCCEx_PLL3_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037be:	e005      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	75fb      	strb	r3, [r7, #23]
      break;
 80037c4:	e002      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80037ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80037d2:	4b55      	ldr	r3, [pc, #340]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037de:	4952      	ldr	r1, [pc, #328]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	650b      	str	r3, [r1, #80]	; 0x50
 80037e4:	e001      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e6:	7dfb      	ldrb	r3, [r7, #23]
 80037e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d049      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003800:	d030      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003802:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003806:	d82a      	bhi.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003808:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800380c:	d02c      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800380e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003812:	d824      	bhi.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003818:	d018      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800381a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800381e:	d81e      	bhi.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003828:	d007      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800382a:	e018      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800382c:	4b3e      	ldr	r3, [pc, #248]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	4a3d      	ldr	r2, [pc, #244]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003836:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003838:	e017      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3304      	adds	r3, #4
 800383e:	2100      	movs	r1, #0
 8003840:	4618      	mov	r0, r3
 8003842:	f001 f8f5 	bl	8004a30 <RCCEx_PLL2_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800384a:	e00e      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3324      	adds	r3, #36	; 0x24
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f001 f99e 	bl	8004b94 <RCCEx_PLL3_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800385c:	e005      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	75fb      	strb	r3, [r7, #23]
      break;
 8003862:	e002      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003864:	bf00      	nop
 8003866:	e000      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800386a:	7dfb      	ldrb	r3, [r7, #23]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10a      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003870:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800387e:	492a      	ldr	r1, [pc, #168]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003880:	4313      	orrs	r3, r2
 8003882:	658b      	str	r3, [r1, #88]	; 0x58
 8003884:	e001      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003886:	7dfb      	ldrb	r3, [r7, #23]
 8003888:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003892:	2b00      	cmp	r3, #0
 8003894:	d04c      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800389c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038a0:	d030      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80038a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038a6:	d82a      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80038a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038ac:	d02c      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80038ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038b2:	d824      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80038b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038b8:	d018      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80038ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038be:	d81e      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80038c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c8:	d007      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80038ca:	e018      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038cc:	4b16      	ldr	r3, [pc, #88]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	4a15      	ldr	r2, [pc, #84]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038d8:	e017      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3304      	adds	r3, #4
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f001 f8a5 	bl	8004a30 <RCCEx_PLL2_Config>
 80038e6:	4603      	mov	r3, r0
 80038e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80038ea:	e00e      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3324      	adds	r3, #36	; 0x24
 80038f0:	2100      	movs	r1, #0
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 f94e 	bl	8004b94 <RCCEx_PLL3_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038fc:	e005      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	75fb      	strb	r3, [r7, #23]
      break;
 8003902:	e002      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003904:	bf00      	nop
 8003906:	e000      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800390a:	7dfb      	ldrb	r3, [r7, #23]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10d      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800391e:	4902      	ldr	r1, [pc, #8]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003920:	4313      	orrs	r3, r2
 8003922:	658b      	str	r3, [r1, #88]	; 0x58
 8003924:	e004      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003926:	bf00      	nop
 8003928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d032      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003940:	2b30      	cmp	r3, #48	; 0x30
 8003942:	d01c      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003944:	2b30      	cmp	r3, #48	; 0x30
 8003946:	d817      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003948:	2b20      	cmp	r3, #32
 800394a:	d00c      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800394c:	2b20      	cmp	r3, #32
 800394e:	d813      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003950:	2b00      	cmp	r3, #0
 8003952:	d016      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003954:	2b10      	cmp	r3, #16
 8003956:	d10f      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003958:	4baf      	ldr	r3, [pc, #700]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	4aae      	ldr	r2, [pc, #696]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800395e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003962:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003964:	e00e      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3304      	adds	r3, #4
 800396a:	2102      	movs	r1, #2
 800396c:	4618      	mov	r0, r3
 800396e:	f001 f85f 	bl	8004a30 <RCCEx_PLL2_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003976:	e005      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	75fb      	strb	r3, [r7, #23]
      break;
 800397c:	e002      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800397e:	bf00      	nop
 8003980:	e000      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003982:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003984:	7dfb      	ldrb	r3, [r7, #23]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800398a:	4ba3      	ldr	r3, [pc, #652]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800398c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003996:	49a0      	ldr	r1, [pc, #640]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003998:	4313      	orrs	r3, r2
 800399a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800399c:	e001      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399e:	7dfb      	ldrb	r3, [r7, #23]
 80039a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d047      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039b6:	d030      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80039b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039bc:	d82a      	bhi.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80039be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039c2:	d02c      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80039c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039c8:	d824      	bhi.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80039ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ce:	d018      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80039d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d4:	d81e      	bhi.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039de:	d007      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80039e0:	e018      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e2:	4b8d      	ldr	r3, [pc, #564]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	4a8c      	ldr	r2, [pc, #560]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039ee:	e017      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f001 f81a 	bl	8004a30 <RCCEx_PLL2_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a00:	e00e      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3324      	adds	r3, #36	; 0x24
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f001 f8c3 	bl	8004b94 <RCCEx_PLL3_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a12:	e005      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	75fb      	strb	r3, [r7, #23]
      break;
 8003a18:	e002      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003a1a:	bf00      	nop
 8003a1c:	e000      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003a1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a20:	7dfb      	ldrb	r3, [r7, #23]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a26:	4b7c      	ldr	r3, [pc, #496]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a32:	4979      	ldr	r1, [pc, #484]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	650b      	str	r3, [r1, #80]	; 0x50
 8003a38:	e001      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d049      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a52:	d02e      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003a54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a58:	d828      	bhi.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003a5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a5e:	d02a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003a60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a64:	d822      	bhi.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003a66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a6a:	d026      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003a6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a70:	d81c      	bhi.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003a72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a76:	d010      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003a78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a7c:	d816      	bhi.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01d      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a86:	d111      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 ffce 	bl	8004a30 <RCCEx_PLL2_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a98:	e012      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3324      	adds	r3, #36	; 0x24
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f001 f877 	bl	8004b94 <RCCEx_PLL3_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003aaa:	e009      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab0:	e006      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003ab2:	bf00      	nop
 8003ab4:	e004      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003ab6:	bf00      	nop
 8003ab8:	e002      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003aba:	bf00      	nop
 8003abc:	e000      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003abe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ac6:	4b54      	ldr	r3, [pc, #336]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aca:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad2:	4951      	ldr	r1, [pc, #324]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	650b      	str	r3, [r1, #80]	; 0x50
 8003ad8:	e001      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ada:	7dfb      	ldrb	r3, [r7, #23]
 8003adc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d04b      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003af4:	d02e      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003afa:	d828      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b00:	d02a      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b06:	d822      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b0c:	d026      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003b0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b12:	d81c      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b18:	d010      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b1e:	d816      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01d      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003b24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b28:	d111      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	2101      	movs	r1, #1
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 ff7d 	bl	8004a30 <RCCEx_PLL2_Config>
 8003b36:	4603      	mov	r3, r0
 8003b38:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b3a:	e012      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3324      	adds	r3, #36	; 0x24
 8003b40:	2101      	movs	r1, #1
 8003b42:	4618      	mov	r0, r3
 8003b44:	f001 f826 	bl	8004b94 <RCCEx_PLL3_Config>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b4c:	e009      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	75fb      	strb	r3, [r7, #23]
      break;
 8003b52:	e006      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003b54:	bf00      	nop
 8003b56:	e004      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003b58:	bf00      	nop
 8003b5a:	e002      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003b5c:	bf00      	nop
 8003b5e:	e000      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b62:	7dfb      	ldrb	r3, [r7, #23]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10a      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b68:	4b2b      	ldr	r3, [pc, #172]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b76:	4928      	ldr	r1, [pc, #160]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	658b      	str	r3, [r1, #88]	; 0x58
 8003b7c:	e001      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
 8003b80:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d02f      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b96:	d00e      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b9c:	d814      	bhi.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d015      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003ba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ba6:	d10f      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba8:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	4a1a      	ldr	r2, [pc, #104]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003bb4:	e00c      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	2101      	movs	r1, #1
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 ff37 	bl	8004a30 <RCCEx_PLL2_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003bc6:	e003      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	75fb      	strb	r3, [r7, #23]
      break;
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bd6:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be2:	490d      	ldr	r1, [pc, #52]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	650b      	str	r3, [r1, #80]	; 0x50
 8003be8:	e001      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d033      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d81c      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003c02:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c43 	.word	0x08003c43
 8003c0c:	08003c1d 	.word	0x08003c1d
 8003c10:	08003c2b 	.word	0x08003c2b
 8003c14:	08003c43 	.word	0x08003c43
 8003c18:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c1c:	4bb8      	ldr	r3, [pc, #736]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	4ab7      	ldr	r2, [pc, #732]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c28:	e00c      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	2102      	movs	r1, #2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fefd 	bl	8004a30 <RCCEx_PLL2_Config>
 8003c36:	4603      	mov	r3, r0
 8003c38:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c3a:	e003      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c40:	e000      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c4a:	4bad      	ldr	r3, [pc, #692]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4e:	f023 0203 	bic.w	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	49aa      	ldr	r1, [pc, #680]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c5c:	e001      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
 8003c60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8086 	beq.w	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c70:	4ba4      	ldr	r3, [pc, #656]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4aa3      	ldr	r2, [pc, #652]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c7c:	f7fe fa24 	bl	80020c8 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c82:	e009      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c84:	f7fe fa20 	bl	80020c8 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	; 0x64
 8003c90:	d902      	bls.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	75fb      	strb	r3, [r7, #23]
        break;
 8003c96:	e005      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c98:	4b9a      	ldr	r3, [pc, #616]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0ef      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d166      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003caa:	4b95      	ldr	r3, [pc, #596]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cb4:	4053      	eors	r3, r2
 8003cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d013      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cbe:	4b90      	ldr	r3, [pc, #576]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cc8:	4b8d      	ldr	r3, [pc, #564]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ccc:	4a8c      	ldr	r2, [pc, #560]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cd4:	4b8a      	ldr	r3, [pc, #552]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd8:	4a89      	ldr	r2, [pc, #548]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cde:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ce0:	4a87      	ldr	r2, [pc, #540]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf0:	d115      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf2:	f7fe f9e9 	bl	80020c8 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cf8:	e00b      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfa:	f7fe f9e5 	bl	80020c8 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d902      	bls.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	75fb      	strb	r3, [r7, #23]
            break;
 8003d10:	e005      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d12:	4b7b      	ldr	r3, [pc, #492]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0ed      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d126      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d32:	d10d      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003d34:	4b72      	ldr	r3, [pc, #456]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d42:	0919      	lsrs	r1, r3, #4
 8003d44:	4b70      	ldr	r3, [pc, #448]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003d46:	400b      	ands	r3, r1
 8003d48:	496d      	ldr	r1, [pc, #436]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	610b      	str	r3, [r1, #16]
 8003d4e:	e005      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003d50:	4b6b      	ldr	r3, [pc, #428]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	4a6a      	ldr	r2, [pc, #424]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d5a:	6113      	str	r3, [r2, #16]
 8003d5c:	4b68      	ldr	r3, [pc, #416]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6a:	4965      	ldr	r1, [pc, #404]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	670b      	str	r3, [r1, #112]	; 0x70
 8003d70:	e004      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d72:	7dfb      	ldrb	r3, [r7, #23]
 8003d74:	75bb      	strb	r3, [r7, #22]
 8003d76:	e001      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d07e      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d8c:	2b28      	cmp	r3, #40	; 0x28
 8003d8e:	d867      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003d90:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003e67 	.word	0x08003e67
 8003d9c:	08003e61 	.word	0x08003e61
 8003da0:	08003e61 	.word	0x08003e61
 8003da4:	08003e61 	.word	0x08003e61
 8003da8:	08003e61 	.word	0x08003e61
 8003dac:	08003e61 	.word	0x08003e61
 8003db0:	08003e61 	.word	0x08003e61
 8003db4:	08003e61 	.word	0x08003e61
 8003db8:	08003e3d 	.word	0x08003e3d
 8003dbc:	08003e61 	.word	0x08003e61
 8003dc0:	08003e61 	.word	0x08003e61
 8003dc4:	08003e61 	.word	0x08003e61
 8003dc8:	08003e61 	.word	0x08003e61
 8003dcc:	08003e61 	.word	0x08003e61
 8003dd0:	08003e61 	.word	0x08003e61
 8003dd4:	08003e61 	.word	0x08003e61
 8003dd8:	08003e4f 	.word	0x08003e4f
 8003ddc:	08003e61 	.word	0x08003e61
 8003de0:	08003e61 	.word	0x08003e61
 8003de4:	08003e61 	.word	0x08003e61
 8003de8:	08003e61 	.word	0x08003e61
 8003dec:	08003e61 	.word	0x08003e61
 8003df0:	08003e61 	.word	0x08003e61
 8003df4:	08003e61 	.word	0x08003e61
 8003df8:	08003e67 	.word	0x08003e67
 8003dfc:	08003e61 	.word	0x08003e61
 8003e00:	08003e61 	.word	0x08003e61
 8003e04:	08003e61 	.word	0x08003e61
 8003e08:	08003e61 	.word	0x08003e61
 8003e0c:	08003e61 	.word	0x08003e61
 8003e10:	08003e61 	.word	0x08003e61
 8003e14:	08003e61 	.word	0x08003e61
 8003e18:	08003e67 	.word	0x08003e67
 8003e1c:	08003e61 	.word	0x08003e61
 8003e20:	08003e61 	.word	0x08003e61
 8003e24:	08003e61 	.word	0x08003e61
 8003e28:	08003e61 	.word	0x08003e61
 8003e2c:	08003e61 	.word	0x08003e61
 8003e30:	08003e61 	.word	0x08003e61
 8003e34:	08003e61 	.word	0x08003e61
 8003e38:	08003e67 	.word	0x08003e67
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	2101      	movs	r1, #1
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fdf4 	bl	8004a30 <RCCEx_PLL2_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e4c:	e00c      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3324      	adds	r3, #36	; 0x24
 8003e52:	2101      	movs	r1, #1
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fe9d 	bl	8004b94 <RCCEx_PLL3_Config>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e5e:	e003      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	75fb      	strb	r3, [r7, #23]
      break;
 8003e64:	e000      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e6e:	4b24      	ldr	r3, [pc, #144]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e72:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e7a:	4921      	ldr	r1, [pc, #132]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	654b      	str	r3, [r1, #84]	; 0x54
 8003e80:	e001      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e82:	7dfb      	ldrb	r3, [r7, #23]
 8003e84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d03e      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e96:	2b05      	cmp	r3, #5
 8003e98:	d820      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003e9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea0:	08003ee3 	.word	0x08003ee3
 8003ea4:	08003eb9 	.word	0x08003eb9
 8003ea8:	08003ecb 	.word	0x08003ecb
 8003eac:	08003ee3 	.word	0x08003ee3
 8003eb0:	08003ee3 	.word	0x08003ee3
 8003eb4:	08003ee3 	.word	0x08003ee3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fdb6 	bl	8004a30 <RCCEx_PLL2_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003ec8:	e00c      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3324      	adds	r3, #36	; 0x24
 8003ece:	2101      	movs	r1, #1
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fe5f 	bl	8004b94 <RCCEx_PLL3_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003eda:	e003      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee0:	e000      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003ee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee4:	7dfb      	ldrb	r3, [r7, #23]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d110      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003eea:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eee:	f023 0207 	bic.w	r2, r3, #7
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef6:	4902      	ldr	r1, [pc, #8]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	654b      	str	r3, [r1, #84]	; 0x54
 8003efc:	e008      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003efe:	bf00      	nop
 8003f00:	58024400 	.word	0x58024400
 8003f04:	58024800 	.word	0x58024800
 8003f08:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
 8003f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d039      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f22:	2b05      	cmp	r3, #5
 8003f24:	d820      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003f26:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003f6f 	.word	0x08003f6f
 8003f30:	08003f45 	.word	0x08003f45
 8003f34:	08003f57 	.word	0x08003f57
 8003f38:	08003f6f 	.word	0x08003f6f
 8003f3c:	08003f6f 	.word	0x08003f6f
 8003f40:	08003f6f 	.word	0x08003f6f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3304      	adds	r3, #4
 8003f48:	2101      	movs	r1, #1
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fd70 	bl	8004a30 <RCCEx_PLL2_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f54:	e00c      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3324      	adds	r3, #36	; 0x24
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fe19 	bl	8004b94 <RCCEx_PLL3_Config>
 8003f62:	4603      	mov	r3, r0
 8003f64:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f66:	e003      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f6c:	e000      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003f6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10a      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f76:	4bb7      	ldr	r3, [pc, #732]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7a:	f023 0207 	bic.w	r2, r3, #7
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f84:	49b3      	ldr	r1, [pc, #716]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	658b      	str	r3, [r1, #88]	; 0x58
 8003f8a:	e001      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
 8003f8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d04b      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fa6:	d02e      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fac:	d828      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb2:	d02a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb8:	d822      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003fba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fbe:	d026      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003fc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fc4:	d81c      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fca:	d010      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fd0:	d816      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01d      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fda:	d111      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fd24 	bl	8004a30 <RCCEx_PLL2_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003fec:	e012      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3324      	adds	r3, #36	; 0x24
 8003ff2:	2102      	movs	r1, #2
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fdcd 	bl	8004b94 <RCCEx_PLL3_Config>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ffe:	e009      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	75fb      	strb	r3, [r7, #23]
      break;
 8004004:	e006      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004006:	bf00      	nop
 8004008:	e004      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800400a:	bf00      	nop
 800400c:	e002      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004012:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004014:	7dfb      	ldrb	r3, [r7, #23]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10a      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800401a:	4b8e      	ldr	r3, [pc, #568]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800401c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004028:	498a      	ldr	r1, [pc, #552]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800402a:	4313      	orrs	r3, r2
 800402c:	654b      	str	r3, [r1, #84]	; 0x54
 800402e:	e001      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004030:	7dfb      	ldrb	r3, [r7, #23]
 8004032:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b00      	cmp	r3, #0
 800403e:	d04b      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004046:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800404a:	d02e      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800404c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004050:	d828      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004056:	d02a      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405c:	d822      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800405e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004062:	d026      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004064:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004068:	d81c      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800406a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800406e:	d010      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004074:	d816      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004076:	2b00      	cmp	r3, #0
 8004078:	d01d      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800407a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800407e:	d111      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	2100      	movs	r1, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fcd2 	bl	8004a30 <RCCEx_PLL2_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004090:	e012      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3324      	adds	r3, #36	; 0x24
 8004096:	2102      	movs	r1, #2
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fd7b 	bl	8004b94 <RCCEx_PLL3_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80040a2:	e009      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	75fb      	strb	r3, [r7, #23]
      break;
 80040a8:	e006      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80040aa:	bf00      	nop
 80040ac:	e004      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80040ae:	bf00      	nop
 80040b0:	e002      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80040b2:	bf00      	nop
 80040b4:	e000      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80040b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040b8:	7dfb      	ldrb	r3, [r7, #23]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10a      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040be:	4b65      	ldr	r3, [pc, #404]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040cc:	4961      	ldr	r1, [pc, #388]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	658b      	str	r3, [r1, #88]	; 0x58
 80040d2:	e001      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d4:	7dfb      	ldrb	r3, [r7, #23]
 80040d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d04b      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040ee:	d02e      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80040f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040f4:	d828      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80040f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fa:	d02a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80040fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004100:	d822      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004102:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004106:	d026      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004108:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800410c:	d81c      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800410e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004112:	d010      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004114:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004118:	d816      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01d      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800411e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004122:	d111      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3304      	adds	r3, #4
 8004128:	2100      	movs	r1, #0
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fc80 	bl	8004a30 <RCCEx_PLL2_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004134:	e012      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3324      	adds	r3, #36	; 0x24
 800413a:	2102      	movs	r1, #2
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fd29 	bl	8004b94 <RCCEx_PLL3_Config>
 8004142:	4603      	mov	r3, r0
 8004144:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004146:	e009      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	75fb      	strb	r3, [r7, #23]
      break;
 800414c:	e006      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800414e:	bf00      	nop
 8004150:	e004      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004152:	bf00      	nop
 8004154:	e002      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004156:	bf00      	nop
 8004158:	e000      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800415a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800415c:	7dfb      	ldrb	r3, [r7, #23]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10a      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004162:	4b3c      	ldr	r3, [pc, #240]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004170:	4938      	ldr	r1, [pc, #224]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004172:	4313      	orrs	r3, r2
 8004174:	658b      	str	r3, [r1, #88]	; 0x58
 8004176:	e001      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004178:	7dfb      	ldrb	r3, [r7, #23]
 800417a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d01a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800418e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004192:	d10a      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3324      	adds	r3, #36	; 0x24
 8004198:	2102      	movs	r1, #2
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fcfa 	bl	8004b94 <RCCEx_PLL3_Config>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041aa:	4b2a      	ldr	r3, [pc, #168]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041b8:	4926      	ldr	r1, [pc, #152]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d4:	d10a      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3324      	adds	r3, #36	; 0x24
 80041da:	2102      	movs	r1, #2
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fcd9 	bl	8004b94 <RCCEx_PLL3_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041ec:	4b19      	ldr	r3, [pc, #100]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041fa:	4916      	ldr	r1, [pc, #88]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d036      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004212:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004216:	d01f      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800421c:	d817      	bhi.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004226:	d009      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004228:	e011      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3304      	adds	r3, #4
 800422e:	2100      	movs	r1, #0
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fbfd 	bl	8004a30 <RCCEx_PLL2_Config>
 8004236:	4603      	mov	r3, r0
 8004238:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800423a:	e00e      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3324      	adds	r3, #36	; 0x24
 8004240:	2102      	movs	r1, #2
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fca6 	bl	8004b94 <RCCEx_PLL3_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800424c:	e005      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	75fb      	strb	r3, [r7, #23]
      break;
 8004252:	e002      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004254:	58024400 	.word	0x58024400
      break;
 8004258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800425a:	7dfb      	ldrb	r3, [r7, #23]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10a      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004260:	4b93      	ldr	r3, [pc, #588]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004264:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800426e:	4990      	ldr	r1, [pc, #576]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004270:	4313      	orrs	r3, r2
 8004272:	658b      	str	r3, [r1, #88]	; 0x58
 8004274:	e001      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004276:	7dfb      	ldrb	r3, [r7, #23]
 8004278:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d033      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800428c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004290:	d01c      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004292:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004296:	d816      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800429c:	d003      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800429e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042a2:	d007      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80042a4:	e00f      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a6:	4b82      	ldr	r3, [pc, #520]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	4a81      	ldr	r2, [pc, #516]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80042b2:	e00c      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3324      	adds	r3, #36	; 0x24
 80042b8:	2101      	movs	r1, #1
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fc6a 	bl	8004b94 <RCCEx_PLL3_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80042c4:	e003      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	75fb      	strb	r3, [r7, #23]
      break;
 80042ca:	e000      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80042cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042d4:	4b76      	ldr	r3, [pc, #472]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e2:	4973      	ldr	r1, [pc, #460]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	654b      	str	r3, [r1, #84]	; 0x54
 80042e8:	e001      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
 80042ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d029      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004306:	d007      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004308:	e00f      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800430a:	4b69      	ldr	r3, [pc, #420]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	4a68      	ldr	r2, [pc, #416]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004314:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004316:	e00b      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	2102      	movs	r1, #2
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fb86 	bl	8004a30 <RCCEx_PLL2_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004328:	e002      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	75fb      	strb	r3, [r7, #23]
      break;
 800432e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004336:	4b5e      	ldr	r3, [pc, #376]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004342:	495b      	ldr	r1, [pc, #364]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004344:	4313      	orrs	r3, r2
 8004346:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004348:	e001      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434a:	7dfb      	ldrb	r3, [r7, #23]
 800434c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3324      	adds	r3, #36	; 0x24
 800435e:	2102      	movs	r1, #2
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fc17 	bl	8004b94 <RCCEx_PLL3_Config>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d030      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004380:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004384:	d017      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004386:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800438a:	d811      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800438c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004390:	d013      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004396:	d80b      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004398:	2b00      	cmp	r3, #0
 800439a:	d010      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800439c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a0:	d106      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043a2:	4b43      	ldr	r3, [pc, #268]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	4a42      	ldr	r2, [pc, #264]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80043ae:	e007      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	75fb      	strb	r3, [r7, #23]
      break;
 80043b4:	e004      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80043b6:	bf00      	nop
 80043b8:	e002      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80043ba:	bf00      	nop
 80043bc:	e000      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80043be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043c6:	4b3a      	ldr	r3, [pc, #232]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d2:	4937      	ldr	r1, [pc, #220]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	654b      	str	r3, [r1, #84]	; 0x54
 80043d8:	e001      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043da:	7dfb      	ldrb	r3, [r7, #23]
 80043dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043ea:	4b31      	ldr	r3, [pc, #196]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f6:	492e      	ldr	r1, [pc, #184]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d009      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004408:	4b29      	ldr	r3, [pc, #164]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004416:	4926      	ldr	r1, [pc, #152]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004418:	4313      	orrs	r3, r2
 800441a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004428:	4b21      	ldr	r3, [pc, #132]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800442a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800442c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004434:	491e      	ldr	r1, [pc, #120]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004436:	4313      	orrs	r3, r2
 8004438:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00d      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004446:	4b1a      	ldr	r3, [pc, #104]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	4a19      	ldr	r2, [pc, #100]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800444c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004450:	6113      	str	r3, [r2, #16]
 8004452:	4b17      	ldr	r3, [pc, #92]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800445c:	4914      	ldr	r1, [pc, #80]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800445e:	4313      	orrs	r3, r2
 8004460:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	da08      	bge.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800446a:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800446c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004476:	490e      	ldr	r1, [pc, #56]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004478:	4313      	orrs	r3, r2
 800447a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d009      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004488:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800448a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004496:	4906      	ldr	r1, [pc, #24]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004498:	4313      	orrs	r3, r2
 800449a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800449c:	7dbb      	ldrb	r3, [r7, #22]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	e000      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	58024400 	.word	0x58024400

080044b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80044b8:	f7ff f860 	bl	800357c <HAL_RCC_GetHCLKFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	4904      	ldr	r1, [pc, #16]	; (80044dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	58024400 	.word	0x58024400
 80044dc:	08007330 	.word	0x08007330

080044e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b089      	sub	sp, #36	; 0x24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044e8:	4ba1      	ldr	r3, [pc, #644]	; (8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80044f2:	4b9f      	ldr	r3, [pc, #636]	; (8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f6:	0b1b      	lsrs	r3, r3, #12
 80044f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80044fe:	4b9c      	ldr	r3, [pc, #624]	; (8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	091b      	lsrs	r3, r3, #4
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800450a:	4b99      	ldr	r3, [pc, #612]	; (8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450e:	08db      	lsrs	r3, r3, #3
 8004510:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	fb02 f303 	mul.w	r3, r2, r3
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004522:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8111 	beq.w	8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b02      	cmp	r3, #2
 8004532:	f000 8083 	beq.w	800463c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b02      	cmp	r3, #2
 800453a:	f200 80a1 	bhi.w	8004680 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d056      	beq.n	80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800454a:	e099      	b.n	8004680 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800454c:	4b88      	ldr	r3, [pc, #544]	; (8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d02d      	beq.n	80045b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004558:	4b85      	ldr	r3, [pc, #532]	; (8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	08db      	lsrs	r3, r3, #3
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	4a84      	ldr	r2, [pc, #528]	; (8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
 8004568:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	ee07 3a90 	vmov	s15, r3
 8004570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004582:	4b7b      	ldr	r3, [pc, #492]	; (8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004592:	ed97 6a03 	vldr	s12, [r7, #12]
 8004596:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800459a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80045b2:	e087      	b.n	80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	ee07 3a90 	vmov	s15, r3
 80045ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800477c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80045c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c6:	4b6a      	ldr	r3, [pc, #424]	; (8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045f6:	e065      	b.n	80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	ee07 3a90 	vmov	s15, r3
 80045fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004602:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460a:	4b59      	ldr	r3, [pc, #356]	; (8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800461a:	ed97 6a03 	vldr	s12, [r7, #12]
 800461e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800462a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800462e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004636:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800463a:	e043      	b.n	80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004646:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800464a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464e:	4b48      	ldr	r3, [pc, #288]	; (8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004662:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800467e:	e021      	b.n	80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800468e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004692:	4b37      	ldr	r3, [pc, #220]	; (8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80046c4:	4b2a      	ldr	r3, [pc, #168]	; (8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c8:	0a5b      	lsrs	r3, r3, #9
 80046ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046de:	edd7 6a07 	vldr	s13, [r7, #28]
 80046e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ea:	ee17 2a90 	vmov	r2, s15
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80046f2:	4b1f      	ldr	r3, [pc, #124]	; (8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	0c1b      	lsrs	r3, r3, #16
 80046f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046fc:	ee07 3a90 	vmov	s15, r3
 8004700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004704:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004708:	ee37 7a87 	vadd.f32	s14, s15, s14
 800470c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004718:	ee17 2a90 	vmov	r2, s15
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004720:	4b13      	ldr	r3, [pc, #76]	; (8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	0e1b      	lsrs	r3, r3, #24
 8004726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004732:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004736:	ee37 7a87 	vadd.f32	s14, s15, s14
 800473a:	edd7 6a07 	vldr	s13, [r7, #28]
 800473e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004746:	ee17 2a90 	vmov	r2, s15
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800474e:	e008      	b.n	8004762 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	609a      	str	r2, [r3, #8]
}
 8004762:	bf00      	nop
 8004764:	3724      	adds	r7, #36	; 0x24
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	58024400 	.word	0x58024400
 8004774:	03d09000 	.word	0x03d09000
 8004778:	46000000 	.word	0x46000000
 800477c:	4c742400 	.word	0x4c742400
 8004780:	4a742400 	.word	0x4a742400
 8004784:	4bbebc20 	.word	0x4bbebc20

08004788 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004788:	b480      	push	{r7}
 800478a:	b089      	sub	sp, #36	; 0x24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004790:	4ba1      	ldr	r3, [pc, #644]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800479a:	4b9f      	ldr	r3, [pc, #636]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	0d1b      	lsrs	r3, r3, #20
 80047a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80047a6:	4b9c      	ldr	r3, [pc, #624]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80047b2:	4b99      	ldr	r3, [pc, #612]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	08db      	lsrs	r3, r3, #3
 80047b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	fb02 f303 	mul.w	r3, r2, r3
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8111 	beq.w	80049f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	f000 8083 	beq.w	80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	f200 80a1 	bhi.w	8004928 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d056      	beq.n	80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80047f2:	e099      	b.n	8004928 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047f4:	4b88      	ldr	r3, [pc, #544]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d02d      	beq.n	800485c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004800:	4b85      	ldr	r3, [pc, #532]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	08db      	lsrs	r3, r3, #3
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	4a84      	ldr	r2, [pc, #528]	; (8004a1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
 8004810:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	ee07 3a90 	vmov	s15, r3
 8004818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482a:	4b7b      	ldr	r3, [pc, #492]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483a:	ed97 6a03 	vldr	s12, [r7, #12]
 800483e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800484e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800485a:	e087      	b.n	800496c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800486a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486e:	4b6a      	ldr	r3, [pc, #424]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004882:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800489e:	e065      	b.n	800496c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b2:	4b59      	ldr	r3, [pc, #356]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048e2:	e043      	b.n	800496c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80048f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f6:	4b48      	ldr	r3, [pc, #288]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004906:	ed97 6a03 	vldr	s12, [r7, #12]
 800490a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800490e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800491a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004922:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004926:	e021      	b.n	800496c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004932:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493a:	4b37      	ldr	r3, [pc, #220]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494a:	ed97 6a03 	vldr	s12, [r7, #12]
 800494e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800495e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004966:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800496a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800496c:	4b2a      	ldr	r3, [pc, #168]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	0a5b      	lsrs	r3, r3, #9
 8004972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004982:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004986:	edd7 6a07 	vldr	s13, [r7, #28]
 800498a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004992:	ee17 2a90 	vmov	r2, s15
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800499a:	4b1f      	ldr	r3, [pc, #124]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	0c1b      	lsrs	r3, r3, #16
 80049a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a4:	ee07 3a90 	vmov	s15, r3
 80049a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c0:	ee17 2a90 	vmov	r2, s15
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80049c8:	4b13      	ldr	r3, [pc, #76]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	0e1b      	lsrs	r3, r3, #24
 80049ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80049e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ee:	ee17 2a90 	vmov	r2, s15
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80049f6:	e008      	b.n	8004a0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	609a      	str	r2, [r3, #8]
}
 8004a0a:	bf00      	nop
 8004a0c:	3724      	adds	r7, #36	; 0x24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	03d09000 	.word	0x03d09000
 8004a20:	46000000 	.word	0x46000000
 8004a24:	4c742400 	.word	0x4c742400
 8004a28:	4a742400 	.word	0x4a742400
 8004a2c:	4bbebc20 	.word	0x4bbebc20

08004a30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a3e:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d101      	bne.n	8004a4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e099      	b.n	8004b82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a4e:	4b4f      	ldr	r3, [pc, #316]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a4e      	ldr	r2, [pc, #312]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004a54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a5a:	f7fd fb35 	bl	80020c8 <HAL_GetTick>
 8004a5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a60:	e008      	b.n	8004a74 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004a62:	f7fd fb31 	bl	80020c8 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e086      	b.n	8004b82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a74:	4b45      	ldr	r3, [pc, #276]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f0      	bne.n	8004a62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a80:	4b42      	ldr	r3, [pc, #264]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	031b      	lsls	r3, r3, #12
 8004a8e:	493f      	ldr	r1, [pc, #252]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	628b      	str	r3, [r1, #40]	; 0x28
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	025b      	lsls	r3, r3, #9
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	061b      	lsls	r3, r3, #24
 8004ac0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ac4:	4931      	ldr	r1, [pc, #196]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004aca:	4b30      	ldr	r3, [pc, #192]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	492d      	ldr	r1, [pc, #180]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004adc:	4b2b      	ldr	r3, [pc, #172]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	f023 0220 	bic.w	r2, r3, #32
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	4928      	ldr	r1, [pc, #160]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004aee:	4b27      	ldr	r3, [pc, #156]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	4a26      	ldr	r2, [pc, #152]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004af4:	f023 0310 	bic.w	r3, r3, #16
 8004af8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004afa:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004afc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004afe:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <RCCEx_PLL2_Config+0x160>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	69d2      	ldr	r2, [r2, #28]
 8004b06:	00d2      	lsls	r2, r2, #3
 8004b08:	4920      	ldr	r1, [pc, #128]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b0e:	4b1f      	ldr	r3, [pc, #124]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	4a1e      	ldr	r2, [pc, #120]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b14:	f043 0310 	orr.w	r3, r3, #16
 8004b18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d106      	bne.n	8004b2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b20:	4b1a      	ldr	r3, [pc, #104]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	4a19      	ldr	r2, [pc, #100]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b2c:	e00f      	b.n	8004b4e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d106      	bne.n	8004b42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b34:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	4a14      	ldr	r2, [pc, #80]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b40:	e005      	b.n	8004b4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	4a11      	ldr	r2, [pc, #68]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b4e:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a0e      	ldr	r2, [pc, #56]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b5a:	f7fd fab5 	bl	80020c8 <HAL_GetTick>
 8004b5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b60:	e008      	b.n	8004b74 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b62:	f7fd fab1 	bl	80020c8 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e006      	b.n	8004b82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b74:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <RCCEx_PLL2_Config+0x15c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f0      	beq.n	8004b62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	58024400 	.word	0x58024400
 8004b90:	ffff0007 	.word	0xffff0007

08004b94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ba2:	4b53      	ldr	r3, [pc, #332]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d101      	bne.n	8004bb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e099      	b.n	8004ce6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004bb2:	4b4f      	ldr	r3, [pc, #316]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a4e      	ldr	r2, [pc, #312]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bbe:	f7fd fa83 	bl	80020c8 <HAL_GetTick>
 8004bc2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bc4:	e008      	b.n	8004bd8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004bc6:	f7fd fa7f 	bl	80020c8 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e086      	b.n	8004ce6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bd8:	4b45      	ldr	r3, [pc, #276]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1f0      	bne.n	8004bc6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004be4:	4b42      	ldr	r3, [pc, #264]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	051b      	lsls	r3, r3, #20
 8004bf2:	493f      	ldr	r1, [pc, #252]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	628b      	str	r3, [r1, #40]	; 0x28
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	025b      	lsls	r3, r3, #9
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	041b      	lsls	r3, r3, #16
 8004c16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	061b      	lsls	r3, r3, #24
 8004c24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c28:	4931      	ldr	r1, [pc, #196]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c2e:	4b30      	ldr	r3, [pc, #192]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	492d      	ldr	r1, [pc, #180]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c40:	4b2b      	ldr	r3, [pc, #172]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	4928      	ldr	r1, [pc, #160]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c52:	4b27      	ldr	r3, [pc, #156]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	4a26      	ldr	r2, [pc, #152]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c5e:	4b24      	ldr	r3, [pc, #144]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c62:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <RCCEx_PLL3_Config+0x160>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	69d2      	ldr	r2, [r2, #28]
 8004c6a:	00d2      	lsls	r2, r2, #3
 8004c6c:	4920      	ldr	r1, [pc, #128]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c72:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	4a1e      	ldr	r2, [pc, #120]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d106      	bne.n	8004c92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c84:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	4a19      	ldr	r2, [pc, #100]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c90:	e00f      	b.n	8004cb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d106      	bne.n	8004ca6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c98:	4b15      	ldr	r3, [pc, #84]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	4a14      	ldr	r2, [pc, #80]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004c9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ca2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ca4:	e005      	b.n	8004cb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ca6:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	4a11      	ldr	r2, [pc, #68]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004cac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a0e      	ldr	r2, [pc, #56]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cbe:	f7fd fa03 	bl	80020c8 <HAL_GetTick>
 8004cc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cc4:	e008      	b.n	8004cd8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004cc6:	f7fd f9ff 	bl	80020c8 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e006      	b.n	8004ce6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <RCCEx_PLL3_Config+0x15c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	58024400 	.word	0x58024400
 8004cf4:	ffff0007 	.word	0xffff0007

08004cf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e049      	b.n	8004d9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d106      	bne.n	8004d24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fc fece 	bl	8001ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3304      	adds	r3, #4
 8004d34:	4619      	mov	r1, r3
 8004d36:	4610      	mov	r0, r2
 8004d38:	f000 fbb0 	bl	800549c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b082      	sub	sp, #8
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e049      	b.n	8004e4c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d106      	bne.n	8004dd2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f841 	bl	8004e54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3304      	adds	r3, #4
 8004de2:	4619      	mov	r1, r3
 8004de4:	4610      	mov	r0, r2
 8004de6:	f000 fb59 	bl	800549c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d109      	bne.n	8004e8c <HAL_TIM_PWM_Start+0x24>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	bf14      	ite	ne
 8004e84:	2301      	movne	r3, #1
 8004e86:	2300      	moveq	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	e03c      	b.n	8004f06 <HAL_TIM_PWM_Start+0x9e>
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d109      	bne.n	8004ea6 <HAL_TIM_PWM_Start+0x3e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	bf14      	ite	ne
 8004e9e:	2301      	movne	r3, #1
 8004ea0:	2300      	moveq	r3, #0
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	e02f      	b.n	8004f06 <HAL_TIM_PWM_Start+0x9e>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d109      	bne.n	8004ec0 <HAL_TIM_PWM_Start+0x58>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	bf14      	ite	ne
 8004eb8:	2301      	movne	r3, #1
 8004eba:	2300      	moveq	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	e022      	b.n	8004f06 <HAL_TIM_PWM_Start+0x9e>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b0c      	cmp	r3, #12
 8004ec4:	d109      	bne.n	8004eda <HAL_TIM_PWM_Start+0x72>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	bf14      	ite	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	2300      	moveq	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	e015      	b.n	8004f06 <HAL_TIM_PWM_Start+0x9e>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b10      	cmp	r3, #16
 8004ede:	d109      	bne.n	8004ef4 <HAL_TIM_PWM_Start+0x8c>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	bf14      	ite	ne
 8004eec:	2301      	movne	r3, #1
 8004eee:	2300      	moveq	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	e008      	b.n	8004f06 <HAL_TIM_PWM_Start+0x9e>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	bf14      	ite	ne
 8004f00:	2301      	movne	r3, #1
 8004f02:	2300      	moveq	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e0a1      	b.n	8005052 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d104      	bne.n	8004f1e <HAL_TIM_PWM_Start+0xb6>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f1c:	e023      	b.n	8004f66 <HAL_TIM_PWM_Start+0xfe>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d104      	bne.n	8004f2e <HAL_TIM_PWM_Start+0xc6>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f2c:	e01b      	b.n	8004f66 <HAL_TIM_PWM_Start+0xfe>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d104      	bne.n	8004f3e <HAL_TIM_PWM_Start+0xd6>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f3c:	e013      	b.n	8004f66 <HAL_TIM_PWM_Start+0xfe>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b0c      	cmp	r3, #12
 8004f42:	d104      	bne.n	8004f4e <HAL_TIM_PWM_Start+0xe6>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f4c:	e00b      	b.n	8004f66 <HAL_TIM_PWM_Start+0xfe>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b10      	cmp	r3, #16
 8004f52:	d104      	bne.n	8004f5e <HAL_TIM_PWM_Start+0xf6>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f5c:	e003      	b.n	8004f66 <HAL_TIM_PWM_Start+0xfe>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	6839      	ldr	r1, [r7, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fea2 	bl	8005cb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a38      	ldr	r2, [pc, #224]	; (800505c <HAL_TIM_PWM_Start+0x1f4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0x13e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a37      	ldr	r2, [pc, #220]	; (8005060 <HAL_TIM_PWM_Start+0x1f8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00e      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0x13e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a35      	ldr	r2, [pc, #212]	; (8005064 <HAL_TIM_PWM_Start+0x1fc>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d009      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0x13e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a34      	ldr	r2, [pc, #208]	; (8005068 <HAL_TIM_PWM_Start+0x200>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d004      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0x13e>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a32      	ldr	r2, [pc, #200]	; (800506c <HAL_TIM_PWM_Start+0x204>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d101      	bne.n	8004faa <HAL_TIM_PWM_Start+0x142>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <HAL_TIM_PWM_Start+0x144>
 8004faa:	2300      	movs	r3, #0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d007      	beq.n	8004fc0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a25      	ldr	r2, [pc, #148]	; (800505c <HAL_TIM_PWM_Start+0x1f4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d022      	beq.n	8005010 <HAL_TIM_PWM_Start+0x1a8>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd2:	d01d      	beq.n	8005010 <HAL_TIM_PWM_Start+0x1a8>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a25      	ldr	r2, [pc, #148]	; (8005070 <HAL_TIM_PWM_Start+0x208>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d018      	beq.n	8005010 <HAL_TIM_PWM_Start+0x1a8>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a24      	ldr	r2, [pc, #144]	; (8005074 <HAL_TIM_PWM_Start+0x20c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d013      	beq.n	8005010 <HAL_TIM_PWM_Start+0x1a8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a22      	ldr	r2, [pc, #136]	; (8005078 <HAL_TIM_PWM_Start+0x210>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00e      	beq.n	8005010 <HAL_TIM_PWM_Start+0x1a8>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a1a      	ldr	r2, [pc, #104]	; (8005060 <HAL_TIM_PWM_Start+0x1f8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d009      	beq.n	8005010 <HAL_TIM_PWM_Start+0x1a8>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1e      	ldr	r2, [pc, #120]	; (800507c <HAL_TIM_PWM_Start+0x214>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <HAL_TIM_PWM_Start+0x1a8>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a16      	ldr	r2, [pc, #88]	; (8005064 <HAL_TIM_PWM_Start+0x1fc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d115      	bne.n	800503c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	4b1a      	ldr	r3, [pc, #104]	; (8005080 <HAL_TIM_PWM_Start+0x218>)
 8005018:	4013      	ands	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b06      	cmp	r3, #6
 8005020:	d015      	beq.n	800504e <HAL_TIM_PWM_Start+0x1e6>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005028:	d011      	beq.n	800504e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 0201 	orr.w	r2, r2, #1
 8005038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503a:	e008      	b.n	800504e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	e000      	b.n	8005050 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40010000 	.word	0x40010000
 8005060:	40010400 	.word	0x40010400
 8005064:	40014000 	.word	0x40014000
 8005068:	40014400 	.word	0x40014400
 800506c:	40014800 	.word	0x40014800
 8005070:	40000400 	.word	0x40000400
 8005074:	40000800 	.word	0x40000800
 8005078:	40000c00 	.word	0x40000c00
 800507c:	40001800 	.word	0x40001800
 8005080:	00010007 	.word	0x00010007

08005084 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800509e:	2302      	movs	r3, #2
 80050a0:	e0ff      	b.n	80052a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b14      	cmp	r3, #20
 80050ae:	f200 80f0 	bhi.w	8005292 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80050b2:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b8:	0800510d 	.word	0x0800510d
 80050bc:	08005293 	.word	0x08005293
 80050c0:	08005293 	.word	0x08005293
 80050c4:	08005293 	.word	0x08005293
 80050c8:	0800514d 	.word	0x0800514d
 80050cc:	08005293 	.word	0x08005293
 80050d0:	08005293 	.word	0x08005293
 80050d4:	08005293 	.word	0x08005293
 80050d8:	0800518f 	.word	0x0800518f
 80050dc:	08005293 	.word	0x08005293
 80050e0:	08005293 	.word	0x08005293
 80050e4:	08005293 	.word	0x08005293
 80050e8:	080051cf 	.word	0x080051cf
 80050ec:	08005293 	.word	0x08005293
 80050f0:	08005293 	.word	0x08005293
 80050f4:	08005293 	.word	0x08005293
 80050f8:	08005211 	.word	0x08005211
 80050fc:	08005293 	.word	0x08005293
 8005100:	08005293 	.word	0x08005293
 8005104:	08005293 	.word	0x08005293
 8005108:	08005251 	.word	0x08005251
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fa5c 	bl	80055d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0208 	orr.w	r2, r2, #8
 8005126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0204 	bic.w	r2, r2, #4
 8005136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6999      	ldr	r1, [r3, #24]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	619a      	str	r2, [r3, #24]
      break;
 800514a:	e0a5      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	4618      	mov	r0, r3
 8005154:	f000 facc 	bl	80056f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6999      	ldr	r1, [r3, #24]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	021a      	lsls	r2, r3, #8
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	619a      	str	r2, [r3, #24]
      break;
 800518c:	e084      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fb35 	bl	8005804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0208 	orr.w	r2, r2, #8
 80051a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0204 	bic.w	r2, r2, #4
 80051b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69d9      	ldr	r1, [r3, #28]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	61da      	str	r2, [r3, #28]
      break;
 80051cc:	e064      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68b9      	ldr	r1, [r7, #8]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fb9d 	bl	8005914 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69da      	ldr	r2, [r3, #28]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69d9      	ldr	r1, [r3, #28]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	021a      	lsls	r2, r3, #8
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	61da      	str	r2, [r3, #28]
      break;
 800520e:	e043      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fbe6 	bl	80059e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0208 	orr.w	r2, r2, #8
 800522a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0204 	bic.w	r2, r2, #4
 800523a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	691a      	ldr	r2, [r3, #16]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800524e:	e023      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fc2a 	bl	8005ab0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800526a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800527a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	021a      	lsls	r2, r3, #8
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005290:	e002      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	75fb      	strb	r3, [r7, #23]
      break;
 8005296:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop

080052ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_TIM_ConfigClockSource+0x1c>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e0dc      	b.n	8005482 <HAL_TIM_ConfigClockSource+0x1d6>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	4b6a      	ldr	r3, [pc, #424]	; (800548c <HAL_TIM_ConfigClockSource+0x1e0>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a64      	ldr	r2, [pc, #400]	; (8005490 <HAL_TIM_ConfigClockSource+0x1e4>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	f000 80a9 	beq.w	8005456 <HAL_TIM_ConfigClockSource+0x1aa>
 8005304:	4a62      	ldr	r2, [pc, #392]	; (8005490 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005306:	4293      	cmp	r3, r2
 8005308:	f200 80ae 	bhi.w	8005468 <HAL_TIM_ConfigClockSource+0x1bc>
 800530c:	4a61      	ldr	r2, [pc, #388]	; (8005494 <HAL_TIM_ConfigClockSource+0x1e8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	f000 80a1 	beq.w	8005456 <HAL_TIM_ConfigClockSource+0x1aa>
 8005314:	4a5f      	ldr	r2, [pc, #380]	; (8005494 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	f200 80a6 	bhi.w	8005468 <HAL_TIM_ConfigClockSource+0x1bc>
 800531c:	4a5e      	ldr	r2, [pc, #376]	; (8005498 <HAL_TIM_ConfigClockSource+0x1ec>)
 800531e:	4293      	cmp	r3, r2
 8005320:	f000 8099 	beq.w	8005456 <HAL_TIM_ConfigClockSource+0x1aa>
 8005324:	4a5c      	ldr	r2, [pc, #368]	; (8005498 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005326:	4293      	cmp	r3, r2
 8005328:	f200 809e 	bhi.w	8005468 <HAL_TIM_ConfigClockSource+0x1bc>
 800532c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005330:	f000 8091 	beq.w	8005456 <HAL_TIM_ConfigClockSource+0x1aa>
 8005334:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005338:	f200 8096 	bhi.w	8005468 <HAL_TIM_ConfigClockSource+0x1bc>
 800533c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005340:	f000 8089 	beq.w	8005456 <HAL_TIM_ConfigClockSource+0x1aa>
 8005344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005348:	f200 808e 	bhi.w	8005468 <HAL_TIM_ConfigClockSource+0x1bc>
 800534c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005350:	d03e      	beq.n	80053d0 <HAL_TIM_ConfigClockSource+0x124>
 8005352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005356:	f200 8087 	bhi.w	8005468 <HAL_TIM_ConfigClockSource+0x1bc>
 800535a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535e:	f000 8086 	beq.w	800546e <HAL_TIM_ConfigClockSource+0x1c2>
 8005362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005366:	d87f      	bhi.n	8005468 <HAL_TIM_ConfigClockSource+0x1bc>
 8005368:	2b70      	cmp	r3, #112	; 0x70
 800536a:	d01a      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0xf6>
 800536c:	2b70      	cmp	r3, #112	; 0x70
 800536e:	d87b      	bhi.n	8005468 <HAL_TIM_ConfigClockSource+0x1bc>
 8005370:	2b60      	cmp	r3, #96	; 0x60
 8005372:	d050      	beq.n	8005416 <HAL_TIM_ConfigClockSource+0x16a>
 8005374:	2b60      	cmp	r3, #96	; 0x60
 8005376:	d877      	bhi.n	8005468 <HAL_TIM_ConfigClockSource+0x1bc>
 8005378:	2b50      	cmp	r3, #80	; 0x50
 800537a:	d03c      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x14a>
 800537c:	2b50      	cmp	r3, #80	; 0x50
 800537e:	d873      	bhi.n	8005468 <HAL_TIM_ConfigClockSource+0x1bc>
 8005380:	2b40      	cmp	r3, #64	; 0x40
 8005382:	d058      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x18a>
 8005384:	2b40      	cmp	r3, #64	; 0x40
 8005386:	d86f      	bhi.n	8005468 <HAL_TIM_ConfigClockSource+0x1bc>
 8005388:	2b30      	cmp	r3, #48	; 0x30
 800538a:	d064      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0x1aa>
 800538c:	2b30      	cmp	r3, #48	; 0x30
 800538e:	d86b      	bhi.n	8005468 <HAL_TIM_ConfigClockSource+0x1bc>
 8005390:	2b20      	cmp	r3, #32
 8005392:	d060      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0x1aa>
 8005394:	2b20      	cmp	r3, #32
 8005396:	d867      	bhi.n	8005468 <HAL_TIM_ConfigClockSource+0x1bc>
 8005398:	2b00      	cmp	r3, #0
 800539a:	d05c      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0x1aa>
 800539c:	2b10      	cmp	r3, #16
 800539e:	d05a      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0x1aa>
 80053a0:	e062      	b.n	8005468 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	6899      	ldr	r1, [r3, #8]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f000 fc61 	bl	8005c78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	609a      	str	r2, [r3, #8]
      break;
 80053ce:	e04f      	b.n	8005470 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6818      	ldr	r0, [r3, #0]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	6899      	ldr	r1, [r3, #8]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f000 fc4a 	bl	8005c78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053f2:	609a      	str	r2, [r3, #8]
      break;
 80053f4:	e03c      	b.n	8005470 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6859      	ldr	r1, [r3, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	461a      	mov	r2, r3
 8005404:	f000 fbba 	bl	8005b7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2150      	movs	r1, #80	; 0x50
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fc14 	bl	8005c3c <TIM_ITRx_SetConfig>
      break;
 8005414:	e02c      	b.n	8005470 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	6859      	ldr	r1, [r3, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	461a      	mov	r2, r3
 8005424:	f000 fbd9 	bl	8005bda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2160      	movs	r1, #96	; 0x60
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fc04 	bl	8005c3c <TIM_ITRx_SetConfig>
      break;
 8005434:	e01c      	b.n	8005470 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	6859      	ldr	r1, [r3, #4]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	461a      	mov	r2, r3
 8005444:	f000 fb9a 	bl	8005b7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2140      	movs	r1, #64	; 0x40
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fbf4 	bl	8005c3c <TIM_ITRx_SetConfig>
      break;
 8005454:	e00c      	b.n	8005470 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4619      	mov	r1, r3
 8005460:	4610      	mov	r0, r2
 8005462:	f000 fbeb 	bl	8005c3c <TIM_ITRx_SetConfig>
      break;
 8005466:	e003      	b.n	8005470 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	73fb      	strb	r3, [r7, #15]
      break;
 800546c:	e000      	b.n	8005470 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800546e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005480:	7bfb      	ldrb	r3, [r7, #15]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	ffceff88 	.word	0xffceff88
 8005490:	00100040 	.word	0x00100040
 8005494:	00100030 	.word	0x00100030
 8005498:	00100020 	.word	0x00100020

0800549c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a40      	ldr	r2, [pc, #256]	; (80055b0 <TIM_Base_SetConfig+0x114>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d013      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ba:	d00f      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a3d      	ldr	r2, [pc, #244]	; (80055b4 <TIM_Base_SetConfig+0x118>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00b      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a3c      	ldr	r2, [pc, #240]	; (80055b8 <TIM_Base_SetConfig+0x11c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d007      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a3b      	ldr	r2, [pc, #236]	; (80055bc <TIM_Base_SetConfig+0x120>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a3a      	ldr	r2, [pc, #232]	; (80055c0 <TIM_Base_SetConfig+0x124>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d108      	bne.n	80054ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a2f      	ldr	r2, [pc, #188]	; (80055b0 <TIM_Base_SetConfig+0x114>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d01f      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fc:	d01b      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2c      	ldr	r2, [pc, #176]	; (80055b4 <TIM_Base_SetConfig+0x118>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d017      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2b      	ldr	r2, [pc, #172]	; (80055b8 <TIM_Base_SetConfig+0x11c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a2a      	ldr	r2, [pc, #168]	; (80055bc <TIM_Base_SetConfig+0x120>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00f      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a29      	ldr	r2, [pc, #164]	; (80055c0 <TIM_Base_SetConfig+0x124>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00b      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a28      	ldr	r2, [pc, #160]	; (80055c4 <TIM_Base_SetConfig+0x128>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d007      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a27      	ldr	r2, [pc, #156]	; (80055c8 <TIM_Base_SetConfig+0x12c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d003      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a26      	ldr	r2, [pc, #152]	; (80055cc <TIM_Base_SetConfig+0x130>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d108      	bne.n	8005548 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800553c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a10      	ldr	r2, [pc, #64]	; (80055b0 <TIM_Base_SetConfig+0x114>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00f      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a12      	ldr	r2, [pc, #72]	; (80055c0 <TIM_Base_SetConfig+0x124>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00b      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a11      	ldr	r2, [pc, #68]	; (80055c4 <TIM_Base_SetConfig+0x128>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d007      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a10      	ldr	r2, [pc, #64]	; (80055c8 <TIM_Base_SetConfig+0x12c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d003      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a0f      	ldr	r2, [pc, #60]	; (80055cc <TIM_Base_SetConfig+0x130>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d103      	bne.n	800559c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	615a      	str	r2, [r3, #20]
}
 80055a2:	bf00      	nop
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40000400 	.word	0x40000400
 80055b8:	40000800 	.word	0x40000800
 80055bc:	40000c00 	.word	0x40000c00
 80055c0:	40010400 	.word	0x40010400
 80055c4:	40014000 	.word	0x40014000
 80055c8:	40014400 	.word	0x40014400
 80055cc:	40014800 	.word	0x40014800

080055d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f023 0201 	bic.w	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4b37      	ldr	r3, [pc, #220]	; (80056d8 <TIM_OC1_SetConfig+0x108>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0303 	bic.w	r3, r3, #3
 8005606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f023 0302 	bic.w	r3, r3, #2
 8005618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a2d      	ldr	r2, [pc, #180]	; (80056dc <TIM_OC1_SetConfig+0x10c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00f      	beq.n	800564c <TIM_OC1_SetConfig+0x7c>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a2c      	ldr	r2, [pc, #176]	; (80056e0 <TIM_OC1_SetConfig+0x110>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00b      	beq.n	800564c <TIM_OC1_SetConfig+0x7c>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a2b      	ldr	r2, [pc, #172]	; (80056e4 <TIM_OC1_SetConfig+0x114>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d007      	beq.n	800564c <TIM_OC1_SetConfig+0x7c>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a2a      	ldr	r2, [pc, #168]	; (80056e8 <TIM_OC1_SetConfig+0x118>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d003      	beq.n	800564c <TIM_OC1_SetConfig+0x7c>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a29      	ldr	r2, [pc, #164]	; (80056ec <TIM_OC1_SetConfig+0x11c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d10c      	bne.n	8005666 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f023 0308 	bic.w	r3, r3, #8
 8005652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	4313      	orrs	r3, r2
 800565c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f023 0304 	bic.w	r3, r3, #4
 8005664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a1c      	ldr	r2, [pc, #112]	; (80056dc <TIM_OC1_SetConfig+0x10c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d00f      	beq.n	800568e <TIM_OC1_SetConfig+0xbe>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a1b      	ldr	r2, [pc, #108]	; (80056e0 <TIM_OC1_SetConfig+0x110>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00b      	beq.n	800568e <TIM_OC1_SetConfig+0xbe>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a1a      	ldr	r2, [pc, #104]	; (80056e4 <TIM_OC1_SetConfig+0x114>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d007      	beq.n	800568e <TIM_OC1_SetConfig+0xbe>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a19      	ldr	r2, [pc, #100]	; (80056e8 <TIM_OC1_SetConfig+0x118>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d003      	beq.n	800568e <TIM_OC1_SetConfig+0xbe>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a18      	ldr	r2, [pc, #96]	; (80056ec <TIM_OC1_SetConfig+0x11c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d111      	bne.n	80056b2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800569c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	621a      	str	r2, [r3, #32]
}
 80056cc:	bf00      	nop
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	fffeff8f 	.word	0xfffeff8f
 80056dc:	40010000 	.word	0x40010000
 80056e0:	40010400 	.word	0x40010400
 80056e4:	40014000 	.word	0x40014000
 80056e8:	40014400 	.word	0x40014400
 80056ec:	40014800 	.word	0x40014800

080056f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f023 0210 	bic.w	r2, r3, #16
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4b34      	ldr	r3, [pc, #208]	; (80057ec <TIM_OC2_SetConfig+0xfc>)
 800571c:	4013      	ands	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	021b      	lsls	r3, r3, #8
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	4313      	orrs	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f023 0320 	bic.w	r3, r3, #32
 800573a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a29      	ldr	r2, [pc, #164]	; (80057f0 <TIM_OC2_SetConfig+0x100>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d003      	beq.n	8005758 <TIM_OC2_SetConfig+0x68>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a28      	ldr	r2, [pc, #160]	; (80057f4 <TIM_OC2_SetConfig+0x104>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d10d      	bne.n	8005774 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800575e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005772:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a1e      	ldr	r2, [pc, #120]	; (80057f0 <TIM_OC2_SetConfig+0x100>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00f      	beq.n	800579c <TIM_OC2_SetConfig+0xac>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a1d      	ldr	r2, [pc, #116]	; (80057f4 <TIM_OC2_SetConfig+0x104>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00b      	beq.n	800579c <TIM_OC2_SetConfig+0xac>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a1c      	ldr	r2, [pc, #112]	; (80057f8 <TIM_OC2_SetConfig+0x108>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d007      	beq.n	800579c <TIM_OC2_SetConfig+0xac>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a1b      	ldr	r2, [pc, #108]	; (80057fc <TIM_OC2_SetConfig+0x10c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_OC2_SetConfig+0xac>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a1a      	ldr	r2, [pc, #104]	; (8005800 <TIM_OC2_SetConfig+0x110>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d113      	bne.n	80057c4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	621a      	str	r2, [r3, #32]
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	feff8fff 	.word	0xfeff8fff
 80057f0:	40010000 	.word	0x40010000
 80057f4:	40010400 	.word	0x40010400
 80057f8:	40014000 	.word	0x40014000
 80057fc:	40014400 	.word	0x40014400
 8005800:	40014800 	.word	0x40014800

08005804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4b33      	ldr	r3, [pc, #204]	; (80058fc <TIM_OC3_SetConfig+0xf8>)
 8005830:	4013      	ands	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0303 	bic.w	r3, r3, #3
 800583a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800584c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	021b      	lsls	r3, r3, #8
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a28      	ldr	r2, [pc, #160]	; (8005900 <TIM_OC3_SetConfig+0xfc>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d003      	beq.n	800586a <TIM_OC3_SetConfig+0x66>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a27      	ldr	r2, [pc, #156]	; (8005904 <TIM_OC3_SetConfig+0x100>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d10d      	bne.n	8005886 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	021b      	lsls	r3, r3, #8
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a1d      	ldr	r2, [pc, #116]	; (8005900 <TIM_OC3_SetConfig+0xfc>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00f      	beq.n	80058ae <TIM_OC3_SetConfig+0xaa>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a1c      	ldr	r2, [pc, #112]	; (8005904 <TIM_OC3_SetConfig+0x100>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d00b      	beq.n	80058ae <TIM_OC3_SetConfig+0xaa>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a1b      	ldr	r2, [pc, #108]	; (8005908 <TIM_OC3_SetConfig+0x104>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d007      	beq.n	80058ae <TIM_OC3_SetConfig+0xaa>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a1a      	ldr	r2, [pc, #104]	; (800590c <TIM_OC3_SetConfig+0x108>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d003      	beq.n	80058ae <TIM_OC3_SetConfig+0xaa>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a19      	ldr	r2, [pc, #100]	; (8005910 <TIM_OC3_SetConfig+0x10c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d113      	bne.n	80058d6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	011b      	lsls	r3, r3, #4
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	621a      	str	r2, [r3, #32]
}
 80058f0:	bf00      	nop
 80058f2:	371c      	adds	r7, #28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	fffeff8f 	.word	0xfffeff8f
 8005900:	40010000 	.word	0x40010000
 8005904:	40010400 	.word	0x40010400
 8005908:	40014000 	.word	0x40014000
 800590c:	40014400 	.word	0x40014400
 8005910:	40014800 	.word	0x40014800

08005914 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4b24      	ldr	r3, [pc, #144]	; (80059d0 <TIM_OC4_SetConfig+0xbc>)
 8005940:	4013      	ands	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800595e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	031b      	lsls	r3, r3, #12
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a19      	ldr	r2, [pc, #100]	; (80059d4 <TIM_OC4_SetConfig+0xc0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00f      	beq.n	8005994 <TIM_OC4_SetConfig+0x80>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a18      	ldr	r2, [pc, #96]	; (80059d8 <TIM_OC4_SetConfig+0xc4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00b      	beq.n	8005994 <TIM_OC4_SetConfig+0x80>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a17      	ldr	r2, [pc, #92]	; (80059dc <TIM_OC4_SetConfig+0xc8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d007      	beq.n	8005994 <TIM_OC4_SetConfig+0x80>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a16      	ldr	r2, [pc, #88]	; (80059e0 <TIM_OC4_SetConfig+0xcc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <TIM_OC4_SetConfig+0x80>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <TIM_OC4_SetConfig+0xd0>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d109      	bne.n	80059a8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800599a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	019b      	lsls	r3, r3, #6
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	621a      	str	r2, [r3, #32]
}
 80059c2:	bf00      	nop
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	feff8fff 	.word	0xfeff8fff
 80059d4:	40010000 	.word	0x40010000
 80059d8:	40010400 	.word	0x40010400
 80059dc:	40014000 	.word	0x40014000
 80059e0:	40014400 	.word	0x40014400
 80059e4:	40014800 	.word	0x40014800

080059e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4b21      	ldr	r3, [pc, #132]	; (8005a98 <TIM_OC5_SetConfig+0xb0>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	041b      	lsls	r3, r3, #16
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a18      	ldr	r2, [pc, #96]	; (8005a9c <TIM_OC5_SetConfig+0xb4>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00f      	beq.n	8005a5e <TIM_OC5_SetConfig+0x76>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a17      	ldr	r2, [pc, #92]	; (8005aa0 <TIM_OC5_SetConfig+0xb8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00b      	beq.n	8005a5e <TIM_OC5_SetConfig+0x76>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a16      	ldr	r2, [pc, #88]	; (8005aa4 <TIM_OC5_SetConfig+0xbc>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d007      	beq.n	8005a5e <TIM_OC5_SetConfig+0x76>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a15      	ldr	r2, [pc, #84]	; (8005aa8 <TIM_OC5_SetConfig+0xc0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_OC5_SetConfig+0x76>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a14      	ldr	r2, [pc, #80]	; (8005aac <TIM_OC5_SetConfig+0xc4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d109      	bne.n	8005a72 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	021b      	lsls	r3, r3, #8
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	621a      	str	r2, [r3, #32]
}
 8005a8c:	bf00      	nop
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	fffeff8f 	.word	0xfffeff8f
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	40010400 	.word	0x40010400
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	40014400 	.word	0x40014400
 8005aac:	40014800 	.word	0x40014800

08005ab0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4b22      	ldr	r3, [pc, #136]	; (8005b64 <TIM_OC6_SetConfig+0xb4>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	021b      	lsls	r3, r3, #8
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	051b      	lsls	r3, r3, #20
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a19      	ldr	r2, [pc, #100]	; (8005b68 <TIM_OC6_SetConfig+0xb8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00f      	beq.n	8005b28 <TIM_OC6_SetConfig+0x78>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a18      	ldr	r2, [pc, #96]	; (8005b6c <TIM_OC6_SetConfig+0xbc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00b      	beq.n	8005b28 <TIM_OC6_SetConfig+0x78>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a17      	ldr	r2, [pc, #92]	; (8005b70 <TIM_OC6_SetConfig+0xc0>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d007      	beq.n	8005b28 <TIM_OC6_SetConfig+0x78>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a16      	ldr	r2, [pc, #88]	; (8005b74 <TIM_OC6_SetConfig+0xc4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <TIM_OC6_SetConfig+0x78>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a15      	ldr	r2, [pc, #84]	; (8005b78 <TIM_OC6_SetConfig+0xc8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d109      	bne.n	8005b3c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	029b      	lsls	r3, r3, #10
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	621a      	str	r2, [r3, #32]
}
 8005b56:	bf00      	nop
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	feff8fff 	.word	0xfeff8fff
 8005b68:	40010000 	.word	0x40010000
 8005b6c:	40010400 	.word	0x40010400
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40014400 	.word	0x40014400
 8005b78:	40014800 	.word	0x40014800

08005b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	f023 0201 	bic.w	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f023 030a 	bic.w	r3, r3, #10
 8005bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b087      	sub	sp, #28
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f023 0210 	bic.w	r2, r3, #16
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	031b      	lsls	r3, r3, #12
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	621a      	str	r2, [r3, #32]
}
 8005c2e:	bf00      	nop
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <TIM_ITRx_SetConfig+0x38>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f043 0307 	orr.w	r3, r3, #7
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	609a      	str	r2, [r3, #8]
}
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	ffcfff8f 	.word	0xffcfff8f

08005c78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	021a      	lsls	r2, r3, #8
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	609a      	str	r2, [r3, #8]
}
 8005cac:	bf00      	nop
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	2201      	movs	r2, #1
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a1a      	ldr	r2, [r3, #32]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	401a      	ands	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a1a      	ldr	r2, [r3, #32]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f003 031f 	and.w	r3, r3, #31
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	621a      	str	r2, [r3, #32]
}
 8005cf6:	bf00      	nop
 8005cf8:	371c      	adds	r7, #28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d101      	bne.n	8005d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	e06d      	b.n	8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a30      	ldr	r2, [pc, #192]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d004      	beq.n	8005d50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a2f      	ldr	r2, [pc, #188]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d108      	bne.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a20      	ldr	r2, [pc, #128]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d022      	beq.n	8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8e:	d01d      	beq.n	8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1d      	ldr	r2, [pc, #116]	; (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d018      	beq.n	8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a1c      	ldr	r2, [pc, #112]	; (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d013      	beq.n	8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a1a      	ldr	r2, [pc, #104]	; (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d00e      	beq.n	8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a15      	ldr	r2, [pc, #84]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d009      	beq.n	8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a16      	ldr	r2, [pc, #88]	; (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d004      	beq.n	8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a15      	ldr	r2, [pc, #84]	; (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d10c      	bne.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	40010000 	.word	0x40010000
 8005e08:	40010400 	.word	0x40010400
 8005e0c:	40000400 	.word	0x40000400
 8005e10:	40000800 	.word	0x40000800
 8005e14:	40000c00 	.word	0x40000c00
 8005e18:	40001800 	.word	0x40001800
 8005e1c:	40014000 	.word	0x40014000

08005e20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e065      	b.n	8005f08 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	041b      	lsls	r3, r3, #16
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a16      	ldr	r2, [pc, #88]	; (8005f14 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d004      	beq.n	8005eca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a14      	ldr	r2, [pc, #80]	; (8005f18 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d115      	bne.n	8005ef6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	051b      	lsls	r3, r3, #20
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	40010000 	.word	0x40010000
 8005f18:	40010400 	.word	0x40010400

08005f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e042      	b.n	8005fb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d106      	bne.n	8005f46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7fb fe5d 	bl	8001c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2224      	movs	r2, #36	; 0x24
 8005f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 0201 	bic.w	r2, r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f996 	bl	8006290 <UART_SetConfig>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d101      	bne.n	8005f6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e022      	b.n	8005fb4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 feea 	bl	8006d50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689a      	ldr	r2, [r3, #8]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0201 	orr.w	r2, r2, #1
 8005faa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 ff71 	bl	8006e94 <UART_CheckIdleState>
 8005fb2:	4603      	mov	r3, r0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08a      	sub	sp, #40	; 0x28
 8005fc0:	af02      	add	r7, sp, #8
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fd2:	2b20      	cmp	r3, #32
 8005fd4:	f040 8083 	bne.w	80060de <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <HAL_UART_Transmit+0x28>
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e07b      	b.n	80060e0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <HAL_UART_Transmit+0x3a>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	e074      	b.n	80060e0 <HAL_UART_Transmit+0x124>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2221      	movs	r2, #33	; 0x21
 800600a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800600e:	f7fc f85b 	bl	80020c8 <HAL_GetTick>
 8006012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	88fa      	ldrh	r2, [r7, #6]
 8006018:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	88fa      	ldrh	r2, [r7, #6]
 8006020:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800602c:	d108      	bne.n	8006040 <HAL_UART_Transmit+0x84>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d104      	bne.n	8006040 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006036:	2300      	movs	r3, #0
 8006038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	61bb      	str	r3, [r7, #24]
 800603e:	e003      	b.n	8006048 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006044:	2300      	movs	r3, #0
 8006046:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006050:	e02c      	b.n	80060ac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2200      	movs	r2, #0
 800605a:	2180      	movs	r1, #128	; 0x80
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 ff64 	bl	8006f2a <UART_WaitOnFlagUntilTimeout>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e039      	b.n	80060e0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10b      	bne.n	800608a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006080:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	3302      	adds	r3, #2
 8006086:	61bb      	str	r3, [r7, #24]
 8006088:	e007      	b.n	800609a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	781a      	ldrb	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	3301      	adds	r3, #1
 8006098:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	3b01      	subs	r3, #1
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1cc      	bne.n	8006052 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2200      	movs	r2, #0
 80060c0:	2140      	movs	r1, #64	; 0x40
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 ff31 	bl	8006f2a <UART_WaitOnFlagUntilTimeout>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e006      	b.n	80060e0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2220      	movs	r2, #32
 80060d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	e000      	b.n	80060e0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80060de:	2302      	movs	r3, #2
  }
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3720      	adds	r7, #32
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08a      	sub	sp, #40	; 0x28
 80060ec:	af02      	add	r7, sp, #8
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	603b      	str	r3, [r7, #0]
 80060f4:	4613      	mov	r3, r2
 80060f6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fe:	2b20      	cmp	r3, #32
 8006100:	f040 80c0 	bne.w	8006284 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <HAL_UART_Receive+0x28>
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e0b8      	b.n	8006286 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800611a:	2b01      	cmp	r3, #1
 800611c:	d101      	bne.n	8006122 <HAL_UART_Receive+0x3a>
 800611e:	2302      	movs	r3, #2
 8006120:	e0b1      	b.n	8006286 <HAL_UART_Receive+0x19e>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2222      	movs	r2, #34	; 0x22
 8006136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006140:	f7fb ffc2 	bl	80020c8 <HAL_GetTick>
 8006144:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	88fa      	ldrh	r2, [r7, #6]
 800614a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	88fa      	ldrh	r2, [r7, #6]
 8006152:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615e:	d10e      	bne.n	800617e <HAL_UART_Receive+0x96>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d105      	bne.n	8006174 <HAL_UART_Receive+0x8c>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800616e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006172:	e02d      	b.n	80061d0 <HAL_UART_Receive+0xe8>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	22ff      	movs	r2, #255	; 0xff
 8006178:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800617c:	e028      	b.n	80061d0 <HAL_UART_Receive+0xe8>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10d      	bne.n	80061a2 <HAL_UART_Receive+0xba>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d104      	bne.n	8006198 <HAL_UART_Receive+0xb0>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	22ff      	movs	r2, #255	; 0xff
 8006192:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006196:	e01b      	b.n	80061d0 <HAL_UART_Receive+0xe8>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	227f      	movs	r2, #127	; 0x7f
 800619c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061a0:	e016      	b.n	80061d0 <HAL_UART_Receive+0xe8>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061aa:	d10d      	bne.n	80061c8 <HAL_UART_Receive+0xe0>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d104      	bne.n	80061be <HAL_UART_Receive+0xd6>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	227f      	movs	r2, #127	; 0x7f
 80061b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061bc:	e008      	b.n	80061d0 <HAL_UART_Receive+0xe8>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	223f      	movs	r2, #63	; 0x3f
 80061c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061c6:	e003      	b.n	80061d0 <HAL_UART_Receive+0xe8>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80061d6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e0:	d108      	bne.n	80061f4 <HAL_UART_Receive+0x10c>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d104      	bne.n	80061f4 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	61bb      	str	r3, [r7, #24]
 80061f2:	e003      	b.n	80061fc <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061f8:	2300      	movs	r3, #0
 80061fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006204:	e032      	b.n	800626c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2200      	movs	r2, #0
 800620e:	2120      	movs	r1, #32
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 fe8a 	bl	8006f2a <UART_WaitOnFlagUntilTimeout>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e032      	b.n	8006286 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10c      	bne.n	8006240 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	b29a      	uxth	r2, r3
 800622e:	8a7b      	ldrh	r3, [r7, #18]
 8006230:	4013      	ands	r3, r2
 8006232:	b29a      	uxth	r2, r3
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	3302      	adds	r3, #2
 800623c:	61bb      	str	r3, [r7, #24]
 800623e:	e00c      	b.n	800625a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	b2da      	uxtb	r2, r3
 8006248:	8a7b      	ldrh	r3, [r7, #18]
 800624a:	b2db      	uxtb	r3, r3
 800624c:	4013      	ands	r3, r2
 800624e:	b2da      	uxtb	r2, r3
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	3301      	adds	r3, #1
 8006258:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006260:	b29b      	uxth	r3, r3
 8006262:	3b01      	subs	r3, #1
 8006264:	b29a      	uxth	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006272:	b29b      	uxth	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1c6      	bne.n	8006206 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2220      	movs	r2, #32
 800627c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	e000      	b.n	8006286 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8006284:	2302      	movs	r3, #2
  }
}
 8006286:	4618      	mov	r0, r3
 8006288:	3720      	adds	r7, #32
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006290:	b5b0      	push	{r4, r5, r7, lr}
 8006292:	b08e      	sub	sp, #56	; 0x38
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	431a      	orrs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	4bbf      	ldr	r3, [pc, #764]	; (80065bc <UART_SetConfig+0x32c>)
 80062be:	4013      	ands	r3, r2
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	6812      	ldr	r2, [r2, #0]
 80062c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80062c6:	430b      	orrs	r3, r1
 80062c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4ab5      	ldr	r2, [pc, #724]	; (80065c0 <UART_SetConfig+0x330>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d004      	beq.n	80062fa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062f6:	4313      	orrs	r3, r2
 80062f8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	4bb0      	ldr	r3, [pc, #704]	; (80065c4 <UART_SetConfig+0x334>)
 8006302:	4013      	ands	r3, r2
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6812      	ldr	r2, [r2, #0]
 8006308:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800630a:	430b      	orrs	r3, r1
 800630c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	f023 010f 	bic.w	r1, r3, #15
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4aa7      	ldr	r2, [pc, #668]	; (80065c8 <UART_SetConfig+0x338>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d176      	bne.n	800641c <UART_SetConfig+0x18c>
 800632e:	4ba7      	ldr	r3, [pc, #668]	; (80065cc <UART_SetConfig+0x33c>)
 8006330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006336:	2b28      	cmp	r3, #40	; 0x28
 8006338:	d86c      	bhi.n	8006414 <UART_SetConfig+0x184>
 800633a:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <UART_SetConfig+0xb0>)
 800633c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006340:	080063e5 	.word	0x080063e5
 8006344:	08006415 	.word	0x08006415
 8006348:	08006415 	.word	0x08006415
 800634c:	08006415 	.word	0x08006415
 8006350:	08006415 	.word	0x08006415
 8006354:	08006415 	.word	0x08006415
 8006358:	08006415 	.word	0x08006415
 800635c:	08006415 	.word	0x08006415
 8006360:	080063ed 	.word	0x080063ed
 8006364:	08006415 	.word	0x08006415
 8006368:	08006415 	.word	0x08006415
 800636c:	08006415 	.word	0x08006415
 8006370:	08006415 	.word	0x08006415
 8006374:	08006415 	.word	0x08006415
 8006378:	08006415 	.word	0x08006415
 800637c:	08006415 	.word	0x08006415
 8006380:	080063f5 	.word	0x080063f5
 8006384:	08006415 	.word	0x08006415
 8006388:	08006415 	.word	0x08006415
 800638c:	08006415 	.word	0x08006415
 8006390:	08006415 	.word	0x08006415
 8006394:	08006415 	.word	0x08006415
 8006398:	08006415 	.word	0x08006415
 800639c:	08006415 	.word	0x08006415
 80063a0:	080063fd 	.word	0x080063fd
 80063a4:	08006415 	.word	0x08006415
 80063a8:	08006415 	.word	0x08006415
 80063ac:	08006415 	.word	0x08006415
 80063b0:	08006415 	.word	0x08006415
 80063b4:	08006415 	.word	0x08006415
 80063b8:	08006415 	.word	0x08006415
 80063bc:	08006415 	.word	0x08006415
 80063c0:	08006405 	.word	0x08006405
 80063c4:	08006415 	.word	0x08006415
 80063c8:	08006415 	.word	0x08006415
 80063cc:	08006415 	.word	0x08006415
 80063d0:	08006415 	.word	0x08006415
 80063d4:	08006415 	.word	0x08006415
 80063d8:	08006415 	.word	0x08006415
 80063dc:	08006415 	.word	0x08006415
 80063e0:	0800640d 	.word	0x0800640d
 80063e4:	2301      	movs	r3, #1
 80063e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ea:	e222      	b.n	8006832 <UART_SetConfig+0x5a2>
 80063ec:	2304      	movs	r3, #4
 80063ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063f2:	e21e      	b.n	8006832 <UART_SetConfig+0x5a2>
 80063f4:	2308      	movs	r3, #8
 80063f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063fa:	e21a      	b.n	8006832 <UART_SetConfig+0x5a2>
 80063fc:	2310      	movs	r3, #16
 80063fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006402:	e216      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006404:	2320      	movs	r3, #32
 8006406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800640a:	e212      	b.n	8006832 <UART_SetConfig+0x5a2>
 800640c:	2340      	movs	r3, #64	; 0x40
 800640e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006412:	e20e      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006414:	2380      	movs	r3, #128	; 0x80
 8006416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800641a:	e20a      	b.n	8006832 <UART_SetConfig+0x5a2>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a6b      	ldr	r2, [pc, #428]	; (80065d0 <UART_SetConfig+0x340>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d130      	bne.n	8006488 <UART_SetConfig+0x1f8>
 8006426:	4b69      	ldr	r3, [pc, #420]	; (80065cc <UART_SetConfig+0x33c>)
 8006428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642a:	f003 0307 	and.w	r3, r3, #7
 800642e:	2b05      	cmp	r3, #5
 8006430:	d826      	bhi.n	8006480 <UART_SetConfig+0x1f0>
 8006432:	a201      	add	r2, pc, #4	; (adr r2, 8006438 <UART_SetConfig+0x1a8>)
 8006434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006438:	08006451 	.word	0x08006451
 800643c:	08006459 	.word	0x08006459
 8006440:	08006461 	.word	0x08006461
 8006444:	08006469 	.word	0x08006469
 8006448:	08006471 	.word	0x08006471
 800644c:	08006479 	.word	0x08006479
 8006450:	2300      	movs	r3, #0
 8006452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006456:	e1ec      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006458:	2304      	movs	r3, #4
 800645a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800645e:	e1e8      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006460:	2308      	movs	r3, #8
 8006462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006466:	e1e4      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006468:	2310      	movs	r3, #16
 800646a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800646e:	e1e0      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006470:	2320      	movs	r3, #32
 8006472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006476:	e1dc      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006478:	2340      	movs	r3, #64	; 0x40
 800647a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800647e:	e1d8      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006480:	2380      	movs	r3, #128	; 0x80
 8006482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006486:	e1d4      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a51      	ldr	r2, [pc, #324]	; (80065d4 <UART_SetConfig+0x344>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d130      	bne.n	80064f4 <UART_SetConfig+0x264>
 8006492:	4b4e      	ldr	r3, [pc, #312]	; (80065cc <UART_SetConfig+0x33c>)
 8006494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	2b05      	cmp	r3, #5
 800649c:	d826      	bhi.n	80064ec <UART_SetConfig+0x25c>
 800649e:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <UART_SetConfig+0x214>)
 80064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a4:	080064bd 	.word	0x080064bd
 80064a8:	080064c5 	.word	0x080064c5
 80064ac:	080064cd 	.word	0x080064cd
 80064b0:	080064d5 	.word	0x080064d5
 80064b4:	080064dd 	.word	0x080064dd
 80064b8:	080064e5 	.word	0x080064e5
 80064bc:	2300      	movs	r3, #0
 80064be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064c2:	e1b6      	b.n	8006832 <UART_SetConfig+0x5a2>
 80064c4:	2304      	movs	r3, #4
 80064c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ca:	e1b2      	b.n	8006832 <UART_SetConfig+0x5a2>
 80064cc:	2308      	movs	r3, #8
 80064ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064d2:	e1ae      	b.n	8006832 <UART_SetConfig+0x5a2>
 80064d4:	2310      	movs	r3, #16
 80064d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064da:	e1aa      	b.n	8006832 <UART_SetConfig+0x5a2>
 80064dc:	2320      	movs	r3, #32
 80064de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064e2:	e1a6      	b.n	8006832 <UART_SetConfig+0x5a2>
 80064e4:	2340      	movs	r3, #64	; 0x40
 80064e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ea:	e1a2      	b.n	8006832 <UART_SetConfig+0x5a2>
 80064ec:	2380      	movs	r3, #128	; 0x80
 80064ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064f2:	e19e      	b.n	8006832 <UART_SetConfig+0x5a2>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a37      	ldr	r2, [pc, #220]	; (80065d8 <UART_SetConfig+0x348>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d130      	bne.n	8006560 <UART_SetConfig+0x2d0>
 80064fe:	4b33      	ldr	r3, [pc, #204]	; (80065cc <UART_SetConfig+0x33c>)
 8006500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006502:	f003 0307 	and.w	r3, r3, #7
 8006506:	2b05      	cmp	r3, #5
 8006508:	d826      	bhi.n	8006558 <UART_SetConfig+0x2c8>
 800650a:	a201      	add	r2, pc, #4	; (adr r2, 8006510 <UART_SetConfig+0x280>)
 800650c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006510:	08006529 	.word	0x08006529
 8006514:	08006531 	.word	0x08006531
 8006518:	08006539 	.word	0x08006539
 800651c:	08006541 	.word	0x08006541
 8006520:	08006549 	.word	0x08006549
 8006524:	08006551 	.word	0x08006551
 8006528:	2300      	movs	r3, #0
 800652a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800652e:	e180      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006530:	2304      	movs	r3, #4
 8006532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006536:	e17c      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006538:	2308      	movs	r3, #8
 800653a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800653e:	e178      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006540:	2310      	movs	r3, #16
 8006542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006546:	e174      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006548:	2320      	movs	r3, #32
 800654a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800654e:	e170      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006550:	2340      	movs	r3, #64	; 0x40
 8006552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006556:	e16c      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006558:	2380      	movs	r3, #128	; 0x80
 800655a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800655e:	e168      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a1d      	ldr	r2, [pc, #116]	; (80065dc <UART_SetConfig+0x34c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d142      	bne.n	80065f0 <UART_SetConfig+0x360>
 800656a:	4b18      	ldr	r3, [pc, #96]	; (80065cc <UART_SetConfig+0x33c>)
 800656c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	2b05      	cmp	r3, #5
 8006574:	d838      	bhi.n	80065e8 <UART_SetConfig+0x358>
 8006576:	a201      	add	r2, pc, #4	; (adr r2, 800657c <UART_SetConfig+0x2ec>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	08006595 	.word	0x08006595
 8006580:	0800659d 	.word	0x0800659d
 8006584:	080065a5 	.word	0x080065a5
 8006588:	080065ad 	.word	0x080065ad
 800658c:	080065b5 	.word	0x080065b5
 8006590:	080065e1 	.word	0x080065e1
 8006594:	2300      	movs	r3, #0
 8006596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800659a:	e14a      	b.n	8006832 <UART_SetConfig+0x5a2>
 800659c:	2304      	movs	r3, #4
 800659e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065a2:	e146      	b.n	8006832 <UART_SetConfig+0x5a2>
 80065a4:	2308      	movs	r3, #8
 80065a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065aa:	e142      	b.n	8006832 <UART_SetConfig+0x5a2>
 80065ac:	2310      	movs	r3, #16
 80065ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065b2:	e13e      	b.n	8006832 <UART_SetConfig+0x5a2>
 80065b4:	2320      	movs	r3, #32
 80065b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ba:	e13a      	b.n	8006832 <UART_SetConfig+0x5a2>
 80065bc:	cfff69f3 	.word	0xcfff69f3
 80065c0:	58000c00 	.word	0x58000c00
 80065c4:	11fff4ff 	.word	0x11fff4ff
 80065c8:	40011000 	.word	0x40011000
 80065cc:	58024400 	.word	0x58024400
 80065d0:	40004400 	.word	0x40004400
 80065d4:	40004800 	.word	0x40004800
 80065d8:	40004c00 	.word	0x40004c00
 80065dc:	40005000 	.word	0x40005000
 80065e0:	2340      	movs	r3, #64	; 0x40
 80065e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065e6:	e124      	b.n	8006832 <UART_SetConfig+0x5a2>
 80065e8:	2380      	movs	r3, #128	; 0x80
 80065ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ee:	e120      	b.n	8006832 <UART_SetConfig+0x5a2>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4acc      	ldr	r2, [pc, #816]	; (8006928 <UART_SetConfig+0x698>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d176      	bne.n	80066e8 <UART_SetConfig+0x458>
 80065fa:	4bcc      	ldr	r3, [pc, #816]	; (800692c <UART_SetConfig+0x69c>)
 80065fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006602:	2b28      	cmp	r3, #40	; 0x28
 8006604:	d86c      	bhi.n	80066e0 <UART_SetConfig+0x450>
 8006606:	a201      	add	r2, pc, #4	; (adr r2, 800660c <UART_SetConfig+0x37c>)
 8006608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660c:	080066b1 	.word	0x080066b1
 8006610:	080066e1 	.word	0x080066e1
 8006614:	080066e1 	.word	0x080066e1
 8006618:	080066e1 	.word	0x080066e1
 800661c:	080066e1 	.word	0x080066e1
 8006620:	080066e1 	.word	0x080066e1
 8006624:	080066e1 	.word	0x080066e1
 8006628:	080066e1 	.word	0x080066e1
 800662c:	080066b9 	.word	0x080066b9
 8006630:	080066e1 	.word	0x080066e1
 8006634:	080066e1 	.word	0x080066e1
 8006638:	080066e1 	.word	0x080066e1
 800663c:	080066e1 	.word	0x080066e1
 8006640:	080066e1 	.word	0x080066e1
 8006644:	080066e1 	.word	0x080066e1
 8006648:	080066e1 	.word	0x080066e1
 800664c:	080066c1 	.word	0x080066c1
 8006650:	080066e1 	.word	0x080066e1
 8006654:	080066e1 	.word	0x080066e1
 8006658:	080066e1 	.word	0x080066e1
 800665c:	080066e1 	.word	0x080066e1
 8006660:	080066e1 	.word	0x080066e1
 8006664:	080066e1 	.word	0x080066e1
 8006668:	080066e1 	.word	0x080066e1
 800666c:	080066c9 	.word	0x080066c9
 8006670:	080066e1 	.word	0x080066e1
 8006674:	080066e1 	.word	0x080066e1
 8006678:	080066e1 	.word	0x080066e1
 800667c:	080066e1 	.word	0x080066e1
 8006680:	080066e1 	.word	0x080066e1
 8006684:	080066e1 	.word	0x080066e1
 8006688:	080066e1 	.word	0x080066e1
 800668c:	080066d1 	.word	0x080066d1
 8006690:	080066e1 	.word	0x080066e1
 8006694:	080066e1 	.word	0x080066e1
 8006698:	080066e1 	.word	0x080066e1
 800669c:	080066e1 	.word	0x080066e1
 80066a0:	080066e1 	.word	0x080066e1
 80066a4:	080066e1 	.word	0x080066e1
 80066a8:	080066e1 	.word	0x080066e1
 80066ac:	080066d9 	.word	0x080066d9
 80066b0:	2301      	movs	r3, #1
 80066b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066b6:	e0bc      	b.n	8006832 <UART_SetConfig+0x5a2>
 80066b8:	2304      	movs	r3, #4
 80066ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066be:	e0b8      	b.n	8006832 <UART_SetConfig+0x5a2>
 80066c0:	2308      	movs	r3, #8
 80066c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066c6:	e0b4      	b.n	8006832 <UART_SetConfig+0x5a2>
 80066c8:	2310      	movs	r3, #16
 80066ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ce:	e0b0      	b.n	8006832 <UART_SetConfig+0x5a2>
 80066d0:	2320      	movs	r3, #32
 80066d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066d6:	e0ac      	b.n	8006832 <UART_SetConfig+0x5a2>
 80066d8:	2340      	movs	r3, #64	; 0x40
 80066da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066de:	e0a8      	b.n	8006832 <UART_SetConfig+0x5a2>
 80066e0:	2380      	movs	r3, #128	; 0x80
 80066e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066e6:	e0a4      	b.n	8006832 <UART_SetConfig+0x5a2>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a90      	ldr	r2, [pc, #576]	; (8006930 <UART_SetConfig+0x6a0>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d130      	bne.n	8006754 <UART_SetConfig+0x4c4>
 80066f2:	4b8e      	ldr	r3, [pc, #568]	; (800692c <UART_SetConfig+0x69c>)
 80066f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	2b05      	cmp	r3, #5
 80066fc:	d826      	bhi.n	800674c <UART_SetConfig+0x4bc>
 80066fe:	a201      	add	r2, pc, #4	; (adr r2, 8006704 <UART_SetConfig+0x474>)
 8006700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006704:	0800671d 	.word	0x0800671d
 8006708:	08006725 	.word	0x08006725
 800670c:	0800672d 	.word	0x0800672d
 8006710:	08006735 	.word	0x08006735
 8006714:	0800673d 	.word	0x0800673d
 8006718:	08006745 	.word	0x08006745
 800671c:	2300      	movs	r3, #0
 800671e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006722:	e086      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006724:	2304      	movs	r3, #4
 8006726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800672a:	e082      	b.n	8006832 <UART_SetConfig+0x5a2>
 800672c:	2308      	movs	r3, #8
 800672e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006732:	e07e      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006734:	2310      	movs	r3, #16
 8006736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800673a:	e07a      	b.n	8006832 <UART_SetConfig+0x5a2>
 800673c:	2320      	movs	r3, #32
 800673e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006742:	e076      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006744:	2340      	movs	r3, #64	; 0x40
 8006746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800674a:	e072      	b.n	8006832 <UART_SetConfig+0x5a2>
 800674c:	2380      	movs	r3, #128	; 0x80
 800674e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006752:	e06e      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a76      	ldr	r2, [pc, #472]	; (8006934 <UART_SetConfig+0x6a4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d130      	bne.n	80067c0 <UART_SetConfig+0x530>
 800675e:	4b73      	ldr	r3, [pc, #460]	; (800692c <UART_SetConfig+0x69c>)
 8006760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006762:	f003 0307 	and.w	r3, r3, #7
 8006766:	2b05      	cmp	r3, #5
 8006768:	d826      	bhi.n	80067b8 <UART_SetConfig+0x528>
 800676a:	a201      	add	r2, pc, #4	; (adr r2, 8006770 <UART_SetConfig+0x4e0>)
 800676c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006770:	08006789 	.word	0x08006789
 8006774:	08006791 	.word	0x08006791
 8006778:	08006799 	.word	0x08006799
 800677c:	080067a1 	.word	0x080067a1
 8006780:	080067a9 	.word	0x080067a9
 8006784:	080067b1 	.word	0x080067b1
 8006788:	2300      	movs	r3, #0
 800678a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800678e:	e050      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006790:	2304      	movs	r3, #4
 8006792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006796:	e04c      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006798:	2308      	movs	r3, #8
 800679a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800679e:	e048      	b.n	8006832 <UART_SetConfig+0x5a2>
 80067a0:	2310      	movs	r3, #16
 80067a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067a6:	e044      	b.n	8006832 <UART_SetConfig+0x5a2>
 80067a8:	2320      	movs	r3, #32
 80067aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ae:	e040      	b.n	8006832 <UART_SetConfig+0x5a2>
 80067b0:	2340      	movs	r3, #64	; 0x40
 80067b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067b6:	e03c      	b.n	8006832 <UART_SetConfig+0x5a2>
 80067b8:	2380      	movs	r3, #128	; 0x80
 80067ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067be:	e038      	b.n	8006832 <UART_SetConfig+0x5a2>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a5c      	ldr	r2, [pc, #368]	; (8006938 <UART_SetConfig+0x6a8>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d130      	bne.n	800682c <UART_SetConfig+0x59c>
 80067ca:	4b58      	ldr	r3, [pc, #352]	; (800692c <UART_SetConfig+0x69c>)
 80067cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ce:	f003 0307 	and.w	r3, r3, #7
 80067d2:	2b05      	cmp	r3, #5
 80067d4:	d826      	bhi.n	8006824 <UART_SetConfig+0x594>
 80067d6:	a201      	add	r2, pc, #4	; (adr r2, 80067dc <UART_SetConfig+0x54c>)
 80067d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067dc:	080067f5 	.word	0x080067f5
 80067e0:	080067fd 	.word	0x080067fd
 80067e4:	08006805 	.word	0x08006805
 80067e8:	0800680d 	.word	0x0800680d
 80067ec:	08006815 	.word	0x08006815
 80067f0:	0800681d 	.word	0x0800681d
 80067f4:	2302      	movs	r3, #2
 80067f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067fa:	e01a      	b.n	8006832 <UART_SetConfig+0x5a2>
 80067fc:	2304      	movs	r3, #4
 80067fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006802:	e016      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006804:	2308      	movs	r3, #8
 8006806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800680a:	e012      	b.n	8006832 <UART_SetConfig+0x5a2>
 800680c:	2310      	movs	r3, #16
 800680e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006812:	e00e      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006814:	2320      	movs	r3, #32
 8006816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800681a:	e00a      	b.n	8006832 <UART_SetConfig+0x5a2>
 800681c:	2340      	movs	r3, #64	; 0x40
 800681e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006822:	e006      	b.n	8006832 <UART_SetConfig+0x5a2>
 8006824:	2380      	movs	r3, #128	; 0x80
 8006826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800682a:	e002      	b.n	8006832 <UART_SetConfig+0x5a2>
 800682c:	2380      	movs	r3, #128	; 0x80
 800682e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a40      	ldr	r2, [pc, #256]	; (8006938 <UART_SetConfig+0x6a8>)
 8006838:	4293      	cmp	r3, r2
 800683a:	f040 80ef 	bne.w	8006a1c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800683e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006842:	2b20      	cmp	r3, #32
 8006844:	dc46      	bgt.n	80068d4 <UART_SetConfig+0x644>
 8006846:	2b02      	cmp	r3, #2
 8006848:	f2c0 8081 	blt.w	800694e <UART_SetConfig+0x6be>
 800684c:	3b02      	subs	r3, #2
 800684e:	2b1e      	cmp	r3, #30
 8006850:	d87d      	bhi.n	800694e <UART_SetConfig+0x6be>
 8006852:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <UART_SetConfig+0x5c8>)
 8006854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006858:	080068db 	.word	0x080068db
 800685c:	0800694f 	.word	0x0800694f
 8006860:	080068e3 	.word	0x080068e3
 8006864:	0800694f 	.word	0x0800694f
 8006868:	0800694f 	.word	0x0800694f
 800686c:	0800694f 	.word	0x0800694f
 8006870:	080068f3 	.word	0x080068f3
 8006874:	0800694f 	.word	0x0800694f
 8006878:	0800694f 	.word	0x0800694f
 800687c:	0800694f 	.word	0x0800694f
 8006880:	0800694f 	.word	0x0800694f
 8006884:	0800694f 	.word	0x0800694f
 8006888:	0800694f 	.word	0x0800694f
 800688c:	0800694f 	.word	0x0800694f
 8006890:	08006903 	.word	0x08006903
 8006894:	0800694f 	.word	0x0800694f
 8006898:	0800694f 	.word	0x0800694f
 800689c:	0800694f 	.word	0x0800694f
 80068a0:	0800694f 	.word	0x0800694f
 80068a4:	0800694f 	.word	0x0800694f
 80068a8:	0800694f 	.word	0x0800694f
 80068ac:	0800694f 	.word	0x0800694f
 80068b0:	0800694f 	.word	0x0800694f
 80068b4:	0800694f 	.word	0x0800694f
 80068b8:	0800694f 	.word	0x0800694f
 80068bc:	0800694f 	.word	0x0800694f
 80068c0:	0800694f 	.word	0x0800694f
 80068c4:	0800694f 	.word	0x0800694f
 80068c8:	0800694f 	.word	0x0800694f
 80068cc:	0800694f 	.word	0x0800694f
 80068d0:	08006941 	.word	0x08006941
 80068d4:	2b40      	cmp	r3, #64	; 0x40
 80068d6:	d036      	beq.n	8006946 <UART_SetConfig+0x6b6>
 80068d8:	e039      	b.n	800694e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80068da:	f7fd fdeb 	bl	80044b4 <HAL_RCCEx_GetD3PCLK1Freq>
 80068de:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80068e0:	e03b      	b.n	800695a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068e2:	f107 0314 	add.w	r3, r7, #20
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fd fdfa 	bl	80044e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068f0:	e033      	b.n	800695a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068f2:	f107 0308 	add.w	r3, r7, #8
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fd ff46 	bl	8004788 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006900:	e02b      	b.n	800695a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006902:	4b0a      	ldr	r3, [pc, #40]	; (800692c <UART_SetConfig+0x69c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b00      	cmp	r3, #0
 800690c:	d009      	beq.n	8006922 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800690e:	4b07      	ldr	r3, [pc, #28]	; (800692c <UART_SetConfig+0x69c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	08db      	lsrs	r3, r3, #3
 8006914:	f003 0303 	and.w	r3, r3, #3
 8006918:	4a08      	ldr	r2, [pc, #32]	; (800693c <UART_SetConfig+0x6ac>)
 800691a:	fa22 f303 	lsr.w	r3, r2, r3
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006920:	e01b      	b.n	800695a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8006922:	4b06      	ldr	r3, [pc, #24]	; (800693c <UART_SetConfig+0x6ac>)
 8006924:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006926:	e018      	b.n	800695a <UART_SetConfig+0x6ca>
 8006928:	40011400 	.word	0x40011400
 800692c:	58024400 	.word	0x58024400
 8006930:	40007800 	.word	0x40007800
 8006934:	40007c00 	.word	0x40007c00
 8006938:	58000c00 	.word	0x58000c00
 800693c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006940:	4bc4      	ldr	r3, [pc, #784]	; (8006c54 <UART_SetConfig+0x9c4>)
 8006942:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006944:	e009      	b.n	800695a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800694a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800694c:	e005      	b.n	800695a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006958:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 81da 	beq.w	8006d16 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	4abc      	ldr	r2, [pc, #752]	; (8006c58 <UART_SetConfig+0x9c8>)
 8006968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800696c:	461a      	mov	r2, r3
 800696e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006970:	fbb3 f3f2 	udiv	r3, r3, r2
 8006974:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	4613      	mov	r3, r2
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	4413      	add	r3, r2
 8006980:	6a3a      	ldr	r2, [r7, #32]
 8006982:	429a      	cmp	r2, r3
 8006984:	d305      	bcc.n	8006992 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800698c:	6a3a      	ldr	r2, [r7, #32]
 800698e:	429a      	cmp	r2, r3
 8006990:	d903      	bls.n	800699a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006998:	e1bd      	b.n	8006d16 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800699a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699c:	4618      	mov	r0, r3
 800699e:	f04f 0100 	mov.w	r1, #0
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	4aac      	ldr	r2, [pc, #688]	; (8006c58 <UART_SetConfig+0x9c8>)
 80069a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	f04f 0300 	mov.w	r3, #0
 80069b2:	f7f9 fc91 	bl	80002d8 <__aeabi_uldivmod>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	4610      	mov	r0, r2
 80069bc:	4619      	mov	r1, r3
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	f04f 0300 	mov.w	r3, #0
 80069c6:	020b      	lsls	r3, r1, #8
 80069c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069cc:	0202      	lsls	r2, r0, #8
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	6849      	ldr	r1, [r1, #4]
 80069d2:	0849      	lsrs	r1, r1, #1
 80069d4:	4608      	mov	r0, r1
 80069d6:	f04f 0100 	mov.w	r1, #0
 80069da:	1814      	adds	r4, r2, r0
 80069dc:	eb43 0501 	adc.w	r5, r3, r1
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	461a      	mov	r2, r3
 80069e6:	f04f 0300 	mov.w	r3, #0
 80069ea:	4620      	mov	r0, r4
 80069ec:	4629      	mov	r1, r5
 80069ee:	f7f9 fc73 	bl	80002d8 <__aeabi_uldivmod>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4613      	mov	r3, r2
 80069f8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a00:	d308      	bcc.n	8006a14 <UART_SetConfig+0x784>
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a08:	d204      	bcs.n	8006a14 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a10:	60da      	str	r2, [r3, #12]
 8006a12:	e180      	b.n	8006d16 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006a1a:	e17c      	b.n	8006d16 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a24:	f040 80be 	bne.w	8006ba4 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8006a28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	dc49      	bgt.n	8006ac4 <UART_SetConfig+0x834>
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	db7c      	blt.n	8006b2e <UART_SetConfig+0x89e>
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d87a      	bhi.n	8006b2e <UART_SetConfig+0x89e>
 8006a38:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <UART_SetConfig+0x7b0>)
 8006a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3e:	bf00      	nop
 8006a40:	08006acb 	.word	0x08006acb
 8006a44:	08006ad3 	.word	0x08006ad3
 8006a48:	08006b2f 	.word	0x08006b2f
 8006a4c:	08006b2f 	.word	0x08006b2f
 8006a50:	08006adb 	.word	0x08006adb
 8006a54:	08006b2f 	.word	0x08006b2f
 8006a58:	08006b2f 	.word	0x08006b2f
 8006a5c:	08006b2f 	.word	0x08006b2f
 8006a60:	08006aeb 	.word	0x08006aeb
 8006a64:	08006b2f 	.word	0x08006b2f
 8006a68:	08006b2f 	.word	0x08006b2f
 8006a6c:	08006b2f 	.word	0x08006b2f
 8006a70:	08006b2f 	.word	0x08006b2f
 8006a74:	08006b2f 	.word	0x08006b2f
 8006a78:	08006b2f 	.word	0x08006b2f
 8006a7c:	08006b2f 	.word	0x08006b2f
 8006a80:	08006afb 	.word	0x08006afb
 8006a84:	08006b2f 	.word	0x08006b2f
 8006a88:	08006b2f 	.word	0x08006b2f
 8006a8c:	08006b2f 	.word	0x08006b2f
 8006a90:	08006b2f 	.word	0x08006b2f
 8006a94:	08006b2f 	.word	0x08006b2f
 8006a98:	08006b2f 	.word	0x08006b2f
 8006a9c:	08006b2f 	.word	0x08006b2f
 8006aa0:	08006b2f 	.word	0x08006b2f
 8006aa4:	08006b2f 	.word	0x08006b2f
 8006aa8:	08006b2f 	.word	0x08006b2f
 8006aac:	08006b2f 	.word	0x08006b2f
 8006ab0:	08006b2f 	.word	0x08006b2f
 8006ab4:	08006b2f 	.word	0x08006b2f
 8006ab8:	08006b2f 	.word	0x08006b2f
 8006abc:	08006b2f 	.word	0x08006b2f
 8006ac0:	08006b21 	.word	0x08006b21
 8006ac4:	2b40      	cmp	r3, #64	; 0x40
 8006ac6:	d02e      	beq.n	8006b26 <UART_SetConfig+0x896>
 8006ac8:	e031      	b.n	8006b2e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aca:	f7fc fd87 	bl	80035dc <HAL_RCC_GetPCLK1Freq>
 8006ace:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006ad0:	e033      	b.n	8006b3a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ad2:	f7fc fd99 	bl	8003608 <HAL_RCC_GetPCLK2Freq>
 8006ad6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006ad8:	e02f      	b.n	8006b3a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ada:	f107 0314 	add.w	r3, r7, #20
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fd fcfe 	bl	80044e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ae8:	e027      	b.n	8006b3a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aea:	f107 0308 	add.w	r3, r7, #8
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fd fe4a 	bl	8004788 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006af8:	e01f      	b.n	8006b3a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006afa:	4b58      	ldr	r3, [pc, #352]	; (8006c5c <UART_SetConfig+0x9cc>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0320 	and.w	r3, r3, #32
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d009      	beq.n	8006b1a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b06:	4b55      	ldr	r3, [pc, #340]	; (8006c5c <UART_SetConfig+0x9cc>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	08db      	lsrs	r3, r3, #3
 8006b0c:	f003 0303 	and.w	r3, r3, #3
 8006b10:	4a53      	ldr	r2, [pc, #332]	; (8006c60 <UART_SetConfig+0x9d0>)
 8006b12:	fa22 f303 	lsr.w	r3, r2, r3
 8006b16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b18:	e00f      	b.n	8006b3a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006b1a:	4b51      	ldr	r3, [pc, #324]	; (8006c60 <UART_SetConfig+0x9d0>)
 8006b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b1e:	e00c      	b.n	8006b3a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b20:	4b4c      	ldr	r3, [pc, #304]	; (8006c54 <UART_SetConfig+0x9c4>)
 8006b22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b24:	e009      	b.n	8006b3a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b2c:	e005      	b.n	8006b3a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006b38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 80ea 	beq.w	8006d16 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	4a44      	ldr	r2, [pc, #272]	; (8006c58 <UART_SetConfig+0x9c8>)
 8006b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b54:	005a      	lsls	r2, r3, #1
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	085b      	lsrs	r3, r3, #1
 8006b5c:	441a      	add	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b66:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6a:	2b0f      	cmp	r3, #15
 8006b6c:	d916      	bls.n	8006b9c <UART_SetConfig+0x90c>
 8006b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b74:	d212      	bcs.n	8006b9c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	f023 030f 	bic.w	r3, r3, #15
 8006b7e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	085b      	lsrs	r3, r3, #1
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b98:	60da      	str	r2, [r3, #12]
 8006b9a:	e0bc      	b.n	8006d16 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006ba2:	e0b8      	b.n	8006d16 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	dc4b      	bgt.n	8006c44 <UART_SetConfig+0x9b4>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f2c0 8087 	blt.w	8006cc0 <UART_SetConfig+0xa30>
 8006bb2:	2b20      	cmp	r3, #32
 8006bb4:	f200 8084 	bhi.w	8006cc0 <UART_SetConfig+0xa30>
 8006bb8:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <UART_SetConfig+0x930>)
 8006bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbe:	bf00      	nop
 8006bc0:	08006c4b 	.word	0x08006c4b
 8006bc4:	08006c65 	.word	0x08006c65
 8006bc8:	08006cc1 	.word	0x08006cc1
 8006bcc:	08006cc1 	.word	0x08006cc1
 8006bd0:	08006c6d 	.word	0x08006c6d
 8006bd4:	08006cc1 	.word	0x08006cc1
 8006bd8:	08006cc1 	.word	0x08006cc1
 8006bdc:	08006cc1 	.word	0x08006cc1
 8006be0:	08006c7d 	.word	0x08006c7d
 8006be4:	08006cc1 	.word	0x08006cc1
 8006be8:	08006cc1 	.word	0x08006cc1
 8006bec:	08006cc1 	.word	0x08006cc1
 8006bf0:	08006cc1 	.word	0x08006cc1
 8006bf4:	08006cc1 	.word	0x08006cc1
 8006bf8:	08006cc1 	.word	0x08006cc1
 8006bfc:	08006cc1 	.word	0x08006cc1
 8006c00:	08006c8d 	.word	0x08006c8d
 8006c04:	08006cc1 	.word	0x08006cc1
 8006c08:	08006cc1 	.word	0x08006cc1
 8006c0c:	08006cc1 	.word	0x08006cc1
 8006c10:	08006cc1 	.word	0x08006cc1
 8006c14:	08006cc1 	.word	0x08006cc1
 8006c18:	08006cc1 	.word	0x08006cc1
 8006c1c:	08006cc1 	.word	0x08006cc1
 8006c20:	08006cc1 	.word	0x08006cc1
 8006c24:	08006cc1 	.word	0x08006cc1
 8006c28:	08006cc1 	.word	0x08006cc1
 8006c2c:	08006cc1 	.word	0x08006cc1
 8006c30:	08006cc1 	.word	0x08006cc1
 8006c34:	08006cc1 	.word	0x08006cc1
 8006c38:	08006cc1 	.word	0x08006cc1
 8006c3c:	08006cc1 	.word	0x08006cc1
 8006c40:	08006cb3 	.word	0x08006cb3
 8006c44:	2b40      	cmp	r3, #64	; 0x40
 8006c46:	d037      	beq.n	8006cb8 <UART_SetConfig+0xa28>
 8006c48:	e03a      	b.n	8006cc0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c4a:	f7fc fcc7 	bl	80035dc <HAL_RCC_GetPCLK1Freq>
 8006c4e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006c50:	e03c      	b.n	8006ccc <UART_SetConfig+0xa3c>
 8006c52:	bf00      	nop
 8006c54:	003d0900 	.word	0x003d0900
 8006c58:	08007340 	.word	0x08007340
 8006c5c:	58024400 	.word	0x58024400
 8006c60:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c64:	f7fc fcd0 	bl	8003608 <HAL_RCC_GetPCLK2Freq>
 8006c68:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006c6a:	e02f      	b.n	8006ccc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c6c:	f107 0314 	add.w	r3, r7, #20
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fd fc35 	bl	80044e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c7a:	e027      	b.n	8006ccc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c7c:	f107 0308 	add.w	r3, r7, #8
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fd fd81 	bl	8004788 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c8a:	e01f      	b.n	8006ccc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c8c:	4b2c      	ldr	r3, [pc, #176]	; (8006d40 <UART_SetConfig+0xab0>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0320 	and.w	r3, r3, #32
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d009      	beq.n	8006cac <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c98:	4b29      	ldr	r3, [pc, #164]	; (8006d40 <UART_SetConfig+0xab0>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	08db      	lsrs	r3, r3, #3
 8006c9e:	f003 0303 	and.w	r3, r3, #3
 8006ca2:	4a28      	ldr	r2, [pc, #160]	; (8006d44 <UART_SetConfig+0xab4>)
 8006ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006caa:	e00f      	b.n	8006ccc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006cac:	4b25      	ldr	r3, [pc, #148]	; (8006d44 <UART_SetConfig+0xab4>)
 8006cae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cb0:	e00c      	b.n	8006ccc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cb2:	4b25      	ldr	r3, [pc, #148]	; (8006d48 <UART_SetConfig+0xab8>)
 8006cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cb6:	e009      	b.n	8006ccc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cbe:	e005      	b.n	8006ccc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006cca:	bf00      	nop
    }

    if (pclk != 0U)
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d021      	beq.n	8006d16 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	4a1d      	ldr	r2, [pc, #116]	; (8006d4c <UART_SetConfig+0xabc>)
 8006cd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce0:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	085b      	lsrs	r3, r3, #1
 8006cea:	441a      	add	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf8:	2b0f      	cmp	r3, #15
 8006cfa:	d909      	bls.n	8006d10 <UART_SetConfig+0xa80>
 8006cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d02:	d205      	bcs.n	8006d10 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	60da      	str	r2, [r3, #12]
 8006d0e:	e002      	b.n	8006d16 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006d32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3738      	adds	r7, #56	; 0x38
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	58024400 	.word	0x58024400
 8006d44:	03d09000 	.word	0x03d09000
 8006d48:	003d0900 	.word	0x003d0900
 8006d4c:	08007340 	.word	0x08007340

08006d50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00a      	beq.n	8006d7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00a      	beq.n	8006d9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00a      	beq.n	8006dbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00a      	beq.n	8006de0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de4:	f003 0310 	and.w	r3, r3, #16
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00a      	beq.n	8006e02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	430a      	orrs	r2, r1
 8006e22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d01a      	beq.n	8006e66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e4e:	d10a      	bne.n	8006e66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	605a      	str	r2, [r3, #4]
  }
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af02      	add	r7, sp, #8
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ea4:	f7fb f910 	bl	80020c8 <HAL_GetTick>
 8006ea8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0308 	and.w	r3, r3, #8
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d10e      	bne.n	8006ed6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f82f 	bl	8006f2a <UART_WaitOnFlagUntilTimeout>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e025      	b.n	8006f22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	2b04      	cmp	r3, #4
 8006ee2:	d10e      	bne.n	8006f02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ee4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f819 	bl	8006f2a <UART_WaitOnFlagUntilTimeout>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e00f      	b.n	8006f22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b09c      	sub	sp, #112	; 0x70
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	603b      	str	r3, [r7, #0]
 8006f36:	4613      	mov	r3, r2
 8006f38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f3a:	e0a9      	b.n	8007090 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f42:	f000 80a5 	beq.w	8007090 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f46:	f7fb f8bf 	bl	80020c8 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d302      	bcc.n	8006f5c <UART_WaitOnFlagUntilTimeout+0x32>
 8006f56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d140      	bne.n	8006fde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f70:	667b      	str	r3, [r7, #100]	; 0x64
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f82:	e841 2300 	strex	r3, r2, [r1]
 8006f86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1e6      	bne.n	8006f5c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3308      	adds	r3, #8
 8006f94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f98:	e853 3f00 	ldrex	r3, [r3]
 8006f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	f023 0301 	bic.w	r3, r3, #1
 8006fa4:	663b      	str	r3, [r7, #96]	; 0x60
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3308      	adds	r3, #8
 8006fac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fae:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e5      	bne.n	8006f8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e069      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d051      	beq.n	8007090 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ffa:	d149      	bne.n	8007090 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007004:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800701a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007024:	637b      	str	r3, [r7, #52]	; 0x34
 8007026:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800702a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e6      	bne.n	8007006 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3308      	adds	r3, #8
 800703e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	613b      	str	r3, [r7, #16]
   return(result);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	f023 0301 	bic.w	r3, r3, #1
 800704e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3308      	adds	r3, #8
 8007056:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007058:	623a      	str	r2, [r7, #32]
 800705a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705c:	69f9      	ldr	r1, [r7, #28]
 800705e:	6a3a      	ldr	r2, [r7, #32]
 8007060:	e841 2300 	strex	r3, r2, [r1]
 8007064:	61bb      	str	r3, [r7, #24]
   return(result);
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e5      	bne.n	8007038 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2220      	movs	r2, #32
 8007070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2220      	movs	r2, #32
 8007078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2220      	movs	r2, #32
 8007080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e010      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69da      	ldr	r2, [r3, #28]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	4013      	ands	r3, r2
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	429a      	cmp	r2, r3
 800709e:	bf0c      	ite	eq
 80070a0:	2301      	moveq	r3, #1
 80070a2:	2300      	movne	r3, #0
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	461a      	mov	r2, r3
 80070a8:	79fb      	ldrb	r3, [r7, #7]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	f43f af46 	beq.w	8006f3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3770      	adds	r7, #112	; 0x70
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b085      	sub	sp, #20
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d101      	bne.n	80070d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80070cc:	2302      	movs	r3, #2
 80070ce:	e027      	b.n	8007120 <HAL_UARTEx_DisableFifoMode+0x66>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2224      	movs	r2, #36	; 0x24
 80070dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0201 	bic.w	r2, r2, #1
 80070f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80070fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2220      	movs	r2, #32
 8007112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800713c:	2b01      	cmp	r3, #1
 800713e:	d101      	bne.n	8007144 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007140:	2302      	movs	r3, #2
 8007142:	e02d      	b.n	80071a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2224      	movs	r2, #36	; 0x24
 8007150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0201 	bic.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f84f 	bl	8007224 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2220      	movs	r2, #32
 8007192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d101      	bne.n	80071c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071bc:	2302      	movs	r3, #2
 80071be:	e02d      	b.n	800721c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2224      	movs	r2, #36	; 0x24
 80071cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0201 	bic.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f811 	bl	8007224 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2220      	movs	r2, #32
 800720e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007230:	2b00      	cmp	r3, #0
 8007232:	d108      	bne.n	8007246 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007244:	e031      	b.n	80072aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007246:	2310      	movs	r3, #16
 8007248:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800724a:	2310      	movs	r3, #16
 800724c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	0e5b      	lsrs	r3, r3, #25
 8007256:	b2db      	uxtb	r3, r3
 8007258:	f003 0307 	and.w	r3, r3, #7
 800725c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	0f5b      	lsrs	r3, r3, #29
 8007266:	b2db      	uxtb	r3, r3
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800726e:	7bbb      	ldrb	r3, [r7, #14]
 8007270:	7b3a      	ldrb	r2, [r7, #12]
 8007272:	4911      	ldr	r1, [pc, #68]	; (80072b8 <UARTEx_SetNbDataToProcess+0x94>)
 8007274:	5c8a      	ldrb	r2, [r1, r2]
 8007276:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800727a:	7b3a      	ldrb	r2, [r7, #12]
 800727c:	490f      	ldr	r1, [pc, #60]	; (80072bc <UARTEx_SetNbDataToProcess+0x98>)
 800727e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007280:	fb93 f3f2 	sdiv	r3, r3, r2
 8007284:	b29a      	uxth	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	7b7a      	ldrb	r2, [r7, #13]
 8007290:	4909      	ldr	r1, [pc, #36]	; (80072b8 <UARTEx_SetNbDataToProcess+0x94>)
 8007292:	5c8a      	ldrb	r2, [r1, r2]
 8007294:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007298:	7b7a      	ldrb	r2, [r7, #13]
 800729a:	4908      	ldr	r1, [pc, #32]	; (80072bc <UARTEx_SetNbDataToProcess+0x98>)
 800729c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800729e:	fb93 f3f2 	sdiv	r3, r3, r2
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80072aa:	bf00      	nop
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	08007358 	.word	0x08007358
 80072bc:	08007360 	.word	0x08007360

080072c0 <__libc_init_array>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	4d0d      	ldr	r5, [pc, #52]	; (80072f8 <__libc_init_array+0x38>)
 80072c4:	4c0d      	ldr	r4, [pc, #52]	; (80072fc <__libc_init_array+0x3c>)
 80072c6:	1b64      	subs	r4, r4, r5
 80072c8:	10a4      	asrs	r4, r4, #2
 80072ca:	2600      	movs	r6, #0
 80072cc:	42a6      	cmp	r6, r4
 80072ce:	d109      	bne.n	80072e4 <__libc_init_array+0x24>
 80072d0:	4d0b      	ldr	r5, [pc, #44]	; (8007300 <__libc_init_array+0x40>)
 80072d2:	4c0c      	ldr	r4, [pc, #48]	; (8007304 <__libc_init_array+0x44>)
 80072d4:	f000 f820 	bl	8007318 <_init>
 80072d8:	1b64      	subs	r4, r4, r5
 80072da:	10a4      	asrs	r4, r4, #2
 80072dc:	2600      	movs	r6, #0
 80072de:	42a6      	cmp	r6, r4
 80072e0:	d105      	bne.n	80072ee <__libc_init_array+0x2e>
 80072e2:	bd70      	pop	{r4, r5, r6, pc}
 80072e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e8:	4798      	blx	r3
 80072ea:	3601      	adds	r6, #1
 80072ec:	e7ee      	b.n	80072cc <__libc_init_array+0xc>
 80072ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80072f2:	4798      	blx	r3
 80072f4:	3601      	adds	r6, #1
 80072f6:	e7f2      	b.n	80072de <__libc_init_array+0x1e>
 80072f8:	08007370 	.word	0x08007370
 80072fc:	08007370 	.word	0x08007370
 8007300:	08007370 	.word	0x08007370
 8007304:	08007374 	.word	0x08007374

08007308 <memset>:
 8007308:	4402      	add	r2, r0
 800730a:	4603      	mov	r3, r0
 800730c:	4293      	cmp	r3, r2
 800730e:	d100      	bne.n	8007312 <memset+0xa>
 8007310:	4770      	bx	lr
 8007312:	f803 1b01 	strb.w	r1, [r3], #1
 8007316:	e7f9      	b.n	800730c <memset+0x4>

08007318 <_init>:
 8007318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731a:	bf00      	nop
 800731c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800731e:	bc08      	pop	{r3}
 8007320:	469e      	mov	lr, r3
 8007322:	4770      	bx	lr

08007324 <_fini>:
 8007324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007326:	bf00      	nop
 8007328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800732a:	bc08      	pop	{r3}
 800732c:	469e      	mov	lr, r3
 800732e:	4770      	bx	lr
