
erche.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c88  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006f20  08006f20  00016f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f58  08006f58  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006f58  08006f58  00016f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f60  08006f60  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f60  08006f60  00016f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f64  08006f64  00016f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  24000000  08006f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  24000024  08006f8c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400029c  08006f8c  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a27c  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002982  00000000  00000000  0003a2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  0003cc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  0003dbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035fb7  00000000  00000000  0003eaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a9b  00000000  00000000  00074a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015f030  00000000  00000000  000864fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e552a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004254  00000000  00000000  001e5580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000024 	.word	0x24000024
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006f08 	.word	0x08006f08

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000028 	.word	0x24000028
 80002d4:	08006f08 	.word	0x08006f08

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <move>:
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,25);
		HAL_Delay(700);*/
	}
}
void move(int n)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if(n==1)//直行
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	f040 80c0 	bne.w	8000760 <move+0x190>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 80005e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e4:	48a0      	ldr	r0, [pc, #640]	; (8000868 <move+0x298>)
 80005e6:	f001 fd91 	bl	800210c <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d127      	bne.n	8000640 <move+0x70>
 80005f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f4:	489c      	ldr	r0, [pc, #624]	; (8000868 <move+0x298>)
 80005f6:	f001 fd89 	bl	800210c <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d11f      	bne.n	8000640 <move+0x70>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,26);
 8000600:	4b9a      	ldr	r3, [pc, #616]	; (800086c <move+0x29c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	221a      	movs	r2, #26
 8000606:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000608:	4b98      	ldr	r3, [pc, #608]	; (800086c <move+0x29c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,24);
 8000610:	4b96      	ldr	r3, [pc, #600]	; (800086c <move+0x29c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2218      	movs	r2, #24
 8000616:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000618:	4b94      	ldr	r3, [pc, #592]	; (800086c <move+0x29c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2200      	movs	r2, #0
 800061e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,10);
 8000620:	4b93      	ldr	r3, [pc, #588]	; (8000870 <move+0x2a0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	220a      	movs	r2, #10
 8000626:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000628:	4b91      	ldr	r3, [pc, #580]	; (8000870 <move+0x2a0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,30);
 8000630:	4b8f      	ldr	r3, [pc, #572]	; (8000870 <move+0x2a0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	221e      	movs	r2, #30
 8000636:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000638:	4b8d      	ldr	r3, [pc, #564]	; (8000870 <move+0x2a0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2200      	movs	r2, #0
 800063e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000640:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000644:	4888      	ldr	r0, [pc, #544]	; (8000868 <move+0x298>)
 8000646:	f001 fd61 	bl	800210c <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d127      	bne.n	80006a0 <move+0xd0>
 8000650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000654:	4884      	ldr	r0, [pc, #528]	; (8000868 <move+0x298>)
 8000656:	f001 fd59 	bl	800210c <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d11f      	bne.n	80006a0 <move+0xd0>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,26);
 8000660:	4b82      	ldr	r3, [pc, #520]	; (800086c <move+0x29c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	221a      	movs	r2, #26
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000668:	4b80      	ldr	r3, [pc, #512]	; (800086c <move+0x29c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,24);
 8000670:	4b7e      	ldr	r3, [pc, #504]	; (800086c <move+0x29c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2218      	movs	r2, #24
 8000676:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000678:	4b7c      	ldr	r3, [pc, #496]	; (800086c <move+0x29c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2200      	movs	r2, #0
 800067e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,30);
 8000680:	4b7b      	ldr	r3, [pc, #492]	; (8000870 <move+0x2a0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	221e      	movs	r2, #30
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000688:	4b79      	ldr	r3, [pc, #484]	; (8000870 <move+0x2a0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,10);
 8000690:	4b77      	ldr	r3, [pc, #476]	; (8000870 <move+0x2a0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	220a      	movs	r2, #10
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000698:	4b75      	ldr	r3, [pc, #468]	; (8000870 <move+0x2a0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2200      	movs	r2, #0
 800069e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 80006a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a4:	4870      	ldr	r0, [pc, #448]	; (8000868 <move+0x298>)
 80006a6:	f001 fd31 	bl	800210c <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d127      	bne.n	8000700 <move+0x130>
 80006b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b4:	486c      	ldr	r0, [pc, #432]	; (8000868 <move+0x298>)
 80006b6:	f001 fd29 	bl	800210c <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d11f      	bne.n	8000700 <move+0x130>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,26);
 80006c0:	4b6a      	ldr	r3, [pc, #424]	; (800086c <move+0x29c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	221a      	movs	r2, #26
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80006c8:	4b68      	ldr	r3, [pc, #416]	; (800086c <move+0x29c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2200      	movs	r2, #0
 80006ce:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,24);
 80006d0:	4b66      	ldr	r3, [pc, #408]	; (800086c <move+0x29c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2218      	movs	r2, #24
 80006d6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80006d8:	4b64      	ldr	r3, [pc, #400]	; (800086c <move+0x29c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2200      	movs	r2, #0
 80006de:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,10);
 80006e0:	4b63      	ldr	r3, [pc, #396]	; (8000870 <move+0x2a0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	220a      	movs	r2, #10
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 80006e8:	4b61      	ldr	r3, [pc, #388]	; (8000870 <move+0x2a0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2200      	movs	r2, #0
 80006ee:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,10);
 80006f0:	4b5f      	ldr	r3, [pc, #380]	; (8000870 <move+0x2a0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	220a      	movs	r2, #10
 80006f6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 80006f8:	4b5d      	ldr	r3, [pc, #372]	; (8000870 <move+0x2a0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2200      	movs	r2, #0
 80006fe:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000700:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000704:	4858      	ldr	r0, [pc, #352]	; (8000868 <move+0x298>)
 8000706:	f001 fd01 	bl	800210c <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d127      	bne.n	8000760 <move+0x190>
 8000710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000714:	4854      	ldr	r0, [pc, #336]	; (8000868 <move+0x298>)
 8000716:	f001 fcf9 	bl	800210c <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d11f      	bne.n	8000760 <move+0x190>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 8000720:	4b52      	ldr	r3, [pc, #328]	; (800086c <move+0x29c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2264      	movs	r2, #100	; 0x64
 8000726:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 8000728:	4b50      	ldr	r3, [pc, #320]	; (800086c <move+0x29c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2264      	movs	r2, #100	; 0x64
 800072e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 8000730:	4b4e      	ldr	r3, [pc, #312]	; (800086c <move+0x29c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2264      	movs	r2, #100	; 0x64
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 8000738:	4b4c      	ldr	r3, [pc, #304]	; (800086c <move+0x29c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2264      	movs	r2, #100	; 0x64
 800073e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 8000740:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <move+0x2a0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2264      	movs	r2, #100	; 0x64
 8000746:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 8000748:	4b49      	ldr	r3, [pc, #292]	; (8000870 <move+0x2a0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2264      	movs	r2, #100	; 0x64
 800074e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 8000750:	4b47      	ldr	r3, [pc, #284]	; (8000870 <move+0x2a0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2264      	movs	r2, #100	; 0x64
 8000756:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 8000758:	4b45      	ldr	r3, [pc, #276]	; (8000870 <move+0x2a0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2264      	movs	r2, #100	; 0x64
 800075e:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	if(n==2)//右行
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b02      	cmp	r3, #2
 8000764:	f040 80c7 	bne.w	80008f6 <move+0x326>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1)
 8000768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076c:	4841      	ldr	r0, [pc, #260]	; (8000874 <move+0x2a4>)
 800076e:	f001 fccd 	bl	800210c <HAL_GPIO_ReadPin>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d126      	bne.n	80007c6 <move+0x1f6>
 8000778:	2120      	movs	r1, #32
 800077a:	483f      	ldr	r0, [pc, #252]	; (8000878 <move+0x2a8>)
 800077c:	f001 fcc6 	bl	800210c <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d11f      	bne.n	80007c6 <move+0x1f6>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,19);
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <move+0x29c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2213      	movs	r2, #19
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800078e:	4b37      	ldr	r3, [pc, #220]	; (800086c <move+0x29c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2200      	movs	r2, #0
 8000794:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000796:	4b35      	ldr	r3, [pc, #212]	; (800086c <move+0x29c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2200      	movs	r2, #0
 800079c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,22);
 800079e:	4b33      	ldr	r3, [pc, #204]	; (800086c <move+0x29c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2216      	movs	r2, #22
 80007a4:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 80007a6:	4b32      	ldr	r3, [pc, #200]	; (8000870 <move+0x2a0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2210      	movs	r2, #16
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 80007ae:	4b30      	ldr	r3, [pc, #192]	; (8000870 <move+0x2a0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2200      	movs	r2, #0
 80007b4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 80007b6:	4b2e      	ldr	r3, [pc, #184]	; (8000870 <move+0x2a0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2200      	movs	r2, #0
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,24);
 80007be:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <move+0x2a0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2218      	movs	r2, #24
 80007c4:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 80007c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ca:	482a      	ldr	r0, [pc, #168]	; (8000874 <move+0x2a4>)
 80007cc:	f001 fc9e 	bl	800210c <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d126      	bne.n	8000824 <move+0x254>
 80007d6:	2120      	movs	r1, #32
 80007d8:	4827      	ldr	r0, [pc, #156]	; (8000878 <move+0x2a8>)
 80007da:	f001 fc97 	bl	800210c <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d11f      	bne.n	8000824 <move+0x254>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,24);
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <move+0x29c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2218      	movs	r2, #24
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <move+0x29c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2200      	movs	r2, #0
 80007f2:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <move+0x29c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2200      	movs	r2, #0
 80007fa:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,21);
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <move+0x29c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2215      	movs	r2, #21
 8000802:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,18);
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <move+0x2a0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2212      	movs	r2, #18
 800080a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <move+0x2a0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2200      	movs	r2, #0
 8000812:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <move+0x2a0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2200      	movs	r2, #0
 800081a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,19);
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <move+0x2a0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2213      	movs	r2, #19
 8000822:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1)
 8000824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000828:	4812      	ldr	r0, [pc, #72]	; (8000874 <move+0x2a4>)
 800082a:	f001 fc6f 	bl	800210c <HAL_GPIO_ReadPin>
 800082e:	4603      	mov	r3, r0
 8000830:	2b01      	cmp	r3, #1
 8000832:	d131      	bne.n	8000898 <move+0x2c8>
 8000834:	2120      	movs	r1, #32
 8000836:	4810      	ldr	r0, [pc, #64]	; (8000878 <move+0x2a8>)
 8000838:	f001 fc68 	bl	800210c <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b01      	cmp	r3, #1
 8000840:	d12a      	bne.n	8000898 <move+0x2c8>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,19);
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <move+0x29c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2213      	movs	r2, #19
 8000848:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <move+0x29c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2200      	movs	r2, #0
 8000850:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <move+0x29c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2200      	movs	r2, #0
 8000858:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,20);
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <move+0x29c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2214      	movs	r2, #20
 8000860:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 8000862:	4b03      	ldr	r3, [pc, #12]	; (8000870 <move+0x2a0>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	e009      	b.n	800087c <move+0x2ac>
 8000868:	58020400 	.word	0x58020400
 800086c:	240001c0 	.word	0x240001c0
 8000870:	24000050 	.word	0x24000050
 8000874:	58020800 	.word	0x58020800
 8000878:	58021000 	.word	0x58021000
 800087c:	2210      	movs	r2, #16
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000880:	4b53      	ldr	r3, [pc, #332]	; (80009d0 <move+0x400>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2200      	movs	r2, #0
 8000886:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 8000888:	4b51      	ldr	r3, [pc, #324]	; (80009d0 <move+0x400>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,19);
 8000890:	4b4f      	ldr	r3, [pc, #316]	; (80009d0 <move+0x400>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2213      	movs	r2, #19
 8000896:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	484d      	ldr	r0, [pc, #308]	; (80009d4 <move+0x404>)
 800089e:	f001 fc35 	bl	800210c <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d126      	bne.n	80008f6 <move+0x326>
 80008a8:	2120      	movs	r1, #32
 80008aa:	484b      	ldr	r0, [pc, #300]	; (80009d8 <move+0x408>)
 80008ac:	f001 fc2e 	bl	800210c <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d11f      	bne.n	80008f6 <move+0x326>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 80008b6:	4b49      	ldr	r3, [pc, #292]	; (80009dc <move+0x40c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2264      	movs	r2, #100	; 0x64
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 80008be:	4b47      	ldr	r3, [pc, #284]	; (80009dc <move+0x40c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2264      	movs	r2, #100	; 0x64
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 80008c6:	4b45      	ldr	r3, [pc, #276]	; (80009dc <move+0x40c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2264      	movs	r2, #100	; 0x64
 80008cc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 80008ce:	4b43      	ldr	r3, [pc, #268]	; (80009dc <move+0x40c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2264      	movs	r2, #100	; 0x64
 80008d4:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 80008d6:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <move+0x400>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2264      	movs	r2, #100	; 0x64
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 80008de:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <move+0x400>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2264      	movs	r2, #100	; 0x64
 80008e4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 80008e6:	4b3a      	ldr	r3, [pc, #232]	; (80009d0 <move+0x400>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2264      	movs	r2, #100	; 0x64
 80008ec:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <move+0x400>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2264      	movs	r2, #100	; 0x64
 80008f4:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	if(n==3)//旋转
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d11f      	bne.n	800093c <move+0x36c>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 80008fc:	4b37      	ldr	r3, [pc, #220]	; (80009dc <move+0x40c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2200      	movs	r2, #0
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,18);
 8000904:	4b35      	ldr	r3, [pc, #212]	; (80009dc <move+0x40c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2212      	movs	r2, #18
 800090a:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,24);
 800090c:	4b33      	ldr	r3, [pc, #204]	; (80009dc <move+0x40c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2218      	movs	r2, #24
 8000912:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,0);
 8000914:	4b31      	ldr	r3, [pc, #196]	; (80009dc <move+0x40c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2200      	movs	r2, #0
 800091a:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,12);
 800091c:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <move+0x400>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	220c      	movs	r2, #12
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000924:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <move+0x400>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2200      	movs	r2, #0
 800092a:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 800092c:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <move+0x400>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2200      	movs	r2, #0
 8000932:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,29);
 8000934:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <move+0x400>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	221d      	movs	r2, #29
 800093a:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==4)//刹车
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b04      	cmp	r3, #4
 8000940:	d11f      	bne.n	8000982 <move+0x3b2>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 8000942:	4b26      	ldr	r3, [pc, #152]	; (80009dc <move+0x40c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2264      	movs	r2, #100	; 0x64
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 800094a:	4b24      	ldr	r3, [pc, #144]	; (80009dc <move+0x40c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2264      	movs	r2, #100	; 0x64
 8000950:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,100);
 8000952:	4b22      	ldr	r3, [pc, #136]	; (80009dc <move+0x40c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2264      	movs	r2, #100	; 0x64
 8000958:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,100);
 800095a:	4b20      	ldr	r3, [pc, #128]	; (80009dc <move+0x40c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2264      	movs	r2, #100	; 0x64
 8000960:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,100);
 8000962:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <move+0x400>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2264      	movs	r2, #100	; 0x64
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,100);
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <move+0x400>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2264      	movs	r2, #100	; 0x64
 8000970:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,100);
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <move+0x400>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2264      	movs	r2, #100	; 0x64
 8000978:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,100);
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <move+0x400>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2264      	movs	r2, #100	; 0x64
 8000980:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==5)//倒车入库
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b05      	cmp	r3, #5
 8000986:	d11f      	bne.n	80009c8 <move+0x3f8>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <move+0x40c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2264      	movs	r2, #100	; 0x64
 800098e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <move+0x40c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2264      	movs	r2, #100	; 0x64
 8000996:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,20);
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <move+0x40c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2214      	movs	r2, #20
 800099e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <move+0x40c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2200      	movs	r2, #0
 80009a6:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,100);
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <move+0x400>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2264      	movs	r2, #100	; 0x64
 80009ae:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,100);
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <move+0x400>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2264      	movs	r2, #100	; 0x64
 80009b6:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,20);
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <move+0x400>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2214      	movs	r2, #20
 80009be:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <move+0x400>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2200      	movs	r2, #0
 80009c6:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	24000050 	.word	0x24000050
 80009d4:	58020800 	.word	0x58020800
 80009d8:	58021000 	.word	0x58021000
 80009dc:	240001c0 	.word	0x240001c0

080009e0 <shuxian>:

void shuxian()
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	if(step==1)//直走
 80009e4:	4b7a      	ldr	r3, [pc, #488]	; (8000bd0 <shuxian+0x1f0>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d11c      	bne.n	8000a26 <shuxian+0x46>
	{
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 80009ec:	2120      	movs	r1, #32
 80009ee:	4879      	ldr	r0, [pc, #484]	; (8000bd4 <shuxian+0x1f4>)
 80009f0:	f001 fb8c 	bl	800210c <HAL_GPIO_ReadPin>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d102      	bne.n	8000a00 <shuxian+0x20>
		{
			Xflag=1;
 80009fa:	4b77      	ldr	r3, [pc, #476]	; (8000bd8 <shuxian+0x1f8>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Xflag==1)
 8000a00:	2120      	movs	r1, #32
 8000a02:	4874      	ldr	r0, [pc, #464]	; (8000bd4 <shuxian+0x1f4>)
 8000a04:	f001 fb82 	bl	800210c <HAL_GPIO_ReadPin>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d10b      	bne.n	8000a26 <shuxian+0x46>
 8000a0e:	4b72      	ldr	r3, [pc, #456]	; (8000bd8 <shuxian+0x1f8>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d107      	bne.n	8000a26 <shuxian+0x46>
		{
			X+=1;
 8000a16:	4b71      	ldr	r3, [pc, #452]	; (8000bdc <shuxian+0x1fc>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4a6f      	ldr	r2, [pc, #444]	; (8000bdc <shuxian+0x1fc>)
 8000a1e:	6013      	str	r3, [r2, #0]
			Xflag=0;
 8000a20:	4b6d      	ldr	r3, [pc, #436]	; (8000bd8 <shuxian+0x1f8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==2||step==4||step==6)//旋转
 8000a26:	4b6a      	ldr	r3, [pc, #424]	; (8000bd0 <shuxian+0x1f0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d007      	beq.n	8000a3e <shuxian+0x5e>
 8000a2e:	4b68      	ldr	r3, [pc, #416]	; (8000bd0 <shuxian+0x1f0>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	d003      	beq.n	8000a3e <shuxian+0x5e>
 8000a36:	4b66      	ldr	r3, [pc, #408]	; (8000bd0 <shuxian+0x1f0>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b06      	cmp	r3, #6
 8000a3c:	d12e      	bne.n	8000a9c <shuxian+0xbc>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1&&turnflag==1)
 8000a3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a42:	4867      	ldr	r0, [pc, #412]	; (8000be0 <shuxian+0x200>)
 8000a44:	f001 fb62 	bl	800210c <HAL_GPIO_ReadPin>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d113      	bne.n	8000a76 <shuxian+0x96>
 8000a4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a52:	4863      	ldr	r0, [pc, #396]	; (8000be0 <shuxian+0x200>)
 8000a54:	f001 fb5a 	bl	800210c <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d10b      	bne.n	8000a76 <shuxian+0x96>
 8000a5e:	4b61      	ldr	r3, [pc, #388]	; (8000be4 <shuxian+0x204>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d107      	bne.n	8000a76 <shuxian+0x96>
		{
			turn+=1;
 8000a66:	4b60      	ldr	r3, [pc, #384]	; (8000be8 <shuxian+0x208>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	4a5e      	ldr	r2, [pc, #376]	; (8000be8 <shuxian+0x208>)
 8000a6e:	6013      	str	r3, [r2, #0]
			turnflag=0;
 8000a70:	4b5c      	ldr	r3, [pc, #368]	; (8000be4 <shuxian+0x204>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0||HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000a76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a7a:	4859      	ldr	r0, [pc, #356]	; (8000be0 <shuxian+0x200>)
 8000a7c:	f001 fb46 	bl	800210c <HAL_GPIO_ReadPin>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d007      	beq.n	8000a96 <shuxian+0xb6>
 8000a86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a8a:	4855      	ldr	r0, [pc, #340]	; (8000be0 <shuxian+0x200>)
 8000a8c:	f001 fb3e 	bl	800210c <HAL_GPIO_ReadPin>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d102      	bne.n	8000a9c <shuxian+0xbc>
		{
			turnflag=1;
 8000a96:	4b53      	ldr	r3, [pc, #332]	; (8000be4 <shuxian+0x204>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==3)//直走
 8000a9c:	4b4c      	ldr	r3, [pc, #304]	; (8000bd0 <shuxian+0x1f0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	d122      	bne.n	8000aea <shuxian+0x10a>
	{
		turn=0;
 8000aa4:	4b50      	ldr	r3, [pc, #320]	; (8000be8 <shuxian+0x208>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000aaa:	4b4e      	ldr	r3, [pc, #312]	; (8000be4 <shuxian+0x204>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Yflag==1)
 8000ab0:	2120      	movs	r1, #32
 8000ab2:	4848      	ldr	r0, [pc, #288]	; (8000bd4 <shuxian+0x1f4>)
 8000ab4:	f001 fb2a 	bl	800210c <HAL_GPIO_ReadPin>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d10b      	bne.n	8000ad6 <shuxian+0xf6>
 8000abe:	4b4b      	ldr	r3, [pc, #300]	; (8000bec <shuxian+0x20c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d107      	bne.n	8000ad6 <shuxian+0xf6>
		{
			Y+=1;
 8000ac6:	4b4a      	ldr	r3, [pc, #296]	; (8000bf0 <shuxian+0x210>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	3301      	adds	r3, #1
 8000acc:	4a48      	ldr	r2, [pc, #288]	; (8000bf0 <shuxian+0x210>)
 8000ace:	6013      	str	r3, [r2, #0]
			Yflag=0;
 8000ad0:	4b46      	ldr	r3, [pc, #280]	; (8000bec <shuxian+0x20c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	483e      	ldr	r0, [pc, #248]	; (8000bd4 <shuxian+0x1f4>)
 8000ada:	f001 fb17 	bl	800210c <HAL_GPIO_ReadPin>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <shuxian+0x10a>
		{
			Yflag=1;
 8000ae4:	4b41      	ldr	r3, [pc, #260]	; (8000bec <shuxian+0x20c>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==5)//退回一格
 8000aea:	4b39      	ldr	r3, [pc, #228]	; (8000bd0 <shuxian+0x1f0>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b05      	cmp	r3, #5
 8000af0:	d122      	bne.n	8000b38 <shuxian+0x158>
	{
		turn=0;
 8000af2:	4b3d      	ldr	r3, [pc, #244]	; (8000be8 <shuxian+0x208>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000af8:	4b3a      	ldr	r3, [pc, #232]	; (8000be4 <shuxian+0x204>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Xflag==1)
 8000afe:	2120      	movs	r1, #32
 8000b00:	4834      	ldr	r0, [pc, #208]	; (8000bd4 <shuxian+0x1f4>)
 8000b02:	f001 fb03 	bl	800210c <HAL_GPIO_ReadPin>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d10b      	bne.n	8000b24 <shuxian+0x144>
 8000b0c:	4b32      	ldr	r3, [pc, #200]	; (8000bd8 <shuxian+0x1f8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d107      	bne.n	8000b24 <shuxian+0x144>
		{
			X-=1;
 8000b14:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <shuxian+0x1fc>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	4a30      	ldr	r2, [pc, #192]	; (8000bdc <shuxian+0x1fc>)
 8000b1c:	6013      	str	r3, [r2, #0]
			Xflag=0;
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <shuxian+0x1f8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000b24:	2120      	movs	r1, #32
 8000b26:	482b      	ldr	r0, [pc, #172]	; (8000bd4 <shuxian+0x1f4>)
 8000b28:	f001 faf0 	bl	800210c <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d102      	bne.n	8000b38 <shuxian+0x158>
		{
			Xflag=1;
 8000b32:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <shuxian+0x1f8>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==7)//退回一格
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <shuxian+0x1f0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b07      	cmp	r3, #7
 8000b3e:	d122      	bne.n	8000b86 <shuxian+0x1a6>
	{
		turn=0;
 8000b40:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <shuxian+0x208>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000b46:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <shuxian+0x204>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Yflag==1)
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	4821      	ldr	r0, [pc, #132]	; (8000bd4 <shuxian+0x1f4>)
 8000b50:	f001 fadc 	bl	800210c <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d10b      	bne.n	8000b72 <shuxian+0x192>
 8000b5a:	4b24      	ldr	r3, [pc, #144]	; (8000bec <shuxian+0x20c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d107      	bne.n	8000b72 <shuxian+0x192>
		{
			Y-=1;
 8000b62:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <shuxian+0x210>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	4a21      	ldr	r2, [pc, #132]	; (8000bf0 <shuxian+0x210>)
 8000b6a:	6013      	str	r3, [r2, #0]
			Yflag=0;
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <shuxian+0x20c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000b72:	2120      	movs	r1, #32
 8000b74:	4817      	ldr	r0, [pc, #92]	; (8000bd4 <shuxian+0x1f4>)
 8000b76:	f001 fac9 	bl	800210c <HAL_GPIO_ReadPin>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <shuxian+0x1a6>
		{
			Yflag=1;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <shuxian+0x20c>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==8)
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <shuxian+0x1f0>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b08      	cmp	r3, #8
 8000b8c:	d11e      	bne.n	8000bcc <shuxian+0x1ec>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
 8000b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b92:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <shuxian+0x214>)
 8000b94:	f001 faba 	bl	800210c <HAL_GPIO_ReadPin>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <shuxian+0x1c4>
		{
			Zflag=1;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <shuxian+0x218>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&Zflag==1)
 8000ba4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba8:	4812      	ldr	r0, [pc, #72]	; (8000bf4 <shuxian+0x214>)
 8000baa:	f001 faaf 	bl	800210c <HAL_GPIO_ReadPin>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d10b      	bne.n	8000bcc <shuxian+0x1ec>
 8000bb4:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <shuxian+0x218>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d107      	bne.n	8000bcc <shuxian+0x1ec>
		{
			Z+=1;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <shuxian+0x21c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <shuxian+0x21c>)
 8000bc4:	6013      	str	r3, [r2, #0]
			Zflag=0;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <shuxian+0x218>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	24000000 	.word	0x24000000
 8000bd4:	58021000 	.word	0x58021000
 8000bd8:	24000004 	.word	0x24000004
 8000bdc:	24000040 	.word	0x24000040
 8000be0:	58020400 	.word	0x58020400
 8000be4:	24000010 	.word	0x24000010
 8000be8:	2400004c 	.word	0x2400004c
 8000bec:	24000008 	.word	0x24000008
 8000bf0:	24000044 	.word	0x24000044
 8000bf4:	58020800 	.word	0x58020800
 8000bf8:	2400000c 	.word	0x2400000c
 8000bfc:	24000048 	.word	0x24000048

08000c00 <buzhou>:

void buzhou()
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	if(step==1)//直走
 8000c04:	4b6c      	ldr	r3, [pc, #432]	; (8000db8 <buzhou+0x1b8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d11a      	bne.n	8000c42 <buzhou+0x42>
	{
		move(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f7ff fcdf 	bl	80005d0 <move>
		shuxian();
 8000c12:	f7ff fee5 	bl	80009e0 <shuxian>
		if(X==2&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000c16:	4b69      	ldr	r3, [pc, #420]	; (8000dbc <buzhou+0x1bc>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d111      	bne.n	8000c42 <buzhou+0x42>
 8000c1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c22:	4867      	ldr	r0, [pc, #412]	; (8000dc0 <buzhou+0x1c0>)
 8000c24:	f001 fa72 	bl	800210c <HAL_GPIO_ReadPin>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d109      	bne.n	8000c42 <buzhou+0x42>
		{
			move(4);
 8000c2e:	2004      	movs	r0, #4
 8000c30:	f7ff fcce 	bl	80005d0 <move>
			HAL_Delay(1000);
 8000c34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c38:	f000 ffa4 	bl	8001b84 <HAL_Delay>
			step=2;
 8000c3c:	4b5e      	ldr	r3, [pc, #376]	; (8000db8 <buzhou+0x1b8>)
 8000c3e:	2202      	movs	r2, #2
 8000c40:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==2)//旋转
 8000c42:	4b5d      	ldr	r3, [pc, #372]	; (8000db8 <buzhou+0x1b8>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d112      	bne.n	8000c70 <buzhou+0x70>
	{
		move(3);
 8000c4a:	2003      	movs	r0, #3
 8000c4c:	f7ff fcc0 	bl	80005d0 <move>
		shuxian();
 8000c50:	f7ff fec6 	bl	80009e0 <shuxian>
		if(turn==2)
 8000c54:	4b5b      	ldr	r3, [pc, #364]	; (8000dc4 <buzhou+0x1c4>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d109      	bne.n	8000c70 <buzhou+0x70>
		{
			/*while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
			{
				adjust(1);
			}*/
			move(4);
 8000c5c:	2004      	movs	r0, #4
 8000c5e:	f7ff fcb7 	bl	80005d0 <move>
			HAL_Delay(1000);
 8000c62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c66:	f000 ff8d 	bl	8001b84 <HAL_Delay>
			step=3;
 8000c6a:	4b53      	ldr	r3, [pc, #332]	; (8000db8 <buzhou+0x1b8>)
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==3)//直走
 8000c70:	4b51      	ldr	r3, [pc, #324]	; (8000db8 <buzhou+0x1b8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d11a      	bne.n	8000cae <buzhou+0xae>
	{
		move(1);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff fca9 	bl	80005d0 <move>
		shuxian();
 8000c7e:	f7ff feaf 	bl	80009e0 <shuxian>
		if(Y==2&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000c82:	4b51      	ldr	r3, [pc, #324]	; (8000dc8 <buzhou+0x1c8>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d111      	bne.n	8000cae <buzhou+0xae>
 8000c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8e:	484c      	ldr	r0, [pc, #304]	; (8000dc0 <buzhou+0x1c0>)
 8000c90:	f001 fa3c 	bl	800210c <HAL_GPIO_ReadPin>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d109      	bne.n	8000cae <buzhou+0xae>
		{
			move(4);
 8000c9a:	2004      	movs	r0, #4
 8000c9c:	f7ff fc98 	bl	80005d0 <move>
			HAL_Delay(1000);
 8000ca0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca4:	f000 ff6e 	bl	8001b84 <HAL_Delay>
			step=4;
 8000ca8:	4b43      	ldr	r3, [pc, #268]	; (8000db8 <buzhou+0x1b8>)
 8000caa:	2204      	movs	r2, #4
 8000cac:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==4)//旋转
 8000cae:	4b42      	ldr	r3, [pc, #264]	; (8000db8 <buzhou+0x1b8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	d112      	bne.n	8000cdc <buzhou+0xdc>
	{
		move(3);
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f7ff fc8a 	bl	80005d0 <move>
		shuxian();
 8000cbc:	f7ff fe90 	bl	80009e0 <shuxian>
		if(turn==2)
 8000cc0:	4b40      	ldr	r3, [pc, #256]	; (8000dc4 <buzhou+0x1c4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d109      	bne.n	8000cdc <buzhou+0xdc>
		{
			/*while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
			{
				adjust(1);
			}*/
			move(4);
 8000cc8:	2004      	movs	r0, #4
 8000cca:	f7ff fc81 	bl	80005d0 <move>
			HAL_Delay(1000);
 8000cce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd2:	f000 ff57 	bl	8001b84 <HAL_Delay>
			step=5;
 8000cd6:	4b38      	ldr	r3, [pc, #224]	; (8000db8 <buzhou+0x1b8>)
 8000cd8:	2205      	movs	r2, #5
 8000cda:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==5)//退回一格
 8000cdc:	4b36      	ldr	r3, [pc, #216]	; (8000db8 <buzhou+0x1b8>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b05      	cmp	r3, #5
 8000ce2:	d11a      	bne.n	8000d1a <buzhou+0x11a>
	{
		move(1);
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f7ff fc73 	bl	80005d0 <move>
		shuxian();
 8000cea:	f7ff fe79 	bl	80009e0 <shuxian>
		if(X==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000cee:	4b33      	ldr	r3, [pc, #204]	; (8000dbc <buzhou+0x1bc>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d111      	bne.n	8000d1a <buzhou+0x11a>
 8000cf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfa:	4831      	ldr	r0, [pc, #196]	; (8000dc0 <buzhou+0x1c0>)
 8000cfc:	f001 fa06 	bl	800210c <HAL_GPIO_ReadPin>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d109      	bne.n	8000d1a <buzhou+0x11a>
		{
			move(4);
 8000d06:	2004      	movs	r0, #4
 8000d08:	f7ff fc62 	bl	80005d0 <move>
			HAL_Delay(1000);
 8000d0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d10:	f000 ff38 	bl	8001b84 <HAL_Delay>
			step=6;
 8000d14:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <buzhou+0x1b8>)
 8000d16:	2206      	movs	r2, #6
 8000d18:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==6)//旋转
 8000d1a:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <buzhou+0x1b8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d112      	bne.n	8000d48 <buzhou+0x148>
	{
		move(3);
 8000d22:	2003      	movs	r0, #3
 8000d24:	f7ff fc54 	bl	80005d0 <move>
		shuxian();
 8000d28:	f7ff fe5a 	bl	80009e0 <shuxian>
		if(turn==2)
 8000d2c:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <buzhou+0x1c4>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d109      	bne.n	8000d48 <buzhou+0x148>
		{
			/*while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
			{
				adjust(1);
			}*/
			move(4);
 8000d34:	2004      	movs	r0, #4
 8000d36:	f7ff fc4b 	bl	80005d0 <move>
			HAL_Delay(1000);
 8000d3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d3e:	f000 ff21 	bl	8001b84 <HAL_Delay>
			step=7;
 8000d42:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <buzhou+0x1b8>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==7)
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <buzhou+0x1b8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b07      	cmp	r3, #7
 8000d4e:	d11a      	bne.n	8000d86 <buzhou+0x186>
	{
		move(1);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f7ff fc3d 	bl	80005d0 <move>
		shuxian();
 8000d56:	f7ff fe43 	bl	80009e0 <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <buzhou+0x1c8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d111      	bne.n	8000d86 <buzhou+0x186>
 8000d62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d66:	4816      	ldr	r0, [pc, #88]	; (8000dc0 <buzhou+0x1c0>)
 8000d68:	f001 f9d0 	bl	800210c <HAL_GPIO_ReadPin>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d109      	bne.n	8000d86 <buzhou+0x186>
		{
			move(4);
 8000d72:	2004      	movs	r0, #4
 8000d74:	f7ff fc2c 	bl	80005d0 <move>
			HAL_Delay(1000);
 8000d78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d7c:	f000 ff02 	bl	8001b84 <HAL_Delay>
			step=8;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <buzhou+0x1b8>)
 8000d82:	2208      	movs	r2, #8
 8000d84:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==8)
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <buzhou+0x1b8>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b08      	cmp	r3, #8
 8000d8c:	d112      	bne.n	8000db4 <buzhou+0x1b4>
	{
		move(5);
 8000d8e:	2005      	movs	r0, #5
 8000d90:	f7ff fc1e 	bl	80005d0 <move>
		shuxian();
 8000d94:	f7ff fe24 	bl	80009e0 <shuxian>
		if(Z==2)
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <buzhou+0x1cc>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d109      	bne.n	8000db4 <buzhou+0x1b4>
		{
			move(4);
 8000da0:	2004      	movs	r0, #4
 8000da2:	f7ff fc15 	bl	80005d0 <move>
			HAL_Delay(1000);
 8000da6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000daa:	f000 feeb 	bl	8001b84 <HAL_Delay>
			step=9;
 8000dae:	4b02      	ldr	r3, [pc, #8]	; (8000db8 <buzhou+0x1b8>)
 8000db0:	2209      	movs	r2, #9
 8000db2:	601a      	str	r2, [r3, #0]
		}
	}

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	24000000 	.word	0x24000000
 8000dbc:	24000040 	.word	0x24000040
 8000dc0:	58020800 	.word	0x58020800
 8000dc4:	2400004c 	.word	0x2400004c
 8000dc8:	24000044 	.word	0x24000044
 8000dcc:	24000048 	.word	0x24000048

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd4:	f000 fe44 	bl	8001a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd8:	f000 f83e 	bl	8000e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ddc:	f000 fb5c 	bl	8001498 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000de0:	f000 f9a6 	bl	8001130 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000de4:	f000 fa74 	bl	80012d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000de8:	f000 fabe 	bl	8001368 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000dec:	f000 f8d0 	bl	8000f90 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000df0:	f000 fb06 	bl	8001400 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000df4:	2100      	movs	r1, #0
 8000df6:	4814      	ldr	r0, [pc, #80]	; (8000e48 <main+0x78>)
 8000df8:	f003 fd80 	bl	80048fc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	4812      	ldr	r0, [pc, #72]	; (8000e48 <main+0x78>)
 8000e00:	f003 fd7c 	bl	80048fc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000e04:	2108      	movs	r1, #8
 8000e06:	4810      	ldr	r0, [pc, #64]	; (8000e48 <main+0x78>)
 8000e08:	f003 fd78 	bl	80048fc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000e0c:	210c      	movs	r1, #12
 8000e0e:	480e      	ldr	r0, [pc, #56]	; (8000e48 <main+0x78>)
 8000e10:	f003 fd74 	bl	80048fc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8000e14:	2100      	movs	r1, #0
 8000e16:	480d      	ldr	r0, [pc, #52]	; (8000e4c <main+0x7c>)
 8000e18:	f003 fd70 	bl	80048fc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	480b      	ldr	r0, [pc, #44]	; (8000e4c <main+0x7c>)
 8000e20:	f003 fd6c 	bl	80048fc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 8000e24:	2108      	movs	r1, #8
 8000e26:	4809      	ldr	r0, [pc, #36]	; (8000e4c <main+0x7c>)
 8000e28:	f003 fd68 	bl	80048fc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);
 8000e2c:	210c      	movs	r1, #12
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <main+0x7c>)
 8000e30:	f003 fd64 	bl	80048fc <HAL_TIM_PWM_Start>
    HAL_UART_Receive_IT(&huart1,YY,1000);
 8000e34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e38:	4905      	ldr	r1, [pc, #20]	; (8000e50 <main+0x80>)
 8000e3a:	4806      	ldr	r0, [pc, #24]	; (8000e54 <main+0x84>)
 8000e3c:	f004 fdb6 	bl	80059ac <HAL_UART_Receive_IT>

//	       HAL_UART_Transmit(&huart2,YY1,sizeof(YY1),1000);
//	       HAL_Delay(2000);


	buzhou();
 8000e40:	f7ff fede 	bl	8000c00 <buzhou>
 8000e44:	e7fc      	b.n	8000e40 <main+0x70>
 8000e46:	bf00      	nop
 8000e48:	240001c0 	.word	0x240001c0
 8000e4c:	24000050 	.word	0x24000050
 8000e50:	24000128 	.word	0x24000128
 8000e54:	24000134 	.word	0x24000134

08000e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0cc      	sub	sp, #304	; 0x130
 8000e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e62:	224c      	movs	r2, #76	; 0x4c
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f006 f846 	bl	8006ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e6c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e70:	2220      	movs	r2, #32
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f006 f83f 	bl	8006ef8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7a:	f107 0308 	add.w	r3, r7, #8
 8000e7e:	4618      	mov	r0, r3
 8000e80:	23bc      	movs	r3, #188	; 0xbc
 8000e82:	461a      	mov	r2, r3
 8000e84:	2100      	movs	r1, #0
 8000e86:	f006 f837 	bl	8006ef8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	f001 f956 	bl	800213c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	4b3c      	ldr	r3, [pc, #240]	; (8000f88 <SystemClock_Config+0x130>)
 8000e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9a:	4a3b      	ldr	r2, [pc, #236]	; (8000f88 <SystemClock_Config+0x130>)
 8000e9c:	f023 0301 	bic.w	r3, r3, #1
 8000ea0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ea2:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <SystemClock_Config+0x130>)
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea6:	f003 0201 	and.w	r2, r3, #1
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	4b37      	ldr	r3, [pc, #220]	; (8000f8c <SystemClock_Config+0x134>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000eb6:	4a35      	ldr	r2, [pc, #212]	; (8000f8c <SystemClock_Config+0x134>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ebc:	6193      	str	r3, [r2, #24]
 8000ebe:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <SystemClock_Config+0x134>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ece:	bf00      	nop
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <SystemClock_Config+0x134>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000edc:	d1f8      	bne.n	8000ed0 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eea:	2340      	movs	r3, #64	; 0x40
 8000eec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 f958 	bl	80021b0 <HAL_RCC_OscConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f06:	f000 fb4f 	bl	80015a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f0a:	233f      	movs	r3, #63	; 0x3f
 8000f0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f3a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 fd45 	bl	80029d0 <HAL_RCC_ClockConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000f4c:	f000 fb2c 	bl	80015a8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	2203      	movs	r2, #3
 8000f56:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	2200      	movs	r2, #0
 8000f66:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 f8bb 	bl	80030e8 <HAL_RCCEx_PeriphCLKConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0x124>
  {
    Error_Handler();
 8000f78:	f000 fb16 	bl	80015a8 <Error_Handler>
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	58000400 	.word	0x58000400
 8000f8c:	58024800 	.word	0x58024800

08000f90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b09a      	sub	sp, #104	; 0x68
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
 8000fc0:	615a      	str	r2, [r3, #20]
 8000fc2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	222c      	movs	r2, #44	; 0x2c
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f005 ff94 	bl	8006ef8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fd0:	4b55      	ldr	r3, [pc, #340]	; (8001128 <MX_TIM1_Init+0x198>)
 8000fd2:	4a56      	ldr	r2, [pc, #344]	; (800112c <MX_TIM1_Init+0x19c>)
 8000fd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8000fd6:	4b54      	ldr	r3, [pc, #336]	; (8001128 <MX_TIM1_Init+0x198>)
 8000fd8:	221f      	movs	r2, #31
 8000fda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	4b52      	ldr	r3, [pc, #328]	; (8001128 <MX_TIM1_Init+0x198>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000fe2:	4b51      	ldr	r3, [pc, #324]	; (8001128 <MX_TIM1_Init+0x198>)
 8000fe4:	2263      	movs	r2, #99	; 0x63
 8000fe6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe8:	4b4f      	ldr	r3, [pc, #316]	; (8001128 <MX_TIM1_Init+0x198>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fee:	4b4e      	ldr	r3, [pc, #312]	; (8001128 <MX_TIM1_Init+0x198>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff4:	4b4c      	ldr	r3, [pc, #304]	; (8001128 <MX_TIM1_Init+0x198>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ffa:	484b      	ldr	r0, [pc, #300]	; (8001128 <MX_TIM1_Init+0x198>)
 8000ffc:	f003 fbc6 	bl	800478c <HAL_TIM_Base_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001006:	f000 facf 	bl	80015a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001010:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001014:	4619      	mov	r1, r3
 8001016:	4844      	ldr	r0, [pc, #272]	; (8001128 <MX_TIM1_Init+0x198>)
 8001018:	f003 fe52 	bl	8004cc0 <HAL_TIM_ConfigClockSource>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001022:	f000 fac1 	bl	80015a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001026:	4840      	ldr	r0, [pc, #256]	; (8001128 <MX_TIM1_Init+0x198>)
 8001028:	f003 fc07 	bl	800483a <HAL_TIM_PWM_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001032:	f000 fab9 	bl	80015a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001042:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001046:	4619      	mov	r1, r3
 8001048:	4837      	ldr	r0, [pc, #220]	; (8001128 <MX_TIM1_Init+0x198>)
 800104a:	f004 fb59 	bl	8005700 <HAL_TIMEx_MasterConfigSynchronization>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001054:	f000 faa8 	bl	80015a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001058:	2360      	movs	r3, #96	; 0x60
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001060:	2300      	movs	r3, #0
 8001062:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001064:	2300      	movs	r3, #0
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001070:	2300      	movs	r3, #0
 8001072:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001074:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001078:	2200      	movs	r2, #0
 800107a:	4619      	mov	r1, r3
 800107c:	482a      	ldr	r0, [pc, #168]	; (8001128 <MX_TIM1_Init+0x198>)
 800107e:	f003 fd0f 	bl	8004aa0 <HAL_TIM_PWM_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001088:	f000 fa8e 	bl	80015a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800108c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001090:	2204      	movs	r2, #4
 8001092:	4619      	mov	r1, r3
 8001094:	4824      	ldr	r0, [pc, #144]	; (8001128 <MX_TIM1_Init+0x198>)
 8001096:	f003 fd03 	bl	8004aa0 <HAL_TIM_PWM_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80010a0:	f000 fa82 	bl	80015a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010a8:	2208      	movs	r2, #8
 80010aa:	4619      	mov	r1, r3
 80010ac:	481e      	ldr	r0, [pc, #120]	; (8001128 <MX_TIM1_Init+0x198>)
 80010ae:	f003 fcf7 	bl	8004aa0 <HAL_TIM_PWM_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80010b8:	f000 fa76 	bl	80015a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010c0:	220c      	movs	r2, #12
 80010c2:	4619      	mov	r1, r3
 80010c4:	4818      	ldr	r0, [pc, #96]	; (8001128 <MX_TIM1_Init+0x198>)
 80010c6:	f003 fceb 	bl	8004aa0 <HAL_TIM_PWM_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80010d0:	f000 fa6a 	bl	80015a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4619      	mov	r1, r3
 8001108:	4807      	ldr	r0, [pc, #28]	; (8001128 <MX_TIM1_Init+0x198>)
 800110a:	f004 fb81 	bl	8005810 <HAL_TIMEx_ConfigBreakDeadTime>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001114:	f000 fa48 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001118:	4803      	ldr	r0, [pc, #12]	; (8001128 <MX_TIM1_Init+0x198>)
 800111a:	f000 fa9f 	bl	800165c <HAL_TIM_MspPostInit>

}
 800111e:	bf00      	nop
 8001120:	3768      	adds	r7, #104	; 0x68
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	240001c0 	.word	0x240001c0
 800112c:	40010000 	.word	0x40010000

08001130 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b09a      	sub	sp, #104	; 0x68
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001136:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001150:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	615a      	str	r2, [r3, #20]
 8001162:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	222c      	movs	r2, #44	; 0x2c
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f005 fec4 	bl	8006ef8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001170:	4b55      	ldr	r3, [pc, #340]	; (80012c8 <MX_TIM8_Init+0x198>)
 8001172:	4a56      	ldr	r2, [pc, #344]	; (80012cc <MX_TIM8_Init+0x19c>)
 8001174:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 8001176:	4b54      	ldr	r3, [pc, #336]	; (80012c8 <MX_TIM8_Init+0x198>)
 8001178:	223f      	movs	r2, #63	; 0x3f
 800117a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b52      	ldr	r3, [pc, #328]	; (80012c8 <MX_TIM8_Init+0x198>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 8001182:	4b51      	ldr	r3, [pc, #324]	; (80012c8 <MX_TIM8_Init+0x198>)
 8001184:	2263      	movs	r2, #99	; 0x63
 8001186:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b4f      	ldr	r3, [pc, #316]	; (80012c8 <MX_TIM8_Init+0x198>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800118e:	4b4e      	ldr	r3, [pc, #312]	; (80012c8 <MX_TIM8_Init+0x198>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001194:	4b4c      	ldr	r3, [pc, #304]	; (80012c8 <MX_TIM8_Init+0x198>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800119a:	484b      	ldr	r0, [pc, #300]	; (80012c8 <MX_TIM8_Init+0x198>)
 800119c:	f003 faf6 	bl	800478c <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80011a6:	f000 f9ff 	bl	80015a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ae:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80011b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011b4:	4619      	mov	r1, r3
 80011b6:	4844      	ldr	r0, [pc, #272]	; (80012c8 <MX_TIM8_Init+0x198>)
 80011b8:	f003 fd82 	bl	8004cc0 <HAL_TIM_ConfigClockSource>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80011c2:	f000 f9f1 	bl	80015a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80011c6:	4840      	ldr	r0, [pc, #256]	; (80012c8 <MX_TIM8_Init+0x198>)
 80011c8:	f003 fb37 	bl	800483a <HAL_TIM_PWM_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80011d2:	f000 f9e9 	bl	80015a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011e6:	4619      	mov	r1, r3
 80011e8:	4837      	ldr	r0, [pc, #220]	; (80012c8 <MX_TIM8_Init+0x198>)
 80011ea:	f004 fa89 	bl	8005700 <HAL_TIMEx_MasterConfigSynchronization>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 80011f4:	f000 f9d8 	bl	80015a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f8:	2360      	movs	r3, #96	; 0x60
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001200:	2300      	movs	r3, #0
 8001202:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001204:	2300      	movs	r3, #0
 8001206:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001214:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001218:	2200      	movs	r2, #0
 800121a:	4619      	mov	r1, r3
 800121c:	482a      	ldr	r0, [pc, #168]	; (80012c8 <MX_TIM8_Init+0x198>)
 800121e:	f003 fc3f 	bl	8004aa0 <HAL_TIM_PWM_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8001228:	f000 f9be 	bl	80015a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800122c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001230:	2204      	movs	r2, #4
 8001232:	4619      	mov	r1, r3
 8001234:	4824      	ldr	r0, [pc, #144]	; (80012c8 <MX_TIM8_Init+0x198>)
 8001236:	f003 fc33 	bl	8004aa0 <HAL_TIM_PWM_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8001240:	f000 f9b2 	bl	80015a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001244:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001248:	2208      	movs	r2, #8
 800124a:	4619      	mov	r1, r3
 800124c:	481e      	ldr	r0, [pc, #120]	; (80012c8 <MX_TIM8_Init+0x198>)
 800124e:	f003 fc27 	bl	8004aa0 <HAL_TIM_PWM_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8001258:	f000 f9a6 	bl	80015a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800125c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001260:	220c      	movs	r2, #12
 8001262:	4619      	mov	r1, r3
 8001264:	4818      	ldr	r0, [pc, #96]	; (80012c8 <MX_TIM8_Init+0x198>)
 8001266:	f003 fc1b 	bl	8004aa0 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8001270:	f000 f99a 	bl	80015a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001296:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	4807      	ldr	r0, [pc, #28]	; (80012c8 <MX_TIM8_Init+0x198>)
 80012aa:	f004 fab1 	bl	8005810 <HAL_TIMEx_ConfigBreakDeadTime>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM8_Init+0x188>
  {
    Error_Handler();
 80012b4:	f000 f978 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80012b8:	4803      	ldr	r0, [pc, #12]	; (80012c8 <MX_TIM8_Init+0x198>)
 80012ba:	f000 f9cf 	bl	800165c <HAL_TIM_MspPostInit>

}
 80012be:	bf00      	nop
 80012c0:	3768      	adds	r7, #104	; 0x68
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	24000050 	.word	0x24000050
 80012cc:	40010400 	.word	0x40010400

080012d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012d4:	4b22      	ldr	r3, [pc, #136]	; (8001360 <MX_USART1_UART_Init+0x90>)
 80012d6:	4a23      	ldr	r2, [pc, #140]	; (8001364 <MX_USART1_UART_Init+0x94>)
 80012d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <MX_USART1_UART_Init+0x90>)
 80012dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <MX_USART1_UART_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_USART1_UART_Init+0x90>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <MX_USART1_UART_Init+0x90>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_USART1_UART_Init+0x90>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <MX_USART1_UART_Init+0x90>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MX_USART1_UART_Init+0x90>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <MX_USART1_UART_Init+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_USART1_UART_Init+0x90>)
 800130e:	2200      	movs	r2, #0
 8001310:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <MX_USART1_UART_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001318:	4811      	ldr	r0, [pc, #68]	; (8001360 <MX_USART1_UART_Init+0x90>)
 800131a:	f004 faf7 	bl	800590c <HAL_UART_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001324:	f000 f940 	bl	80015a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001328:	2100      	movs	r1, #0
 800132a:	480d      	ldr	r0, [pc, #52]	; (8001360 <MX_USART1_UART_Init+0x90>)
 800132c:	f005 fcdb 	bl	8006ce6 <HAL_UARTEx_SetTxFifoThreshold>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001336:	f000 f937 	bl	80015a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800133a:	2100      	movs	r1, #0
 800133c:	4808      	ldr	r0, [pc, #32]	; (8001360 <MX_USART1_UART_Init+0x90>)
 800133e:	f005 fd10 	bl	8006d62 <HAL_UARTEx_SetRxFifoThreshold>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001348:	f000 f92e 	bl	80015a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <MX_USART1_UART_Init+0x90>)
 800134e:	f005 fc91 	bl	8006c74 <HAL_UARTEx_DisableFifoMode>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001358:	f000 f926 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	24000134 	.word	0x24000134
 8001364:	40011000 	.word	0x40011000

08001368 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800136c:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <MX_USART2_UART_Init+0x90>)
 800136e:	4a23      	ldr	r2, [pc, #140]	; (80013fc <MX_USART2_UART_Init+0x94>)
 8001370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001372:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <MX_USART2_UART_Init+0x90>)
 8001374:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <MX_USART2_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <MX_USART2_UART_Init+0x90>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <MX_USART2_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <MX_USART2_UART_Init+0x90>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <MX_USART2_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <MX_USART2_UART_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <MX_USART2_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_USART2_UART_Init+0x90>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <MX_USART2_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b0:	4811      	ldr	r0, [pc, #68]	; (80013f8 <MX_USART2_UART_Init+0x90>)
 80013b2:	f004 faab 	bl	800590c <HAL_UART_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013bc:	f000 f8f4 	bl	80015a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c0:	2100      	movs	r1, #0
 80013c2:	480d      	ldr	r0, [pc, #52]	; (80013f8 <MX_USART2_UART_Init+0x90>)
 80013c4:	f005 fc8f 	bl	8006ce6 <HAL_UARTEx_SetTxFifoThreshold>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013ce:	f000 f8eb 	bl	80015a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d2:	2100      	movs	r1, #0
 80013d4:	4808      	ldr	r0, [pc, #32]	; (80013f8 <MX_USART2_UART_Init+0x90>)
 80013d6:	f005 fcc4 	bl	8006d62 <HAL_UARTEx_SetRxFifoThreshold>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013e0:	f000 f8e2 	bl	80015a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <MX_USART2_UART_Init+0x90>)
 80013e6:	f005 fc45 	bl	8006c74 <HAL_UARTEx_DisableFifoMode>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013f0:	f000 f8da 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2400020c 	.word	0x2400020c
 80013fc:	40004400 	.word	0x40004400

08001400 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001404:	4b22      	ldr	r3, [pc, #136]	; (8001490 <MX_USART3_UART_Init+0x90>)
 8001406:	4a23      	ldr	r2, [pc, #140]	; (8001494 <MX_USART3_UART_Init+0x94>)
 8001408:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800140a:	4b21      	ldr	r3, [pc, #132]	; (8001490 <MX_USART3_UART_Init+0x90>)
 800140c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001410:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <MX_USART3_UART_Init+0x90>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <MX_USART3_UART_Init+0x90>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MX_USART3_UART_Init+0x90>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <MX_USART3_UART_Init+0x90>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MX_USART3_UART_Init+0x90>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <MX_USART3_UART_Init+0x90>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <MX_USART3_UART_Init+0x90>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_USART3_UART_Init+0x90>)
 800143e:	2200      	movs	r2, #0
 8001440:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <MX_USART3_UART_Init+0x90>)
 8001444:	2200      	movs	r2, #0
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001448:	4811      	ldr	r0, [pc, #68]	; (8001490 <MX_USART3_UART_Init+0x90>)
 800144a:	f004 fa5f 	bl	800590c <HAL_UART_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001454:	f000 f8a8 	bl	80015a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001458:	2100      	movs	r1, #0
 800145a:	480d      	ldr	r0, [pc, #52]	; (8001490 <MX_USART3_UART_Init+0x90>)
 800145c:	f005 fc43 	bl	8006ce6 <HAL_UARTEx_SetTxFifoThreshold>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001466:	f000 f89f 	bl	80015a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800146a:	2100      	movs	r1, #0
 800146c:	4808      	ldr	r0, [pc, #32]	; (8001490 <MX_USART3_UART_Init+0x90>)
 800146e:	f005 fc78 	bl	8006d62 <HAL_UARTEx_SetRxFifoThreshold>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001478:	f000 f896 	bl	80015a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_USART3_UART_Init+0x90>)
 800147e:	f005 fbf9 	bl	8006c74 <HAL_UARTEx_DisableFifoMode>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001488:	f000 f88e 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	2400009c 	.word	0x2400009c
 8001494:	40004800 	.word	0x40004800

08001498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ae:	4b3a      	ldr	r3, [pc, #232]	; (8001598 <MX_GPIO_Init+0x100>)
 80014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b4:	4a38      	ldr	r2, [pc, #224]	; (8001598 <MX_GPIO_Init+0x100>)
 80014b6:	f043 0310 	orr.w	r3, r3, #16
 80014ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <MX_GPIO_Init+0x100>)
 80014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014cc:	4b32      	ldr	r3, [pc, #200]	; (8001598 <MX_GPIO_Init+0x100>)
 80014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d2:	4a31      	ldr	r2, [pc, #196]	; (8001598 <MX_GPIO_Init+0x100>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014dc:	4b2e      	ldr	r3, [pc, #184]	; (8001598 <MX_GPIO_Init+0x100>)
 80014de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	4b2b      	ldr	r3, [pc, #172]	; (8001598 <MX_GPIO_Init+0x100>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f0:	4a29      	ldr	r2, [pc, #164]	; (8001598 <MX_GPIO_Init+0x100>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014fa:	4b27      	ldr	r3, [pc, #156]	; (8001598 <MX_GPIO_Init+0x100>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	4b23      	ldr	r3, [pc, #140]	; (8001598 <MX_GPIO_Init+0x100>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150e:	4a22      	ldr	r2, [pc, #136]	; (8001598 <MX_GPIO_Init+0x100>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <MX_GPIO_Init+0x100>)
 800151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001526:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <MX_GPIO_Init+0x100>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	4a1a      	ldr	r2, [pc, #104]	; (8001598 <MX_GPIO_Init+0x100>)
 800152e:	f043 0308 	orr.w	r3, r3, #8
 8001532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <MX_GPIO_Init+0x100>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001544:	2320      	movs	r3, #32
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4811      	ldr	r0, [pc, #68]	; (800159c <MX_GPIO_Init+0x104>)
 8001558:	f000 fc28 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800155c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	480b      	ldr	r0, [pc, #44]	; (80015a0 <MX_GPIO_Init+0x108>)
 8001572:	f000 fc1b 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001576:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <MX_GPIO_Init+0x10c>)
 800158c:	f000 fc0e 	bl	8001dac <HAL_GPIO_Init>

}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	; 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	58024400 	.word	0x58024400
 800159c:	58021000 	.word	0x58021000
 80015a0:	58020800 	.word	0x58020800
 80015a4:	58020400 	.word	0x58020400

080015a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ac:	b672      	cpsid	i
}
 80015ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <Error_Handler+0x8>
	...

080015b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_MspInit+0x30>)
 80015bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015c0:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <HAL_MspInit+0x30>)
 80015c2:	f043 0302 	orr.w	r3, r3, #2
 80015c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_MspInit+0x30>)
 80015cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	58024400 	.word	0x58024400

080015e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a16      	ldr	r2, [pc, #88]	; (8001650 <HAL_TIM_Base_MspInit+0x68>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d10f      	bne.n	800161a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <HAL_TIM_Base_MspInit+0x6c>)
 80015fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <HAL_TIM_Base_MspInit+0x6c>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_TIM_Base_MspInit+0x6c>)
 800160c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001618:	e013      	b.n	8001642 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM8)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_TIM_Base_MspInit+0x70>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d10e      	bne.n	8001642 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_TIM_Base_MspInit+0x6c>)
 8001626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_TIM_Base_MspInit+0x6c>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <HAL_TIM_Base_MspInit+0x6c>)
 8001636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40010000 	.word	0x40010000
 8001654:	58024400 	.word	0x58024400
 8001658:	40010400 	.word	0x40010400

0800165c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a26      	ldr	r2, [pc, #152]	; (8001714 <HAL_TIM_MspPostInit+0xb8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d120      	bne.n	80016c0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800167e:	4b26      	ldr	r3, [pc, #152]	; (8001718 <HAL_TIM_MspPostInit+0xbc>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001684:	4a24      	ldr	r2, [pc, #144]	; (8001718 <HAL_TIM_MspPostInit+0xbc>)
 8001686:	f043 0310 	orr.w	r3, r3, #16
 800168a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800168e:	4b22      	ldr	r3, [pc, #136]	; (8001718 <HAL_TIM_MspPostInit+0xbc>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800169c:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80016a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	4818      	ldr	r0, [pc, #96]	; (800171c <HAL_TIM_MspPostInit+0xc0>)
 80016ba:	f000 fb77 	bl	8001dac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80016be:	e024      	b.n	800170a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM8)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a16      	ldr	r2, [pc, #88]	; (8001720 <HAL_TIM_MspPostInit+0xc4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d11f      	bne.n	800170a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <HAL_TIM_MspPostInit+0xbc>)
 80016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d0:	4a11      	ldr	r2, [pc, #68]	; (8001718 <HAL_TIM_MspPostInit+0xbc>)
 80016d2:	f043 0304 	orr.w	r3, r3, #4
 80016d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_TIM_MspPostInit+0xbc>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80016e8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80016fa:	2303      	movs	r3, #3
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4807      	ldr	r0, [pc, #28]	; (8001724 <HAL_TIM_MspPostInit+0xc8>)
 8001706:	f000 fb51 	bl	8001dac <HAL_GPIO_Init>
}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	; 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40010000 	.word	0x40010000
 8001718:	58024400 	.word	0x58024400
 800171c:	58021000 	.word	0x58021000
 8001720:	40010400 	.word	0x40010400
 8001724:	58020800 	.word	0x58020800

08001728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08e      	sub	sp, #56	; 0x38
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a4f      	ldr	r2, [pc, #316]	; (8001884 <HAL_UART_MspInit+0x15c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d12f      	bne.n	80017aa <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800174a:	4b4f      	ldr	r3, [pc, #316]	; (8001888 <HAL_UART_MspInit+0x160>)
 800174c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001750:	4a4d      	ldr	r2, [pc, #308]	; (8001888 <HAL_UART_MspInit+0x160>)
 8001752:	f043 0310 	orr.w	r3, r3, #16
 8001756:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800175a:	4b4b      	ldr	r3, [pc, #300]	; (8001888 <HAL_UART_MspInit+0x160>)
 800175c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	623b      	str	r3, [r7, #32]
 8001766:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001768:	4b47      	ldr	r3, [pc, #284]	; (8001888 <HAL_UART_MspInit+0x160>)
 800176a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176e:	4a46      	ldr	r2, [pc, #280]	; (8001888 <HAL_UART_MspInit+0x160>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001778:	4b43      	ldr	r3, [pc, #268]	; (8001888 <HAL_UART_MspInit+0x160>)
 800177a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001786:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001798:	2304      	movs	r3, #4
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a0:	4619      	mov	r1, r3
 80017a2:	483a      	ldr	r0, [pc, #232]	; (800188c <HAL_UART_MspInit+0x164>)
 80017a4:	f000 fb02 	bl	8001dac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017a8:	e067      	b.n	800187a <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART2)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a38      	ldr	r2, [pc, #224]	; (8001890 <HAL_UART_MspInit+0x168>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d12e      	bne.n	8001812 <HAL_UART_MspInit+0xea>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017b4:	4b34      	ldr	r3, [pc, #208]	; (8001888 <HAL_UART_MspInit+0x160>)
 80017b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017ba:	4a33      	ldr	r2, [pc, #204]	; (8001888 <HAL_UART_MspInit+0x160>)
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017c4:	4b30      	ldr	r3, [pc, #192]	; (8001888 <HAL_UART_MspInit+0x160>)
 80017c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	61bb      	str	r3, [r7, #24]
 80017d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4b2d      	ldr	r3, [pc, #180]	; (8001888 <HAL_UART_MspInit+0x160>)
 80017d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d8:	4a2b      	ldr	r2, [pc, #172]	; (8001888 <HAL_UART_MspInit+0x160>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017e2:	4b29      	ldr	r3, [pc, #164]	; (8001888 <HAL_UART_MspInit+0x160>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017f0:	230c      	movs	r3, #12
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001800:	2307      	movs	r3, #7
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001808:	4619      	mov	r1, r3
 800180a:	4822      	ldr	r0, [pc, #136]	; (8001894 <HAL_UART_MspInit+0x16c>)
 800180c:	f000 face 	bl	8001dac <HAL_GPIO_Init>
}
 8001810:	e033      	b.n	800187a <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART3)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a20      	ldr	r2, [pc, #128]	; (8001898 <HAL_UART_MspInit+0x170>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d12e      	bne.n	800187a <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART3_CLK_ENABLE();
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <HAL_UART_MspInit+0x160>)
 800181e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001822:	4a19      	ldr	r2, [pc, #100]	; (8001888 <HAL_UART_MspInit+0x160>)
 8001824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001828:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <HAL_UART_MspInit+0x160>)
 800182e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_UART_MspInit+0x160>)
 800183c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <HAL_UART_MspInit+0x160>)
 8001842:	f043 0308 	orr.w	r3, r3, #8
 8001846:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <HAL_UART_MspInit+0x160>)
 800184c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001858:	f44f 7340 	mov.w	r3, #768	; 0x300
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800186a:	2307      	movs	r3, #7
 800186c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800186e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001872:	4619      	mov	r1, r3
 8001874:	4809      	ldr	r0, [pc, #36]	; (800189c <HAL_UART_MspInit+0x174>)
 8001876:	f000 fa99 	bl	8001dac <HAL_GPIO_Init>
}
 800187a:	bf00      	nop
 800187c:	3738      	adds	r7, #56	; 0x38
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40011000 	.word	0x40011000
 8001888:	58024400 	.word	0x58024400
 800188c:	58020400 	.word	0x58020400
 8001890:	40004400 	.word	0x40004400
 8001894:	58020000 	.word	0x58020000
 8001898:	40004800 	.word	0x40004800
 800189c:	58020c00 	.word	0x58020c00

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <NMI_Handler+0x4>

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <MemManage_Handler+0x4>

080018b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <UsageFault_Handler+0x4>

080018be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ec:	f000 f92a 	bl	8001b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018f8:	4b39      	ldr	r3, [pc, #228]	; (80019e0 <SystemInit+0xec>)
 80018fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fe:	4a38      	ldr	r2, [pc, #224]	; (80019e0 <SystemInit+0xec>)
 8001900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001908:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <SystemInit+0xf0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	2b06      	cmp	r3, #6
 8001912:	d807      	bhi.n	8001924 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001914:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <SystemInit+0xf0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f023 030f 	bic.w	r3, r3, #15
 800191c:	4a31      	ldr	r2, [pc, #196]	; (80019e4 <SystemInit+0xf0>)
 800191e:	f043 0307 	orr.w	r3, r3, #7
 8001922:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001924:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <SystemInit+0xf4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a2f      	ldr	r2, [pc, #188]	; (80019e8 <SystemInit+0xf4>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001930:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <SystemInit+0xf4>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001936:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <SystemInit+0xf4>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	492b      	ldr	r1, [pc, #172]	; (80019e8 <SystemInit+0xf4>)
 800193c:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <SystemInit+0xf8>)
 800193e:	4013      	ands	r3, r2
 8001940:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <SystemInit+0xf0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d007      	beq.n	800195e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <SystemInit+0xf0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 030f 	bic.w	r3, r3, #15
 8001956:	4a23      	ldr	r2, [pc, #140]	; (80019e4 <SystemInit+0xf0>)
 8001958:	f043 0307 	orr.w	r3, r3, #7
 800195c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <SystemInit+0xf4>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001964:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <SystemInit+0xf4>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <SystemInit+0xf4>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <SystemInit+0xf4>)
 8001972:	4a1f      	ldr	r2, [pc, #124]	; (80019f0 <SystemInit+0xfc>)
 8001974:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <SystemInit+0xf4>)
 8001978:	4a1e      	ldr	r2, [pc, #120]	; (80019f4 <SystemInit+0x100>)
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <SystemInit+0xf4>)
 800197e:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <SystemInit+0x104>)
 8001980:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <SystemInit+0xf4>)
 8001984:	2200      	movs	r2, #0
 8001986:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001988:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <SystemInit+0xf4>)
 800198a:	4a1b      	ldr	r2, [pc, #108]	; (80019f8 <SystemInit+0x104>)
 800198c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <SystemInit+0xf4>)
 8001990:	2200      	movs	r2, #0
 8001992:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <SystemInit+0xf4>)
 8001996:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <SystemInit+0x104>)
 8001998:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <SystemInit+0xf4>)
 800199c:	2200      	movs	r2, #0
 800199e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <SystemInit+0xf4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a10      	ldr	r2, [pc, #64]	; (80019e8 <SystemInit+0xf4>)
 80019a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <SystemInit+0xf4>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <SystemInit+0x108>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <SystemInit+0x10c>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019be:	d202      	bcs.n	80019c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <SystemInit+0x110>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <SystemInit+0x114>)
 80019c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80019cc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <SystemInit+0xec>)
 80019d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019d4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00
 80019e4:	52002000 	.word	0x52002000
 80019e8:	58024400 	.word	0x58024400
 80019ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80019f0:	02020200 	.word	0x02020200
 80019f4:	01ff0000 	.word	0x01ff0000
 80019f8:	01010280 	.word	0x01010280
 80019fc:	5c001000 	.word	0x5c001000
 8001a00:	ffff0000 	.word	0xffff0000
 8001a04:	51008108 	.word	0x51008108
 8001a08:	52004000 	.word	0x52004000

08001a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a44 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a10:	f7ff ff70 	bl	80018f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a16:	e003      	b.n	8001a20 <LoopCopyDataInit>

08001a18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001a1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a1e:	3104      	adds	r1, #4

08001a20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a20:	480a      	ldr	r0, [pc, #40]	; (8001a4c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001a24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a28:	d3f6      	bcc.n	8001a18 <CopyDataInit>
  ldr  r2, =_sbss
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001a2c:	e002      	b.n	8001a34 <LoopFillZerobss>

08001a2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a30:	f842 3b04 	str.w	r3, [r2], #4

08001a34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001a36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a38:	d3f9      	bcc.n	8001a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f005 fa39 	bl	8006eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3e:	f7ff f9c7 	bl	8000dd0 <main>
  bx  lr    
 8001a42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a44:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001a48:	08006f68 	.word	0x08006f68
  ldr  r0, =_sdata
 8001a4c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001a50:	24000024 	.word	0x24000024
  ldr  r2, =_sbss
 8001a54:	24000024 	.word	0x24000024
  ldr  r3, = _ebss
 8001a58:	2400029c 	.word	0x2400029c

08001a5c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC3_IRQHandler>
	...

08001a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a66:	2003      	movs	r0, #3
 8001a68:	f000 f96e 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a6c:	f001 f966 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_Init+0x68>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	0a1b      	lsrs	r3, r3, #8
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	4913      	ldr	r1, [pc, #76]	; (8001acc <HAL_Init+0x6c>)
 8001a7e:	5ccb      	ldrb	r3, [r1, r3]
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
 8001a88:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <HAL_Init+0x68>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <HAL_Init+0x6c>)
 8001a94:	5cd3      	ldrb	r3, [r2, r3]
 8001a96:	f003 031f 	and.w	r3, r3, #31
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <HAL_Init+0x70>)
 8001aa2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <HAL_Init+0x74>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f000 f814 	bl	8001ad8 <HAL_InitTick>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e002      	b.n	8001ac0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001aba:	f7ff fd7b 	bl	80015b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	58024400 	.word	0x58024400
 8001acc:	08006f30 	.word	0x08006f30
 8001ad0:	24000018 	.word	0x24000018
 8001ad4:	24000014 	.word	0x24000014

08001ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_InitTick+0x60>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e021      	b.n	8001b30 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_InitTick+0x64>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_InitTick+0x60>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f945 	bl	8001d92 <HAL_SYSTICK_Config>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00e      	b.n	8001b30 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	d80a      	bhi.n	8001b2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f000 f91d 	bl	8001d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b24:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <HAL_InitTick+0x68>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	24000020 	.word	0x24000020
 8001b3c:	24000014 	.word	0x24000014
 8001b40:	2400001c 	.word	0x2400001c

08001b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_IncTick+0x20>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x24>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_IncTick+0x24>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	24000020 	.word	0x24000020
 8001b68:	24000298 	.word	0x24000298

08001b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_GetTick+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	24000298 	.word	0x24000298

08001b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff ffee 	bl	8001b6c <HAL_GetTick>
 8001b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d005      	beq.n	8001baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_Delay+0x44>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001baa:	bf00      	nop
 8001bac:	f7ff ffde 	bl	8001b6c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d8f7      	bhi.n	8001bac <HAL_Delay+0x28>
  {
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	24000020 	.word	0x24000020

08001bcc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <HAL_GetREVID+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0c1b      	lsrs	r3, r3, #16
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	5c001000 	.word	0x5c001000

08001be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <__NVIC_SetPriorityGrouping+0x40>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c00:	4013      	ands	r3, r2
 8001c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c12:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <__NVIC_SetPriorityGrouping+0x40>)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	60d3      	str	r3, [r2, #12]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00
 8001c28:	05fa0000 	.word	0x05fa0000

08001c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <__NVIC_GetPriorityGrouping+0x18>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	f003 0307 	and.w	r3, r3, #7
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	; (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
         );
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d14:	d301      	bcc.n	8001d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00f      	b.n	8001d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <SysTick_Config+0x40>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d22:	210f      	movs	r1, #15
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f7ff ff8e 	bl	8001c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <SysTick_Config+0x40>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <SysTick_Config+0x40>)
 8001d34:	2207      	movs	r2, #7
 8001d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	e000e010 	.word	0xe000e010

08001d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff47 	bl	8001be4 <__NVIC_SetPriorityGrouping>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6c:	f7ff ff5e 	bl	8001c2c <__NVIC_GetPriorityGrouping>
 8001d70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f7ff ff90 	bl	8001c9c <NVIC_EncodePriority>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff5f 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ffb2 	bl	8001d04 <SysTick_Config>
 8001da0:	4603      	mov	r3, r0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001dba:	4b89      	ldr	r3, [pc, #548]	; (8001fe0 <HAL_GPIO_Init+0x234>)
 8001dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dbe:	e194      	b.n	80020ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 8186 	beq.w	80020e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d00b      	beq.n	8001df8 <HAL_GPIO_Init+0x4c>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d007      	beq.n	8001df8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dec:	2b11      	cmp	r3, #17
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b12      	cmp	r3, #18
 8001df6:	d130      	bne.n	8001e5a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e2e:	2201      	movs	r2, #1
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	f003 0201 	and.w	r2, r3, #1
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	2203      	movs	r2, #3
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0xee>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b12      	cmp	r3, #18
 8001e98:	d123      	bne.n	8001ee2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	08da      	lsrs	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3208      	adds	r2, #8
 8001ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	220f      	movs	r2, #15
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	691a      	ldr	r2, [r3, #16]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	08da      	lsrs	r2, r3, #3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3208      	adds	r2, #8
 8001edc:	69b9      	ldr	r1, [r7, #24]
 8001ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	2203      	movs	r2, #3
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0203 	and.w	r2, r3, #3
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80e0 	beq.w	80020e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f24:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <HAL_GPIO_Init+0x238>)
 8001f26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f2a:	4a2e      	ldr	r2, [pc, #184]	; (8001fe4 <HAL_GPIO_Init+0x238>)
 8001f2c:	f043 0302 	orr.w	r3, r3, #2
 8001f30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f34:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <HAL_GPIO_Init+0x238>)
 8001f36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f42:	4a29      	ldr	r2, [pc, #164]	; (8001fe8 <HAL_GPIO_Init+0x23c>)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	220f      	movs	r2, #15
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a20      	ldr	r2, [pc, #128]	; (8001fec <HAL_GPIO_Init+0x240>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d052      	beq.n	8002014 <HAL_GPIO_Init+0x268>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <HAL_GPIO_Init+0x244>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d031      	beq.n	8001fda <HAL_GPIO_Init+0x22e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a1e      	ldr	r2, [pc, #120]	; (8001ff4 <HAL_GPIO_Init+0x248>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d02b      	beq.n	8001fd6 <HAL_GPIO_Init+0x22a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <HAL_GPIO_Init+0x24c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d025      	beq.n	8001fd2 <HAL_GPIO_Init+0x226>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a1c      	ldr	r2, [pc, #112]	; (8001ffc <HAL_GPIO_Init+0x250>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01f      	beq.n	8001fce <HAL_GPIO_Init+0x222>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <HAL_GPIO_Init+0x254>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d019      	beq.n	8001fca <HAL_GPIO_Init+0x21e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a1a      	ldr	r2, [pc, #104]	; (8002004 <HAL_GPIO_Init+0x258>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <HAL_GPIO_Init+0x21a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a19      	ldr	r2, [pc, #100]	; (8002008 <HAL_GPIO_Init+0x25c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00d      	beq.n	8001fc2 <HAL_GPIO_Init+0x216>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a18      	ldr	r2, [pc, #96]	; (800200c <HAL_GPIO_Init+0x260>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d007      	beq.n	8001fbe <HAL_GPIO_Init+0x212>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a17      	ldr	r2, [pc, #92]	; (8002010 <HAL_GPIO_Init+0x264>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <HAL_GPIO_Init+0x20e>
 8001fb6:	2309      	movs	r3, #9
 8001fb8:	e02d      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fba:	230a      	movs	r3, #10
 8001fbc:	e02b      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	e029      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fc2:	2307      	movs	r3, #7
 8001fc4:	e027      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fc6:	2306      	movs	r3, #6
 8001fc8:	e025      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fca:	2305      	movs	r3, #5
 8001fcc:	e023      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fce:	2304      	movs	r3, #4
 8001fd0:	e021      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e01f      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e01d      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e01b      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fde:	bf00      	nop
 8001fe0:	58000080 	.word	0x58000080
 8001fe4:	58024400 	.word	0x58024400
 8001fe8:	58000400 	.word	0x58000400
 8001fec:	58020000 	.word	0x58020000
 8001ff0:	58020400 	.word	0x58020400
 8001ff4:	58020800 	.word	0x58020800
 8001ff8:	58020c00 	.word	0x58020c00
 8001ffc:	58021000 	.word	0x58021000
 8002000:	58021400 	.word	0x58021400
 8002004:	58021800 	.word	0x58021800
 8002008:	58021c00 	.word	0x58021c00
 800200c:	58022000 	.word	0x58022000
 8002010:	58022400 	.word	0x58022400
 8002014:	2300      	movs	r3, #0
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	f002 0203 	and.w	r2, r2, #3
 800201c:	0092      	lsls	r2, r2, #2
 800201e:	4093      	lsls	r3, r2
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002026:	4938      	ldr	r1, [pc, #224]	; (8002108 <HAL_GPIO_Init+0x35c>)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	3302      	adds	r3, #2
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	3301      	adds	r3, #1
 80020e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa22 f303 	lsr.w	r3, r2, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f47f ae63 	bne.w	8001dc0 <HAL_GPIO_Init+0x14>
  }
}
 80020fa:	bf00      	nop
 80020fc:	bf00      	nop
 80020fe:	3724      	adds	r7, #36	; 0x24
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	58000400 	.word	0x58000400

0800210c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	887b      	ldrh	r3, [r7, #2]
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	e001      	b.n	800212e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800212e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_PWREx_ConfigSupply+0x70>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b04      	cmp	r3, #4
 800214e:	d00a      	beq.n	8002166 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002150:	4b16      	ldr	r3, [pc, #88]	; (80021ac <HAL_PWREx_ConfigSupply+0x70>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	429a      	cmp	r2, r3
 800215c:	d001      	beq.n	8002162 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e01f      	b.n	80021a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	e01d      	b.n	80021a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_PWREx_ConfigSupply+0x70>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f023 0207 	bic.w	r2, r3, #7
 800216e:	490f      	ldr	r1, [pc, #60]	; (80021ac <HAL_PWREx_ConfigSupply+0x70>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4313      	orrs	r3, r2
 8002174:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002176:	f7ff fcf9 	bl	8001b6c <HAL_GetTick>
 800217a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800217c:	e009      	b.n	8002192 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800217e:	f7ff fcf5 	bl	8001b6c <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800218c:	d901      	bls.n	8002192 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e007      	b.n	80021a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_PWREx_ConfigSupply+0x70>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800219a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800219e:	d1ee      	bne.n	800217e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	58024800 	.word	0x58024800

080021b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08c      	sub	sp, #48	; 0x30
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e3ff      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 8087 	beq.w	80022de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021d0:	4b99      	ldr	r3, [pc, #612]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021da:	4b97      	ldr	r3, [pc, #604]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80021e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d007      	beq.n	80021f6 <HAL_RCC_OscConfig+0x46>
 80021e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e8:	2b18      	cmp	r3, #24
 80021ea:	d110      	bne.n	800220e <HAL_RCC_OscConfig+0x5e>
 80021ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d10b      	bne.n	800220e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f6:	4b90      	ldr	r3, [pc, #576]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d06c      	beq.n	80022dc <HAL_RCC_OscConfig+0x12c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d168      	bne.n	80022dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e3d9      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002216:	d106      	bne.n	8002226 <HAL_RCC_OscConfig+0x76>
 8002218:	4b87      	ldr	r3, [pc, #540]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a86      	ldr	r2, [pc, #536]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 800221e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	e02e      	b.n	8002284 <HAL_RCC_OscConfig+0xd4>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10c      	bne.n	8002248 <HAL_RCC_OscConfig+0x98>
 800222e:	4b82      	ldr	r3, [pc, #520]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a81      	ldr	r2, [pc, #516]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 8002234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	4b7f      	ldr	r3, [pc, #508]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a7e      	ldr	r2, [pc, #504]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 8002240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e01d      	b.n	8002284 <HAL_RCC_OscConfig+0xd4>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002250:	d10c      	bne.n	800226c <HAL_RCC_OscConfig+0xbc>
 8002252:	4b79      	ldr	r3, [pc, #484]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a78      	ldr	r2, [pc, #480]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 8002258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	4b76      	ldr	r3, [pc, #472]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a75      	ldr	r2, [pc, #468]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 8002264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e00b      	b.n	8002284 <HAL_RCC_OscConfig+0xd4>
 800226c:	4b72      	ldr	r3, [pc, #456]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a71      	ldr	r2, [pc, #452]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 8002272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b6f      	ldr	r3, [pc, #444]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a6e      	ldr	r2, [pc, #440]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 800227e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d013      	beq.n	80022b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7ff fc6e 	bl	8001b6c <HAL_GetTick>
 8002290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002294:	f7ff fc6a 	bl	8001b6c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	; 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e38d      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022a6:	4b64      	ldr	r3, [pc, #400]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0xe4>
 80022b2:	e014      	b.n	80022de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7ff fc5a 	bl	8001b6c <HAL_GetTick>
 80022b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022bc:	f7ff fc56 	bl	8001b6c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	; 0x64
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e379      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022ce:	4b5a      	ldr	r3, [pc, #360]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x10c>
 80022da:	e000      	b.n	80022de <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80ae 	beq.w	8002448 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ec:	4b52      	ldr	r3, [pc, #328]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022f6:	4b50      	ldr	r3, [pc, #320]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d007      	beq.n	8002312 <HAL_RCC_OscConfig+0x162>
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	2b18      	cmp	r3, #24
 8002306:	d13a      	bne.n	800237e <HAL_RCC_OscConfig+0x1ce>
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d135      	bne.n	800237e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002312:	4b49      	ldr	r3, [pc, #292]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_RCC_OscConfig+0x17a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e34b      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232a:	f7ff fc4f 	bl	8001bcc <HAL_GetREVID>
 800232e:	4603      	mov	r3, r0
 8002330:	f241 0203 	movw	r2, #4099	; 0x1003
 8002334:	4293      	cmp	r3, r2
 8002336:	d817      	bhi.n	8002368 <HAL_RCC_OscConfig+0x1b8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b40      	cmp	r3, #64	; 0x40
 800233e:	d108      	bne.n	8002352 <HAL_RCC_OscConfig+0x1a2>
 8002340:	4b3d      	ldr	r3, [pc, #244]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002348:	4a3b      	ldr	r2, [pc, #236]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 800234a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800234e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002350:	e07a      	b.n	8002448 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002352:	4b39      	ldr	r3, [pc, #228]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	031b      	lsls	r3, r3, #12
 8002360:	4935      	ldr	r1, [pc, #212]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002366:	e06f      	b.n	8002448 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002368:	4b33      	ldr	r3, [pc, #204]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	061b      	lsls	r3, r3, #24
 8002376:	4930      	ldr	r1, [pc, #192]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800237c:	e064      	b.n	8002448 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d045      	beq.n	8002412 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002386:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 0219 	bic.w	r2, r3, #25
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	4929      	ldr	r1, [pc, #164]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 8002394:	4313      	orrs	r3, r2
 8002396:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7ff fbe8 	bl	8001b6c <HAL_GetTick>
 800239c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a0:	f7ff fbe4 	bl	8001b6c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e307      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023b2:	4b21      	ldr	r3, [pc, #132]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023be:	f7ff fc05 	bl	8001bcc <HAL_GetREVID>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d817      	bhi.n	80023fc <HAL_RCC_OscConfig+0x24c>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	2b40      	cmp	r3, #64	; 0x40
 80023d2:	d108      	bne.n	80023e6 <HAL_RCC_OscConfig+0x236>
 80023d4:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80023dc:	4a16      	ldr	r2, [pc, #88]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 80023de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e2:	6053      	str	r3, [r2, #4]
 80023e4:	e030      	b.n	8002448 <HAL_RCC_OscConfig+0x298>
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	031b      	lsls	r3, r3, #12
 80023f4:	4910      	ldr	r1, [pc, #64]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	604b      	str	r3, [r1, #4]
 80023fa:	e025      	b.n	8002448 <HAL_RCC_OscConfig+0x298>
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	061b      	lsls	r3, r3, #24
 800240a:	490b      	ldr	r1, [pc, #44]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
 8002410:	e01a      	b.n	8002448 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a08      	ldr	r2, [pc, #32]	; (8002438 <HAL_RCC_OscConfig+0x288>)
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241e:	f7ff fba5 	bl	8001b6c <HAL_GetTick>
 8002422:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002426:	f7ff fba1 	bl	8001b6c <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d903      	bls.n	800243c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e2c4      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
 8002438:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800243c:	4ba4      	ldr	r3, [pc, #656]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ee      	bne.n	8002426 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80a9 	beq.w	80025a8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002456:	4b9e      	ldr	r3, [pc, #632]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800245e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002460:	4b9b      	ldr	r3, [pc, #620]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	2b08      	cmp	r3, #8
 800246a:	d007      	beq.n	800247c <HAL_RCC_OscConfig+0x2cc>
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2b18      	cmp	r3, #24
 8002470:	d13a      	bne.n	80024e8 <HAL_RCC_OscConfig+0x338>
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d135      	bne.n	80024e8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800247c:	4b94      	ldr	r3, [pc, #592]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_OscConfig+0x2e4>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	2b80      	cmp	r3, #128	; 0x80
 800248e:	d001      	beq.n	8002494 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e296      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002494:	f7ff fb9a 	bl	8001bcc <HAL_GetREVID>
 8002498:	4603      	mov	r3, r0
 800249a:	f241 0203 	movw	r2, #4099	; 0x1003
 800249e:	4293      	cmp	r3, r2
 80024a0:	d817      	bhi.n	80024d2 <HAL_RCC_OscConfig+0x322>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	d108      	bne.n	80024bc <HAL_RCC_OscConfig+0x30c>
 80024aa:	4b89      	ldr	r3, [pc, #548]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80024b2:	4a87      	ldr	r2, [pc, #540]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 80024b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024ba:	e075      	b.n	80025a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024bc:	4b84      	ldr	r3, [pc, #528]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	069b      	lsls	r3, r3, #26
 80024ca:	4981      	ldr	r1, [pc, #516]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024d0:	e06a      	b.n	80025a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024d2:	4b7f      	ldr	r3, [pc, #508]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	061b      	lsls	r3, r3, #24
 80024e0:	497b      	ldr	r1, [pc, #492]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024e6:	e05f      	b.n	80025a8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d042      	beq.n	8002576 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80024f0:	4b77      	ldr	r3, [pc, #476]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a76      	ldr	r2, [pc, #472]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 80024f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7ff fb36 	bl	8001b6c <HAL_GetTick>
 8002500:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002504:	f7ff fb32 	bl	8001b6c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e255      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002516:	4b6e      	ldr	r3, [pc, #440]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002522:	f7ff fb53 	bl	8001bcc <HAL_GetREVID>
 8002526:	4603      	mov	r3, r0
 8002528:	f241 0203 	movw	r2, #4099	; 0x1003
 800252c:	4293      	cmp	r3, r2
 800252e:	d817      	bhi.n	8002560 <HAL_RCC_OscConfig+0x3b0>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	2b20      	cmp	r3, #32
 8002536:	d108      	bne.n	800254a <HAL_RCC_OscConfig+0x39a>
 8002538:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002540:	4a63      	ldr	r2, [pc, #396]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 8002542:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002546:	6053      	str	r3, [r2, #4]
 8002548:	e02e      	b.n	80025a8 <HAL_RCC_OscConfig+0x3f8>
 800254a:	4b61      	ldr	r3, [pc, #388]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	069b      	lsls	r3, r3, #26
 8002558:	495d      	ldr	r1, [pc, #372]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
 800255e:	e023      	b.n	80025a8 <HAL_RCC_OscConfig+0x3f8>
 8002560:	4b5b      	ldr	r3, [pc, #364]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	061b      	lsls	r3, r3, #24
 800256e:	4958      	ldr	r1, [pc, #352]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 8002570:	4313      	orrs	r3, r2
 8002572:	60cb      	str	r3, [r1, #12]
 8002574:	e018      	b.n	80025a8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002576:	4b56      	ldr	r3, [pc, #344]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a55      	ldr	r2, [pc, #340]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 800257c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7ff faf3 	bl	8001b6c <HAL_GetTick>
 8002586:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800258a:	f7ff faef 	bl	8001b6c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e212      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800259c:	4b4c      	ldr	r3, [pc, #304]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f0      	bne.n	800258a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d036      	beq.n	8002622 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d019      	beq.n	80025f0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025bc:	4b44      	ldr	r3, [pc, #272]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 80025be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c0:	4a43      	ldr	r2, [pc, #268]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7ff fad0 	bl	8001b6c <HAL_GetTick>
 80025cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d0:	f7ff facc 	bl	8001b6c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e1ef      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025e2:	4b3b      	ldr	r3, [pc, #236]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 80025e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x420>
 80025ee:	e018      	b.n	8002622 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f0:	4b37      	ldr	r3, [pc, #220]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 80025f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f4:	4a36      	ldr	r2, [pc, #216]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fc:	f7ff fab6 	bl	8001b6c <HAL_GetTick>
 8002600:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002604:	f7ff fab2 	bl	8001b6c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e1d5      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002616:	4b2e      	ldr	r3, [pc, #184]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 8002618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	2b00      	cmp	r3, #0
 800262c:	d036      	beq.n	800269c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d019      	beq.n	800266a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002636:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a25      	ldr	r2, [pc, #148]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 800263c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002640:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002642:	f7ff fa93 	bl	8001b6c <HAL_GetTick>
 8002646:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800264a:	f7ff fa8f 	bl	8001b6c <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e1b2      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800265c:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x49a>
 8002668:	e018      	b.n	800269c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a18      	ldr	r2, [pc, #96]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 8002670:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002674:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002676:	f7ff fa79 	bl	8001b6c <HAL_GetTick>
 800267a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800267e:	f7ff fa75 	bl	8001b6c <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e198      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002690:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <HAL_RCC_OscConfig+0x520>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f0      	bne.n	800267e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 8085 	beq.w	80027b4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_RCC_OscConfig+0x524>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <HAL_RCC_OscConfig+0x524>)
 80026b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026b6:	f7ff fa59 	bl	8001b6c <HAL_GetTick>
 80026ba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026bc:	e00c      	b.n	80026d8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80026be:	f7ff fa55 	bl	8001b6c <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b64      	cmp	r3, #100	; 0x64
 80026ca:	d905      	bls.n	80026d8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e178      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
 80026d0:	58024400 	.word	0x58024400
 80026d4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026d8:	4b96      	ldr	r3, [pc, #600]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0ec      	beq.n	80026be <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d106      	bne.n	80026fa <HAL_RCC_OscConfig+0x54a>
 80026ec:	4b92      	ldr	r3, [pc, #584]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f0:	4a91      	ldr	r2, [pc, #580]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6713      	str	r3, [r2, #112]	; 0x70
 80026f8:	e02d      	b.n	8002756 <HAL_RCC_OscConfig+0x5a6>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x56c>
 8002702:	4b8d      	ldr	r3, [pc, #564]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	4a8c      	ldr	r2, [pc, #560]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	6713      	str	r3, [r2, #112]	; 0x70
 800270e:	4b8a      	ldr	r3, [pc, #552]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	4a89      	ldr	r2, [pc, #548]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 8002714:	f023 0304 	bic.w	r3, r3, #4
 8002718:	6713      	str	r3, [r2, #112]	; 0x70
 800271a:	e01c      	b.n	8002756 <HAL_RCC_OscConfig+0x5a6>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b05      	cmp	r3, #5
 8002722:	d10c      	bne.n	800273e <HAL_RCC_OscConfig+0x58e>
 8002724:	4b84      	ldr	r3, [pc, #528]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	4a83      	ldr	r2, [pc, #524]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 800272a:	f043 0304 	orr.w	r3, r3, #4
 800272e:	6713      	str	r3, [r2, #112]	; 0x70
 8002730:	4b81      	ldr	r3, [pc, #516]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	4a80      	ldr	r2, [pc, #512]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6713      	str	r3, [r2, #112]	; 0x70
 800273c:	e00b      	b.n	8002756 <HAL_RCC_OscConfig+0x5a6>
 800273e:	4b7e      	ldr	r3, [pc, #504]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	4a7d      	ldr	r2, [pc, #500]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	6713      	str	r3, [r2, #112]	; 0x70
 800274a:	4b7b      	ldr	r3, [pc, #492]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	4a7a      	ldr	r2, [pc, #488]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d015      	beq.n	800278a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275e:	f7ff fa05 	bl	8001b6c <HAL_GetTick>
 8002762:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002764:	e00a      	b.n	800277c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f7ff fa01 	bl	8001b6c <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f241 3288 	movw	r2, #5000	; 0x1388
 8002774:	4293      	cmp	r3, r2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e122      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800277c:	4b6e      	ldr	r3, [pc, #440]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0ee      	beq.n	8002766 <HAL_RCC_OscConfig+0x5b6>
 8002788:	e014      	b.n	80027b4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278a:	f7ff f9ef 	bl	8001b6c <HAL_GetTick>
 800278e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002790:	e00a      	b.n	80027a8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002792:	f7ff f9eb 	bl	8001b6c <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e10c      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027a8:	4b63      	ldr	r3, [pc, #396]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1ee      	bne.n	8002792 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8101 	beq.w	80029c0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80027be:	4b5e      	ldr	r3, [pc, #376]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027c6:	2b18      	cmp	r3, #24
 80027c8:	f000 80bc 	beq.w	8002944 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	f040 8095 	bne.w	8002900 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d6:	4b58      	ldr	r3, [pc, #352]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a57      	ldr	r2, [pc, #348]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 80027dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7ff f9c3 	bl	8001b6c <HAL_GetTick>
 80027e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ea:	f7ff f9bf 	bl	8001b6c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e0e2      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027fc:	4b4e      	ldr	r3, [pc, #312]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002808:	4b4b      	ldr	r3, [pc, #300]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 800280a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800280c:	4b4b      	ldr	r3, [pc, #300]	; (800293c <HAL_RCC_OscConfig+0x78c>)
 800280e:	4013      	ands	r3, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002818:	0112      	lsls	r2, r2, #4
 800281a:	430a      	orrs	r2, r1
 800281c:	4946      	ldr	r1, [pc, #280]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 800281e:	4313      	orrs	r3, r2
 8002820:	628b      	str	r3, [r1, #40]	; 0x28
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	3b01      	subs	r3, #1
 8002828:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002830:	3b01      	subs	r3, #1
 8002832:	025b      	lsls	r3, r3, #9
 8002834:	b29b      	uxth	r3, r3
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	3b01      	subs	r3, #1
 800283e:	041b      	lsls	r3, r3, #16
 8002840:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284a:	3b01      	subs	r3, #1
 800284c:	061b      	lsls	r3, r3, #24
 800284e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002852:	4939      	ldr	r1, [pc, #228]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 8002854:	4313      	orrs	r3, r2
 8002856:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002858:	4b37      	ldr	r3, [pc, #220]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	4a36      	ldr	r2, [pc, #216]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002864:	4b34      	ldr	r3, [pc, #208]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 8002866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002868:	4b35      	ldr	r3, [pc, #212]	; (8002940 <HAL_RCC_OscConfig+0x790>)
 800286a:	4013      	ands	r3, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002870:	00d2      	lsls	r2, r2, #3
 8002872:	4931      	ldr	r1, [pc, #196]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 8002874:	4313      	orrs	r3, r2
 8002876:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002878:	4b2f      	ldr	r3, [pc, #188]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	f023 020c 	bic.w	r2, r3, #12
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	492c      	ldr	r1, [pc, #176]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 8002886:	4313      	orrs	r3, r2
 8002888:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800288a:	4b2b      	ldr	r3, [pc, #172]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	f023 0202 	bic.w	r2, r3, #2
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	4928      	ldr	r1, [pc, #160]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 8002898:	4313      	orrs	r3, r2
 800289a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800289c:	4b26      	ldr	r3, [pc, #152]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	4a25      	ldr	r2, [pc, #148]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 80028a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a8:	4b23      	ldr	r3, [pc, #140]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	4a22      	ldr	r2, [pc, #136]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 80028ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80028b4:	4b20      	ldr	r3, [pc, #128]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	4a1f      	ldr	r2, [pc, #124]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 80028ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	4a1c      	ldr	r2, [pc, #112]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028cc:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a19      	ldr	r2, [pc, #100]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 80028d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7ff f948 	bl	8001b6c <HAL_GetTick>
 80028dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e0:	f7ff f944 	bl	8001b6c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e067      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x730>
 80028fe:	e05f      	b.n	80029c0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002900:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0c      	ldr	r2, [pc, #48]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 8002906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800290a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7ff f92e 	bl	8001b6c <HAL_GetTick>
 8002910:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002914:	f7ff f92a 	bl	8001b6c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e04d      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x764>
 8002932:	e045      	b.n	80029c0 <HAL_RCC_OscConfig+0x810>
 8002934:	58024800 	.word	0x58024800
 8002938:	58024400 	.word	0x58024400
 800293c:	fffffc0c 	.word	0xfffffc0c
 8002940:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <HAL_RCC_OscConfig+0x81c>)
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <HAL_RCC_OscConfig+0x81c>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	2b01      	cmp	r3, #1
 8002956:	d031      	beq.n	80029bc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	f003 0203 	and.w	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002962:	429a      	cmp	r2, r3
 8002964:	d12a      	bne.n	80029bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002972:	429a      	cmp	r2, r3
 8002974:	d122      	bne.n	80029bc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d11a      	bne.n	80029bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	0a5b      	lsrs	r3, r3, #9
 800298a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002992:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002994:	429a      	cmp	r2, r3
 8002996:	d111      	bne.n	80029bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	0c1b      	lsrs	r3, r3, #16
 800299c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d108      	bne.n	80029bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	0e1b      	lsrs	r3, r3, #24
 80029ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3730      	adds	r7, #48	; 0x30
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	58024400 	.word	0x58024400

080029d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e19c      	b.n	8002d1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e4:	4b8a      	ldr	r3, [pc, #552]	; (8002c10 <HAL_RCC_ClockConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d910      	bls.n	8002a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b87      	ldr	r3, [pc, #540]	; (8002c10 <HAL_RCC_ClockConfig+0x240>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 020f 	bic.w	r2, r3, #15
 80029fa:	4985      	ldr	r1, [pc, #532]	; (8002c10 <HAL_RCC_ClockConfig+0x240>)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b83      	ldr	r3, [pc, #524]	; (8002c10 <HAL_RCC_ClockConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e184      	b.n	8002d1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d010      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	4b7b      	ldr	r3, [pc, #492]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d908      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a30:	4b78      	ldr	r3, [pc, #480]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	4975      	ldr	r1, [pc, #468]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d010      	beq.n	8002a70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	4b70      	ldr	r3, [pc, #448]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d908      	bls.n	8002a70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a5e:	4b6d      	ldr	r3, [pc, #436]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	496a      	ldr	r1, [pc, #424]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d010      	beq.n	8002a9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699a      	ldr	r2, [r3, #24]
 8002a80:	4b64      	ldr	r3, [pc, #400]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d908      	bls.n	8002a9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a8c:	4b61      	ldr	r3, [pc, #388]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	495e      	ldr	r1, [pc, #376]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d010      	beq.n	8002acc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d908      	bls.n	8002acc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002aba:	4b56      	ldr	r3, [pc, #344]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	4953      	ldr	r1, [pc, #332]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d010      	beq.n	8002afa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	4b4d      	ldr	r3, [pc, #308]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d908      	bls.n	8002afa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae8:	4b4a      	ldr	r3, [pc, #296]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f023 020f 	bic.w	r2, r3, #15
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4947      	ldr	r1, [pc, #284]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d055      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b06:	4b43      	ldr	r3, [pc, #268]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	4940      	ldr	r1, [pc, #256]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b20:	4b3c      	ldr	r3, [pc, #240]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d121      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0f6      	b.n	8002d1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d107      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b38:	4b36      	ldr	r3, [pc, #216]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d115      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0ea      	b.n	8002d1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d107      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b50:	4b30      	ldr	r3, [pc, #192]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0de      	b.n	8002d1e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b60:	4b2c      	ldr	r3, [pc, #176]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0d6      	b.n	8002d1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b70:	4b28      	ldr	r3, [pc, #160]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f023 0207 	bic.w	r2, r3, #7
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4925      	ldr	r1, [pc, #148]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b82:	f7fe fff3 	bl	8001b6c <HAL_GetTick>
 8002b86:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8a:	f7fe ffef 	bl	8001b6c <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e0be      	b.n	8002d1e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba0:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d1eb      	bne.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d010      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d208      	bcs.n	8002be0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bce:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f023 020f 	bic.w	r2, r3, #15
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	490e      	ldr	r1, [pc, #56]	; (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_ClockConfig+0x240>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d214      	bcs.n	8002c18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <HAL_RCC_ClockConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 020f 	bic.w	r2, r3, #15
 8002bf6:	4906      	ldr	r1, [pc, #24]	; (8002c10 <HAL_RCC_ClockConfig+0x240>)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <HAL_RCC_ClockConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e086      	b.n	8002d1e <HAL_RCC_ClockConfig+0x34e>
 8002c10:	52002000 	.word	0x52002000
 8002c14:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d010      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	4b3f      	ldr	r3, [pc, #252]	; (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d208      	bcs.n	8002c46 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c34:	4b3c      	ldr	r3, [pc, #240]	; (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	4939      	ldr	r1, [pc, #228]	; (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d010      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d208      	bcs.n	8002c74 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c62:	4b31      	ldr	r3, [pc, #196]	; (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	492e      	ldr	r1, [pc, #184]	; (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d010      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	4b28      	ldr	r3, [pc, #160]	; (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d208      	bcs.n	8002ca2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c90:	4b25      	ldr	r3, [pc, #148]	; (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	4922      	ldr	r1, [pc, #136]	; (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d010      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d208      	bcs.n	8002cd0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4917      	ldr	r1, [pc, #92]	; (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cd0:	f000 f834 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	4912      	ldr	r1, [pc, #72]	; (8002d2c <HAL_RCC_ClockConfig+0x35c>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cee:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	4a0d      	ldr	r2, [pc, #52]	; (8002d2c <HAL_RCC_ClockConfig+0x35c>)
 8002cf8:	5cd3      	ldrb	r3, [r2, r3]
 8002cfa:	f003 031f 	and.w	r3, r3, #31
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
 8002d04:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <HAL_RCC_ClockConfig+0x360>)
 8002d06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d08:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <HAL_RCC_ClockConfig+0x364>)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <HAL_RCC_ClockConfig+0x368>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fee0 	bl	8001ad8 <HAL_InitTick>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	58024400 	.word	0x58024400
 8002d2c:	08006f30 	.word	0x08006f30
 8002d30:	24000018 	.word	0x24000018
 8002d34:	24000014 	.word	0x24000014
 8002d38:	2400001c 	.word	0x2400001c

08002d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b089      	sub	sp, #36	; 0x24
 8002d40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d42:	4bb3      	ldr	r3, [pc, #716]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d4a:	2b18      	cmp	r3, #24
 8002d4c:	f200 8155 	bhi.w	8002ffa <HAL_RCC_GetSysClockFreq+0x2be>
 8002d50:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002dbd 	.word	0x08002dbd
 8002d5c:	08002ffb 	.word	0x08002ffb
 8002d60:	08002ffb 	.word	0x08002ffb
 8002d64:	08002ffb 	.word	0x08002ffb
 8002d68:	08002ffb 	.word	0x08002ffb
 8002d6c:	08002ffb 	.word	0x08002ffb
 8002d70:	08002ffb 	.word	0x08002ffb
 8002d74:	08002ffb 	.word	0x08002ffb
 8002d78:	08002de3 	.word	0x08002de3
 8002d7c:	08002ffb 	.word	0x08002ffb
 8002d80:	08002ffb 	.word	0x08002ffb
 8002d84:	08002ffb 	.word	0x08002ffb
 8002d88:	08002ffb 	.word	0x08002ffb
 8002d8c:	08002ffb 	.word	0x08002ffb
 8002d90:	08002ffb 	.word	0x08002ffb
 8002d94:	08002ffb 	.word	0x08002ffb
 8002d98:	08002de9 	.word	0x08002de9
 8002d9c:	08002ffb 	.word	0x08002ffb
 8002da0:	08002ffb 	.word	0x08002ffb
 8002da4:	08002ffb 	.word	0x08002ffb
 8002da8:	08002ffb 	.word	0x08002ffb
 8002dac:	08002ffb 	.word	0x08002ffb
 8002db0:	08002ffb 	.word	0x08002ffb
 8002db4:	08002ffb 	.word	0x08002ffb
 8002db8:	08002def 	.word	0x08002def
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dbc:	4b94      	ldr	r3, [pc, #592]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d009      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002dc8:	4b91      	ldr	r3, [pc, #580]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	08db      	lsrs	r3, r3, #3
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	4a90      	ldr	r2, [pc, #576]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002dda:	e111      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ddc:	4b8d      	ldr	r3, [pc, #564]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dde:	61bb      	str	r3, [r7, #24]
    break;
 8002de0:	e10e      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002de2:	4b8d      	ldr	r3, [pc, #564]	; (8003018 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002de4:	61bb      	str	r3, [r7, #24]
    break;
 8002de6:	e10b      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002de8:	4b8c      	ldr	r3, [pc, #560]	; (800301c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002dea:	61bb      	str	r3, [r7, #24]
    break;
 8002dec:	e108      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002dee:	4b88      	ldr	r3, [pc, #544]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002df8:	4b85      	ldr	r3, [pc, #532]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e04:	4b82      	ldr	r3, [pc, #520]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002e0e:	4b80      	ldr	r3, [pc, #512]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e12:	08db      	lsrs	r3, r3, #3
 8002e14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	ee07 3a90 	vmov	s15, r3
 8002e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e26:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80e1 	beq.w	8002ff4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	f000 8083 	beq.w	8002f40 <HAL_RCC_GetSysClockFreq+0x204>
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	f200 80a1 	bhi.w	8002f84 <HAL_RCC_GetSysClockFreq+0x248>
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0x114>
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d056      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e4e:	e099      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e50:	4b6f      	ldr	r3, [pc, #444]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0320 	and.w	r3, r3, #32
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d02d      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e5c:	4b6c      	ldr	r3, [pc, #432]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	08db      	lsrs	r3, r3, #3
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	4a6b      	ldr	r2, [pc, #428]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	ee07 3a90 	vmov	s15, r3
 8002e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	ee07 3a90 	vmov	s15, r3
 8002e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e86:	4b62      	ldr	r3, [pc, #392]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8e:	ee07 3a90 	vmov	s15, r3
 8002e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002eb6:	e087      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	ee07 3a90 	vmov	s15, r3
 8002ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003024 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eca:	4b51      	ldr	r3, [pc, #324]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ede:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002efa:	e065      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f06:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003028 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f0e:	4b40      	ldr	r3, [pc, #256]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f16:	ee07 3a90 	vmov	s15, r3
 8002f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f22:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f3e:	e043      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800302c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f52:	4b2f      	ldr	r3, [pc, #188]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f5a:	ee07 3a90 	vmov	s15, r3
 8002f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f82:	e021      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	ee07 3a90 	vmov	s15, r3
 8002f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003028 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f96:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002faa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fc6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	0a5b      	lsrs	r3, r3, #9
 8002fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	ee07 3a90 	vmov	s15, r3
 8002fdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fe0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fec:	ee17 3a90 	vmov	r3, s15
 8002ff0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002ff2:	e005      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61bb      	str	r3, [r7, #24]
    break;
 8002ff8:	e002      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002ffa:	4b07      	ldr	r3, [pc, #28]	; (8003018 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ffc:	61bb      	str	r3, [r7, #24]
    break;
 8002ffe:	bf00      	nop
  }

  return sysclockfreq;
 8003000:	69bb      	ldr	r3, [r7, #24]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3724      	adds	r7, #36	; 0x24
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	58024400 	.word	0x58024400
 8003014:	03d09000 	.word	0x03d09000
 8003018:	003d0900 	.word	0x003d0900
 800301c:	017d7840 	.word	0x017d7840
 8003020:	46000000 	.word	0x46000000
 8003024:	4c742400 	.word	0x4c742400
 8003028:	4a742400 	.word	0x4a742400
 800302c:	4bbebc20 	.word	0x4bbebc20

08003030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003036:	f7ff fe81 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 800303a:	4602      	mov	r2, r0
 800303c:	4b10      	ldr	r3, [pc, #64]	; (8003080 <HAL_RCC_GetHCLKFreq+0x50>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	490f      	ldr	r1, [pc, #60]	; (8003084 <HAL_RCC_GetHCLKFreq+0x54>)
 8003048:	5ccb      	ldrb	r3, [r1, r3]
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	fa22 f303 	lsr.w	r3, r2, r3
 8003052:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003054:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <HAL_RCC_GetHCLKFreq+0x50>)
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	4a09      	ldr	r2, [pc, #36]	; (8003084 <HAL_RCC_GetHCLKFreq+0x54>)
 800305e:	5cd3      	ldrb	r3, [r2, r3]
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	fa22 f303 	lsr.w	r3, r2, r3
 800306a:	4a07      	ldr	r2, [pc, #28]	; (8003088 <HAL_RCC_GetHCLKFreq+0x58>)
 800306c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800306e:	4a07      	ldr	r2, [pc, #28]	; (800308c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003074:	4b04      	ldr	r3, [pc, #16]	; (8003088 <HAL_RCC_GetHCLKFreq+0x58>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	58024400 	.word	0x58024400
 8003084:	08006f30 	.word	0x08006f30
 8003088:	24000018 	.word	0x24000018
 800308c:	24000014 	.word	0x24000014

08003090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003094:	f7ff ffcc 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 8003098:	4602      	mov	r2, r0
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	091b      	lsrs	r3, r3, #4
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	4904      	ldr	r1, [pc, #16]	; (80030b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030a6:	5ccb      	ldrb	r3, [r1, r3]
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	58024400 	.word	0x58024400
 80030b8:	08006f30 	.word	0x08006f30

080030bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80030c0:	f7ff ffb6 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 80030c4:	4602      	mov	r2, r0
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	4904      	ldr	r1, [pc, #16]	; (80030e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030d2:	5ccb      	ldrb	r3, [r1, r3]
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	58024400 	.word	0x58024400
 80030e4:	08006f30 	.word	0x08006f30

080030e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030f0:	2300      	movs	r3, #0
 80030f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030f4:	2300      	movs	r3, #0
 80030f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d03f      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003108:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800310c:	d02a      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800310e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003112:	d824      	bhi.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003114:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003118:	d018      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800311a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800311e:	d81e      	bhi.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003128:	d007      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800312a:	e018      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800312c:	4bab      	ldr	r3, [pc, #684]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	4aaa      	ldr	r2, [pc, #680]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003136:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003138:	e015      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3304      	adds	r3, #4
 800313e:	2102      	movs	r1, #2
 8003140:	4618      	mov	r0, r3
 8003142:	f001 f9bf 	bl	80044c4 <RCCEx_PLL2_Config>
 8003146:	4603      	mov	r3, r0
 8003148:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800314a:	e00c      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3324      	adds	r3, #36	; 0x24
 8003150:	2102      	movs	r1, #2
 8003152:	4618      	mov	r0, r3
 8003154:	f001 fa68 	bl	8004628 <RCCEx_PLL3_Config>
 8003158:	4603      	mov	r3, r0
 800315a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800315c:	e003      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	75fb      	strb	r3, [r7, #23]
      break;
 8003162:	e000      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003166:	7dfb      	ldrb	r3, [r7, #23]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d109      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800316c:	4b9b      	ldr	r3, [pc, #620]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800316e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003170:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003178:	4998      	ldr	r1, [pc, #608]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800317a:	4313      	orrs	r3, r2
 800317c:	650b      	str	r3, [r1, #80]	; 0x50
 800317e:	e001      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003180:	7dfb      	ldrb	r3, [r7, #23]
 8003182:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d03d      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003194:	2b04      	cmp	r3, #4
 8003196:	d826      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003198:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800319a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319e:	bf00      	nop
 80031a0:	080031b5 	.word	0x080031b5
 80031a4:	080031c3 	.word	0x080031c3
 80031a8:	080031d5 	.word	0x080031d5
 80031ac:	080031ed 	.word	0x080031ed
 80031b0:	080031ed 	.word	0x080031ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031b4:	4b89      	ldr	r3, [pc, #548]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	4a88      	ldr	r2, [pc, #544]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031c0:	e015      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3304      	adds	r3, #4
 80031c6:	2100      	movs	r1, #0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f001 f97b 	bl	80044c4 <RCCEx_PLL2_Config>
 80031ce:	4603      	mov	r3, r0
 80031d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031d2:	e00c      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3324      	adds	r3, #36	; 0x24
 80031d8:	2100      	movs	r1, #0
 80031da:	4618      	mov	r0, r3
 80031dc:	f001 fa24 	bl	8004628 <RCCEx_PLL3_Config>
 80031e0:	4603      	mov	r3, r0
 80031e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031e4:	e003      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	75fb      	strb	r3, [r7, #23]
      break;
 80031ea:	e000      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80031ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031f4:	4b79      	ldr	r3, [pc, #484]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f8:	f023 0207 	bic.w	r2, r3, #7
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003200:	4976      	ldr	r1, [pc, #472]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	650b      	str	r3, [r1, #80]	; 0x50
 8003206:	e001      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003214:	2b00      	cmp	r3, #0
 8003216:	d042      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003220:	d02b      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003226:	d825      	bhi.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003228:	2bc0      	cmp	r3, #192	; 0xc0
 800322a:	d028      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800322c:	2bc0      	cmp	r3, #192	; 0xc0
 800322e:	d821      	bhi.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003230:	2b80      	cmp	r3, #128	; 0x80
 8003232:	d016      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003234:	2b80      	cmp	r3, #128	; 0x80
 8003236:	d81d      	bhi.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800323c:	2b40      	cmp	r3, #64	; 0x40
 800323e:	d007      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003240:	e018      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003242:	4b66      	ldr	r3, [pc, #408]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	4a65      	ldr	r2, [pc, #404]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800324c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800324e:	e017      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3304      	adds	r3, #4
 8003254:	2100      	movs	r1, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f001 f934 	bl	80044c4 <RCCEx_PLL2_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003260:	e00e      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3324      	adds	r3, #36	; 0x24
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f001 f9dd 	bl	8004628 <RCCEx_PLL3_Config>
 800326e:	4603      	mov	r3, r0
 8003270:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003272:	e005      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	75fb      	strb	r3, [r7, #23]
      break;
 8003278:	e002      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800327a:	bf00      	nop
 800327c:	e000      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800327e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003280:	7dfb      	ldrb	r3, [r7, #23]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003286:	4b55      	ldr	r3, [pc, #340]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800328a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003292:	4952      	ldr	r1, [pc, #328]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003294:	4313      	orrs	r3, r2
 8003296:	650b      	str	r3, [r1, #80]	; 0x50
 8003298:	e001      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329a:	7dfb      	ldrb	r3, [r7, #23]
 800329c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d049      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032b4:	d030      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80032b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032ba:	d82a      	bhi.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032c0:	d02c      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80032c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032c6:	d824      	bhi.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032cc:	d018      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80032ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d2:	d81e      	bhi.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80032d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032dc:	d007      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80032de:	e018      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032e0:	4b3e      	ldr	r3, [pc, #248]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	4a3d      	ldr	r2, [pc, #244]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032ec:	e017      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3304      	adds	r3, #4
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f001 f8e5 	bl	80044c4 <RCCEx_PLL2_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80032fe:	e00e      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3324      	adds	r3, #36	; 0x24
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f001 f98e 	bl	8004628 <RCCEx_PLL3_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003310:	e005      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	75fb      	strb	r3, [r7, #23]
      break;
 8003316:	e002      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003318:	bf00      	nop
 800331a:	e000      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800331c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800331e:	7dfb      	ldrb	r3, [r7, #23]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10a      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003324:	4b2d      	ldr	r3, [pc, #180]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003328:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003332:	492a      	ldr	r1, [pc, #168]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003334:	4313      	orrs	r3, r2
 8003336:	658b      	str	r3, [r1, #88]	; 0x58
 8003338:	e001      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333a:	7dfb      	ldrb	r3, [r7, #23]
 800333c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003346:	2b00      	cmp	r3, #0
 8003348:	d04c      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003350:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003354:	d030      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003356:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800335a:	d82a      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800335c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003360:	d02c      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003362:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003366:	d824      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003368:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800336c:	d018      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800336e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003372:	d81e      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800337c:	d007      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800337e:	e018      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003380:	4b16      	ldr	r3, [pc, #88]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	4a15      	ldr	r2, [pc, #84]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800338a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800338c:	e017      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3304      	adds	r3, #4
 8003392:	2100      	movs	r1, #0
 8003394:	4618      	mov	r0, r3
 8003396:	f001 f895 	bl	80044c4 <RCCEx_PLL2_Config>
 800339a:	4603      	mov	r3, r0
 800339c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800339e:	e00e      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3324      	adds	r3, #36	; 0x24
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 f93e 	bl	8004628 <RCCEx_PLL3_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033b0:	e005      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
      break;
 80033b6:	e002      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80033b8:	bf00      	nop
 80033ba:	e000      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80033bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10d      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033d2:	4902      	ldr	r1, [pc, #8]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	658b      	str	r3, [r1, #88]	; 0x58
 80033d8:	e004      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80033da:	bf00      	nop
 80033dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
 80033e2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d032      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f4:	2b30      	cmp	r3, #48	; 0x30
 80033f6:	d01c      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80033f8:	2b30      	cmp	r3, #48	; 0x30
 80033fa:	d817      	bhi.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d00c      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003400:	2b20      	cmp	r3, #32
 8003402:	d813      	bhi.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003404:	2b00      	cmp	r3, #0
 8003406:	d016      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003408:	2b10      	cmp	r3, #16
 800340a:	d10f      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800340c:	4baf      	ldr	r3, [pc, #700]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	4aae      	ldr	r2, [pc, #696]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003416:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003418:	e00e      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3304      	adds	r3, #4
 800341e:	2102      	movs	r1, #2
 8003420:	4618      	mov	r0, r3
 8003422:	f001 f84f 	bl	80044c4 <RCCEx_PLL2_Config>
 8003426:	4603      	mov	r3, r0
 8003428:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800342a:	e005      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	75fb      	strb	r3, [r7, #23]
      break;
 8003430:	e002      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003432:	bf00      	nop
 8003434:	e000      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003436:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800343e:	4ba3      	ldr	r3, [pc, #652]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003442:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344a:	49a0      	ldr	r1, [pc, #640]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800344c:	4313      	orrs	r3, r2
 800344e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003450:	e001      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003452:	7dfb      	ldrb	r3, [r7, #23]
 8003454:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d047      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800346a:	d030      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800346c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003470:	d82a      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003472:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003476:	d02c      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003478:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800347c:	d824      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800347e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003482:	d018      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003488:	d81e      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800348e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003492:	d007      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003494:	e018      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003496:	4b8d      	ldr	r3, [pc, #564]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	4a8c      	ldr	r2, [pc, #560]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800349c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034a2:	e017      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 f80a 	bl	80044c4 <RCCEx_PLL2_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034b4:	e00e      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3324      	adds	r3, #36	; 0x24
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f001 f8b3 	bl	8004628 <RCCEx_PLL3_Config>
 80034c2:	4603      	mov	r3, r0
 80034c4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034c6:	e005      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	75fb      	strb	r3, [r7, #23]
      break;
 80034cc:	e002      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80034ce:	bf00      	nop
 80034d0:	e000      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80034d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034da:	4b7c      	ldr	r3, [pc, #496]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034de:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e6:	4979      	ldr	r1, [pc, #484]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	650b      	str	r3, [r1, #80]	; 0x50
 80034ec:	e001      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ee:	7dfb      	ldrb	r3, [r7, #23]
 80034f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d049      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003502:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003506:	d02e      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800350c:	d828      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800350e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003512:	d02a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003514:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003518:	d822      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800351a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800351e:	d026      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003520:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003524:	d81c      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800352a:	d010      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800352c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003530:	d816      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d01d      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353a:	d111      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3304      	adds	r3, #4
 8003540:	2101      	movs	r1, #1
 8003542:	4618      	mov	r0, r3
 8003544:	f000 ffbe 	bl	80044c4 <RCCEx_PLL2_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800354c:	e012      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3324      	adds	r3, #36	; 0x24
 8003552:	2101      	movs	r1, #1
 8003554:	4618      	mov	r0, r3
 8003556:	f001 f867 	bl	8004628 <RCCEx_PLL3_Config>
 800355a:	4603      	mov	r3, r0
 800355c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800355e:	e009      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	75fb      	strb	r3, [r7, #23]
      break;
 8003564:	e006      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003566:	bf00      	nop
 8003568:	e004      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800356a:	bf00      	nop
 800356c:	e002      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800356e:	bf00      	nop
 8003570:	e000      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003572:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003574:	7dfb      	ldrb	r3, [r7, #23]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800357a:	4b54      	ldr	r3, [pc, #336]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800357c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003586:	4951      	ldr	r1, [pc, #324]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003588:	4313      	orrs	r3, r2
 800358a:	650b      	str	r3, [r1, #80]	; 0x50
 800358c:	e001      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358e:	7dfb      	ldrb	r3, [r7, #23]
 8003590:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d04b      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035a8:	d02e      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80035aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035ae:	d828      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b4:	d02a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80035b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ba:	d822      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035c0:	d026      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80035c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035c6:	d81c      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035cc:	d010      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80035ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035d2:	d816      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01d      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80035d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035dc:	d111      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3304      	adds	r3, #4
 80035e2:	2101      	movs	r1, #1
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 ff6d 	bl	80044c4 <RCCEx_PLL2_Config>
 80035ea:	4603      	mov	r3, r0
 80035ec:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80035ee:	e012      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3324      	adds	r3, #36	; 0x24
 80035f4:	2101      	movs	r1, #1
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 f816 	bl	8004628 <RCCEx_PLL3_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003600:	e009      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	75fb      	strb	r3, [r7, #23]
      break;
 8003606:	e006      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003608:	bf00      	nop
 800360a:	e004      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800360c:	bf00      	nop
 800360e:	e002      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003610:	bf00      	nop
 8003612:	e000      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003616:	7dfb      	ldrb	r3, [r7, #23]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800361c:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800361e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003620:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800362a:	4928      	ldr	r1, [pc, #160]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800362c:	4313      	orrs	r3, r2
 800362e:	658b      	str	r3, [r1, #88]	; 0x58
 8003630:	e001      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003632:	7dfb      	ldrb	r3, [r7, #23]
 8003634:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d02f      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800364a:	d00e      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800364c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003650:	d814      	bhi.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003652:	2b00      	cmp	r3, #0
 8003654:	d015      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800365a:	d10f      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800365c:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	4a1a      	ldr	r2, [pc, #104]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003666:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003668:	e00c      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3304      	adds	r3, #4
 800366e:	2101      	movs	r1, #1
 8003670:	4618      	mov	r0, r3
 8003672:	f000 ff27 	bl	80044c4 <RCCEx_PLL2_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800367a:	e003      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	75fb      	strb	r3, [r7, #23]
      break;
 8003680:	e000      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003682:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003684:	7dfb      	ldrb	r3, [r7, #23]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800368a:	4b10      	ldr	r3, [pc, #64]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800368c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003696:	490d      	ldr	r1, [pc, #52]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003698:	4313      	orrs	r3, r2
 800369a:	650b      	str	r3, [r1, #80]	; 0x50
 800369c:	e001      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369e:	7dfb      	ldrb	r3, [r7, #23]
 80036a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d033      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d81c      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80036b6:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80036b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036bc:	080036f7 	.word	0x080036f7
 80036c0:	080036d1 	.word	0x080036d1
 80036c4:	080036df 	.word	0x080036df
 80036c8:	080036f7 	.word	0x080036f7
 80036cc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d0:	4bb8      	ldr	r3, [pc, #736]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	4ab7      	ldr	r2, [pc, #732]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80036d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80036dc:	e00c      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3304      	adds	r3, #4
 80036e2:	2102      	movs	r1, #2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 feed 	bl	80044c4 <RCCEx_PLL2_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80036ee:	e003      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	75fb      	strb	r3, [r7, #23]
      break;
 80036f4:	e000      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80036f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036f8:	7dfb      	ldrb	r3, [r7, #23]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80036fe:	4bad      	ldr	r3, [pc, #692]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003702:	f023 0203 	bic.w	r2, r3, #3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	49aa      	ldr	r1, [pc, #680]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800370c:	4313      	orrs	r3, r2
 800370e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003710:	e001      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003712:	7dfb      	ldrb	r3, [r7, #23]
 8003714:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 8086 	beq.w	8003830 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003724:	4ba4      	ldr	r3, [pc, #656]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4aa3      	ldr	r2, [pc, #652]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800372a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003730:	f7fe fa1c 	bl	8001b6c <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003736:	e009      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003738:	f7fe fa18 	bl	8001b6c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	; 0x64
 8003744:	d902      	bls.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	75fb      	strb	r3, [r7, #23]
        break;
 800374a:	e005      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800374c:	4b9a      	ldr	r3, [pc, #616]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ef      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d166      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800375e:	4b95      	ldr	r3, [pc, #596]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003760:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003768:	4053      	eors	r3, r2
 800376a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376e:	2b00      	cmp	r3, #0
 8003770:	d013      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003772:	4b90      	ldr	r3, [pc, #576]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800377a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800377c:	4b8d      	ldr	r3, [pc, #564]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	4a8c      	ldr	r2, [pc, #560]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003786:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003788:	4b8a      	ldr	r3, [pc, #552]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	4a89      	ldr	r2, [pc, #548]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800378e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003792:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003794:	4a87      	ldr	r2, [pc, #540]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a4:	d115      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a6:	f7fe f9e1 	bl	8001b6c <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037ac:	e00b      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ae:	f7fe f9dd 	bl	8001b6c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037bc:	4293      	cmp	r3, r2
 80037be:	d902      	bls.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	75fb      	strb	r3, [r7, #23]
            break;
 80037c4:	e005      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037c6:	4b7b      	ldr	r3, [pc, #492]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0ed      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d126      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037e6:	d10d      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80037e8:	4b72      	ldr	r3, [pc, #456]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037f6:	0919      	lsrs	r1, r3, #4
 80037f8:	4b70      	ldr	r3, [pc, #448]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80037fa:	400b      	ands	r3, r1
 80037fc:	496d      	ldr	r1, [pc, #436]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	610b      	str	r3, [r1, #16]
 8003802:	e005      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003804:	4b6b      	ldr	r3, [pc, #428]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	4a6a      	ldr	r2, [pc, #424]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800380a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800380e:	6113      	str	r3, [r2, #16]
 8003810:	4b68      	ldr	r3, [pc, #416]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003812:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800381a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381e:	4965      	ldr	r1, [pc, #404]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003820:	4313      	orrs	r3, r2
 8003822:	670b      	str	r3, [r1, #112]	; 0x70
 8003824:	e004      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003826:	7dfb      	ldrb	r3, [r7, #23]
 8003828:	75bb      	strb	r3, [r7, #22]
 800382a:	e001      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382c:	7dfb      	ldrb	r3, [r7, #23]
 800382e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d07e      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003840:	2b28      	cmp	r3, #40	; 0x28
 8003842:	d867      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003844:	a201      	add	r2, pc, #4	; (adr r2, 800384c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384a:	bf00      	nop
 800384c:	0800391b 	.word	0x0800391b
 8003850:	08003915 	.word	0x08003915
 8003854:	08003915 	.word	0x08003915
 8003858:	08003915 	.word	0x08003915
 800385c:	08003915 	.word	0x08003915
 8003860:	08003915 	.word	0x08003915
 8003864:	08003915 	.word	0x08003915
 8003868:	08003915 	.word	0x08003915
 800386c:	080038f1 	.word	0x080038f1
 8003870:	08003915 	.word	0x08003915
 8003874:	08003915 	.word	0x08003915
 8003878:	08003915 	.word	0x08003915
 800387c:	08003915 	.word	0x08003915
 8003880:	08003915 	.word	0x08003915
 8003884:	08003915 	.word	0x08003915
 8003888:	08003915 	.word	0x08003915
 800388c:	08003903 	.word	0x08003903
 8003890:	08003915 	.word	0x08003915
 8003894:	08003915 	.word	0x08003915
 8003898:	08003915 	.word	0x08003915
 800389c:	08003915 	.word	0x08003915
 80038a0:	08003915 	.word	0x08003915
 80038a4:	08003915 	.word	0x08003915
 80038a8:	08003915 	.word	0x08003915
 80038ac:	0800391b 	.word	0x0800391b
 80038b0:	08003915 	.word	0x08003915
 80038b4:	08003915 	.word	0x08003915
 80038b8:	08003915 	.word	0x08003915
 80038bc:	08003915 	.word	0x08003915
 80038c0:	08003915 	.word	0x08003915
 80038c4:	08003915 	.word	0x08003915
 80038c8:	08003915 	.word	0x08003915
 80038cc:	0800391b 	.word	0x0800391b
 80038d0:	08003915 	.word	0x08003915
 80038d4:	08003915 	.word	0x08003915
 80038d8:	08003915 	.word	0x08003915
 80038dc:	08003915 	.word	0x08003915
 80038e0:	08003915 	.word	0x08003915
 80038e4:	08003915 	.word	0x08003915
 80038e8:	08003915 	.word	0x08003915
 80038ec:	0800391b 	.word	0x0800391b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3304      	adds	r3, #4
 80038f4:	2101      	movs	r1, #1
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fde4 	bl	80044c4 <RCCEx_PLL2_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003900:	e00c      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3324      	adds	r3, #36	; 0x24
 8003906:	2101      	movs	r1, #1
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fe8d 	bl	8004628 <RCCEx_PLL3_Config>
 800390e:	4603      	mov	r3, r0
 8003910:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003912:	e003      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	75fb      	strb	r3, [r7, #23]
      break;
 8003918:	e000      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800391a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800391c:	7dfb      	ldrb	r3, [r7, #23]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003922:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003926:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800392e:	4921      	ldr	r1, [pc, #132]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003930:	4313      	orrs	r3, r2
 8003932:	654b      	str	r3, [r1, #84]	; 0x54
 8003934:	e001      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003936:	7dfb      	ldrb	r3, [r7, #23]
 8003938:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d03e      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394a:	2b05      	cmp	r3, #5
 800394c:	d820      	bhi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800394e:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003954:	08003997 	.word	0x08003997
 8003958:	0800396d 	.word	0x0800396d
 800395c:	0800397f 	.word	0x0800397f
 8003960:	08003997 	.word	0x08003997
 8003964:	08003997 	.word	0x08003997
 8003968:	08003997 	.word	0x08003997
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fda6 	bl	80044c4 <RCCEx_PLL2_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800397c:	e00c      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3324      	adds	r3, #36	; 0x24
 8003982:	2101      	movs	r1, #1
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fe4f 	bl	8004628 <RCCEx_PLL3_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800398e:	e003      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	75fb      	strb	r3, [r7, #23]
      break;
 8003994:	e000      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003996:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d110      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a2:	f023 0207 	bic.w	r2, r3, #7
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039aa:	4902      	ldr	r1, [pc, #8]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	654b      	str	r3, [r1, #84]	; 0x54
 80039b0:	e008      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80039b2:	bf00      	nop
 80039b4:	58024400 	.word	0x58024400
 80039b8:	58024800 	.word	0x58024800
 80039bc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
 80039c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d039      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d6:	2b05      	cmp	r3, #5
 80039d8:	d820      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80039da:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	08003a23 	.word	0x08003a23
 80039e4:	080039f9 	.word	0x080039f9
 80039e8:	08003a0b 	.word	0x08003a0b
 80039ec:	08003a23 	.word	0x08003a23
 80039f0:	08003a23 	.word	0x08003a23
 80039f4:	08003a23 	.word	0x08003a23
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3304      	adds	r3, #4
 80039fc:	2101      	movs	r1, #1
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fd60 	bl	80044c4 <RCCEx_PLL2_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a08:	e00c      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3324      	adds	r3, #36	; 0x24
 8003a0e:	2101      	movs	r1, #1
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fe09 	bl	8004628 <RCCEx_PLL3_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a1a:	e003      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a20:	e000      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a24:	7dfb      	ldrb	r3, [r7, #23]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a2a:	4bb7      	ldr	r3, [pc, #732]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	f023 0207 	bic.w	r2, r3, #7
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a38:	49b3      	ldr	r1, [pc, #716]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	658b      	str	r3, [r1, #88]	; 0x58
 8003a3e:	e001      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a40:	7dfb      	ldrb	r3, [r7, #23]
 8003a42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d04b      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a5a:	d02e      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a60:	d828      	bhi.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a66:	d02a      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6c:	d822      	bhi.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003a6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a72:	d026      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003a74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a78:	d81c      	bhi.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a7e:	d010      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a84:	d816      	bhi.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d01d      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003a8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a8e:	d111      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3304      	adds	r3, #4
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fd14 	bl	80044c4 <RCCEx_PLL2_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003aa0:	e012      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3324      	adds	r3, #36	; 0x24
 8003aa6:	2102      	movs	r1, #2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fdbd 	bl	8004628 <RCCEx_PLL3_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ab2:	e009      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab8:	e006      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003aba:	bf00      	nop
 8003abc:	e004      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e002      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e000      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003ac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10a      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ace:	4b8e      	ldr	r3, [pc, #568]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003adc:	498a      	ldr	r1, [pc, #552]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	654b      	str	r3, [r1, #84]	; 0x54
 8003ae2:	e001      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae4:	7dfb      	ldrb	r3, [r7, #23]
 8003ae6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d04b      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003afa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003afe:	d02e      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003b00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b04:	d828      	bhi.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0a:	d02a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b10:	d822      	bhi.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b16:	d026      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003b18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b1c:	d81c      	bhi.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b22:	d010      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b28:	d816      	bhi.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d01d      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b32:	d111      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3304      	adds	r3, #4
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fcc2 	bl	80044c4 <RCCEx_PLL2_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b44:	e012      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3324      	adds	r3, #36	; 0x24
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 fd6b 	bl	8004628 <RCCEx_PLL3_Config>
 8003b52:	4603      	mov	r3, r0
 8003b54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b56:	e009      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b5c:	e006      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b5e:	bf00      	nop
 8003b60:	e004      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b62:	bf00      	nop
 8003b64:	e002      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b66:	bf00      	nop
 8003b68:	e000      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10a      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b72:	4b65      	ldr	r3, [pc, #404]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b76:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b80:	4961      	ldr	r1, [pc, #388]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	658b      	str	r3, [r1, #88]	; 0x58
 8003b86:	e001      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b88:	7dfb      	ldrb	r3, [r7, #23]
 8003b8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d04b      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b9e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ba2:	d02e      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003ba4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ba8:	d828      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bae:	d02a      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb4:	d822      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003bb6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003bba:	d026      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003bbc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003bc0:	d81c      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bc6:	d010      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bcc:	d816      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d01d      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd6:	d111      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fc70 	bl	80044c4 <RCCEx_PLL2_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003be8:	e012      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3324      	adds	r3, #36	; 0x24
 8003bee:	2102      	movs	r1, #2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fd19 	bl	8004628 <RCCEx_PLL3_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003bfa:	e009      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8003c00:	e006      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c02:	bf00      	nop
 8003c04:	e004      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c06:	bf00      	nop
 8003c08:	e002      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c0a:	bf00      	nop
 8003c0c:	e000      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003c16:	4b3c      	ldr	r3, [pc, #240]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c24:	4938      	ldr	r1, [pc, #224]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	658b      	str	r3, [r1, #88]	; 0x58
 8003c2a:	e001      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c46:	d10a      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3324      	adds	r3, #36	; 0x24
 8003c4c:	2102      	movs	r1, #2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fcea 	bl	8004628 <RCCEx_PLL3_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c5e:	4b2a      	ldr	r3, [pc, #168]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c6c:	4926      	ldr	r1, [pc, #152]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d01a      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c88:	d10a      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3324      	adds	r3, #36	; 0x24
 8003c8e:	2102      	movs	r1, #2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fcc9 	bl	8004628 <RCCEx_PLL3_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ca0:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cae:	4916      	ldr	r1, [pc, #88]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d036      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cca:	d01f      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003ccc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cd0:	d817      	bhi.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cda:	d009      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003cdc:	e011      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fbed 	bl	80044c4 <RCCEx_PLL2_Config>
 8003cea:	4603      	mov	r3, r0
 8003cec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003cee:	e00e      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3324      	adds	r3, #36	; 0x24
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fc96 	bl	8004628 <RCCEx_PLL3_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d00:	e005      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	75fb      	strb	r3, [r7, #23]
      break;
 8003d06:	e002      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003d08:	58024400 	.word	0x58024400
      break;
 8003d0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d0e:	7dfb      	ldrb	r3, [r7, #23]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10a      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d14:	4b8b      	ldr	r3, [pc, #556]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d22:	4988      	ldr	r1, [pc, #544]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	658b      	str	r3, [r1, #88]	; 0x58
 8003d28:	e001      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
 8003d2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d033      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d44:	d01c      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003d46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d4a:	d816      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d50:	d003      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003d52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d56:	d007      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003d58:	e00f      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d5a:	4b7a      	ldr	r3, [pc, #488]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	4a79      	ldr	r2, [pc, #484]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d66:	e00c      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3324      	adds	r3, #36	; 0x24
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fc5a 	bl	8004628 <RCCEx_PLL3_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d78:	e003      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d7e:	e000      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003d80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d82:	7dfb      	ldrb	r3, [r7, #23]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10a      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d88:	4b6e      	ldr	r3, [pc, #440]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d96:	496b      	ldr	r1, [pc, #428]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	654b      	str	r3, [r1, #84]	; 0x54
 8003d9c:	e001      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9e:	7dfb      	ldrb	r3, [r7, #23]
 8003da0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d029      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8003db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dba:	d007      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003dbc:	e00f      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dbe:	4b61      	ldr	r3, [pc, #388]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	4a60      	ldr	r2, [pc, #384]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003dca:	e00b      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	2102      	movs	r1, #2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fb76 	bl	80044c4 <RCCEx_PLL2_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ddc:	e002      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	75fb      	strb	r3, [r7, #23]
      break;
 8003de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003de4:	7dfb      	ldrb	r3, [r7, #23]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003dea:	4b56      	ldr	r3, [pc, #344]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df6:	4953      	ldr	r1, [pc, #332]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003dfc:	e001      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
 8003e00:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3324      	adds	r3, #36	; 0x24
 8003e12:	2102      	movs	r1, #2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fc07 	bl	8004628 <RCCEx_PLL3_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d030      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e38:	d017      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e3e:	d811      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e44:	d013      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4a:	d80b      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d010      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e54:	d106      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e56:	4b3b      	ldr	r3, [pc, #236]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	4a3a      	ldr	r2, [pc, #232]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003e62:	e007      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	75fb      	strb	r3, [r7, #23]
      break;
 8003e68:	e004      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e002      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003e6e:	bf00      	nop
 8003e70:	e000      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003e72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e7a:	4b32      	ldr	r3, [pc, #200]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e86:	492f      	ldr	r1, [pc, #188]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	654b      	str	r3, [r1, #84]	; 0x54
 8003e8c:	e001      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
 8003e90:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e9e:	4b29      	ldr	r3, [pc, #164]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4926      	ldr	r1, [pc, #152]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d009      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003ebc:	4b21      	ldr	r3, [pc, #132]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003eca:	491e      	ldr	r1, [pc, #120]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003edc:	4b19      	ldr	r3, [pc, #100]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ee8:	4916      	ldr	r1, [pc, #88]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00d      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003efa:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	4a11      	ldr	r2, [pc, #68]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003f00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f04:	6113      	str	r3, [r2, #16]
 8003f06:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003f10:	490c      	ldr	r1, [pc, #48]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	da08      	bge.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f1e:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2a:	4906      	ldr	r1, [pc, #24]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003f30:	7dbb      	ldrb	r3, [r7, #22]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    return HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	e000      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xe54>
  }
  return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	58024400 	.word	0x58024400

08003f48 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003f4c:	f7ff f870 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 8003f50:	4602      	mov	r2, r0
 8003f52:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	091b      	lsrs	r3, r3, #4
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	4904      	ldr	r1, [pc, #16]	; (8003f70 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003f5e:	5ccb      	ldrb	r3, [r1, r3]
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	58024400 	.word	0x58024400
 8003f70:	08006f30 	.word	0x08006f30

08003f74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b089      	sub	sp, #36	; 0x24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f7c:	4ba1      	ldr	r3, [pc, #644]	; (8004204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003f86:	4b9f      	ldr	r3, [pc, #636]	; (8004204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	0b1b      	lsrs	r3, r3, #12
 8003f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f90:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f92:	4b9c      	ldr	r3, [pc, #624]	; (8004204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	091b      	lsrs	r3, r3, #4
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003f9e:	4b99      	ldr	r3, [pc, #612]	; (8004204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa2:	08db      	lsrs	r3, r3, #3
 8003fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 8111 	beq.w	80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	f000 8083 	beq.w	80040d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	f200 80a1 	bhi.w	8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d056      	beq.n	800408c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003fde:	e099      	b.n	8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fe0:	4b88      	ldr	r3, [pc, #544]	; (8004204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d02d      	beq.n	8004048 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fec:	4b85      	ldr	r3, [pc, #532]	; (8004204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	08db      	lsrs	r3, r3, #3
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	4a84      	ldr	r2, [pc, #528]	; (8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	ee07 3a90 	vmov	s15, r3
 8004004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004016:	4b7b      	ldr	r3, [pc, #492]	; (8004204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004026:	ed97 6a03 	vldr	s12, [r7, #12]
 800402a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800420c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800402e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800403a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800403e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004042:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004046:	e087      	b.n	8004158 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004052:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004210 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800405a:	4b6a      	ldr	r3, [pc, #424]	; (8004204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004062:	ee07 3a90 	vmov	s15, r3
 8004066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800406a:	ed97 6a03 	vldr	s12, [r7, #12]
 800406e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800420c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800407a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800407e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004086:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800408a:	e065      	b.n	8004158 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	ee07 3a90 	vmov	s15, r3
 8004092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004096:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800409a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800409e:	4b59      	ldr	r3, [pc, #356]	; (8004204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80040b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800420c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040ce:	e043      	b.n	8004158 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	ee07 3a90 	vmov	s15, r3
 80040d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80040de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040e2:	4b48      	ldr	r3, [pc, #288]	; (8004204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800420c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800410a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800410e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004112:	e021      	b.n	8004158 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004126:	4b37      	ldr	r3, [pc, #220]	; (8004204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412e:	ee07 3a90 	vmov	s15, r3
 8004132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004136:	ed97 6a03 	vldr	s12, [r7, #12]
 800413a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800420c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800413e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800414a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800414e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004152:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004156:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004158:	4b2a      	ldr	r3, [pc, #168]	; (8004204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	0a5b      	lsrs	r3, r3, #9
 800415e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004162:	ee07 3a90 	vmov	s15, r3
 8004166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800416e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004172:	edd7 6a07 	vldr	s13, [r7, #28]
 8004176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800417a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800417e:	ee17 2a90 	vmov	r2, s15
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004186:	4b1f      	ldr	r3, [pc, #124]	; (8004204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	0c1b      	lsrs	r3, r3, #16
 800418c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004190:	ee07 3a90 	vmov	s15, r3
 8004194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004198:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800419c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80041a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ac:	ee17 2a90 	vmov	r2, s15
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80041b4:	4b13      	ldr	r3, [pc, #76]	; (8004204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	0e1b      	lsrs	r3, r3, #24
 80041ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80041d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041da:	ee17 2a90 	vmov	r2, s15
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80041e2:	e008      	b.n	80041f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	609a      	str	r2, [r3, #8]
}
 80041f6:	bf00      	nop
 80041f8:	3724      	adds	r7, #36	; 0x24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	58024400 	.word	0x58024400
 8004208:	03d09000 	.word	0x03d09000
 800420c:	46000000 	.word	0x46000000
 8004210:	4c742400 	.word	0x4c742400
 8004214:	4a742400 	.word	0x4a742400
 8004218:	4bbebc20 	.word	0x4bbebc20

0800421c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800421c:	b480      	push	{r7}
 800421e:	b089      	sub	sp, #36	; 0x24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004224:	4ba1      	ldr	r3, [pc, #644]	; (80044ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800422e:	4b9f      	ldr	r3, [pc, #636]	; (80044ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004232:	0d1b      	lsrs	r3, r3, #20
 8004234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004238:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800423a:	4b9c      	ldr	r3, [pc, #624]	; (80044ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423e:	0a1b      	lsrs	r3, r3, #8
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004246:	4b99      	ldr	r3, [pc, #612]	; (80044ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424a:	08db      	lsrs	r3, r3, #3
 800424c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	fb02 f303 	mul.w	r3, r2, r3
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8111 	beq.w	800448c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	2b02      	cmp	r3, #2
 800426e:	f000 8083 	beq.w	8004378 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b02      	cmp	r3, #2
 8004276:	f200 80a1 	bhi.w	80043bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d056      	beq.n	8004334 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004286:	e099      	b.n	80043bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004288:	4b88      	ldr	r3, [pc, #544]	; (80044ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d02d      	beq.n	80042f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004294:	4b85      	ldr	r3, [pc, #532]	; (80044ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	08db      	lsrs	r3, r3, #3
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	4a84      	ldr	r2, [pc, #528]	; (80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
 80042a4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	ee07 3a90 	vmov	s15, r3
 80042ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	ee07 3a90 	vmov	s15, r3
 80042b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042be:	4b7b      	ldr	r3, [pc, #492]	; (80044ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80042d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80044b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80042ee:	e087      	b.n	8004400 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80044b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80042fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004302:	4b6a      	ldr	r3, [pc, #424]	; (80044ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004312:	ed97 6a03 	vldr	s12, [r7, #12]
 8004316:	eddf 5a67 	vldr	s11, [pc, #412]	; 80044b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800431a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004332:	e065      	b.n	8004400 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80044bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004346:	4b59      	ldr	r3, [pc, #356]	; (80044ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004356:	ed97 6a03 	vldr	s12, [r7, #12]
 800435a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80044b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800435e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800436a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004372:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004376:	e043      	b.n	8004400 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004382:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80044c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438a:	4b48      	ldr	r3, [pc, #288]	; (80044ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439a:	ed97 6a03 	vldr	s12, [r7, #12]
 800439e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80044b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043ba:	e021      	b.n	8004400 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80044bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ce:	4b37      	ldr	r3, [pc, #220]	; (80044ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043de:	ed97 6a03 	vldr	s12, [r7, #12]
 80043e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80044b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004400:	4b2a      	ldr	r3, [pc, #168]	; (80044ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	0a5b      	lsrs	r3, r3, #9
 8004406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004412:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004416:	ee37 7a87 	vadd.f32	s14, s15, s14
 800441a:	edd7 6a07 	vldr	s13, [r7, #28]
 800441e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004426:	ee17 2a90 	vmov	r2, s15
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800442e:	4b1f      	ldr	r3, [pc, #124]	; (80044ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	0c1b      	lsrs	r3, r3, #16
 8004434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004438:	ee07 3a90 	vmov	s15, r3
 800443c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004440:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004444:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004448:	edd7 6a07 	vldr	s13, [r7, #28]
 800444c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004454:	ee17 2a90 	vmov	r2, s15
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800445c:	4b13      	ldr	r3, [pc, #76]	; (80044ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	0e1b      	lsrs	r3, r3, #24
 8004462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004472:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004476:	edd7 6a07 	vldr	s13, [r7, #28]
 800447a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800447e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004482:	ee17 2a90 	vmov	r2, s15
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800448a:	e008      	b.n	800449e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	609a      	str	r2, [r3, #8]
}
 800449e:	bf00      	nop
 80044a0:	3724      	adds	r7, #36	; 0x24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	58024400 	.word	0x58024400
 80044b0:	03d09000 	.word	0x03d09000
 80044b4:	46000000 	.word	0x46000000
 80044b8:	4c742400 	.word	0x4c742400
 80044bc:	4a742400 	.word	0x4a742400
 80044c0:	4bbebc20 	.word	0x4bbebc20

080044c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044d2:	4b53      	ldr	r3, [pc, #332]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d101      	bne.n	80044e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e099      	b.n	8004616 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80044e2:	4b4f      	ldr	r3, [pc, #316]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a4e      	ldr	r2, [pc, #312]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 80044e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ee:	f7fd fb3d 	bl	8001b6c <HAL_GetTick>
 80044f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044f4:	e008      	b.n	8004508 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80044f6:	f7fd fb39 	bl	8001b6c <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e086      	b.n	8004616 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004508:	4b45      	ldr	r3, [pc, #276]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1f0      	bne.n	80044f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004514:	4b42      	ldr	r3, [pc, #264]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 8004516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004518:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	031b      	lsls	r3, r3, #12
 8004522:	493f      	ldr	r1, [pc, #252]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 8004524:	4313      	orrs	r3, r2
 8004526:	628b      	str	r3, [r1, #40]	; 0x28
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	3b01      	subs	r3, #1
 800452e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	3b01      	subs	r3, #1
 8004538:	025b      	lsls	r3, r3, #9
 800453a:	b29b      	uxth	r3, r3
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	3b01      	subs	r3, #1
 8004544:	041b      	lsls	r3, r3, #16
 8004546:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	3b01      	subs	r3, #1
 8004552:	061b      	lsls	r3, r3, #24
 8004554:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004558:	4931      	ldr	r1, [pc, #196]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 800455a:	4313      	orrs	r3, r2
 800455c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800455e:	4b30      	ldr	r3, [pc, #192]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	492d      	ldr	r1, [pc, #180]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 800456c:	4313      	orrs	r3, r2
 800456e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004570:	4b2b      	ldr	r3, [pc, #172]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	f023 0220 	bic.w	r2, r3, #32
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	4928      	ldr	r1, [pc, #160]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 800457e:	4313      	orrs	r3, r2
 8004580:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004582:	4b27      	ldr	r3, [pc, #156]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 8004584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004586:	4a26      	ldr	r2, [pc, #152]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 8004588:	f023 0310 	bic.w	r3, r3, #16
 800458c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800458e:	4b24      	ldr	r3, [pc, #144]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 8004590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004592:	4b24      	ldr	r3, [pc, #144]	; (8004624 <RCCEx_PLL2_Config+0x160>)
 8004594:	4013      	ands	r3, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	69d2      	ldr	r2, [r2, #28]
 800459a:	00d2      	lsls	r2, r2, #3
 800459c:	4920      	ldr	r1, [pc, #128]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80045a2:	4b1f      	ldr	r3, [pc, #124]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	4a1e      	ldr	r2, [pc, #120]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 80045a8:	f043 0310 	orr.w	r3, r3, #16
 80045ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80045b4:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	4a19      	ldr	r2, [pc, #100]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 80045ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045c0:	e00f      	b.n	80045e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d106      	bne.n	80045d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80045c8:	4b15      	ldr	r3, [pc, #84]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	4a14      	ldr	r2, [pc, #80]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 80045ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045d4:	e005      	b.n	80045e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80045d6:	4b12      	ldr	r3, [pc, #72]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	4a11      	ldr	r2, [pc, #68]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 80045dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80045e2:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a0e      	ldr	r2, [pc, #56]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 80045e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ee:	f7fd fabd 	bl	8001b6c <HAL_GetTick>
 80045f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045f4:	e008      	b.n	8004608 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80045f6:	f7fd fab9 	bl	8001b6c <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e006      	b.n	8004616 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <RCCEx_PLL2_Config+0x15c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0f0      	beq.n	80045f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004614:	7bfb      	ldrb	r3, [r7, #15]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	58024400 	.word	0x58024400
 8004624:	ffff0007 	.word	0xffff0007

08004628 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004636:	4b53      	ldr	r3, [pc, #332]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	2b03      	cmp	r3, #3
 8004640:	d101      	bne.n	8004646 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e099      	b.n	800477a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004646:	4b4f      	ldr	r3, [pc, #316]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a4e      	ldr	r2, [pc, #312]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 800464c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004650:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004652:	f7fd fa8b 	bl	8001b6c <HAL_GetTick>
 8004656:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004658:	e008      	b.n	800466c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800465a:	f7fd fa87 	bl	8001b6c <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e086      	b.n	800477a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800466c:	4b45      	ldr	r3, [pc, #276]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1f0      	bne.n	800465a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004678:	4b42      	ldr	r3, [pc, #264]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	051b      	lsls	r3, r3, #20
 8004686:	493f      	ldr	r1, [pc, #252]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 8004688:	4313      	orrs	r3, r2
 800468a:	628b      	str	r3, [r1, #40]	; 0x28
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	3b01      	subs	r3, #1
 8004692:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	3b01      	subs	r3, #1
 800469c:	025b      	lsls	r3, r3, #9
 800469e:	b29b      	uxth	r3, r3
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	041b      	lsls	r3, r3, #16
 80046aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	061b      	lsls	r3, r3, #24
 80046b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046bc:	4931      	ldr	r1, [pc, #196]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80046c2:	4b30      	ldr	r3, [pc, #192]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	492d      	ldr	r1, [pc, #180]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80046d4:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	4928      	ldr	r1, [pc, #160]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80046e6:	4b27      	ldr	r3, [pc, #156]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	4a26      	ldr	r2, [pc, #152]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 80046ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80046f2:	4b24      	ldr	r3, [pc, #144]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 80046f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046f6:	4b24      	ldr	r3, [pc, #144]	; (8004788 <RCCEx_PLL3_Config+0x160>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	69d2      	ldr	r2, [r2, #28]
 80046fe:	00d2      	lsls	r2, r2, #3
 8004700:	4920      	ldr	r1, [pc, #128]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 8004702:	4313      	orrs	r3, r2
 8004704:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004706:	4b1f      	ldr	r3, [pc, #124]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	4a1e      	ldr	r2, [pc, #120]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 800470c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004710:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d106      	bne.n	8004726 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004718:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 800471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471c:	4a19      	ldr	r2, [pc, #100]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 800471e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004722:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004724:	e00f      	b.n	8004746 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d106      	bne.n	800473a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800472c:	4b15      	ldr	r3, [pc, #84]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	4a14      	ldr	r2, [pc, #80]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 8004732:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004736:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004738:	e005      	b.n	8004746 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800473a:	4b12      	ldr	r3, [pc, #72]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	4a11      	ldr	r2, [pc, #68]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 8004740:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004744:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004746:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a0e      	ldr	r2, [pc, #56]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 800474c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004752:	f7fd fa0b 	bl	8001b6c <HAL_GetTick>
 8004756:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004758:	e008      	b.n	800476c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800475a:	f7fd fa07 	bl	8001b6c <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e006      	b.n	800477a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <RCCEx_PLL3_Config+0x15c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0f0      	beq.n	800475a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004778:	7bfb      	ldrb	r3, [r7, #15]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	58024400 	.word	0x58024400
 8004788:	ffff0007 	.word	0xffff0007

0800478c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e049      	b.n	8004832 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fc ff18 	bl	80015e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f000 fb6c 	bl	8004ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e049      	b.n	80048e0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d106      	bne.n	8004866 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f841 	bl	80048e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2202      	movs	r2, #2
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3304      	adds	r3, #4
 8004876:	4619      	mov	r1, r3
 8004878:	4610      	mov	r0, r2
 800487a:	f000 fb15 	bl	8004ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d109      	bne.n	8004920 <HAL_TIM_PWM_Start+0x24>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	bf14      	ite	ne
 8004918:	2301      	movne	r3, #1
 800491a:	2300      	moveq	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	e03c      	b.n	800499a <HAL_TIM_PWM_Start+0x9e>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b04      	cmp	r3, #4
 8004924:	d109      	bne.n	800493a <HAL_TIM_PWM_Start+0x3e>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	bf14      	ite	ne
 8004932:	2301      	movne	r3, #1
 8004934:	2300      	moveq	r3, #0
 8004936:	b2db      	uxtb	r3, r3
 8004938:	e02f      	b.n	800499a <HAL_TIM_PWM_Start+0x9e>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d109      	bne.n	8004954 <HAL_TIM_PWM_Start+0x58>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	bf14      	ite	ne
 800494c:	2301      	movne	r3, #1
 800494e:	2300      	moveq	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	e022      	b.n	800499a <HAL_TIM_PWM_Start+0x9e>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b0c      	cmp	r3, #12
 8004958:	d109      	bne.n	800496e <HAL_TIM_PWM_Start+0x72>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b01      	cmp	r3, #1
 8004964:	bf14      	ite	ne
 8004966:	2301      	movne	r3, #1
 8004968:	2300      	moveq	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	e015      	b.n	800499a <HAL_TIM_PWM_Start+0x9e>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b10      	cmp	r3, #16
 8004972:	d109      	bne.n	8004988 <HAL_TIM_PWM_Start+0x8c>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	bf14      	ite	ne
 8004980:	2301      	movne	r3, #1
 8004982:	2300      	moveq	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	e008      	b.n	800499a <HAL_TIM_PWM_Start+0x9e>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	bf14      	ite	ne
 8004994:	2301      	movne	r3, #1
 8004996:	2300      	moveq	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e06e      	b.n	8004a80 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d104      	bne.n	80049b2 <HAL_TIM_PWM_Start+0xb6>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b0:	e023      	b.n	80049fa <HAL_TIM_PWM_Start+0xfe>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d104      	bne.n	80049c2 <HAL_TIM_PWM_Start+0xc6>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049c0:	e01b      	b.n	80049fa <HAL_TIM_PWM_Start+0xfe>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d104      	bne.n	80049d2 <HAL_TIM_PWM_Start+0xd6>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049d0:	e013      	b.n	80049fa <HAL_TIM_PWM_Start+0xfe>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b0c      	cmp	r3, #12
 80049d6:	d104      	bne.n	80049e2 <HAL_TIM_PWM_Start+0xe6>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049e0:	e00b      	b.n	80049fa <HAL_TIM_PWM_Start+0xfe>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d104      	bne.n	80049f2 <HAL_TIM_PWM_Start+0xf6>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049f0:	e003      	b.n	80049fa <HAL_TIM_PWM_Start+0xfe>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2202      	movs	r2, #2
 80049f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2201      	movs	r2, #1
 8004a00:	6839      	ldr	r1, [r7, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fe56 	bl	80056b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a1e      	ldr	r2, [pc, #120]	; (8004a88 <HAL_TIM_PWM_Start+0x18c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x13e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1d      	ldr	r2, [pc, #116]	; (8004a8c <HAL_TIM_PWM_Start+0x190>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00e      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x13e>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1b      	ldr	r2, [pc, #108]	; (8004a90 <HAL_TIM_PWM_Start+0x194>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d009      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x13e>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1a      	ldr	r2, [pc, #104]	; (8004a94 <HAL_TIM_PWM_Start+0x198>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d004      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x13e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a18      	ldr	r2, [pc, #96]	; (8004a98 <HAL_TIM_PWM_Start+0x19c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d101      	bne.n	8004a3e <HAL_TIM_PWM_Start+0x142>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <HAL_TIM_PWM_Start+0x144>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d007      	beq.n	8004a54 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <HAL_TIM_PWM_Start+0x1a0>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b06      	cmp	r3, #6
 8004a64:	d00b      	beq.n	8004a7e <HAL_TIM_PWM_Start+0x182>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a6c:	d007      	beq.n	8004a7e <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0201 	orr.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40010000 	.word	0x40010000
 8004a8c:	40010400 	.word	0x40010400
 8004a90:	40014000 	.word	0x40014000
 8004a94:	40014400 	.word	0x40014400
 8004a98:	40014800 	.word	0x40014800
 8004a9c:	00010007 	.word	0x00010007

08004aa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e0fd      	b.n	8004cb6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b14      	cmp	r3, #20
 8004ac6:	f200 80f0 	bhi.w	8004caa <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004aca:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad0:	08004b25 	.word	0x08004b25
 8004ad4:	08004cab 	.word	0x08004cab
 8004ad8:	08004cab 	.word	0x08004cab
 8004adc:	08004cab 	.word	0x08004cab
 8004ae0:	08004b65 	.word	0x08004b65
 8004ae4:	08004cab 	.word	0x08004cab
 8004ae8:	08004cab 	.word	0x08004cab
 8004aec:	08004cab 	.word	0x08004cab
 8004af0:	08004ba7 	.word	0x08004ba7
 8004af4:	08004cab 	.word	0x08004cab
 8004af8:	08004cab 	.word	0x08004cab
 8004afc:	08004cab 	.word	0x08004cab
 8004b00:	08004be7 	.word	0x08004be7
 8004b04:	08004cab 	.word	0x08004cab
 8004b08:	08004cab 	.word	0x08004cab
 8004b0c:	08004cab 	.word	0x08004cab
 8004b10:	08004c29 	.word	0x08004c29
 8004b14:	08004cab 	.word	0x08004cab
 8004b18:	08004cab 	.word	0x08004cab
 8004b1c:	08004cab 	.word	0x08004cab
 8004b20:	08004c69 	.word	0x08004c69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fa56 	bl	8004fdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0208 	orr.w	r2, r2, #8
 8004b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0204 	bic.w	r2, r2, #4
 8004b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6999      	ldr	r1, [r3, #24]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	619a      	str	r2, [r3, #24]
      break;
 8004b62:	e0a3      	b.n	8004cac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fac6 	bl	80050fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699a      	ldr	r2, [r3, #24]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6999      	ldr	r1, [r3, #24]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	021a      	lsls	r2, r3, #8
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	619a      	str	r2, [r3, #24]
      break;
 8004ba4:	e082      	b.n	8004cac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fb2f 	bl	8005210 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0208 	orr.w	r2, r2, #8
 8004bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0204 	bic.w	r2, r2, #4
 8004bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69d9      	ldr	r1, [r3, #28]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	61da      	str	r2, [r3, #28]
      break;
 8004be4:	e062      	b.n	8004cac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 fb95 	bl	800531c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69da      	ldr	r2, [r3, #28]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69d9      	ldr	r1, [r3, #28]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	021a      	lsls	r2, r3, #8
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	61da      	str	r2, [r3, #28]
      break;
 8004c26:	e041      	b.n	8004cac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fbdc 	bl	80053ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0208 	orr.w	r2, r2, #8
 8004c42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0204 	bic.w	r2, r2, #4
 8004c52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c66:	e021      	b.n	8004cac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fc1e 	bl	80054b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	021a      	lsls	r2, r3, #8
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ca8:	e000      	b.n	8004cac <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004caa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop

08004cc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_TIM_ConfigClockSource+0x18>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e0db      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x1d0>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4b69      	ldr	r3, [pc, #420]	; (8004e98 <HAL_TIM_ConfigClockSource+0x1d8>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cfe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a63      	ldr	r2, [pc, #396]	; (8004e9c <HAL_TIM_ConfigClockSource+0x1dc>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	f000 80a9 	beq.w	8004e66 <HAL_TIM_ConfigClockSource+0x1a6>
 8004d14:	4a61      	ldr	r2, [pc, #388]	; (8004e9c <HAL_TIM_ConfigClockSource+0x1dc>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	f200 80ae 	bhi.w	8004e78 <HAL_TIM_ConfigClockSource+0x1b8>
 8004d1c:	4a60      	ldr	r2, [pc, #384]	; (8004ea0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	f000 80a1 	beq.w	8004e66 <HAL_TIM_ConfigClockSource+0x1a6>
 8004d24:	4a5e      	ldr	r2, [pc, #376]	; (8004ea0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	f200 80a6 	bhi.w	8004e78 <HAL_TIM_ConfigClockSource+0x1b8>
 8004d2c:	4a5d      	ldr	r2, [pc, #372]	; (8004ea4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	f000 8099 	beq.w	8004e66 <HAL_TIM_ConfigClockSource+0x1a6>
 8004d34:	4a5b      	ldr	r2, [pc, #364]	; (8004ea4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	f200 809e 	bhi.w	8004e78 <HAL_TIM_ConfigClockSource+0x1b8>
 8004d3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004d40:	f000 8091 	beq.w	8004e66 <HAL_TIM_ConfigClockSource+0x1a6>
 8004d44:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004d48:	f200 8096 	bhi.w	8004e78 <HAL_TIM_ConfigClockSource+0x1b8>
 8004d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d50:	f000 8089 	beq.w	8004e66 <HAL_TIM_ConfigClockSource+0x1a6>
 8004d54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d58:	f200 808e 	bhi.w	8004e78 <HAL_TIM_ConfigClockSource+0x1b8>
 8004d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d60:	d03e      	beq.n	8004de0 <HAL_TIM_ConfigClockSource+0x120>
 8004d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d66:	f200 8087 	bhi.w	8004e78 <HAL_TIM_ConfigClockSource+0x1b8>
 8004d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6e:	f000 8085 	beq.w	8004e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8004d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d76:	d87f      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x1b8>
 8004d78:	2b70      	cmp	r3, #112	; 0x70
 8004d7a:	d01a      	beq.n	8004db2 <HAL_TIM_ConfigClockSource+0xf2>
 8004d7c:	2b70      	cmp	r3, #112	; 0x70
 8004d7e:	d87b      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x1b8>
 8004d80:	2b60      	cmp	r3, #96	; 0x60
 8004d82:	d050      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0x166>
 8004d84:	2b60      	cmp	r3, #96	; 0x60
 8004d86:	d877      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x1b8>
 8004d88:	2b50      	cmp	r3, #80	; 0x50
 8004d8a:	d03c      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x146>
 8004d8c:	2b50      	cmp	r3, #80	; 0x50
 8004d8e:	d873      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x1b8>
 8004d90:	2b40      	cmp	r3, #64	; 0x40
 8004d92:	d058      	beq.n	8004e46 <HAL_TIM_ConfigClockSource+0x186>
 8004d94:	2b40      	cmp	r3, #64	; 0x40
 8004d96:	d86f      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x1b8>
 8004d98:	2b30      	cmp	r3, #48	; 0x30
 8004d9a:	d064      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0x1a6>
 8004d9c:	2b30      	cmp	r3, #48	; 0x30
 8004d9e:	d86b      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x1b8>
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d060      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0x1a6>
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	d867      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x1b8>
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d05c      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0x1a6>
 8004dac:	2b10      	cmp	r3, #16
 8004dae:	d05a      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0x1a6>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004db0:	e062      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6899      	ldr	r1, [r3, #8]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f000 fc57 	bl	8005674 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	609a      	str	r2, [r3, #8]
      break;
 8004dde:	e04e      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	6899      	ldr	r1, [r3, #8]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f000 fc40 	bl	8005674 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e02:	609a      	str	r2, [r3, #8]
      break;
 8004e04:	e03b      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	6859      	ldr	r1, [r3, #4]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	461a      	mov	r2, r3
 8004e14:	f000 fbb0 	bl	8005578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2150      	movs	r1, #80	; 0x50
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fc0a 	bl	8005638 <TIM_ITRx_SetConfig>
      break;
 8004e24:	e02b      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	6859      	ldr	r1, [r3, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	461a      	mov	r2, r3
 8004e34:	f000 fbcf 	bl	80055d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2160      	movs	r1, #96	; 0x60
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fbfa 	bl	8005638 <TIM_ITRx_SetConfig>
      break;
 8004e44:	e01b      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6818      	ldr	r0, [r3, #0]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	6859      	ldr	r1, [r3, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	461a      	mov	r2, r3
 8004e54:	f000 fb90 	bl	8005578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2140      	movs	r1, #64	; 0x40
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fbea 	bl	8005638 <TIM_ITRx_SetConfig>
      break;
 8004e64:	e00b      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4610      	mov	r0, r2
 8004e72:	f000 fbe1 	bl	8005638 <TIM_ITRx_SetConfig>
      break;
 8004e76:	e002      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8004e78:	bf00      	nop
 8004e7a:	e000      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8004e7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	ffceff88 	.word	0xffceff88
 8004e9c:	00100040 	.word	0x00100040
 8004ea0:	00100030 	.word	0x00100030
 8004ea4:	00100020 	.word	0x00100020

08004ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a40      	ldr	r2, [pc, #256]	; (8004fbc <TIM_Base_SetConfig+0x114>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d013      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec6:	d00f      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a3d      	ldr	r2, [pc, #244]	; (8004fc0 <TIM_Base_SetConfig+0x118>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00b      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a3c      	ldr	r2, [pc, #240]	; (8004fc4 <TIM_Base_SetConfig+0x11c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d007      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a3b      	ldr	r2, [pc, #236]	; (8004fc8 <TIM_Base_SetConfig+0x120>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d003      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a3a      	ldr	r2, [pc, #232]	; (8004fcc <TIM_Base_SetConfig+0x124>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d108      	bne.n	8004efa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a2f      	ldr	r2, [pc, #188]	; (8004fbc <TIM_Base_SetConfig+0x114>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d01f      	beq.n	8004f42 <TIM_Base_SetConfig+0x9a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f08:	d01b      	beq.n	8004f42 <TIM_Base_SetConfig+0x9a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a2c      	ldr	r2, [pc, #176]	; (8004fc0 <TIM_Base_SetConfig+0x118>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d017      	beq.n	8004f42 <TIM_Base_SetConfig+0x9a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a2b      	ldr	r2, [pc, #172]	; (8004fc4 <TIM_Base_SetConfig+0x11c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d013      	beq.n	8004f42 <TIM_Base_SetConfig+0x9a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a2a      	ldr	r2, [pc, #168]	; (8004fc8 <TIM_Base_SetConfig+0x120>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00f      	beq.n	8004f42 <TIM_Base_SetConfig+0x9a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a29      	ldr	r2, [pc, #164]	; (8004fcc <TIM_Base_SetConfig+0x124>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00b      	beq.n	8004f42 <TIM_Base_SetConfig+0x9a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a28      	ldr	r2, [pc, #160]	; (8004fd0 <TIM_Base_SetConfig+0x128>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d007      	beq.n	8004f42 <TIM_Base_SetConfig+0x9a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a27      	ldr	r2, [pc, #156]	; (8004fd4 <TIM_Base_SetConfig+0x12c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d003      	beq.n	8004f42 <TIM_Base_SetConfig+0x9a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a26      	ldr	r2, [pc, #152]	; (8004fd8 <TIM_Base_SetConfig+0x130>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d108      	bne.n	8004f54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a10      	ldr	r2, [pc, #64]	; (8004fbc <TIM_Base_SetConfig+0x114>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00f      	beq.n	8004fa0 <TIM_Base_SetConfig+0xf8>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a12      	ldr	r2, [pc, #72]	; (8004fcc <TIM_Base_SetConfig+0x124>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00b      	beq.n	8004fa0 <TIM_Base_SetConfig+0xf8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a11      	ldr	r2, [pc, #68]	; (8004fd0 <TIM_Base_SetConfig+0x128>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d007      	beq.n	8004fa0 <TIM_Base_SetConfig+0xf8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a10      	ldr	r2, [pc, #64]	; (8004fd4 <TIM_Base_SetConfig+0x12c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_Base_SetConfig+0xf8>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a0f      	ldr	r2, [pc, #60]	; (8004fd8 <TIM_Base_SetConfig+0x130>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d103      	bne.n	8004fa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	615a      	str	r2, [r3, #20]
}
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40010000 	.word	0x40010000
 8004fc0:	40000400 	.word	0x40000400
 8004fc4:	40000800 	.word	0x40000800
 8004fc8:	40000c00 	.word	0x40000c00
 8004fcc:	40010400 	.word	0x40010400
 8004fd0:	40014000 	.word	0x40014000
 8004fd4:	40014400 	.word	0x40014400
 8004fd8:	40014800 	.word	0x40014800

08004fdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f023 0201 	bic.w	r2, r3, #1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4b37      	ldr	r3, [pc, #220]	; (80050e4 <TIM_OC1_SetConfig+0x108>)
 8005008:	4013      	ands	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0303 	bic.w	r3, r3, #3
 8005012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f023 0302 	bic.w	r3, r3, #2
 8005024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a2d      	ldr	r2, [pc, #180]	; (80050e8 <TIM_OC1_SetConfig+0x10c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00f      	beq.n	8005058 <TIM_OC1_SetConfig+0x7c>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a2c      	ldr	r2, [pc, #176]	; (80050ec <TIM_OC1_SetConfig+0x110>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00b      	beq.n	8005058 <TIM_OC1_SetConfig+0x7c>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a2b      	ldr	r2, [pc, #172]	; (80050f0 <TIM_OC1_SetConfig+0x114>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d007      	beq.n	8005058 <TIM_OC1_SetConfig+0x7c>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a2a      	ldr	r2, [pc, #168]	; (80050f4 <TIM_OC1_SetConfig+0x118>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d003      	beq.n	8005058 <TIM_OC1_SetConfig+0x7c>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a29      	ldr	r2, [pc, #164]	; (80050f8 <TIM_OC1_SetConfig+0x11c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d10c      	bne.n	8005072 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 0308 	bic.w	r3, r3, #8
 800505e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f023 0304 	bic.w	r3, r3, #4
 8005070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a1c      	ldr	r2, [pc, #112]	; (80050e8 <TIM_OC1_SetConfig+0x10c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00f      	beq.n	800509a <TIM_OC1_SetConfig+0xbe>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a1b      	ldr	r2, [pc, #108]	; (80050ec <TIM_OC1_SetConfig+0x110>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00b      	beq.n	800509a <TIM_OC1_SetConfig+0xbe>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a1a      	ldr	r2, [pc, #104]	; (80050f0 <TIM_OC1_SetConfig+0x114>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d007      	beq.n	800509a <TIM_OC1_SetConfig+0xbe>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <TIM_OC1_SetConfig+0x118>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d003      	beq.n	800509a <TIM_OC1_SetConfig+0xbe>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a18      	ldr	r2, [pc, #96]	; (80050f8 <TIM_OC1_SetConfig+0x11c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d111      	bne.n	80050be <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	621a      	str	r2, [r3, #32]
}
 80050d8:	bf00      	nop
 80050da:	371c      	adds	r7, #28
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	fffeff8f 	.word	0xfffeff8f
 80050e8:	40010000 	.word	0x40010000
 80050ec:	40010400 	.word	0x40010400
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40014400 	.word	0x40014400
 80050f8:	40014800 	.word	0x40014800

080050fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f023 0210 	bic.w	r2, r3, #16
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4b34      	ldr	r3, [pc, #208]	; (80051f8 <TIM_OC2_SetConfig+0xfc>)
 8005128:	4013      	ands	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f023 0320 	bic.w	r3, r3, #32
 8005146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a29      	ldr	r2, [pc, #164]	; (80051fc <TIM_OC2_SetConfig+0x100>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d003      	beq.n	8005164 <TIM_OC2_SetConfig+0x68>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a28      	ldr	r2, [pc, #160]	; (8005200 <TIM_OC2_SetConfig+0x104>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d10d      	bne.n	8005180 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800516a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800517e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a1e      	ldr	r2, [pc, #120]	; (80051fc <TIM_OC2_SetConfig+0x100>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00f      	beq.n	80051a8 <TIM_OC2_SetConfig+0xac>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a1d      	ldr	r2, [pc, #116]	; (8005200 <TIM_OC2_SetConfig+0x104>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d00b      	beq.n	80051a8 <TIM_OC2_SetConfig+0xac>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a1c      	ldr	r2, [pc, #112]	; (8005204 <TIM_OC2_SetConfig+0x108>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d007      	beq.n	80051a8 <TIM_OC2_SetConfig+0xac>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a1b      	ldr	r2, [pc, #108]	; (8005208 <TIM_OC2_SetConfig+0x10c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d003      	beq.n	80051a8 <TIM_OC2_SetConfig+0xac>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a1a      	ldr	r2, [pc, #104]	; (800520c <TIM_OC2_SetConfig+0x110>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d113      	bne.n	80051d0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	621a      	str	r2, [r3, #32]
}
 80051ea:	bf00      	nop
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	feff8fff 	.word	0xfeff8fff
 80051fc:	40010000 	.word	0x40010000
 8005200:	40010400 	.word	0x40010400
 8005204:	40014000 	.word	0x40014000
 8005208:	40014400 	.word	0x40014400
 800520c:	40014800 	.word	0x40014800

08005210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0303 	bic.w	r3, r3, #3
 8005246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a27      	ldr	r2, [pc, #156]	; (8005308 <TIM_OC3_SetConfig+0xf8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d003      	beq.n	8005276 <TIM_OC3_SetConfig+0x66>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a26      	ldr	r2, [pc, #152]	; (800530c <TIM_OC3_SetConfig+0xfc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d10d      	bne.n	8005292 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800527c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	021b      	lsls	r3, r3, #8
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a1c      	ldr	r2, [pc, #112]	; (8005308 <TIM_OC3_SetConfig+0xf8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00f      	beq.n	80052ba <TIM_OC3_SetConfig+0xaa>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a1b      	ldr	r2, [pc, #108]	; (800530c <TIM_OC3_SetConfig+0xfc>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00b      	beq.n	80052ba <TIM_OC3_SetConfig+0xaa>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a1a      	ldr	r2, [pc, #104]	; (8005310 <TIM_OC3_SetConfig+0x100>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d007      	beq.n	80052ba <TIM_OC3_SetConfig+0xaa>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a19      	ldr	r2, [pc, #100]	; (8005314 <TIM_OC3_SetConfig+0x104>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d003      	beq.n	80052ba <TIM_OC3_SetConfig+0xaa>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a18      	ldr	r2, [pc, #96]	; (8005318 <TIM_OC3_SetConfig+0x108>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d113      	bne.n	80052e2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	621a      	str	r2, [r3, #32]
}
 80052fc:	bf00      	nop
 80052fe:	371c      	adds	r7, #28
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	40010000 	.word	0x40010000
 800530c:	40010400 	.word	0x40010400
 8005310:	40014000 	.word	0x40014000
 8005314:	40014400 	.word	0x40014400
 8005318:	40014800 	.word	0x40014800

0800531c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	031b      	lsls	r3, r3, #12
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a18      	ldr	r2, [pc, #96]	; (80053d8 <TIM_OC4_SetConfig+0xbc>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d00f      	beq.n	800539c <TIM_OC4_SetConfig+0x80>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a17      	ldr	r2, [pc, #92]	; (80053dc <TIM_OC4_SetConfig+0xc0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00b      	beq.n	800539c <TIM_OC4_SetConfig+0x80>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a16      	ldr	r2, [pc, #88]	; (80053e0 <TIM_OC4_SetConfig+0xc4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d007      	beq.n	800539c <TIM_OC4_SetConfig+0x80>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a15      	ldr	r2, [pc, #84]	; (80053e4 <TIM_OC4_SetConfig+0xc8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_OC4_SetConfig+0x80>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a14      	ldr	r2, [pc, #80]	; (80053e8 <TIM_OC4_SetConfig+0xcc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d109      	bne.n	80053b0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	019b      	lsls	r3, r3, #6
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40010400 	.word	0x40010400
 80053e0:	40014000 	.word	0x40014000
 80053e4:	40014400 	.word	0x40014400
 80053e8:	40014800 	.word	0x40014800

080053ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800542c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	041b      	lsls	r3, r3, #16
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a17      	ldr	r2, [pc, #92]	; (800549c <TIM_OC5_SetConfig+0xb0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00f      	beq.n	8005462 <TIM_OC5_SetConfig+0x76>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a16      	ldr	r2, [pc, #88]	; (80054a0 <TIM_OC5_SetConfig+0xb4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00b      	beq.n	8005462 <TIM_OC5_SetConfig+0x76>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a15      	ldr	r2, [pc, #84]	; (80054a4 <TIM_OC5_SetConfig+0xb8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d007      	beq.n	8005462 <TIM_OC5_SetConfig+0x76>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a14      	ldr	r2, [pc, #80]	; (80054a8 <TIM_OC5_SetConfig+0xbc>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d003      	beq.n	8005462 <TIM_OC5_SetConfig+0x76>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a13      	ldr	r2, [pc, #76]	; (80054ac <TIM_OC5_SetConfig+0xc0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d109      	bne.n	8005476 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005468:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	621a      	str	r2, [r3, #32]
}
 8005490:	bf00      	nop
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	40010000 	.word	0x40010000
 80054a0:	40010400 	.word	0x40010400
 80054a4:	40014000 	.word	0x40014000
 80054a8:	40014400 	.word	0x40014400
 80054ac:	40014800 	.word	0x40014800

080054b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	051b      	lsls	r3, r3, #20
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a18      	ldr	r2, [pc, #96]	; (8005564 <TIM_OC6_SetConfig+0xb4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00f      	beq.n	8005528 <TIM_OC6_SetConfig+0x78>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a17      	ldr	r2, [pc, #92]	; (8005568 <TIM_OC6_SetConfig+0xb8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00b      	beq.n	8005528 <TIM_OC6_SetConfig+0x78>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a16      	ldr	r2, [pc, #88]	; (800556c <TIM_OC6_SetConfig+0xbc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d007      	beq.n	8005528 <TIM_OC6_SetConfig+0x78>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a15      	ldr	r2, [pc, #84]	; (8005570 <TIM_OC6_SetConfig+0xc0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d003      	beq.n	8005528 <TIM_OC6_SetConfig+0x78>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a14      	ldr	r2, [pc, #80]	; (8005574 <TIM_OC6_SetConfig+0xc4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d109      	bne.n	800553c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800552e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	029b      	lsls	r3, r3, #10
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	621a      	str	r2, [r3, #32]
}
 8005556:	bf00      	nop
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	40010000 	.word	0x40010000
 8005568:	40010400 	.word	0x40010400
 800556c:	40014000 	.word	0x40014000
 8005570:	40014400 	.word	0x40014400
 8005574:	40014800 	.word	0x40014800

08005578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0201 	bic.w	r2, r3, #1
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f023 030a 	bic.w	r3, r3, #10
 80055b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b087      	sub	sp, #28
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	f023 0210 	bic.w	r2, r3, #16
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005600:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	031b      	lsls	r3, r3, #12
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	4313      	orrs	r3, r2
 800560a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005612:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	621a      	str	r2, [r3, #32]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
	...

08005638 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4b09      	ldr	r3, [pc, #36]	; (8005670 <TIM_ITRx_SetConfig+0x38>)
 800564c:	4013      	ands	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	f043 0307 	orr.w	r3, r3, #7
 800565a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	609a      	str	r2, [r3, #8]
}
 8005662:	bf00      	nop
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	ffcfff8f 	.word	0xffcfff8f

08005674 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800568e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	021a      	lsls	r2, r3, #8
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	431a      	orrs	r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4313      	orrs	r3, r2
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	609a      	str	r2, [r3, #8]
}
 80056a8:	bf00      	nop
 80056aa:	371c      	adds	r7, #28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f003 031f 	and.w	r3, r3, #31
 80056c6:	2201      	movs	r2, #1
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a1a      	ldr	r2, [r3, #32]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	43db      	mvns	r3, r3
 80056d6:	401a      	ands	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a1a      	ldr	r2, [r3, #32]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f003 031f 	and.w	r3, r3, #31
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	fa01 f303 	lsl.w	r3, r1, r3
 80056ec:	431a      	orrs	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	621a      	str	r2, [r3, #32]
}
 80056f2:	bf00      	nop
 80056f4:	371c      	adds	r7, #28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
	...

08005700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005714:	2302      	movs	r3, #2
 8005716:	e068      	b.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a2e      	ldr	r2, [pc, #184]	; (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d004      	beq.n	800574c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a2d      	ldr	r2, [pc, #180]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d108      	bne.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005752:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005764:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4313      	orrs	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a1e      	ldr	r2, [pc, #120]	; (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d01d      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578a:	d018      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a1b      	ldr	r2, [pc, #108]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d013      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1a      	ldr	r2, [pc, #104]	; (8005804 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00e      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a18      	ldr	r2, [pc, #96]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d009      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a13      	ldr	r2, [pc, #76]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d004      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a14      	ldr	r2, [pc, #80]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d10c      	bne.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40010000 	.word	0x40010000
 80057fc:	40010400 	.word	0x40010400
 8005800:	40000400 	.word	0x40000400
 8005804:	40000800 	.word	0x40000800
 8005808:	40000c00 	.word	0x40000c00
 800580c:	40001800 	.word	0x40001800

08005810 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005828:	2302      	movs	r3, #2
 800582a:	e065      	b.n	80058f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	4313      	orrs	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	041b      	lsls	r3, r3, #16
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a16      	ldr	r2, [pc, #88]	; (8005904 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d004      	beq.n	80058ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a14      	ldr	r2, [pc, #80]	; (8005908 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d115      	bne.n	80058e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	051b      	lsls	r3, r3, #20
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	40010000 	.word	0x40010000
 8005908:	40010400 	.word	0x40010400

0800590c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e042      	b.n	80059a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005924:	2b00      	cmp	r3, #0
 8005926:	d106      	bne.n	8005936 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7fb fef9 	bl	8001728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2224      	movs	r2, #36	; 0x24
 800593a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0201 	bic.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f90e 	bl	8005b70 <UART_SetConfig>
 8005954:	4603      	mov	r3, r0
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e022      	b.n	80059a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fe68 	bl	800663c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800597a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800598a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 feef 	bl	8006780 <UART_CheckIdleState>
 80059a2:	4603      	mov	r3, r0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	4613      	mov	r3, r2
 80059b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	f040 80bc 	bne.w	8005b3e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <HAL_UART_Receive_IT+0x26>
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e0b4      	b.n	8005b40 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_UART_Receive_IT+0x38>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e0ad      	b.n	8005b40 <HAL_UART_Receive_IT+0x194>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	88fa      	ldrh	r2, [r7, #6]
 80059f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	88fa      	ldrh	r2, [r7, #6]
 80059fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a10:	d10e      	bne.n	8005a30 <HAL_UART_Receive_IT+0x84>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d105      	bne.n	8005a26 <HAL_UART_Receive_IT+0x7a>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a24:	e02d      	b.n	8005a82 <HAL_UART_Receive_IT+0xd6>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	22ff      	movs	r2, #255	; 0xff
 8005a2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a2e:	e028      	b.n	8005a82 <HAL_UART_Receive_IT+0xd6>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10d      	bne.n	8005a54 <HAL_UART_Receive_IT+0xa8>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d104      	bne.n	8005a4a <HAL_UART_Receive_IT+0x9e>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	22ff      	movs	r2, #255	; 0xff
 8005a44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a48:	e01b      	b.n	8005a82 <HAL_UART_Receive_IT+0xd6>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	227f      	movs	r2, #127	; 0x7f
 8005a4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a52:	e016      	b.n	8005a82 <HAL_UART_Receive_IT+0xd6>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a5c:	d10d      	bne.n	8005a7a <HAL_UART_Receive_IT+0xce>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d104      	bne.n	8005a70 <HAL_UART_Receive_IT+0xc4>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	227f      	movs	r2, #127	; 0x7f
 8005a6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a6e:	e008      	b.n	8005a82 <HAL_UART_Receive_IT+0xd6>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	223f      	movs	r2, #63	; 0x3f
 8005a74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a78:	e003      	b.n	8005a82 <HAL_UART_Receive_IT+0xd6>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2222      	movs	r2, #34	; 0x22
 8005a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f042 0201 	orr.w	r2, r2, #1
 8005aa0:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aaa:	d12a      	bne.n	8005b02 <HAL_UART_Receive_IT+0x156>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005ab2:	88fa      	ldrh	r2, [r7, #6]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d324      	bcc.n	8005b02 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac0:	d107      	bne.n	8005ad2 <HAL_UART_Receive_IT+0x126>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d103      	bne.n	8005ad2 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4a1f      	ldr	r2, [pc, #124]	; (8005b4c <HAL_UART_Receive_IT+0x1a0>)
 8005ace:	66da      	str	r2, [r3, #108]	; 0x6c
 8005ad0:	e002      	b.n	8005ad8 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4a1e      	ldr	r2, [pc, #120]	; (8005b50 <HAL_UART_Receive_IT+0x1a4>)
 8005ad6:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aee:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005afe:	609a      	str	r2, [r3, #8]
 8005b00:	e01b      	b.n	8005b3a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0a:	d107      	bne.n	8005b1c <HAL_UART_Receive_IT+0x170>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d103      	bne.n	8005b1c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4a0f      	ldr	r2, [pc, #60]	; (8005b54 <HAL_UART_Receive_IT+0x1a8>)
 8005b18:	66da      	str	r2, [r3, #108]	; 0x6c
 8005b1a:	e002      	b.n	8005b22 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4a0e      	ldr	r2, [pc, #56]	; (8005b58 <HAL_UART_Receive_IT+0x1ac>)
 8005b20:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005b38:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	e000      	b.n	8005b40 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8005b3e:	2302      	movs	r3, #2
  }
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	08006b6d 	.word	0x08006b6d
 8005b50:	08006a65 	.word	0x08006a65
 8005b54:	080069bb 	.word	0x080069bb
 8005b58:	08006911 	.word	0x08006911

08005b5c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b70:	b5b0      	push	{r4, r5, r7, lr}
 8005b72:	b08e      	sub	sp, #56	; 0x38
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	4bc0      	ldr	r3, [pc, #768]	; (8005ea8 <UART_SetConfig+0x338>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6812      	ldr	r2, [r2, #0]
 8005bae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4ab5      	ldr	r2, [pc, #724]	; (8005eac <UART_SetConfig+0x33c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d004      	beq.n	8005be4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005be0:	4313      	orrs	r3, r2
 8005be2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	4bb1      	ldr	r3, [pc, #708]	; (8005eb0 <UART_SetConfig+0x340>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	f023 010f 	bic.w	r1, r3, #15
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4aa8      	ldr	r2, [pc, #672]	; (8005eb4 <UART_SetConfig+0x344>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d177      	bne.n	8005d08 <UART_SetConfig+0x198>
 8005c18:	4ba7      	ldr	r3, [pc, #668]	; (8005eb8 <UART_SetConfig+0x348>)
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c20:	2b28      	cmp	r3, #40	; 0x28
 8005c22:	d86d      	bhi.n	8005d00 <UART_SetConfig+0x190>
 8005c24:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <UART_SetConfig+0xbc>)
 8005c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2a:	bf00      	nop
 8005c2c:	08005cd1 	.word	0x08005cd1
 8005c30:	08005d01 	.word	0x08005d01
 8005c34:	08005d01 	.word	0x08005d01
 8005c38:	08005d01 	.word	0x08005d01
 8005c3c:	08005d01 	.word	0x08005d01
 8005c40:	08005d01 	.word	0x08005d01
 8005c44:	08005d01 	.word	0x08005d01
 8005c48:	08005d01 	.word	0x08005d01
 8005c4c:	08005cd9 	.word	0x08005cd9
 8005c50:	08005d01 	.word	0x08005d01
 8005c54:	08005d01 	.word	0x08005d01
 8005c58:	08005d01 	.word	0x08005d01
 8005c5c:	08005d01 	.word	0x08005d01
 8005c60:	08005d01 	.word	0x08005d01
 8005c64:	08005d01 	.word	0x08005d01
 8005c68:	08005d01 	.word	0x08005d01
 8005c6c:	08005ce1 	.word	0x08005ce1
 8005c70:	08005d01 	.word	0x08005d01
 8005c74:	08005d01 	.word	0x08005d01
 8005c78:	08005d01 	.word	0x08005d01
 8005c7c:	08005d01 	.word	0x08005d01
 8005c80:	08005d01 	.word	0x08005d01
 8005c84:	08005d01 	.word	0x08005d01
 8005c88:	08005d01 	.word	0x08005d01
 8005c8c:	08005ce9 	.word	0x08005ce9
 8005c90:	08005d01 	.word	0x08005d01
 8005c94:	08005d01 	.word	0x08005d01
 8005c98:	08005d01 	.word	0x08005d01
 8005c9c:	08005d01 	.word	0x08005d01
 8005ca0:	08005d01 	.word	0x08005d01
 8005ca4:	08005d01 	.word	0x08005d01
 8005ca8:	08005d01 	.word	0x08005d01
 8005cac:	08005cf1 	.word	0x08005cf1
 8005cb0:	08005d01 	.word	0x08005d01
 8005cb4:	08005d01 	.word	0x08005d01
 8005cb8:	08005d01 	.word	0x08005d01
 8005cbc:	08005d01 	.word	0x08005d01
 8005cc0:	08005d01 	.word	0x08005d01
 8005cc4:	08005d01 	.word	0x08005d01
 8005cc8:	08005d01 	.word	0x08005d01
 8005ccc:	08005cf9 	.word	0x08005cf9
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cd6:	e222      	b.n	800611e <UART_SetConfig+0x5ae>
 8005cd8:	2304      	movs	r3, #4
 8005cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cde:	e21e      	b.n	800611e <UART_SetConfig+0x5ae>
 8005ce0:	2308      	movs	r3, #8
 8005ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ce6:	e21a      	b.n	800611e <UART_SetConfig+0x5ae>
 8005ce8:	2310      	movs	r3, #16
 8005cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cee:	e216      	b.n	800611e <UART_SetConfig+0x5ae>
 8005cf0:	2320      	movs	r3, #32
 8005cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cf6:	e212      	b.n	800611e <UART_SetConfig+0x5ae>
 8005cf8:	2340      	movs	r3, #64	; 0x40
 8005cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cfe:	e20e      	b.n	800611e <UART_SetConfig+0x5ae>
 8005d00:	2380      	movs	r3, #128	; 0x80
 8005d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d06:	e20a      	b.n	800611e <UART_SetConfig+0x5ae>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a6b      	ldr	r2, [pc, #428]	; (8005ebc <UART_SetConfig+0x34c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d130      	bne.n	8005d74 <UART_SetConfig+0x204>
 8005d12:	4b69      	ldr	r3, [pc, #420]	; (8005eb8 <UART_SetConfig+0x348>)
 8005d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d16:	f003 0307 	and.w	r3, r3, #7
 8005d1a:	2b05      	cmp	r3, #5
 8005d1c:	d826      	bhi.n	8005d6c <UART_SetConfig+0x1fc>
 8005d1e:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <UART_SetConfig+0x1b4>)
 8005d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d24:	08005d3d 	.word	0x08005d3d
 8005d28:	08005d45 	.word	0x08005d45
 8005d2c:	08005d4d 	.word	0x08005d4d
 8005d30:	08005d55 	.word	0x08005d55
 8005d34:	08005d5d 	.word	0x08005d5d
 8005d38:	08005d65 	.word	0x08005d65
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d42:	e1ec      	b.n	800611e <UART_SetConfig+0x5ae>
 8005d44:	2304      	movs	r3, #4
 8005d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d4a:	e1e8      	b.n	800611e <UART_SetConfig+0x5ae>
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d52:	e1e4      	b.n	800611e <UART_SetConfig+0x5ae>
 8005d54:	2310      	movs	r3, #16
 8005d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d5a:	e1e0      	b.n	800611e <UART_SetConfig+0x5ae>
 8005d5c:	2320      	movs	r3, #32
 8005d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d62:	e1dc      	b.n	800611e <UART_SetConfig+0x5ae>
 8005d64:	2340      	movs	r3, #64	; 0x40
 8005d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d6a:	e1d8      	b.n	800611e <UART_SetConfig+0x5ae>
 8005d6c:	2380      	movs	r3, #128	; 0x80
 8005d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d72:	e1d4      	b.n	800611e <UART_SetConfig+0x5ae>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a51      	ldr	r2, [pc, #324]	; (8005ec0 <UART_SetConfig+0x350>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d130      	bne.n	8005de0 <UART_SetConfig+0x270>
 8005d7e:	4b4e      	ldr	r3, [pc, #312]	; (8005eb8 <UART_SetConfig+0x348>)
 8005d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	2b05      	cmp	r3, #5
 8005d88:	d826      	bhi.n	8005dd8 <UART_SetConfig+0x268>
 8005d8a:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <UART_SetConfig+0x220>)
 8005d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d90:	08005da9 	.word	0x08005da9
 8005d94:	08005db1 	.word	0x08005db1
 8005d98:	08005db9 	.word	0x08005db9
 8005d9c:	08005dc1 	.word	0x08005dc1
 8005da0:	08005dc9 	.word	0x08005dc9
 8005da4:	08005dd1 	.word	0x08005dd1
 8005da8:	2300      	movs	r3, #0
 8005daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dae:	e1b6      	b.n	800611e <UART_SetConfig+0x5ae>
 8005db0:	2304      	movs	r3, #4
 8005db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005db6:	e1b2      	b.n	800611e <UART_SetConfig+0x5ae>
 8005db8:	2308      	movs	r3, #8
 8005dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dbe:	e1ae      	b.n	800611e <UART_SetConfig+0x5ae>
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dc6:	e1aa      	b.n	800611e <UART_SetConfig+0x5ae>
 8005dc8:	2320      	movs	r3, #32
 8005dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dce:	e1a6      	b.n	800611e <UART_SetConfig+0x5ae>
 8005dd0:	2340      	movs	r3, #64	; 0x40
 8005dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dd6:	e1a2      	b.n	800611e <UART_SetConfig+0x5ae>
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dde:	e19e      	b.n	800611e <UART_SetConfig+0x5ae>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a37      	ldr	r2, [pc, #220]	; (8005ec4 <UART_SetConfig+0x354>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d130      	bne.n	8005e4c <UART_SetConfig+0x2dc>
 8005dea:	4b33      	ldr	r3, [pc, #204]	; (8005eb8 <UART_SetConfig+0x348>)
 8005dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	2b05      	cmp	r3, #5
 8005df4:	d826      	bhi.n	8005e44 <UART_SetConfig+0x2d4>
 8005df6:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <UART_SetConfig+0x28c>)
 8005df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfc:	08005e15 	.word	0x08005e15
 8005e00:	08005e1d 	.word	0x08005e1d
 8005e04:	08005e25 	.word	0x08005e25
 8005e08:	08005e2d 	.word	0x08005e2d
 8005e0c:	08005e35 	.word	0x08005e35
 8005e10:	08005e3d 	.word	0x08005e3d
 8005e14:	2300      	movs	r3, #0
 8005e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e1a:	e180      	b.n	800611e <UART_SetConfig+0x5ae>
 8005e1c:	2304      	movs	r3, #4
 8005e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e22:	e17c      	b.n	800611e <UART_SetConfig+0x5ae>
 8005e24:	2308      	movs	r3, #8
 8005e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2a:	e178      	b.n	800611e <UART_SetConfig+0x5ae>
 8005e2c:	2310      	movs	r3, #16
 8005e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e32:	e174      	b.n	800611e <UART_SetConfig+0x5ae>
 8005e34:	2320      	movs	r3, #32
 8005e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3a:	e170      	b.n	800611e <UART_SetConfig+0x5ae>
 8005e3c:	2340      	movs	r3, #64	; 0x40
 8005e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e42:	e16c      	b.n	800611e <UART_SetConfig+0x5ae>
 8005e44:	2380      	movs	r3, #128	; 0x80
 8005e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4a:	e168      	b.n	800611e <UART_SetConfig+0x5ae>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1d      	ldr	r2, [pc, #116]	; (8005ec8 <UART_SetConfig+0x358>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d142      	bne.n	8005edc <UART_SetConfig+0x36c>
 8005e56:	4b18      	ldr	r3, [pc, #96]	; (8005eb8 <UART_SetConfig+0x348>)
 8005e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	2b05      	cmp	r3, #5
 8005e60:	d838      	bhi.n	8005ed4 <UART_SetConfig+0x364>
 8005e62:	a201      	add	r2, pc, #4	; (adr r2, 8005e68 <UART_SetConfig+0x2f8>)
 8005e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e68:	08005e81 	.word	0x08005e81
 8005e6c:	08005e89 	.word	0x08005e89
 8005e70:	08005e91 	.word	0x08005e91
 8005e74:	08005e99 	.word	0x08005e99
 8005e78:	08005ea1 	.word	0x08005ea1
 8005e7c:	08005ecd 	.word	0x08005ecd
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e86:	e14a      	b.n	800611e <UART_SetConfig+0x5ae>
 8005e88:	2304      	movs	r3, #4
 8005e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8e:	e146      	b.n	800611e <UART_SetConfig+0x5ae>
 8005e90:	2308      	movs	r3, #8
 8005e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e96:	e142      	b.n	800611e <UART_SetConfig+0x5ae>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9e:	e13e      	b.n	800611e <UART_SetConfig+0x5ae>
 8005ea0:	2320      	movs	r3, #32
 8005ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea6:	e13a      	b.n	800611e <UART_SetConfig+0x5ae>
 8005ea8:	cfff69f3 	.word	0xcfff69f3
 8005eac:	58000c00 	.word	0x58000c00
 8005eb0:	11fff4ff 	.word	0x11fff4ff
 8005eb4:	40011000 	.word	0x40011000
 8005eb8:	58024400 	.word	0x58024400
 8005ebc:	40004400 	.word	0x40004400
 8005ec0:	40004800 	.word	0x40004800
 8005ec4:	40004c00 	.word	0x40004c00
 8005ec8:	40005000 	.word	0x40005000
 8005ecc:	2340      	movs	r3, #64	; 0x40
 8005ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ed2:	e124      	b.n	800611e <UART_SetConfig+0x5ae>
 8005ed4:	2380      	movs	r3, #128	; 0x80
 8005ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eda:	e120      	b.n	800611e <UART_SetConfig+0x5ae>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4acc      	ldr	r2, [pc, #816]	; (8006214 <UART_SetConfig+0x6a4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d176      	bne.n	8005fd4 <UART_SetConfig+0x464>
 8005ee6:	4bcc      	ldr	r3, [pc, #816]	; (8006218 <UART_SetConfig+0x6a8>)
 8005ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eee:	2b28      	cmp	r3, #40	; 0x28
 8005ef0:	d86c      	bhi.n	8005fcc <UART_SetConfig+0x45c>
 8005ef2:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <UART_SetConfig+0x388>)
 8005ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef8:	08005f9d 	.word	0x08005f9d
 8005efc:	08005fcd 	.word	0x08005fcd
 8005f00:	08005fcd 	.word	0x08005fcd
 8005f04:	08005fcd 	.word	0x08005fcd
 8005f08:	08005fcd 	.word	0x08005fcd
 8005f0c:	08005fcd 	.word	0x08005fcd
 8005f10:	08005fcd 	.word	0x08005fcd
 8005f14:	08005fcd 	.word	0x08005fcd
 8005f18:	08005fa5 	.word	0x08005fa5
 8005f1c:	08005fcd 	.word	0x08005fcd
 8005f20:	08005fcd 	.word	0x08005fcd
 8005f24:	08005fcd 	.word	0x08005fcd
 8005f28:	08005fcd 	.word	0x08005fcd
 8005f2c:	08005fcd 	.word	0x08005fcd
 8005f30:	08005fcd 	.word	0x08005fcd
 8005f34:	08005fcd 	.word	0x08005fcd
 8005f38:	08005fad 	.word	0x08005fad
 8005f3c:	08005fcd 	.word	0x08005fcd
 8005f40:	08005fcd 	.word	0x08005fcd
 8005f44:	08005fcd 	.word	0x08005fcd
 8005f48:	08005fcd 	.word	0x08005fcd
 8005f4c:	08005fcd 	.word	0x08005fcd
 8005f50:	08005fcd 	.word	0x08005fcd
 8005f54:	08005fcd 	.word	0x08005fcd
 8005f58:	08005fb5 	.word	0x08005fb5
 8005f5c:	08005fcd 	.word	0x08005fcd
 8005f60:	08005fcd 	.word	0x08005fcd
 8005f64:	08005fcd 	.word	0x08005fcd
 8005f68:	08005fcd 	.word	0x08005fcd
 8005f6c:	08005fcd 	.word	0x08005fcd
 8005f70:	08005fcd 	.word	0x08005fcd
 8005f74:	08005fcd 	.word	0x08005fcd
 8005f78:	08005fbd 	.word	0x08005fbd
 8005f7c:	08005fcd 	.word	0x08005fcd
 8005f80:	08005fcd 	.word	0x08005fcd
 8005f84:	08005fcd 	.word	0x08005fcd
 8005f88:	08005fcd 	.word	0x08005fcd
 8005f8c:	08005fcd 	.word	0x08005fcd
 8005f90:	08005fcd 	.word	0x08005fcd
 8005f94:	08005fcd 	.word	0x08005fcd
 8005f98:	08005fc5 	.word	0x08005fc5
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fa2:	e0bc      	b.n	800611e <UART_SetConfig+0x5ae>
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005faa:	e0b8      	b.n	800611e <UART_SetConfig+0x5ae>
 8005fac:	2308      	movs	r3, #8
 8005fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fb2:	e0b4      	b.n	800611e <UART_SetConfig+0x5ae>
 8005fb4:	2310      	movs	r3, #16
 8005fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fba:	e0b0      	b.n	800611e <UART_SetConfig+0x5ae>
 8005fbc:	2320      	movs	r3, #32
 8005fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fc2:	e0ac      	b.n	800611e <UART_SetConfig+0x5ae>
 8005fc4:	2340      	movs	r3, #64	; 0x40
 8005fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fca:	e0a8      	b.n	800611e <UART_SetConfig+0x5ae>
 8005fcc:	2380      	movs	r3, #128	; 0x80
 8005fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fd2:	e0a4      	b.n	800611e <UART_SetConfig+0x5ae>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a90      	ldr	r2, [pc, #576]	; (800621c <UART_SetConfig+0x6ac>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d130      	bne.n	8006040 <UART_SetConfig+0x4d0>
 8005fde:	4b8e      	ldr	r3, [pc, #568]	; (8006218 <UART_SetConfig+0x6a8>)
 8005fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe2:	f003 0307 	and.w	r3, r3, #7
 8005fe6:	2b05      	cmp	r3, #5
 8005fe8:	d826      	bhi.n	8006038 <UART_SetConfig+0x4c8>
 8005fea:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <UART_SetConfig+0x480>)
 8005fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff0:	08006009 	.word	0x08006009
 8005ff4:	08006011 	.word	0x08006011
 8005ff8:	08006019 	.word	0x08006019
 8005ffc:	08006021 	.word	0x08006021
 8006000:	08006029 	.word	0x08006029
 8006004:	08006031 	.word	0x08006031
 8006008:	2300      	movs	r3, #0
 800600a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800600e:	e086      	b.n	800611e <UART_SetConfig+0x5ae>
 8006010:	2304      	movs	r3, #4
 8006012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006016:	e082      	b.n	800611e <UART_SetConfig+0x5ae>
 8006018:	2308      	movs	r3, #8
 800601a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800601e:	e07e      	b.n	800611e <UART_SetConfig+0x5ae>
 8006020:	2310      	movs	r3, #16
 8006022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006026:	e07a      	b.n	800611e <UART_SetConfig+0x5ae>
 8006028:	2320      	movs	r3, #32
 800602a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800602e:	e076      	b.n	800611e <UART_SetConfig+0x5ae>
 8006030:	2340      	movs	r3, #64	; 0x40
 8006032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006036:	e072      	b.n	800611e <UART_SetConfig+0x5ae>
 8006038:	2380      	movs	r3, #128	; 0x80
 800603a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800603e:	e06e      	b.n	800611e <UART_SetConfig+0x5ae>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a76      	ldr	r2, [pc, #472]	; (8006220 <UART_SetConfig+0x6b0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d130      	bne.n	80060ac <UART_SetConfig+0x53c>
 800604a:	4b73      	ldr	r3, [pc, #460]	; (8006218 <UART_SetConfig+0x6a8>)
 800604c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	2b05      	cmp	r3, #5
 8006054:	d826      	bhi.n	80060a4 <UART_SetConfig+0x534>
 8006056:	a201      	add	r2, pc, #4	; (adr r2, 800605c <UART_SetConfig+0x4ec>)
 8006058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605c:	08006075 	.word	0x08006075
 8006060:	0800607d 	.word	0x0800607d
 8006064:	08006085 	.word	0x08006085
 8006068:	0800608d 	.word	0x0800608d
 800606c:	08006095 	.word	0x08006095
 8006070:	0800609d 	.word	0x0800609d
 8006074:	2300      	movs	r3, #0
 8006076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800607a:	e050      	b.n	800611e <UART_SetConfig+0x5ae>
 800607c:	2304      	movs	r3, #4
 800607e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006082:	e04c      	b.n	800611e <UART_SetConfig+0x5ae>
 8006084:	2308      	movs	r3, #8
 8006086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800608a:	e048      	b.n	800611e <UART_SetConfig+0x5ae>
 800608c:	2310      	movs	r3, #16
 800608e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006092:	e044      	b.n	800611e <UART_SetConfig+0x5ae>
 8006094:	2320      	movs	r3, #32
 8006096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800609a:	e040      	b.n	800611e <UART_SetConfig+0x5ae>
 800609c:	2340      	movs	r3, #64	; 0x40
 800609e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060a2:	e03c      	b.n	800611e <UART_SetConfig+0x5ae>
 80060a4:	2380      	movs	r3, #128	; 0x80
 80060a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060aa:	e038      	b.n	800611e <UART_SetConfig+0x5ae>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a5c      	ldr	r2, [pc, #368]	; (8006224 <UART_SetConfig+0x6b4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d130      	bne.n	8006118 <UART_SetConfig+0x5a8>
 80060b6:	4b58      	ldr	r3, [pc, #352]	; (8006218 <UART_SetConfig+0x6a8>)
 80060b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	2b05      	cmp	r3, #5
 80060c0:	d826      	bhi.n	8006110 <UART_SetConfig+0x5a0>
 80060c2:	a201      	add	r2, pc, #4	; (adr r2, 80060c8 <UART_SetConfig+0x558>)
 80060c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c8:	080060e1 	.word	0x080060e1
 80060cc:	080060e9 	.word	0x080060e9
 80060d0:	080060f1 	.word	0x080060f1
 80060d4:	080060f9 	.word	0x080060f9
 80060d8:	08006101 	.word	0x08006101
 80060dc:	08006109 	.word	0x08006109
 80060e0:	2302      	movs	r3, #2
 80060e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060e6:	e01a      	b.n	800611e <UART_SetConfig+0x5ae>
 80060e8:	2304      	movs	r3, #4
 80060ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ee:	e016      	b.n	800611e <UART_SetConfig+0x5ae>
 80060f0:	2308      	movs	r3, #8
 80060f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060f6:	e012      	b.n	800611e <UART_SetConfig+0x5ae>
 80060f8:	2310      	movs	r3, #16
 80060fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060fe:	e00e      	b.n	800611e <UART_SetConfig+0x5ae>
 8006100:	2320      	movs	r3, #32
 8006102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006106:	e00a      	b.n	800611e <UART_SetConfig+0x5ae>
 8006108:	2340      	movs	r3, #64	; 0x40
 800610a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800610e:	e006      	b.n	800611e <UART_SetConfig+0x5ae>
 8006110:	2380      	movs	r3, #128	; 0x80
 8006112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006116:	e002      	b.n	800611e <UART_SetConfig+0x5ae>
 8006118:	2380      	movs	r3, #128	; 0x80
 800611a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a40      	ldr	r2, [pc, #256]	; (8006224 <UART_SetConfig+0x6b4>)
 8006124:	4293      	cmp	r3, r2
 8006126:	f040 80ef 	bne.w	8006308 <UART_SetConfig+0x798>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800612a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800612e:	2b20      	cmp	r3, #32
 8006130:	dc46      	bgt.n	80061c0 <UART_SetConfig+0x650>
 8006132:	2b02      	cmp	r3, #2
 8006134:	f2c0 8081 	blt.w	800623a <UART_SetConfig+0x6ca>
 8006138:	3b02      	subs	r3, #2
 800613a:	2b1e      	cmp	r3, #30
 800613c:	d87d      	bhi.n	800623a <UART_SetConfig+0x6ca>
 800613e:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <UART_SetConfig+0x5d4>)
 8006140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006144:	080061c7 	.word	0x080061c7
 8006148:	0800623b 	.word	0x0800623b
 800614c:	080061cf 	.word	0x080061cf
 8006150:	0800623b 	.word	0x0800623b
 8006154:	0800623b 	.word	0x0800623b
 8006158:	0800623b 	.word	0x0800623b
 800615c:	080061df 	.word	0x080061df
 8006160:	0800623b 	.word	0x0800623b
 8006164:	0800623b 	.word	0x0800623b
 8006168:	0800623b 	.word	0x0800623b
 800616c:	0800623b 	.word	0x0800623b
 8006170:	0800623b 	.word	0x0800623b
 8006174:	0800623b 	.word	0x0800623b
 8006178:	0800623b 	.word	0x0800623b
 800617c:	080061ef 	.word	0x080061ef
 8006180:	0800623b 	.word	0x0800623b
 8006184:	0800623b 	.word	0x0800623b
 8006188:	0800623b 	.word	0x0800623b
 800618c:	0800623b 	.word	0x0800623b
 8006190:	0800623b 	.word	0x0800623b
 8006194:	0800623b 	.word	0x0800623b
 8006198:	0800623b 	.word	0x0800623b
 800619c:	0800623b 	.word	0x0800623b
 80061a0:	0800623b 	.word	0x0800623b
 80061a4:	0800623b 	.word	0x0800623b
 80061a8:	0800623b 	.word	0x0800623b
 80061ac:	0800623b 	.word	0x0800623b
 80061b0:	0800623b 	.word	0x0800623b
 80061b4:	0800623b 	.word	0x0800623b
 80061b8:	0800623b 	.word	0x0800623b
 80061bc:	0800622d 	.word	0x0800622d
 80061c0:	2b40      	cmp	r3, #64	; 0x40
 80061c2:	d036      	beq.n	8006232 <UART_SetConfig+0x6c2>
 80061c4:	e039      	b.n	800623a <UART_SetConfig+0x6ca>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80061c6:	f7fd febf 	bl	8003f48 <HAL_RCCEx_GetD3PCLK1Freq>
 80061ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80061cc:	e03b      	b.n	8006246 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061ce:	f107 0314 	add.w	r3, r7, #20
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fd fece 	bl	8003f74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061dc:	e033      	b.n	8006246 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061de:	f107 0308 	add.w	r3, r7, #8
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fe f81a 	bl	800421c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061ec:	e02b      	b.n	8006246 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061ee:	4b0a      	ldr	r3, [pc, #40]	; (8006218 <UART_SetConfig+0x6a8>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0320 	and.w	r3, r3, #32
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d009      	beq.n	800620e <UART_SetConfig+0x69e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061fa:	4b07      	ldr	r3, [pc, #28]	; (8006218 <UART_SetConfig+0x6a8>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	08db      	lsrs	r3, r3, #3
 8006200:	f003 0303 	and.w	r3, r3, #3
 8006204:	4a08      	ldr	r2, [pc, #32]	; (8006228 <UART_SetConfig+0x6b8>)
 8006206:	fa22 f303 	lsr.w	r3, r2, r3
 800620a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800620c:	e01b      	b.n	8006246 <UART_SetConfig+0x6d6>
          pclk = (uint32_t) HSI_VALUE;
 800620e:	4b06      	ldr	r3, [pc, #24]	; (8006228 <UART_SetConfig+0x6b8>)
 8006210:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006212:	e018      	b.n	8006246 <UART_SetConfig+0x6d6>
 8006214:	40011400 	.word	0x40011400
 8006218:	58024400 	.word	0x58024400
 800621c:	40007800 	.word	0x40007800
 8006220:	40007c00 	.word	0x40007c00
 8006224:	58000c00 	.word	0x58000c00
 8006228:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800622c:	4bc4      	ldr	r3, [pc, #784]	; (8006540 <UART_SetConfig+0x9d0>)
 800622e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006230:	e009      	b.n	8006246 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006236:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006238:	e005      	b.n	8006246 <UART_SetConfig+0x6d6>
      default:
        pclk = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006244:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 81da 	beq.w	8006602 <UART_SetConfig+0xa92>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	4abc      	ldr	r2, [pc, #752]	; (8006544 <UART_SetConfig+0x9d4>)
 8006254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006258:	461a      	mov	r2, r3
 800625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006260:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	4613      	mov	r3, r2
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	4413      	add	r3, r2
 800626c:	6a3a      	ldr	r2, [r7, #32]
 800626e:	429a      	cmp	r2, r3
 8006270:	d305      	bcc.n	800627e <UART_SetConfig+0x70e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006278:	6a3a      	ldr	r2, [r7, #32]
 800627a:	429a      	cmp	r2, r3
 800627c:	d903      	bls.n	8006286 <UART_SetConfig+0x716>
      {
        ret = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006284:	e1bd      	b.n	8006602 <UART_SetConfig+0xa92>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006288:	4618      	mov	r0, r3
 800628a:	f04f 0100 	mov.w	r1, #0
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	4aac      	ldr	r2, [pc, #688]	; (8006544 <UART_SetConfig+0x9d4>)
 8006294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006298:	b29a      	uxth	r2, r3
 800629a:	f04f 0300 	mov.w	r3, #0
 800629e:	f7fa f81b 	bl	80002d8 <__aeabi_uldivmod>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	4610      	mov	r0, r2
 80062a8:	4619      	mov	r1, r3
 80062aa:	f04f 0200 	mov.w	r2, #0
 80062ae:	f04f 0300 	mov.w	r3, #0
 80062b2:	020b      	lsls	r3, r1, #8
 80062b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062b8:	0202      	lsls	r2, r0, #8
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	6849      	ldr	r1, [r1, #4]
 80062be:	0849      	lsrs	r1, r1, #1
 80062c0:	4608      	mov	r0, r1
 80062c2:	f04f 0100 	mov.w	r1, #0
 80062c6:	1814      	adds	r4, r2, r0
 80062c8:	eb43 0501 	adc.w	r5, r3, r1
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	461a      	mov	r2, r3
 80062d2:	f04f 0300 	mov.w	r3, #0
 80062d6:	4620      	mov	r0, r4
 80062d8:	4629      	mov	r1, r5
 80062da:	f7f9 fffd 	bl	80002d8 <__aeabi_uldivmod>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4613      	mov	r3, r2
 80062e4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ec:	d308      	bcc.n	8006300 <UART_SetConfig+0x790>
 80062ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062f4:	d204      	bcs.n	8006300 <UART_SetConfig+0x790>
        {
          huart->Instance->BRR = usartdiv;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062fc:	60da      	str	r2, [r3, #12]
 80062fe:	e180      	b.n	8006602 <UART_SetConfig+0xa92>
        }
        else
        {
          ret = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006306:	e17c      	b.n	8006602 <UART_SetConfig+0xa92>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	69db      	ldr	r3, [r3, #28]
 800630c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006310:	f040 80bf 	bne.w	8006492 <UART_SetConfig+0x922>
  {
    switch (clocksource)
 8006314:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006318:	2b20      	cmp	r3, #32
 800631a:	dc49      	bgt.n	80063b0 <UART_SetConfig+0x840>
 800631c:	2b00      	cmp	r3, #0
 800631e:	db7c      	blt.n	800641a <UART_SetConfig+0x8aa>
 8006320:	2b20      	cmp	r3, #32
 8006322:	d87a      	bhi.n	800641a <UART_SetConfig+0x8aa>
 8006324:	a201      	add	r2, pc, #4	; (adr r2, 800632c <UART_SetConfig+0x7bc>)
 8006326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632a:	bf00      	nop
 800632c:	080063b7 	.word	0x080063b7
 8006330:	080063bf 	.word	0x080063bf
 8006334:	0800641b 	.word	0x0800641b
 8006338:	0800641b 	.word	0x0800641b
 800633c:	080063c7 	.word	0x080063c7
 8006340:	0800641b 	.word	0x0800641b
 8006344:	0800641b 	.word	0x0800641b
 8006348:	0800641b 	.word	0x0800641b
 800634c:	080063d7 	.word	0x080063d7
 8006350:	0800641b 	.word	0x0800641b
 8006354:	0800641b 	.word	0x0800641b
 8006358:	0800641b 	.word	0x0800641b
 800635c:	0800641b 	.word	0x0800641b
 8006360:	0800641b 	.word	0x0800641b
 8006364:	0800641b 	.word	0x0800641b
 8006368:	0800641b 	.word	0x0800641b
 800636c:	080063e7 	.word	0x080063e7
 8006370:	0800641b 	.word	0x0800641b
 8006374:	0800641b 	.word	0x0800641b
 8006378:	0800641b 	.word	0x0800641b
 800637c:	0800641b 	.word	0x0800641b
 8006380:	0800641b 	.word	0x0800641b
 8006384:	0800641b 	.word	0x0800641b
 8006388:	0800641b 	.word	0x0800641b
 800638c:	0800641b 	.word	0x0800641b
 8006390:	0800641b 	.word	0x0800641b
 8006394:	0800641b 	.word	0x0800641b
 8006398:	0800641b 	.word	0x0800641b
 800639c:	0800641b 	.word	0x0800641b
 80063a0:	0800641b 	.word	0x0800641b
 80063a4:	0800641b 	.word	0x0800641b
 80063a8:	0800641b 	.word	0x0800641b
 80063ac:	0800640d 	.word	0x0800640d
 80063b0:	2b40      	cmp	r3, #64	; 0x40
 80063b2:	d02e      	beq.n	8006412 <UART_SetConfig+0x8a2>
 80063b4:	e031      	b.n	800641a <UART_SetConfig+0x8aa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063b6:	f7fc fe6b 	bl	8003090 <HAL_RCC_GetPCLK1Freq>
 80063ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80063bc:	e033      	b.n	8006426 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063be:	f7fc fe7d 	bl	80030bc <HAL_RCC_GetPCLK2Freq>
 80063c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80063c4:	e02f      	b.n	8006426 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063c6:	f107 0314 	add.w	r3, r7, #20
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fd fdd2 	bl	8003f74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063d4:	e027      	b.n	8006426 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063d6:	f107 0308 	add.w	r3, r7, #8
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fd ff1e 	bl	800421c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063e4:	e01f      	b.n	8006426 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063e6:	4b58      	ldr	r3, [pc, #352]	; (8006548 <UART_SetConfig+0x9d8>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d009      	beq.n	8006406 <UART_SetConfig+0x896>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063f2:	4b55      	ldr	r3, [pc, #340]	; (8006548 <UART_SetConfig+0x9d8>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	08db      	lsrs	r3, r3, #3
 80063f8:	f003 0303 	and.w	r3, r3, #3
 80063fc:	4a53      	ldr	r2, [pc, #332]	; (800654c <UART_SetConfig+0x9dc>)
 80063fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006402:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006404:	e00f      	b.n	8006426 <UART_SetConfig+0x8b6>
          pclk = (uint32_t) HSI_VALUE;
 8006406:	4b51      	ldr	r3, [pc, #324]	; (800654c <UART_SetConfig+0x9dc>)
 8006408:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800640a:	e00c      	b.n	8006426 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800640c:	4b4c      	ldr	r3, [pc, #304]	; (8006540 <UART_SetConfig+0x9d0>)
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006410:	e009      	b.n	8006426 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006416:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006418:	e005      	b.n	8006426 <UART_SetConfig+0x8b6>
      default:
        pclk = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006424:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 80ea 	beq.w	8006602 <UART_SetConfig+0xa92>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	4a44      	ldr	r2, [pc, #272]	; (8006544 <UART_SetConfig+0x9d4>)
 8006434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006438:	461a      	mov	r2, r3
 800643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006440:	005a      	lsls	r2, r3, #1
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	085b      	lsrs	r3, r3, #1
 8006448:	441a      	add	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006452:	b29b      	uxth	r3, r3
 8006454:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006458:	2b0f      	cmp	r3, #15
 800645a:	d916      	bls.n	800648a <UART_SetConfig+0x91a>
 800645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006462:	d212      	bcs.n	800648a <UART_SetConfig+0x91a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	b29b      	uxth	r3, r3
 8006468:	f023 030f 	bic.w	r3, r3, #15
 800646c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	085b      	lsrs	r3, r3, #1
 8006472:	b29b      	uxth	r3, r3
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	b29a      	uxth	r2, r3
 800647a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800647c:	4313      	orrs	r3, r2
 800647e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006486:	60da      	str	r2, [r3, #12]
 8006488:	e0bb      	b.n	8006602 <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006490:	e0b7      	b.n	8006602 <UART_SetConfig+0xa92>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006492:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006496:	2b20      	cmp	r3, #32
 8006498:	dc4a      	bgt.n	8006530 <UART_SetConfig+0x9c0>
 800649a:	2b00      	cmp	r3, #0
 800649c:	f2c0 8086 	blt.w	80065ac <UART_SetConfig+0xa3c>
 80064a0:	2b20      	cmp	r3, #32
 80064a2:	f200 8083 	bhi.w	80065ac <UART_SetConfig+0xa3c>
 80064a6:	a201      	add	r2, pc, #4	; (adr r2, 80064ac <UART_SetConfig+0x93c>)
 80064a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ac:	08006537 	.word	0x08006537
 80064b0:	08006551 	.word	0x08006551
 80064b4:	080065ad 	.word	0x080065ad
 80064b8:	080065ad 	.word	0x080065ad
 80064bc:	08006559 	.word	0x08006559
 80064c0:	080065ad 	.word	0x080065ad
 80064c4:	080065ad 	.word	0x080065ad
 80064c8:	080065ad 	.word	0x080065ad
 80064cc:	08006569 	.word	0x08006569
 80064d0:	080065ad 	.word	0x080065ad
 80064d4:	080065ad 	.word	0x080065ad
 80064d8:	080065ad 	.word	0x080065ad
 80064dc:	080065ad 	.word	0x080065ad
 80064e0:	080065ad 	.word	0x080065ad
 80064e4:	080065ad 	.word	0x080065ad
 80064e8:	080065ad 	.word	0x080065ad
 80064ec:	08006579 	.word	0x08006579
 80064f0:	080065ad 	.word	0x080065ad
 80064f4:	080065ad 	.word	0x080065ad
 80064f8:	080065ad 	.word	0x080065ad
 80064fc:	080065ad 	.word	0x080065ad
 8006500:	080065ad 	.word	0x080065ad
 8006504:	080065ad 	.word	0x080065ad
 8006508:	080065ad 	.word	0x080065ad
 800650c:	080065ad 	.word	0x080065ad
 8006510:	080065ad 	.word	0x080065ad
 8006514:	080065ad 	.word	0x080065ad
 8006518:	080065ad 	.word	0x080065ad
 800651c:	080065ad 	.word	0x080065ad
 8006520:	080065ad 	.word	0x080065ad
 8006524:	080065ad 	.word	0x080065ad
 8006528:	080065ad 	.word	0x080065ad
 800652c:	0800659f 	.word	0x0800659f
 8006530:	2b40      	cmp	r3, #64	; 0x40
 8006532:	d037      	beq.n	80065a4 <UART_SetConfig+0xa34>
 8006534:	e03a      	b.n	80065ac <UART_SetConfig+0xa3c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006536:	f7fc fdab 	bl	8003090 <HAL_RCC_GetPCLK1Freq>
 800653a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800653c:	e03c      	b.n	80065b8 <UART_SetConfig+0xa48>
 800653e:	bf00      	nop
 8006540:	003d0900 	.word	0x003d0900
 8006544:	08006f40 	.word	0x08006f40
 8006548:	58024400 	.word	0x58024400
 800654c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006550:	f7fc fdb4 	bl	80030bc <HAL_RCC_GetPCLK2Freq>
 8006554:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006556:	e02f      	b.n	80065b8 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006558:	f107 0314 	add.w	r3, r7, #20
 800655c:	4618      	mov	r0, r3
 800655e:	f7fd fd09 	bl	8003f74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006566:	e027      	b.n	80065b8 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006568:	f107 0308 	add.w	r3, r7, #8
 800656c:	4618      	mov	r0, r3
 800656e:	f7fd fe55 	bl	800421c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006576:	e01f      	b.n	80065b8 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006578:	4b2c      	ldr	r3, [pc, #176]	; (800662c <UART_SetConfig+0xabc>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d009      	beq.n	8006598 <UART_SetConfig+0xa28>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006584:	4b29      	ldr	r3, [pc, #164]	; (800662c <UART_SetConfig+0xabc>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	08db      	lsrs	r3, r3, #3
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	4a28      	ldr	r2, [pc, #160]	; (8006630 <UART_SetConfig+0xac0>)
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006596:	e00f      	b.n	80065b8 <UART_SetConfig+0xa48>
          pclk = (uint32_t) HSI_VALUE;
 8006598:	4b25      	ldr	r3, [pc, #148]	; (8006630 <UART_SetConfig+0xac0>)
 800659a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800659c:	e00c      	b.n	80065b8 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800659e:	4b25      	ldr	r3, [pc, #148]	; (8006634 <UART_SetConfig+0xac4>)
 80065a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065a2:	e009      	b.n	80065b8 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065aa:	e005      	b.n	80065b8 <UART_SetConfig+0xa48>
      default:
        pclk = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80065b6:	bf00      	nop
    }

    if (pclk != 0U)
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d021      	beq.n	8006602 <UART_SetConfig+0xa92>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	4a1d      	ldr	r2, [pc, #116]	; (8006638 <UART_SetConfig+0xac8>)
 80065c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065c8:	461a      	mov	r2, r3
 80065ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	085b      	lsrs	r3, r3, #1
 80065d6:	441a      	add	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	2b0f      	cmp	r3, #15
 80065e8:	d908      	bls.n	80065fc <UART_SetConfig+0xa8c>
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f0:	d204      	bcs.n	80065fc <UART_SetConfig+0xa8c>
      {
        huart->Instance->BRR = usartdiv;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065f8:	60da      	str	r2, [r3, #12]
 80065fa:	e002      	b.n	8006602 <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800661e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006622:	4618      	mov	r0, r3
 8006624:	3738      	adds	r7, #56	; 0x38
 8006626:	46bd      	mov	sp, r7
 8006628:	bdb0      	pop	{r4, r5, r7, pc}
 800662a:	bf00      	nop
 800662c:	58024400 	.word	0x58024400
 8006630:	03d09000 	.word	0x03d09000
 8006634:	003d0900 	.word	0x003d0900
 8006638:	08006f40 	.word	0x08006f40

0800663c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00a      	beq.n	8006666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00a      	beq.n	80066aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ae:	f003 0308 	and.w	r3, r3, #8
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d0:	f003 0310 	and.w	r3, r3, #16
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00a      	beq.n	80066ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f2:	f003 0320 	and.w	r3, r3, #32
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d01a      	beq.n	8006752 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800673a:	d10a      	bne.n	8006752 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00a      	beq.n	8006774 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	605a      	str	r2, [r3, #4]
  }
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af02      	add	r7, sp, #8
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006790:	f7fb f9ec 	bl	8001b6c <HAL_GetTick>
 8006794:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0308 	and.w	r3, r3, #8
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d10e      	bne.n	80067c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f82c 	bl	8006810 <UART_WaitOnFlagUntilTimeout>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e022      	b.n	8006808 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	2b04      	cmp	r3, #4
 80067ce:	d10e      	bne.n	80067ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f816 	bl	8006810 <UART_WaitOnFlagUntilTimeout>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e00c      	b.n	8006808 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	4613      	mov	r3, r2
 800681e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006820:	e062      	b.n	80068e8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006828:	d05e      	beq.n	80068e8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800682a:	f7fb f99f 	bl	8001b6c <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	429a      	cmp	r2, r3
 8006838:	d302      	bcc.n	8006840 <UART_WaitOnFlagUntilTimeout+0x30>
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d11d      	bne.n	800687c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800684e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689a      	ldr	r2, [r3, #8]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0201 	bic.w	r2, r2, #1
 800685e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2220      	movs	r2, #32
 800686c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e045      	b.n	8006908 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0304 	and.w	r3, r3, #4
 8006886:	2b00      	cmp	r3, #0
 8006888:	d02e      	beq.n	80068e8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006898:	d126      	bne.n	80068e8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068a2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068b2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0201 	bic.w	r2, r2, #1
 80068c2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e00f      	b.n	8006908 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	69da      	ldr	r2, [r3, #28]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	4013      	ands	r3, r2
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	bf0c      	ite	eq
 80068f8:	2301      	moveq	r3, #1
 80068fa:	2300      	movne	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	461a      	mov	r2, r3
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	429a      	cmp	r2, r3
 8006904:	d08d      	beq.n	8006822 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800691e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006926:	2b22      	cmp	r3, #34	; 0x22
 8006928:	d13b      	bne.n	80069a2 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006932:	89bb      	ldrh	r3, [r7, #12]
 8006934:	b2d9      	uxtb	r1, r3
 8006936:	89fb      	ldrh	r3, [r7, #14]
 8006938:	b2da      	uxtb	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693e:	400a      	ands	r2, r1
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006954:	b29b      	uxth	r3, r3
 8006956:	3b01      	subs	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006966:	b29b      	uxth	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d122      	bne.n	80069b2 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800697a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689a      	ldr	r2, [r3, #8]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 0201 	bic.w	r2, r2, #1
 800698a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2220      	movs	r2, #32
 8006990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7ff f8de 	bl	8005b5c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069a0:	e007      	b.n	80069b2 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	699a      	ldr	r2, [r3, #24]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f042 0208 	orr.w	r2, r2, #8
 80069b0:	619a      	str	r2, [r3, #24]
}
 80069b2:	bf00      	nop
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80069c8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069d0:	2b22      	cmp	r3, #34	; 0x22
 80069d2:	d13b      	bne.n	8006a4c <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80069e2:	89ba      	ldrh	r2, [r7, #12]
 80069e4:	89fb      	ldrh	r3, [r7, #14]
 80069e6:	4013      	ands	r3, r2
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f2:	1c9a      	adds	r2, r3, #2
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	3b01      	subs	r3, #1
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d122      	bne.n	8006a5c <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a24:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0201 	bic.w	r2, r2, #1
 8006a34:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff f889 	bl	8005b5c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a4a:	e007      	b.n	8006a5c <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699a      	ldr	r2, [r3, #24]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f042 0208 	orr.w	r2, r2, #8
 8006a5a:	619a      	str	r2, [r3, #24]
}
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a72:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a7a:	2b22      	cmp	r3, #34	; 0x22
 8006a7c:	d166      	bne.n	8006b4c <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a84:	81fb      	strh	r3, [r7, #14]
 8006a86:	e03d      	b.n	8006b04 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a90:	893b      	ldrh	r3, [r7, #8]
 8006a92:	b2d9      	uxtb	r1, r3
 8006a94:	89bb      	ldrh	r3, [r7, #12]
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9c:	400a      	ands	r2, r1
 8006a9e:	b2d2      	uxtb	r2, r2
 8006aa0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d119      	bne.n	8006afe <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ad8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6899      	ldr	r1, [r3, #8]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	4b1f      	ldr	r3, [pc, #124]	; (8006b64 <UART_RxISR_8BIT_FIFOEN+0x100>)
 8006ae6:	400b      	ands	r3, r1
 8006ae8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2220      	movs	r2, #32
 8006aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff f82f 	bl	8005b5c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006afe:	89fb      	ldrh	r3, [r7, #14]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	81fb      	strh	r3, [r7, #14]
 8006b04:	89fb      	ldrh	r3, [r7, #14]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1be      	bne.n	8006a88 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b10:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006b12:	897b      	ldrh	r3, [r7, #10]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d021      	beq.n	8006b5c <UART_RxISR_8BIT_FIFOEN+0xf8>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b1e:	897a      	ldrh	r2, [r7, #10]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d21b      	bcs.n	8006b5c <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689a      	ldr	r2, [r3, #8]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006b32:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a0c      	ldr	r2, [pc, #48]	; (8006b68 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8006b38:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f042 0220 	orr.w	r2, r2, #32
 8006b48:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b4a:	e007      	b.n	8006b5c <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699a      	ldr	r2, [r3, #24]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0208 	orr.w	r2, r2, #8
 8006b5a:	619a      	str	r2, [r3, #24]
}
 8006b5c:	bf00      	nop
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	effffffe 	.word	0xeffffffe
 8006b68:	08006911 	.word	0x08006911

08006b6c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b7a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b82:	2b22      	cmp	r3, #34	; 0x22
 8006b84:	d166      	bne.n	8006c54 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b8c:	82fb      	strh	r3, [r7, #22]
 8006b8e:	e03d      	b.n	8006c0c <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b9c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006b9e:	8a3a      	ldrh	r2, [r7, #16]
 8006ba0:	8abb      	ldrh	r3, [r7, #20]
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bae:	1c9a      	adds	r2, r3, #2
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d119      	bne.n	8006c06 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006be0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6899      	ldr	r1, [r3, #8]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	4b1f      	ldr	r3, [pc, #124]	; (8006c6c <UART_RxISR_16BIT_FIFOEN+0x100>)
 8006bee:	400b      	ands	r3, r1
 8006bf0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7fe ffab 	bl	8005b5c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006c06:	8afb      	ldrh	r3, [r7, #22]
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	82fb      	strh	r3, [r7, #22]
 8006c0c:	8afb      	ldrh	r3, [r7, #22]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1be      	bne.n	8006b90 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c18:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006c1a:	8a7b      	ldrh	r3, [r7, #18]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d021      	beq.n	8006c64 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c26:	8a7a      	ldrh	r2, [r7, #18]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d21b      	bcs.n	8006c64 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689a      	ldr	r2, [r3, #8]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006c3a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a0c      	ldr	r2, [pc, #48]	; (8006c70 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8006c40:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f042 0220 	orr.w	r2, r2, #32
 8006c50:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c52:	e007      	b.n	8006c64 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699a      	ldr	r2, [r3, #24]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0208 	orr.w	r2, r2, #8
 8006c62:	619a      	str	r2, [r3, #24]
}
 8006c64:	bf00      	nop
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	effffffe 	.word	0xeffffffe
 8006c70:	080069bb 	.word	0x080069bb

08006c74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d101      	bne.n	8006c8a <HAL_UARTEx_DisableFifoMode+0x16>
 8006c86:	2302      	movs	r3, #2
 8006c88:	e027      	b.n	8006cda <HAL_UARTEx_DisableFifoMode+0x66>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2224      	movs	r2, #36	; 0x24
 8006c96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0201 	bic.w	r2, r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006cb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d101      	bne.n	8006cfe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	e02d      	b.n	8006d5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2224      	movs	r2, #36	; 0x24
 8006d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0201 	bic.w	r2, r2, #1
 8006d24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f850 	bl	8006de0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b084      	sub	sp, #16
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d101      	bne.n	8006d7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d76:	2302      	movs	r3, #2
 8006d78:	e02d      	b.n	8006dd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2224      	movs	r2, #36	; 0x24
 8006d86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 0201 	bic.w	r2, r2, #1
 8006da0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f812 	bl	8006de0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b089      	sub	sp, #36	; 0x24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006de8:	4a2f      	ldr	r2, [pc, #188]	; (8006ea8 <UARTEx_SetNbDataToProcess+0xc8>)
 8006dea:	f107 0314 	add.w	r3, r7, #20
 8006dee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006df2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006df6:	4a2d      	ldr	r2, [pc, #180]	; (8006eac <UARTEx_SetNbDataToProcess+0xcc>)
 8006df8:	f107 030c 	add.w	r3, r7, #12
 8006dfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e00:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d108      	bne.n	8006e1e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e1c:	e03d      	b.n	8006e9a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e1e:	2310      	movs	r3, #16
 8006e20:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e22:	2310      	movs	r3, #16
 8006e24:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	0e5b      	lsrs	r3, r3, #25
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	f003 0307 	and.w	r3, r3, #7
 8006e34:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	0f5b      	lsrs	r3, r3, #29
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006e46:	7fbb      	ldrb	r3, [r7, #30]
 8006e48:	7f3a      	ldrb	r2, [r7, #28]
 8006e4a:	f107 0120 	add.w	r1, r7, #32
 8006e4e:	440a      	add	r2, r1
 8006e50:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006e54:	fb02 f303 	mul.w	r3, r2, r3
 8006e58:	7f3a      	ldrb	r2, [r7, #28]
 8006e5a:	f107 0120 	add.w	r1, r7, #32
 8006e5e:	440a      	add	r2, r1
 8006e60:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006e64:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006e70:	7ffb      	ldrb	r3, [r7, #31]
 8006e72:	7f7a      	ldrb	r2, [r7, #29]
 8006e74:	f107 0120 	add.w	r1, r7, #32
 8006e78:	440a      	add	r2, r1
 8006e7a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006e7e:	fb02 f303 	mul.w	r3, r2, r3
 8006e82:	7f7a      	ldrb	r2, [r7, #29]
 8006e84:	f107 0120 	add.w	r1, r7, #32
 8006e88:	440a      	add	r2, r1
 8006e8a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006e8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e9a:	bf00      	nop
 8006e9c:	3724      	adds	r7, #36	; 0x24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	08006f20 	.word	0x08006f20
 8006eac:	08006f28 	.word	0x08006f28

08006eb0 <__libc_init_array>:
 8006eb0:	b570      	push	{r4, r5, r6, lr}
 8006eb2:	4d0d      	ldr	r5, [pc, #52]	; (8006ee8 <__libc_init_array+0x38>)
 8006eb4:	4c0d      	ldr	r4, [pc, #52]	; (8006eec <__libc_init_array+0x3c>)
 8006eb6:	1b64      	subs	r4, r4, r5
 8006eb8:	10a4      	asrs	r4, r4, #2
 8006eba:	2600      	movs	r6, #0
 8006ebc:	42a6      	cmp	r6, r4
 8006ebe:	d109      	bne.n	8006ed4 <__libc_init_array+0x24>
 8006ec0:	4d0b      	ldr	r5, [pc, #44]	; (8006ef0 <__libc_init_array+0x40>)
 8006ec2:	4c0c      	ldr	r4, [pc, #48]	; (8006ef4 <__libc_init_array+0x44>)
 8006ec4:	f000 f820 	bl	8006f08 <_init>
 8006ec8:	1b64      	subs	r4, r4, r5
 8006eca:	10a4      	asrs	r4, r4, #2
 8006ecc:	2600      	movs	r6, #0
 8006ece:	42a6      	cmp	r6, r4
 8006ed0:	d105      	bne.n	8006ede <__libc_init_array+0x2e>
 8006ed2:	bd70      	pop	{r4, r5, r6, pc}
 8006ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed8:	4798      	blx	r3
 8006eda:	3601      	adds	r6, #1
 8006edc:	e7ee      	b.n	8006ebc <__libc_init_array+0xc>
 8006ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee2:	4798      	blx	r3
 8006ee4:	3601      	adds	r6, #1
 8006ee6:	e7f2      	b.n	8006ece <__libc_init_array+0x1e>
 8006ee8:	08006f60 	.word	0x08006f60
 8006eec:	08006f60 	.word	0x08006f60
 8006ef0:	08006f60 	.word	0x08006f60
 8006ef4:	08006f64 	.word	0x08006f64

08006ef8 <memset>:
 8006ef8:	4402      	add	r2, r0
 8006efa:	4603      	mov	r3, r0
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d100      	bne.n	8006f02 <memset+0xa>
 8006f00:	4770      	bx	lr
 8006f02:	f803 1b01 	strb.w	r1, [r3], #1
 8006f06:	e7f9      	b.n	8006efc <memset+0x4>

08006f08 <_init>:
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	bf00      	nop
 8006f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0e:	bc08      	pop	{r3}
 8006f10:	469e      	mov	lr, r3
 8006f12:	4770      	bx	lr

08006f14 <_fini>:
 8006f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f16:	bf00      	nop
 8006f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1a:	bc08      	pop	{r3}
 8006f1c:	469e      	mov	lr, r3
 8006f1e:	4770      	bx	lr
