
erche.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007134  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080073cc  080073cc  000173cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007404  08007404  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007404  08007404  00017404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800740c  0800740c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800740c  0800740c  0001740c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007410  08007410  00017410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08007414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  24000078  0800748c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000308  0800748c  00020308  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d90c  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aba  00000000  00000000  0003d9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00040470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00041420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000365d3  00000000  00000000  00042318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014290  00000000  00000000  000788eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001618e6  00000000  00000000  0008cb7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ee461  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042cc  00000000  00000000  001ee4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080073b4 	.word	0x080073b4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	080073b4 	.word	0x080073b4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <adjust>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void adjust(int n)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if(n==1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d11f      	bne.n	800061e <adjust+0x4e>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <adjust+0x5c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2200      	movs	r2, #0
 80005e4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,27);
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <adjust+0x5c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	221b      	movs	r2, #27
 80005ec:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,26);
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <adjust+0x5c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	221a      	movs	r2, #26
 80005f4:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <adjust+0x5c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2200      	movs	r2, #0
 80005fc:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,0);
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <adjust+0x60>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2200      	movs	r2, #0
 8000604:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,22);
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <adjust+0x60>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2216      	movs	r2, #22
 800060c:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,25);
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <adjust+0x60>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2219      	movs	r2, #25
 8000614:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <adjust+0x60>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	24000228 	.word	0x24000228
 8000630:	240000b0 	.word	0x240000b0

08000634 <move>:
void move(int n)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	if(n==1)//直行
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b01      	cmp	r3, #1
 8000640:	f040 80a3 	bne.w	800078a <move+0x156>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000648:	48a2      	ldr	r0, [pc, #648]	; (80008d4 <move+0x2a0>)
 800064a:	f002 f837 	bl	80026bc <HAL_GPIO_ReadPin>
 800064e:	4603      	mov	r3, r0
 8000650:	2b01      	cmp	r3, #1
 8000652:	d127      	bne.n	80006a4 <move+0x70>
 8000654:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000658:	489e      	ldr	r0, [pc, #632]	; (80008d4 <move+0x2a0>)
 800065a:	f002 f82f 	bl	80026bc <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d11f      	bne.n	80006a4 <move+0x70>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,28);
 8000664:	4b9c      	ldr	r3, [pc, #624]	; (80008d8 <move+0x2a4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	221c      	movs	r2, #28
 800066a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800066c:	4b9a      	ldr	r3, [pc, #616]	; (80008d8 <move+0x2a4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2200      	movs	r2, #0
 8000672:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,28);
 8000674:	4b98      	ldr	r3, [pc, #608]	; (80008d8 <move+0x2a4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	221c      	movs	r2, #28
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 800067c:	4b96      	ldr	r3, [pc, #600]	; (80008d8 <move+0x2a4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2200      	movs	r2, #0
 8000682:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,14);
 8000684:	4b95      	ldr	r3, [pc, #596]	; (80008dc <move+0x2a8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	220e      	movs	r2, #14
 800068a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 800068c:	4b93      	ldr	r3, [pc, #588]	; (80008dc <move+0x2a8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2200      	movs	r2, #0
 8000692:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,33);
 8000694:	4b91      	ldr	r3, [pc, #580]	; (80008dc <move+0x2a8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2221      	movs	r2, #33	; 0x21
 800069a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 800069c:	4b8f      	ldr	r3, [pc, #572]	; (80008dc <move+0x2a8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2200      	movs	r2, #0
 80006a2:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 80006a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a8:	488a      	ldr	r0, [pc, #552]	; (80008d4 <move+0x2a0>)
 80006aa:	f002 f807 	bl	80026bc <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d127      	bne.n	8000704 <move+0xd0>
 80006b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b8:	4886      	ldr	r0, [pc, #536]	; (80008d4 <move+0x2a0>)
 80006ba:	f001 ffff 	bl	80026bc <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d11f      	bne.n	8000704 <move+0xd0>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,28);
 80006c4:	4b84      	ldr	r3, [pc, #528]	; (80008d8 <move+0x2a4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	221c      	movs	r2, #28
 80006ca:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80006cc:	4b82      	ldr	r3, [pc, #520]	; (80008d8 <move+0x2a4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2200      	movs	r2, #0
 80006d2:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,28);
 80006d4:	4b80      	ldr	r3, [pc, #512]	; (80008d8 <move+0x2a4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	221c      	movs	r2, #28
 80006da:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80006dc:	4b7e      	ldr	r3, [pc, #504]	; (80008d8 <move+0x2a4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2200      	movs	r2, #0
 80006e2:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,33);
 80006e4:	4b7d      	ldr	r3, [pc, #500]	; (80008dc <move+0x2a8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2221      	movs	r2, #33	; 0x21
 80006ea:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 80006ec:	4b7b      	ldr	r3, [pc, #492]	; (80008dc <move+0x2a8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2200      	movs	r2, #0
 80006f2:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,14);
 80006f4:	4b79      	ldr	r3, [pc, #484]	; (80008dc <move+0x2a8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	220e      	movs	r2, #14
 80006fa:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 80006fc:	4b77      	ldr	r3, [pc, #476]	; (80008dc <move+0x2a8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2200      	movs	r2, #0
 8000702:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000704:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000708:	4872      	ldr	r0, [pc, #456]	; (80008d4 <move+0x2a0>)
 800070a:	f001 ffd7 	bl	80026bc <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d127      	bne.n	8000764 <move+0x130>
 8000714:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000718:	486e      	ldr	r0, [pc, #440]	; (80008d4 <move+0x2a0>)
 800071a:	f001 ffcf 	bl	80026bc <HAL_GPIO_ReadPin>
 800071e:	4603      	mov	r3, r0
 8000720:	2b01      	cmp	r3, #1
 8000722:	d11f      	bne.n	8000764 <move+0x130>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,28);
 8000724:	4b6c      	ldr	r3, [pc, #432]	; (80008d8 <move+0x2a4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	221c      	movs	r2, #28
 800072a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800072c:	4b6a      	ldr	r3, [pc, #424]	; (80008d8 <move+0x2a4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2200      	movs	r2, #0
 8000732:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,28);
 8000734:	4b68      	ldr	r3, [pc, #416]	; (80008d8 <move+0x2a4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	221c      	movs	r2, #28
 800073a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 800073c:	4b66      	ldr	r3, [pc, #408]	; (80008d8 <move+0x2a4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2200      	movs	r2, #0
 8000742:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,14);
 8000744:	4b65      	ldr	r3, [pc, #404]	; (80008dc <move+0x2a8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	220e      	movs	r2, #14
 800074a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 800074c:	4b63      	ldr	r3, [pc, #396]	; (80008dc <move+0x2a8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2200      	movs	r2, #0
 8000752:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,15);
 8000754:	4b61      	ldr	r3, [pc, #388]	; (80008dc <move+0x2a8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	220f      	movs	r2, #15
 800075a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 800075c:	4b5f      	ldr	r3, [pc, #380]	; (80008dc <move+0x2a8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2200      	movs	r2, #0
 8000762:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000764:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000768:	485a      	ldr	r0, [pc, #360]	; (80008d4 <move+0x2a0>)
 800076a:	f001 ffa7 	bl	80026bc <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d10a      	bne.n	800078a <move+0x156>
 8000774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000778:	4856      	ldr	r0, [pc, #344]	; (80008d4 <move+0x2a0>)
 800077a:	f001 ff9f 	bl	80026bc <HAL_GPIO_ReadPin>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d102      	bne.n	800078a <move+0x156>
		{
			adjust(1);
 8000784:	2001      	movs	r0, #1
 8000786:	f7ff ff23 	bl	80005d0 <adjust>
//
//			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
//			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
		}
	}
	if(n==2)//右行
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b02      	cmp	r3, #2
 800078e:	f040 80c7 	bne.w	8000920 <move+0x2ec>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1)
 8000792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000796:	4852      	ldr	r0, [pc, #328]	; (80008e0 <move+0x2ac>)
 8000798:	f001 ff90 	bl	80026bc <HAL_GPIO_ReadPin>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d126      	bne.n	80007f0 <move+0x1bc>
 80007a2:	2120      	movs	r1, #32
 80007a4:	484f      	ldr	r0, [pc, #316]	; (80008e4 <move+0x2b0>)
 80007a6:	f001 ff89 	bl	80026bc <HAL_GPIO_ReadPin>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d11f      	bne.n	80007f0 <move+0x1bc>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,19);
 80007b0:	4b49      	ldr	r3, [pc, #292]	; (80008d8 <move+0x2a4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2213      	movs	r2, #19
 80007b6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80007b8:	4b47      	ldr	r3, [pc, #284]	; (80008d8 <move+0x2a4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2200      	movs	r2, #0
 80007be:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80007c0:	4b45      	ldr	r3, [pc, #276]	; (80008d8 <move+0x2a4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2200      	movs	r2, #0
 80007c6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,22);
 80007c8:	4b43      	ldr	r3, [pc, #268]	; (80008d8 <move+0x2a4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2216      	movs	r2, #22
 80007ce:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 80007d0:	4b42      	ldr	r3, [pc, #264]	; (80008dc <move+0x2a8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2210      	movs	r2, #16
 80007d6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 80007d8:	4b40      	ldr	r3, [pc, #256]	; (80008dc <move+0x2a8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2200      	movs	r2, #0
 80007de:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 80007e0:	4b3e      	ldr	r3, [pc, #248]	; (80008dc <move+0x2a8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2200      	movs	r2, #0
 80007e6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,24);
 80007e8:	4b3c      	ldr	r3, [pc, #240]	; (80008dc <move+0x2a8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2218      	movs	r2, #24
 80007ee:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 80007f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f4:	483a      	ldr	r0, [pc, #232]	; (80008e0 <move+0x2ac>)
 80007f6:	f001 ff61 	bl	80026bc <HAL_GPIO_ReadPin>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d126      	bne.n	800084e <move+0x21a>
 8000800:	2120      	movs	r1, #32
 8000802:	4838      	ldr	r0, [pc, #224]	; (80008e4 <move+0x2b0>)
 8000804:	f001 ff5a 	bl	80026bc <HAL_GPIO_ReadPin>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d11f      	bne.n	800084e <move+0x21a>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,24);
 800080e:	4b32      	ldr	r3, [pc, #200]	; (80008d8 <move+0x2a4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2218      	movs	r2, #24
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 8000816:	4b30      	ldr	r3, [pc, #192]	; (80008d8 <move+0x2a4>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2200      	movs	r2, #0
 800081c:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 800081e:	4b2e      	ldr	r3, [pc, #184]	; (80008d8 <move+0x2a4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2200      	movs	r2, #0
 8000824:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,21);
 8000826:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <move+0x2a4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2215      	movs	r2, #21
 800082c:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,18);
 800082e:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <move+0x2a8>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2212      	movs	r2, #18
 8000834:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000836:	4b29      	ldr	r3, [pc, #164]	; (80008dc <move+0x2a8>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2200      	movs	r2, #0
 800083c:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 800083e:	4b27      	ldr	r3, [pc, #156]	; (80008dc <move+0x2a8>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2200      	movs	r2, #0
 8000844:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,19);
 8000846:	4b25      	ldr	r3, [pc, #148]	; (80008dc <move+0x2a8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2213      	movs	r2, #19
 800084c:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1)
 800084e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000852:	4823      	ldr	r0, [pc, #140]	; (80008e0 <move+0x2ac>)
 8000854:	f001 ff32 	bl	80026bc <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b01      	cmp	r3, #1
 800085c:	d126      	bne.n	80008ac <move+0x278>
 800085e:	2120      	movs	r1, #32
 8000860:	4820      	ldr	r0, [pc, #128]	; (80008e4 <move+0x2b0>)
 8000862:	f001 ff2b 	bl	80026bc <HAL_GPIO_ReadPin>
 8000866:	4603      	mov	r3, r0
 8000868:	2b01      	cmp	r3, #1
 800086a:	d11f      	bne.n	80008ac <move+0x278>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,19);
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <move+0x2a4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2213      	movs	r2, #19
 8000872:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <move+0x2a4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <move+0x2a4>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2200      	movs	r2, #0
 8000882:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,20);
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <move+0x2a4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2214      	movs	r2, #20
 800088a:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <move+0x2a8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2210      	movs	r2, #16
 8000892:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <move+0x2a8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2200      	movs	r2, #0
 800089a:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <move+0x2a8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2200      	movs	r2, #0
 80008a2:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,19);
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <move+0x2a8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2213      	movs	r2, #19
 80008aa:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 80008ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b0:	480b      	ldr	r0, [pc, #44]	; (80008e0 <move+0x2ac>)
 80008b2:	f001 ff03 	bl	80026bc <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d131      	bne.n	8000920 <move+0x2ec>
 80008bc:	2120      	movs	r1, #32
 80008be:	4809      	ldr	r0, [pc, #36]	; (80008e4 <move+0x2b0>)
 80008c0:	f001 fefc 	bl	80026bc <HAL_GPIO_ReadPin>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d12a      	bne.n	8000920 <move+0x2ec>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 80008ca:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <move+0x2a4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2264      	movs	r2, #100	; 0x64
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
 80008d2:	e009      	b.n	80008e8 <move+0x2b4>
 80008d4:	58020400 	.word	0x58020400
 80008d8:	24000228 	.word	0x24000228
 80008dc:	240000b0 	.word	0x240000b0
 80008e0:	58020800 	.word	0x58020800
 80008e4:	58021000 	.word	0x58021000
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 80008e8:	4b9a      	ldr	r3, [pc, #616]	; (8000b54 <move+0x520>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2264      	movs	r2, #100	; 0x64
 80008ee:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 80008f0:	4b98      	ldr	r3, [pc, #608]	; (8000b54 <move+0x520>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2264      	movs	r2, #100	; 0x64
 80008f6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 80008f8:	4b96      	ldr	r3, [pc, #600]	; (8000b54 <move+0x520>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2264      	movs	r2, #100	; 0x64
 80008fe:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 8000900:	4b95      	ldr	r3, [pc, #596]	; (8000b58 <move+0x524>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2264      	movs	r2, #100	; 0x64
 8000906:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 8000908:	4b93      	ldr	r3, [pc, #588]	; (8000b58 <move+0x524>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2264      	movs	r2, #100	; 0x64
 800090e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 8000910:	4b91      	ldr	r3, [pc, #580]	; (8000b58 <move+0x524>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2264      	movs	r2, #100	; 0x64
 8000916:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 8000918:	4b8f      	ldr	r3, [pc, #572]	; (8000b58 <move+0x524>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2264      	movs	r2, #100	; 0x64
 800091e:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	if(n==3)//旋转
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b03      	cmp	r3, #3
 8000924:	d11f      	bne.n	8000966 <move+0x332>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8000926:	4b8b      	ldr	r3, [pc, #556]	; (8000b54 <move+0x520>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2200      	movs	r2, #0
 800092c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,27);//20
 800092e:	4b89      	ldr	r3, [pc, #548]	; (8000b54 <move+0x520>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	221b      	movs	r2, #27
 8000934:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,27);//25
 8000936:	4b87      	ldr	r3, [pc, #540]	; (8000b54 <move+0x520>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	221b      	movs	r2, #27
 800093c:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,0);
 800093e:	4b85      	ldr	r3, [pc, #532]	; (8000b54 <move+0x520>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2200      	movs	r2, #0
 8000944:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,25);//25
 8000946:	4b84      	ldr	r3, [pc, #528]	; (8000b58 <move+0x524>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2219      	movs	r2, #25
 800094c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 800094e:	4b82      	ldr	r3, [pc, #520]	; (8000b58 <move+0x524>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2200      	movs	r2, #0
 8000954:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 8000956:	4b80      	ldr	r3, [pc, #512]	; (8000b58 <move+0x524>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2200      	movs	r2, #0
 800095c:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,23);//20
 800095e:	4b7e      	ldr	r3, [pc, #504]	; (8000b58 <move+0x524>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2217      	movs	r2, #23
 8000964:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==4)//刹车
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b04      	cmp	r3, #4
 800096a:	d11f      	bne.n	80009ac <move+0x378>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 800096c:	4b79      	ldr	r3, [pc, #484]	; (8000b54 <move+0x520>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2264      	movs	r2, #100	; 0x64
 8000972:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 8000974:	4b77      	ldr	r3, [pc, #476]	; (8000b54 <move+0x520>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2264      	movs	r2, #100	; 0x64
 800097a:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,100);
 800097c:	4b75      	ldr	r3, [pc, #468]	; (8000b54 <move+0x520>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2264      	movs	r2, #100	; 0x64
 8000982:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,100);
 8000984:	4b73      	ldr	r3, [pc, #460]	; (8000b54 <move+0x520>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2264      	movs	r2, #100	; 0x64
 800098a:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,100);
 800098c:	4b72      	ldr	r3, [pc, #456]	; (8000b58 <move+0x524>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2264      	movs	r2, #100	; 0x64
 8000992:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,100);
 8000994:	4b70      	ldr	r3, [pc, #448]	; (8000b58 <move+0x524>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2264      	movs	r2, #100	; 0x64
 800099a:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,100);
 800099c:	4b6e      	ldr	r3, [pc, #440]	; (8000b58 <move+0x524>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2264      	movs	r2, #100	; 0x64
 80009a2:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,100);
 80009a4:	4b6c      	ldr	r3, [pc, #432]	; (8000b58 <move+0x524>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2264      	movs	r2, #100	; 0x64
 80009aa:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==5)//倒车入库
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b05      	cmp	r3, #5
 80009b0:	d11f      	bne.n	80009f2 <move+0x3be>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 80009b2:	4b68      	ldr	r3, [pc, #416]	; (8000b54 <move+0x520>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2264      	movs	r2, #100	; 0x64
 80009b8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 80009ba:	4b66      	ldr	r3, [pc, #408]	; (8000b54 <move+0x520>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2264      	movs	r2, #100	; 0x64
 80009c0:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,33);
 80009c2:	4b64      	ldr	r3, [pc, #400]	; (8000b54 <move+0x520>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2221      	movs	r2, #33	; 0x21
 80009c8:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80009ca:	4b62      	ldr	r3, [pc, #392]	; (8000b54 <move+0x520>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,100);
 80009d2:	4b61      	ldr	r3, [pc, #388]	; (8000b58 <move+0x524>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2264      	movs	r2, #100	; 0x64
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,100);
 80009da:	4b5f      	ldr	r3, [pc, #380]	; (8000b58 <move+0x524>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2264      	movs	r2, #100	; 0x64
 80009e0:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,33);
 80009e2:	4b5d      	ldr	r3, [pc, #372]	; (8000b58 <move+0x524>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2221      	movs	r2, #33	; 0x21
 80009e8:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 80009ea:	4b5b      	ldr	r3, [pc, #364]	; (8000b58 <move+0x524>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2200      	movs	r2, #0
 80009f0:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==6)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b06      	cmp	r3, #6
 80009f6:	f040 80c7 	bne.w	8000b88 <move+0x554>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 80009fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009fe:	4857      	ldr	r0, [pc, #348]	; (8000b5c <move+0x528>)
 8000a00:	f001 fe5c 	bl	80026bc <HAL_GPIO_ReadPin>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d127      	bne.n	8000a5a <move+0x426>
 8000a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a0e:	4853      	ldr	r0, [pc, #332]	; (8000b5c <move+0x528>)
 8000a10:	f001 fe54 	bl	80026bc <HAL_GPIO_ReadPin>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d11f      	bne.n	8000a5a <move+0x426>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,26);
 8000a1a:	4b4e      	ldr	r3, [pc, #312]	; (8000b54 <move+0x520>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	221a      	movs	r2, #26
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000a22:	4b4c      	ldr	r3, [pc, #304]	; (8000b54 <move+0x520>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2200      	movs	r2, #0
 8000a28:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,26);
 8000a2a:	4b4a      	ldr	r3, [pc, #296]	; (8000b54 <move+0x520>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	221a      	movs	r2, #26
 8000a30:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000a32:	4b48      	ldr	r3, [pc, #288]	; (8000b54 <move+0x520>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2200      	movs	r2, #0
 8000a38:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,14);
 8000a3a:	4b47      	ldr	r3, [pc, #284]	; (8000b58 <move+0x524>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	220e      	movs	r2, #14
 8000a40:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000a42:	4b45      	ldr	r3, [pc, #276]	; (8000b58 <move+0x524>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2200      	movs	r2, #0
 8000a48:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,35);
 8000a4a:	4b43      	ldr	r3, [pc, #268]	; (8000b58 <move+0x524>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2223      	movs	r2, #35	; 0x23
 8000a50:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000a52:	4b41      	ldr	r3, [pc, #260]	; (8000b58 <move+0x524>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2200      	movs	r2, #0
 8000a58:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000a5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a5e:	483f      	ldr	r0, [pc, #252]	; (8000b5c <move+0x528>)
 8000a60:	f001 fe2c 	bl	80026bc <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d127      	bne.n	8000aba <move+0x486>
 8000a6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6e:	483b      	ldr	r0, [pc, #236]	; (8000b5c <move+0x528>)
 8000a70:	f001 fe24 	bl	80026bc <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d11f      	bne.n	8000aba <move+0x486>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,26);
 8000a7a:	4b36      	ldr	r3, [pc, #216]	; (8000b54 <move+0x520>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	221a      	movs	r2, #26
 8000a80:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000a82:	4b34      	ldr	r3, [pc, #208]	; (8000b54 <move+0x520>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2200      	movs	r2, #0
 8000a88:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,26);
 8000a8a:	4b32      	ldr	r3, [pc, #200]	; (8000b54 <move+0x520>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	221a      	movs	r2, #26
 8000a90:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000a92:	4b30      	ldr	r3, [pc, #192]	; (8000b54 <move+0x520>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2200      	movs	r2, #0
 8000a98:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,35);
 8000a9a:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <move+0x524>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2223      	movs	r2, #35	; 0x23
 8000aa0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <move+0x524>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,14);
 8000aaa:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <move+0x524>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	220e      	movs	r2, #14
 8000ab0:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000ab2:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <move+0x524>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000aba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000abe:	4827      	ldr	r0, [pc, #156]	; (8000b5c <move+0x528>)
 8000ac0:	f001 fdfc 	bl	80026bc <HAL_GPIO_ReadPin>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d127      	bne.n	8000b1a <move+0x4e6>
 8000aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ace:	4823      	ldr	r0, [pc, #140]	; (8000b5c <move+0x528>)
 8000ad0:	f001 fdf4 	bl	80026bc <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d11f      	bne.n	8000b1a <move+0x4e6>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,26);
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <move+0x520>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	221a      	movs	r2, #26
 8000ae0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <move+0x520>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,26);
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <move+0x520>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	221a      	movs	r2, #26
 8000af0:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <move+0x520>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2200      	movs	r2, #0
 8000af8:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,12);
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <move+0x524>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	220c      	movs	r2, #12
 8000b00:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <move+0x524>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2200      	movs	r2, #0
 8000b08:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,12);
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <move+0x524>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	220c      	movs	r2, #12
 8000b10:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <move+0x524>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2200      	movs	r2, #0
 8000b18:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000b1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b1e:	480f      	ldr	r0, [pc, #60]	; (8000b5c <move+0x528>)
 8000b20:	f001 fdcc 	bl	80026bc <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d12e      	bne.n	8000b88 <move+0x554>
 8000b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2e:	480b      	ldr	r0, [pc, #44]	; (8000b5c <move+0x528>)
 8000b30:	f001 fdc4 	bl	80026bc <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d126      	bne.n	8000b88 <move+0x554>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <move+0x520>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2264      	movs	r2, #100	; 0x64
 8000b40:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <move+0x520>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2264      	movs	r2, #100	; 0x64
 8000b48:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 8000b4a:	4b02      	ldr	r3, [pc, #8]	; (8000b54 <move+0x520>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2264      	movs	r2, #100	; 0x64
 8000b50:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b52:	e005      	b.n	8000b60 <move+0x52c>
 8000b54:	24000228 	.word	0x24000228
 8000b58:	240000b0 	.word	0x240000b0
 8000b5c:	58020400 	.word	0x58020400
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <move+0x55c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2264      	movs	r2, #100	; 0x64
 8000b66:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <move+0x560>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2264      	movs	r2, #100	; 0x64
 8000b6e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <move+0x560>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2264      	movs	r2, #100	; 0x64
 8000b76:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <move+0x560>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2264      	movs	r2, #100	; 0x64
 8000b7e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <move+0x560>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2264      	movs	r2, #100	; 0x64
 8000b86:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	24000228 	.word	0x24000228
 8000b94:	240000b0 	.word	0x240000b0

08000b98 <shuxian>:

void shuxian()
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	if(step==1)//直走
 8000b9c:	4b87      	ldr	r3, [pc, #540]	; (8000dbc <shuxian+0x224>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d11c      	bne.n	8000bde <shuxian+0x46>
	{
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000ba4:	2120      	movs	r1, #32
 8000ba6:	4886      	ldr	r0, [pc, #536]	; (8000dc0 <shuxian+0x228>)
 8000ba8:	f001 fd88 	bl	80026bc <HAL_GPIO_ReadPin>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d102      	bne.n	8000bb8 <shuxian+0x20>
		{
			Xflag=1;
 8000bb2:	4b84      	ldr	r3, [pc, #528]	; (8000dc4 <shuxian+0x22c>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Xflag==1)
 8000bb8:	2120      	movs	r1, #32
 8000bba:	4881      	ldr	r0, [pc, #516]	; (8000dc0 <shuxian+0x228>)
 8000bbc:	f001 fd7e 	bl	80026bc <HAL_GPIO_ReadPin>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d10b      	bne.n	8000bde <shuxian+0x46>
 8000bc6:	4b7f      	ldr	r3, [pc, #508]	; (8000dc4 <shuxian+0x22c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d107      	bne.n	8000bde <shuxian+0x46>
		{
			X+=1;
 8000bce:	4b7e      	ldr	r3, [pc, #504]	; (8000dc8 <shuxian+0x230>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	4a7c      	ldr	r2, [pc, #496]	; (8000dc8 <shuxian+0x230>)
 8000bd6:	6013      	str	r3, [r2, #0]
			Xflag=0;
 8000bd8:	4b7a      	ldr	r3, [pc, #488]	; (8000dc4 <shuxian+0x22c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==2||step==4||step==6||step==12||step==14)//旋转
 8000bde:	4b77      	ldr	r3, [pc, #476]	; (8000dbc <shuxian+0x224>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d00f      	beq.n	8000c06 <shuxian+0x6e>
 8000be6:	4b75      	ldr	r3, [pc, #468]	; (8000dbc <shuxian+0x224>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	d00b      	beq.n	8000c06 <shuxian+0x6e>
 8000bee:	4b73      	ldr	r3, [pc, #460]	; (8000dbc <shuxian+0x224>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d007      	beq.n	8000c06 <shuxian+0x6e>
 8000bf6:	4b71      	ldr	r3, [pc, #452]	; (8000dbc <shuxian+0x224>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b0c      	cmp	r3, #12
 8000bfc:	d003      	beq.n	8000c06 <shuxian+0x6e>
 8000bfe:	4b6f      	ldr	r3, [pc, #444]	; (8000dbc <shuxian+0x224>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b0e      	cmp	r3, #14
 8000c04:	d12e      	bne.n	8000c64 <shuxian+0xcc>
	{
		if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1)&&turnflag==1)
 8000c06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c0a:	4870      	ldr	r0, [pc, #448]	; (8000dcc <shuxian+0x234>)
 8000c0c:	f001 fd56 	bl	80026bc <HAL_GPIO_ReadPin>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d113      	bne.n	8000c3e <shuxian+0xa6>
 8000c16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c1a:	486c      	ldr	r0, [pc, #432]	; (8000dcc <shuxian+0x234>)
 8000c1c:	f001 fd4e 	bl	80026bc <HAL_GPIO_ReadPin>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d10b      	bne.n	8000c3e <shuxian+0xa6>
 8000c26:	4b6a      	ldr	r3, [pc, #424]	; (8000dd0 <shuxian+0x238>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d107      	bne.n	8000c3e <shuxian+0xa6>
		{
			turn+=1;
 8000c2e:	4b69      	ldr	r3, [pc, #420]	; (8000dd4 <shuxian+0x23c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	4a67      	ldr	r2, [pc, #412]	; (8000dd4 <shuxian+0x23c>)
 8000c36:	6013      	str	r3, [r2, #0]
			turnflag=0;
 8000c38:	4b65      	ldr	r3, [pc, #404]	; (8000dd0 <shuxian+0x238>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0||HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0)
 8000c3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c42:	4862      	ldr	r0, [pc, #392]	; (8000dcc <shuxian+0x234>)
 8000c44:	f001 fd3a 	bl	80026bc <HAL_GPIO_ReadPin>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d007      	beq.n	8000c5e <shuxian+0xc6>
 8000c4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c52:	485e      	ldr	r0, [pc, #376]	; (8000dcc <shuxian+0x234>)
 8000c54:	f001 fd32 	bl	80026bc <HAL_GPIO_ReadPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d102      	bne.n	8000c64 <shuxian+0xcc>
		{
			turnflag=1;
 8000c5e:	4b5c      	ldr	r3, [pc, #368]	; (8000dd0 <shuxian+0x238>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==3||step==11||step==-1)//直走
 8000c64:	4b55      	ldr	r3, [pc, #340]	; (8000dbc <shuxian+0x224>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d008      	beq.n	8000c7e <shuxian+0xe6>
 8000c6c:	4b53      	ldr	r3, [pc, #332]	; (8000dbc <shuxian+0x224>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b0b      	cmp	r3, #11
 8000c72:	d004      	beq.n	8000c7e <shuxian+0xe6>
 8000c74:	4b51      	ldr	r3, [pc, #324]	; (8000dbc <shuxian+0x224>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c7c:	d122      	bne.n	8000cc4 <shuxian+0x12c>
	{
		turn=0;
 8000c7e:	4b55      	ldr	r3, [pc, #340]	; (8000dd4 <shuxian+0x23c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000c84:	4b52      	ldr	r3, [pc, #328]	; (8000dd0 <shuxian+0x238>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Yflag==1)
 8000c8a:	2120      	movs	r1, #32
 8000c8c:	484c      	ldr	r0, [pc, #304]	; (8000dc0 <shuxian+0x228>)
 8000c8e:	f001 fd15 	bl	80026bc <HAL_GPIO_ReadPin>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d10b      	bne.n	8000cb0 <shuxian+0x118>
 8000c98:	4b4f      	ldr	r3, [pc, #316]	; (8000dd8 <shuxian+0x240>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d107      	bne.n	8000cb0 <shuxian+0x118>
		{
			Y+=1;
 8000ca0:	4b4e      	ldr	r3, [pc, #312]	; (8000ddc <shuxian+0x244>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	4a4d      	ldr	r2, [pc, #308]	; (8000ddc <shuxian+0x244>)
 8000ca8:	6013      	str	r3, [r2, #0]
			Yflag=0;
 8000caa:	4b4b      	ldr	r3, [pc, #300]	; (8000dd8 <shuxian+0x240>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	4843      	ldr	r0, [pc, #268]	; (8000dc0 <shuxian+0x228>)
 8000cb4:	f001 fd02 	bl	80026bc <HAL_GPIO_ReadPin>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d102      	bne.n	8000cc4 <shuxian+0x12c>
		{
			Yflag=1;
 8000cbe:	4b46      	ldr	r3, [pc, #280]	; (8000dd8 <shuxian+0x240>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==5||step==13)//�????回一�????
 8000cc4:	4b3d      	ldr	r3, [pc, #244]	; (8000dbc <shuxian+0x224>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b05      	cmp	r3, #5
 8000cca:	d003      	beq.n	8000cd4 <shuxian+0x13c>
 8000ccc:	4b3b      	ldr	r3, [pc, #236]	; (8000dbc <shuxian+0x224>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b0d      	cmp	r3, #13
 8000cd2:	d122      	bne.n	8000d1a <shuxian+0x182>
	{
		turn=0;
 8000cd4:	4b3f      	ldr	r3, [pc, #252]	; (8000dd4 <shuxian+0x23c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000cda:	4b3d      	ldr	r3, [pc, #244]	; (8000dd0 <shuxian+0x238>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Xflag==1)
 8000ce0:	2120      	movs	r1, #32
 8000ce2:	4837      	ldr	r0, [pc, #220]	; (8000dc0 <shuxian+0x228>)
 8000ce4:	f001 fcea 	bl	80026bc <HAL_GPIO_ReadPin>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d10b      	bne.n	8000d06 <shuxian+0x16e>
 8000cee:	4b35      	ldr	r3, [pc, #212]	; (8000dc4 <shuxian+0x22c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d107      	bne.n	8000d06 <shuxian+0x16e>
		{
			X-=1;
 8000cf6:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <shuxian+0x230>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	4a32      	ldr	r2, [pc, #200]	; (8000dc8 <shuxian+0x230>)
 8000cfe:	6013      	str	r3, [r2, #0]
			Xflag=0;
 8000d00:	4b30      	ldr	r3, [pc, #192]	; (8000dc4 <shuxian+0x22c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000d06:	2120      	movs	r1, #32
 8000d08:	482d      	ldr	r0, [pc, #180]	; (8000dc0 <shuxian+0x228>)
 8000d0a:	f001 fcd7 	bl	80026bc <HAL_GPIO_ReadPin>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <shuxian+0x182>
		{
			Xflag=1;
 8000d14:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <shuxian+0x22c>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==7||step==15)//�????回一�????
 8000d1a:	4b28      	ldr	r3, [pc, #160]	; (8000dbc <shuxian+0x224>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b07      	cmp	r3, #7
 8000d20:	d003      	beq.n	8000d2a <shuxian+0x192>
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <shuxian+0x224>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b0f      	cmp	r3, #15
 8000d28:	d122      	bne.n	8000d70 <shuxian+0x1d8>
	{
		turn=0;
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <shuxian+0x23c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <shuxian+0x238>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Yflag==1)
 8000d36:	2120      	movs	r1, #32
 8000d38:	4821      	ldr	r0, [pc, #132]	; (8000dc0 <shuxian+0x228>)
 8000d3a:	f001 fcbf 	bl	80026bc <HAL_GPIO_ReadPin>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d10b      	bne.n	8000d5c <shuxian+0x1c4>
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <shuxian+0x240>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d107      	bne.n	8000d5c <shuxian+0x1c4>
		{
			Y-=1;
 8000d4c:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <shuxian+0x244>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	4a22      	ldr	r2, [pc, #136]	; (8000ddc <shuxian+0x244>)
 8000d54:	6013      	str	r3, [r2, #0]
			Yflag=0;
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <shuxian+0x240>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000d5c:	2120      	movs	r1, #32
 8000d5e:	4818      	ldr	r0, [pc, #96]	; (8000dc0 <shuxian+0x228>)
 8000d60:	f001 fcac 	bl	80026bc <HAL_GPIO_ReadPin>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d102      	bne.n	8000d70 <shuxian+0x1d8>
		{
			Yflag=1;
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <shuxian+0x240>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==8)
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <shuxian+0x224>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b08      	cmp	r3, #8
 8000d76:	d11e      	bne.n	8000db6 <shuxian+0x21e>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
 8000d78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7c:	4818      	ldr	r0, [pc, #96]	; (8000de0 <shuxian+0x248>)
 8000d7e:	f001 fc9d 	bl	80026bc <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <shuxian+0x1f6>
		{
			Zflag=1;
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <shuxian+0x24c>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&Zflag==1)
 8000d8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d92:	4813      	ldr	r0, [pc, #76]	; (8000de0 <shuxian+0x248>)
 8000d94:	f001 fc92 	bl	80026bc <HAL_GPIO_ReadPin>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d10b      	bne.n	8000db6 <shuxian+0x21e>
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <shuxian+0x24c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d107      	bne.n	8000db6 <shuxian+0x21e>
		{
			Z+=1;
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <shuxian+0x250>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <shuxian+0x250>)
 8000dae:	6013      	str	r3, [r2, #0]
			Zflag=0;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <shuxian+0x24c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	24000094 	.word	0x24000094
 8000dc0:	58021000 	.word	0x58021000
 8000dc4:	24000058 	.word	0x24000058
 8000dc8:	24000098 	.word	0x24000098
 8000dcc:	58020400 	.word	0x58020400
 8000dd0:	24000064 	.word	0x24000064
 8000dd4:	240000a4 	.word	0x240000a4
 8000dd8:	2400005c 	.word	0x2400005c
 8000ddc:	2400009c 	.word	0x2400009c
 8000de0:	58020800 	.word	0x58020800
 8000de4:	24000060 	.word	0x24000060
 8000de8:	240000a0 	.word	0x240000a0

08000dec <buzhou>:


void buzhou()
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	if(step==0)//等待语音
 8000df0:	4b2a      	ldr	r3, [pc, #168]	; (8000e9c <buzhou+0xb0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d171      	bne.n	8000edc <buzhou+0xf0>
	{
		HAL_UART_Receive(&huart3,&color,1,HAL_MAX_DELAY);
 8000df8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4928      	ldr	r1, [pc, #160]	; (8000ea0 <buzhou+0xb4>)
 8000e00:	4828      	ldr	r0, [pc, #160]	; (8000ea4 <buzhou+0xb8>)
 8000e02:	f005 f9bf 	bl	8006184 <HAL_UART_Receive>
		if(color==1)
 8000e06:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <buzhou+0xb4>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d10a      	bne.n	8000e24 <buzhou+0x38>
		{
			HAL_UART_Transmit(&huart2,redGreen,sizeof(redGreen),1000);
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	2208      	movs	r2, #8
 8000e14:	4924      	ldr	r1, [pc, #144]	; (8000ea8 <buzhou+0xbc>)
 8000e16:	4825      	ldr	r0, [pc, #148]	; (8000eac <buzhou+0xc0>)
 8000e18:	f005 f91e 	bl	8006058 <HAL_UART_Transmit>
			step=1;
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <buzhou+0xb0>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	e05b      	b.n	8000edc <buzhou+0xf0>
		}
		else if(color==2)
 8000e24:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <buzhou+0xb4>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d10a      	bne.n	8000e42 <buzhou+0x56>
		{
			HAL_UART_Transmit(&huart2,redBlue,sizeof(redBlue),1000);
 8000e2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e30:	2208      	movs	r2, #8
 8000e32:	491f      	ldr	r1, [pc, #124]	; (8000eb0 <buzhou+0xc4>)
 8000e34:	481d      	ldr	r0, [pc, #116]	; (8000eac <buzhou+0xc0>)
 8000e36:	f005 f90f 	bl	8006058 <HAL_UART_Transmit>
			step=1;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <buzhou+0xb0>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	e04c      	b.n	8000edc <buzhou+0xf0>
		}
		else if(color==3)
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <buzhou+0xb4>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d10a      	bne.n	8000e60 <buzhou+0x74>
		{
			HAL_UART_Transmit(&huart2,greenBlue,sizeof(greenBlue),1000);
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	2208      	movs	r2, #8
 8000e50:	4918      	ldr	r1, [pc, #96]	; (8000eb4 <buzhou+0xc8>)
 8000e52:	4816      	ldr	r0, [pc, #88]	; (8000eac <buzhou+0xc0>)
 8000e54:	f005 f900 	bl	8006058 <HAL_UART_Transmit>
			step=1;
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <buzhou+0xb0>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	e03d      	b.n	8000edc <buzhou+0xf0>
		}
		else if(color==4)
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <buzhou+0xb4>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d10a      	bne.n	8000e7e <buzhou+0x92>
		{
			HAL_UART_Transmit(&huart2,greenRed,sizeof(greenRed),1000);
 8000e68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6c:	2208      	movs	r2, #8
 8000e6e:	4912      	ldr	r1, [pc, #72]	; (8000eb8 <buzhou+0xcc>)
 8000e70:	480e      	ldr	r0, [pc, #56]	; (8000eac <buzhou+0xc0>)
 8000e72:	f005 f8f1 	bl	8006058 <HAL_UART_Transmit>
			step=1;
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <buzhou+0xb0>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	e02e      	b.n	8000edc <buzhou+0xf0>
		}
		else if(color==5)
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <buzhou+0xb4>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b05      	cmp	r3, #5
 8000e84:	d11c      	bne.n	8000ec0 <buzhou+0xd4>
		{
			HAL_UART_Transmit(&huart2,blueRed,sizeof(blueRed),1000);
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	2208      	movs	r2, #8
 8000e8c:	490b      	ldr	r1, [pc, #44]	; (8000ebc <buzhou+0xd0>)
 8000e8e:	4807      	ldr	r0, [pc, #28]	; (8000eac <buzhou+0xc0>)
 8000e90:	f005 f8e2 	bl	8006058 <HAL_UART_Transmit>
			step=1;
 8000e94:	4b01      	ldr	r3, [pc, #4]	; (8000e9c <buzhou+0xb0>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e01f      	b.n	8000edc <buzhou+0xf0>
 8000e9c:	24000094 	.word	0x24000094
 8000ea0:	240000ac 	.word	0x240000ac
 8000ea4:	240000fc 	.word	0x240000fc
 8000ea8:	24000000 	.word	0x24000000
 8000eac:	24000274 	.word	0x24000274
 8000eb0:	24000010 	.word	0x24000010
 8000eb4:	24000028 	.word	0x24000028
 8000eb8:	24000008 	.word	0x24000008
 8000ebc:	24000018 	.word	0x24000018
		}
		else if(color==6)
 8000ec0:	4bb6      	ldr	r3, [pc, #728]	; (800119c <buzhou+0x3b0>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b06      	cmp	r3, #6
 8000ec6:	d109      	bne.n	8000edc <buzhou+0xf0>
		{
			HAL_UART_Transmit(&huart2,blueGreen,sizeof(blueGreen),1000);
 8000ec8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ecc:	2208      	movs	r2, #8
 8000ece:	49b4      	ldr	r1, [pc, #720]	; (80011a0 <buzhou+0x3b4>)
 8000ed0:	48b4      	ldr	r0, [pc, #720]	; (80011a4 <buzhou+0x3b8>)
 8000ed2:	f005 f8c1 	bl	8006058 <HAL_UART_Transmit>
			step=1;
 8000ed6:	4bb4      	ldr	r3, [pc, #720]	; (80011a8 <buzhou+0x3bc>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	601a      	str	r2, [r3, #0]
		}

//		step=1;
	}
	if(step==1)//move straight
 8000edc:	4bb2      	ldr	r3, [pc, #712]	; (80011a8 <buzhou+0x3bc>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d116      	bne.n	8000f12 <buzhou+0x126>
	{
		move(1);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f7ff fba5 	bl	8000634 <move>
		shuxian();
 8000eea:	f7ff fe55 	bl	8000b98 <shuxian>
		if(X==2&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000eee:	4baf      	ldr	r3, [pc, #700]	; (80011ac <buzhou+0x3c0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d10d      	bne.n	8000f12 <buzhou+0x126>
 8000ef6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000efa:	48ad      	ldr	r0, [pc, #692]	; (80011b0 <buzhou+0x3c4>)
 8000efc:	f001 fbde 	bl	80026bc <HAL_GPIO_ReadPin>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d105      	bne.n	8000f12 <buzhou+0x126>
		{
			move(4);
 8000f06:	2004      	movs	r0, #4
 8000f08:	f7ff fb94 	bl	8000634 <move>
			step=2;
 8000f0c:	4ba6      	ldr	r3, [pc, #664]	; (80011a8 <buzhou+0x3bc>)
 8000f0e:	2202      	movs	r2, #2
 8000f10:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==2)//turn right
 8000f12:	4ba5      	ldr	r3, [pc, #660]	; (80011a8 <buzhou+0x3bc>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d10f      	bne.n	8000f3a <buzhou+0x14e>
	{
		move(3);
 8000f1a:	2003      	movs	r0, #3
 8000f1c:	f7ff fb8a 	bl	8000634 <move>
		shuxian();
 8000f20:	f7ff fe3a 	bl	8000b98 <shuxian>
		if(turn==2)
 8000f24:	4ba3      	ldr	r3, [pc, #652]	; (80011b4 <buzhou+0x3c8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d106      	bne.n	8000f3a <buzhou+0x14e>
		{
			move(4);
 8000f2c:	2004      	movs	r0, #4
 8000f2e:	f7ff fb81 	bl	8000634 <move>
			step=-1;
 8000f32:	4b9d      	ldr	r3, [pc, #628]	; (80011a8 <buzhou+0x3bc>)
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	601a      	str	r2, [r3, #0]
//			step=3;
		}
	}
	if(step==-1)//move straight
 8000f3a:	4b9b      	ldr	r3, [pc, #620]	; (80011a8 <buzhou+0x3bc>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f42:	d117      	bne.n	8000f74 <buzhou+0x188>
	{
		move(1);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f7ff fb75 	bl	8000634 <move>
		shuxian();
 8000f4a:	f7ff fe25 	bl	8000b98 <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000f4e:	4b9a      	ldr	r3, [pc, #616]	; (80011b8 <buzhou+0x3cc>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d10e      	bne.n	8000f74 <buzhou+0x188>
 8000f56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5a:	4895      	ldr	r0, [pc, #596]	; (80011b0 <buzhou+0x3c4>)
 8000f5c:	f001 fbae 	bl	80026bc <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d106      	bne.n	8000f74 <buzhou+0x188>
		{
			move(4);
 8000f66:	2004      	movs	r0, #4
 8000f68:	f7ff fb64 	bl	8000634 <move>
			step=-2;
 8000f6c:	4b8e      	ldr	r3, [pc, #568]	; (80011a8 <buzhou+0x3bc>)
 8000f6e:	f06f 0201 	mvn.w	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-2)//wait for car1 and activate arm
 8000f74:	4b8c      	ldr	r3, [pc, #560]	; (80011a8 <buzhou+0x3bc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f113 0f02 	cmn.w	r3, #2
 8000f7c:	d11e      	bne.n	8000fbc <buzhou+0x1d0>
	{
		if(arm==0)
 8000f7e:	4b8f      	ldr	r3, [pc, #572]	; (80011bc <buzhou+0x3d0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d109      	bne.n	8000f9a <buzhou+0x1ae>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A0,sizeof(A0),0xffff);//机械臂初始化
 8000f86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f8a:	2205      	movs	r2, #5
 8000f8c:	498c      	ldr	r1, [pc, #560]	; (80011c0 <buzhou+0x3d4>)
 8000f8e:	488d      	ldr	r0, [pc, #564]	; (80011c4 <buzhou+0x3d8>)
 8000f90:	f005 f862 	bl	8006058 <HAL_UART_Transmit>
			arm=1;
 8000f94:	4b89      	ldr	r3, [pc, #548]	; (80011bc <buzhou+0x3d0>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	601a      	str	r2, [r3, #0]
		}
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK&&arm==1)
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4989      	ldr	r1, [pc, #548]	; (80011c8 <buzhou+0x3dc>)
 8000fa2:	488a      	ldr	r0, [pc, #552]	; (80011cc <buzhou+0x3e0>)
 8000fa4:	f005 f8ee 	bl	8006184 <HAL_UART_Receive>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d106      	bne.n	8000fbc <buzhou+0x1d0>
 8000fae:	4b83      	ldr	r3, [pc, #524]	; (80011bc <buzhou+0x3d0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d102      	bne.n	8000fbc <buzhou+0x1d0>
		{
			step=3;
 8000fb6:	4b7c      	ldr	r3, [pc, #496]	; (80011a8 <buzhou+0x3bc>)
 8000fb8:	2203      	movs	r2, #3
 8000fba:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==3)//move straight
 8000fbc:	4b7a      	ldr	r3, [pc, #488]	; (80011a8 <buzhou+0x3bc>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d122      	bne.n	800100a <buzhou+0x21e>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)A0,sizeof(A0),0xffff);
 8000fc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fc8:	2205      	movs	r2, #5
 8000fca:	497d      	ldr	r1, [pc, #500]	; (80011c0 <buzhou+0x3d4>)
 8000fcc:	487d      	ldr	r0, [pc, #500]	; (80011c4 <buzhou+0x3d8>)
 8000fce:	f005 f843 	bl	8006058 <HAL_UART_Transmit>
		move(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f7ff fb2e 	bl	8000634 <move>
		shuxian();
 8000fd8:	f7ff fdde 	bl	8000b98 <shuxian>
		if(Y==2&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000fdc:	4b76      	ldr	r3, [pc, #472]	; (80011b8 <buzhou+0x3cc>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d112      	bne.n	800100a <buzhou+0x21e>
 8000fe4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe8:	4871      	ldr	r0, [pc, #452]	; (80011b0 <buzhou+0x3c4>)
 8000fea:	f001 fb67 	bl	80026bc <HAL_GPIO_ReadPin>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d10a      	bne.n	800100a <buzhou+0x21e>
		{
			move(4);
 8000ff4:	2004      	movs	r0, #4
 8000ff6:	f7ff fb1d 	bl	8000634 <move>
			HAL_Delay(1000);
 8000ffa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ffe:	f001 f899 	bl	8002134 <HAL_Delay>
//			step=11;
//			step=4;
			step=-4;
 8001002:	4b69      	ldr	r3, [pc, #420]	; (80011a8 <buzhou+0x3bc>)
 8001004:	f06f 0203 	mvn.w	r2, #3
 8001008:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-4)//wait for car1 to catch
 800100a:	4b67      	ldr	r3, [pc, #412]	; (80011a8 <buzhou+0x3bc>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f113 0f04 	cmn.w	r3, #4
 8001012:	d114      	bne.n	800103e <buzhou+0x252>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8001014:	f04f 33ff 	mov.w	r3, #4294967295
 8001018:	2201      	movs	r2, #1
 800101a:	496b      	ldr	r1, [pc, #428]	; (80011c8 <buzhou+0x3dc>)
 800101c:	486b      	ldr	r0, [pc, #428]	; (80011cc <buzhou+0x3e0>)
 800101e:	f005 f8b1 	bl	8006184 <HAL_UART_Receive>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d10a      	bne.n	800103e <buzhou+0x252>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A1,sizeof(A1),0xffff);
 8001028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800102c:	2205      	movs	r2, #5
 800102e:	4968      	ldr	r1, [pc, #416]	; (80011d0 <buzhou+0x3e4>)
 8001030:	4864      	ldr	r0, [pc, #400]	; (80011c4 <buzhou+0x3d8>)
 8001032:	f005 f811 	bl	8006058 <HAL_UART_Transmit>
			step=-5;
 8001036:	4b5c      	ldr	r3, [pc, #368]	; (80011a8 <buzhou+0x3bc>)
 8001038:	f06f 0204 	mvn.w	r2, #4
 800103c:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-5)
 800103e:	4b5a      	ldr	r3, [pc, #360]	; (80011a8 <buzhou+0x3bc>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f113 0f05 	cmn.w	r3, #5
 8001046:	d114      	bne.n	8001072 <buzhou+0x286>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	2201      	movs	r2, #1
 800104e:	495e      	ldr	r1, [pc, #376]	; (80011c8 <buzhou+0x3dc>)
 8001050:	485e      	ldr	r0, [pc, #376]	; (80011cc <buzhou+0x3e0>)
 8001052:	f005 f897 	bl	8006184 <HAL_UART_Receive>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d10a      	bne.n	8001072 <buzhou+0x286>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A2,sizeof(A2),0xffff);
 800105c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001060:	2205      	movs	r2, #5
 8001062:	495c      	ldr	r1, [pc, #368]	; (80011d4 <buzhou+0x3e8>)
 8001064:	4857      	ldr	r0, [pc, #348]	; (80011c4 <buzhou+0x3d8>)
 8001066:	f004 fff7 	bl	8006058 <HAL_UART_Transmit>
			step=-6;
 800106a:	4b4f      	ldr	r3, [pc, #316]	; (80011a8 <buzhou+0x3bc>)
 800106c:	f06f 0205 	mvn.w	r2, #5
 8001070:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-6)//wait for car1 to move
 8001072:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <buzhou+0x3bc>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f113 0f06 	cmn.w	r3, #6
 800107a:	d10c      	bne.n	8001096 <buzhou+0x2aa>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	2201      	movs	r2, #1
 8001082:	4951      	ldr	r1, [pc, #324]	; (80011c8 <buzhou+0x3dc>)
 8001084:	4851      	ldr	r0, [pc, #324]	; (80011cc <buzhou+0x3e0>)
 8001086:	f005 f87d 	bl	8006184 <HAL_UART_Receive>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <buzhou+0x2aa>
		{
//			step=4;
			step=11;
 8001090:	4b45      	ldr	r3, [pc, #276]	; (80011a8 <buzhou+0x3bc>)
 8001092:	220b      	movs	r2, #11
 8001094:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==4)//turn right
 8001096:	4b44      	ldr	r3, [pc, #272]	; (80011a8 <buzhou+0x3bc>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b04      	cmp	r3, #4
 800109c:	d10e      	bne.n	80010bc <buzhou+0x2d0>
	{
		move(3);
 800109e:	2003      	movs	r0, #3
 80010a0:	f7ff fac8 	bl	8000634 <move>
		shuxian();
 80010a4:	f7ff fd78 	bl	8000b98 <shuxian>
		if(turn==2)
 80010a8:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <buzhou+0x3c8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d105      	bne.n	80010bc <buzhou+0x2d0>
		{
			move(4);
 80010b0:	2004      	movs	r0, #4
 80010b2:	f7ff fabf 	bl	8000634 <move>
			step=5;
 80010b6:	4b3c      	ldr	r3, [pc, #240]	; (80011a8 <buzhou+0x3bc>)
 80010b8:	2205      	movs	r2, #5
 80010ba:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==5)//move straight
 80010bc:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <buzhou+0x3bc>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	d116      	bne.n	80010f2 <buzhou+0x306>
	{
		move(6);
 80010c4:	2006      	movs	r0, #6
 80010c6:	f7ff fab5 	bl	8000634 <move>
		shuxian();
 80010ca:	f7ff fd65 	bl	8000b98 <shuxian>
		if(X==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 80010ce:	4b37      	ldr	r3, [pc, #220]	; (80011ac <buzhou+0x3c0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d10d      	bne.n	80010f2 <buzhou+0x306>
 80010d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010da:	4835      	ldr	r0, [pc, #212]	; (80011b0 <buzhou+0x3c4>)
 80010dc:	f001 faee 	bl	80026bc <HAL_GPIO_ReadPin>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d105      	bne.n	80010f2 <buzhou+0x306>
		{
			move(4);
 80010e6:	2004      	movs	r0, #4
 80010e8:	f7ff faa4 	bl	8000634 <move>
			step=6;
 80010ec:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <buzhou+0x3bc>)
 80010ee:	2206      	movs	r2, #6
 80010f0:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==6)//turn right
 80010f2:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <buzhou+0x3bc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d10e      	bne.n	8001118 <buzhou+0x32c>
	{
		move(3);
 80010fa:	2003      	movs	r0, #3
 80010fc:	f7ff fa9a 	bl	8000634 <move>
		shuxian();
 8001100:	f7ff fd4a 	bl	8000b98 <shuxian>
		if(turn==2)
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <buzhou+0x3c8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b02      	cmp	r3, #2
 800110a:	d105      	bne.n	8001118 <buzhou+0x32c>
		{
			move(4);
 800110c:	2004      	movs	r0, #4
 800110e:	f7ff fa91 	bl	8000634 <move>
			step=7;
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <buzhou+0x3bc>)
 8001114:	2207      	movs	r2, #7
 8001116:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==7)//move straight
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <buzhou+0x3bc>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b07      	cmp	r3, #7
 800111e:	d116      	bne.n	800114e <buzhou+0x362>
	{
		move(1);
 8001120:	2001      	movs	r0, #1
 8001122:	f7ff fa87 	bl	8000634 <move>
		shuxian();
 8001126:	f7ff fd37 	bl	8000b98 <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <buzhou+0x3cc>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d10d      	bne.n	800114e <buzhou+0x362>
 8001132:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001136:	481e      	ldr	r0, [pc, #120]	; (80011b0 <buzhou+0x3c4>)
 8001138:	f001 fac0 	bl	80026bc <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	d105      	bne.n	800114e <buzhou+0x362>
		{
			move(4);
 8001142:	2004      	movs	r0, #4
 8001144:	f7ff fa76 	bl	8000634 <move>
			step=8;
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <buzhou+0x3bc>)
 800114a:	2208      	movs	r2, #8
 800114c:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==8)
 800114e:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <buzhou+0x3bc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b08      	cmp	r3, #8
 8001154:	d10e      	bne.n	8001174 <buzhou+0x388>
	{
		move(5);
 8001156:	2005      	movs	r0, #5
 8001158:	f7ff fa6c 	bl	8000634 <move>
		shuxian();
 800115c:	f7ff fd1c 	bl	8000b98 <shuxian>
		if(Z==3)
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <buzhou+0x3ec>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b03      	cmp	r3, #3
 8001166:	d105      	bne.n	8001174 <buzhou+0x388>
		{
			move(4);
 8001168:	2004      	movs	r0, #4
 800116a:	f7ff fa63 	bl	8000634 <move>
			step=9;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <buzhou+0x3bc>)
 8001170:	2209      	movs	r2, #9
 8001172:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==11)//move straight
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <buzhou+0x3bc>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b0b      	cmp	r3, #11
 800117a:	d13d      	bne.n	80011f8 <buzhou+0x40c>
	{
		move(1);
 800117c:	2001      	movs	r0, #1
 800117e:	f7ff fa59 	bl	8000634 <move>
		shuxian();
 8001182:	f7ff fd09 	bl	8000b98 <shuxian>
		if(Y==4&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <buzhou+0x3cc>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b04      	cmp	r3, #4
 800118c:	d134      	bne.n	80011f8 <buzhou+0x40c>
 800118e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001192:	4807      	ldr	r0, [pc, #28]	; (80011b0 <buzhou+0x3c4>)
 8001194:	f001 fa92 	bl	80026bc <HAL_GPIO_ReadPin>
 8001198:	e020      	b.n	80011dc <buzhou+0x3f0>
 800119a:	bf00      	nop
 800119c:	240000ac 	.word	0x240000ac
 80011a0:	24000020 	.word	0x24000020
 80011a4:	24000274 	.word	0x24000274
 80011a8:	24000094 	.word	0x24000094
 80011ac:	24000098 	.word	0x24000098
 80011b0:	58020800 	.word	0x58020800
 80011b4:	240000a4 	.word	0x240000a4
 80011b8:	2400009c 	.word	0x2400009c
 80011bc:	240000a8 	.word	0x240000a8
 80011c0:	24000030 	.word	0x24000030
 80011c4:	24000198 	.word	0x24000198
 80011c8:	240000ad 	.word	0x240000ad
 80011cc:	240000fc 	.word	0x240000fc
 80011d0:	24000038 	.word	0x24000038
 80011d4:	24000040 	.word	0x24000040
 80011d8:	240000a0 	.word	0x240000a0
 80011dc:	4603      	mov	r3, r0
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d10a      	bne.n	80011f8 <buzhou+0x40c>
		{
			move(4);
 80011e2:	2004      	movs	r0, #4
 80011e4:	f7ff fa26 	bl	8000634 <move>
			HAL_Delay(1000);
 80011e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ec:	f000 ffa2 	bl	8002134 <HAL_Delay>
			step=-8;
 80011f0:	4b55      	ldr	r3, [pc, #340]	; (8001348 <buzhou+0x55c>)
 80011f2:	f06f 0207 	mvn.w	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
//			step=12;
		}
	}
	if(step==-8)//arm move
 80011f8:	4b53      	ldr	r3, [pc, #332]	; (8001348 <buzhou+0x55c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f113 0f08 	cmn.w	r3, #8
 8001200:	d114      	bne.n	800122c <buzhou+0x440>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	2201      	movs	r2, #1
 8001208:	4950      	ldr	r1, [pc, #320]	; (800134c <buzhou+0x560>)
 800120a:	4851      	ldr	r0, [pc, #324]	; (8001350 <buzhou+0x564>)
 800120c:	f004 ffba 	bl	8006184 <HAL_UART_Receive>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10a      	bne.n	800122c <buzhou+0x440>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A6,sizeof(A6),0xffff);
 8001216:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800121a:	2205      	movs	r2, #5
 800121c:	494d      	ldr	r1, [pc, #308]	; (8001354 <buzhou+0x568>)
 800121e:	484e      	ldr	r0, [pc, #312]	; (8001358 <buzhou+0x56c>)
 8001220:	f004 ff1a 	bl	8006058 <HAL_UART_Transmit>
			step=-9;
 8001224:	4b48      	ldr	r3, [pc, #288]	; (8001348 <buzhou+0x55c>)
 8001226:	f06f 0208 	mvn.w	r2, #8
 800122a:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-9)//arm move
 800122c:	4b46      	ldr	r3, [pc, #280]	; (8001348 <buzhou+0x55c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f113 0f09 	cmn.w	r3, #9
 8001234:	d117      	bne.n	8001266 <buzhou+0x47a>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	2201      	movs	r2, #1
 800123c:	4943      	ldr	r1, [pc, #268]	; (800134c <buzhou+0x560>)
 800123e:	4844      	ldr	r0, [pc, #272]	; (8001350 <buzhou+0x564>)
 8001240:	f004 ffa0 	bl	8006184 <HAL_UART_Receive>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10d      	bne.n	8001266 <buzhou+0x47a>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A5,sizeof(A5),0xffff);
 800124a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800124e:	2205      	movs	r2, #5
 8001250:	4942      	ldr	r1, [pc, #264]	; (800135c <buzhou+0x570>)
 8001252:	4841      	ldr	r0, [pc, #260]	; (8001358 <buzhou+0x56c>)
 8001254:	f004 ff00 	bl	8006058 <HAL_UART_Transmit>
			HAL_Delay(35000);
 8001258:	f648 00b8 	movw	r0, #35000	; 0x88b8
 800125c:	f000 ff6a 	bl	8002134 <HAL_Delay>
			step=12;
 8001260:	4b39      	ldr	r3, [pc, #228]	; (8001348 <buzhou+0x55c>)
 8001262:	220c      	movs	r2, #12
 8001264:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-10)//wait for car1
 8001266:	4b38      	ldr	r3, [pc, #224]	; (8001348 <buzhou+0x55c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f113 0f0a 	cmn.w	r3, #10
 800126e:	d10c      	bne.n	800128a <buzhou+0x49e>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	2201      	movs	r2, #1
 8001276:	4935      	ldr	r1, [pc, #212]	; (800134c <buzhou+0x560>)
 8001278:	4835      	ldr	r0, [pc, #212]	; (8001350 <buzhou+0x564>)
 800127a:	f004 ff83 	bl	8006184 <HAL_UART_Receive>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <buzhou+0x49e>
		{
			step=12;
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <buzhou+0x55c>)
 8001286:	220c      	movs	r2, #12
 8001288:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==12)
 800128a:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <buzhou+0x55c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b0c      	cmp	r3, #12
 8001290:	d10e      	bne.n	80012b0 <buzhou+0x4c4>
	{
		move(3);
 8001292:	2003      	movs	r0, #3
 8001294:	f7ff f9ce 	bl	8000634 <move>
		shuxian();
 8001298:	f7ff fc7e 	bl	8000b98 <shuxian>
		if(turn==2)
 800129c:	4b30      	ldr	r3, [pc, #192]	; (8001360 <buzhou+0x574>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d105      	bne.n	80012b0 <buzhou+0x4c4>
		{
			move(4);
 80012a4:	2004      	movs	r0, #4
 80012a6:	f7ff f9c5 	bl	8000634 <move>
			step=13;
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <buzhou+0x55c>)
 80012ac:	220d      	movs	r2, #13
 80012ae:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==13)
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <buzhou+0x55c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b0d      	cmp	r3, #13
 80012b6:	d116      	bne.n	80012e6 <buzhou+0x4fa>
	{
		move(1);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f7ff f9bb 	bl	8000634 <move>
		shuxian();
 80012be:	f7ff fc6b 	bl	8000b98 <shuxian>
		if(X==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 80012c2:	4b28      	ldr	r3, [pc, #160]	; (8001364 <buzhou+0x578>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d10d      	bne.n	80012e6 <buzhou+0x4fa>
 80012ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ce:	4826      	ldr	r0, [pc, #152]	; (8001368 <buzhou+0x57c>)
 80012d0:	f001 f9f4 	bl	80026bc <HAL_GPIO_ReadPin>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d105      	bne.n	80012e6 <buzhou+0x4fa>
		{
			move(4);
 80012da:	2004      	movs	r0, #4
 80012dc:	f7ff f9aa 	bl	8000634 <move>
			step=14;
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <buzhou+0x55c>)
 80012e2:	220e      	movs	r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==14)
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <buzhou+0x55c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b0e      	cmp	r3, #14
 80012ec:	d10e      	bne.n	800130c <buzhou+0x520>
	{
		move(3);
 80012ee:	2003      	movs	r0, #3
 80012f0:	f7ff f9a0 	bl	8000634 <move>
		shuxian();
 80012f4:	f7ff fc50 	bl	8000b98 <shuxian>
		if(turn==2)
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <buzhou+0x574>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d105      	bne.n	800130c <buzhou+0x520>
		{
			move(4);
 8001300:	2004      	movs	r0, #4
 8001302:	f7ff f997 	bl	8000634 <move>
			step=15;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <buzhou+0x55c>)
 8001308:	220f      	movs	r2, #15
 800130a:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==15)//move straight
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <buzhou+0x55c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d116      	bne.n	8001342 <buzhou+0x556>
	{
		move(1);
 8001314:	2001      	movs	r0, #1
 8001316:	f7ff f98d 	bl	8000634 <move>
		shuxian();
 800131a:	f7ff fc3d 	bl	8000b98 <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <buzhou+0x580>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d10d      	bne.n	8001342 <buzhou+0x556>
 8001326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132a:	480f      	ldr	r0, [pc, #60]	; (8001368 <buzhou+0x57c>)
 800132c:	f001 f9c6 	bl	80026bc <HAL_GPIO_ReadPin>
 8001330:	4603      	mov	r3, r0
 8001332:	2b01      	cmp	r3, #1
 8001334:	d105      	bne.n	8001342 <buzhou+0x556>
		{
			move(4);
 8001336:	2004      	movs	r0, #4
 8001338:	f7ff f97c 	bl	8000634 <move>
			step=8;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <buzhou+0x55c>)
 800133e:	2208      	movs	r2, #8
 8001340:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	24000094 	.word	0x24000094
 800134c:	240000ad 	.word	0x240000ad
 8001350:	240000fc 	.word	0x240000fc
 8001354:	24000050 	.word	0x24000050
 8001358:	24000198 	.word	0x24000198
 800135c:	24000048 	.word	0x24000048
 8001360:	240000a4 	.word	0x240000a4
 8001364:	24000098 	.word	0x24000098
 8001368:	58020800 	.word	0x58020800
 800136c:	2400009c 	.word	0x2400009c

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001374:	f000 fe4c 	bl	8002010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001378:	f000 f834 	bl	80013e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137c:	f000 fb22 	bl	80019c4 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001380:	f000 f96c 	bl	800165c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001384:	f000 fa3a 	bl	80017fc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001388:	f000 fa84 	bl	8001894 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800138c:	f000 f896 	bl	80014bc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001390:	f000 facc 	bl	800192c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001394:	2100      	movs	r1, #0
 8001396:	4811      	ldr	r0, [pc, #68]	; (80013dc <main+0x6c>)
 8001398:	f003 fdb4 	bl	8004f04 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800139c:	2104      	movs	r1, #4
 800139e:	480f      	ldr	r0, [pc, #60]	; (80013dc <main+0x6c>)
 80013a0:	f003 fdb0 	bl	8004f04 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 80013a4:	2108      	movs	r1, #8
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <main+0x6c>)
 80013a8:	f003 fdac 	bl	8004f04 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 80013ac:	210c      	movs	r1, #12
 80013ae:	480b      	ldr	r0, [pc, #44]	; (80013dc <main+0x6c>)
 80013b0:	f003 fda8 	bl	8004f04 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 80013b4:	2100      	movs	r1, #0
 80013b6:	480a      	ldr	r0, [pc, #40]	; (80013e0 <main+0x70>)
 80013b8:	f003 fda4 	bl	8004f04 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 80013bc:	2104      	movs	r1, #4
 80013be:	4808      	ldr	r0, [pc, #32]	; (80013e0 <main+0x70>)
 80013c0:	f003 fda0 	bl	8004f04 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 80013c4:	2108      	movs	r1, #8
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <main+0x70>)
 80013c8:	f003 fd9c 	bl	8004f04 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);
 80013cc:	210c      	movs	r1, #12
 80013ce:	4804      	ldr	r0, [pc, #16]	; (80013e0 <main+0x70>)
 80013d0:	f003 fd98 	bl	8004f04 <HAL_TIM_PWM_Start>
//	       HAL_UART_Transmit(&huart1, (uint8_t *)A1,sizeof(A1),0xffff);
//	       HAL_Delay(2000);
	  /*HAL_UART_Transmit(&huart2,redGreen,sizeof(redGreen),1000);
	  HAL_UART_Transmit(&huart1, (uint8_t *)A1,sizeof(A1),0xffff);
	  HAL_Delay(10000);*/
		buzhou();
 80013d4:	f7ff fd0a 	bl	8000dec <buzhou>
 80013d8:	e7fc      	b.n	80013d4 <main+0x64>
 80013da:	bf00      	nop
 80013dc:	24000228 	.word	0x24000228
 80013e0:	240000b0 	.word	0x240000b0

080013e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b09c      	sub	sp, #112	; 0x70
 80013e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	224c      	movs	r2, #76	; 0x4c
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f005 ffd6 	bl	80073a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2220      	movs	r2, #32
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f005 ffd0 	bl	80073a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001404:	2002      	movs	r0, #2
 8001406:	f001 f971 	bl	80026ec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <SystemClock_Config+0xd0>)
 8001410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001412:	4a28      	ldr	r2, [pc, #160]	; (80014b4 <SystemClock_Config+0xd0>)
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	62d3      	str	r3, [r2, #44]	; 0x2c
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <SystemClock_Config+0xd0>)
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <SystemClock_Config+0xd4>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800142c:	4a22      	ldr	r2, [pc, #136]	; (80014b8 <SystemClock_Config+0xd4>)
 800142e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <SystemClock_Config+0xd4>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001440:	bf00      	nop
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <SystemClock_Config+0xd4>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800144a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800144e:	d1f8      	bne.n	8001442 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001450:	2302      	movs	r3, #2
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001454:	2301      	movs	r3, #1
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001458:	2340      	movs	r3, #64	; 0x40
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800145c:	2300      	movs	r3, #0
 800145e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4618      	mov	r0, r3
 8001466:	f001 f97b 	bl	8002760 <HAL_RCC_OscConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001470:	f000 fb30 	bl	8001ad4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001474:	233f      	movs	r3, #63	; 0x3f
 8001476:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001488:	2340      	movs	r3, #64	; 0x40
 800148a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800148c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001490:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2101      	movs	r1, #1
 800149a:	4618      	mov	r0, r3
 800149c:	f001 fd8c 	bl	8002fb8 <HAL_RCC_ClockConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014a6:	f000 fb15 	bl	8001ad4 <Error_Handler>
  }
}
 80014aa:	bf00      	nop
 80014ac:	3770      	adds	r7, #112	; 0x70
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	58000400 	.word	0x58000400
 80014b8:	58024800 	.word	0x58024800

080014bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b09a      	sub	sp, #104	; 0x68
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
 80014ec:	615a      	str	r2, [r3, #20]
 80014ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	222c      	movs	r2, #44	; 0x2c
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f005 ff54 	bl	80073a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014fc:	4b55      	ldr	r3, [pc, #340]	; (8001654 <MX_TIM1_Init+0x198>)
 80014fe:	4a56      	ldr	r2, [pc, #344]	; (8001658 <MX_TIM1_Init+0x19c>)
 8001500:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8001502:	4b54      	ldr	r3, [pc, #336]	; (8001654 <MX_TIM1_Init+0x198>)
 8001504:	221f      	movs	r2, #31
 8001506:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001508:	4b52      	ldr	r3, [pc, #328]	; (8001654 <MX_TIM1_Init+0x198>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800150e:	4b51      	ldr	r3, [pc, #324]	; (8001654 <MX_TIM1_Init+0x198>)
 8001510:	2263      	movs	r2, #99	; 0x63
 8001512:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001514:	4b4f      	ldr	r3, [pc, #316]	; (8001654 <MX_TIM1_Init+0x198>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800151a:	4b4e      	ldr	r3, [pc, #312]	; (8001654 <MX_TIM1_Init+0x198>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001520:	4b4c      	ldr	r3, [pc, #304]	; (8001654 <MX_TIM1_Init+0x198>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001526:	484b      	ldr	r0, [pc, #300]	; (8001654 <MX_TIM1_Init+0x198>)
 8001528:	f003 fc34 	bl	8004d94 <HAL_TIM_Base_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001532:	f000 facf 	bl	8001ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800153c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001540:	4619      	mov	r1, r3
 8001542:	4844      	ldr	r0, [pc, #272]	; (8001654 <MX_TIM1_Init+0x198>)
 8001544:	f003 ff00 	bl	8005348 <HAL_TIM_ConfigClockSource>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800154e:	f000 fac1 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001552:	4840      	ldr	r0, [pc, #256]	; (8001654 <MX_TIM1_Init+0x198>)
 8001554:	f003 fc75 	bl	8004e42 <HAL_TIM_PWM_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800155e:	f000 fab9 	bl	8001ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800156e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001572:	4619      	mov	r1, r3
 8001574:	4837      	ldr	r0, [pc, #220]	; (8001654 <MX_TIM1_Init+0x198>)
 8001576:	f004 fc13 	bl	8005da0 <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001580:	f000 faa8 	bl	8001ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001584:	2360      	movs	r3, #96	; 0x60
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158c:	2300      	movs	r3, #0
 800158e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001590:	2300      	movs	r3, #0
 8001592:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015a4:	2200      	movs	r2, #0
 80015a6:	4619      	mov	r1, r3
 80015a8:	482a      	ldr	r0, [pc, #168]	; (8001654 <MX_TIM1_Init+0x198>)
 80015aa:	f003 fdb9 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80015b4:	f000 fa8e 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015bc:	2204      	movs	r2, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4824      	ldr	r0, [pc, #144]	; (8001654 <MX_TIM1_Init+0x198>)
 80015c2:	f003 fdad 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80015cc:	f000 fa82 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015d4:	2208      	movs	r2, #8
 80015d6:	4619      	mov	r1, r3
 80015d8:	481e      	ldr	r0, [pc, #120]	; (8001654 <MX_TIM1_Init+0x198>)
 80015da:	f003 fda1 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80015e4:	f000 fa76 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ec:	220c      	movs	r2, #12
 80015ee:	4619      	mov	r1, r3
 80015f0:	4818      	ldr	r0, [pc, #96]	; (8001654 <MX_TIM1_Init+0x198>)
 80015f2:	f003 fd95 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80015fc:	f000 fa6a 	bl	8001ad4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001618:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001622:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	4619      	mov	r1, r3
 8001634:	4807      	ldr	r0, [pc, #28]	; (8001654 <MX_TIM1_Init+0x198>)
 8001636:	f004 fc41 	bl	8005ebc <HAL_TIMEx_ConfigBreakDeadTime>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001640:	f000 fa48 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001644:	4803      	ldr	r0, [pc, #12]	; (8001654 <MX_TIM1_Init+0x198>)
 8001646:	f000 fa9f 	bl	8001b88 <HAL_TIM_MspPostInit>

}
 800164a:	bf00      	nop
 800164c:	3768      	adds	r7, #104	; 0x68
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	24000228 	.word	0x24000228
 8001658:	40010000 	.word	0x40010000

0800165c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b09a      	sub	sp, #104	; 0x68
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800167c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
 800168c:	615a      	str	r2, [r3, #20]
 800168e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	222c      	movs	r2, #44	; 0x2c
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f005 fe84 	bl	80073a4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800169c:	4b55      	ldr	r3, [pc, #340]	; (80017f4 <MX_TIM8_Init+0x198>)
 800169e:	4a56      	ldr	r2, [pc, #344]	; (80017f8 <MX_TIM8_Init+0x19c>)
 80016a0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 80016a2:	4b54      	ldr	r3, [pc, #336]	; (80017f4 <MX_TIM8_Init+0x198>)
 80016a4:	223f      	movs	r2, #63	; 0x3f
 80016a6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a8:	4b52      	ldr	r3, [pc, #328]	; (80017f4 <MX_TIM8_Init+0x198>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 80016ae:	4b51      	ldr	r3, [pc, #324]	; (80017f4 <MX_TIM8_Init+0x198>)
 80016b0:	2263      	movs	r2, #99	; 0x63
 80016b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b4:	4b4f      	ldr	r3, [pc, #316]	; (80017f4 <MX_TIM8_Init+0x198>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016ba:	4b4e      	ldr	r3, [pc, #312]	; (80017f4 <MX_TIM8_Init+0x198>)
 80016bc:	2200      	movs	r2, #0
 80016be:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c0:	4b4c      	ldr	r3, [pc, #304]	; (80017f4 <MX_TIM8_Init+0x198>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016c6:	484b      	ldr	r0, [pc, #300]	; (80017f4 <MX_TIM8_Init+0x198>)
 80016c8:	f003 fb64 	bl	8004d94 <HAL_TIM_Base_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80016d2:	f000 f9ff 	bl	8001ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016da:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016e0:	4619      	mov	r1, r3
 80016e2:	4844      	ldr	r0, [pc, #272]	; (80017f4 <MX_TIM8_Init+0x198>)
 80016e4:	f003 fe30 	bl	8005348 <HAL_TIM_ConfigClockSource>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80016ee:	f000 f9f1 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016f2:	4840      	ldr	r0, [pc, #256]	; (80017f4 <MX_TIM8_Init+0x198>)
 80016f4:	f003 fba5 	bl	8004e42 <HAL_TIM_PWM_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80016fe:	f000 f9e9 	bl	8001ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800170e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001712:	4619      	mov	r1, r3
 8001714:	4837      	ldr	r0, [pc, #220]	; (80017f4 <MX_TIM8_Init+0x198>)
 8001716:	f004 fb43 	bl	8005da0 <HAL_TIMEx_MasterConfigSynchronization>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001720:	f000 f9d8 	bl	8001ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001724:	2360      	movs	r3, #96	; 0x60
 8001726:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172c:	2300      	movs	r3, #0
 800172e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001730:	2300      	movs	r3, #0
 8001732:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001740:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001744:	2200      	movs	r2, #0
 8001746:	4619      	mov	r1, r3
 8001748:	482a      	ldr	r0, [pc, #168]	; (80017f4 <MX_TIM8_Init+0x198>)
 800174a:	f003 fce9 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8001754:	f000 f9be 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001758:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800175c:	2204      	movs	r2, #4
 800175e:	4619      	mov	r1, r3
 8001760:	4824      	ldr	r0, [pc, #144]	; (80017f4 <MX_TIM8_Init+0x198>)
 8001762:	f003 fcdd 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 800176c:	f000 f9b2 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001770:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001774:	2208      	movs	r2, #8
 8001776:	4619      	mov	r1, r3
 8001778:	481e      	ldr	r0, [pc, #120]	; (80017f4 <MX_TIM8_Init+0x198>)
 800177a:	f003 fcd1 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8001784:	f000 f9a6 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001788:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800178c:	220c      	movs	r2, #12
 800178e:	4619      	mov	r1, r3
 8001790:	4818      	ldr	r0, [pc, #96]	; (80017f4 <MX_TIM8_Init+0x198>)
 8001792:	f003 fcc5 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 800179c:	f000 f99a 	bl	8001ad4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	4619      	mov	r1, r3
 80017d4:	4807      	ldr	r0, [pc, #28]	; (80017f4 <MX_TIM8_Init+0x198>)
 80017d6:	f004 fb71 	bl	8005ebc <HAL_TIMEx_ConfigBreakDeadTime>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM8_Init+0x188>
  {
    Error_Handler();
 80017e0:	f000 f978 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80017e4:	4803      	ldr	r0, [pc, #12]	; (80017f4 <MX_TIM8_Init+0x198>)
 80017e6:	f000 f9cf 	bl	8001b88 <HAL_TIM_MspPostInit>

}
 80017ea:	bf00      	nop
 80017ec:	3768      	adds	r7, #104	; 0x68
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	240000b0 	.word	0x240000b0
 80017f8:	40010400 	.word	0x40010400

080017fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <MX_USART1_UART_Init+0x90>)
 8001802:	4a23      	ldr	r2, [pc, #140]	; (8001890 <MX_USART1_UART_Init+0x94>)
 8001804:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001806:	4b21      	ldr	r3, [pc, #132]	; (800188c <MX_USART1_UART_Init+0x90>)
 8001808:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800180c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800180e:	4b1f      	ldr	r3, [pc, #124]	; (800188c <MX_USART1_UART_Init+0x90>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <MX_USART1_UART_Init+0x90>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <MX_USART1_UART_Init+0x90>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_USART1_UART_Init+0x90>)
 8001822:	220c      	movs	r2, #12
 8001824:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <MX_USART1_UART_Init+0x90>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <MX_USART1_UART_Init+0x90>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001832:	4b16      	ldr	r3, [pc, #88]	; (800188c <MX_USART1_UART_Init+0x90>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <MX_USART1_UART_Init+0x90>)
 800183a:	2200      	movs	r2, #0
 800183c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <MX_USART1_UART_Init+0x90>)
 8001840:	2200      	movs	r2, #0
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001844:	4811      	ldr	r0, [pc, #68]	; (800188c <MX_USART1_UART_Init+0x90>)
 8001846:	f004 fbb7 	bl	8005fb8 <HAL_UART_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001850:	f000 f940 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001854:	2100      	movs	r1, #0
 8001856:	480d      	ldr	r0, [pc, #52]	; (800188c <MX_USART1_UART_Init+0x90>)
 8001858:	f005 fcb6 	bl	80071c8 <HAL_UARTEx_SetTxFifoThreshold>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001862:	f000 f937 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001866:	2100      	movs	r1, #0
 8001868:	4808      	ldr	r0, [pc, #32]	; (800188c <MX_USART1_UART_Init+0x90>)
 800186a:	f005 fceb 	bl	8007244 <HAL_UARTEx_SetRxFifoThreshold>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001874:	f000 f92e 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <MX_USART1_UART_Init+0x90>)
 800187a:	f005 fc6c 	bl	8007156 <HAL_UARTEx_DisableFifoMode>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001884:	f000 f926 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	24000198 	.word	0x24000198
 8001890:	40011000 	.word	0x40011000

08001894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <MX_USART2_UART_Init+0x90>)
 800189a:	4a23      	ldr	r2, [pc, #140]	; (8001928 <MX_USART2_UART_Init+0x94>)
 800189c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800189e:	4b21      	ldr	r3, [pc, #132]	; (8001924 <MX_USART2_UART_Init+0x90>)
 80018a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <MX_USART2_UART_Init+0x90>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <MX_USART2_UART_Init+0x90>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <MX_USART2_UART_Init+0x90>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <MX_USART2_UART_Init+0x90>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b19      	ldr	r3, [pc, #100]	; (8001924 <MX_USART2_UART_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b17      	ldr	r3, [pc, #92]	; (8001924 <MX_USART2_UART_Init+0x90>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <MX_USART2_UART_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <MX_USART2_UART_Init+0x90>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <MX_USART2_UART_Init+0x90>)
 80018d8:	2200      	movs	r2, #0
 80018da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018dc:	4811      	ldr	r0, [pc, #68]	; (8001924 <MX_USART2_UART_Init+0x90>)
 80018de:	f004 fb6b 	bl	8005fb8 <HAL_UART_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80018e8:	f000 f8f4 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ec:	2100      	movs	r1, #0
 80018ee:	480d      	ldr	r0, [pc, #52]	; (8001924 <MX_USART2_UART_Init+0x90>)
 80018f0:	f005 fc6a 	bl	80071c8 <HAL_UARTEx_SetTxFifoThreshold>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80018fa:	f000 f8eb 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018fe:	2100      	movs	r1, #0
 8001900:	4808      	ldr	r0, [pc, #32]	; (8001924 <MX_USART2_UART_Init+0x90>)
 8001902:	f005 fc9f 	bl	8007244 <HAL_UARTEx_SetRxFifoThreshold>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800190c:	f000 f8e2 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001910:	4804      	ldr	r0, [pc, #16]	; (8001924 <MX_USART2_UART_Init+0x90>)
 8001912:	f005 fc20 	bl	8007156 <HAL_UARTEx_DisableFifoMode>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800191c:	f000 f8da 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	24000274 	.word	0x24000274
 8001928:	40004400 	.word	0x40004400

0800192c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <MX_USART3_UART_Init+0x90>)
 8001932:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <MX_USART3_UART_Init+0x94>)
 8001934:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001936:	4b21      	ldr	r3, [pc, #132]	; (80019bc <MX_USART3_UART_Init+0x90>)
 8001938:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800193c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <MX_USART3_UART_Init+0x90>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <MX_USART3_UART_Init+0x90>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800194a:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <MX_USART3_UART_Init+0x90>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001950:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <MX_USART3_UART_Init+0x90>)
 8001952:	220c      	movs	r2, #12
 8001954:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001956:	4b19      	ldr	r3, [pc, #100]	; (80019bc <MX_USART3_UART_Init+0x90>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800195c:	4b17      	ldr	r3, [pc, #92]	; (80019bc <MX_USART3_UART_Init+0x90>)
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <MX_USART3_UART_Init+0x90>)
 8001964:	2200      	movs	r2, #0
 8001966:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <MX_USART3_UART_Init+0x90>)
 800196a:	2200      	movs	r2, #0
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <MX_USART3_UART_Init+0x90>)
 8001970:	2200      	movs	r2, #0
 8001972:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001974:	4811      	ldr	r0, [pc, #68]	; (80019bc <MX_USART3_UART_Init+0x90>)
 8001976:	f004 fb1f 	bl	8005fb8 <HAL_UART_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001980:	f000 f8a8 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001984:	2100      	movs	r1, #0
 8001986:	480d      	ldr	r0, [pc, #52]	; (80019bc <MX_USART3_UART_Init+0x90>)
 8001988:	f005 fc1e 	bl	80071c8 <HAL_UARTEx_SetTxFifoThreshold>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001992:	f000 f89f 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001996:	2100      	movs	r1, #0
 8001998:	4808      	ldr	r0, [pc, #32]	; (80019bc <MX_USART3_UART_Init+0x90>)
 800199a:	f005 fc53 	bl	8007244 <HAL_UARTEx_SetRxFifoThreshold>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019a4:	f000 f896 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019a8:	4804      	ldr	r0, [pc, #16]	; (80019bc <MX_USART3_UART_Init+0x90>)
 80019aa:	f005 fbd4 	bl	8007156 <HAL_UARTEx_DisableFifoMode>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019b4:	f000 f88e 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	240000fc 	.word	0x240000fc
 80019c0:	40004800 	.word	0x40004800

080019c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019da:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <MX_GPIO_Init+0x100>)
 80019dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e0:	4a38      	ldr	r2, [pc, #224]	; (8001ac4 <MX_GPIO_Init+0x100>)
 80019e2:	f043 0310 	orr.w	r3, r3, #16
 80019e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ea:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <MX_GPIO_Init+0x100>)
 80019ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f8:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <MX_GPIO_Init+0x100>)
 80019fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fe:	4a31      	ldr	r2, [pc, #196]	; (8001ac4 <MX_GPIO_Init+0x100>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a08:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <MX_GPIO_Init+0x100>)
 8001a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <MX_GPIO_Init+0x100>)
 8001a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1c:	4a29      	ldr	r2, [pc, #164]	; (8001ac4 <MX_GPIO_Init+0x100>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a26:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <MX_GPIO_Init+0x100>)
 8001a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a34:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <MX_GPIO_Init+0x100>)
 8001a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3a:	4a22      	ldr	r2, [pc, #136]	; (8001ac4 <MX_GPIO_Init+0x100>)
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a44:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <MX_GPIO_Init+0x100>)
 8001a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <MX_GPIO_Init+0x100>)
 8001a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a58:	4a1a      	ldr	r2, [pc, #104]	; (8001ac4 <MX_GPIO_Init+0x100>)
 8001a5a:	f043 0308 	orr.w	r3, r3, #8
 8001a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <MX_GPIO_Init+0x100>)
 8001a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a70:	2320      	movs	r3, #32
 8001a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	4811      	ldr	r0, [pc, #68]	; (8001ac8 <MX_GPIO_Init+0x104>)
 8001a84:	f000 fc6a 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	480b      	ldr	r0, [pc, #44]	; (8001acc <MX_GPIO_Init+0x108>)
 8001a9e:	f000 fc5d 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001aa2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4806      	ldr	r0, [pc, #24]	; (8001ad0 <MX_GPIO_Init+0x10c>)
 8001ab8:	f000 fc50 	bl	800235c <HAL_GPIO_Init>

}
 8001abc:	bf00      	nop
 8001abe:	3728      	adds	r7, #40	; 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	58024400 	.word	0x58024400
 8001ac8:	58021000 	.word	0x58021000
 8001acc:	58020800 	.word	0x58020800
 8001ad0:	58020400 	.word	0x58020400

08001ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad8:	b672      	cpsid	i
}
 8001ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001adc:	e7fe      	b.n	8001adc <Error_Handler+0x8>
	...

08001ae0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <HAL_MspInit+0x30>)
 8001ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001aec:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <HAL_MspInit+0x30>)
 8001aee:	f043 0302 	orr.w	r3, r3, #2
 8001af2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_MspInit+0x30>)
 8001af8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	58024400 	.word	0x58024400

08001b14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a16      	ldr	r2, [pc, #88]	; (8001b7c <HAL_TIM_Base_MspInit+0x68>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d10f      	bne.n	8001b46 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_TIM_Base_MspInit+0x6c>)
 8001b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b2c:	4a14      	ldr	r2, [pc, #80]	; (8001b80 <HAL_TIM_Base_MspInit+0x6c>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_TIM_Base_MspInit+0x6c>)
 8001b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001b44:	e013      	b.n	8001b6e <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM8)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <HAL_TIM_Base_MspInit+0x70>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d10e      	bne.n	8001b6e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_TIM_Base_MspInit+0x6c>)
 8001b52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <HAL_TIM_Base_MspInit+0x6c>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <HAL_TIM_Base_MspInit+0x6c>)
 8001b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	58024400 	.word	0x58024400
 8001b84:	40010400 	.word	0x40010400

08001b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a26      	ldr	r2, [pc, #152]	; (8001c40 <HAL_TIM_MspPostInit+0xb8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d120      	bne.n	8001bec <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <HAL_TIM_MspPostInit+0xbc>)
 8001bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb0:	4a24      	ldr	r2, [pc, #144]	; (8001c44 <HAL_TIM_MspPostInit+0xbc>)
 8001bb2:	f043 0310 	orr.w	r3, r3, #16
 8001bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_TIM_MspPostInit+0xbc>)
 8001bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001bc8:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	4818      	ldr	r0, [pc, #96]	; (8001c48 <HAL_TIM_MspPostInit+0xc0>)
 8001be6:	f000 fbb9 	bl	800235c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001bea:	e024      	b.n	8001c36 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM8)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a16      	ldr	r2, [pc, #88]	; (8001c4c <HAL_TIM_MspPostInit+0xc4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d11f      	bne.n	8001c36 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <HAL_TIM_MspPostInit+0xbc>)
 8001bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfc:	4a11      	ldr	r2, [pc, #68]	; (8001c44 <HAL_TIM_MspPostInit+0xbc>)
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_TIM_MspPostInit+0xbc>)
 8001c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001c14:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c26:	2303      	movs	r3, #3
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4807      	ldr	r0, [pc, #28]	; (8001c50 <HAL_TIM_MspPostInit+0xc8>)
 8001c32:	f000 fb93 	bl	800235c <HAL_GPIO_Init>
}
 8001c36:	bf00      	nop
 8001c38:	3728      	adds	r7, #40	; 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40010000 	.word	0x40010000
 8001c44:	58024400 	.word	0x58024400
 8001c48:	58021000 	.word	0x58021000
 8001c4c:	40010400 	.word	0x40010400
 8001c50:	58020800 	.word	0x58020800

08001c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b0bc      	sub	sp, #240	; 0xf0
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c6c:	f107 0320 	add.w	r3, r7, #32
 8001c70:	22bc      	movs	r2, #188	; 0xbc
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f005 fb95 	bl	80073a4 <memset>
  if(huart->Instance==USART1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a6d      	ldr	r2, [pc, #436]	; (8001e34 <HAL_UART_MspInit+0x1e0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d143      	bne.n	8001d0c <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c84:	2301      	movs	r3, #1
 8001c86:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c8e:	f107 0320 	add.w	r3, r7, #32
 8001c92:	4618      	mov	r0, r3
 8001c94:	f001 fd1c 	bl	80036d0 <HAL_RCCEx_PeriphCLKConfig>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c9e:	f7ff ff19 	bl	8001ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ca2:	4b65      	ldr	r3, [pc, #404]	; (8001e38 <HAL_UART_MspInit+0x1e4>)
 8001ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ca8:	4a63      	ldr	r2, [pc, #396]	; (8001e38 <HAL_UART_MspInit+0x1e4>)
 8001caa:	f043 0310 	orr.w	r3, r3, #16
 8001cae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cb2:	4b61      	ldr	r3, [pc, #388]	; (8001e38 <HAL_UART_MspInit+0x1e4>)
 8001cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc0:	4b5d      	ldr	r3, [pc, #372]	; (8001e38 <HAL_UART_MspInit+0x1e4>)
 8001cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc6:	4a5c      	ldr	r2, [pc, #368]	; (8001e38 <HAL_UART_MspInit+0x1e4>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd0:	4b59      	ldr	r3, [pc, #356]	; (8001e38 <HAL_UART_MspInit+0x1e4>)
 8001cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	61bb      	str	r3, [r7, #24]
 8001cdc:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001cde:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d02:	4619      	mov	r1, r3
 8001d04:	484d      	ldr	r0, [pc, #308]	; (8001e3c <HAL_UART_MspInit+0x1e8>)
 8001d06:	f000 fb29 	bl	800235c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d0a:	e08f      	b.n	8001e2c <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a4b      	ldr	r2, [pc, #300]	; (8001e40 <HAL_UART_MspInit+0x1ec>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d142      	bne.n	8001d9c <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d16:	2302      	movs	r3, #2
 8001d18:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d20:	f107 0320 	add.w	r3, r7, #32
 8001d24:	4618      	mov	r0, r3
 8001d26:	f001 fcd3 	bl	80036d0 <HAL_RCCEx_PeriphCLKConfig>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001d30:	f7ff fed0 	bl	8001ad4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d34:	4b40      	ldr	r3, [pc, #256]	; (8001e38 <HAL_UART_MspInit+0x1e4>)
 8001d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d3a:	4a3f      	ldr	r2, [pc, #252]	; (8001e38 <HAL_UART_MspInit+0x1e4>)
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d40:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d44:	4b3c      	ldr	r3, [pc, #240]	; (8001e38 <HAL_UART_MspInit+0x1e4>)
 8001d46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <HAL_UART_MspInit+0x1e4>)
 8001d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d58:	4a37      	ldr	r2, [pc, #220]	; (8001e38 <HAL_UART_MspInit+0x1e4>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d62:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <HAL_UART_MspInit+0x1e4>)
 8001d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d70:	230c      	movs	r3, #12
 8001d72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d88:	2307      	movs	r3, #7
 8001d8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d92:	4619      	mov	r1, r3
 8001d94:	482b      	ldr	r0, [pc, #172]	; (8001e44 <HAL_UART_MspInit+0x1f0>)
 8001d96:	f000 fae1 	bl	800235c <HAL_GPIO_Init>
}
 8001d9a:	e047      	b.n	8001e2c <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART3)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a29      	ldr	r2, [pc, #164]	; (8001e48 <HAL_UART_MspInit+0x1f4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d142      	bne.n	8001e2c <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001da6:	2302      	movs	r3, #2
 8001da8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001db0:	f107 0320 	add.w	r3, r7, #32
 8001db4:	4618      	mov	r0, r3
 8001db6:	f001 fc8b 	bl	80036d0 <HAL_RCCEx_PeriphCLKConfig>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8001dc0:	f7ff fe88 	bl	8001ad4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <HAL_UART_MspInit+0x1e4>)
 8001dc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dca:	4a1b      	ldr	r2, [pc, #108]	; (8001e38 <HAL_UART_MspInit+0x1e4>)
 8001dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <HAL_UART_MspInit+0x1e4>)
 8001dd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <HAL_UART_MspInit+0x1e4>)
 8001de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de8:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <HAL_UART_MspInit+0x1e4>)
 8001dea:	f043 0308 	orr.w	r3, r3, #8
 8001dee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_UART_MspInit+0x1e4>)
 8001df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e20:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e24:	4619      	mov	r1, r3
 8001e26:	4809      	ldr	r0, [pc, #36]	; (8001e4c <HAL_UART_MspInit+0x1f8>)
 8001e28:	f000 fa98 	bl	800235c <HAL_GPIO_Init>
}
 8001e2c:	bf00      	nop
 8001e2e:	37f0      	adds	r7, #240	; 0xf0
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40011000 	.word	0x40011000
 8001e38:	58024400 	.word	0x58024400
 8001e3c:	58020400 	.word	0x58020400
 8001e40:	40004400 	.word	0x40004400
 8001e44:	58020000 	.word	0x58020000
 8001e48:	40004800 	.word	0x40004800
 8001e4c:	58020c00 	.word	0x58020c00

08001e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <NMI_Handler+0x4>

08001e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <HardFault_Handler+0x4>

08001e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <MemManage_Handler+0x4>

08001e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <BusFault_Handler+0x4>

08001e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <UsageFault_Handler+0x4>

08001e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e9c:	f000 f92a 	bl	80020f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b39      	ldr	r3, [pc, #228]	; (8001f90 <SystemInit+0xec>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a38      	ldr	r2, [pc, #224]	; (8001f90 <SystemInit+0xec>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001eb8:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <SystemInit+0xf0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	2b06      	cmp	r3, #6
 8001ec2:	d807      	bhi.n	8001ed4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ec4:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <SystemInit+0xf0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 030f 	bic.w	r3, r3, #15
 8001ecc:	4a31      	ldr	r2, [pc, #196]	; (8001f94 <SystemInit+0xf0>)
 8001ece:	f043 0307 	orr.w	r3, r3, #7
 8001ed2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ed4:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <SystemInit+0xf4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a2f      	ldr	r2, [pc, #188]	; (8001f98 <SystemInit+0xf4>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <SystemInit+0xf4>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ee6:	4b2c      	ldr	r3, [pc, #176]	; (8001f98 <SystemInit+0xf4>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	492b      	ldr	r1, [pc, #172]	; (8001f98 <SystemInit+0xf4>)
 8001eec:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <SystemInit+0xf8>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ef2:	4b28      	ldr	r3, [pc, #160]	; (8001f94 <SystemInit+0xf0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d007      	beq.n	8001f0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001efe:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <SystemInit+0xf0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 030f 	bic.w	r3, r3, #15
 8001f06:	4a23      	ldr	r2, [pc, #140]	; (8001f94 <SystemInit+0xf0>)
 8001f08:	f043 0307 	orr.w	r3, r3, #7
 8001f0c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f0e:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <SystemInit+0xf4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f14:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <SystemInit+0xf4>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <SystemInit+0xf4>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <SystemInit+0xf4>)
 8001f22:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <SystemInit+0xfc>)
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f26:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <SystemInit+0xf4>)
 8001f28:	4a1e      	ldr	r2, [pc, #120]	; (8001fa4 <SystemInit+0x100>)
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <SystemInit+0xf4>)
 8001f2e:	4a1e      	ldr	r2, [pc, #120]	; (8001fa8 <SystemInit+0x104>)
 8001f30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <SystemInit+0xf4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f38:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <SystemInit+0xf4>)
 8001f3a:	4a1b      	ldr	r2, [pc, #108]	; (8001fa8 <SystemInit+0x104>)
 8001f3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f3e:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <SystemInit+0xf4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f44:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <SystemInit+0xf4>)
 8001f46:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <SystemInit+0x104>)
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f4a:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <SystemInit+0xf4>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <SystemInit+0xf4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a10      	ldr	r2, [pc, #64]	; (8001f98 <SystemInit+0xf4>)
 8001f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <SystemInit+0xf4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <SystemInit+0x108>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <SystemInit+0x10c>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f6e:	d202      	bcs.n	8001f76 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001f70:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <SystemInit+0x110>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <SystemInit+0x114>)
 8001f78:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f7c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f7e:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <SystemInit+0xec>)
 8001f80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f84:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00
 8001f94:	52002000 	.word	0x52002000
 8001f98:	58024400 	.word	0x58024400
 8001f9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001fa0:	02020200 	.word	0x02020200
 8001fa4:	01ff0000 	.word	0x01ff0000
 8001fa8:	01010280 	.word	0x01010280
 8001fac:	5c001000 	.word	0x5c001000
 8001fb0:	ffff0000 	.word	0xffff0000
 8001fb4:	51008108 	.word	0x51008108
 8001fb8:	52004000 	.word	0x52004000

08001fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001fc0:	f7ff ff70 	bl	8001ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fc6:	e003      	b.n	8001fd0 <LoopCopyDataInit>

08001fc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001fca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fce:	3104      	adds	r1, #4

08001fd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fd0:	480a      	ldr	r0, [pc, #40]	; (8001ffc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001fd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fd8:	d3f6      	bcc.n	8001fc8 <CopyDataInit>
  ldr  r2, =_sbss
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001fdc:	e002      	b.n	8001fe4 <LoopFillZerobss>

08001fde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fe0:	f842 3b04 	str.w	r3, [r2], #4

08001fe4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001fe6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fe8:	d3f9      	bcc.n	8001fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fea:	f005 f9b7 	bl	800735c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fee:	f7ff f9bf 	bl	8001370 <main>
  bx  lr    
 8001ff2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ff4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001ff8:	08007414 	.word	0x08007414
  ldr  r0, =_sdata
 8001ffc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002000:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 8002004:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 8002008:	24000308 	.word	0x24000308

0800200c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800200c:	e7fe      	b.n	800200c <ADC3_IRQHandler>
	...

08002010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002016:	2003      	movs	r0, #3
 8002018:	f000 f96e 	bl	80022f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800201c:	f001 f982 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 8002020:	4602      	mov	r2, r0
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_Init+0x68>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	4913      	ldr	r1, [pc, #76]	; (800207c <HAL_Init+0x6c>)
 800202e:	5ccb      	ldrb	r3, [r1, r3]
 8002030:	f003 031f 	and.w	r3, r3, #31
 8002034:	fa22 f303 	lsr.w	r3, r2, r3
 8002038:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_Init+0x68>)
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	4a0e      	ldr	r2, [pc, #56]	; (800207c <HAL_Init+0x6c>)
 8002044:	5cd3      	ldrb	r3, [r2, r3]
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
 8002050:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <HAL_Init+0x70>)
 8002052:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002054:	4a0b      	ldr	r2, [pc, #44]	; (8002084 <HAL_Init+0x74>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800205a:	2000      	movs	r0, #0
 800205c:	f000 f814 	bl	8002088 <HAL_InitTick>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e002      	b.n	8002070 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800206a:	f7ff fd39 	bl	8001ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	58024400 	.word	0x58024400
 800207c:	080073cc 	.word	0x080073cc
 8002080:	2400006c 	.word	0x2400006c
 8002084:	24000068 	.word	0x24000068

08002088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_InitTick+0x60>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e021      	b.n	80020e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_InitTick+0x64>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_InitTick+0x60>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
 80020a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f945 	bl	8002342 <HAL_SYSTICK_Config>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e00e      	b.n	80020e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b0f      	cmp	r3, #15
 80020c6:	d80a      	bhi.n	80020de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c8:	2200      	movs	r2, #0
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f000 f91d 	bl	800230e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d4:	4a06      	ldr	r2, [pc, #24]	; (80020f0 <HAL_InitTick+0x68>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e000      	b.n	80020e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	24000074 	.word	0x24000074
 80020ec:	24000068 	.word	0x24000068
 80020f0:	24000070 	.word	0x24000070

080020f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_IncTick+0x20>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_IncTick+0x24>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4413      	add	r3, r2
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <HAL_IncTick+0x24>)
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	24000074 	.word	0x24000074
 8002118:	24000304 	.word	0x24000304

0800211c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <HAL_GetTick+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	24000304 	.word	0x24000304

08002134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800213c:	f7ff ffee 	bl	800211c <HAL_GetTick>
 8002140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d005      	beq.n	800215a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_Delay+0x44>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800215a:	bf00      	nop
 800215c:	f7ff ffde 	bl	800211c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	429a      	cmp	r2, r3
 800216a:	d8f7      	bhi.n	800215c <HAL_Delay+0x28>
  {
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	24000074 	.word	0x24000074

0800217c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <HAL_GetREVID+0x14>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	0c1b      	lsrs	r3, r3, #16
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	5c001000 	.word	0x5c001000

08002194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <__NVIC_SetPriorityGrouping+0x40>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c2:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <__NVIC_SetPriorityGrouping+0x40>)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	60d3      	str	r3, [r2, #12]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00
 80021d8:	05fa0000 	.word	0x05fa0000

080021dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <__NVIC_GetPriorityGrouping+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 0307 	and.w	r3, r3, #7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	6039      	str	r1, [r7, #0]
 8002202:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002204:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002208:	2b00      	cmp	r3, #0
 800220a:	db0a      	blt.n	8002222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	490c      	ldr	r1, [pc, #48]	; (8002244 <__NVIC_SetPriority+0x4c>)
 8002212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002216:	0112      	lsls	r2, r2, #4
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	440b      	add	r3, r1
 800221c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002220:	e00a      	b.n	8002238 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4908      	ldr	r1, [pc, #32]	; (8002248 <__NVIC_SetPriority+0x50>)
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	3b04      	subs	r3, #4
 8002230:	0112      	lsls	r2, r2, #4
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	440b      	add	r3, r1
 8002236:	761a      	strb	r2, [r3, #24]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000e100 	.word	0xe000e100
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f1c3 0307 	rsb	r3, r3, #7
 8002266:	2b04      	cmp	r3, #4
 8002268:	bf28      	it	cs
 800226a:	2304      	movcs	r3, #4
 800226c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3304      	adds	r3, #4
 8002272:	2b06      	cmp	r3, #6
 8002274:	d902      	bls.n	800227c <NVIC_EncodePriority+0x30>
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3b03      	subs	r3, #3
 800227a:	e000      	b.n	800227e <NVIC_EncodePriority+0x32>
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	401a      	ands	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002294:	f04f 31ff 	mov.w	r1, #4294967295
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	43d9      	mvns	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	4313      	orrs	r3, r2
         );
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3724      	adds	r7, #36	; 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c4:	d301      	bcc.n	80022ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00f      	b.n	80022ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <SysTick_Config+0x40>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d2:	210f      	movs	r1, #15
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f7ff ff8e 	bl	80021f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <SysTick_Config+0x40>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e2:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <SysTick_Config+0x40>)
 80022e4:	2207      	movs	r2, #7
 80022e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	e000e010 	.word	0xe000e010

080022f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff47 	bl	8002194 <__NVIC_SetPriorityGrouping>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800231c:	f7ff ff5e 	bl	80021dc <__NVIC_GetPriorityGrouping>
 8002320:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	6978      	ldr	r0, [r7, #20]
 8002328:	f7ff ff90 	bl	800224c <NVIC_EncodePriority>
 800232c:	4602      	mov	r2, r0
 800232e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff5f 	bl	80021f8 <__NVIC_SetPriority>
}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff ffb2 	bl	80022b4 <SysTick_Config>
 8002350:	4603      	mov	r3, r0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800236a:	4b89      	ldr	r3, [pc, #548]	; (8002590 <HAL_GPIO_Init+0x234>)
 800236c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800236e:	e194      	b.n	800269a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	2101      	movs	r1, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 8186 	beq.w	8002694 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d005      	beq.n	80023a0 <HAL_GPIO_Init+0x44>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d130      	bne.n	8002402 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023d6:	2201      	movs	r2, #1
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	f003 0201 	and.w	r2, r3, #1
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b03      	cmp	r3, #3
 800240c:	d017      	beq.n	800243e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d123      	bne.n	8002492 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	220f      	movs	r2, #15
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	08da      	lsrs	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3208      	adds	r2, #8
 800248c:	69b9      	ldr	r1, [r7, #24]
 800248e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0203 	and.w	r2, r3, #3
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80e0 	beq.w	8002694 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d4:	4b2f      	ldr	r3, [pc, #188]	; (8002594 <HAL_GPIO_Init+0x238>)
 80024d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024da:	4a2e      	ldr	r2, [pc, #184]	; (8002594 <HAL_GPIO_Init+0x238>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_GPIO_Init+0x238>)
 80024e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024f2:	4a29      	ldr	r2, [pc, #164]	; (8002598 <HAL_GPIO_Init+0x23c>)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	3302      	adds	r3, #2
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	220f      	movs	r2, #15
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a20      	ldr	r2, [pc, #128]	; (800259c <HAL_GPIO_Init+0x240>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d052      	beq.n	80025c4 <HAL_GPIO_Init+0x268>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a1f      	ldr	r2, [pc, #124]	; (80025a0 <HAL_GPIO_Init+0x244>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d031      	beq.n	800258a <HAL_GPIO_Init+0x22e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a1e      	ldr	r2, [pc, #120]	; (80025a4 <HAL_GPIO_Init+0x248>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d02b      	beq.n	8002586 <HAL_GPIO_Init+0x22a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <HAL_GPIO_Init+0x24c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d025      	beq.n	8002582 <HAL_GPIO_Init+0x226>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a1c      	ldr	r2, [pc, #112]	; (80025ac <HAL_GPIO_Init+0x250>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d01f      	beq.n	800257e <HAL_GPIO_Init+0x222>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <HAL_GPIO_Init+0x254>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d019      	beq.n	800257a <HAL_GPIO_Init+0x21e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a1a      	ldr	r2, [pc, #104]	; (80025b4 <HAL_GPIO_Init+0x258>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d013      	beq.n	8002576 <HAL_GPIO_Init+0x21a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a19      	ldr	r2, [pc, #100]	; (80025b8 <HAL_GPIO_Init+0x25c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00d      	beq.n	8002572 <HAL_GPIO_Init+0x216>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a18      	ldr	r2, [pc, #96]	; (80025bc <HAL_GPIO_Init+0x260>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d007      	beq.n	800256e <HAL_GPIO_Init+0x212>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a17      	ldr	r2, [pc, #92]	; (80025c0 <HAL_GPIO_Init+0x264>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d101      	bne.n	800256a <HAL_GPIO_Init+0x20e>
 8002566:	2309      	movs	r3, #9
 8002568:	e02d      	b.n	80025c6 <HAL_GPIO_Init+0x26a>
 800256a:	230a      	movs	r3, #10
 800256c:	e02b      	b.n	80025c6 <HAL_GPIO_Init+0x26a>
 800256e:	2308      	movs	r3, #8
 8002570:	e029      	b.n	80025c6 <HAL_GPIO_Init+0x26a>
 8002572:	2307      	movs	r3, #7
 8002574:	e027      	b.n	80025c6 <HAL_GPIO_Init+0x26a>
 8002576:	2306      	movs	r3, #6
 8002578:	e025      	b.n	80025c6 <HAL_GPIO_Init+0x26a>
 800257a:	2305      	movs	r3, #5
 800257c:	e023      	b.n	80025c6 <HAL_GPIO_Init+0x26a>
 800257e:	2304      	movs	r3, #4
 8002580:	e021      	b.n	80025c6 <HAL_GPIO_Init+0x26a>
 8002582:	2303      	movs	r3, #3
 8002584:	e01f      	b.n	80025c6 <HAL_GPIO_Init+0x26a>
 8002586:	2302      	movs	r3, #2
 8002588:	e01d      	b.n	80025c6 <HAL_GPIO_Init+0x26a>
 800258a:	2301      	movs	r3, #1
 800258c:	e01b      	b.n	80025c6 <HAL_GPIO_Init+0x26a>
 800258e:	bf00      	nop
 8002590:	58000080 	.word	0x58000080
 8002594:	58024400 	.word	0x58024400
 8002598:	58000400 	.word	0x58000400
 800259c:	58020000 	.word	0x58020000
 80025a0:	58020400 	.word	0x58020400
 80025a4:	58020800 	.word	0x58020800
 80025a8:	58020c00 	.word	0x58020c00
 80025ac:	58021000 	.word	0x58021000
 80025b0:	58021400 	.word	0x58021400
 80025b4:	58021800 	.word	0x58021800
 80025b8:	58021c00 	.word	0x58021c00
 80025bc:	58022000 	.word	0x58022000
 80025c0:	58022400 	.word	0x58022400
 80025c4:	2300      	movs	r3, #0
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	f002 0203 	and.w	r2, r2, #3
 80025cc:	0092      	lsls	r2, r2, #2
 80025ce:	4093      	lsls	r3, r2
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025d6:	4938      	ldr	r1, [pc, #224]	; (80026b8 <HAL_GPIO_Init+0x35c>)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	3302      	adds	r3, #2
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800260a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	3301      	adds	r3, #1
 8002698:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f47f ae63 	bne.w	8002370 <HAL_GPIO_Init+0x14>
  }
}
 80026aa:	bf00      	nop
 80026ac:	bf00      	nop
 80026ae:	3724      	adds	r7, #36	; 0x24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	58000400 	.word	0x58000400

080026bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	887b      	ldrh	r3, [r7, #2]
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	e001      	b.n	80026de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026de:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_PWREx_ConfigSupply+0x70>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d00a      	beq.n	8002716 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002700:	4b16      	ldr	r3, [pc, #88]	; (800275c <HAL_PWREx_ConfigSupply+0x70>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	429a      	cmp	r2, r3
 800270c:	d001      	beq.n	8002712 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e01f      	b.n	8002752 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	e01d      	b.n	8002752 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_PWREx_ConfigSupply+0x70>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f023 0207 	bic.w	r2, r3, #7
 800271e:	490f      	ldr	r1, [pc, #60]	; (800275c <HAL_PWREx_ConfigSupply+0x70>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4313      	orrs	r3, r2
 8002724:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002726:	f7ff fcf9 	bl	800211c <HAL_GetTick>
 800272a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800272c:	e009      	b.n	8002742 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800272e:	f7ff fcf5 	bl	800211c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800273c:	d901      	bls.n	8002742 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e007      	b.n	8002752 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_PWREx_ConfigSupply+0x70>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800274a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800274e:	d1ee      	bne.n	800272e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	58024800 	.word	0x58024800

08002760 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08c      	sub	sp, #48	; 0x30
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d102      	bne.n	8002774 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	f000 bc1c 	b.w	8002fac <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8087 	beq.w	8002890 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002782:	4b9e      	ldr	r3, [pc, #632]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800278c:	4b9b      	ldr	r3, [pc, #620]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	2b10      	cmp	r3, #16
 8002796:	d007      	beq.n	80027a8 <HAL_RCC_OscConfig+0x48>
 8002798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279a:	2b18      	cmp	r3, #24
 800279c:	d110      	bne.n	80027c0 <HAL_RCC_OscConfig+0x60>
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d10b      	bne.n	80027c0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	4b94      	ldr	r3, [pc, #592]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d06c      	beq.n	800288e <HAL_RCC_OscConfig+0x12e>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d168      	bne.n	800288e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e3f5      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c8:	d106      	bne.n	80027d8 <HAL_RCC_OscConfig+0x78>
 80027ca:	4b8c      	ldr	r3, [pc, #560]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a8b      	ldr	r2, [pc, #556]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e02e      	b.n	8002836 <HAL_RCC_OscConfig+0xd6>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10c      	bne.n	80027fa <HAL_RCC_OscConfig+0x9a>
 80027e0:	4b86      	ldr	r3, [pc, #536]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a85      	ldr	r2, [pc, #532]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 80027e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	4b83      	ldr	r3, [pc, #524]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a82      	ldr	r2, [pc, #520]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 80027f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	e01d      	b.n	8002836 <HAL_RCC_OscConfig+0xd6>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002802:	d10c      	bne.n	800281e <HAL_RCC_OscConfig+0xbe>
 8002804:	4b7d      	ldr	r3, [pc, #500]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a7c      	ldr	r2, [pc, #496]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 800280a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b7a      	ldr	r3, [pc, #488]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a79      	ldr	r2, [pc, #484]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 8002816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	e00b      	b.n	8002836 <HAL_RCC_OscConfig+0xd6>
 800281e:	4b77      	ldr	r3, [pc, #476]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a76      	ldr	r2, [pc, #472]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 8002824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b74      	ldr	r3, [pc, #464]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a73      	ldr	r2, [pc, #460]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 8002830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002834:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d013      	beq.n	8002866 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283e:	f7ff fc6d 	bl	800211c <HAL_GetTick>
 8002842:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002846:	f7ff fc69 	bl	800211c <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b64      	cmp	r3, #100	; 0x64
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e3a9      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002858:	4b68      	ldr	r3, [pc, #416]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0xe6>
 8002864:	e014      	b.n	8002890 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002866:	f7ff fc59 	bl	800211c <HAL_GetTick>
 800286a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800286e:	f7ff fc55 	bl	800211c <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b64      	cmp	r3, #100	; 0x64
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e395      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002880:	4b5e      	ldr	r3, [pc, #376]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f0      	bne.n	800286e <HAL_RCC_OscConfig+0x10e>
 800288c:	e000      	b.n	8002890 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80ca 	beq.w	8002a32 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289e:	4b57      	ldr	r3, [pc, #348]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028a6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028a8:	4b54      	ldr	r3, [pc, #336]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_RCC_OscConfig+0x164>
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	2b18      	cmp	r3, #24
 80028b8:	d156      	bne.n	8002968 <HAL_RCC_OscConfig+0x208>
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d151      	bne.n	8002968 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028c4:	4b4d      	ldr	r3, [pc, #308]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_OscConfig+0x17c>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e367      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028dc:	4b47      	ldr	r3, [pc, #284]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 0219 	bic.w	r2, r3, #25
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4944      	ldr	r1, [pc, #272]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028ee:	f7ff fc15 	bl	800211c <HAL_GetTick>
 80028f2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f6:	f7ff fc11 	bl	800211c <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e351      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002908:	4b3c      	ldr	r3, [pc, #240]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002914:	f7ff fc32 	bl	800217c <HAL_GetREVID>
 8002918:	4603      	mov	r3, r0
 800291a:	f241 0203 	movw	r2, #4099	; 0x1003
 800291e:	4293      	cmp	r3, r2
 8002920:	d817      	bhi.n	8002952 <HAL_RCC_OscConfig+0x1f2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b40      	cmp	r3, #64	; 0x40
 8002928:	d108      	bne.n	800293c <HAL_RCC_OscConfig+0x1dc>
 800292a:	4b34      	ldr	r3, [pc, #208]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002932:	4a32      	ldr	r2, [pc, #200]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 8002934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002938:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800293a:	e07a      	b.n	8002a32 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293c:	4b2f      	ldr	r3, [pc, #188]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	031b      	lsls	r3, r3, #12
 800294a:	492c      	ldr	r1, [pc, #176]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002950:	e06f      	b.n	8002a32 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002952:	4b2a      	ldr	r3, [pc, #168]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	061b      	lsls	r3, r3, #24
 8002960:	4926      	ldr	r1, [pc, #152]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002966:	e064      	b.n	8002a32 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d047      	beq.n	8002a00 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002970:	4b22      	ldr	r3, [pc, #136]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 0219 	bic.w	r2, r3, #25
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	491f      	ldr	r1, [pc, #124]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7ff fbcb 	bl	800211c <HAL_GetTick>
 8002986:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298a:	f7ff fbc7 	bl	800211c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e307      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800299c:	4b17      	ldr	r3, [pc, #92]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a8:	f7ff fbe8 	bl	800217c <HAL_GetREVID>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d817      	bhi.n	80029e6 <HAL_RCC_OscConfig+0x286>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b40      	cmp	r3, #64	; 0x40
 80029bc:	d108      	bne.n	80029d0 <HAL_RCC_OscConfig+0x270>
 80029be:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029c6:	4a0d      	ldr	r2, [pc, #52]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029cc:	6053      	str	r3, [r2, #4]
 80029ce:	e030      	b.n	8002a32 <HAL_RCC_OscConfig+0x2d2>
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	031b      	lsls	r3, r3, #12
 80029de:	4907      	ldr	r1, [pc, #28]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
 80029e4:	e025      	b.n	8002a32 <HAL_RCC_OscConfig+0x2d2>
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	061b      	lsls	r3, r3, #24
 80029f4:	4901      	ldr	r1, [pc, #4]	; (80029fc <HAL_RCC_OscConfig+0x29c>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
 80029fa:	e01a      	b.n	8002a32 <HAL_RCC_OscConfig+0x2d2>
 80029fc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a00:	4b9e      	ldr	r3, [pc, #632]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a9d      	ldr	r2, [pc, #628]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002a06:	f023 0301 	bic.w	r3, r3, #1
 8002a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7ff fb86 	bl	800211c <HAL_GetTick>
 8002a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a14:	f7ff fb82 	bl	800211c <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e2c2      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a26:	4b95      	ldr	r3, [pc, #596]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 80a9 	beq.w	8002b92 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a40:	4b8e      	ldr	r3, [pc, #568]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a48:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a4a:	4b8c      	ldr	r3, [pc, #560]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d007      	beq.n	8002a66 <HAL_RCC_OscConfig+0x306>
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	2b18      	cmp	r3, #24
 8002a5a:	d13a      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x372>
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d135      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a66:	4b85      	ldr	r3, [pc, #532]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_RCC_OscConfig+0x31e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	2b80      	cmp	r3, #128	; 0x80
 8002a78:	d001      	beq.n	8002a7e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e296      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a7e:	f7ff fb7d 	bl	800217c <HAL_GetREVID>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d817      	bhi.n	8002abc <HAL_RCC_OscConfig+0x35c>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d108      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x346>
 8002a94:	4b79      	ldr	r3, [pc, #484]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a9c:	4a77      	ldr	r2, [pc, #476]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002a9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002aa2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002aa4:	e075      	b.n	8002b92 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002aa6:	4b75      	ldr	r3, [pc, #468]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	069b      	lsls	r3, r3, #26
 8002ab4:	4971      	ldr	r1, [pc, #452]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002aba:	e06a      	b.n	8002b92 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002abc:	4b6f      	ldr	r3, [pc, #444]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	061b      	lsls	r3, r3, #24
 8002aca:	496c      	ldr	r1, [pc, #432]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ad0:	e05f      	b.n	8002b92 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d042      	beq.n	8002b60 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ada:	4b68      	ldr	r3, [pc, #416]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a67      	ldr	r2, [pc, #412]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7ff fb19 	bl	800211c <HAL_GetTick>
 8002aea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002aee:	f7ff fb15 	bl	800211c <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e255      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b00:	4b5e      	ldr	r3, [pc, #376]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0f0      	beq.n	8002aee <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b0c:	f7ff fb36 	bl	800217c <HAL_GetREVID>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d817      	bhi.n	8002b4a <HAL_RCC_OscConfig+0x3ea>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d108      	bne.n	8002b34 <HAL_RCC_OscConfig+0x3d4>
 8002b22:	4b56      	ldr	r3, [pc, #344]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b2a:	4a54      	ldr	r2, [pc, #336]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b30:	6053      	str	r3, [r2, #4]
 8002b32:	e02e      	b.n	8002b92 <HAL_RCC_OscConfig+0x432>
 8002b34:	4b51      	ldr	r3, [pc, #324]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	069b      	lsls	r3, r3, #26
 8002b42:	494e      	ldr	r1, [pc, #312]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
 8002b48:	e023      	b.n	8002b92 <HAL_RCC_OscConfig+0x432>
 8002b4a:	4b4c      	ldr	r3, [pc, #304]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	061b      	lsls	r3, r3, #24
 8002b58:	4948      	ldr	r1, [pc, #288]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60cb      	str	r3, [r1, #12]
 8002b5e:	e018      	b.n	8002b92 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b60:	4b46      	ldr	r3, [pc, #280]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a45      	ldr	r2, [pc, #276]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7ff fad6 	bl	800211c <HAL_GetTick>
 8002b70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b74:	f7ff fad2 	bl	800211c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e212      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b86:	4b3d      	ldr	r3, [pc, #244]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d036      	beq.n	8002c0c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d019      	beq.n	8002bda <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba6:	4b35      	ldr	r3, [pc, #212]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002baa:	4a34      	ldr	r2, [pc, #208]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7ff fab3 	bl	800211c <HAL_GetTick>
 8002bb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bba:	f7ff faaf 	bl	800211c <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e1ef      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bcc:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x45a>
 8002bd8:	e018      	b.n	8002c0c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bda:	4b28      	ldr	r3, [pc, #160]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bde:	4a27      	ldr	r2, [pc, #156]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be6:	f7ff fa99 	bl	800211c <HAL_GetTick>
 8002bea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bee:	f7ff fa95 	bl	800211c <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e1d5      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c00:	4b1e      	ldr	r3, [pc, #120]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f0      	bne.n	8002bee <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d039      	beq.n	8002c8c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d019      	beq.n	8002c54 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c20:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a15      	ldr	r2, [pc, #84]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002c26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c2c:	f7ff fa76 	bl	800211c <HAL_GetTick>
 8002c30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c34:	f7ff fa72 	bl	800211c <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e1b2      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c46:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x4d4>
 8002c52:	e01b      	b.n	8002c8c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c54:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a08      	ldr	r2, [pc, #32]	; (8002c7c <HAL_RCC_OscConfig+0x51c>)
 8002c5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c5e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c60:	f7ff fa5c 	bl	800211c <HAL_GetTick>
 8002c64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c68:	f7ff fa58 	bl	800211c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d904      	bls.n	8002c80 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e198      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
 8002c7a:	bf00      	nop
 8002c7c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c80:	4ba3      	ldr	r3, [pc, #652]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1ed      	bne.n	8002c68 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8081 	beq.w	8002d9c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c9a:	4b9e      	ldr	r3, [pc, #632]	; (8002f14 <HAL_RCC_OscConfig+0x7b4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a9d      	ldr	r2, [pc, #628]	; (8002f14 <HAL_RCC_OscConfig+0x7b4>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ca6:	f7ff fa39 	bl	800211c <HAL_GetTick>
 8002caa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002cae:	f7ff fa35 	bl	800211c <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b64      	cmp	r3, #100	; 0x64
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e175      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cc0:	4b94      	ldr	r3, [pc, #592]	; (8002f14 <HAL_RCC_OscConfig+0x7b4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x582>
 8002cd4:	4b8e      	ldr	r3, [pc, #568]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	4a8d      	ldr	r2, [pc, #564]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce0:	e02d      	b.n	8002d3e <HAL_RCC_OscConfig+0x5de>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x5a4>
 8002cea:	4b89      	ldr	r3, [pc, #548]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	4a88      	ldr	r2, [pc, #544]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf6:	4b86      	ldr	r3, [pc, #536]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	4a85      	ldr	r2, [pc, #532]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	6713      	str	r3, [r2, #112]	; 0x70
 8002d02:	e01c      	b.n	8002d3e <HAL_RCC_OscConfig+0x5de>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b05      	cmp	r3, #5
 8002d0a:	d10c      	bne.n	8002d26 <HAL_RCC_OscConfig+0x5c6>
 8002d0c:	4b80      	ldr	r3, [pc, #512]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d10:	4a7f      	ldr	r2, [pc, #508]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002d12:	f043 0304 	orr.w	r3, r3, #4
 8002d16:	6713      	str	r3, [r2, #112]	; 0x70
 8002d18:	4b7d      	ldr	r3, [pc, #500]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1c:	4a7c      	ldr	r2, [pc, #496]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6713      	str	r3, [r2, #112]	; 0x70
 8002d24:	e00b      	b.n	8002d3e <HAL_RCC_OscConfig+0x5de>
 8002d26:	4b7a      	ldr	r3, [pc, #488]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2a:	4a79      	ldr	r2, [pc, #484]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	6713      	str	r3, [r2, #112]	; 0x70
 8002d32:	4b77      	ldr	r3, [pc, #476]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	4a76      	ldr	r2, [pc, #472]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d015      	beq.n	8002d72 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d46:	f7ff f9e9 	bl	800211c <HAL_GetTick>
 8002d4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7ff f9e5 	bl	800211c <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e123      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d64:	4b6a      	ldr	r3, [pc, #424]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0ee      	beq.n	8002d4e <HAL_RCC_OscConfig+0x5ee>
 8002d70:	e014      	b.n	8002d9c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d72:	f7ff f9d3 	bl	800211c <HAL_GetTick>
 8002d76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d78:	e00a      	b.n	8002d90 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f7ff f9cf 	bl	800211c <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e10d      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d90:	4b5f      	ldr	r3, [pc, #380]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ee      	bne.n	8002d7a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8102 	beq.w	8002faa <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002da6:	4b5a      	ldr	r3, [pc, #360]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dae:	2b18      	cmp	r3, #24
 8002db0:	f000 80bd 	beq.w	8002f2e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	f040 8095 	bne.w	8002ee8 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbe:	4b54      	ldr	r3, [pc, #336]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a53      	ldr	r2, [pc, #332]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dca:	f7ff f9a7 	bl	800211c <HAL_GetTick>
 8002dce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7ff f9a3 	bl	800211c <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e0e3      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002de4:	4b4a      	ldr	r3, [pc, #296]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f0      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df0:	4b47      	ldr	r3, [pc, #284]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002df4:	4b48      	ldr	r3, [pc, #288]	; (8002f18 <HAL_RCC_OscConfig+0x7b8>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e00:	0112      	lsls	r2, r2, #4
 8002e02:	430a      	orrs	r2, r1
 8002e04:	4942      	ldr	r1, [pc, #264]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	628b      	str	r3, [r1, #40]	; 0x28
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	025b      	lsls	r3, r3, #9
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	3b01      	subs	r3, #1
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e32:	3b01      	subs	r3, #1
 8002e34:	061b      	lsls	r3, r3, #24
 8002e36:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002e3a:	4935      	ldr	r1, [pc, #212]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002e40:	4b33      	ldr	r3, [pc, #204]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	4a32      	ldr	r2, [pc, #200]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002e46:	f023 0301 	bic.w	r3, r3, #1
 8002e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e4c:	4b30      	ldr	r3, [pc, #192]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e50:	4b32      	ldr	r3, [pc, #200]	; (8002f1c <HAL_RCC_OscConfig+0x7bc>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e58:	00d2      	lsls	r2, r2, #3
 8002e5a:	492d      	ldr	r1, [pc, #180]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e60:	4b2b      	ldr	r3, [pc, #172]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	f023 020c 	bic.w	r2, r3, #12
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	4928      	ldr	r1, [pc, #160]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e72:	4b27      	ldr	r3, [pc, #156]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	f023 0202 	bic.w	r2, r3, #2
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	4924      	ldr	r1, [pc, #144]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e84:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	4a21      	ldr	r2, [pc, #132]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e90:	4b1f      	ldr	r3, [pc, #124]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	4a1e      	ldr	r2, [pc, #120]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e9c:	4b1c      	ldr	r3, [pc, #112]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	4a1b      	ldr	r2, [pc, #108]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002ea2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002ea8:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	4a18      	ldr	r2, [pc, #96]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb4:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7ff f92c 	bl	800211c <HAL_GetTick>
 8002ec4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7ff f928 	bl	800211c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e068      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x768>
 8002ee6:	e060      	b.n	8002faa <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee8:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a08      	ldr	r2, [pc, #32]	; (8002f10 <HAL_RCC_OscConfig+0x7b0>)
 8002eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7ff f912 	bl	800211c <HAL_GetTick>
 8002ef8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002efa:	e011      	b.n	8002f20 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002efc:	f7ff f90e 	bl	800211c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d90a      	bls.n	8002f20 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e04e      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
 8002f0e:	bf00      	nop
 8002f10:	58024400 	.word	0x58024400
 8002f14:	58024800 	.word	0x58024800
 8002f18:	fffffc0c 	.word	0xfffffc0c
 8002f1c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f20:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <HAL_RCC_OscConfig+0x854>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e7      	bne.n	8002efc <HAL_RCC_OscConfig+0x79c>
 8002f2c:	e03d      	b.n	8002faa <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f2e:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <HAL_RCC_OscConfig+0x854>)
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f34:	4b1f      	ldr	r3, [pc, #124]	; (8002fb4 <HAL_RCC_OscConfig+0x854>)
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d031      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f003 0203 	and.w	r2, r3, #3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d12a      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	091b      	lsrs	r3, r3, #4
 8002f54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d122      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d11a      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	0a5b      	lsrs	r3, r3, #9
 8002f74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d111      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	0c1b      	lsrs	r3, r3, #16
 8002f86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d108      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	0e1b      	lsrs	r3, r3, #24
 8002f98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d001      	beq.n	8002faa <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3730      	adds	r7, #48	; 0x30
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	58024400 	.word	0x58024400

08002fb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e19c      	b.n	8003306 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b8a      	ldr	r3, [pc, #552]	; (80031f8 <HAL_RCC_ClockConfig+0x240>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d910      	bls.n	8002ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b87      	ldr	r3, [pc, #540]	; (80031f8 <HAL_RCC_ClockConfig+0x240>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 020f 	bic.w	r2, r3, #15
 8002fe2:	4985      	ldr	r1, [pc, #532]	; (80031f8 <HAL_RCC_ClockConfig+0x240>)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	4b83      	ldr	r3, [pc, #524]	; (80031f8 <HAL_RCC_ClockConfig+0x240>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e184      	b.n	8003306 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d010      	beq.n	800302a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	4b7b      	ldr	r3, [pc, #492]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003014:	429a      	cmp	r2, r3
 8003016:	d908      	bls.n	800302a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003018:	4b78      	ldr	r3, [pc, #480]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	4975      	ldr	r1, [pc, #468]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 8003026:	4313      	orrs	r3, r2
 8003028:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d010      	beq.n	8003058 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	4b70      	ldr	r3, [pc, #448]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003042:	429a      	cmp	r2, r3
 8003044:	d908      	bls.n	8003058 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003046:	4b6d      	ldr	r3, [pc, #436]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	496a      	ldr	r1, [pc, #424]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 8003054:	4313      	orrs	r3, r2
 8003056:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b00      	cmp	r3, #0
 8003062:	d010      	beq.n	8003086 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699a      	ldr	r2, [r3, #24]
 8003068:	4b64      	ldr	r3, [pc, #400]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003070:	429a      	cmp	r2, r3
 8003072:	d908      	bls.n	8003086 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003074:	4b61      	ldr	r3, [pc, #388]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	495e      	ldr	r1, [pc, #376]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 8003082:	4313      	orrs	r3, r2
 8003084:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b00      	cmp	r3, #0
 8003090:	d010      	beq.n	80030b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	4b59      	ldr	r3, [pc, #356]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800309e:	429a      	cmp	r2, r3
 80030a0:	d908      	bls.n	80030b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80030a2:	4b56      	ldr	r3, [pc, #344]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	4953      	ldr	r1, [pc, #332]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d010      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	4b4d      	ldr	r3, [pc, #308]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d908      	bls.n	80030e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d0:	4b4a      	ldr	r3, [pc, #296]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f023 020f 	bic.w	r2, r3, #15
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4947      	ldr	r1, [pc, #284]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d055      	beq.n	800319a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030ee:	4b43      	ldr	r3, [pc, #268]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	4940      	ldr	r1, [pc, #256]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d107      	bne.n	8003118 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003108:	4b3c      	ldr	r3, [pc, #240]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d121      	bne.n	8003158 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0f6      	b.n	8003306 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d107      	bne.n	8003130 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003120:	4b36      	ldr	r3, [pc, #216]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d115      	bne.n	8003158 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0ea      	b.n	8003306 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d107      	bne.n	8003148 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003138:	4b30      	ldr	r3, [pc, #192]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d109      	bne.n	8003158 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0de      	b.n	8003306 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003148:	4b2c      	ldr	r3, [pc, #176]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0d6      	b.n	8003306 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003158:	4b28      	ldr	r3, [pc, #160]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f023 0207 	bic.w	r2, r3, #7
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	4925      	ldr	r1, [pc, #148]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 8003166:	4313      	orrs	r3, r2
 8003168:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316a:	f7fe ffd7 	bl	800211c <HAL_GetTick>
 800316e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003170:	e00a      	b.n	8003188 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003172:	f7fe ffd3 	bl	800211c <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003180:	4293      	cmp	r3, r2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e0be      	b.n	8003306 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003188:	4b1c      	ldr	r3, [pc, #112]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	429a      	cmp	r2, r3
 8003198:	d1eb      	bne.n	8003172 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d010      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	4b14      	ldr	r3, [pc, #80]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d208      	bcs.n	80031c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b6:	4b11      	ldr	r3, [pc, #68]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f023 020f 	bic.w	r2, r3, #15
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	490e      	ldr	r1, [pc, #56]	; (80031fc <HAL_RCC_ClockConfig+0x244>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_RCC_ClockConfig+0x240>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d214      	bcs.n	8003200 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <HAL_RCC_ClockConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 020f 	bic.w	r2, r3, #15
 80031de:	4906      	ldr	r1, [pc, #24]	; (80031f8 <HAL_RCC_ClockConfig+0x240>)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <HAL_RCC_ClockConfig+0x240>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e086      	b.n	8003306 <HAL_RCC_ClockConfig+0x34e>
 80031f8:	52002000 	.word	0x52002000
 80031fc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d010      	beq.n	800322e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	4b3f      	ldr	r3, [pc, #252]	; (8003310 <HAL_RCC_ClockConfig+0x358>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003218:	429a      	cmp	r2, r3
 800321a:	d208      	bcs.n	800322e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800321c:	4b3c      	ldr	r3, [pc, #240]	; (8003310 <HAL_RCC_ClockConfig+0x358>)
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	4939      	ldr	r1, [pc, #228]	; (8003310 <HAL_RCC_ClockConfig+0x358>)
 800322a:	4313      	orrs	r3, r2
 800322c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d010      	beq.n	800325c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	4b34      	ldr	r3, [pc, #208]	; (8003310 <HAL_RCC_ClockConfig+0x358>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003246:	429a      	cmp	r2, r3
 8003248:	d208      	bcs.n	800325c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800324a:	4b31      	ldr	r3, [pc, #196]	; (8003310 <HAL_RCC_ClockConfig+0x358>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	492e      	ldr	r1, [pc, #184]	; (8003310 <HAL_RCC_ClockConfig+0x358>)
 8003258:	4313      	orrs	r3, r2
 800325a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	d010      	beq.n	800328a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_RCC_ClockConfig+0x358>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003274:	429a      	cmp	r2, r3
 8003276:	d208      	bcs.n	800328a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <HAL_RCC_ClockConfig+0x358>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	4922      	ldr	r1, [pc, #136]	; (8003310 <HAL_RCC_ClockConfig+0x358>)
 8003286:	4313      	orrs	r3, r2
 8003288:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d010      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69da      	ldr	r2, [r3, #28]
 800329a:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_RCC_ClockConfig+0x358>)
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d208      	bcs.n	80032b8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032a6:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <HAL_RCC_ClockConfig+0x358>)
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	4917      	ldr	r1, [pc, #92]	; (8003310 <HAL_RCC_ClockConfig+0x358>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032b8:	f000 f834 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 80032bc:	4602      	mov	r2, r0
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <HAL_RCC_ClockConfig+0x358>)
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	4912      	ldr	r1, [pc, #72]	; (8003314 <HAL_RCC_ClockConfig+0x35c>)
 80032ca:	5ccb      	ldrb	r3, [r1, r3]
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	fa22 f303 	lsr.w	r3, r2, r3
 80032d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032d6:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <HAL_RCC_ClockConfig+0x358>)
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	4a0d      	ldr	r2, [pc, #52]	; (8003314 <HAL_RCC_ClockConfig+0x35c>)
 80032e0:	5cd3      	ldrb	r3, [r2, r3]
 80032e2:	f003 031f 	and.w	r3, r3, #31
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
 80032ec:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <HAL_RCC_ClockConfig+0x360>)
 80032ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032f0:	4a0a      	ldr	r2, [pc, #40]	; (800331c <HAL_RCC_ClockConfig+0x364>)
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <HAL_RCC_ClockConfig+0x368>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe fec4 	bl	8002088 <HAL_InitTick>
 8003300:	4603      	mov	r3, r0
 8003302:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003304:	7bfb      	ldrb	r3, [r7, #15]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	58024400 	.word	0x58024400
 8003314:	080073cc 	.word	0x080073cc
 8003318:	2400006c 	.word	0x2400006c
 800331c:	24000068 	.word	0x24000068
 8003320:	24000070 	.word	0x24000070

08003324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003324:	b480      	push	{r7}
 8003326:	b089      	sub	sp, #36	; 0x24
 8003328:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800332a:	4bb3      	ldr	r3, [pc, #716]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003332:	2b18      	cmp	r3, #24
 8003334:	f200 8155 	bhi.w	80035e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003338:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <HAL_RCC_GetSysClockFreq+0x1c>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	080033a5 	.word	0x080033a5
 8003344:	080035e3 	.word	0x080035e3
 8003348:	080035e3 	.word	0x080035e3
 800334c:	080035e3 	.word	0x080035e3
 8003350:	080035e3 	.word	0x080035e3
 8003354:	080035e3 	.word	0x080035e3
 8003358:	080035e3 	.word	0x080035e3
 800335c:	080035e3 	.word	0x080035e3
 8003360:	080033cb 	.word	0x080033cb
 8003364:	080035e3 	.word	0x080035e3
 8003368:	080035e3 	.word	0x080035e3
 800336c:	080035e3 	.word	0x080035e3
 8003370:	080035e3 	.word	0x080035e3
 8003374:	080035e3 	.word	0x080035e3
 8003378:	080035e3 	.word	0x080035e3
 800337c:	080035e3 	.word	0x080035e3
 8003380:	080033d1 	.word	0x080033d1
 8003384:	080035e3 	.word	0x080035e3
 8003388:	080035e3 	.word	0x080035e3
 800338c:	080035e3 	.word	0x080035e3
 8003390:	080035e3 	.word	0x080035e3
 8003394:	080035e3 	.word	0x080035e3
 8003398:	080035e3 	.word	0x080035e3
 800339c:	080035e3 	.word	0x080035e3
 80033a0:	080033d7 	.word	0x080033d7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033a4:	4b94      	ldr	r3, [pc, #592]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d009      	beq.n	80033c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033b0:	4b91      	ldr	r3, [pc, #580]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	08db      	lsrs	r3, r3, #3
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	4a90      	ldr	r2, [pc, #576]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
 80033c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80033c2:	e111      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80033c4:	4b8d      	ldr	r3, [pc, #564]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033c6:	61bb      	str	r3, [r7, #24]
    break;
 80033c8:	e10e      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80033ca:	4b8d      	ldr	r3, [pc, #564]	; (8003600 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033cc:	61bb      	str	r3, [r7, #24]
    break;
 80033ce:	e10b      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80033d0:	4b8c      	ldr	r3, [pc, #560]	; (8003604 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80033d2:	61bb      	str	r3, [r7, #24]
    break;
 80033d4:	e108      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033d6:	4b88      	ldr	r3, [pc, #544]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80033e0:	4b85      	ldr	r3, [pc, #532]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033ec:	4b82      	ldr	r3, [pc, #520]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80033f6:	4b80      	ldr	r3, [pc, #512]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fa:	08db      	lsrs	r3, r3, #3
 80033fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	fb02 f303 	mul.w	r3, r2, r3
 8003406:	ee07 3a90 	vmov	s15, r3
 800340a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80e1 	beq.w	80035dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b02      	cmp	r3, #2
 800341e:	f000 8083 	beq.w	8003528 <HAL_RCC_GetSysClockFreq+0x204>
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b02      	cmp	r3, #2
 8003426:	f200 80a1 	bhi.w	800356c <HAL_RCC_GetSysClockFreq+0x248>
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_RCC_GetSysClockFreq+0x114>
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d056      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003436:	e099      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003438:	4b6f      	ldr	r3, [pc, #444]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b00      	cmp	r3, #0
 8003442:	d02d      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003444:	4b6c      	ldr	r3, [pc, #432]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	08db      	lsrs	r3, r3, #3
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	4a6b      	ldr	r2, [pc, #428]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
 8003454:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	ee07 3a90 	vmov	s15, r3
 800345c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	ee07 3a90 	vmov	s15, r3
 8003466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800346e:	4b62      	ldr	r3, [pc, #392]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003476:	ee07 3a90 	vmov	s15, r3
 800347a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800347e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003482:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800348a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800348e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800349e:	e087      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800360c <HAL_RCC_GetSysClockFreq+0x2e8>
 80034ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034b2:	4b51      	ldr	r3, [pc, #324]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ba:	ee07 3a90 	vmov	s15, r3
 80034be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003608 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034e2:	e065      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003610 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034f6:	4b40      	ldr	r3, [pc, #256]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034fe:	ee07 3a90 	vmov	s15, r3
 8003502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003506:	ed97 6a02 	vldr	s12, [r7, #8]
 800350a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003608 <HAL_RCC_GetSysClockFreq+0x2e4>
 800350e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800351a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800351e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003526:	e043      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003532:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003614 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800353a:	4b2f      	ldr	r3, [pc, #188]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003542:	ee07 3a90 	vmov	s15, r3
 8003546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800354a:	ed97 6a02 	vldr	s12, [r7, #8]
 800354e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800355a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800355e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800356a:	e021      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	ee07 3a90 	vmov	s15, r3
 8003572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003576:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003610 <HAL_RCC_GetSysClockFreq+0x2ec>
 800357a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800357e:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003586:	ee07 3a90 	vmov	s15, r3
 800358a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800358e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003592:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800359a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800359e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035ae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80035b0:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	0a5b      	lsrs	r3, r3, #9
 80035b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ba:	3301      	adds	r3, #1
 80035bc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	ee07 3a90 	vmov	s15, r3
 80035c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80035cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035d4:	ee17 3a90 	vmov	r3, s15
 80035d8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80035da:	e005      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	61bb      	str	r3, [r7, #24]
    break;
 80035e0:	e002      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80035e2:	4b07      	ldr	r3, [pc, #28]	; (8003600 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035e4:	61bb      	str	r3, [r7, #24]
    break;
 80035e6:	bf00      	nop
  }

  return sysclockfreq;
 80035e8:	69bb      	ldr	r3, [r7, #24]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3724      	adds	r7, #36	; 0x24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	58024400 	.word	0x58024400
 80035fc:	03d09000 	.word	0x03d09000
 8003600:	003d0900 	.word	0x003d0900
 8003604:	017d7840 	.word	0x017d7840
 8003608:	46000000 	.word	0x46000000
 800360c:	4c742400 	.word	0x4c742400
 8003610:	4a742400 	.word	0x4a742400
 8003614:	4bbebc20 	.word	0x4bbebc20

08003618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800361e:	f7ff fe81 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 8003622:	4602      	mov	r2, r0
 8003624:	4b10      	ldr	r3, [pc, #64]	; (8003668 <HAL_RCC_GetHCLKFreq+0x50>)
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	0a1b      	lsrs	r3, r3, #8
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	490f      	ldr	r1, [pc, #60]	; (800366c <HAL_RCC_GetHCLKFreq+0x54>)
 8003630:	5ccb      	ldrb	r3, [r1, r3]
 8003632:	f003 031f 	and.w	r3, r3, #31
 8003636:	fa22 f303 	lsr.w	r3, r2, r3
 800363a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <HAL_RCC_GetHCLKFreq+0x50>)
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	4a09      	ldr	r2, [pc, #36]	; (800366c <HAL_RCC_GetHCLKFreq+0x54>)
 8003646:	5cd3      	ldrb	r3, [r2, r3]
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	fa22 f303 	lsr.w	r3, r2, r3
 8003652:	4a07      	ldr	r2, [pc, #28]	; (8003670 <HAL_RCC_GetHCLKFreq+0x58>)
 8003654:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003656:	4a07      	ldr	r2, [pc, #28]	; (8003674 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <HAL_RCC_GetHCLKFreq+0x58>)
 800365e:	681b      	ldr	r3, [r3, #0]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	58024400 	.word	0x58024400
 800366c:	080073cc 	.word	0x080073cc
 8003670:	2400006c 	.word	0x2400006c
 8003674:	24000068 	.word	0x24000068

08003678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800367c:	f7ff ffcc 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003680:	4602      	mov	r2, r0
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	4904      	ldr	r1, [pc, #16]	; (80036a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800368e:	5ccb      	ldrb	r3, [r1, r3]
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	58024400 	.word	0x58024400
 80036a0:	080073cc 	.word	0x080073cc

080036a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80036a8:	f7ff ffb6 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	4904      	ldr	r1, [pc, #16]	; (80036cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	58024400 	.word	0x58024400
 80036cc:	080073cc 	.word	0x080073cc

080036d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036d8:	2300      	movs	r3, #0
 80036da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036dc:	2300      	movs	r3, #0
 80036de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d03f      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036f4:	d02a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036fa:	d824      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003700:	d018      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003702:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003706:	d81e      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800370c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003710:	d007      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003712:	e018      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003714:	4bab      	ldr	r3, [pc, #684]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	4aaa      	ldr	r2, [pc, #680]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800371a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003720:	e015      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3304      	adds	r3, #4
 8003726:	2102      	movs	r1, #2
 8003728:	4618      	mov	r0, r3
 800372a:	f001 f9cf 	bl	8004acc <RCCEx_PLL2_Config>
 800372e:	4603      	mov	r3, r0
 8003730:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003732:	e00c      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3324      	adds	r3, #36	; 0x24
 8003738:	2102      	movs	r1, #2
 800373a:	4618      	mov	r0, r3
 800373c:	f001 fa78 	bl	8004c30 <RCCEx_PLL3_Config>
 8003740:	4603      	mov	r3, r0
 8003742:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003744:	e003      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	75fb      	strb	r3, [r7, #23]
      break;
 800374a:	e000      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800374c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003754:	4b9b      	ldr	r3, [pc, #620]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003758:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003760:	4998      	ldr	r1, [pc, #608]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003762:	4313      	orrs	r3, r2
 8003764:	650b      	str	r3, [r1, #80]	; 0x50
 8003766:	e001      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003768:	7dfb      	ldrb	r3, [r7, #23]
 800376a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d03d      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	2b04      	cmp	r3, #4
 800377e:	d826      	bhi.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003780:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003786:	bf00      	nop
 8003788:	0800379d 	.word	0x0800379d
 800378c:	080037ab 	.word	0x080037ab
 8003790:	080037bd 	.word	0x080037bd
 8003794:	080037d5 	.word	0x080037d5
 8003798:	080037d5 	.word	0x080037d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800379c:	4b89      	ldr	r3, [pc, #548]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	4a88      	ldr	r2, [pc, #544]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037a8:	e015      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3304      	adds	r3, #4
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f001 f98b 	bl	8004acc <RCCEx_PLL2_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037ba:	e00c      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3324      	adds	r3, #36	; 0x24
 80037c0:	2100      	movs	r1, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 fa34 	bl	8004c30 <RCCEx_PLL3_Config>
 80037c8:	4603      	mov	r3, r0
 80037ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037cc:	e003      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	75fb      	strb	r3, [r7, #23]
      break;
 80037d2:	e000      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80037d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037dc:	4b79      	ldr	r3, [pc, #484]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e0:	f023 0207 	bic.w	r2, r3, #7
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	4976      	ldr	r1, [pc, #472]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	650b      	str	r3, [r1, #80]	; 0x50
 80037ee:	e001      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
 80037f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d042      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003808:	d02b      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800380a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380e:	d825      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003810:	2bc0      	cmp	r3, #192	; 0xc0
 8003812:	d028      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003814:	2bc0      	cmp	r3, #192	; 0xc0
 8003816:	d821      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003818:	2b80      	cmp	r3, #128	; 0x80
 800381a:	d016      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800381c:	2b80      	cmp	r3, #128	; 0x80
 800381e:	d81d      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	d007      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003828:	e018      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800382a:	4b66      	ldr	r3, [pc, #408]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	4a65      	ldr	r2, [pc, #404]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003836:	e017      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3304      	adds	r3, #4
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f001 f944 	bl	8004acc <RCCEx_PLL2_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003848:	e00e      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3324      	adds	r3, #36	; 0x24
 800384e:	2100      	movs	r1, #0
 8003850:	4618      	mov	r0, r3
 8003852:	f001 f9ed 	bl	8004c30 <RCCEx_PLL3_Config>
 8003856:	4603      	mov	r3, r0
 8003858:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800385a:	e005      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	75fb      	strb	r3, [r7, #23]
      break;
 8003860:	e002      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003862:	bf00      	nop
 8003864:	e000      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003866:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003868:	7dfb      	ldrb	r3, [r7, #23]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800386e:	4b55      	ldr	r3, [pc, #340]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003872:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	4952      	ldr	r1, [pc, #328]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800387c:	4313      	orrs	r3, r2
 800387e:	650b      	str	r3, [r1, #80]	; 0x50
 8003880:	e001      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388e:	2b00      	cmp	r3, #0
 8003890:	d049      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003898:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800389c:	d030      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800389e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038a2:	d82a      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80038a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038a8:	d02c      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80038aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038ae:	d824      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80038b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038b4:	d018      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80038b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ba:	d81e      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80038c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c4:	d007      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80038c6:	e018      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c8:	4b3e      	ldr	r3, [pc, #248]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	4a3d      	ldr	r2, [pc, #244]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038d4:	e017      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3304      	adds	r3, #4
 80038da:	2100      	movs	r1, #0
 80038dc:	4618      	mov	r0, r3
 80038de:	f001 f8f5 	bl	8004acc <RCCEx_PLL2_Config>
 80038e2:	4603      	mov	r3, r0
 80038e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80038e6:	e00e      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3324      	adds	r3, #36	; 0x24
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f001 f99e 	bl	8004c30 <RCCEx_PLL3_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038f8:	e005      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	75fb      	strb	r3, [r7, #23]
      break;
 80038fe:	e002      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003900:	bf00      	nop
 8003902:	e000      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10a      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800390c:	4b2d      	ldr	r3, [pc, #180]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800391a:	492a      	ldr	r1, [pc, #168]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800391c:	4313      	orrs	r3, r2
 800391e:	658b      	str	r3, [r1, #88]	; 0x58
 8003920:	e001      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003922:	7dfb      	ldrb	r3, [r7, #23]
 8003924:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800392e:	2b00      	cmp	r3, #0
 8003930:	d04c      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003938:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800393c:	d030      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800393e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003942:	d82a      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003944:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003948:	d02c      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800394a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800394e:	d824      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003950:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003954:	d018      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003956:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800395a:	d81e      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003964:	d007      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003966:	e018      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003968:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	4a15      	ldr	r2, [pc, #84]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800396e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003972:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003974:	e017      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3304      	adds	r3, #4
 800397a:	2100      	movs	r1, #0
 800397c:	4618      	mov	r0, r3
 800397e:	f001 f8a5 	bl	8004acc <RCCEx_PLL2_Config>
 8003982:	4603      	mov	r3, r0
 8003984:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003986:	e00e      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3324      	adds	r3, #36	; 0x24
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f001 f94e 	bl	8004c30 <RCCEx_PLL3_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003998:	e005      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	75fb      	strb	r3, [r7, #23]
      break;
 800399e:	e002      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80039a0:	bf00      	nop
 80039a2:	e000      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80039a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10d      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80039ba:	4902      	ldr	r1, [pc, #8]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	658b      	str	r3, [r1, #88]	; 0x58
 80039c0:	e004      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80039c2:	bf00      	nop
 80039c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c8:	7dfb      	ldrb	r3, [r7, #23]
 80039ca:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d032      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039dc:	2b30      	cmp	r3, #48	; 0x30
 80039de:	d01c      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80039e0:	2b30      	cmp	r3, #48	; 0x30
 80039e2:	d817      	bhi.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d00c      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d813      	bhi.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d016      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80039f0:	2b10      	cmp	r3, #16
 80039f2:	d10f      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f4:	4baf      	ldr	r3, [pc, #700]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	4aae      	ldr	r2, [pc, #696]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a00:	e00e      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	2102      	movs	r1, #2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f001 f85f 	bl	8004acc <RCCEx_PLL2_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a12:	e005      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	75fb      	strb	r3, [r7, #23]
      break;
 8003a18:	e002      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003a1a:	bf00      	nop
 8003a1c:	e000      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003a1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a20:	7dfb      	ldrb	r3, [r7, #23]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a26:	4ba3      	ldr	r3, [pc, #652]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a32:	49a0      	ldr	r1, [pc, #640]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a38:	e001      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d047      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a52:	d030      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003a54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a58:	d82a      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a5e:	d02c      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003a60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a64:	d824      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6a:	d018      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a70:	d81e      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7a:	d007      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003a7c:	e018      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a7e:	4b8d      	ldr	r3, [pc, #564]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	4a8c      	ldr	r2, [pc, #560]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a8a:	e017      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 f81a 	bl	8004acc <RCCEx_PLL2_Config>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a9c:	e00e      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3324      	adds	r3, #36	; 0x24
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 f8c3 	bl	8004c30 <RCCEx_PLL3_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003aae:	e005      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab4:	e002      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003ab6:	bf00      	nop
 8003ab8:	e000      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ac2:	4b7c      	ldr	r3, [pc, #496]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ace:	4979      	ldr	r1, [pc, #484]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	650b      	str	r3, [r1, #80]	; 0x50
 8003ad4:	e001      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
 8003ad8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d049      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aee:	d02e      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af4:	d828      	bhi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003af6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003afa:	d02a      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003afc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b00:	d822      	bhi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003b02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b06:	d026      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003b08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b0c:	d81c      	bhi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b12:	d010      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003b14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b18:	d816      	bhi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d01d      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b22:	d111      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3304      	adds	r3, #4
 8003b28:	2101      	movs	r1, #1
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 ffce 	bl	8004acc <RCCEx_PLL2_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b34:	e012      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3324      	adds	r3, #36	; 0x24
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 f877 	bl	8004c30 <RCCEx_PLL3_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b46:	e009      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b4c:	e006      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b4e:	bf00      	nop
 8003b50:	e004      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b52:	bf00      	nop
 8003b54:	e002      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b56:	bf00      	nop
 8003b58:	e000      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b62:	4b54      	ldr	r3, [pc, #336]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b66:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6e:	4951      	ldr	r1, [pc, #324]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	650b      	str	r3, [r1, #80]	; 0x50
 8003b74:	e001      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
 8003b78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d04b      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b90:	d02e      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b96:	d828      	bhi.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9c:	d02a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba2:	d822      	bhi.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ba4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ba8:	d026      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003baa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bae:	d81c      	bhi.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bb4:	d010      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003bb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bba:	d816      	bhi.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01d      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003bc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bc4:	d111      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	2101      	movs	r1, #1
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 ff7d 	bl	8004acc <RCCEx_PLL2_Config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003bd6:	e012      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3324      	adds	r3, #36	; 0x24
 8003bdc:	2101      	movs	r1, #1
 8003bde:	4618      	mov	r0, r3
 8003be0:	f001 f826 	bl	8004c30 <RCCEx_PLL3_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003be8:	e009      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	75fb      	strb	r3, [r7, #23]
      break;
 8003bee:	e006      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003bf0:	bf00      	nop
 8003bf2:	e004      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003bf4:	bf00      	nop
 8003bf6:	e002      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003bf8:	bf00      	nop
 8003bfa:	e000      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003bfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c04:	4b2b      	ldr	r3, [pc, #172]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c08:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c12:	4928      	ldr	r1, [pc, #160]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	658b      	str	r3, [r1, #88]	; 0x58
 8003c18:	e001      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
 8003c1c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d02f      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c32:	d00e      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c38:	d814      	bhi.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d015      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003c3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c42:	d10f      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c44:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	4a1a      	ldr	r2, [pc, #104]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c50:	e00c      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3304      	adds	r3, #4
 8003c56:	2101      	movs	r1, #1
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 ff37 	bl	8004acc <RCCEx_PLL2_Config>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c62:	e003      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	75fb      	strb	r3, [r7, #23]
      break;
 8003c68:	e000      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003c6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c72:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7e:	490d      	ldr	r1, [pc, #52]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	650b      	str	r3, [r1, #80]	; 0x50
 8003c84:	e001      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c86:	7dfb      	ldrb	r3, [r7, #23]
 8003c88:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d033      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d81c      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003c9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	08003cdf 	.word	0x08003cdf
 8003ca8:	08003cb9 	.word	0x08003cb9
 8003cac:	08003cc7 	.word	0x08003cc7
 8003cb0:	08003cdf 	.word	0x08003cdf
 8003cb4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb8:	4bb8      	ldr	r3, [pc, #736]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	4ab7      	ldr	r2, [pc, #732]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003cc4:	e00c      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	2102      	movs	r1, #2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fefd 	bl	8004acc <RCCEx_PLL2_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003cd6:	e003      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	75fb      	strb	r3, [r7, #23]
      break;
 8003cdc:	e000      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce0:	7dfb      	ldrb	r3, [r7, #23]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ce6:	4bad      	ldr	r3, [pc, #692]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cea:	f023 0203 	bic.w	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	49aa      	ldr	r1, [pc, #680]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cf8:	e001      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
 8003cfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 8086 	beq.w	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d0c:	4ba4      	ldr	r3, [pc, #656]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4aa3      	ldr	r2, [pc, #652]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d18:	f7fe fa00 	bl	800211c <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d1e:	e009      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d20:	f7fe f9fc 	bl	800211c <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	; 0x64
 8003d2c:	d902      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	75fb      	strb	r3, [r7, #23]
        break;
 8003d32:	e005      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d34:	4b9a      	ldr	r3, [pc, #616]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0ef      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d166      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d46:	4b95      	ldr	r3, [pc, #596]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d50:	4053      	eors	r3, r2
 8003d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d013      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d5a:	4b90      	ldr	r3, [pc, #576]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d62:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d64:	4b8d      	ldr	r3, [pc, #564]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	4a8c      	ldr	r2, [pc, #560]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d70:	4b8a      	ldr	r3, [pc, #552]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	4a89      	ldr	r2, [pc, #548]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d7c:	4a87      	ldr	r2, [pc, #540]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8c:	d115      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8e:	f7fe f9c5 	bl	800211c <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d94:	e00b      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d96:	f7fe f9c1 	bl	800211c <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d902      	bls.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	75fb      	strb	r3, [r7, #23]
            break;
 8003dac:	e005      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dae:	4b7b      	ldr	r3, [pc, #492]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0ed      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003dba:	7dfb      	ldrb	r3, [r7, #23]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d126      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dce:	d10d      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003dd0:	4b72      	ldr	r3, [pc, #456]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dde:	0919      	lsrs	r1, r3, #4
 8003de0:	4b70      	ldr	r3, [pc, #448]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003de2:	400b      	ands	r3, r1
 8003de4:	496d      	ldr	r1, [pc, #436]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	610b      	str	r3, [r1, #16]
 8003dea:	e005      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003dec:	4b6b      	ldr	r3, [pc, #428]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	4a6a      	ldr	r2, [pc, #424]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003df2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003df6:	6113      	str	r3, [r2, #16]
 8003df8:	4b68      	ldr	r3, [pc, #416]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e06:	4965      	ldr	r1, [pc, #404]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	670b      	str	r3, [r1, #112]	; 0x70
 8003e0c:	e004      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
 8003e10:	75bb      	strb	r3, [r7, #22]
 8003e12:	e001      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e14:	7dfb      	ldrb	r3, [r7, #23]
 8003e16:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d07e      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e28:	2b28      	cmp	r3, #40	; 0x28
 8003e2a:	d867      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003e2c:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e32:	bf00      	nop
 8003e34:	08003f03 	.word	0x08003f03
 8003e38:	08003efd 	.word	0x08003efd
 8003e3c:	08003efd 	.word	0x08003efd
 8003e40:	08003efd 	.word	0x08003efd
 8003e44:	08003efd 	.word	0x08003efd
 8003e48:	08003efd 	.word	0x08003efd
 8003e4c:	08003efd 	.word	0x08003efd
 8003e50:	08003efd 	.word	0x08003efd
 8003e54:	08003ed9 	.word	0x08003ed9
 8003e58:	08003efd 	.word	0x08003efd
 8003e5c:	08003efd 	.word	0x08003efd
 8003e60:	08003efd 	.word	0x08003efd
 8003e64:	08003efd 	.word	0x08003efd
 8003e68:	08003efd 	.word	0x08003efd
 8003e6c:	08003efd 	.word	0x08003efd
 8003e70:	08003efd 	.word	0x08003efd
 8003e74:	08003eeb 	.word	0x08003eeb
 8003e78:	08003efd 	.word	0x08003efd
 8003e7c:	08003efd 	.word	0x08003efd
 8003e80:	08003efd 	.word	0x08003efd
 8003e84:	08003efd 	.word	0x08003efd
 8003e88:	08003efd 	.word	0x08003efd
 8003e8c:	08003efd 	.word	0x08003efd
 8003e90:	08003efd 	.word	0x08003efd
 8003e94:	08003f03 	.word	0x08003f03
 8003e98:	08003efd 	.word	0x08003efd
 8003e9c:	08003efd 	.word	0x08003efd
 8003ea0:	08003efd 	.word	0x08003efd
 8003ea4:	08003efd 	.word	0x08003efd
 8003ea8:	08003efd 	.word	0x08003efd
 8003eac:	08003efd 	.word	0x08003efd
 8003eb0:	08003efd 	.word	0x08003efd
 8003eb4:	08003f03 	.word	0x08003f03
 8003eb8:	08003efd 	.word	0x08003efd
 8003ebc:	08003efd 	.word	0x08003efd
 8003ec0:	08003efd 	.word	0x08003efd
 8003ec4:	08003efd 	.word	0x08003efd
 8003ec8:	08003efd 	.word	0x08003efd
 8003ecc:	08003efd 	.word	0x08003efd
 8003ed0:	08003efd 	.word	0x08003efd
 8003ed4:	08003f03 	.word	0x08003f03
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3304      	adds	r3, #4
 8003edc:	2101      	movs	r1, #1
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fdf4 	bl	8004acc <RCCEx_PLL2_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ee8:	e00c      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3324      	adds	r3, #36	; 0x24
 8003eee:	2101      	movs	r1, #1
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fe9d 	bl	8004c30 <RCCEx_PLL3_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003efa:	e003      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	75fb      	strb	r3, [r7, #23]
      break;
 8003f00:	e000      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f0a:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f16:	4921      	ldr	r1, [pc, #132]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	654b      	str	r3, [r1, #84]	; 0x54
 8003f1c:	e001      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1e:	7dfb      	ldrb	r3, [r7, #23]
 8003f20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d03e      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f32:	2b05      	cmp	r3, #5
 8003f34:	d820      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003f36:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3c:	08003f7f 	.word	0x08003f7f
 8003f40:	08003f55 	.word	0x08003f55
 8003f44:	08003f67 	.word	0x08003f67
 8003f48:	08003f7f 	.word	0x08003f7f
 8003f4c:	08003f7f 	.word	0x08003f7f
 8003f50:	08003f7f 	.word	0x08003f7f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	2101      	movs	r1, #1
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fdb6 	bl	8004acc <RCCEx_PLL2_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f64:	e00c      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3324      	adds	r3, #36	; 0x24
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fe5f 	bl	8004c30 <RCCEx_PLL3_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f76:	e003      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f7c:	e000      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d110      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f86:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	f023 0207 	bic.w	r2, r3, #7
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f92:	4902      	ldr	r1, [pc, #8]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	654b      	str	r3, [r1, #84]	; 0x54
 8003f98:	e008      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003f9a:	bf00      	nop
 8003f9c:	58024400 	.word	0x58024400
 8003fa0:	58024800 	.word	0x58024800
 8003fa4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
 8003faa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d039      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbe:	2b05      	cmp	r3, #5
 8003fc0:	d820      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003fc2:	a201      	add	r2, pc, #4	; (adr r2, 8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc8:	0800400b 	.word	0x0800400b
 8003fcc:	08003fe1 	.word	0x08003fe1
 8003fd0:	08003ff3 	.word	0x08003ff3
 8003fd4:	0800400b 	.word	0x0800400b
 8003fd8:	0800400b 	.word	0x0800400b
 8003fdc:	0800400b 	.word	0x0800400b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fd70 	bl	8004acc <RCCEx_PLL2_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ff0:	e00c      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3324      	adds	r3, #36	; 0x24
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fe19 	bl	8004c30 <RCCEx_PLL3_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004002:	e003      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	75fb      	strb	r3, [r7, #23]
      break;
 8004008:	e000      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800400a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004012:	4bb7      	ldr	r3, [pc, #732]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004016:	f023 0207 	bic.w	r2, r3, #7
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004020:	49b3      	ldr	r1, [pc, #716]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004022:	4313      	orrs	r3, r2
 8004024:	658b      	str	r3, [r1, #88]	; 0x58
 8004026:	e001      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d04b      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800403e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004042:	d02e      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004044:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004048:	d828      	bhi.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800404a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800404e:	d02a      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004054:	d822      	bhi.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004056:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800405a:	d026      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800405c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004060:	d81c      	bhi.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004066:	d010      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800406c:	d816      	bhi.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d01d      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004076:	d111      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3304      	adds	r3, #4
 800407c:	2100      	movs	r1, #0
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fd24 	bl	8004acc <RCCEx_PLL2_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004088:	e012      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3324      	adds	r3, #36	; 0x24
 800408e:	2102      	movs	r1, #2
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fdcd 	bl	8004c30 <RCCEx_PLL3_Config>
 8004096:	4603      	mov	r3, r0
 8004098:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800409a:	e009      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	75fb      	strb	r3, [r7, #23]
      break;
 80040a0:	e006      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80040a2:	bf00      	nop
 80040a4:	e004      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80040a6:	bf00      	nop
 80040a8:	e002      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80040aa:	bf00      	nop
 80040ac:	e000      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80040ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10a      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040b6:	4b8e      	ldr	r3, [pc, #568]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040c4:	498a      	ldr	r1, [pc, #552]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	654b      	str	r3, [r1, #84]	; 0x54
 80040ca:	e001      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
 80040ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d04b      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040e6:	d02e      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80040e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040ec:	d828      	bhi.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80040ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f2:	d02a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80040f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f8:	d822      	bhi.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80040fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040fe:	d026      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004100:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004104:	d81c      	bhi.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800410a:	d010      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800410c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004110:	d816      	bhi.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01d      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411a:	d111      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3304      	adds	r3, #4
 8004120:	2100      	movs	r1, #0
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fcd2 	bl	8004acc <RCCEx_PLL2_Config>
 8004128:	4603      	mov	r3, r0
 800412a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800412c:	e012      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3324      	adds	r3, #36	; 0x24
 8004132:	2102      	movs	r1, #2
 8004134:	4618      	mov	r0, r3
 8004136:	f000 fd7b 	bl	8004c30 <RCCEx_PLL3_Config>
 800413a:	4603      	mov	r3, r0
 800413c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800413e:	e009      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	75fb      	strb	r3, [r7, #23]
      break;
 8004144:	e006      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004146:	bf00      	nop
 8004148:	e004      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800414a:	bf00      	nop
 800414c:	e002      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800414e:	bf00      	nop
 8004150:	e000      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10a      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800415a:	4b65      	ldr	r3, [pc, #404]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800415c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004168:	4961      	ldr	r1, [pc, #388]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800416a:	4313      	orrs	r3, r2
 800416c:	658b      	str	r3, [r1, #88]	; 0x58
 800416e:	e001      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004170:	7dfb      	ldrb	r3, [r7, #23]
 8004172:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417c:	2b00      	cmp	r3, #0
 800417e:	d04b      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004186:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800418a:	d02e      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800418c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004190:	d828      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004196:	d02a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419c:	d822      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800419e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041a2:	d026      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80041a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041a8:	d81c      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80041aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041ae:	d010      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80041b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041b4:	d816      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01d      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80041ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041be:	d111      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3304      	adds	r3, #4
 80041c4:	2100      	movs	r1, #0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fc80 	bl	8004acc <RCCEx_PLL2_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80041d0:	e012      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3324      	adds	r3, #36	; 0x24
 80041d6:	2102      	movs	r1, #2
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fd29 	bl	8004c30 <RCCEx_PLL3_Config>
 80041de:	4603      	mov	r3, r0
 80041e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80041e2:	e009      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	75fb      	strb	r3, [r7, #23]
      break;
 80041e8:	e006      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041ea:	bf00      	nop
 80041ec:	e004      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041ee:	bf00      	nop
 80041f0:	e002      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041f2:	bf00      	nop
 80041f4:	e000      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041f8:	7dfb      	ldrb	r3, [r7, #23]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10a      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041fe:	4b3c      	ldr	r3, [pc, #240]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004202:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800420c:	4938      	ldr	r1, [pc, #224]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800420e:	4313      	orrs	r3, r2
 8004210:	658b      	str	r3, [r1, #88]	; 0x58
 8004212:	e001      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004214:	7dfb      	ldrb	r3, [r7, #23]
 8004216:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d01a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800422a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422e:	d10a      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3324      	adds	r3, #36	; 0x24
 8004234:	2102      	movs	r1, #2
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fcfa 	bl	8004c30 <RCCEx_PLL3_Config>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004246:	4b2a      	ldr	r3, [pc, #168]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004254:	4926      	ldr	r1, [pc, #152]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004256:	4313      	orrs	r3, r2
 8004258:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b00      	cmp	r3, #0
 8004264:	d01a      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800426c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004270:	d10a      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3324      	adds	r3, #36	; 0x24
 8004276:	2102      	movs	r1, #2
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fcd9 	bl	8004c30 <RCCEx_PLL3_Config>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004288:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800428a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004296:	4916      	ldr	r1, [pc, #88]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004298:	4313      	orrs	r3, r2
 800429a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d036      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042b2:	d01f      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80042b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042b8:	d817      	bhi.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80042be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c2:	d009      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80042c4:	e011      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3304      	adds	r3, #4
 80042ca:	2100      	movs	r1, #0
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fbfd 	bl	8004acc <RCCEx_PLL2_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80042d6:	e00e      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3324      	adds	r3, #36	; 0x24
 80042dc:	2102      	movs	r1, #2
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fca6 	bl	8004c30 <RCCEx_PLL3_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80042e8:	e005      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	75fb      	strb	r3, [r7, #23]
      break;
 80042ee:	e002      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80042f0:	58024400 	.word	0x58024400
      break;
 80042f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f6:	7dfb      	ldrb	r3, [r7, #23]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10a      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042fc:	4b93      	ldr	r3, [pc, #588]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800430a:	4990      	ldr	r1, [pc, #576]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800430c:	4313      	orrs	r3, r2
 800430e:	658b      	str	r3, [r1, #88]	; 0x58
 8004310:	e001      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004312:	7dfb      	ldrb	r3, [r7, #23]
 8004314:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d033      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004328:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800432c:	d01c      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800432e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004332:	d816      	bhi.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004338:	d003      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800433a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800433e:	d007      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004340:	e00f      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004342:	4b82      	ldr	r3, [pc, #520]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	4a81      	ldr	r2, [pc, #516]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800434c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800434e:	e00c      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3324      	adds	r3, #36	; 0x24
 8004354:	2101      	movs	r1, #1
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fc6a 	bl	8004c30 <RCCEx_PLL3_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004360:	e003      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	75fb      	strb	r3, [r7, #23]
      break;
 8004366:	e000      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800436a:	7dfb      	ldrb	r3, [r7, #23]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10a      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004370:	4b76      	ldr	r3, [pc, #472]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004374:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800437e:	4973      	ldr	r1, [pc, #460]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004380:	4313      	orrs	r3, r2
 8004382:	654b      	str	r3, [r1, #84]	; 0x54
 8004384:	e001      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004386:	7dfb      	ldrb	r3, [r7, #23]
 8004388:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d029      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800439e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a2:	d007      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80043a4:	e00f      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043a6:	4b69      	ldr	r3, [pc, #420]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	4a68      	ldr	r2, [pc, #416]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80043b2:	e00b      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	2102      	movs	r1, #2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fb86 	bl	8004acc <RCCEx_PLL2_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80043c4:	e002      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	75fb      	strb	r3, [r7, #23]
      break;
 80043ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043cc:	7dfb      	ldrb	r3, [r7, #23]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043d2:	4b5e      	ldr	r3, [pc, #376]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043de:	495b      	ldr	r1, [pc, #364]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80043e4:	e001      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e6:	7dfb      	ldrb	r3, [r7, #23]
 80043e8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3324      	adds	r3, #36	; 0x24
 80043fa:	2102      	movs	r1, #2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fc17 	bl	8004c30 <RCCEx_PLL3_Config>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d030      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800441c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004420:	d017      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004426:	d811      	bhi.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800442c:	d013      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800442e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004432:	d80b      	bhi.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004434:	2b00      	cmp	r3, #0
 8004436:	d010      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443c:	d106      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800443e:	4b43      	ldr	r3, [pc, #268]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	4a42      	ldr	r2, [pc, #264]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004448:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800444a:	e007      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	75fb      	strb	r3, [r7, #23]
      break;
 8004450:	e004      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004452:	bf00      	nop
 8004454:	e002      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004456:	bf00      	nop
 8004458:	e000      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800445a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800445c:	7dfb      	ldrb	r3, [r7, #23]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d109      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004462:	4b3a      	ldr	r3, [pc, #232]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800446e:	4937      	ldr	r1, [pc, #220]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004470:	4313      	orrs	r3, r2
 8004472:	654b      	str	r3, [r1, #84]	; 0x54
 8004474:	e001      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004476:	7dfb      	ldrb	r3, [r7, #23]
 8004478:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d008      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004486:	4b31      	ldr	r3, [pc, #196]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	492e      	ldr	r1, [pc, #184]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004494:	4313      	orrs	r3, r2
 8004496:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d009      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80044a4:	4b29      	ldr	r3, [pc, #164]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80044b2:	4926      	ldr	r1, [pc, #152]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d008      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044c4:	4b21      	ldr	r3, [pc, #132]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044d0:	491e      	ldr	r1, [pc, #120]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00d      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044e2:	4b1a      	ldr	r3, [pc, #104]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	4a19      	ldr	r2, [pc, #100]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044ec:	6113      	str	r3, [r2, #16]
 80044ee:	4b17      	ldr	r3, [pc, #92]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80044f8:	4914      	ldr	r1, [pc, #80]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	da08      	bge.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004506:	4b11      	ldr	r3, [pc, #68]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004512:	490e      	ldr	r1, [pc, #56]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004514:	4313      	orrs	r3, r2
 8004516:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d009      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004524:	4b09      	ldr	r3, [pc, #36]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004528:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	4906      	ldr	r1, [pc, #24]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004534:	4313      	orrs	r3, r2
 8004536:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004538:	7dbb      	ldrb	r3, [r7, #22]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	e000      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	58024400 	.word	0x58024400

08004550 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004554:	f7ff f860 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8004558:	4602      	mov	r2, r0
 800455a:	4b06      	ldr	r3, [pc, #24]	; (8004574 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	4904      	ldr	r1, [pc, #16]	; (8004578 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004566:	5ccb      	ldrb	r3, [r1, r3]
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	58024400 	.word	0x58024400
 8004578:	080073cc 	.word	0x080073cc

0800457c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800457c:	b480      	push	{r7}
 800457e:	b089      	sub	sp, #36	; 0x24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004584:	4ba1      	ldr	r3, [pc, #644]	; (800480c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800458e:	4b9f      	ldr	r3, [pc, #636]	; (800480c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	0b1b      	lsrs	r3, r3, #12
 8004594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004598:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800459a:	4b9c      	ldr	r3, [pc, #624]	; (800480c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459e:	091b      	lsrs	r3, r3, #4
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80045a6:	4b99      	ldr	r3, [pc, #612]	; (800480c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045aa:	08db      	lsrs	r3, r3, #3
 80045ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	ee07 3a90 	vmov	s15, r3
 80045ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 8111 	beq.w	80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	f000 8083 	beq.w	80046d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	f200 80a1 	bhi.w	800471c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d056      	beq.n	8004694 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80045e6:	e099      	b.n	800471c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045e8:	4b88      	ldr	r3, [pc, #544]	; (800480c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d02d      	beq.n	8004650 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045f4:	4b85      	ldr	r3, [pc, #532]	; (800480c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	08db      	lsrs	r3, r3, #3
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	4a84      	ldr	r2, [pc, #528]	; (8004810 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
 8004604:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	ee07 3a90 	vmov	s15, r3
 800460c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461e:	4b7b      	ldr	r3, [pc, #492]	; (800480c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004632:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800464e:	e087      	b.n	8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004818 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800465e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004662:	4b6a      	ldr	r3, [pc, #424]	; (800480c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004672:	ed97 6a03 	vldr	s12, [r7, #12]
 8004676:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800467a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004692:	e065      	b.n	8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800481c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a6:	4b59      	ldr	r3, [pc, #356]	; (800480c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046d6:	e043      	b.n	8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004820 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80046e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ea:	4b48      	ldr	r3, [pc, #288]	; (800480c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80046fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800470a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800470e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004716:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800471a:	e021      	b.n	8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	ee07 3a90 	vmov	s15, r3
 8004722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004726:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800481c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800472a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800472e:	4b37      	ldr	r3, [pc, #220]	; (800480c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004742:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800474a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800474e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800475e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004760:	4b2a      	ldr	r3, [pc, #168]	; (800480c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	0a5b      	lsrs	r3, r3, #9
 8004766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800477a:	edd7 6a07 	vldr	s13, [r7, #28]
 800477e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004786:	ee17 2a90 	vmov	r2, s15
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800478e:	4b1f      	ldr	r3, [pc, #124]	; (800480c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004792:	0c1b      	lsrs	r3, r3, #16
 8004794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004798:	ee07 3a90 	vmov	s15, r3
 800479c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80047ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b4:	ee17 2a90 	vmov	r2, s15
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80047bc:	4b13      	ldr	r3, [pc, #76]	; (800480c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c0:	0e1b      	lsrs	r3, r3, #24
 80047c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e2:	ee17 2a90 	vmov	r2, s15
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047ea:	e008      	b.n	80047fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	609a      	str	r2, [r3, #8]
}
 80047fe:	bf00      	nop
 8004800:	3724      	adds	r7, #36	; 0x24
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	58024400 	.word	0x58024400
 8004810:	03d09000 	.word	0x03d09000
 8004814:	46000000 	.word	0x46000000
 8004818:	4c742400 	.word	0x4c742400
 800481c:	4a742400 	.word	0x4a742400
 8004820:	4bbebc20 	.word	0x4bbebc20

08004824 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004824:	b480      	push	{r7}
 8004826:	b089      	sub	sp, #36	; 0x24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800482c:	4ba1      	ldr	r3, [pc, #644]	; (8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004836:	4b9f      	ldr	r3, [pc, #636]	; (8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	0d1b      	lsrs	r3, r3, #20
 800483c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004840:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004842:	4b9c      	ldr	r3, [pc, #624]	; (8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004846:	0a1b      	lsrs	r3, r3, #8
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800484e:	4b99      	ldr	r3, [pc, #612]	; (8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004852:	08db      	lsrs	r3, r3, #3
 8004854:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	fb02 f303 	mul.w	r3, r2, r3
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8111 	beq.w	8004a94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	2b02      	cmp	r3, #2
 8004876:	f000 8083 	beq.w	8004980 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b02      	cmp	r3, #2
 800487e:	f200 80a1 	bhi.w	80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d056      	beq.n	800493c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800488e:	e099      	b.n	80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004890:	4b88      	ldr	r3, [pc, #544]	; (8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b00      	cmp	r3, #0
 800489a:	d02d      	beq.n	80048f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800489c:	4b85      	ldr	r3, [pc, #532]	; (8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	08db      	lsrs	r3, r3, #3
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	4a84      	ldr	r2, [pc, #528]	; (8004ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
 80048ac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	ee07 3a90 	vmov	s15, r3
 80048b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c6:	4b7b      	ldr	r3, [pc, #492]	; (8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048da:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004abc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80048f6:	e087      	b.n	8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004902:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800490a:	4b6a      	ldr	r3, [pc, #424]	; (8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800491a:	ed97 6a03 	vldr	s12, [r7, #12]
 800491e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004abc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800492a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800492e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004936:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800493a:	e065      	b.n	8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004946:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800494a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494e:	4b59      	ldr	r3, [pc, #356]	; (8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004962:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004abc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800496a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800497e:	e043      	b.n	8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800498e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004992:	4b48      	ldr	r3, [pc, #288]	; (8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004abc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049c2:	e021      	b.n	8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d6:	4b37      	ldr	r3, [pc, #220]	; (8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004abc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004a08:	4b2a      	ldr	r3, [pc, #168]	; (8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	0a5b      	lsrs	r3, r3, #9
 8004a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a22:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a2e:	ee17 2a90 	vmov	r2, s15
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004a36:	4b1f      	ldr	r3, [pc, #124]	; (8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	0c1b      	lsrs	r3, r3, #16
 8004a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a40:	ee07 3a90 	vmov	s15, r3
 8004a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a50:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a5c:	ee17 2a90 	vmov	r2, s15
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004a64:	4b13      	ldr	r3, [pc, #76]	; (8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	0e1b      	lsrs	r3, r3, #24
 8004a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a8a:	ee17 2a90 	vmov	r2, s15
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a92:	e008      	b.n	8004aa6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	609a      	str	r2, [r3, #8]
}
 8004aa6:	bf00      	nop
 8004aa8:	3724      	adds	r7, #36	; 0x24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	58024400 	.word	0x58024400
 8004ab8:	03d09000 	.word	0x03d09000
 8004abc:	46000000 	.word	0x46000000
 8004ac0:	4c742400 	.word	0x4c742400
 8004ac4:	4a742400 	.word	0x4a742400
 8004ac8:	4bbebc20 	.word	0x4bbebc20

08004acc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ada:	4b53      	ldr	r3, [pc, #332]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d101      	bne.n	8004aea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e099      	b.n	8004c1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004aea:	4b4f      	ldr	r3, [pc, #316]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a4e      	ldr	r2, [pc, #312]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004af0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004af4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af6:	f7fd fb11 	bl	800211c <HAL_GetTick>
 8004afa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004afc:	e008      	b.n	8004b10 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004afe:	f7fd fb0d 	bl	800211c <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e086      	b.n	8004c1e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b10:	4b45      	ldr	r3, [pc, #276]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1f0      	bne.n	8004afe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b1c:	4b42      	ldr	r3, [pc, #264]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	031b      	lsls	r3, r3, #12
 8004b2a:	493f      	ldr	r1, [pc, #252]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	628b      	str	r3, [r1, #40]	; 0x28
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	025b      	lsls	r3, r3, #9
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	041b      	lsls	r3, r3, #16
 8004b4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	061b      	lsls	r3, r3, #24
 8004b5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b60:	4931      	ldr	r1, [pc, #196]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b66:	4b30      	ldr	r3, [pc, #192]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	492d      	ldr	r1, [pc, #180]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b78:	4b2b      	ldr	r3, [pc, #172]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	f023 0220 	bic.w	r2, r3, #32
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	4928      	ldr	r1, [pc, #160]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b8a:	4b27      	ldr	r3, [pc, #156]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	4a26      	ldr	r2, [pc, #152]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004b90:	f023 0310 	bic.w	r3, r3, #16
 8004b94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b96:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004b98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b9a:	4b24      	ldr	r3, [pc, #144]	; (8004c2c <RCCEx_PLL2_Config+0x160>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	69d2      	ldr	r2, [r2, #28]
 8004ba2:	00d2      	lsls	r2, r2, #3
 8004ba4:	4920      	ldr	r1, [pc, #128]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004baa:	4b1f      	ldr	r3, [pc, #124]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	4a1e      	ldr	r2, [pc, #120]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004bb0:	f043 0310 	orr.w	r3, r3, #16
 8004bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d106      	bne.n	8004bca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004bc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bc8:	e00f      	b.n	8004bea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d106      	bne.n	8004bde <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004bd0:	4b15      	ldr	r3, [pc, #84]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	4a14      	ldr	r2, [pc, #80]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bdc:	e005      	b.n	8004bea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004bde:	4b12      	ldr	r3, [pc, #72]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	4a11      	ldr	r2, [pc, #68]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004be4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004be8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004bea:	4b0f      	ldr	r3, [pc, #60]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a0e      	ldr	r2, [pc, #56]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004bf0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf6:	f7fd fa91 	bl	800211c <HAL_GetTick>
 8004bfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bfc:	e008      	b.n	8004c10 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004bfe:	f7fd fa8d 	bl	800211c <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e006      	b.n	8004c1e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c10:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <RCCEx_PLL2_Config+0x15c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0f0      	beq.n	8004bfe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	58024400 	.word	0x58024400
 8004c2c:	ffff0007 	.word	0xffff0007

08004c30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c3e:	4b53      	ldr	r3, [pc, #332]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d101      	bne.n	8004c4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e099      	b.n	8004d82 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c4e:	4b4f      	ldr	r3, [pc, #316]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a4e      	ldr	r2, [pc, #312]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5a:	f7fd fa5f 	bl	800211c <HAL_GetTick>
 8004c5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c60:	e008      	b.n	8004c74 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c62:	f7fd fa5b 	bl	800211c <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e086      	b.n	8004d82 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c74:	4b45      	ldr	r3, [pc, #276]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1f0      	bne.n	8004c62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c80:	4b42      	ldr	r3, [pc, #264]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c84:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	051b      	lsls	r3, r3, #20
 8004c8e:	493f      	ldr	r1, [pc, #252]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	628b      	str	r3, [r1, #40]	; 0x28
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	025b      	lsls	r3, r3, #9
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	041b      	lsls	r3, r3, #16
 8004cb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	061b      	lsls	r3, r3, #24
 8004cc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004cc4:	4931      	ldr	r1, [pc, #196]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004cca:	4b30      	ldr	r3, [pc, #192]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	492d      	ldr	r1, [pc, #180]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004cdc:	4b2b      	ldr	r3, [pc, #172]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	4928      	ldr	r1, [pc, #160]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004cee:	4b27      	ldr	r3, [pc, #156]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	4a26      	ldr	r2, [pc, #152]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004cfa:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cfe:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <RCCEx_PLL3_Config+0x160>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	69d2      	ldr	r2, [r2, #28]
 8004d06:	00d2      	lsls	r2, r2, #3
 8004d08:	4920      	ldr	r1, [pc, #128]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d0e:	4b1f      	ldr	r3, [pc, #124]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	4a1e      	ldr	r2, [pc, #120]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d106      	bne.n	8004d2e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d20:	4b1a      	ldr	r3, [pc, #104]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	4a19      	ldr	r2, [pc, #100]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004d26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d2c:	e00f      	b.n	8004d4e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d106      	bne.n	8004d42 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d34:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	4a14      	ldr	r2, [pc, #80]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004d3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d40:	e005      	b.n	8004d4e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d42:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	4a11      	ldr	r2, [pc, #68]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004d48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d4e:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a0e      	ldr	r2, [pc, #56]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d5a:	f7fd f9df 	bl	800211c <HAL_GetTick>
 8004d5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d60:	e008      	b.n	8004d74 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d62:	f7fd f9db 	bl	800211c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e006      	b.n	8004d82 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d74:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <RCCEx_PLL3_Config+0x15c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f0      	beq.n	8004d62 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	58024400 	.word	0x58024400
 8004d90:	ffff0007 	.word	0xffff0007

08004d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e049      	b.n	8004e3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fc feaa 	bl	8001b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	f000 fbb0 	bl	8005538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b082      	sub	sp, #8
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e049      	b.n	8004ee8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d106      	bne.n	8004e6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f841 	bl	8004ef0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2202      	movs	r2, #2
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4610      	mov	r0, r2
 8004e82:	f000 fb59 	bl	8005538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d109      	bne.n	8004f28 <HAL_TIM_PWM_Start+0x24>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	bf14      	ite	ne
 8004f20:	2301      	movne	r3, #1
 8004f22:	2300      	moveq	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	e03c      	b.n	8004fa2 <HAL_TIM_PWM_Start+0x9e>
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d109      	bne.n	8004f42 <HAL_TIM_PWM_Start+0x3e>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	bf14      	ite	ne
 8004f3a:	2301      	movne	r3, #1
 8004f3c:	2300      	moveq	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	e02f      	b.n	8004fa2 <HAL_TIM_PWM_Start+0x9e>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d109      	bne.n	8004f5c <HAL_TIM_PWM_Start+0x58>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	bf14      	ite	ne
 8004f54:	2301      	movne	r3, #1
 8004f56:	2300      	moveq	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	e022      	b.n	8004fa2 <HAL_TIM_PWM_Start+0x9e>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b0c      	cmp	r3, #12
 8004f60:	d109      	bne.n	8004f76 <HAL_TIM_PWM_Start+0x72>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	bf14      	ite	ne
 8004f6e:	2301      	movne	r3, #1
 8004f70:	2300      	moveq	r3, #0
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	e015      	b.n	8004fa2 <HAL_TIM_PWM_Start+0x9e>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d109      	bne.n	8004f90 <HAL_TIM_PWM_Start+0x8c>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	bf14      	ite	ne
 8004f88:	2301      	movne	r3, #1
 8004f8a:	2300      	moveq	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	e008      	b.n	8004fa2 <HAL_TIM_PWM_Start+0x9e>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	bf14      	ite	ne
 8004f9c:	2301      	movne	r3, #1
 8004f9e:	2300      	moveq	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e0a1      	b.n	80050ee <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d104      	bne.n	8004fba <HAL_TIM_PWM_Start+0xb6>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fb8:	e023      	b.n	8005002 <HAL_TIM_PWM_Start+0xfe>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d104      	bne.n	8004fca <HAL_TIM_PWM_Start+0xc6>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fc8:	e01b      	b.n	8005002 <HAL_TIM_PWM_Start+0xfe>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d104      	bne.n	8004fda <HAL_TIM_PWM_Start+0xd6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fd8:	e013      	b.n	8005002 <HAL_TIM_PWM_Start+0xfe>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b0c      	cmp	r3, #12
 8004fde:	d104      	bne.n	8004fea <HAL_TIM_PWM_Start+0xe6>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fe8:	e00b      	b.n	8005002 <HAL_TIM_PWM_Start+0xfe>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b10      	cmp	r3, #16
 8004fee:	d104      	bne.n	8004ffa <HAL_TIM_PWM_Start+0xf6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ff8:	e003      	b.n	8005002 <HAL_TIM_PWM_Start+0xfe>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2201      	movs	r2, #1
 8005008:	6839      	ldr	r1, [r7, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fea2 	bl	8005d54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a38      	ldr	r2, [pc, #224]	; (80050f8 <HAL_TIM_PWM_Start+0x1f4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d013      	beq.n	8005042 <HAL_TIM_PWM_Start+0x13e>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a37      	ldr	r2, [pc, #220]	; (80050fc <HAL_TIM_PWM_Start+0x1f8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00e      	beq.n	8005042 <HAL_TIM_PWM_Start+0x13e>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a35      	ldr	r2, [pc, #212]	; (8005100 <HAL_TIM_PWM_Start+0x1fc>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d009      	beq.n	8005042 <HAL_TIM_PWM_Start+0x13e>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a34      	ldr	r2, [pc, #208]	; (8005104 <HAL_TIM_PWM_Start+0x200>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d004      	beq.n	8005042 <HAL_TIM_PWM_Start+0x13e>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a32      	ldr	r2, [pc, #200]	; (8005108 <HAL_TIM_PWM_Start+0x204>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d101      	bne.n	8005046 <HAL_TIM_PWM_Start+0x142>
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <HAL_TIM_PWM_Start+0x144>
 8005046:	2300      	movs	r3, #0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d007      	beq.n	800505c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800505a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a25      	ldr	r2, [pc, #148]	; (80050f8 <HAL_TIM_PWM_Start+0x1f4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d022      	beq.n	80050ac <HAL_TIM_PWM_Start+0x1a8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506e:	d01d      	beq.n	80050ac <HAL_TIM_PWM_Start+0x1a8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a25      	ldr	r2, [pc, #148]	; (800510c <HAL_TIM_PWM_Start+0x208>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d018      	beq.n	80050ac <HAL_TIM_PWM_Start+0x1a8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a24      	ldr	r2, [pc, #144]	; (8005110 <HAL_TIM_PWM_Start+0x20c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d013      	beq.n	80050ac <HAL_TIM_PWM_Start+0x1a8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a22      	ldr	r2, [pc, #136]	; (8005114 <HAL_TIM_PWM_Start+0x210>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00e      	beq.n	80050ac <HAL_TIM_PWM_Start+0x1a8>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1a      	ldr	r2, [pc, #104]	; (80050fc <HAL_TIM_PWM_Start+0x1f8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d009      	beq.n	80050ac <HAL_TIM_PWM_Start+0x1a8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <HAL_TIM_PWM_Start+0x214>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d004      	beq.n	80050ac <HAL_TIM_PWM_Start+0x1a8>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a16      	ldr	r2, [pc, #88]	; (8005100 <HAL_TIM_PWM_Start+0x1fc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d115      	bne.n	80050d8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	4b1a      	ldr	r3, [pc, #104]	; (800511c <HAL_TIM_PWM_Start+0x218>)
 80050b4:	4013      	ands	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b06      	cmp	r3, #6
 80050bc:	d015      	beq.n	80050ea <HAL_TIM_PWM_Start+0x1e6>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c4:	d011      	beq.n	80050ea <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0201 	orr.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d6:	e008      	b.n	80050ea <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	e000      	b.n	80050ec <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40010000 	.word	0x40010000
 80050fc:	40010400 	.word	0x40010400
 8005100:	40014000 	.word	0x40014000
 8005104:	40014400 	.word	0x40014400
 8005108:	40014800 	.word	0x40014800
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40001800 	.word	0x40001800
 800511c:	00010007 	.word	0x00010007

08005120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800513a:	2302      	movs	r3, #2
 800513c:	e0ff      	b.n	800533e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b14      	cmp	r3, #20
 800514a:	f200 80f0 	bhi.w	800532e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800514e:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005154:	080051a9 	.word	0x080051a9
 8005158:	0800532f 	.word	0x0800532f
 800515c:	0800532f 	.word	0x0800532f
 8005160:	0800532f 	.word	0x0800532f
 8005164:	080051e9 	.word	0x080051e9
 8005168:	0800532f 	.word	0x0800532f
 800516c:	0800532f 	.word	0x0800532f
 8005170:	0800532f 	.word	0x0800532f
 8005174:	0800522b 	.word	0x0800522b
 8005178:	0800532f 	.word	0x0800532f
 800517c:	0800532f 	.word	0x0800532f
 8005180:	0800532f 	.word	0x0800532f
 8005184:	0800526b 	.word	0x0800526b
 8005188:	0800532f 	.word	0x0800532f
 800518c:	0800532f 	.word	0x0800532f
 8005190:	0800532f 	.word	0x0800532f
 8005194:	080052ad 	.word	0x080052ad
 8005198:	0800532f 	.word	0x0800532f
 800519c:	0800532f 	.word	0x0800532f
 80051a0:	0800532f 	.word	0x0800532f
 80051a4:	080052ed 	.word	0x080052ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fa5c 	bl	800566c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0208 	orr.w	r2, r2, #8
 80051c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0204 	bic.w	r2, r2, #4
 80051d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6999      	ldr	r1, [r3, #24]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	619a      	str	r2, [r3, #24]
      break;
 80051e6:	e0a5      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 facc 	bl	800578c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6999      	ldr	r1, [r3, #24]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	021a      	lsls	r2, r3, #8
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	619a      	str	r2, [r3, #24]
      break;
 8005228:	e084      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fb35 	bl	80058a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69da      	ldr	r2, [r3, #28]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0208 	orr.w	r2, r2, #8
 8005244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0204 	bic.w	r2, r2, #4
 8005254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69d9      	ldr	r1, [r3, #28]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	61da      	str	r2, [r3, #28]
      break;
 8005268:	e064      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	4618      	mov	r0, r3
 8005272:	f000 fb9d 	bl	80059b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69d9      	ldr	r1, [r3, #28]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	021a      	lsls	r2, r3, #8
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	61da      	str	r2, [r3, #28]
      break;
 80052aa:	e043      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fbe6 	bl	8005a84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0208 	orr.w	r2, r2, #8
 80052c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0204 	bic.w	r2, r2, #4
 80052d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052ea:	e023      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fc2a 	bl	8005b4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005306:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005316:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	021a      	lsls	r2, r3, #8
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800532c:	e002      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	75fb      	strb	r3, [r7, #23]
      break;
 8005332:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800533c:	7dfb      	ldrb	r3, [r7, #23]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop

08005348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_TIM_ConfigClockSource+0x1c>
 8005360:	2302      	movs	r3, #2
 8005362:	e0dc      	b.n	800551e <HAL_TIM_ConfigClockSource+0x1d6>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	4b6a      	ldr	r3, [pc, #424]	; (8005528 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005380:	4013      	ands	r3, r2
 8005382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800538a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a64      	ldr	r2, [pc, #400]	; (800552c <HAL_TIM_ConfigClockSource+0x1e4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	f000 80a9 	beq.w	80054f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80053a0:	4a62      	ldr	r2, [pc, #392]	; (800552c <HAL_TIM_ConfigClockSource+0x1e4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	f200 80ae 	bhi.w	8005504 <HAL_TIM_ConfigClockSource+0x1bc>
 80053a8:	4a61      	ldr	r2, [pc, #388]	; (8005530 <HAL_TIM_ConfigClockSource+0x1e8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	f000 80a1 	beq.w	80054f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80053b0:	4a5f      	ldr	r2, [pc, #380]	; (8005530 <HAL_TIM_ConfigClockSource+0x1e8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	f200 80a6 	bhi.w	8005504 <HAL_TIM_ConfigClockSource+0x1bc>
 80053b8:	4a5e      	ldr	r2, [pc, #376]	; (8005534 <HAL_TIM_ConfigClockSource+0x1ec>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	f000 8099 	beq.w	80054f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80053c0:	4a5c      	ldr	r2, [pc, #368]	; (8005534 <HAL_TIM_ConfigClockSource+0x1ec>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	f200 809e 	bhi.w	8005504 <HAL_TIM_ConfigClockSource+0x1bc>
 80053c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80053cc:	f000 8091 	beq.w	80054f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80053d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80053d4:	f200 8096 	bhi.w	8005504 <HAL_TIM_ConfigClockSource+0x1bc>
 80053d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053dc:	f000 8089 	beq.w	80054f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80053e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053e4:	f200 808e 	bhi.w	8005504 <HAL_TIM_ConfigClockSource+0x1bc>
 80053e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ec:	d03e      	beq.n	800546c <HAL_TIM_ConfigClockSource+0x124>
 80053ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053f2:	f200 8087 	bhi.w	8005504 <HAL_TIM_ConfigClockSource+0x1bc>
 80053f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fa:	f000 8086 	beq.w	800550a <HAL_TIM_ConfigClockSource+0x1c2>
 80053fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005402:	d87f      	bhi.n	8005504 <HAL_TIM_ConfigClockSource+0x1bc>
 8005404:	2b70      	cmp	r3, #112	; 0x70
 8005406:	d01a      	beq.n	800543e <HAL_TIM_ConfigClockSource+0xf6>
 8005408:	2b70      	cmp	r3, #112	; 0x70
 800540a:	d87b      	bhi.n	8005504 <HAL_TIM_ConfigClockSource+0x1bc>
 800540c:	2b60      	cmp	r3, #96	; 0x60
 800540e:	d050      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x16a>
 8005410:	2b60      	cmp	r3, #96	; 0x60
 8005412:	d877      	bhi.n	8005504 <HAL_TIM_ConfigClockSource+0x1bc>
 8005414:	2b50      	cmp	r3, #80	; 0x50
 8005416:	d03c      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0x14a>
 8005418:	2b50      	cmp	r3, #80	; 0x50
 800541a:	d873      	bhi.n	8005504 <HAL_TIM_ConfigClockSource+0x1bc>
 800541c:	2b40      	cmp	r3, #64	; 0x40
 800541e:	d058      	beq.n	80054d2 <HAL_TIM_ConfigClockSource+0x18a>
 8005420:	2b40      	cmp	r3, #64	; 0x40
 8005422:	d86f      	bhi.n	8005504 <HAL_TIM_ConfigClockSource+0x1bc>
 8005424:	2b30      	cmp	r3, #48	; 0x30
 8005426:	d064      	beq.n	80054f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005428:	2b30      	cmp	r3, #48	; 0x30
 800542a:	d86b      	bhi.n	8005504 <HAL_TIM_ConfigClockSource+0x1bc>
 800542c:	2b20      	cmp	r3, #32
 800542e:	d060      	beq.n	80054f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005430:	2b20      	cmp	r3, #32
 8005432:	d867      	bhi.n	8005504 <HAL_TIM_ConfigClockSource+0x1bc>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d05c      	beq.n	80054f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005438:	2b10      	cmp	r3, #16
 800543a:	d05a      	beq.n	80054f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800543c:	e062      	b.n	8005504 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6899      	ldr	r1, [r3, #8]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f000 fc61 	bl	8005d14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005460:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	609a      	str	r2, [r3, #8]
      break;
 800546a:	e04f      	b.n	800550c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6818      	ldr	r0, [r3, #0]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	6899      	ldr	r1, [r3, #8]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f000 fc4a 	bl	8005d14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800548e:	609a      	str	r2, [r3, #8]
      break;
 8005490:	e03c      	b.n	800550c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6859      	ldr	r1, [r3, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	461a      	mov	r2, r3
 80054a0:	f000 fbba 	bl	8005c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2150      	movs	r1, #80	; 0x50
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fc14 	bl	8005cd8 <TIM_ITRx_SetConfig>
      break;
 80054b0:	e02c      	b.n	800550c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6818      	ldr	r0, [r3, #0]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	6859      	ldr	r1, [r3, #4]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	461a      	mov	r2, r3
 80054c0:	f000 fbd9 	bl	8005c76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2160      	movs	r1, #96	; 0x60
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fc04 	bl	8005cd8 <TIM_ITRx_SetConfig>
      break;
 80054d0:	e01c      	b.n	800550c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6818      	ldr	r0, [r3, #0]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	6859      	ldr	r1, [r3, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	461a      	mov	r2, r3
 80054e0:	f000 fb9a 	bl	8005c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2140      	movs	r1, #64	; 0x40
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fbf4 	bl	8005cd8 <TIM_ITRx_SetConfig>
      break;
 80054f0:	e00c      	b.n	800550c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4619      	mov	r1, r3
 80054fc:	4610      	mov	r0, r2
 80054fe:	f000 fbeb 	bl	8005cd8 <TIM_ITRx_SetConfig>
      break;
 8005502:	e003      	b.n	800550c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	73fb      	strb	r3, [r7, #15]
      break;
 8005508:	e000      	b.n	800550c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800550a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800551c:	7bfb      	ldrb	r3, [r7, #15]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	ffceff88 	.word	0xffceff88
 800552c:	00100040 	.word	0x00100040
 8005530:	00100030 	.word	0x00100030
 8005534:	00100020 	.word	0x00100020

08005538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a40      	ldr	r2, [pc, #256]	; (800564c <TIM_Base_SetConfig+0x114>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d013      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005556:	d00f      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a3d      	ldr	r2, [pc, #244]	; (8005650 <TIM_Base_SetConfig+0x118>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00b      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a3c      	ldr	r2, [pc, #240]	; (8005654 <TIM_Base_SetConfig+0x11c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d007      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a3b      	ldr	r2, [pc, #236]	; (8005658 <TIM_Base_SetConfig+0x120>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d003      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a3a      	ldr	r2, [pc, #232]	; (800565c <TIM_Base_SetConfig+0x124>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d108      	bne.n	800558a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a2f      	ldr	r2, [pc, #188]	; (800564c <TIM_Base_SetConfig+0x114>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d01f      	beq.n	80055d2 <TIM_Base_SetConfig+0x9a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005598:	d01b      	beq.n	80055d2 <TIM_Base_SetConfig+0x9a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a2c      	ldr	r2, [pc, #176]	; (8005650 <TIM_Base_SetConfig+0x118>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d017      	beq.n	80055d2 <TIM_Base_SetConfig+0x9a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a2b      	ldr	r2, [pc, #172]	; (8005654 <TIM_Base_SetConfig+0x11c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <TIM_Base_SetConfig+0x9a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a2a      	ldr	r2, [pc, #168]	; (8005658 <TIM_Base_SetConfig+0x120>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00f      	beq.n	80055d2 <TIM_Base_SetConfig+0x9a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a29      	ldr	r2, [pc, #164]	; (800565c <TIM_Base_SetConfig+0x124>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00b      	beq.n	80055d2 <TIM_Base_SetConfig+0x9a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a28      	ldr	r2, [pc, #160]	; (8005660 <TIM_Base_SetConfig+0x128>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d007      	beq.n	80055d2 <TIM_Base_SetConfig+0x9a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a27      	ldr	r2, [pc, #156]	; (8005664 <TIM_Base_SetConfig+0x12c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_Base_SetConfig+0x9a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a26      	ldr	r2, [pc, #152]	; (8005668 <TIM_Base_SetConfig+0x130>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d108      	bne.n	80055e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a10      	ldr	r2, [pc, #64]	; (800564c <TIM_Base_SetConfig+0x114>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00f      	beq.n	8005630 <TIM_Base_SetConfig+0xf8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a12      	ldr	r2, [pc, #72]	; (800565c <TIM_Base_SetConfig+0x124>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00b      	beq.n	8005630 <TIM_Base_SetConfig+0xf8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a11      	ldr	r2, [pc, #68]	; (8005660 <TIM_Base_SetConfig+0x128>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d007      	beq.n	8005630 <TIM_Base_SetConfig+0xf8>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a10      	ldr	r2, [pc, #64]	; (8005664 <TIM_Base_SetConfig+0x12c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d003      	beq.n	8005630 <TIM_Base_SetConfig+0xf8>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a0f      	ldr	r2, [pc, #60]	; (8005668 <TIM_Base_SetConfig+0x130>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d103      	bne.n	8005638 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	615a      	str	r2, [r3, #20]
}
 800563e:	bf00      	nop
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40010000 	.word	0x40010000
 8005650:	40000400 	.word	0x40000400
 8005654:	40000800 	.word	0x40000800
 8005658:	40000c00 	.word	0x40000c00
 800565c:	40010400 	.word	0x40010400
 8005660:	40014000 	.word	0x40014000
 8005664:	40014400 	.word	0x40014400
 8005668:	40014800 	.word	0x40014800

0800566c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f023 0201 	bic.w	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4b37      	ldr	r3, [pc, #220]	; (8005774 <TIM_OC1_SetConfig+0x108>)
 8005698:	4013      	ands	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0303 	bic.w	r3, r3, #3
 80056a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f023 0302 	bic.w	r3, r3, #2
 80056b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a2d      	ldr	r2, [pc, #180]	; (8005778 <TIM_OC1_SetConfig+0x10c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00f      	beq.n	80056e8 <TIM_OC1_SetConfig+0x7c>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a2c      	ldr	r2, [pc, #176]	; (800577c <TIM_OC1_SetConfig+0x110>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00b      	beq.n	80056e8 <TIM_OC1_SetConfig+0x7c>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a2b      	ldr	r2, [pc, #172]	; (8005780 <TIM_OC1_SetConfig+0x114>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d007      	beq.n	80056e8 <TIM_OC1_SetConfig+0x7c>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a2a      	ldr	r2, [pc, #168]	; (8005784 <TIM_OC1_SetConfig+0x118>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d003      	beq.n	80056e8 <TIM_OC1_SetConfig+0x7c>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a29      	ldr	r2, [pc, #164]	; (8005788 <TIM_OC1_SetConfig+0x11c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d10c      	bne.n	8005702 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f023 0308 	bic.w	r3, r3, #8
 80056ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f023 0304 	bic.w	r3, r3, #4
 8005700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a1c      	ldr	r2, [pc, #112]	; (8005778 <TIM_OC1_SetConfig+0x10c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00f      	beq.n	800572a <TIM_OC1_SetConfig+0xbe>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a1b      	ldr	r2, [pc, #108]	; (800577c <TIM_OC1_SetConfig+0x110>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00b      	beq.n	800572a <TIM_OC1_SetConfig+0xbe>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a1a      	ldr	r2, [pc, #104]	; (8005780 <TIM_OC1_SetConfig+0x114>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d007      	beq.n	800572a <TIM_OC1_SetConfig+0xbe>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a19      	ldr	r2, [pc, #100]	; (8005784 <TIM_OC1_SetConfig+0x118>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d003      	beq.n	800572a <TIM_OC1_SetConfig+0xbe>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a18      	ldr	r2, [pc, #96]	; (8005788 <TIM_OC1_SetConfig+0x11c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d111      	bne.n	800574e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	621a      	str	r2, [r3, #32]
}
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	fffeff8f 	.word	0xfffeff8f
 8005778:	40010000 	.word	0x40010000
 800577c:	40010400 	.word	0x40010400
 8005780:	40014000 	.word	0x40014000
 8005784:	40014400 	.word	0x40014400
 8005788:	40014800 	.word	0x40014800

0800578c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	f023 0210 	bic.w	r2, r3, #16
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4b34      	ldr	r3, [pc, #208]	; (8005888 <TIM_OC2_SetConfig+0xfc>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	021b      	lsls	r3, r3, #8
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f023 0320 	bic.w	r3, r3, #32
 80057d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a29      	ldr	r2, [pc, #164]	; (800588c <TIM_OC2_SetConfig+0x100>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_OC2_SetConfig+0x68>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a28      	ldr	r2, [pc, #160]	; (8005890 <TIM_OC2_SetConfig+0x104>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d10d      	bne.n	8005810 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800580e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a1e      	ldr	r2, [pc, #120]	; (800588c <TIM_OC2_SetConfig+0x100>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00f      	beq.n	8005838 <TIM_OC2_SetConfig+0xac>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <TIM_OC2_SetConfig+0x104>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00b      	beq.n	8005838 <TIM_OC2_SetConfig+0xac>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a1c      	ldr	r2, [pc, #112]	; (8005894 <TIM_OC2_SetConfig+0x108>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d007      	beq.n	8005838 <TIM_OC2_SetConfig+0xac>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a1b      	ldr	r2, [pc, #108]	; (8005898 <TIM_OC2_SetConfig+0x10c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d003      	beq.n	8005838 <TIM_OC2_SetConfig+0xac>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a1a      	ldr	r2, [pc, #104]	; (800589c <TIM_OC2_SetConfig+0x110>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d113      	bne.n	8005860 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800583e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	621a      	str	r2, [r3, #32]
}
 800587a:	bf00      	nop
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	feff8fff 	.word	0xfeff8fff
 800588c:	40010000 	.word	0x40010000
 8005890:	40010400 	.word	0x40010400
 8005894:	40014000 	.word	0x40014000
 8005898:	40014400 	.word	0x40014400
 800589c:	40014800 	.word	0x40014800

080058a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4b33      	ldr	r3, [pc, #204]	; (8005998 <TIM_OC3_SetConfig+0xf8>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0303 	bic.w	r3, r3, #3
 80058d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a28      	ldr	r2, [pc, #160]	; (800599c <TIM_OC3_SetConfig+0xfc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_OC3_SetConfig+0x66>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a27      	ldr	r2, [pc, #156]	; (80059a0 <TIM_OC3_SetConfig+0x100>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d10d      	bne.n	8005922 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800590c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a1d      	ldr	r2, [pc, #116]	; (800599c <TIM_OC3_SetConfig+0xfc>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00f      	beq.n	800594a <TIM_OC3_SetConfig+0xaa>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a1c      	ldr	r2, [pc, #112]	; (80059a0 <TIM_OC3_SetConfig+0x100>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00b      	beq.n	800594a <TIM_OC3_SetConfig+0xaa>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1b      	ldr	r2, [pc, #108]	; (80059a4 <TIM_OC3_SetConfig+0x104>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d007      	beq.n	800594a <TIM_OC3_SetConfig+0xaa>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a1a      	ldr	r2, [pc, #104]	; (80059a8 <TIM_OC3_SetConfig+0x108>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d003      	beq.n	800594a <TIM_OC3_SetConfig+0xaa>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a19      	ldr	r2, [pc, #100]	; (80059ac <TIM_OC3_SetConfig+0x10c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d113      	bne.n	8005972 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	621a      	str	r2, [r3, #32]
}
 800598c:	bf00      	nop
 800598e:	371c      	adds	r7, #28
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	fffeff8f 	.word	0xfffeff8f
 800599c:	40010000 	.word	0x40010000
 80059a0:	40010400 	.word	0x40010400
 80059a4:	40014000 	.word	0x40014000
 80059a8:	40014400 	.word	0x40014400
 80059ac:	40014800 	.word	0x40014800

080059b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4b24      	ldr	r3, [pc, #144]	; (8005a6c <TIM_OC4_SetConfig+0xbc>)
 80059dc:	4013      	ands	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	021b      	lsls	r3, r3, #8
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	031b      	lsls	r3, r3, #12
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a19      	ldr	r2, [pc, #100]	; (8005a70 <TIM_OC4_SetConfig+0xc0>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00f      	beq.n	8005a30 <TIM_OC4_SetConfig+0x80>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a18      	ldr	r2, [pc, #96]	; (8005a74 <TIM_OC4_SetConfig+0xc4>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00b      	beq.n	8005a30 <TIM_OC4_SetConfig+0x80>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a17      	ldr	r2, [pc, #92]	; (8005a78 <TIM_OC4_SetConfig+0xc8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d007      	beq.n	8005a30 <TIM_OC4_SetConfig+0x80>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a16      	ldr	r2, [pc, #88]	; (8005a7c <TIM_OC4_SetConfig+0xcc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_OC4_SetConfig+0x80>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a15      	ldr	r2, [pc, #84]	; (8005a80 <TIM_OC4_SetConfig+0xd0>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d109      	bne.n	8005a44 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	019b      	lsls	r3, r3, #6
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	feff8fff 	.word	0xfeff8fff
 8005a70:	40010000 	.word	0x40010000
 8005a74:	40010400 	.word	0x40010400
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	40014400 	.word	0x40014400
 8005a80:	40014800 	.word	0x40014800

08005a84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4b21      	ldr	r3, [pc, #132]	; (8005b34 <TIM_OC5_SetConfig+0xb0>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ac4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	041b      	lsls	r3, r3, #16
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a18      	ldr	r2, [pc, #96]	; (8005b38 <TIM_OC5_SetConfig+0xb4>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00f      	beq.n	8005afa <TIM_OC5_SetConfig+0x76>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a17      	ldr	r2, [pc, #92]	; (8005b3c <TIM_OC5_SetConfig+0xb8>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d00b      	beq.n	8005afa <TIM_OC5_SetConfig+0x76>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a16      	ldr	r2, [pc, #88]	; (8005b40 <TIM_OC5_SetConfig+0xbc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d007      	beq.n	8005afa <TIM_OC5_SetConfig+0x76>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a15      	ldr	r2, [pc, #84]	; (8005b44 <TIM_OC5_SetConfig+0xc0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d003      	beq.n	8005afa <TIM_OC5_SetConfig+0x76>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a14      	ldr	r2, [pc, #80]	; (8005b48 <TIM_OC5_SetConfig+0xc4>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d109      	bne.n	8005b0e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	621a      	str	r2, [r3, #32]
}
 8005b28:	bf00      	nop
 8005b2a:	371c      	adds	r7, #28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	fffeff8f 	.word	0xfffeff8f
 8005b38:	40010000 	.word	0x40010000
 8005b3c:	40010400 	.word	0x40010400
 8005b40:	40014000 	.word	0x40014000
 8005b44:	40014400 	.word	0x40014400
 8005b48:	40014800 	.word	0x40014800

08005b4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4b22      	ldr	r3, [pc, #136]	; (8005c00 <TIM_OC6_SetConfig+0xb4>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	021b      	lsls	r3, r3, #8
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	051b      	lsls	r3, r3, #20
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a19      	ldr	r2, [pc, #100]	; (8005c04 <TIM_OC6_SetConfig+0xb8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00f      	beq.n	8005bc4 <TIM_OC6_SetConfig+0x78>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a18      	ldr	r2, [pc, #96]	; (8005c08 <TIM_OC6_SetConfig+0xbc>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00b      	beq.n	8005bc4 <TIM_OC6_SetConfig+0x78>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a17      	ldr	r2, [pc, #92]	; (8005c0c <TIM_OC6_SetConfig+0xc0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d007      	beq.n	8005bc4 <TIM_OC6_SetConfig+0x78>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a16      	ldr	r2, [pc, #88]	; (8005c10 <TIM_OC6_SetConfig+0xc4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d003      	beq.n	8005bc4 <TIM_OC6_SetConfig+0x78>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a15      	ldr	r2, [pc, #84]	; (8005c14 <TIM_OC6_SetConfig+0xc8>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d109      	bne.n	8005bd8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	029b      	lsls	r3, r3, #10
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	621a      	str	r2, [r3, #32]
}
 8005bf2:	bf00      	nop
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	feff8fff 	.word	0xfeff8fff
 8005c04:	40010000 	.word	0x40010000
 8005c08:	40010400 	.word	0x40010400
 8005c0c:	40014000 	.word	0x40014000
 8005c10:	40014400 	.word	0x40014400
 8005c14:	40014800 	.word	0x40014800

08005c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	f023 0201 	bic.w	r2, r3, #1
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f023 030a 	bic.w	r3, r3, #10
 8005c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	621a      	str	r2, [r3, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b087      	sub	sp, #28
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	60f8      	str	r0, [r7, #12]
 8005c7e:	60b9      	str	r1, [r7, #8]
 8005c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	f023 0210 	bic.w	r2, r3, #16
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	031b      	lsls	r3, r3, #12
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	621a      	str	r2, [r3, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <TIM_ITRx_SetConfig+0x38>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f043 0307 	orr.w	r3, r3, #7
 8005cfa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	609a      	str	r2, [r3, #8]
}
 8005d02:	bf00      	nop
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	ffcfff8f 	.word	0xffcfff8f

08005d14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	021a      	lsls	r2, r3, #8
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	609a      	str	r2, [r3, #8]
}
 8005d48:	bf00      	nop
 8005d4a:	371c      	adds	r7, #28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	2201      	movs	r2, #1
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1a      	ldr	r2, [r3, #32]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	43db      	mvns	r3, r3
 8005d76:	401a      	ands	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a1a      	ldr	r2, [r3, #32]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
	...

08005da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e06d      	b.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a30      	ldr	r2, [pc, #192]	; (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d004      	beq.n	8005dec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a2f      	ldr	r2, [pc, #188]	; (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d108      	bne.n	8005dfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005df2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a20      	ldr	r2, [pc, #128]	; (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d022      	beq.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e2a:	d01d      	beq.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1d      	ldr	r2, [pc, #116]	; (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d018      	beq.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a1c      	ldr	r2, [pc, #112]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d013      	beq.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a1a      	ldr	r2, [pc, #104]	; (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00e      	beq.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a15      	ldr	r2, [pc, #84]	; (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d009      	beq.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a16      	ldr	r2, [pc, #88]	; (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d004      	beq.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a15      	ldr	r2, [pc, #84]	; (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d10c      	bne.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	40010000 	.word	0x40010000
 8005ea4:	40010400 	.word	0x40010400
 8005ea8:	40000400 	.word	0x40000400
 8005eac:	40000800 	.word	0x40000800
 8005eb0:	40000c00 	.word	0x40000c00
 8005eb4:	40001800 	.word	0x40001800
 8005eb8:	40014000 	.word	0x40014000

08005ebc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e065      	b.n	8005fa4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	041b      	lsls	r3, r3, #16
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a16      	ldr	r2, [pc, #88]	; (8005fb0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d004      	beq.n	8005f66 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a14      	ldr	r2, [pc, #80]	; (8005fb4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d115      	bne.n	8005f92 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	051b      	lsls	r3, r3, #20
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	69db      	ldr	r3, [r3, #28]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	40010000 	.word	0x40010000
 8005fb4:	40010400 	.word	0x40010400

08005fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e042      	b.n	8006050 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7fb fe39 	bl	8001c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2224      	movs	r2, #36	; 0x24
 8005fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0201 	bic.w	r2, r2, #1
 8005ff8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f996 	bl	800632c <UART_SetConfig>
 8006000:	4603      	mov	r3, r0
 8006002:	2b01      	cmp	r3, #1
 8006004:	d101      	bne.n	800600a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e022      	b.n	8006050 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 feea 	bl	8006dec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689a      	ldr	r2, [r3, #8]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0201 	orr.w	r2, r2, #1
 8006046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 ff71 	bl	8006f30 <UART_CheckIdleState>
 800604e:	4603      	mov	r3, r0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08a      	sub	sp, #40	; 0x28
 800605c:	af02      	add	r7, sp, #8
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	4613      	mov	r3, r2
 8006066:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800606e:	2b20      	cmp	r3, #32
 8006070:	f040 8083 	bne.w	800617a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <HAL_UART_Transmit+0x28>
 800607a:	88fb      	ldrh	r3, [r7, #6]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e07b      	b.n	800617c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800608a:	2b01      	cmp	r3, #1
 800608c:	d101      	bne.n	8006092 <HAL_UART_Transmit+0x3a>
 800608e:	2302      	movs	r3, #2
 8006090:	e074      	b.n	800617c <HAL_UART_Transmit+0x124>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2221      	movs	r2, #33	; 0x21
 80060a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060aa:	f7fc f837 	bl	800211c <HAL_GetTick>
 80060ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	88fa      	ldrh	r2, [r7, #6]
 80060b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	88fa      	ldrh	r2, [r7, #6]
 80060bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c8:	d108      	bne.n	80060dc <HAL_UART_Transmit+0x84>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d104      	bne.n	80060dc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80060d2:	2300      	movs	r3, #0
 80060d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	e003      	b.n	80060e4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060e0:	2300      	movs	r3, #0
 80060e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80060ec:	e02c      	b.n	8006148 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2200      	movs	r2, #0
 80060f6:	2180      	movs	r1, #128	; 0x80
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 ff64 	bl	8006fc6 <UART_WaitOnFlagUntilTimeout>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e039      	b.n	800617c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10b      	bne.n	8006126 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800611c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	3302      	adds	r3, #2
 8006122:	61bb      	str	r3, [r7, #24]
 8006124:	e007      	b.n	8006136 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	781a      	ldrb	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	3301      	adds	r3, #1
 8006134:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800614e:	b29b      	uxth	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1cc      	bne.n	80060ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2200      	movs	r2, #0
 800615c:	2140      	movs	r1, #64	; 0x40
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 ff31 	bl	8006fc6 <UART_WaitOnFlagUntilTimeout>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e006      	b.n	800617c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2220      	movs	r2, #32
 8006172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	e000      	b.n	800617c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800617a:	2302      	movs	r3, #2
  }
}
 800617c:	4618      	mov	r0, r3
 800617e:	3720      	adds	r7, #32
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08a      	sub	sp, #40	; 0x28
 8006188:	af02      	add	r7, sp, #8
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	4613      	mov	r3, r2
 8006192:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619a:	2b20      	cmp	r3, #32
 800619c:	f040 80c0 	bne.w	8006320 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <HAL_UART_Receive+0x28>
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e0b8      	b.n	8006322 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <HAL_UART_Receive+0x3a>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e0b1      	b.n	8006322 <HAL_UART_Receive+0x19e>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2222      	movs	r2, #34	; 0x22
 80061d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061dc:	f7fb ff9e 	bl	800211c <HAL_GetTick>
 80061e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	88fa      	ldrh	r2, [r7, #6]
 80061e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	88fa      	ldrh	r2, [r7, #6]
 80061ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061fa:	d10e      	bne.n	800621a <HAL_UART_Receive+0x96>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d105      	bne.n	8006210 <HAL_UART_Receive+0x8c>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f240 12ff 	movw	r2, #511	; 0x1ff
 800620a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800620e:	e02d      	b.n	800626c <HAL_UART_Receive+0xe8>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	22ff      	movs	r2, #255	; 0xff
 8006214:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006218:	e028      	b.n	800626c <HAL_UART_Receive+0xe8>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10d      	bne.n	800623e <HAL_UART_Receive+0xba>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d104      	bne.n	8006234 <HAL_UART_Receive+0xb0>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	22ff      	movs	r2, #255	; 0xff
 800622e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006232:	e01b      	b.n	800626c <HAL_UART_Receive+0xe8>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	227f      	movs	r2, #127	; 0x7f
 8006238:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800623c:	e016      	b.n	800626c <HAL_UART_Receive+0xe8>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006246:	d10d      	bne.n	8006264 <HAL_UART_Receive+0xe0>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d104      	bne.n	800625a <HAL_UART_Receive+0xd6>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	227f      	movs	r2, #127	; 0x7f
 8006254:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006258:	e008      	b.n	800626c <HAL_UART_Receive+0xe8>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	223f      	movs	r2, #63	; 0x3f
 800625e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006262:	e003      	b.n	800626c <HAL_UART_Receive+0xe8>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006272:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800627c:	d108      	bne.n	8006290 <HAL_UART_Receive+0x10c>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d104      	bne.n	8006290 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8006286:	2300      	movs	r3, #0
 8006288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	61bb      	str	r3, [r7, #24]
 800628e:	e003      	b.n	8006298 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006294:	2300      	movs	r3, #0
 8006296:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80062a0:	e032      	b.n	8006308 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2200      	movs	r2, #0
 80062aa:	2120      	movs	r1, #32
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 fe8a 	bl	8006fc6 <UART_WaitOnFlagUntilTimeout>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e032      	b.n	8006322 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10c      	bne.n	80062dc <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	8a7b      	ldrh	r3, [r7, #18]
 80062cc:	4013      	ands	r3, r2
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	3302      	adds	r3, #2
 80062d8:	61bb      	str	r3, [r7, #24]
 80062da:	e00c      	b.n	80062f6 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	8a7b      	ldrh	r3, [r7, #18]
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	4013      	ands	r3, r2
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	3301      	adds	r3, #1
 80062f4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800630e:	b29b      	uxth	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1c6      	bne.n	80062a2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2220      	movs	r2, #32
 8006318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	e000      	b.n	8006322 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8006320:	2302      	movs	r3, #2
  }
}
 8006322:	4618      	mov	r0, r3
 8006324:	3720      	adds	r7, #32
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
	...

0800632c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800632c:	b5b0      	push	{r4, r5, r7, lr}
 800632e:	b08e      	sub	sp, #56	; 0x38
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	4313      	orrs	r3, r2
 8006350:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	4bbf      	ldr	r3, [pc, #764]	; (8006658 <UART_SetConfig+0x32c>)
 800635a:	4013      	ands	r3, r2
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006362:	430b      	orrs	r3, r1
 8006364:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68da      	ldr	r2, [r3, #12]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4ab5      	ldr	r2, [pc, #724]	; (800665c <UART_SetConfig+0x330>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d004      	beq.n	8006396 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006392:	4313      	orrs	r3, r2
 8006394:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	4bb0      	ldr	r3, [pc, #704]	; (8006660 <UART_SetConfig+0x334>)
 800639e:	4013      	ands	r3, r2
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6812      	ldr	r2, [r2, #0]
 80063a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063a6:	430b      	orrs	r3, r1
 80063a8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	f023 010f 	bic.w	r1, r3, #15
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4aa7      	ldr	r2, [pc, #668]	; (8006664 <UART_SetConfig+0x338>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d176      	bne.n	80064b8 <UART_SetConfig+0x18c>
 80063ca:	4ba7      	ldr	r3, [pc, #668]	; (8006668 <UART_SetConfig+0x33c>)
 80063cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063d2:	2b28      	cmp	r3, #40	; 0x28
 80063d4:	d86c      	bhi.n	80064b0 <UART_SetConfig+0x184>
 80063d6:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <UART_SetConfig+0xb0>)
 80063d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063dc:	08006481 	.word	0x08006481
 80063e0:	080064b1 	.word	0x080064b1
 80063e4:	080064b1 	.word	0x080064b1
 80063e8:	080064b1 	.word	0x080064b1
 80063ec:	080064b1 	.word	0x080064b1
 80063f0:	080064b1 	.word	0x080064b1
 80063f4:	080064b1 	.word	0x080064b1
 80063f8:	080064b1 	.word	0x080064b1
 80063fc:	08006489 	.word	0x08006489
 8006400:	080064b1 	.word	0x080064b1
 8006404:	080064b1 	.word	0x080064b1
 8006408:	080064b1 	.word	0x080064b1
 800640c:	080064b1 	.word	0x080064b1
 8006410:	080064b1 	.word	0x080064b1
 8006414:	080064b1 	.word	0x080064b1
 8006418:	080064b1 	.word	0x080064b1
 800641c:	08006491 	.word	0x08006491
 8006420:	080064b1 	.word	0x080064b1
 8006424:	080064b1 	.word	0x080064b1
 8006428:	080064b1 	.word	0x080064b1
 800642c:	080064b1 	.word	0x080064b1
 8006430:	080064b1 	.word	0x080064b1
 8006434:	080064b1 	.word	0x080064b1
 8006438:	080064b1 	.word	0x080064b1
 800643c:	08006499 	.word	0x08006499
 8006440:	080064b1 	.word	0x080064b1
 8006444:	080064b1 	.word	0x080064b1
 8006448:	080064b1 	.word	0x080064b1
 800644c:	080064b1 	.word	0x080064b1
 8006450:	080064b1 	.word	0x080064b1
 8006454:	080064b1 	.word	0x080064b1
 8006458:	080064b1 	.word	0x080064b1
 800645c:	080064a1 	.word	0x080064a1
 8006460:	080064b1 	.word	0x080064b1
 8006464:	080064b1 	.word	0x080064b1
 8006468:	080064b1 	.word	0x080064b1
 800646c:	080064b1 	.word	0x080064b1
 8006470:	080064b1 	.word	0x080064b1
 8006474:	080064b1 	.word	0x080064b1
 8006478:	080064b1 	.word	0x080064b1
 800647c:	080064a9 	.word	0x080064a9
 8006480:	2301      	movs	r3, #1
 8006482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006486:	e222      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006488:	2304      	movs	r3, #4
 800648a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800648e:	e21e      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006490:	2308      	movs	r3, #8
 8006492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006496:	e21a      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006498:	2310      	movs	r3, #16
 800649a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800649e:	e216      	b.n	80068ce <UART_SetConfig+0x5a2>
 80064a0:	2320      	movs	r3, #32
 80064a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064a6:	e212      	b.n	80068ce <UART_SetConfig+0x5a2>
 80064a8:	2340      	movs	r3, #64	; 0x40
 80064aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ae:	e20e      	b.n	80068ce <UART_SetConfig+0x5a2>
 80064b0:	2380      	movs	r3, #128	; 0x80
 80064b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064b6:	e20a      	b.n	80068ce <UART_SetConfig+0x5a2>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a6b      	ldr	r2, [pc, #428]	; (800666c <UART_SetConfig+0x340>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d130      	bne.n	8006524 <UART_SetConfig+0x1f8>
 80064c2:	4b69      	ldr	r3, [pc, #420]	; (8006668 <UART_SetConfig+0x33c>)
 80064c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	2b05      	cmp	r3, #5
 80064cc:	d826      	bhi.n	800651c <UART_SetConfig+0x1f0>
 80064ce:	a201      	add	r2, pc, #4	; (adr r2, 80064d4 <UART_SetConfig+0x1a8>)
 80064d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d4:	080064ed 	.word	0x080064ed
 80064d8:	080064f5 	.word	0x080064f5
 80064dc:	080064fd 	.word	0x080064fd
 80064e0:	08006505 	.word	0x08006505
 80064e4:	0800650d 	.word	0x0800650d
 80064e8:	08006515 	.word	0x08006515
 80064ec:	2300      	movs	r3, #0
 80064ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064f2:	e1ec      	b.n	80068ce <UART_SetConfig+0x5a2>
 80064f4:	2304      	movs	r3, #4
 80064f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064fa:	e1e8      	b.n	80068ce <UART_SetConfig+0x5a2>
 80064fc:	2308      	movs	r3, #8
 80064fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006502:	e1e4      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006504:	2310      	movs	r3, #16
 8006506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800650a:	e1e0      	b.n	80068ce <UART_SetConfig+0x5a2>
 800650c:	2320      	movs	r3, #32
 800650e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006512:	e1dc      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006514:	2340      	movs	r3, #64	; 0x40
 8006516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800651a:	e1d8      	b.n	80068ce <UART_SetConfig+0x5a2>
 800651c:	2380      	movs	r3, #128	; 0x80
 800651e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006522:	e1d4      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a51      	ldr	r2, [pc, #324]	; (8006670 <UART_SetConfig+0x344>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d130      	bne.n	8006590 <UART_SetConfig+0x264>
 800652e:	4b4e      	ldr	r3, [pc, #312]	; (8006668 <UART_SetConfig+0x33c>)
 8006530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	2b05      	cmp	r3, #5
 8006538:	d826      	bhi.n	8006588 <UART_SetConfig+0x25c>
 800653a:	a201      	add	r2, pc, #4	; (adr r2, 8006540 <UART_SetConfig+0x214>)
 800653c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006540:	08006559 	.word	0x08006559
 8006544:	08006561 	.word	0x08006561
 8006548:	08006569 	.word	0x08006569
 800654c:	08006571 	.word	0x08006571
 8006550:	08006579 	.word	0x08006579
 8006554:	08006581 	.word	0x08006581
 8006558:	2300      	movs	r3, #0
 800655a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800655e:	e1b6      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006560:	2304      	movs	r3, #4
 8006562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006566:	e1b2      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006568:	2308      	movs	r3, #8
 800656a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800656e:	e1ae      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006570:	2310      	movs	r3, #16
 8006572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006576:	e1aa      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006578:	2320      	movs	r3, #32
 800657a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800657e:	e1a6      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006580:	2340      	movs	r3, #64	; 0x40
 8006582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006586:	e1a2      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006588:	2380      	movs	r3, #128	; 0x80
 800658a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800658e:	e19e      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a37      	ldr	r2, [pc, #220]	; (8006674 <UART_SetConfig+0x348>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d130      	bne.n	80065fc <UART_SetConfig+0x2d0>
 800659a:	4b33      	ldr	r3, [pc, #204]	; (8006668 <UART_SetConfig+0x33c>)
 800659c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	2b05      	cmp	r3, #5
 80065a4:	d826      	bhi.n	80065f4 <UART_SetConfig+0x2c8>
 80065a6:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <UART_SetConfig+0x280>)
 80065a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ac:	080065c5 	.word	0x080065c5
 80065b0:	080065cd 	.word	0x080065cd
 80065b4:	080065d5 	.word	0x080065d5
 80065b8:	080065dd 	.word	0x080065dd
 80065bc:	080065e5 	.word	0x080065e5
 80065c0:	080065ed 	.word	0x080065ed
 80065c4:	2300      	movs	r3, #0
 80065c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ca:	e180      	b.n	80068ce <UART_SetConfig+0x5a2>
 80065cc:	2304      	movs	r3, #4
 80065ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065d2:	e17c      	b.n	80068ce <UART_SetConfig+0x5a2>
 80065d4:	2308      	movs	r3, #8
 80065d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065da:	e178      	b.n	80068ce <UART_SetConfig+0x5a2>
 80065dc:	2310      	movs	r3, #16
 80065de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065e2:	e174      	b.n	80068ce <UART_SetConfig+0x5a2>
 80065e4:	2320      	movs	r3, #32
 80065e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ea:	e170      	b.n	80068ce <UART_SetConfig+0x5a2>
 80065ec:	2340      	movs	r3, #64	; 0x40
 80065ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065f2:	e16c      	b.n	80068ce <UART_SetConfig+0x5a2>
 80065f4:	2380      	movs	r3, #128	; 0x80
 80065f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065fa:	e168      	b.n	80068ce <UART_SetConfig+0x5a2>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a1d      	ldr	r2, [pc, #116]	; (8006678 <UART_SetConfig+0x34c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d142      	bne.n	800668c <UART_SetConfig+0x360>
 8006606:	4b18      	ldr	r3, [pc, #96]	; (8006668 <UART_SetConfig+0x33c>)
 8006608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660a:	f003 0307 	and.w	r3, r3, #7
 800660e:	2b05      	cmp	r3, #5
 8006610:	d838      	bhi.n	8006684 <UART_SetConfig+0x358>
 8006612:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <UART_SetConfig+0x2ec>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	08006631 	.word	0x08006631
 800661c:	08006639 	.word	0x08006639
 8006620:	08006641 	.word	0x08006641
 8006624:	08006649 	.word	0x08006649
 8006628:	08006651 	.word	0x08006651
 800662c:	0800667d 	.word	0x0800667d
 8006630:	2300      	movs	r3, #0
 8006632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006636:	e14a      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006638:	2304      	movs	r3, #4
 800663a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800663e:	e146      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006640:	2308      	movs	r3, #8
 8006642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006646:	e142      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006648:	2310      	movs	r3, #16
 800664a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800664e:	e13e      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006650:	2320      	movs	r3, #32
 8006652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006656:	e13a      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006658:	cfff69f3 	.word	0xcfff69f3
 800665c:	58000c00 	.word	0x58000c00
 8006660:	11fff4ff 	.word	0x11fff4ff
 8006664:	40011000 	.word	0x40011000
 8006668:	58024400 	.word	0x58024400
 800666c:	40004400 	.word	0x40004400
 8006670:	40004800 	.word	0x40004800
 8006674:	40004c00 	.word	0x40004c00
 8006678:	40005000 	.word	0x40005000
 800667c:	2340      	movs	r3, #64	; 0x40
 800667e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006682:	e124      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006684:	2380      	movs	r3, #128	; 0x80
 8006686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800668a:	e120      	b.n	80068ce <UART_SetConfig+0x5a2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4acc      	ldr	r2, [pc, #816]	; (80069c4 <UART_SetConfig+0x698>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d176      	bne.n	8006784 <UART_SetConfig+0x458>
 8006696:	4bcc      	ldr	r3, [pc, #816]	; (80069c8 <UART_SetConfig+0x69c>)
 8006698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800669e:	2b28      	cmp	r3, #40	; 0x28
 80066a0:	d86c      	bhi.n	800677c <UART_SetConfig+0x450>
 80066a2:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <UART_SetConfig+0x37c>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	0800674d 	.word	0x0800674d
 80066ac:	0800677d 	.word	0x0800677d
 80066b0:	0800677d 	.word	0x0800677d
 80066b4:	0800677d 	.word	0x0800677d
 80066b8:	0800677d 	.word	0x0800677d
 80066bc:	0800677d 	.word	0x0800677d
 80066c0:	0800677d 	.word	0x0800677d
 80066c4:	0800677d 	.word	0x0800677d
 80066c8:	08006755 	.word	0x08006755
 80066cc:	0800677d 	.word	0x0800677d
 80066d0:	0800677d 	.word	0x0800677d
 80066d4:	0800677d 	.word	0x0800677d
 80066d8:	0800677d 	.word	0x0800677d
 80066dc:	0800677d 	.word	0x0800677d
 80066e0:	0800677d 	.word	0x0800677d
 80066e4:	0800677d 	.word	0x0800677d
 80066e8:	0800675d 	.word	0x0800675d
 80066ec:	0800677d 	.word	0x0800677d
 80066f0:	0800677d 	.word	0x0800677d
 80066f4:	0800677d 	.word	0x0800677d
 80066f8:	0800677d 	.word	0x0800677d
 80066fc:	0800677d 	.word	0x0800677d
 8006700:	0800677d 	.word	0x0800677d
 8006704:	0800677d 	.word	0x0800677d
 8006708:	08006765 	.word	0x08006765
 800670c:	0800677d 	.word	0x0800677d
 8006710:	0800677d 	.word	0x0800677d
 8006714:	0800677d 	.word	0x0800677d
 8006718:	0800677d 	.word	0x0800677d
 800671c:	0800677d 	.word	0x0800677d
 8006720:	0800677d 	.word	0x0800677d
 8006724:	0800677d 	.word	0x0800677d
 8006728:	0800676d 	.word	0x0800676d
 800672c:	0800677d 	.word	0x0800677d
 8006730:	0800677d 	.word	0x0800677d
 8006734:	0800677d 	.word	0x0800677d
 8006738:	0800677d 	.word	0x0800677d
 800673c:	0800677d 	.word	0x0800677d
 8006740:	0800677d 	.word	0x0800677d
 8006744:	0800677d 	.word	0x0800677d
 8006748:	08006775 	.word	0x08006775
 800674c:	2301      	movs	r3, #1
 800674e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006752:	e0bc      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006754:	2304      	movs	r3, #4
 8006756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800675a:	e0b8      	b.n	80068ce <UART_SetConfig+0x5a2>
 800675c:	2308      	movs	r3, #8
 800675e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006762:	e0b4      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006764:	2310      	movs	r3, #16
 8006766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800676a:	e0b0      	b.n	80068ce <UART_SetConfig+0x5a2>
 800676c:	2320      	movs	r3, #32
 800676e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006772:	e0ac      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006774:	2340      	movs	r3, #64	; 0x40
 8006776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800677a:	e0a8      	b.n	80068ce <UART_SetConfig+0x5a2>
 800677c:	2380      	movs	r3, #128	; 0x80
 800677e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006782:	e0a4      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a90      	ldr	r2, [pc, #576]	; (80069cc <UART_SetConfig+0x6a0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d130      	bne.n	80067f0 <UART_SetConfig+0x4c4>
 800678e:	4b8e      	ldr	r3, [pc, #568]	; (80069c8 <UART_SetConfig+0x69c>)
 8006790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006792:	f003 0307 	and.w	r3, r3, #7
 8006796:	2b05      	cmp	r3, #5
 8006798:	d826      	bhi.n	80067e8 <UART_SetConfig+0x4bc>
 800679a:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <UART_SetConfig+0x474>)
 800679c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a0:	080067b9 	.word	0x080067b9
 80067a4:	080067c1 	.word	0x080067c1
 80067a8:	080067c9 	.word	0x080067c9
 80067ac:	080067d1 	.word	0x080067d1
 80067b0:	080067d9 	.word	0x080067d9
 80067b4:	080067e1 	.word	0x080067e1
 80067b8:	2300      	movs	r3, #0
 80067ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067be:	e086      	b.n	80068ce <UART_SetConfig+0x5a2>
 80067c0:	2304      	movs	r3, #4
 80067c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067c6:	e082      	b.n	80068ce <UART_SetConfig+0x5a2>
 80067c8:	2308      	movs	r3, #8
 80067ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ce:	e07e      	b.n	80068ce <UART_SetConfig+0x5a2>
 80067d0:	2310      	movs	r3, #16
 80067d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067d6:	e07a      	b.n	80068ce <UART_SetConfig+0x5a2>
 80067d8:	2320      	movs	r3, #32
 80067da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067de:	e076      	b.n	80068ce <UART_SetConfig+0x5a2>
 80067e0:	2340      	movs	r3, #64	; 0x40
 80067e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067e6:	e072      	b.n	80068ce <UART_SetConfig+0x5a2>
 80067e8:	2380      	movs	r3, #128	; 0x80
 80067ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ee:	e06e      	b.n	80068ce <UART_SetConfig+0x5a2>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a76      	ldr	r2, [pc, #472]	; (80069d0 <UART_SetConfig+0x6a4>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d130      	bne.n	800685c <UART_SetConfig+0x530>
 80067fa:	4b73      	ldr	r3, [pc, #460]	; (80069c8 <UART_SetConfig+0x69c>)
 80067fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	2b05      	cmp	r3, #5
 8006804:	d826      	bhi.n	8006854 <UART_SetConfig+0x528>
 8006806:	a201      	add	r2, pc, #4	; (adr r2, 800680c <UART_SetConfig+0x4e0>)
 8006808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680c:	08006825 	.word	0x08006825
 8006810:	0800682d 	.word	0x0800682d
 8006814:	08006835 	.word	0x08006835
 8006818:	0800683d 	.word	0x0800683d
 800681c:	08006845 	.word	0x08006845
 8006820:	0800684d 	.word	0x0800684d
 8006824:	2300      	movs	r3, #0
 8006826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800682a:	e050      	b.n	80068ce <UART_SetConfig+0x5a2>
 800682c:	2304      	movs	r3, #4
 800682e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006832:	e04c      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006834:	2308      	movs	r3, #8
 8006836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800683a:	e048      	b.n	80068ce <UART_SetConfig+0x5a2>
 800683c:	2310      	movs	r3, #16
 800683e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006842:	e044      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006844:	2320      	movs	r3, #32
 8006846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800684a:	e040      	b.n	80068ce <UART_SetConfig+0x5a2>
 800684c:	2340      	movs	r3, #64	; 0x40
 800684e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006852:	e03c      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006854:	2380      	movs	r3, #128	; 0x80
 8006856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800685a:	e038      	b.n	80068ce <UART_SetConfig+0x5a2>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a5c      	ldr	r2, [pc, #368]	; (80069d4 <UART_SetConfig+0x6a8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d130      	bne.n	80068c8 <UART_SetConfig+0x59c>
 8006866:	4b58      	ldr	r3, [pc, #352]	; (80069c8 <UART_SetConfig+0x69c>)
 8006868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	2b05      	cmp	r3, #5
 8006870:	d826      	bhi.n	80068c0 <UART_SetConfig+0x594>
 8006872:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <UART_SetConfig+0x54c>)
 8006874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006878:	08006891 	.word	0x08006891
 800687c:	08006899 	.word	0x08006899
 8006880:	080068a1 	.word	0x080068a1
 8006884:	080068a9 	.word	0x080068a9
 8006888:	080068b1 	.word	0x080068b1
 800688c:	080068b9 	.word	0x080068b9
 8006890:	2302      	movs	r3, #2
 8006892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006896:	e01a      	b.n	80068ce <UART_SetConfig+0x5a2>
 8006898:	2304      	movs	r3, #4
 800689a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800689e:	e016      	b.n	80068ce <UART_SetConfig+0x5a2>
 80068a0:	2308      	movs	r3, #8
 80068a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068a6:	e012      	b.n	80068ce <UART_SetConfig+0x5a2>
 80068a8:	2310      	movs	r3, #16
 80068aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ae:	e00e      	b.n	80068ce <UART_SetConfig+0x5a2>
 80068b0:	2320      	movs	r3, #32
 80068b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068b6:	e00a      	b.n	80068ce <UART_SetConfig+0x5a2>
 80068b8:	2340      	movs	r3, #64	; 0x40
 80068ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068be:	e006      	b.n	80068ce <UART_SetConfig+0x5a2>
 80068c0:	2380      	movs	r3, #128	; 0x80
 80068c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068c6:	e002      	b.n	80068ce <UART_SetConfig+0x5a2>
 80068c8:	2380      	movs	r3, #128	; 0x80
 80068ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a40      	ldr	r2, [pc, #256]	; (80069d4 <UART_SetConfig+0x6a8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	f040 80ef 	bne.w	8006ab8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80068de:	2b20      	cmp	r3, #32
 80068e0:	dc46      	bgt.n	8006970 <UART_SetConfig+0x644>
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	f2c0 8081 	blt.w	80069ea <UART_SetConfig+0x6be>
 80068e8:	3b02      	subs	r3, #2
 80068ea:	2b1e      	cmp	r3, #30
 80068ec:	d87d      	bhi.n	80069ea <UART_SetConfig+0x6be>
 80068ee:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <UART_SetConfig+0x5c8>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	08006977 	.word	0x08006977
 80068f8:	080069eb 	.word	0x080069eb
 80068fc:	0800697f 	.word	0x0800697f
 8006900:	080069eb 	.word	0x080069eb
 8006904:	080069eb 	.word	0x080069eb
 8006908:	080069eb 	.word	0x080069eb
 800690c:	0800698f 	.word	0x0800698f
 8006910:	080069eb 	.word	0x080069eb
 8006914:	080069eb 	.word	0x080069eb
 8006918:	080069eb 	.word	0x080069eb
 800691c:	080069eb 	.word	0x080069eb
 8006920:	080069eb 	.word	0x080069eb
 8006924:	080069eb 	.word	0x080069eb
 8006928:	080069eb 	.word	0x080069eb
 800692c:	0800699f 	.word	0x0800699f
 8006930:	080069eb 	.word	0x080069eb
 8006934:	080069eb 	.word	0x080069eb
 8006938:	080069eb 	.word	0x080069eb
 800693c:	080069eb 	.word	0x080069eb
 8006940:	080069eb 	.word	0x080069eb
 8006944:	080069eb 	.word	0x080069eb
 8006948:	080069eb 	.word	0x080069eb
 800694c:	080069eb 	.word	0x080069eb
 8006950:	080069eb 	.word	0x080069eb
 8006954:	080069eb 	.word	0x080069eb
 8006958:	080069eb 	.word	0x080069eb
 800695c:	080069eb 	.word	0x080069eb
 8006960:	080069eb 	.word	0x080069eb
 8006964:	080069eb 	.word	0x080069eb
 8006968:	080069eb 	.word	0x080069eb
 800696c:	080069dd 	.word	0x080069dd
 8006970:	2b40      	cmp	r3, #64	; 0x40
 8006972:	d036      	beq.n	80069e2 <UART_SetConfig+0x6b6>
 8006974:	e039      	b.n	80069ea <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006976:	f7fd fdeb 	bl	8004550 <HAL_RCCEx_GetD3PCLK1Freq>
 800697a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800697c:	e03b      	b.n	80069f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800697e:	f107 0314 	add.w	r3, r7, #20
 8006982:	4618      	mov	r0, r3
 8006984:	f7fd fdfa 	bl	800457c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800698c:	e033      	b.n	80069f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800698e:	f107 0308 	add.w	r3, r7, #8
 8006992:	4618      	mov	r0, r3
 8006994:	f7fd ff46 	bl	8004824 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800699c:	e02b      	b.n	80069f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800699e:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <UART_SetConfig+0x69c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d009      	beq.n	80069be <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069aa:	4b07      	ldr	r3, [pc, #28]	; (80069c8 <UART_SetConfig+0x69c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	08db      	lsrs	r3, r3, #3
 80069b0:	f003 0303 	and.w	r3, r3, #3
 80069b4:	4a08      	ldr	r2, [pc, #32]	; (80069d8 <UART_SetConfig+0x6ac>)
 80069b6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069bc:	e01b      	b.n	80069f6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80069be:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <UART_SetConfig+0x6ac>)
 80069c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069c2:	e018      	b.n	80069f6 <UART_SetConfig+0x6ca>
 80069c4:	40011400 	.word	0x40011400
 80069c8:	58024400 	.word	0x58024400
 80069cc:	40007800 	.word	0x40007800
 80069d0:	40007c00 	.word	0x40007c00
 80069d4:	58000c00 	.word	0x58000c00
 80069d8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069dc:	4bc4      	ldr	r3, [pc, #784]	; (8006cf0 <UART_SetConfig+0x9c4>)
 80069de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069e0:	e009      	b.n	80069f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069e8:	e005      	b.n	80069f6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80069f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 81da 	beq.w	8006db2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a02:	4abc      	ldr	r2, [pc, #752]	; (8006cf4 <UART_SetConfig+0x9c8>)
 8006a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a10:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	4613      	mov	r3, r2
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	4413      	add	r3, r2
 8006a1c:	6a3a      	ldr	r2, [r7, #32]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d305      	bcc.n	8006a2e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a28:	6a3a      	ldr	r2, [r7, #32]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d903      	bls.n	8006a36 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006a34:	e1bd      	b.n	8006db2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f04f 0100 	mov.w	r1, #0
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	4aac      	ldr	r2, [pc, #688]	; (8006cf4 <UART_SetConfig+0x9c8>)
 8006a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	f04f 0300 	mov.w	r3, #0
 8006a4e:	f7f9 fc43 	bl	80002d8 <__aeabi_uldivmod>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4610      	mov	r0, r2
 8006a58:	4619      	mov	r1, r3
 8006a5a:	f04f 0200 	mov.w	r2, #0
 8006a5e:	f04f 0300 	mov.w	r3, #0
 8006a62:	020b      	lsls	r3, r1, #8
 8006a64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a68:	0202      	lsls	r2, r0, #8
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	6849      	ldr	r1, [r1, #4]
 8006a6e:	0849      	lsrs	r1, r1, #1
 8006a70:	4608      	mov	r0, r1
 8006a72:	f04f 0100 	mov.w	r1, #0
 8006a76:	1814      	adds	r4, r2, r0
 8006a78:	eb43 0501 	adc.w	r5, r3, r1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	461a      	mov	r2, r3
 8006a82:	f04f 0300 	mov.w	r3, #0
 8006a86:	4620      	mov	r0, r4
 8006a88:	4629      	mov	r1, r5
 8006a8a:	f7f9 fc25 	bl	80002d8 <__aeabi_uldivmod>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	4613      	mov	r3, r2
 8006a94:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a9c:	d308      	bcc.n	8006ab0 <UART_SetConfig+0x784>
 8006a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aa4:	d204      	bcs.n	8006ab0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aac:	60da      	str	r2, [r3, #12]
 8006aae:	e180      	b.n	8006db2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006ab6:	e17c      	b.n	8006db2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ac0:	f040 80be 	bne.w	8006c40 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8006ac4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ac8:	2b20      	cmp	r3, #32
 8006aca:	dc49      	bgt.n	8006b60 <UART_SetConfig+0x834>
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	db7c      	blt.n	8006bca <UART_SetConfig+0x89e>
 8006ad0:	2b20      	cmp	r3, #32
 8006ad2:	d87a      	bhi.n	8006bca <UART_SetConfig+0x89e>
 8006ad4:	a201      	add	r2, pc, #4	; (adr r2, 8006adc <UART_SetConfig+0x7b0>)
 8006ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ada:	bf00      	nop
 8006adc:	08006b67 	.word	0x08006b67
 8006ae0:	08006b6f 	.word	0x08006b6f
 8006ae4:	08006bcb 	.word	0x08006bcb
 8006ae8:	08006bcb 	.word	0x08006bcb
 8006aec:	08006b77 	.word	0x08006b77
 8006af0:	08006bcb 	.word	0x08006bcb
 8006af4:	08006bcb 	.word	0x08006bcb
 8006af8:	08006bcb 	.word	0x08006bcb
 8006afc:	08006b87 	.word	0x08006b87
 8006b00:	08006bcb 	.word	0x08006bcb
 8006b04:	08006bcb 	.word	0x08006bcb
 8006b08:	08006bcb 	.word	0x08006bcb
 8006b0c:	08006bcb 	.word	0x08006bcb
 8006b10:	08006bcb 	.word	0x08006bcb
 8006b14:	08006bcb 	.word	0x08006bcb
 8006b18:	08006bcb 	.word	0x08006bcb
 8006b1c:	08006b97 	.word	0x08006b97
 8006b20:	08006bcb 	.word	0x08006bcb
 8006b24:	08006bcb 	.word	0x08006bcb
 8006b28:	08006bcb 	.word	0x08006bcb
 8006b2c:	08006bcb 	.word	0x08006bcb
 8006b30:	08006bcb 	.word	0x08006bcb
 8006b34:	08006bcb 	.word	0x08006bcb
 8006b38:	08006bcb 	.word	0x08006bcb
 8006b3c:	08006bcb 	.word	0x08006bcb
 8006b40:	08006bcb 	.word	0x08006bcb
 8006b44:	08006bcb 	.word	0x08006bcb
 8006b48:	08006bcb 	.word	0x08006bcb
 8006b4c:	08006bcb 	.word	0x08006bcb
 8006b50:	08006bcb 	.word	0x08006bcb
 8006b54:	08006bcb 	.word	0x08006bcb
 8006b58:	08006bcb 	.word	0x08006bcb
 8006b5c:	08006bbd 	.word	0x08006bbd
 8006b60:	2b40      	cmp	r3, #64	; 0x40
 8006b62:	d02e      	beq.n	8006bc2 <UART_SetConfig+0x896>
 8006b64:	e031      	b.n	8006bca <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b66:	f7fc fd87 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 8006b6a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006b6c:	e033      	b.n	8006bd6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b6e:	f7fc fd99 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8006b72:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006b74:	e02f      	b.n	8006bd6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b76:	f107 0314 	add.w	r3, r7, #20
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fd fcfe 	bl	800457c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b84:	e027      	b.n	8006bd6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b86:	f107 0308 	add.w	r3, r7, #8
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fd fe4a 	bl	8004824 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b94:	e01f      	b.n	8006bd6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b96:	4b58      	ldr	r3, [pc, #352]	; (8006cf8 <UART_SetConfig+0x9cc>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d009      	beq.n	8006bb6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ba2:	4b55      	ldr	r3, [pc, #340]	; (8006cf8 <UART_SetConfig+0x9cc>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	08db      	lsrs	r3, r3, #3
 8006ba8:	f003 0303 	and.w	r3, r3, #3
 8006bac:	4a53      	ldr	r2, [pc, #332]	; (8006cfc <UART_SetConfig+0x9d0>)
 8006bae:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bb4:	e00f      	b.n	8006bd6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006bb6:	4b51      	ldr	r3, [pc, #324]	; (8006cfc <UART_SetConfig+0x9d0>)
 8006bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bba:	e00c      	b.n	8006bd6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006bbc:	4b4c      	ldr	r3, [pc, #304]	; (8006cf0 <UART_SetConfig+0x9c4>)
 8006bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bc0:	e009      	b.n	8006bd6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bc8:	e005      	b.n	8006bd6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006bd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 80ea 	beq.w	8006db2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	4a44      	ldr	r2, [pc, #272]	; (8006cf4 <UART_SetConfig+0x9c8>)
 8006be4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006be8:	461a      	mov	r2, r3
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bf0:	005a      	lsls	r2, r3, #1
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	085b      	lsrs	r3, r3, #1
 8006bf8:	441a      	add	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	2b0f      	cmp	r3, #15
 8006c08:	d916      	bls.n	8006c38 <UART_SetConfig+0x90c>
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c10:	d212      	bcs.n	8006c38 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	f023 030f 	bic.w	r3, r3, #15
 8006c1a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	085b      	lsrs	r3, r3, #1
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	f003 0307 	and.w	r3, r3, #7
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006c34:	60da      	str	r2, [r3, #12]
 8006c36:	e0bc      	b.n	8006db2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006c3e:	e0b8      	b.n	8006db2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c44:	2b20      	cmp	r3, #32
 8006c46:	dc4b      	bgt.n	8006ce0 <UART_SetConfig+0x9b4>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f2c0 8087 	blt.w	8006d5c <UART_SetConfig+0xa30>
 8006c4e:	2b20      	cmp	r3, #32
 8006c50:	f200 8084 	bhi.w	8006d5c <UART_SetConfig+0xa30>
 8006c54:	a201      	add	r2, pc, #4	; (adr r2, 8006c5c <UART_SetConfig+0x930>)
 8006c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5a:	bf00      	nop
 8006c5c:	08006ce7 	.word	0x08006ce7
 8006c60:	08006d01 	.word	0x08006d01
 8006c64:	08006d5d 	.word	0x08006d5d
 8006c68:	08006d5d 	.word	0x08006d5d
 8006c6c:	08006d09 	.word	0x08006d09
 8006c70:	08006d5d 	.word	0x08006d5d
 8006c74:	08006d5d 	.word	0x08006d5d
 8006c78:	08006d5d 	.word	0x08006d5d
 8006c7c:	08006d19 	.word	0x08006d19
 8006c80:	08006d5d 	.word	0x08006d5d
 8006c84:	08006d5d 	.word	0x08006d5d
 8006c88:	08006d5d 	.word	0x08006d5d
 8006c8c:	08006d5d 	.word	0x08006d5d
 8006c90:	08006d5d 	.word	0x08006d5d
 8006c94:	08006d5d 	.word	0x08006d5d
 8006c98:	08006d5d 	.word	0x08006d5d
 8006c9c:	08006d29 	.word	0x08006d29
 8006ca0:	08006d5d 	.word	0x08006d5d
 8006ca4:	08006d5d 	.word	0x08006d5d
 8006ca8:	08006d5d 	.word	0x08006d5d
 8006cac:	08006d5d 	.word	0x08006d5d
 8006cb0:	08006d5d 	.word	0x08006d5d
 8006cb4:	08006d5d 	.word	0x08006d5d
 8006cb8:	08006d5d 	.word	0x08006d5d
 8006cbc:	08006d5d 	.word	0x08006d5d
 8006cc0:	08006d5d 	.word	0x08006d5d
 8006cc4:	08006d5d 	.word	0x08006d5d
 8006cc8:	08006d5d 	.word	0x08006d5d
 8006ccc:	08006d5d 	.word	0x08006d5d
 8006cd0:	08006d5d 	.word	0x08006d5d
 8006cd4:	08006d5d 	.word	0x08006d5d
 8006cd8:	08006d5d 	.word	0x08006d5d
 8006cdc:	08006d4f 	.word	0x08006d4f
 8006ce0:	2b40      	cmp	r3, #64	; 0x40
 8006ce2:	d037      	beq.n	8006d54 <UART_SetConfig+0xa28>
 8006ce4:	e03a      	b.n	8006d5c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce6:	f7fc fcc7 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 8006cea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006cec:	e03c      	b.n	8006d68 <UART_SetConfig+0xa3c>
 8006cee:	bf00      	nop
 8006cf0:	003d0900 	.word	0x003d0900
 8006cf4:	080073dc 	.word	0x080073dc
 8006cf8:	58024400 	.word	0x58024400
 8006cfc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d00:	f7fc fcd0 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8006d04:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006d06:	e02f      	b.n	8006d68 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d08:	f107 0314 	add.w	r3, r7, #20
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fd fc35 	bl	800457c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d16:	e027      	b.n	8006d68 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d18:	f107 0308 	add.w	r3, r7, #8
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fd fd81 	bl	8004824 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d26:	e01f      	b.n	8006d68 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d28:	4b2c      	ldr	r3, [pc, #176]	; (8006ddc <UART_SetConfig+0xab0>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0320 	and.w	r3, r3, #32
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d009      	beq.n	8006d48 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d34:	4b29      	ldr	r3, [pc, #164]	; (8006ddc <UART_SetConfig+0xab0>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	08db      	lsrs	r3, r3, #3
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	4a28      	ldr	r2, [pc, #160]	; (8006de0 <UART_SetConfig+0xab4>)
 8006d40:	fa22 f303 	lsr.w	r3, r2, r3
 8006d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d46:	e00f      	b.n	8006d68 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006d48:	4b25      	ldr	r3, [pc, #148]	; (8006de0 <UART_SetConfig+0xab4>)
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d4c:	e00c      	b.n	8006d68 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d4e:	4b25      	ldr	r3, [pc, #148]	; (8006de4 <UART_SetConfig+0xab8>)
 8006d50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d52:	e009      	b.n	8006d68 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d5a:	e005      	b.n	8006d68 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006d66:	bf00      	nop
    }

    if (pclk != 0U)
 8006d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d021      	beq.n	8006db2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	4a1d      	ldr	r2, [pc, #116]	; (8006de8 <UART_SetConfig+0xabc>)
 8006d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	085b      	lsrs	r3, r3, #1
 8006d86:	441a      	add	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d90:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d94:	2b0f      	cmp	r3, #15
 8006d96:	d909      	bls.n	8006dac <UART_SetConfig+0xa80>
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d9e:	d205      	bcs.n	8006dac <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	60da      	str	r2, [r3, #12]
 8006daa:	e002      	b.n	8006db2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006dce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3738      	adds	r7, #56	; 0x38
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	58024400 	.word	0x58024400
 8006de0:	03d09000 	.word	0x03d09000
 8006de4:	003d0900 	.word	0x003d0900
 8006de8:	080073dc 	.word	0x080073dc

08006dec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00a      	beq.n	8006e16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e80:	f003 0310 	and.w	r3, r3, #16
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea2:	f003 0320 	and.w	r3, r3, #32
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d01a      	beq.n	8006f02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eea:	d10a      	bne.n	8006f02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	605a      	str	r2, [r3, #4]
  }
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f40:	f7fb f8ec 	bl	800211c <HAL_GetTick>
 8006f44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	d10e      	bne.n	8006f72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f82f 	bl	8006fc6 <UART_WaitOnFlagUntilTimeout>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e025      	b.n	8006fbe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b04      	cmp	r3, #4
 8006f7e:	d10e      	bne.n	8006f9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f819 	bl	8006fc6 <UART_WaitOnFlagUntilTimeout>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e00f      	b.n	8006fbe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b09c      	sub	sp, #112	; 0x70
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	60f8      	str	r0, [r7, #12]
 8006fce:	60b9      	str	r1, [r7, #8]
 8006fd0:	603b      	str	r3, [r7, #0]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fd6:	e0a9      	b.n	800712c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fde:	f000 80a5 	beq.w	800712c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe2:	f7fb f89b 	bl	800211c <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d302      	bcc.n	8006ff8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d140      	bne.n	800707a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007000:	e853 3f00 	ldrex	r3, [r3]
 8007004:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007008:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800700c:	667b      	str	r3, [r7, #100]	; 0x64
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007016:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007018:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800701c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800701e:	e841 2300 	strex	r3, r2, [r1]
 8007022:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1e6      	bne.n	8006ff8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3308      	adds	r3, #8
 8007030:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703c:	f023 0301 	bic.w	r3, r3, #1
 8007040:	663b      	str	r3, [r7, #96]	; 0x60
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3308      	adds	r3, #8
 8007048:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800704a:	64ba      	str	r2, [r7, #72]	; 0x48
 800704c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007052:	e841 2300 	strex	r3, r2, [r1]
 8007056:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1e5      	bne.n	800702a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2220      	movs	r2, #32
 8007062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2220      	movs	r2, #32
 800706a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e069      	b.n	800714e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b00      	cmp	r3, #0
 8007086:	d051      	beq.n	800712c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007096:	d149      	bne.n	800712c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c0:	637b      	str	r3, [r7, #52]	; 0x34
 80070c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e6      	bne.n	80070a2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3308      	adds	r3, #8
 80070da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	e853 3f00 	ldrex	r3, [r3]
 80070e2:	613b      	str	r3, [r7, #16]
   return(result);
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f023 0301 	bic.w	r3, r3, #1
 80070ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3308      	adds	r3, #8
 80070f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070f4:	623a      	str	r2, [r7, #32]
 80070f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	69f9      	ldr	r1, [r7, #28]
 80070fa:	6a3a      	ldr	r2, [r7, #32]
 80070fc:	e841 2300 	strex	r3, r2, [r1]
 8007100:	61bb      	str	r3, [r7, #24]
   return(result);
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e5      	bne.n	80070d4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2220      	movs	r2, #32
 800710c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2220      	movs	r2, #32
 8007114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2220      	movs	r2, #32
 800711c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e010      	b.n	800714e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	69da      	ldr	r2, [r3, #28]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	4013      	ands	r3, r2
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	429a      	cmp	r2, r3
 800713a:	bf0c      	ite	eq
 800713c:	2301      	moveq	r3, #1
 800713e:	2300      	movne	r3, #0
 8007140:	b2db      	uxtb	r3, r3
 8007142:	461a      	mov	r2, r3
 8007144:	79fb      	ldrb	r3, [r7, #7]
 8007146:	429a      	cmp	r2, r3
 8007148:	f43f af46 	beq.w	8006fd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3770      	adds	r7, #112	; 0x70
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007156:	b480      	push	{r7}
 8007158:	b085      	sub	sp, #20
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007164:	2b01      	cmp	r3, #1
 8007166:	d101      	bne.n	800716c <HAL_UARTEx_DisableFifoMode+0x16>
 8007168:	2302      	movs	r3, #2
 800716a:	e027      	b.n	80071bc <HAL_UARTEx_DisableFifoMode+0x66>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2224      	movs	r2, #36	; 0x24
 8007178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0201 	bic.w	r2, r2, #1
 8007192:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800719a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2220      	movs	r2, #32
 80071ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d101      	bne.n	80071e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071dc:	2302      	movs	r3, #2
 80071de:	e02d      	b.n	800723c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2224      	movs	r2, #36	; 0x24
 80071ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0201 	bic.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f84f 	bl	80072c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2220      	movs	r2, #32
 800722e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007254:	2b01      	cmp	r3, #1
 8007256:	d101      	bne.n	800725c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007258:	2302      	movs	r3, #2
 800725a:	e02d      	b.n	80072b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2224      	movs	r2, #36	; 0x24
 8007268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 0201 	bic.w	r2, r2, #1
 8007282:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	430a      	orrs	r2, r1
 8007296:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f811 	bl	80072c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d108      	bne.n	80072e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072e0:	e031      	b.n	8007346 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072e2:	2310      	movs	r3, #16
 80072e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072e6:	2310      	movs	r3, #16
 80072e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	0e5b      	lsrs	r3, r3, #25
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	0f5b      	lsrs	r3, r3, #29
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	7b3a      	ldrb	r2, [r7, #12]
 800730e:	4911      	ldr	r1, [pc, #68]	; (8007354 <UARTEx_SetNbDataToProcess+0x94>)
 8007310:	5c8a      	ldrb	r2, [r1, r2]
 8007312:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007316:	7b3a      	ldrb	r2, [r7, #12]
 8007318:	490f      	ldr	r1, [pc, #60]	; (8007358 <UARTEx_SetNbDataToProcess+0x98>)
 800731a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800731c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007320:	b29a      	uxth	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007328:	7bfb      	ldrb	r3, [r7, #15]
 800732a:	7b7a      	ldrb	r2, [r7, #13]
 800732c:	4909      	ldr	r1, [pc, #36]	; (8007354 <UARTEx_SetNbDataToProcess+0x94>)
 800732e:	5c8a      	ldrb	r2, [r1, r2]
 8007330:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007334:	7b7a      	ldrb	r2, [r7, #13]
 8007336:	4908      	ldr	r1, [pc, #32]	; (8007358 <UARTEx_SetNbDataToProcess+0x98>)
 8007338:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800733a:	fb93 f3f2 	sdiv	r3, r3, r2
 800733e:	b29a      	uxth	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007346:	bf00      	nop
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	080073f4 	.word	0x080073f4
 8007358:	080073fc 	.word	0x080073fc

0800735c <__libc_init_array>:
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	4d0d      	ldr	r5, [pc, #52]	; (8007394 <__libc_init_array+0x38>)
 8007360:	4c0d      	ldr	r4, [pc, #52]	; (8007398 <__libc_init_array+0x3c>)
 8007362:	1b64      	subs	r4, r4, r5
 8007364:	10a4      	asrs	r4, r4, #2
 8007366:	2600      	movs	r6, #0
 8007368:	42a6      	cmp	r6, r4
 800736a:	d109      	bne.n	8007380 <__libc_init_array+0x24>
 800736c:	4d0b      	ldr	r5, [pc, #44]	; (800739c <__libc_init_array+0x40>)
 800736e:	4c0c      	ldr	r4, [pc, #48]	; (80073a0 <__libc_init_array+0x44>)
 8007370:	f000 f820 	bl	80073b4 <_init>
 8007374:	1b64      	subs	r4, r4, r5
 8007376:	10a4      	asrs	r4, r4, #2
 8007378:	2600      	movs	r6, #0
 800737a:	42a6      	cmp	r6, r4
 800737c:	d105      	bne.n	800738a <__libc_init_array+0x2e>
 800737e:	bd70      	pop	{r4, r5, r6, pc}
 8007380:	f855 3b04 	ldr.w	r3, [r5], #4
 8007384:	4798      	blx	r3
 8007386:	3601      	adds	r6, #1
 8007388:	e7ee      	b.n	8007368 <__libc_init_array+0xc>
 800738a:	f855 3b04 	ldr.w	r3, [r5], #4
 800738e:	4798      	blx	r3
 8007390:	3601      	adds	r6, #1
 8007392:	e7f2      	b.n	800737a <__libc_init_array+0x1e>
 8007394:	0800740c 	.word	0x0800740c
 8007398:	0800740c 	.word	0x0800740c
 800739c:	0800740c 	.word	0x0800740c
 80073a0:	08007410 	.word	0x08007410

080073a4 <memset>:
 80073a4:	4402      	add	r2, r0
 80073a6:	4603      	mov	r3, r0
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d100      	bne.n	80073ae <memset+0xa>
 80073ac:	4770      	bx	lr
 80073ae:	f803 1b01 	strb.w	r1, [r3], #1
 80073b2:	e7f9      	b.n	80073a8 <memset+0x4>

080073b4 <_init>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	bf00      	nop
 80073b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ba:	bc08      	pop	{r3}
 80073bc:	469e      	mov	lr, r3
 80073be:	4770      	bx	lr

080073c0 <_fini>:
 80073c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c2:	bf00      	nop
 80073c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c6:	bc08      	pop	{r3}
 80073c8:	469e      	mov	lr, r3
 80073ca:	4770      	bx	lr
