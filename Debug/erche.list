
erche.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007118  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080073b0  080073b0  000173b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073e8  080073e8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080073e8  080073e8  000173e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073f0  080073f0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073f0  080073f0  000173f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073f4  080073f4  000173f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  080073f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  24000078  08007470  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000308  08007470  00020308  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d90c  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a9e  00000000  00000000  0003d9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00040450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00041400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000365d3  00000000  00000000  000422f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142b1  00000000  00000000  000788cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001618e6  00000000  00000000  0008cb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ee462  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c8  00000000  00000000  001ee4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007398 	.word	0x08007398

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	08007398 	.word	0x08007398

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <move>:
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,25);
		HAL_Delay(700);
	}
}
void move(int n)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if(n==1)//直行
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	f040 80c0 	bne.w	8000760 <move+0x190>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 80005e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e4:	48a0      	ldr	r0, [pc, #640]	; (8000868 <move+0x298>)
 80005e6:	f002 f85b 	bl	80026a0 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d127      	bne.n	8000640 <move+0x70>
 80005f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f4:	489c      	ldr	r0, [pc, #624]	; (8000868 <move+0x298>)
 80005f6:	f002 f853 	bl	80026a0 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d11f      	bne.n	8000640 <move+0x70>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,28);
 8000600:	4b9a      	ldr	r3, [pc, #616]	; (800086c <move+0x29c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	221c      	movs	r2, #28
 8000606:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000608:	4b98      	ldr	r3, [pc, #608]	; (800086c <move+0x29c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,28);
 8000610:	4b96      	ldr	r3, [pc, #600]	; (800086c <move+0x29c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	221c      	movs	r2, #28
 8000616:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000618:	4b94      	ldr	r3, [pc, #592]	; (800086c <move+0x29c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2200      	movs	r2, #0
 800061e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,14);
 8000620:	4b93      	ldr	r3, [pc, #588]	; (8000870 <move+0x2a0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	220e      	movs	r2, #14
 8000626:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000628:	4b91      	ldr	r3, [pc, #580]	; (8000870 <move+0x2a0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,30);
 8000630:	4b8f      	ldr	r3, [pc, #572]	; (8000870 <move+0x2a0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	221e      	movs	r2, #30
 8000636:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000638:	4b8d      	ldr	r3, [pc, #564]	; (8000870 <move+0x2a0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2200      	movs	r2, #0
 800063e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000640:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000644:	4888      	ldr	r0, [pc, #544]	; (8000868 <move+0x298>)
 8000646:	f002 f82b 	bl	80026a0 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d127      	bne.n	80006a0 <move+0xd0>
 8000650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000654:	4884      	ldr	r0, [pc, #528]	; (8000868 <move+0x298>)
 8000656:	f002 f823 	bl	80026a0 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d11f      	bne.n	80006a0 <move+0xd0>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,28);
 8000660:	4b82      	ldr	r3, [pc, #520]	; (800086c <move+0x29c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	221c      	movs	r2, #28
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000668:	4b80      	ldr	r3, [pc, #512]	; (800086c <move+0x29c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,28);
 8000670:	4b7e      	ldr	r3, [pc, #504]	; (800086c <move+0x29c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	221c      	movs	r2, #28
 8000676:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000678:	4b7c      	ldr	r3, [pc, #496]	; (800086c <move+0x29c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2200      	movs	r2, #0
 800067e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,30);
 8000680:	4b7b      	ldr	r3, [pc, #492]	; (8000870 <move+0x2a0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	221e      	movs	r2, #30
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000688:	4b79      	ldr	r3, [pc, #484]	; (8000870 <move+0x2a0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,14);
 8000690:	4b77      	ldr	r3, [pc, #476]	; (8000870 <move+0x2a0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	220e      	movs	r2, #14
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000698:	4b75      	ldr	r3, [pc, #468]	; (8000870 <move+0x2a0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2200      	movs	r2, #0
 800069e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 80006a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a4:	4870      	ldr	r0, [pc, #448]	; (8000868 <move+0x298>)
 80006a6:	f001 fffb 	bl	80026a0 <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d127      	bne.n	8000700 <move+0x130>
 80006b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b4:	486c      	ldr	r0, [pc, #432]	; (8000868 <move+0x298>)
 80006b6:	f001 fff3 	bl	80026a0 <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d11f      	bne.n	8000700 <move+0x130>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,28);
 80006c0:	4b6a      	ldr	r3, [pc, #424]	; (800086c <move+0x29c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	221c      	movs	r2, #28
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80006c8:	4b68      	ldr	r3, [pc, #416]	; (800086c <move+0x29c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2200      	movs	r2, #0
 80006ce:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,28);
 80006d0:	4b66      	ldr	r3, [pc, #408]	; (800086c <move+0x29c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	221c      	movs	r2, #28
 80006d6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80006d8:	4b64      	ldr	r3, [pc, #400]	; (800086c <move+0x29c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2200      	movs	r2, #0
 80006de:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,14);
 80006e0:	4b63      	ldr	r3, [pc, #396]	; (8000870 <move+0x2a0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	220e      	movs	r2, #14
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 80006e8:	4b61      	ldr	r3, [pc, #388]	; (8000870 <move+0x2a0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2200      	movs	r2, #0
 80006ee:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,15);
 80006f0:	4b5f      	ldr	r3, [pc, #380]	; (8000870 <move+0x2a0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	220f      	movs	r2, #15
 80006f6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 80006f8:	4b5d      	ldr	r3, [pc, #372]	; (8000870 <move+0x2a0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2200      	movs	r2, #0
 80006fe:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000700:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000704:	4858      	ldr	r0, [pc, #352]	; (8000868 <move+0x298>)
 8000706:	f001 ffcb 	bl	80026a0 <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d127      	bne.n	8000760 <move+0x190>
 8000710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000714:	4854      	ldr	r0, [pc, #336]	; (8000868 <move+0x298>)
 8000716:	f001 ffc3 	bl	80026a0 <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d11f      	bne.n	8000760 <move+0x190>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 8000720:	4b52      	ldr	r3, [pc, #328]	; (800086c <move+0x29c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2264      	movs	r2, #100	; 0x64
 8000726:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 8000728:	4b50      	ldr	r3, [pc, #320]	; (800086c <move+0x29c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2264      	movs	r2, #100	; 0x64
 800072e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 8000730:	4b4e      	ldr	r3, [pc, #312]	; (800086c <move+0x29c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2264      	movs	r2, #100	; 0x64
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 8000738:	4b4c      	ldr	r3, [pc, #304]	; (800086c <move+0x29c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2264      	movs	r2, #100	; 0x64
 800073e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 8000740:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <move+0x2a0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2264      	movs	r2, #100	; 0x64
 8000746:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 8000748:	4b49      	ldr	r3, [pc, #292]	; (8000870 <move+0x2a0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2264      	movs	r2, #100	; 0x64
 800074e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 8000750:	4b47      	ldr	r3, [pc, #284]	; (8000870 <move+0x2a0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2264      	movs	r2, #100	; 0x64
 8000756:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 8000758:	4b45      	ldr	r3, [pc, #276]	; (8000870 <move+0x2a0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2264      	movs	r2, #100	; 0x64
 800075e:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	if(n==2)//右行
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b02      	cmp	r3, #2
 8000764:	f040 80c7 	bne.w	80008f6 <move+0x326>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1)
 8000768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076c:	4841      	ldr	r0, [pc, #260]	; (8000874 <move+0x2a4>)
 800076e:	f001 ff97 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d126      	bne.n	80007c6 <move+0x1f6>
 8000778:	2120      	movs	r1, #32
 800077a:	483f      	ldr	r0, [pc, #252]	; (8000878 <move+0x2a8>)
 800077c:	f001 ff90 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d11f      	bne.n	80007c6 <move+0x1f6>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,19);
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <move+0x29c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2213      	movs	r2, #19
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800078e:	4b37      	ldr	r3, [pc, #220]	; (800086c <move+0x29c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2200      	movs	r2, #0
 8000794:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000796:	4b35      	ldr	r3, [pc, #212]	; (800086c <move+0x29c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2200      	movs	r2, #0
 800079c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,22);
 800079e:	4b33      	ldr	r3, [pc, #204]	; (800086c <move+0x29c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2216      	movs	r2, #22
 80007a4:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 80007a6:	4b32      	ldr	r3, [pc, #200]	; (8000870 <move+0x2a0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2210      	movs	r2, #16
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 80007ae:	4b30      	ldr	r3, [pc, #192]	; (8000870 <move+0x2a0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2200      	movs	r2, #0
 80007b4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 80007b6:	4b2e      	ldr	r3, [pc, #184]	; (8000870 <move+0x2a0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2200      	movs	r2, #0
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,24);
 80007be:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <move+0x2a0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2218      	movs	r2, #24
 80007c4:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 80007c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ca:	482a      	ldr	r0, [pc, #168]	; (8000874 <move+0x2a4>)
 80007cc:	f001 ff68 	bl	80026a0 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d126      	bne.n	8000824 <move+0x254>
 80007d6:	2120      	movs	r1, #32
 80007d8:	4827      	ldr	r0, [pc, #156]	; (8000878 <move+0x2a8>)
 80007da:	f001 ff61 	bl	80026a0 <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d11f      	bne.n	8000824 <move+0x254>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,24);
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <move+0x29c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2218      	movs	r2, #24
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <move+0x29c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2200      	movs	r2, #0
 80007f2:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <move+0x29c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2200      	movs	r2, #0
 80007fa:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,21);
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <move+0x29c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2215      	movs	r2, #21
 8000802:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,18);
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <move+0x2a0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2212      	movs	r2, #18
 800080a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <move+0x2a0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2200      	movs	r2, #0
 8000812:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <move+0x2a0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2200      	movs	r2, #0
 800081a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,19);
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <move+0x2a0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2213      	movs	r2, #19
 8000822:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1)
 8000824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000828:	4812      	ldr	r0, [pc, #72]	; (8000874 <move+0x2a4>)
 800082a:	f001 ff39 	bl	80026a0 <HAL_GPIO_ReadPin>
 800082e:	4603      	mov	r3, r0
 8000830:	2b01      	cmp	r3, #1
 8000832:	d131      	bne.n	8000898 <move+0x2c8>
 8000834:	2120      	movs	r1, #32
 8000836:	4810      	ldr	r0, [pc, #64]	; (8000878 <move+0x2a8>)
 8000838:	f001 ff32 	bl	80026a0 <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b01      	cmp	r3, #1
 8000840:	d12a      	bne.n	8000898 <move+0x2c8>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,19);
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <move+0x29c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2213      	movs	r2, #19
 8000848:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <move+0x29c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2200      	movs	r2, #0
 8000850:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <move+0x29c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2200      	movs	r2, #0
 8000858:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,20);
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <move+0x29c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2214      	movs	r2, #20
 8000860:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 8000862:	4b03      	ldr	r3, [pc, #12]	; (8000870 <move+0x2a0>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	e009      	b.n	800087c <move+0x2ac>
 8000868:	58020400 	.word	0x58020400
 800086c:	24000228 	.word	0x24000228
 8000870:	240000b0 	.word	0x240000b0
 8000874:	58020800 	.word	0x58020800
 8000878:	58021000 	.word	0x58021000
 800087c:	2210      	movs	r2, #16
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000880:	4b9a      	ldr	r3, [pc, #616]	; (8000aec <move+0x51c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2200      	movs	r2, #0
 8000886:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 8000888:	4b98      	ldr	r3, [pc, #608]	; (8000aec <move+0x51c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,19);
 8000890:	4b96      	ldr	r3, [pc, #600]	; (8000aec <move+0x51c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2213      	movs	r2, #19
 8000896:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	4894      	ldr	r0, [pc, #592]	; (8000af0 <move+0x520>)
 800089e:	f001 feff 	bl	80026a0 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d126      	bne.n	80008f6 <move+0x326>
 80008a8:	2120      	movs	r1, #32
 80008aa:	4892      	ldr	r0, [pc, #584]	; (8000af4 <move+0x524>)
 80008ac:	f001 fef8 	bl	80026a0 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d11f      	bne.n	80008f6 <move+0x326>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 80008b6:	4b90      	ldr	r3, [pc, #576]	; (8000af8 <move+0x528>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2264      	movs	r2, #100	; 0x64
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 80008be:	4b8e      	ldr	r3, [pc, #568]	; (8000af8 <move+0x528>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2264      	movs	r2, #100	; 0x64
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 80008c6:	4b8c      	ldr	r3, [pc, #560]	; (8000af8 <move+0x528>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2264      	movs	r2, #100	; 0x64
 80008cc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 80008ce:	4b8a      	ldr	r3, [pc, #552]	; (8000af8 <move+0x528>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2264      	movs	r2, #100	; 0x64
 80008d4:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 80008d6:	4b85      	ldr	r3, [pc, #532]	; (8000aec <move+0x51c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2264      	movs	r2, #100	; 0x64
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 80008de:	4b83      	ldr	r3, [pc, #524]	; (8000aec <move+0x51c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2264      	movs	r2, #100	; 0x64
 80008e4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 80008e6:	4b81      	ldr	r3, [pc, #516]	; (8000aec <move+0x51c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2264      	movs	r2, #100	; 0x64
 80008ec:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 80008ee:	4b7f      	ldr	r3, [pc, #508]	; (8000aec <move+0x51c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2264      	movs	r2, #100	; 0x64
 80008f4:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	if(n==3)//旋转
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d11f      	bne.n	800093c <move+0x36c>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 80008fc:	4b7e      	ldr	r3, [pc, #504]	; (8000af8 <move+0x528>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2200      	movs	r2, #0
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,28);//28
 8000904:	4b7c      	ldr	r3, [pc, #496]	; (8000af8 <move+0x528>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	221c      	movs	r2, #28
 800090a:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,26);//26
 800090c:	4b7a      	ldr	r3, [pc, #488]	; (8000af8 <move+0x528>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	221a      	movs	r2, #26
 8000912:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,0);
 8000914:	4b78      	ldr	r3, [pc, #480]	; (8000af8 <move+0x528>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2200      	movs	r2, #0
 800091a:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,24);//22
 800091c:	4b73      	ldr	r3, [pc, #460]	; (8000aec <move+0x51c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2218      	movs	r2, #24
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000924:	4b71      	ldr	r3, [pc, #452]	; (8000aec <move+0x51c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2200      	movs	r2, #0
 800092a:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 800092c:	4b6f      	ldr	r3, [pc, #444]	; (8000aec <move+0x51c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2200      	movs	r2, #0
 8000932:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,27);//27
 8000934:	4b6d      	ldr	r3, [pc, #436]	; (8000aec <move+0x51c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	221b      	movs	r2, #27
 800093a:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==4)//刹车
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b04      	cmp	r3, #4
 8000940:	d11f      	bne.n	8000982 <move+0x3b2>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 8000942:	4b6d      	ldr	r3, [pc, #436]	; (8000af8 <move+0x528>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2264      	movs	r2, #100	; 0x64
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 800094a:	4b6b      	ldr	r3, [pc, #428]	; (8000af8 <move+0x528>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2264      	movs	r2, #100	; 0x64
 8000950:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,100);
 8000952:	4b69      	ldr	r3, [pc, #420]	; (8000af8 <move+0x528>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2264      	movs	r2, #100	; 0x64
 8000958:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,100);
 800095a:	4b67      	ldr	r3, [pc, #412]	; (8000af8 <move+0x528>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2264      	movs	r2, #100	; 0x64
 8000960:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,100);
 8000962:	4b62      	ldr	r3, [pc, #392]	; (8000aec <move+0x51c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2264      	movs	r2, #100	; 0x64
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,100);
 800096a:	4b60      	ldr	r3, [pc, #384]	; (8000aec <move+0x51c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2264      	movs	r2, #100	; 0x64
 8000970:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,100);
 8000972:	4b5e      	ldr	r3, [pc, #376]	; (8000aec <move+0x51c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2264      	movs	r2, #100	; 0x64
 8000978:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,100);
 800097a:	4b5c      	ldr	r3, [pc, #368]	; (8000aec <move+0x51c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2264      	movs	r2, #100	; 0x64
 8000980:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==5)//倒车入库
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b05      	cmp	r3, #5
 8000986:	d11f      	bne.n	80009c8 <move+0x3f8>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 8000988:	4b5b      	ldr	r3, [pc, #364]	; (8000af8 <move+0x528>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2264      	movs	r2, #100	; 0x64
 800098e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 8000990:	4b59      	ldr	r3, [pc, #356]	; (8000af8 <move+0x528>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2264      	movs	r2, #100	; 0x64
 8000996:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,33);
 8000998:	4b57      	ldr	r3, [pc, #348]	; (8000af8 <move+0x528>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2221      	movs	r2, #33	; 0x21
 800099e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80009a0:	4b55      	ldr	r3, [pc, #340]	; (8000af8 <move+0x528>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2200      	movs	r2, #0
 80009a6:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,100);
 80009a8:	4b50      	ldr	r3, [pc, #320]	; (8000aec <move+0x51c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2264      	movs	r2, #100	; 0x64
 80009ae:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,100);
 80009b0:	4b4e      	ldr	r3, [pc, #312]	; (8000aec <move+0x51c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2264      	movs	r2, #100	; 0x64
 80009b6:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,33);
 80009b8:	4b4c      	ldr	r3, [pc, #304]	; (8000aec <move+0x51c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2221      	movs	r2, #33	; 0x21
 80009be:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 80009c0:	4b4a      	ldr	r3, [pc, #296]	; (8000aec <move+0x51c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2200      	movs	r2, #0
 80009c6:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==6)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	f040 80cc 	bne.w	8000b68 <move+0x598>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 80009d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d4:	4849      	ldr	r0, [pc, #292]	; (8000afc <move+0x52c>)
 80009d6:	f001 fe63 	bl	80026a0 <HAL_GPIO_ReadPin>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d127      	bne.n	8000a30 <move+0x460>
 80009e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e4:	4845      	ldr	r0, [pc, #276]	; (8000afc <move+0x52c>)
 80009e6:	f001 fe5b 	bl	80026a0 <HAL_GPIO_ReadPin>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d11f      	bne.n	8000a30 <move+0x460>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,23);
 80009f0:	4b41      	ldr	r3, [pc, #260]	; (8000af8 <move+0x528>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2217      	movs	r2, #23
 80009f6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80009f8:	4b3f      	ldr	r3, [pc, #252]	; (8000af8 <move+0x528>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2200      	movs	r2, #0
 80009fe:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,23);
 8000a00:	4b3d      	ldr	r3, [pc, #244]	; (8000af8 <move+0x528>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2217      	movs	r2, #23
 8000a06:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000a08:	4b3b      	ldr	r3, [pc, #236]	; (8000af8 <move+0x528>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,14);
 8000a10:	4b36      	ldr	r3, [pc, #216]	; (8000aec <move+0x51c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	220e      	movs	r2, #14
 8000a16:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000a18:	4b34      	ldr	r3, [pc, #208]	; (8000aec <move+0x51c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,27);
 8000a20:	4b32      	ldr	r3, [pc, #200]	; (8000aec <move+0x51c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	221b      	movs	r2, #27
 8000a26:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000a28:	4b30      	ldr	r3, [pc, #192]	; (8000aec <move+0x51c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000a30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a34:	4831      	ldr	r0, [pc, #196]	; (8000afc <move+0x52c>)
 8000a36:	f001 fe33 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d127      	bne.n	8000a90 <move+0x4c0>
 8000a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a44:	482d      	ldr	r0, [pc, #180]	; (8000afc <move+0x52c>)
 8000a46:	f001 fe2b 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d11f      	bne.n	8000a90 <move+0x4c0>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,23);
 8000a50:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <move+0x528>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2217      	movs	r2, #23
 8000a56:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <move+0x528>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,23);
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <move+0x528>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2217      	movs	r2, #23
 8000a66:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000a68:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <move+0x528>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,27);
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <move+0x51c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	221b      	movs	r2, #27
 8000a76:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <move+0x51c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,14);
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <move+0x51c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	220e      	movs	r2, #14
 8000a86:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <move+0x51c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000a90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a94:	4819      	ldr	r0, [pc, #100]	; (8000afc <move+0x52c>)
 8000a96:	f001 fe03 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d133      	bne.n	8000b08 <move+0x538>
 8000aa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa4:	4815      	ldr	r0, [pc, #84]	; (8000afc <move+0x52c>)
 8000aa6:	f001 fdfb 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d12b      	bne.n	8000b08 <move+0x538>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,23);
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <move+0x528>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2217      	movs	r2, #23
 8000ab6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <move+0x528>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2200      	movs	r2, #0
 8000abe:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,23);
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <move+0x528>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2217      	movs	r2, #23
 8000ac6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <move+0x528>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2200      	movs	r2, #0
 8000ace:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,12);
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <move+0x51c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	220c      	movs	r2, #12
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <move+0x51c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2200      	movs	r2, #0
 8000ade:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,12);
 8000ae0:	4b02      	ldr	r3, [pc, #8]	; (8000aec <move+0x51c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	220c      	movs	r2, #12
 8000ae6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ae8:	e00a      	b.n	8000b00 <move+0x530>
 8000aea:	bf00      	nop
 8000aec:	240000b0 	.word	0x240000b0
 8000af0:	58020800 	.word	0x58020800
 8000af4:	58021000 	.word	0x58021000
 8000af8:	24000228 	.word	0x24000228
 8000afc:	58020400 	.word	0x58020400
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <move+0x5a0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2200      	movs	r2, #0
 8000b06:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000b08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b0c:	4819      	ldr	r0, [pc, #100]	; (8000b74 <move+0x5a4>)
 8000b0e:	f001 fdc7 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d127      	bne.n	8000b68 <move+0x598>
 8000b18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1c:	4815      	ldr	r0, [pc, #84]	; (8000b74 <move+0x5a4>)
 8000b1e:	f001 fdbf 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d11f      	bne.n	8000b68 <move+0x598>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <move+0x5a8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2264      	movs	r2, #100	; 0x64
 8000b2e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <move+0x5a8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2264      	movs	r2, #100	; 0x64
 8000b36:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <move+0x5a8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2264      	movs	r2, #100	; 0x64
 8000b3e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <move+0x5a8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2264      	movs	r2, #100	; 0x64
 8000b46:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <move+0x5a0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2264      	movs	r2, #100	; 0x64
 8000b4e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <move+0x5a0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2264      	movs	r2, #100	; 0x64
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <move+0x5a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2264      	movs	r2, #100	; 0x64
 8000b5e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <move+0x5a0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2264      	movs	r2, #100	; 0x64
 8000b66:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	240000b0 	.word	0x240000b0
 8000b74:	58020400 	.word	0x58020400
 8000b78:	24000228 	.word	0x24000228

08000b7c <shuxian>:

void shuxian()
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	if(step==1)//直走
 8000b80:	4b87      	ldr	r3, [pc, #540]	; (8000da0 <shuxian+0x224>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d11c      	bne.n	8000bc2 <shuxian+0x46>
	{
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000b88:	2120      	movs	r1, #32
 8000b8a:	4886      	ldr	r0, [pc, #536]	; (8000da4 <shuxian+0x228>)
 8000b8c:	f001 fd88 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d102      	bne.n	8000b9c <shuxian+0x20>
		{
			Xflag=1;
 8000b96:	4b84      	ldr	r3, [pc, #528]	; (8000da8 <shuxian+0x22c>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Xflag==1)
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	4881      	ldr	r0, [pc, #516]	; (8000da4 <shuxian+0x228>)
 8000ba0:	f001 fd7e 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d10b      	bne.n	8000bc2 <shuxian+0x46>
 8000baa:	4b7f      	ldr	r3, [pc, #508]	; (8000da8 <shuxian+0x22c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d107      	bne.n	8000bc2 <shuxian+0x46>
		{
			X+=1;
 8000bb2:	4b7e      	ldr	r3, [pc, #504]	; (8000dac <shuxian+0x230>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	4a7c      	ldr	r2, [pc, #496]	; (8000dac <shuxian+0x230>)
 8000bba:	6013      	str	r3, [r2, #0]
			Xflag=0;
 8000bbc:	4b7a      	ldr	r3, [pc, #488]	; (8000da8 <shuxian+0x22c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==2||step==4||step==6||step==12||step==14)//旋转
 8000bc2:	4b77      	ldr	r3, [pc, #476]	; (8000da0 <shuxian+0x224>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d00f      	beq.n	8000bea <shuxian+0x6e>
 8000bca:	4b75      	ldr	r3, [pc, #468]	; (8000da0 <shuxian+0x224>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	d00b      	beq.n	8000bea <shuxian+0x6e>
 8000bd2:	4b73      	ldr	r3, [pc, #460]	; (8000da0 <shuxian+0x224>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b06      	cmp	r3, #6
 8000bd8:	d007      	beq.n	8000bea <shuxian+0x6e>
 8000bda:	4b71      	ldr	r3, [pc, #452]	; (8000da0 <shuxian+0x224>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b0c      	cmp	r3, #12
 8000be0:	d003      	beq.n	8000bea <shuxian+0x6e>
 8000be2:	4b6f      	ldr	r3, [pc, #444]	; (8000da0 <shuxian+0x224>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b0e      	cmp	r3, #14
 8000be8:	d12e      	bne.n	8000c48 <shuxian+0xcc>
	{
		if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1||HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1)&&turnflag==1)
 8000bea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bee:	4870      	ldr	r0, [pc, #448]	; (8000db0 <shuxian+0x234>)
 8000bf0:	f001 fd56 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d007      	beq.n	8000c0a <shuxian+0x8e>
 8000bfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bfe:	486c      	ldr	r0, [pc, #432]	; (8000db0 <shuxian+0x234>)
 8000c00:	f001 fd4e 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d10b      	bne.n	8000c22 <shuxian+0xa6>
 8000c0a:	4b6a      	ldr	r3, [pc, #424]	; (8000db4 <shuxian+0x238>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d107      	bne.n	8000c22 <shuxian+0xa6>
		{
			turn+=1;
 8000c12:	4b69      	ldr	r3, [pc, #420]	; (8000db8 <shuxian+0x23c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	3301      	adds	r3, #1
 8000c18:	4a67      	ldr	r2, [pc, #412]	; (8000db8 <shuxian+0x23c>)
 8000c1a:	6013      	str	r3, [r2, #0]
			turnflag=0;
 8000c1c:	4b65      	ldr	r3, [pc, #404]	; (8000db4 <shuxian+0x238>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0)
 8000c22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c26:	4862      	ldr	r0, [pc, #392]	; (8000db0 <shuxian+0x234>)
 8000c28:	f001 fd3a 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10a      	bne.n	8000c48 <shuxian+0xcc>
 8000c32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c36:	485e      	ldr	r0, [pc, #376]	; (8000db0 <shuxian+0x234>)
 8000c38:	f001 fd32 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d102      	bne.n	8000c48 <shuxian+0xcc>
		{
			turnflag=1;
 8000c42:	4b5c      	ldr	r3, [pc, #368]	; (8000db4 <shuxian+0x238>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==3||step==11||step==-1)//直走
 8000c48:	4b55      	ldr	r3, [pc, #340]	; (8000da0 <shuxian+0x224>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d008      	beq.n	8000c62 <shuxian+0xe6>
 8000c50:	4b53      	ldr	r3, [pc, #332]	; (8000da0 <shuxian+0x224>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b0b      	cmp	r3, #11
 8000c56:	d004      	beq.n	8000c62 <shuxian+0xe6>
 8000c58:	4b51      	ldr	r3, [pc, #324]	; (8000da0 <shuxian+0x224>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c60:	d122      	bne.n	8000ca8 <shuxian+0x12c>
	{
		turn=0;
 8000c62:	4b55      	ldr	r3, [pc, #340]	; (8000db8 <shuxian+0x23c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000c68:	4b52      	ldr	r3, [pc, #328]	; (8000db4 <shuxian+0x238>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Yflag==1)
 8000c6e:	2120      	movs	r1, #32
 8000c70:	484c      	ldr	r0, [pc, #304]	; (8000da4 <shuxian+0x228>)
 8000c72:	f001 fd15 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d10b      	bne.n	8000c94 <shuxian+0x118>
 8000c7c:	4b4f      	ldr	r3, [pc, #316]	; (8000dbc <shuxian+0x240>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d107      	bne.n	8000c94 <shuxian+0x118>
		{
			Y+=1;
 8000c84:	4b4e      	ldr	r3, [pc, #312]	; (8000dc0 <shuxian+0x244>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	4a4d      	ldr	r2, [pc, #308]	; (8000dc0 <shuxian+0x244>)
 8000c8c:	6013      	str	r3, [r2, #0]
			Yflag=0;
 8000c8e:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <shuxian+0x240>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000c94:	2120      	movs	r1, #32
 8000c96:	4843      	ldr	r0, [pc, #268]	; (8000da4 <shuxian+0x228>)
 8000c98:	f001 fd02 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d102      	bne.n	8000ca8 <shuxian+0x12c>
		{
			Yflag=1;
 8000ca2:	4b46      	ldr	r3, [pc, #280]	; (8000dbc <shuxian+0x240>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==5||step==13)//�????回一�????
 8000ca8:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <shuxian+0x224>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b05      	cmp	r3, #5
 8000cae:	d003      	beq.n	8000cb8 <shuxian+0x13c>
 8000cb0:	4b3b      	ldr	r3, [pc, #236]	; (8000da0 <shuxian+0x224>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b0d      	cmp	r3, #13
 8000cb6:	d122      	bne.n	8000cfe <shuxian+0x182>
	{
		turn=0;
 8000cb8:	4b3f      	ldr	r3, [pc, #252]	; (8000db8 <shuxian+0x23c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000cbe:	4b3d      	ldr	r3, [pc, #244]	; (8000db4 <shuxian+0x238>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Xflag==1)
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	4837      	ldr	r0, [pc, #220]	; (8000da4 <shuxian+0x228>)
 8000cc8:	f001 fcea 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d10b      	bne.n	8000cea <shuxian+0x16e>
 8000cd2:	4b35      	ldr	r3, [pc, #212]	; (8000da8 <shuxian+0x22c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d107      	bne.n	8000cea <shuxian+0x16e>
		{
			X-=1;
 8000cda:	4b34      	ldr	r3, [pc, #208]	; (8000dac <shuxian+0x230>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	4a32      	ldr	r2, [pc, #200]	; (8000dac <shuxian+0x230>)
 8000ce2:	6013      	str	r3, [r2, #0]
			Xflag=0;
 8000ce4:	4b30      	ldr	r3, [pc, #192]	; (8000da8 <shuxian+0x22c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000cea:	2120      	movs	r1, #32
 8000cec:	482d      	ldr	r0, [pc, #180]	; (8000da4 <shuxian+0x228>)
 8000cee:	f001 fcd7 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <shuxian+0x182>
		{
			Xflag=1;
 8000cf8:	4b2b      	ldr	r3, [pc, #172]	; (8000da8 <shuxian+0x22c>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==7||step==15)//�????回一�????
 8000cfe:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <shuxian+0x224>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b07      	cmp	r3, #7
 8000d04:	d003      	beq.n	8000d0e <shuxian+0x192>
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <shuxian+0x224>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b0f      	cmp	r3, #15
 8000d0c:	d122      	bne.n	8000d54 <shuxian+0x1d8>
	{
		turn=0;
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	; (8000db8 <shuxian+0x23c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000d14:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <shuxian+0x238>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Yflag==1)
 8000d1a:	2120      	movs	r1, #32
 8000d1c:	4821      	ldr	r0, [pc, #132]	; (8000da4 <shuxian+0x228>)
 8000d1e:	f001 fcbf 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d10b      	bne.n	8000d40 <shuxian+0x1c4>
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <shuxian+0x240>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d107      	bne.n	8000d40 <shuxian+0x1c4>
		{
			Y-=1;
 8000d30:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <shuxian+0x244>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	4a22      	ldr	r2, [pc, #136]	; (8000dc0 <shuxian+0x244>)
 8000d38:	6013      	str	r3, [r2, #0]
			Yflag=0;
 8000d3a:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <shuxian+0x240>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000d40:	2120      	movs	r1, #32
 8000d42:	4818      	ldr	r0, [pc, #96]	; (8000da4 <shuxian+0x228>)
 8000d44:	f001 fcac 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d102      	bne.n	8000d54 <shuxian+0x1d8>
		{
			Yflag=1;
 8000d4e:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <shuxian+0x240>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==8)
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <shuxian+0x224>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b08      	cmp	r3, #8
 8000d5a:	d11e      	bne.n	8000d9a <shuxian+0x21e>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
 8000d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d60:	4818      	ldr	r0, [pc, #96]	; (8000dc4 <shuxian+0x248>)
 8000d62:	f001 fc9d 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <shuxian+0x1f6>
		{
			Zflag=1;
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <shuxian+0x24c>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&Zflag==1)
 8000d72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d76:	4813      	ldr	r0, [pc, #76]	; (8000dc4 <shuxian+0x248>)
 8000d78:	f001 fc92 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d10b      	bne.n	8000d9a <shuxian+0x21e>
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <shuxian+0x24c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d107      	bne.n	8000d9a <shuxian+0x21e>
		{
			Z+=1;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <shuxian+0x250>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <shuxian+0x250>)
 8000d92:	6013      	str	r3, [r2, #0]
			Zflag=0;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <shuxian+0x24c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	24000094 	.word	0x24000094
 8000da4:	58021000 	.word	0x58021000
 8000da8:	24000058 	.word	0x24000058
 8000dac:	24000098 	.word	0x24000098
 8000db0:	58020400 	.word	0x58020400
 8000db4:	24000064 	.word	0x24000064
 8000db8:	240000a4 	.word	0x240000a4
 8000dbc:	2400005c 	.word	0x2400005c
 8000dc0:	2400009c 	.word	0x2400009c
 8000dc4:	58020800 	.word	0x58020800
 8000dc8:	24000060 	.word	0x24000060
 8000dcc:	240000a0 	.word	0x240000a0

08000dd0 <buzhou>:


void buzhou()
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	if(step==0)//等待语音
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <buzhou+0xb0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d171      	bne.n	8000ec0 <buzhou+0xf0>
	{
		HAL_UART_Receive(&huart3,&color,1,HAL_MAX_DELAY);
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8000de0:	2201      	movs	r2, #1
 8000de2:	4928      	ldr	r1, [pc, #160]	; (8000e84 <buzhou+0xb4>)
 8000de4:	4828      	ldr	r0, [pc, #160]	; (8000e88 <buzhou+0xb8>)
 8000de6:	f005 f9bf 	bl	8006168 <HAL_UART_Receive>
		if(color==1)
 8000dea:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <buzhou+0xb4>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d10a      	bne.n	8000e08 <buzhou+0x38>
		{
			HAL_UART_Transmit(&huart2,redGreen,sizeof(redGreen),1000);
 8000df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df6:	2208      	movs	r2, #8
 8000df8:	4924      	ldr	r1, [pc, #144]	; (8000e8c <buzhou+0xbc>)
 8000dfa:	4825      	ldr	r0, [pc, #148]	; (8000e90 <buzhou+0xc0>)
 8000dfc:	f005 f91e 	bl	800603c <HAL_UART_Transmit>
			step=1;
 8000e00:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <buzhou+0xb0>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	e05b      	b.n	8000ec0 <buzhou+0xf0>
		}
		else if(color==2)
 8000e08:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <buzhou+0xb4>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d10a      	bne.n	8000e26 <buzhou+0x56>
		{
			HAL_UART_Transmit(&huart2,redBlue,sizeof(redBlue),1000);
 8000e10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e14:	2208      	movs	r2, #8
 8000e16:	491f      	ldr	r1, [pc, #124]	; (8000e94 <buzhou+0xc4>)
 8000e18:	481d      	ldr	r0, [pc, #116]	; (8000e90 <buzhou+0xc0>)
 8000e1a:	f005 f90f 	bl	800603c <HAL_UART_Transmit>
			step=1;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <buzhou+0xb0>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	e04c      	b.n	8000ec0 <buzhou+0xf0>
		}
		else if(color==3)
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <buzhou+0xb4>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d10a      	bne.n	8000e44 <buzhou+0x74>
		{
			HAL_UART_Transmit(&huart2,greenBlue,sizeof(greenBlue),1000);
 8000e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e32:	2208      	movs	r2, #8
 8000e34:	4918      	ldr	r1, [pc, #96]	; (8000e98 <buzhou+0xc8>)
 8000e36:	4816      	ldr	r0, [pc, #88]	; (8000e90 <buzhou+0xc0>)
 8000e38:	f005 f900 	bl	800603c <HAL_UART_Transmit>
			step=1;
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <buzhou+0xb0>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	e03d      	b.n	8000ec0 <buzhou+0xf0>
		}
		else if(color==4)
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <buzhou+0xb4>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b04      	cmp	r3, #4
 8000e4a:	d10a      	bne.n	8000e62 <buzhou+0x92>
		{
			HAL_UART_Transmit(&huart2,greenRed,sizeof(greenRed),1000);
 8000e4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e50:	2208      	movs	r2, #8
 8000e52:	4912      	ldr	r1, [pc, #72]	; (8000e9c <buzhou+0xcc>)
 8000e54:	480e      	ldr	r0, [pc, #56]	; (8000e90 <buzhou+0xc0>)
 8000e56:	f005 f8f1 	bl	800603c <HAL_UART_Transmit>
			step=1;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <buzhou+0xb0>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e02e      	b.n	8000ec0 <buzhou+0xf0>
		}
		else if(color==5)
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <buzhou+0xb4>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b05      	cmp	r3, #5
 8000e68:	d11c      	bne.n	8000ea4 <buzhou+0xd4>
		{
			HAL_UART_Transmit(&huart2,blueRed,sizeof(blueRed),1000);
 8000e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6e:	2208      	movs	r2, #8
 8000e70:	490b      	ldr	r1, [pc, #44]	; (8000ea0 <buzhou+0xd0>)
 8000e72:	4807      	ldr	r0, [pc, #28]	; (8000e90 <buzhou+0xc0>)
 8000e74:	f005 f8e2 	bl	800603c <HAL_UART_Transmit>
			step=1;
 8000e78:	4b01      	ldr	r3, [pc, #4]	; (8000e80 <buzhou+0xb0>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	e01f      	b.n	8000ec0 <buzhou+0xf0>
 8000e80:	24000094 	.word	0x24000094
 8000e84:	240000ac 	.word	0x240000ac
 8000e88:	240000fc 	.word	0x240000fc
 8000e8c:	24000000 	.word	0x24000000
 8000e90:	24000274 	.word	0x24000274
 8000e94:	24000010 	.word	0x24000010
 8000e98:	24000028 	.word	0x24000028
 8000e9c:	24000008 	.word	0x24000008
 8000ea0:	24000018 	.word	0x24000018
		}
		else if(color==6)
 8000ea4:	4bb6      	ldr	r3, [pc, #728]	; (8001180 <buzhou+0x3b0>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b06      	cmp	r3, #6
 8000eaa:	d109      	bne.n	8000ec0 <buzhou+0xf0>
		{
			HAL_UART_Transmit(&huart2,blueGreen,sizeof(blueGreen),1000);
 8000eac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb0:	2208      	movs	r2, #8
 8000eb2:	49b4      	ldr	r1, [pc, #720]	; (8001184 <buzhou+0x3b4>)
 8000eb4:	48b4      	ldr	r0, [pc, #720]	; (8001188 <buzhou+0x3b8>)
 8000eb6:	f005 f8c1 	bl	800603c <HAL_UART_Transmit>
			step=1;
 8000eba:	4bb4      	ldr	r3, [pc, #720]	; (800118c <buzhou+0x3bc>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
		}

//		step=1;
	}
	if(step==1)//move straight
 8000ec0:	4bb2      	ldr	r3, [pc, #712]	; (800118c <buzhou+0x3bc>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d116      	bne.n	8000ef6 <buzhou+0x126>
	{
		move(1);
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f7ff fb81 	bl	80005d0 <move>
		shuxian();
 8000ece:	f7ff fe55 	bl	8000b7c <shuxian>
		if(X==2&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000ed2:	4baf      	ldr	r3, [pc, #700]	; (8001190 <buzhou+0x3c0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d10d      	bne.n	8000ef6 <buzhou+0x126>
 8000eda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ede:	48ad      	ldr	r0, [pc, #692]	; (8001194 <buzhou+0x3c4>)
 8000ee0:	f001 fbde 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d105      	bne.n	8000ef6 <buzhou+0x126>
		{
			move(4);
 8000eea:	2004      	movs	r0, #4
 8000eec:	f7ff fb70 	bl	80005d0 <move>
			step=2;
 8000ef0:	4ba6      	ldr	r3, [pc, #664]	; (800118c <buzhou+0x3bc>)
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==2)//turn right
 8000ef6:	4ba5      	ldr	r3, [pc, #660]	; (800118c <buzhou+0x3bc>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d10f      	bne.n	8000f1e <buzhou+0x14e>
	{
		move(3);
 8000efe:	2003      	movs	r0, #3
 8000f00:	f7ff fb66 	bl	80005d0 <move>
		shuxian();
 8000f04:	f7ff fe3a 	bl	8000b7c <shuxian>
		if(turn>=4)
 8000f08:	4ba3      	ldr	r3, [pc, #652]	; (8001198 <buzhou+0x3c8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	dd06      	ble.n	8000f1e <buzhou+0x14e>
		{
			move(4);
 8000f10:	2004      	movs	r0, #4
 8000f12:	f7ff fb5d 	bl	80005d0 <move>
			step=-1;
 8000f16:	4b9d      	ldr	r3, [pc, #628]	; (800118c <buzhou+0x3bc>)
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	601a      	str	r2, [r3, #0]
//			step=3;
		}
	}
	if(step==-1)//move straight
 8000f1e:	4b9b      	ldr	r3, [pc, #620]	; (800118c <buzhou+0x3bc>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f26:	d117      	bne.n	8000f58 <buzhou+0x188>
	{
		move(1);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f7ff fb51 	bl	80005d0 <move>
		shuxian();
 8000f2e:	f7ff fe25 	bl	8000b7c <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000f32:	4b9a      	ldr	r3, [pc, #616]	; (800119c <buzhou+0x3cc>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d10e      	bne.n	8000f58 <buzhou+0x188>
 8000f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3e:	4895      	ldr	r0, [pc, #596]	; (8001194 <buzhou+0x3c4>)
 8000f40:	f001 fbae 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d106      	bne.n	8000f58 <buzhou+0x188>
		{
			move(4);
 8000f4a:	2004      	movs	r0, #4
 8000f4c:	f7ff fb40 	bl	80005d0 <move>
			step=-2;
 8000f50:	4b8e      	ldr	r3, [pc, #568]	; (800118c <buzhou+0x3bc>)
 8000f52:	f06f 0201 	mvn.w	r2, #1
 8000f56:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-2)//wait for car1 and activate arm
 8000f58:	4b8c      	ldr	r3, [pc, #560]	; (800118c <buzhou+0x3bc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f113 0f02 	cmn.w	r3, #2
 8000f60:	d11e      	bne.n	8000fa0 <buzhou+0x1d0>
	{
		if(arm==0)
 8000f62:	4b8f      	ldr	r3, [pc, #572]	; (80011a0 <buzhou+0x3d0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d109      	bne.n	8000f7e <buzhou+0x1ae>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A0,sizeof(A0),0xffff);//机械臂初始化
 8000f6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f6e:	2205      	movs	r2, #5
 8000f70:	498c      	ldr	r1, [pc, #560]	; (80011a4 <buzhou+0x3d4>)
 8000f72:	488d      	ldr	r0, [pc, #564]	; (80011a8 <buzhou+0x3d8>)
 8000f74:	f005 f862 	bl	800603c <HAL_UART_Transmit>
			arm=1;
 8000f78:	4b89      	ldr	r3, [pc, #548]	; (80011a0 <buzhou+0x3d0>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]
		}
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK&&arm==1)
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	2201      	movs	r2, #1
 8000f84:	4989      	ldr	r1, [pc, #548]	; (80011ac <buzhou+0x3dc>)
 8000f86:	488a      	ldr	r0, [pc, #552]	; (80011b0 <buzhou+0x3e0>)
 8000f88:	f005 f8ee 	bl	8006168 <HAL_UART_Receive>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d106      	bne.n	8000fa0 <buzhou+0x1d0>
 8000f92:	4b83      	ldr	r3, [pc, #524]	; (80011a0 <buzhou+0x3d0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d102      	bne.n	8000fa0 <buzhou+0x1d0>
		{
			step=3;
 8000f9a:	4b7c      	ldr	r3, [pc, #496]	; (800118c <buzhou+0x3bc>)
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==3)//move straight
 8000fa0:	4b7a      	ldr	r3, [pc, #488]	; (800118c <buzhou+0x3bc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d122      	bne.n	8000fee <buzhou+0x21e>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)A0,sizeof(A0),0xffff);
 8000fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fac:	2205      	movs	r2, #5
 8000fae:	497d      	ldr	r1, [pc, #500]	; (80011a4 <buzhou+0x3d4>)
 8000fb0:	487d      	ldr	r0, [pc, #500]	; (80011a8 <buzhou+0x3d8>)
 8000fb2:	f005 f843 	bl	800603c <HAL_UART_Transmit>
		move(6);
 8000fb6:	2006      	movs	r0, #6
 8000fb8:	f7ff fb0a 	bl	80005d0 <move>
		shuxian();
 8000fbc:	f7ff fdde 	bl	8000b7c <shuxian>
		if(Y==2&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000fc0:	4b76      	ldr	r3, [pc, #472]	; (800119c <buzhou+0x3cc>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d112      	bne.n	8000fee <buzhou+0x21e>
 8000fc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fcc:	4871      	ldr	r0, [pc, #452]	; (8001194 <buzhou+0x3c4>)
 8000fce:	f001 fb67 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d10a      	bne.n	8000fee <buzhou+0x21e>
		{
			move(4);
 8000fd8:	2004      	movs	r0, #4
 8000fda:	f7ff faf9 	bl	80005d0 <move>
			HAL_Delay(1000);
 8000fde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe2:	f001 f899 	bl	8002118 <HAL_Delay>
//			step=11;
//			step=4;
			step=-4;
 8000fe6:	4b69      	ldr	r3, [pc, #420]	; (800118c <buzhou+0x3bc>)
 8000fe8:	f06f 0203 	mvn.w	r2, #3
 8000fec:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-4)//wait for car1 to catch
 8000fee:	4b67      	ldr	r3, [pc, #412]	; (800118c <buzhou+0x3bc>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f113 0f04 	cmn.w	r3, #4
 8000ff6:	d114      	bne.n	8001022 <buzhou+0x252>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	496b      	ldr	r1, [pc, #428]	; (80011ac <buzhou+0x3dc>)
 8001000:	486b      	ldr	r0, [pc, #428]	; (80011b0 <buzhou+0x3e0>)
 8001002:	f005 f8b1 	bl	8006168 <HAL_UART_Receive>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d10a      	bne.n	8001022 <buzhou+0x252>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A1,sizeof(A1),0xffff);
 800100c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001010:	2205      	movs	r2, #5
 8001012:	4968      	ldr	r1, [pc, #416]	; (80011b4 <buzhou+0x3e4>)
 8001014:	4864      	ldr	r0, [pc, #400]	; (80011a8 <buzhou+0x3d8>)
 8001016:	f005 f811 	bl	800603c <HAL_UART_Transmit>
			step=-5;
 800101a:	4b5c      	ldr	r3, [pc, #368]	; (800118c <buzhou+0x3bc>)
 800101c:	f06f 0204 	mvn.w	r2, #4
 8001020:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-5)
 8001022:	4b5a      	ldr	r3, [pc, #360]	; (800118c <buzhou+0x3bc>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f113 0f05 	cmn.w	r3, #5
 800102a:	d114      	bne.n	8001056 <buzhou+0x286>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	2201      	movs	r2, #1
 8001032:	495e      	ldr	r1, [pc, #376]	; (80011ac <buzhou+0x3dc>)
 8001034:	485e      	ldr	r0, [pc, #376]	; (80011b0 <buzhou+0x3e0>)
 8001036:	f005 f897 	bl	8006168 <HAL_UART_Receive>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10a      	bne.n	8001056 <buzhou+0x286>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A2,sizeof(A2),0xffff);
 8001040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001044:	2205      	movs	r2, #5
 8001046:	495c      	ldr	r1, [pc, #368]	; (80011b8 <buzhou+0x3e8>)
 8001048:	4857      	ldr	r0, [pc, #348]	; (80011a8 <buzhou+0x3d8>)
 800104a:	f004 fff7 	bl	800603c <HAL_UART_Transmit>
			step=-6;
 800104e:	4b4f      	ldr	r3, [pc, #316]	; (800118c <buzhou+0x3bc>)
 8001050:	f06f 0205 	mvn.w	r2, #5
 8001054:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-6)//wait for car1 to move
 8001056:	4b4d      	ldr	r3, [pc, #308]	; (800118c <buzhou+0x3bc>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f113 0f06 	cmn.w	r3, #6
 800105e:	d10c      	bne.n	800107a <buzhou+0x2aa>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	2201      	movs	r2, #1
 8001066:	4951      	ldr	r1, [pc, #324]	; (80011ac <buzhou+0x3dc>)
 8001068:	4851      	ldr	r0, [pc, #324]	; (80011b0 <buzhou+0x3e0>)
 800106a:	f005 f87d 	bl	8006168 <HAL_UART_Receive>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <buzhou+0x2aa>
		{
//			step=4;
			step=11;
 8001074:	4b45      	ldr	r3, [pc, #276]	; (800118c <buzhou+0x3bc>)
 8001076:	220b      	movs	r2, #11
 8001078:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==4)//turn right
 800107a:	4b44      	ldr	r3, [pc, #272]	; (800118c <buzhou+0x3bc>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b04      	cmp	r3, #4
 8001080:	d10e      	bne.n	80010a0 <buzhou+0x2d0>
	{
		move(3);
 8001082:	2003      	movs	r0, #3
 8001084:	f7ff faa4 	bl	80005d0 <move>
		shuxian();
 8001088:	f7ff fd78 	bl	8000b7c <shuxian>
		if(turn>=4)
 800108c:	4b42      	ldr	r3, [pc, #264]	; (8001198 <buzhou+0x3c8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b03      	cmp	r3, #3
 8001092:	dd05      	ble.n	80010a0 <buzhou+0x2d0>
		{
			move(4);
 8001094:	2004      	movs	r0, #4
 8001096:	f7ff fa9b 	bl	80005d0 <move>
			step=5;
 800109a:	4b3c      	ldr	r3, [pc, #240]	; (800118c <buzhou+0x3bc>)
 800109c:	2205      	movs	r2, #5
 800109e:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==5)//move straight
 80010a0:	4b3a      	ldr	r3, [pc, #232]	; (800118c <buzhou+0x3bc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	d116      	bne.n	80010d6 <buzhou+0x306>
	{
		move(6);
 80010a8:	2006      	movs	r0, #6
 80010aa:	f7ff fa91 	bl	80005d0 <move>
		shuxian();
 80010ae:	f7ff fd65 	bl	8000b7c <shuxian>
		if(X==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 80010b2:	4b37      	ldr	r3, [pc, #220]	; (8001190 <buzhou+0x3c0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d10d      	bne.n	80010d6 <buzhou+0x306>
 80010ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010be:	4835      	ldr	r0, [pc, #212]	; (8001194 <buzhou+0x3c4>)
 80010c0:	f001 faee 	bl	80026a0 <HAL_GPIO_ReadPin>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d105      	bne.n	80010d6 <buzhou+0x306>
		{
			move(4);
 80010ca:	2004      	movs	r0, #4
 80010cc:	f7ff fa80 	bl	80005d0 <move>
			step=6;
 80010d0:	4b2e      	ldr	r3, [pc, #184]	; (800118c <buzhou+0x3bc>)
 80010d2:	2206      	movs	r2, #6
 80010d4:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==6)//turn right
 80010d6:	4b2d      	ldr	r3, [pc, #180]	; (800118c <buzhou+0x3bc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d10e      	bne.n	80010fc <buzhou+0x32c>
	{
		move(3);
 80010de:	2003      	movs	r0, #3
 80010e0:	f7ff fa76 	bl	80005d0 <move>
		shuxian();
 80010e4:	f7ff fd4a 	bl	8000b7c <shuxian>
		if(turn>=4)
 80010e8:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <buzhou+0x3c8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	dd05      	ble.n	80010fc <buzhou+0x32c>
		{
			move(4);
 80010f0:	2004      	movs	r0, #4
 80010f2:	f7ff fa6d 	bl	80005d0 <move>
			step=7;
 80010f6:	4b25      	ldr	r3, [pc, #148]	; (800118c <buzhou+0x3bc>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==7)//move straight
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <buzhou+0x3bc>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b07      	cmp	r3, #7
 8001102:	d116      	bne.n	8001132 <buzhou+0x362>
	{
		move(1);
 8001104:	2001      	movs	r0, #1
 8001106:	f7ff fa63 	bl	80005d0 <move>
		shuxian();
 800110a:	f7ff fd37 	bl	8000b7c <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <buzhou+0x3cc>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d10d      	bne.n	8001132 <buzhou+0x362>
 8001116:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111a:	481e      	ldr	r0, [pc, #120]	; (8001194 <buzhou+0x3c4>)
 800111c:	f001 fac0 	bl	80026a0 <HAL_GPIO_ReadPin>
 8001120:	4603      	mov	r3, r0
 8001122:	2b01      	cmp	r3, #1
 8001124:	d105      	bne.n	8001132 <buzhou+0x362>
		{
			move(4);
 8001126:	2004      	movs	r0, #4
 8001128:	f7ff fa52 	bl	80005d0 <move>
			step=8;
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <buzhou+0x3bc>)
 800112e:	2208      	movs	r2, #8
 8001130:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==8)
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <buzhou+0x3bc>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b08      	cmp	r3, #8
 8001138:	d10e      	bne.n	8001158 <buzhou+0x388>
	{
		move(5);
 800113a:	2005      	movs	r0, #5
 800113c:	f7ff fa48 	bl	80005d0 <move>
		shuxian();
 8001140:	f7ff fd1c 	bl	8000b7c <shuxian>
		if(Z==3)
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <buzhou+0x3ec>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d105      	bne.n	8001158 <buzhou+0x388>
		{
			move(4);
 800114c:	2004      	movs	r0, #4
 800114e:	f7ff fa3f 	bl	80005d0 <move>
			step=9;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <buzhou+0x3bc>)
 8001154:	2209      	movs	r2, #9
 8001156:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==11)//move straight
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <buzhou+0x3bc>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b0b      	cmp	r3, #11
 800115e:	d13d      	bne.n	80011dc <buzhou+0x40c>
	{
		move(1);
 8001160:	2001      	movs	r0, #1
 8001162:	f7ff fa35 	bl	80005d0 <move>
		shuxian();
 8001166:	f7ff fd09 	bl	8000b7c <shuxian>
		if(Y==4&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <buzhou+0x3cc>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b04      	cmp	r3, #4
 8001170:	d134      	bne.n	80011dc <buzhou+0x40c>
 8001172:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001176:	4807      	ldr	r0, [pc, #28]	; (8001194 <buzhou+0x3c4>)
 8001178:	f001 fa92 	bl	80026a0 <HAL_GPIO_ReadPin>
 800117c:	e020      	b.n	80011c0 <buzhou+0x3f0>
 800117e:	bf00      	nop
 8001180:	240000ac 	.word	0x240000ac
 8001184:	24000020 	.word	0x24000020
 8001188:	24000274 	.word	0x24000274
 800118c:	24000094 	.word	0x24000094
 8001190:	24000098 	.word	0x24000098
 8001194:	58020800 	.word	0x58020800
 8001198:	240000a4 	.word	0x240000a4
 800119c:	2400009c 	.word	0x2400009c
 80011a0:	240000a8 	.word	0x240000a8
 80011a4:	24000030 	.word	0x24000030
 80011a8:	24000198 	.word	0x24000198
 80011ac:	240000ad 	.word	0x240000ad
 80011b0:	240000fc 	.word	0x240000fc
 80011b4:	24000038 	.word	0x24000038
 80011b8:	24000040 	.word	0x24000040
 80011bc:	240000a0 	.word	0x240000a0
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d10a      	bne.n	80011dc <buzhou+0x40c>
		{
			move(4);
 80011c6:	2004      	movs	r0, #4
 80011c8:	f7ff fa02 	bl	80005d0 <move>
			HAL_Delay(1000);
 80011cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d0:	f000 ffa2 	bl	8002118 <HAL_Delay>
			step=-8;
 80011d4:	4b55      	ldr	r3, [pc, #340]	; (800132c <buzhou+0x55c>)
 80011d6:	f06f 0207 	mvn.w	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
//			step=12;
		}
	}
	if(step==-8)//arm move
 80011dc:	4b53      	ldr	r3, [pc, #332]	; (800132c <buzhou+0x55c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f113 0f08 	cmn.w	r3, #8
 80011e4:	d114      	bne.n	8001210 <buzhou+0x440>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	2201      	movs	r2, #1
 80011ec:	4950      	ldr	r1, [pc, #320]	; (8001330 <buzhou+0x560>)
 80011ee:	4851      	ldr	r0, [pc, #324]	; (8001334 <buzhou+0x564>)
 80011f0:	f004 ffba 	bl	8006168 <HAL_UART_Receive>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10a      	bne.n	8001210 <buzhou+0x440>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A5,sizeof(A5),0xffff);
 80011fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fe:	2205      	movs	r2, #5
 8001200:	494d      	ldr	r1, [pc, #308]	; (8001338 <buzhou+0x568>)
 8001202:	484e      	ldr	r0, [pc, #312]	; (800133c <buzhou+0x56c>)
 8001204:	f004 ff1a 	bl	800603c <HAL_UART_Transmit>
			step=-9;
 8001208:	4b48      	ldr	r3, [pc, #288]	; (800132c <buzhou+0x55c>)
 800120a:	f06f 0208 	mvn.w	r2, #8
 800120e:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-9)//arm move
 8001210:	4b46      	ldr	r3, [pc, #280]	; (800132c <buzhou+0x55c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f113 0f09 	cmn.w	r3, #9
 8001218:	d117      	bne.n	800124a <buzhou+0x47a>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	2201      	movs	r2, #1
 8001220:	4943      	ldr	r1, [pc, #268]	; (8001330 <buzhou+0x560>)
 8001222:	4844      	ldr	r0, [pc, #272]	; (8001334 <buzhou+0x564>)
 8001224:	f004 ffa0 	bl	8006168 <HAL_UART_Receive>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10d      	bne.n	800124a <buzhou+0x47a>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A6,sizeof(A6),0xffff);
 800122e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001232:	2205      	movs	r2, #5
 8001234:	4942      	ldr	r1, [pc, #264]	; (8001340 <buzhou+0x570>)
 8001236:	4841      	ldr	r0, [pc, #260]	; (800133c <buzhou+0x56c>)
 8001238:	f004 ff00 	bl	800603c <HAL_UART_Transmit>
			HAL_Delay(35000);
 800123c:	f648 00b8 	movw	r0, #35000	; 0x88b8
 8001240:	f000 ff6a 	bl	8002118 <HAL_Delay>
			step=12;
 8001244:	4b39      	ldr	r3, [pc, #228]	; (800132c <buzhou+0x55c>)
 8001246:	220c      	movs	r2, #12
 8001248:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-10)//wait for car1
 800124a:	4b38      	ldr	r3, [pc, #224]	; (800132c <buzhou+0x55c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f113 0f0a 	cmn.w	r3, #10
 8001252:	d10c      	bne.n	800126e <buzhou+0x49e>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
 8001258:	2201      	movs	r2, #1
 800125a:	4935      	ldr	r1, [pc, #212]	; (8001330 <buzhou+0x560>)
 800125c:	4835      	ldr	r0, [pc, #212]	; (8001334 <buzhou+0x564>)
 800125e:	f004 ff83 	bl	8006168 <HAL_UART_Receive>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <buzhou+0x49e>
		{
			step=12;
 8001268:	4b30      	ldr	r3, [pc, #192]	; (800132c <buzhou+0x55c>)
 800126a:	220c      	movs	r2, #12
 800126c:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==12)
 800126e:	4b2f      	ldr	r3, [pc, #188]	; (800132c <buzhou+0x55c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b0c      	cmp	r3, #12
 8001274:	d10e      	bne.n	8001294 <buzhou+0x4c4>
	{
		move(3);
 8001276:	2003      	movs	r0, #3
 8001278:	f7ff f9aa 	bl	80005d0 <move>
		shuxian();
 800127c:	f7ff fc7e 	bl	8000b7c <shuxian>
		if(turn>=4)
 8001280:	4b30      	ldr	r3, [pc, #192]	; (8001344 <buzhou+0x574>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b03      	cmp	r3, #3
 8001286:	dd05      	ble.n	8001294 <buzhou+0x4c4>
		{
			move(4);
 8001288:	2004      	movs	r0, #4
 800128a:	f7ff f9a1 	bl	80005d0 <move>
			step=13;
 800128e:	4b27      	ldr	r3, [pc, #156]	; (800132c <buzhou+0x55c>)
 8001290:	220d      	movs	r2, #13
 8001292:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==13)
 8001294:	4b25      	ldr	r3, [pc, #148]	; (800132c <buzhou+0x55c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b0d      	cmp	r3, #13
 800129a:	d116      	bne.n	80012ca <buzhou+0x4fa>
	{
		move(6);
 800129c:	2006      	movs	r0, #6
 800129e:	f7ff f997 	bl	80005d0 <move>
		shuxian();
 80012a2:	f7ff fc6b 	bl	8000b7c <shuxian>
		if(X==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 80012a6:	4b28      	ldr	r3, [pc, #160]	; (8001348 <buzhou+0x578>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d10d      	bne.n	80012ca <buzhou+0x4fa>
 80012ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b2:	4826      	ldr	r0, [pc, #152]	; (800134c <buzhou+0x57c>)
 80012b4:	f001 f9f4 	bl	80026a0 <HAL_GPIO_ReadPin>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d105      	bne.n	80012ca <buzhou+0x4fa>
		{
			move(4);
 80012be:	2004      	movs	r0, #4
 80012c0:	f7ff f986 	bl	80005d0 <move>
			step=14;
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <buzhou+0x55c>)
 80012c6:	220e      	movs	r2, #14
 80012c8:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==14)
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <buzhou+0x55c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b0e      	cmp	r3, #14
 80012d0:	d10e      	bne.n	80012f0 <buzhou+0x520>
	{
		move(3);
 80012d2:	2003      	movs	r0, #3
 80012d4:	f7ff f97c 	bl	80005d0 <move>
		shuxian();
 80012d8:	f7ff fc50 	bl	8000b7c <shuxian>
		if(turn>=4)
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <buzhou+0x574>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	dd05      	ble.n	80012f0 <buzhou+0x520>
		{
			move(4);
 80012e4:	2004      	movs	r0, #4
 80012e6:	f7ff f973 	bl	80005d0 <move>
			step=15;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <buzhou+0x55c>)
 80012ec:	220f      	movs	r2, #15
 80012ee:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==15)//move straight
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <buzhou+0x55c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b0f      	cmp	r3, #15
 80012f6:	d116      	bne.n	8001326 <buzhou+0x556>
	{
		move(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f7ff f969 	bl	80005d0 <move>
		shuxian();
 80012fe:	f7ff fc3d 	bl	8000b7c <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <buzhou+0x580>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d10d      	bne.n	8001326 <buzhou+0x556>
 800130a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800130e:	480f      	ldr	r0, [pc, #60]	; (800134c <buzhou+0x57c>)
 8001310:	f001 f9c6 	bl	80026a0 <HAL_GPIO_ReadPin>
 8001314:	4603      	mov	r3, r0
 8001316:	2b01      	cmp	r3, #1
 8001318:	d105      	bne.n	8001326 <buzhou+0x556>
		{
			move(4);
 800131a:	2004      	movs	r0, #4
 800131c:	f7ff f958 	bl	80005d0 <move>
			step=8;
 8001320:	4b02      	ldr	r3, [pc, #8]	; (800132c <buzhou+0x55c>)
 8001322:	2208      	movs	r2, #8
 8001324:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	24000094 	.word	0x24000094
 8001330:	240000ad 	.word	0x240000ad
 8001334:	240000fc 	.word	0x240000fc
 8001338:	24000048 	.word	0x24000048
 800133c:	24000198 	.word	0x24000198
 8001340:	24000050 	.word	0x24000050
 8001344:	240000a4 	.word	0x240000a4
 8001348:	24000098 	.word	0x24000098
 800134c:	58020800 	.word	0x58020800
 8001350:	2400009c 	.word	0x2400009c

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001358:	f000 fe4c 	bl	8001ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135c:	f000 f834 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001360:	f000 fb22 	bl	80019a8 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001364:	f000 f96c 	bl	8001640 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001368:	f000 fa3a 	bl	80017e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800136c:	f000 fa84 	bl	8001878 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001370:	f000 f896 	bl	80014a0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001374:	f000 facc 	bl	8001910 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001378:	2100      	movs	r1, #0
 800137a:	4811      	ldr	r0, [pc, #68]	; (80013c0 <main+0x6c>)
 800137c:	f003 fdb4 	bl	8004ee8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001380:	2104      	movs	r1, #4
 8001382:	480f      	ldr	r0, [pc, #60]	; (80013c0 <main+0x6c>)
 8001384:	f003 fdb0 	bl	8004ee8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8001388:	2108      	movs	r1, #8
 800138a:	480d      	ldr	r0, [pc, #52]	; (80013c0 <main+0x6c>)
 800138c:	f003 fdac 	bl	8004ee8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8001390:	210c      	movs	r1, #12
 8001392:	480b      	ldr	r0, [pc, #44]	; (80013c0 <main+0x6c>)
 8001394:	f003 fda8 	bl	8004ee8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8001398:	2100      	movs	r1, #0
 800139a:	480a      	ldr	r0, [pc, #40]	; (80013c4 <main+0x70>)
 800139c:	f003 fda4 	bl	8004ee8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 80013a0:	2104      	movs	r1, #4
 80013a2:	4808      	ldr	r0, [pc, #32]	; (80013c4 <main+0x70>)
 80013a4:	f003 fda0 	bl	8004ee8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 80013a8:	2108      	movs	r1, #8
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <main+0x70>)
 80013ac:	f003 fd9c 	bl	8004ee8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);
 80013b0:	210c      	movs	r1, #12
 80013b2:	4804      	ldr	r0, [pc, #16]	; (80013c4 <main+0x70>)
 80013b4:	f003 fd98 	bl	8004ee8 <HAL_TIM_PWM_Start>
//	       HAL_UART_Transmit(&huart1, (uint8_t *)A1,sizeof(A1),0xffff);
//	       HAL_Delay(2000);
	  /*HAL_UART_Transmit(&huart2,redGreen,sizeof(redGreen),1000);
	  HAL_UART_Transmit(&huart1, (uint8_t *)A1,sizeof(A1),0xffff);
	  HAL_Delay(10000);*/
	  buzhou();
 80013b8:	f7ff fd0a 	bl	8000dd0 <buzhou>
 80013bc:	e7fc      	b.n	80013b8 <main+0x64>
 80013be:	bf00      	nop
 80013c0:	24000228 	.word	0x24000228
 80013c4:	240000b0 	.word	0x240000b0

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b09c      	sub	sp, #112	; 0x70
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d2:	224c      	movs	r2, #76	; 0x4c
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f005 ffd6 	bl	8007388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2220      	movs	r2, #32
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f005 ffd0 	bl	8007388 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013e8:	2002      	movs	r0, #2
 80013ea:	f001 f971 	bl	80026d0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	4b29      	ldr	r3, [pc, #164]	; (8001498 <SystemClock_Config+0xd0>)
 80013f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f6:	4a28      	ldr	r2, [pc, #160]	; (8001498 <SystemClock_Config+0xd0>)
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <SystemClock_Config+0xd0>)
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <SystemClock_Config+0xd4>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001410:	4a22      	ldr	r2, [pc, #136]	; (800149c <SystemClock_Config+0xd4>)
 8001412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b20      	ldr	r3, [pc, #128]	; (800149c <SystemClock_Config+0xd4>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001424:	bf00      	nop
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <SystemClock_Config+0xd4>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800142e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001432:	d1f8      	bne.n	8001426 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001434:	2302      	movs	r3, #2
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001438:	2301      	movs	r3, #1
 800143a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800143c:	2340      	movs	r3, #64	; 0x40
 800143e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001440:	2300      	movs	r3, #0
 8001442:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001448:	4618      	mov	r0, r3
 800144a:	f001 f97b 	bl	8002744 <HAL_RCC_OscConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001454:	f000 fb30 	bl	8001ab8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001458:	233f      	movs	r3, #63	; 0x3f
 800145a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800146c:	2340      	movs	r3, #64	; 0x40
 800146e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001474:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2101      	movs	r1, #1
 800147e:	4618      	mov	r0, r3
 8001480:	f001 fd8c 	bl	8002f9c <HAL_RCC_ClockConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800148a:	f000 fb15 	bl	8001ab8 <Error_Handler>
  }
}
 800148e:	bf00      	nop
 8001490:	3770      	adds	r7, #112	; 0x70
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	58000400 	.word	0x58000400
 800149c:	58024800 	.word	0x58024800

080014a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b09a      	sub	sp, #104	; 0x68
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	615a      	str	r2, [r3, #20]
 80014d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	222c      	movs	r2, #44	; 0x2c
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f005 ff54 	bl	8007388 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014e0:	4b55      	ldr	r3, [pc, #340]	; (8001638 <MX_TIM1_Init+0x198>)
 80014e2:	4a56      	ldr	r2, [pc, #344]	; (800163c <MX_TIM1_Init+0x19c>)
 80014e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 80014e6:	4b54      	ldr	r3, [pc, #336]	; (8001638 <MX_TIM1_Init+0x198>)
 80014e8:	221f      	movs	r2, #31
 80014ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ec:	4b52      	ldr	r3, [pc, #328]	; (8001638 <MX_TIM1_Init+0x198>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80014f2:	4b51      	ldr	r3, [pc, #324]	; (8001638 <MX_TIM1_Init+0x198>)
 80014f4:	2263      	movs	r2, #99	; 0x63
 80014f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f8:	4b4f      	ldr	r3, [pc, #316]	; (8001638 <MX_TIM1_Init+0x198>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014fe:	4b4e      	ldr	r3, [pc, #312]	; (8001638 <MX_TIM1_Init+0x198>)
 8001500:	2200      	movs	r2, #0
 8001502:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001504:	4b4c      	ldr	r3, [pc, #304]	; (8001638 <MX_TIM1_Init+0x198>)
 8001506:	2200      	movs	r2, #0
 8001508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800150a:	484b      	ldr	r0, [pc, #300]	; (8001638 <MX_TIM1_Init+0x198>)
 800150c:	f003 fc34 	bl	8004d78 <HAL_TIM_Base_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001516:	f000 facf 	bl	8001ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001520:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001524:	4619      	mov	r1, r3
 8001526:	4844      	ldr	r0, [pc, #272]	; (8001638 <MX_TIM1_Init+0x198>)
 8001528:	f003 ff00 	bl	800532c <HAL_TIM_ConfigClockSource>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001532:	f000 fac1 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001536:	4840      	ldr	r0, [pc, #256]	; (8001638 <MX_TIM1_Init+0x198>)
 8001538:	f003 fc75 	bl	8004e26 <HAL_TIM_PWM_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001542:	f000 fab9 	bl	8001ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001552:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001556:	4619      	mov	r1, r3
 8001558:	4837      	ldr	r0, [pc, #220]	; (8001638 <MX_TIM1_Init+0x198>)
 800155a:	f004 fc13 	bl	8005d84 <HAL_TIMEx_MasterConfigSynchronization>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001564:	f000 faa8 	bl	8001ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001568:	2360      	movs	r3, #96	; 0x60
 800156a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001570:	2300      	movs	r3, #0
 8001572:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001574:	2300      	movs	r3, #0
 8001576:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800157c:	2300      	movs	r3, #0
 800157e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001580:	2300      	movs	r3, #0
 8001582:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001584:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001588:	2200      	movs	r2, #0
 800158a:	4619      	mov	r1, r3
 800158c:	482a      	ldr	r0, [pc, #168]	; (8001638 <MX_TIM1_Init+0x198>)
 800158e:	f003 fdb9 	bl	8005104 <HAL_TIM_PWM_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001598:	f000 fa8e 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800159c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015a0:	2204      	movs	r2, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4824      	ldr	r0, [pc, #144]	; (8001638 <MX_TIM1_Init+0x198>)
 80015a6:	f003 fdad 	bl	8005104 <HAL_TIM_PWM_ConfigChannel>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80015b0:	f000 fa82 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015b8:	2208      	movs	r2, #8
 80015ba:	4619      	mov	r1, r3
 80015bc:	481e      	ldr	r0, [pc, #120]	; (8001638 <MX_TIM1_Init+0x198>)
 80015be:	f003 fda1 	bl	8005104 <HAL_TIM_PWM_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80015c8:	f000 fa76 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015d0:	220c      	movs	r2, #12
 80015d2:	4619      	mov	r1, r3
 80015d4:	4818      	ldr	r0, [pc, #96]	; (8001638 <MX_TIM1_Init+0x198>)
 80015d6:	f003 fd95 	bl	8005104 <HAL_TIM_PWM_ConfigChannel>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80015e0:	f000 fa6a 	bl	8001ab8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001606:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	4619      	mov	r1, r3
 8001618:	4807      	ldr	r0, [pc, #28]	; (8001638 <MX_TIM1_Init+0x198>)
 800161a:	f004 fc41 	bl	8005ea0 <HAL_TIMEx_ConfigBreakDeadTime>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001624:	f000 fa48 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001628:	4803      	ldr	r0, [pc, #12]	; (8001638 <MX_TIM1_Init+0x198>)
 800162a:	f000 fa9f 	bl	8001b6c <HAL_TIM_MspPostInit>

}
 800162e:	bf00      	nop
 8001630:	3768      	adds	r7, #104	; 0x68
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	24000228 	.word	0x24000228
 800163c:	40010000 	.word	0x40010000

08001640 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b09a      	sub	sp, #104	; 0x68
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001646:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001654:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001660:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
 8001670:	615a      	str	r2, [r3, #20]
 8001672:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	222c      	movs	r2, #44	; 0x2c
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f005 fe84 	bl	8007388 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001680:	4b55      	ldr	r3, [pc, #340]	; (80017d8 <MX_TIM8_Init+0x198>)
 8001682:	4a56      	ldr	r2, [pc, #344]	; (80017dc <MX_TIM8_Init+0x19c>)
 8001684:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 8001686:	4b54      	ldr	r3, [pc, #336]	; (80017d8 <MX_TIM8_Init+0x198>)
 8001688:	223f      	movs	r2, #63	; 0x3f
 800168a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168c:	4b52      	ldr	r3, [pc, #328]	; (80017d8 <MX_TIM8_Init+0x198>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 8001692:	4b51      	ldr	r3, [pc, #324]	; (80017d8 <MX_TIM8_Init+0x198>)
 8001694:	2263      	movs	r2, #99	; 0x63
 8001696:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001698:	4b4f      	ldr	r3, [pc, #316]	; (80017d8 <MX_TIM8_Init+0x198>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800169e:	4b4e      	ldr	r3, [pc, #312]	; (80017d8 <MX_TIM8_Init+0x198>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a4:	4b4c      	ldr	r3, [pc, #304]	; (80017d8 <MX_TIM8_Init+0x198>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016aa:	484b      	ldr	r0, [pc, #300]	; (80017d8 <MX_TIM8_Init+0x198>)
 80016ac:	f003 fb64 	bl	8004d78 <HAL_TIM_Base_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80016b6:	f000 f9ff 	bl	8001ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016be:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016c4:	4619      	mov	r1, r3
 80016c6:	4844      	ldr	r0, [pc, #272]	; (80017d8 <MX_TIM8_Init+0x198>)
 80016c8:	f003 fe30 	bl	800532c <HAL_TIM_ConfigClockSource>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80016d2:	f000 f9f1 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016d6:	4840      	ldr	r0, [pc, #256]	; (80017d8 <MX_TIM8_Init+0x198>)
 80016d8:	f003 fba5 	bl	8004e26 <HAL_TIM_PWM_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80016e2:	f000 f9e9 	bl	8001ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016f6:	4619      	mov	r1, r3
 80016f8:	4837      	ldr	r0, [pc, #220]	; (80017d8 <MX_TIM8_Init+0x198>)
 80016fa:	f004 fb43 	bl	8005d84 <HAL_TIMEx_MasterConfigSynchronization>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001704:	f000 f9d8 	bl	8001ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001708:	2360      	movs	r3, #96	; 0x60
 800170a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001710:	2300      	movs	r3, #0
 8001712:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001714:	2300      	movs	r3, #0
 8001716:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001724:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001728:	2200      	movs	r2, #0
 800172a:	4619      	mov	r1, r3
 800172c:	482a      	ldr	r0, [pc, #168]	; (80017d8 <MX_TIM8_Init+0x198>)
 800172e:	f003 fce9 	bl	8005104 <HAL_TIM_PWM_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8001738:	f000 f9be 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800173c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001740:	2204      	movs	r2, #4
 8001742:	4619      	mov	r1, r3
 8001744:	4824      	ldr	r0, [pc, #144]	; (80017d8 <MX_TIM8_Init+0x198>)
 8001746:	f003 fcdd 	bl	8005104 <HAL_TIM_PWM_ConfigChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8001750:	f000 f9b2 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001754:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001758:	2208      	movs	r2, #8
 800175a:	4619      	mov	r1, r3
 800175c:	481e      	ldr	r0, [pc, #120]	; (80017d8 <MX_TIM8_Init+0x198>)
 800175e:	f003 fcd1 	bl	8005104 <HAL_TIM_PWM_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8001768:	f000 f9a6 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800176c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001770:	220c      	movs	r2, #12
 8001772:	4619      	mov	r1, r3
 8001774:	4818      	ldr	r0, [pc, #96]	; (80017d8 <MX_TIM8_Init+0x198>)
 8001776:	f003 fcc5 	bl	8005104 <HAL_TIM_PWM_ConfigChannel>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8001780:	f000 f99a 	bl	8001ab8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800179c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4807      	ldr	r0, [pc, #28]	; (80017d8 <MX_TIM8_Init+0x198>)
 80017ba:	f004 fb71 	bl	8005ea0 <HAL_TIMEx_ConfigBreakDeadTime>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM8_Init+0x188>
  {
    Error_Handler();
 80017c4:	f000 f978 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80017c8:	4803      	ldr	r0, [pc, #12]	; (80017d8 <MX_TIM8_Init+0x198>)
 80017ca:	f000 f9cf 	bl	8001b6c <HAL_TIM_MspPostInit>

}
 80017ce:	bf00      	nop
 80017d0:	3768      	adds	r7, #104	; 0x68
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	240000b0 	.word	0x240000b0
 80017dc:	40010400 	.word	0x40010400

080017e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <MX_USART1_UART_Init+0x90>)
 80017e6:	4a23      	ldr	r2, [pc, #140]	; (8001874 <MX_USART1_UART_Init+0x94>)
 80017e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <MX_USART1_UART_Init+0x90>)
 80017ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <MX_USART1_UART_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <MX_USART1_UART_Init+0x90>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <MX_USART1_UART_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <MX_USART1_UART_Init+0x90>)
 8001806:	220c      	movs	r2, #12
 8001808:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <MX_USART1_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <MX_USART1_UART_Init+0x90>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001816:	4b16      	ldr	r3, [pc, #88]	; (8001870 <MX_USART1_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <MX_USART1_UART_Init+0x90>)
 800181e:	2200      	movs	r2, #0
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <MX_USART1_UART_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001828:	4811      	ldr	r0, [pc, #68]	; (8001870 <MX_USART1_UART_Init+0x90>)
 800182a:	f004 fbb7 	bl	8005f9c <HAL_UART_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001834:	f000 f940 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001838:	2100      	movs	r1, #0
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <MX_USART1_UART_Init+0x90>)
 800183c:	f005 fcb6 	bl	80071ac <HAL_UARTEx_SetTxFifoThreshold>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001846:	f000 f937 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800184a:	2100      	movs	r1, #0
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <MX_USART1_UART_Init+0x90>)
 800184e:	f005 fceb 	bl	8007228 <HAL_UARTEx_SetRxFifoThreshold>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001858:	f000 f92e 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <MX_USART1_UART_Init+0x90>)
 800185e:	f005 fc6c 	bl	800713a <HAL_UARTEx_DisableFifoMode>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001868:	f000 f926 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	24000198 	.word	0x24000198
 8001874:	40011000 	.word	0x40011000

08001878 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800187c:	4b22      	ldr	r3, [pc, #136]	; (8001908 <MX_USART2_UART_Init+0x90>)
 800187e:	4a23      	ldr	r2, [pc, #140]	; (800190c <MX_USART2_UART_Init+0x94>)
 8001880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001882:	4b21      	ldr	r3, [pc, #132]	; (8001908 <MX_USART2_UART_Init+0x90>)
 8001884:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <MX_USART2_UART_Init+0x90>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <MX_USART2_UART_Init+0x90>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <MX_USART2_UART_Init+0x90>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800189c:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <MX_USART2_UART_Init+0x90>)
 800189e:	220c      	movs	r2, #12
 80018a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <MX_USART2_UART_Init+0x90>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <MX_USART2_UART_Init+0x90>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <MX_USART2_UART_Init+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <MX_USART2_UART_Init+0x90>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <MX_USART2_UART_Init+0x90>)
 80018bc:	2200      	movs	r2, #0
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018c0:	4811      	ldr	r0, [pc, #68]	; (8001908 <MX_USART2_UART_Init+0x90>)
 80018c2:	f004 fb6b 	bl	8005f9c <HAL_UART_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80018cc:	f000 f8f4 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018d0:	2100      	movs	r1, #0
 80018d2:	480d      	ldr	r0, [pc, #52]	; (8001908 <MX_USART2_UART_Init+0x90>)
 80018d4:	f005 fc6a 	bl	80071ac <HAL_UARTEx_SetTxFifoThreshold>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80018de:	f000 f8eb 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e2:	2100      	movs	r1, #0
 80018e4:	4808      	ldr	r0, [pc, #32]	; (8001908 <MX_USART2_UART_Init+0x90>)
 80018e6:	f005 fc9f 	bl	8007228 <HAL_UARTEx_SetRxFifoThreshold>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80018f0:	f000 f8e2 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018f4:	4804      	ldr	r0, [pc, #16]	; (8001908 <MX_USART2_UART_Init+0x90>)
 80018f6:	f005 fc20 	bl	800713a <HAL_UARTEx_DisableFifoMode>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001900:	f000 f8da 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	24000274 	.word	0x24000274
 800190c:	40004400 	.word	0x40004400

08001910 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001914:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <MX_USART3_UART_Init+0x90>)
 8001916:	4a23      	ldr	r2, [pc, #140]	; (80019a4 <MX_USART3_UART_Init+0x94>)
 8001918:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800191a:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <MX_USART3_UART_Init+0x90>)
 800191c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001920:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001922:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <MX_USART3_UART_Init+0x90>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001928:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <MX_USART3_UART_Init+0x90>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800192e:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <MX_USART3_UART_Init+0x90>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001934:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <MX_USART3_UART_Init+0x90>)
 8001936:	220c      	movs	r2, #12
 8001938:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193a:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <MX_USART3_UART_Init+0x90>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <MX_USART3_UART_Init+0x90>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001946:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <MX_USART3_UART_Init+0x90>)
 8001948:	2200      	movs	r2, #0
 800194a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800194c:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <MX_USART3_UART_Init+0x90>)
 800194e:	2200      	movs	r2, #0
 8001950:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <MX_USART3_UART_Init+0x90>)
 8001954:	2200      	movs	r2, #0
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001958:	4811      	ldr	r0, [pc, #68]	; (80019a0 <MX_USART3_UART_Init+0x90>)
 800195a:	f004 fb1f 	bl	8005f9c <HAL_UART_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001964:	f000 f8a8 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001968:	2100      	movs	r1, #0
 800196a:	480d      	ldr	r0, [pc, #52]	; (80019a0 <MX_USART3_UART_Init+0x90>)
 800196c:	f005 fc1e 	bl	80071ac <HAL_UARTEx_SetTxFifoThreshold>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001976:	f000 f89f 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800197a:	2100      	movs	r1, #0
 800197c:	4808      	ldr	r0, [pc, #32]	; (80019a0 <MX_USART3_UART_Init+0x90>)
 800197e:	f005 fc53 	bl	8007228 <HAL_UARTEx_SetRxFifoThreshold>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001988:	f000 f896 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800198c:	4804      	ldr	r0, [pc, #16]	; (80019a0 <MX_USART3_UART_Init+0x90>)
 800198e:	f005 fbd4 	bl	800713a <HAL_UARTEx_DisableFifoMode>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001998:	f000 f88e 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	240000fc 	.word	0x240000fc
 80019a4:	40004800 	.word	0x40004800

080019a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	; 0x28
 80019ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019be:	4b3a      	ldr	r3, [pc, #232]	; (8001aa8 <MX_GPIO_Init+0x100>)
 80019c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c4:	4a38      	ldr	r2, [pc, #224]	; (8001aa8 <MX_GPIO_Init+0x100>)
 80019c6:	f043 0310 	orr.w	r3, r3, #16
 80019ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ce:	4b36      	ldr	r3, [pc, #216]	; (8001aa8 <MX_GPIO_Init+0x100>)
 80019d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019dc:	4b32      	ldr	r3, [pc, #200]	; (8001aa8 <MX_GPIO_Init+0x100>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e2:	4a31      	ldr	r2, [pc, #196]	; (8001aa8 <MX_GPIO_Init+0x100>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ec:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <MX_GPIO_Init+0x100>)
 80019ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <MX_GPIO_Init+0x100>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a00:	4a29      	ldr	r2, [pc, #164]	; (8001aa8 <MX_GPIO_Init+0x100>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0a:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <MX_GPIO_Init+0x100>)
 8001a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <MX_GPIO_Init+0x100>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1e:	4a22      	ldr	r2, [pc, #136]	; (8001aa8 <MX_GPIO_Init+0x100>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a28:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <MX_GPIO_Init+0x100>)
 8001a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a36:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <MX_GPIO_Init+0x100>)
 8001a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3c:	4a1a      	ldr	r2, [pc, #104]	; (8001aa8 <MX_GPIO_Init+0x100>)
 8001a3e:	f043 0308 	orr.w	r3, r3, #8
 8001a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a46:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <MX_GPIO_Init+0x100>)
 8001a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a54:	2320      	movs	r3, #32
 8001a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	4811      	ldr	r0, [pc, #68]	; (8001aac <MX_GPIO_Init+0x104>)
 8001a68:	f000 fc6a 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	480b      	ldr	r0, [pc, #44]	; (8001ab0 <MX_GPIO_Init+0x108>)
 8001a82:	f000 fc5d 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <MX_GPIO_Init+0x10c>)
 8001a9c:	f000 fc50 	bl	8002340 <HAL_GPIO_Init>

}
 8001aa0:	bf00      	nop
 8001aa2:	3728      	adds	r7, #40	; 0x28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	58024400 	.word	0x58024400
 8001aac:	58021000 	.word	0x58021000
 8001ab0:	58020800 	.word	0x58020800
 8001ab4:	58020400 	.word	0x58020400

08001ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001abc:	b672      	cpsid	i
}
 8001abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <Error_Handler+0x8>
	...

08001ac4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_MspInit+0x30>)
 8001acc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ad0:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <HAL_MspInit+0x30>)
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_MspInit+0x30>)
 8001adc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	58024400 	.word	0x58024400

08001af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a16      	ldr	r2, [pc, #88]	; (8001b60 <HAL_TIM_Base_MspInit+0x68>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d10f      	bne.n	8001b2a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <HAL_TIM_Base_MspInit+0x6c>)
 8001b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <HAL_TIM_Base_MspInit+0x6c>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_TIM_Base_MspInit+0x6c>)
 8001b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001b28:	e013      	b.n	8001b52 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM8)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_TIM_Base_MspInit+0x70>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d10e      	bne.n	8001b52 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_TIM_Base_MspInit+0x6c>)
 8001b36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_TIM_Base_MspInit+0x6c>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <HAL_TIM_Base_MspInit+0x6c>)
 8001b46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40010000 	.word	0x40010000
 8001b64:	58024400 	.word	0x58024400
 8001b68:	40010400 	.word	0x40010400

08001b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a26      	ldr	r2, [pc, #152]	; (8001c24 <HAL_TIM_MspPostInit+0xb8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d120      	bne.n	8001bd0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b8e:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <HAL_TIM_MspPostInit+0xbc>)
 8001b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b94:	4a24      	ldr	r2, [pc, #144]	; (8001c28 <HAL_TIM_MspPostInit+0xbc>)
 8001b96:	f043 0310 	orr.w	r3, r3, #16
 8001b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b9e:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <HAL_TIM_MspPostInit+0xbc>)
 8001ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba4:	f003 0310 	and.w	r3, r3, #16
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001bac:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4818      	ldr	r0, [pc, #96]	; (8001c2c <HAL_TIM_MspPostInit+0xc0>)
 8001bca:	f000 fbb9 	bl	8002340 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001bce:	e024      	b.n	8001c1a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM8)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <HAL_TIM_MspPostInit+0xc4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d11f      	bne.n	8001c1a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <HAL_TIM_MspPostInit+0xbc>)
 8001bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be0:	4a11      	ldr	r2, [pc, #68]	; (8001c28 <HAL_TIM_MspPostInit+0xbc>)
 8001be2:	f043 0304 	orr.w	r3, r3, #4
 8001be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bea:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <HAL_TIM_MspPostInit+0xbc>)
 8001bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001bf8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	4619      	mov	r1, r3
 8001c14:	4807      	ldr	r0, [pc, #28]	; (8001c34 <HAL_TIM_MspPostInit+0xc8>)
 8001c16:	f000 fb93 	bl	8002340 <HAL_GPIO_Init>
}
 8001c1a:	bf00      	nop
 8001c1c:	3728      	adds	r7, #40	; 0x28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40010000 	.word	0x40010000
 8001c28:	58024400 	.word	0x58024400
 8001c2c:	58021000 	.word	0x58021000
 8001c30:	40010400 	.word	0x40010400
 8001c34:	58020800 	.word	0x58020800

08001c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b0bc      	sub	sp, #240	; 0xf0
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c50:	f107 0320 	add.w	r3, r7, #32
 8001c54:	22bc      	movs	r2, #188	; 0xbc
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f005 fb95 	bl	8007388 <memset>
  if(huart->Instance==USART1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a6d      	ldr	r2, [pc, #436]	; (8001e18 <HAL_UART_MspInit+0x1e0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d143      	bne.n	8001cf0 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c72:	f107 0320 	add.w	r3, r7, #32
 8001c76:	4618      	mov	r0, r3
 8001c78:	f001 fd1c 	bl	80036b4 <HAL_RCCEx_PeriphCLKConfig>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c82:	f7ff ff19 	bl	8001ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c86:	4b65      	ldr	r3, [pc, #404]	; (8001e1c <HAL_UART_MspInit+0x1e4>)
 8001c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c8c:	4a63      	ldr	r2, [pc, #396]	; (8001e1c <HAL_UART_MspInit+0x1e4>)
 8001c8e:	f043 0310 	orr.w	r3, r3, #16
 8001c92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c96:	4b61      	ldr	r3, [pc, #388]	; (8001e1c <HAL_UART_MspInit+0x1e4>)
 8001c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca4:	4b5d      	ldr	r3, [pc, #372]	; (8001e1c <HAL_UART_MspInit+0x1e4>)
 8001ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001caa:	4a5c      	ldr	r2, [pc, #368]	; (8001e1c <HAL_UART_MspInit+0x1e4>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb4:	4b59      	ldr	r3, [pc, #356]	; (8001e1c <HAL_UART_MspInit+0x1e4>)
 8001cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001cc2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001cdc:	2304      	movs	r3, #4
 8001cde:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	484d      	ldr	r0, [pc, #308]	; (8001e20 <HAL_UART_MspInit+0x1e8>)
 8001cea:	f000 fb29 	bl	8002340 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cee:	e08f      	b.n	8001e10 <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a4b      	ldr	r2, [pc, #300]	; (8001e24 <HAL_UART_MspInit+0x1ec>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d142      	bne.n	8001d80 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d04:	f107 0320 	add.w	r3, r7, #32
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f001 fcd3 	bl	80036b4 <HAL_RCCEx_PeriphCLKConfig>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001d14:	f7ff fed0 	bl	8001ab8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d18:	4b40      	ldr	r3, [pc, #256]	; (8001e1c <HAL_UART_MspInit+0x1e4>)
 8001d1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d1e:	4a3f      	ldr	r2, [pc, #252]	; (8001e1c <HAL_UART_MspInit+0x1e4>)
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d28:	4b3c      	ldr	r3, [pc, #240]	; (8001e1c <HAL_UART_MspInit+0x1e4>)
 8001d2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <HAL_UART_MspInit+0x1e4>)
 8001d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3c:	4a37      	ldr	r2, [pc, #220]	; (8001e1c <HAL_UART_MspInit+0x1e4>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d46:	4b35      	ldr	r3, [pc, #212]	; (8001e1c <HAL_UART_MspInit+0x1e4>)
 8001d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d54:	230c      	movs	r3, #12
 8001d56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d6c:	2307      	movs	r3, #7
 8001d6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d76:	4619      	mov	r1, r3
 8001d78:	482b      	ldr	r0, [pc, #172]	; (8001e28 <HAL_UART_MspInit+0x1f0>)
 8001d7a:	f000 fae1 	bl	8002340 <HAL_GPIO_Init>
}
 8001d7e:	e047      	b.n	8001e10 <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART3)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a29      	ldr	r2, [pc, #164]	; (8001e2c <HAL_UART_MspInit+0x1f4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d142      	bne.n	8001e10 <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d94:	f107 0320 	add.w	r3, r7, #32
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 fc8b 	bl	80036b4 <HAL_RCCEx_PeriphCLKConfig>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8001da4:	f7ff fe88 	bl	8001ab8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001da8:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <HAL_UART_MspInit+0x1e4>)
 8001daa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dae:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <HAL_UART_MspInit+0x1e4>)
 8001db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001db8:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <HAL_UART_MspInit+0x1e4>)
 8001dba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_UART_MspInit+0x1e4>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dcc:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <HAL_UART_MspInit+0x1e4>)
 8001dce:	f043 0308 	orr.w	r3, r3, #8
 8001dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd6:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <HAL_UART_MspInit+0x1e4>)
 8001dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001de4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001de8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dfe:	2307      	movs	r3, #7
 8001e00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4809      	ldr	r0, [pc, #36]	; (8001e30 <HAL_UART_MspInit+0x1f8>)
 8001e0c:	f000 fa98 	bl	8002340 <HAL_GPIO_Init>
}
 8001e10:	bf00      	nop
 8001e12:	37f0      	adds	r7, #240	; 0xf0
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40011000 	.word	0x40011000
 8001e1c:	58024400 	.word	0x58024400
 8001e20:	58020400 	.word	0x58020400
 8001e24:	40004400 	.word	0x40004400
 8001e28:	58020000 	.word	0x58020000
 8001e2c:	40004800 	.word	0x40004800
 8001e30:	58020c00 	.word	0x58020c00

08001e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <NMI_Handler+0x4>

08001e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <HardFault_Handler+0x4>

08001e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <MemManage_Handler+0x4>

08001e46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <BusFault_Handler+0x4>

08001e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <UsageFault_Handler+0x4>

08001e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e80:	f000 f92a 	bl	80020d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e8c:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <SystemInit+0xec>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e92:	4a38      	ldr	r2, [pc, #224]	; (8001f74 <SystemInit+0xec>)
 8001e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e9c:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <SystemInit+0xf0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	2b06      	cmp	r3, #6
 8001ea6:	d807      	bhi.n	8001eb8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ea8:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <SystemInit+0xf0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f023 030f 	bic.w	r3, r3, #15
 8001eb0:	4a31      	ldr	r2, [pc, #196]	; (8001f78 <SystemInit+0xf0>)
 8001eb2:	f043 0307 	orr.w	r3, r3, #7
 8001eb6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001eb8:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <SystemInit+0xf4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a2f      	ldr	r2, [pc, #188]	; (8001f7c <SystemInit+0xf4>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <SystemInit+0xf4>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001eca:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <SystemInit+0xf4>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	492b      	ldr	r1, [pc, #172]	; (8001f7c <SystemInit+0xf4>)
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	; (8001f80 <SystemInit+0xf8>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ed6:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <SystemInit+0xf0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d007      	beq.n	8001ef2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <SystemInit+0xf0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 030f 	bic.w	r3, r3, #15
 8001eea:	4a23      	ldr	r2, [pc, #140]	; (8001f78 <SystemInit+0xf0>)
 8001eec:	f043 0307 	orr.w	r3, r3, #7
 8001ef0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ef2:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <SystemInit+0xf4>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ef8:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <SystemInit+0xf4>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001efe:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <SystemInit+0xf4>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <SystemInit+0xf4>)
 8001f06:	4a1f      	ldr	r2, [pc, #124]	; (8001f84 <SystemInit+0xfc>)
 8001f08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <SystemInit+0xf4>)
 8001f0c:	4a1e      	ldr	r2, [pc, #120]	; (8001f88 <SystemInit+0x100>)
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f10:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <SystemInit+0xf4>)
 8001f12:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <SystemInit+0x104>)
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f16:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <SystemInit+0xf4>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <SystemInit+0xf4>)
 8001f1e:	4a1b      	ldr	r2, [pc, #108]	; (8001f8c <SystemInit+0x104>)
 8001f20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <SystemInit+0xf4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <SystemInit+0xf4>)
 8001f2a:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <SystemInit+0x104>)
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <SystemInit+0xf4>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <SystemInit+0xf4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <SystemInit+0xf4>)
 8001f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <SystemInit+0xf4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <SystemInit+0x108>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <SystemInit+0x10c>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f52:	d202      	bcs.n	8001f5a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001f54:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <SystemInit+0x110>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <SystemInit+0x114>)
 8001f5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f60:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f62:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <SystemInit+0xec>)
 8001f64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f68:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00
 8001f78:	52002000 	.word	0x52002000
 8001f7c:	58024400 	.word	0x58024400
 8001f80:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f84:	02020200 	.word	0x02020200
 8001f88:	01ff0000 	.word	0x01ff0000
 8001f8c:	01010280 	.word	0x01010280
 8001f90:	5c001000 	.word	0x5c001000
 8001f94:	ffff0000 	.word	0xffff0000
 8001f98:	51008108 	.word	0x51008108
 8001f9c:	52004000 	.word	0x52004000

08001fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001fa4:	f7ff ff70 	bl	8001e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fa8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001faa:	e003      	b.n	8001fb4 <LoopCopyDataInit>

08001fac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001fae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fb2:	3104      	adds	r1, #4

08001fb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fb4:	480a      	ldr	r0, [pc, #40]	; (8001fe0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001fb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fbc:	d3f6      	bcc.n	8001fac <CopyDataInit>
  ldr  r2, =_sbss
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001fc0:	e002      	b.n	8001fc8 <LoopFillZerobss>

08001fc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fc4:	f842 3b04 	str.w	r3, [r2], #4

08001fc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001fca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fcc:	d3f9      	bcc.n	8001fc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fce:	f005 f9b7 	bl	8007340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fd2:	f7ff f9bf 	bl	8001354 <main>
  bx  lr    
 8001fd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fd8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001fdc:	080073f8 	.word	0x080073f8
  ldr  r0, =_sdata
 8001fe0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001fe4:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 8001fe8:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 8001fec:	24000308 	.word	0x24000308

08001ff0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff0:	e7fe      	b.n	8001ff0 <ADC3_IRQHandler>
	...

08001ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ffa:	2003      	movs	r0, #3
 8001ffc:	f000 f96e 	bl	80022dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002000:	f001 f982 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 8002004:	4602      	mov	r2, r0
 8002006:	4b15      	ldr	r3, [pc, #84]	; (800205c <HAL_Init+0x68>)
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	0a1b      	lsrs	r3, r3, #8
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	4913      	ldr	r1, [pc, #76]	; (8002060 <HAL_Init+0x6c>)
 8002012:	5ccb      	ldrb	r3, [r1, r3]
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
 800201c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800201e:	4b0f      	ldr	r3, [pc, #60]	; (800205c <HAL_Init+0x68>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	4a0e      	ldr	r2, [pc, #56]	; (8002060 <HAL_Init+0x6c>)
 8002028:	5cd3      	ldrb	r3, [r2, r3]
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
 8002034:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <HAL_Init+0x70>)
 8002036:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002038:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <HAL_Init+0x74>)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800203e:	2000      	movs	r0, #0
 8002040:	f000 f814 	bl	800206c <HAL_InitTick>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e002      	b.n	8002054 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800204e:	f7ff fd39 	bl	8001ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	58024400 	.word	0x58024400
 8002060:	080073b0 	.word	0x080073b0
 8002064:	2400006c 	.word	0x2400006c
 8002068:	24000068 	.word	0x24000068

0800206c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002074:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_InitTick+0x60>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e021      	b.n	80020c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002080:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <HAL_InitTick+0x64>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <HAL_InitTick+0x60>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	4618      	mov	r0, r3
 8002098:	f000 f945 	bl	8002326 <HAL_SYSTICK_Config>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00e      	b.n	80020c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b0f      	cmp	r3, #15
 80020aa:	d80a      	bhi.n	80020c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ac:	2200      	movs	r2, #0
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f000 f91d 	bl	80022f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b8:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <HAL_InitTick+0x68>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	e000      	b.n	80020c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	24000074 	.word	0x24000074
 80020d0:	24000068 	.word	0x24000068
 80020d4:	24000070 	.word	0x24000070

080020d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_IncTick+0x20>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_IncTick+0x24>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	4a04      	ldr	r2, [pc, #16]	; (80020fc <HAL_IncTick+0x24>)
 80020ea:	6013      	str	r3, [r2, #0]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	24000074 	.word	0x24000074
 80020fc:	24000304 	.word	0x24000304

08002100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return uwTick;
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_GetTick+0x14>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	24000304 	.word	0x24000304

08002118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002120:	f7ff ffee 	bl	8002100 <HAL_GetTick>
 8002124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002130:	d005      	beq.n	800213e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002132:	4b0a      	ldr	r3, [pc, #40]	; (800215c <HAL_Delay+0x44>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4413      	add	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800213e:	bf00      	nop
 8002140:	f7ff ffde 	bl	8002100 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	429a      	cmp	r2, r3
 800214e:	d8f7      	bhi.n	8002140 <HAL_Delay+0x28>
  {
  }
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	24000074 	.word	0x24000074

08002160 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <HAL_GetREVID+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	0c1b      	lsrs	r3, r3, #16
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	5c001000 	.word	0x5c001000

08002178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <__NVIC_SetPriorityGrouping+0x40>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002194:	4013      	ands	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a6:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <__NVIC_SetPriorityGrouping+0x40>)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	60d3      	str	r3, [r2, #12]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000ed00 	.word	0xe000ed00
 80021bc:	05fa0000 	.word	0x05fa0000

080021c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <__NVIC_GetPriorityGrouping+0x18>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	f003 0307 	and.w	r3, r3, #7
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db0a      	blt.n	8002206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	490c      	ldr	r1, [pc, #48]	; (8002228 <__NVIC_SetPriority+0x4c>)
 80021f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	440b      	add	r3, r1
 8002200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002204:	e00a      	b.n	800221c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4908      	ldr	r1, [pc, #32]	; (800222c <__NVIC_SetPriority+0x50>)
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3b04      	subs	r3, #4
 8002214:	0112      	lsls	r2, r2, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	440b      	add	r3, r1
 800221a:	761a      	strb	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000e100 	.word	0xe000e100
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f1c3 0307 	rsb	r3, r3, #7
 800224a:	2b04      	cmp	r3, #4
 800224c:	bf28      	it	cs
 800224e:	2304      	movcs	r3, #4
 8002250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3304      	adds	r3, #4
 8002256:	2b06      	cmp	r3, #6
 8002258:	d902      	bls.n	8002260 <NVIC_EncodePriority+0x30>
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3b03      	subs	r3, #3
 800225e:	e000      	b.n	8002262 <NVIC_EncodePriority+0x32>
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	401a      	ands	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002278:	f04f 31ff 	mov.w	r1, #4294967295
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	43d9      	mvns	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	4313      	orrs	r3, r2
         );
}
 800228a:	4618      	mov	r0, r3
 800228c:	3724      	adds	r7, #36	; 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022a8:	d301      	bcc.n	80022ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00f      	b.n	80022ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ae:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <SysTick_Config+0x40>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b6:	210f      	movs	r1, #15
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	f7ff ff8e 	bl	80021dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <SysTick_Config+0x40>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c6:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <SysTick_Config+0x40>)
 80022c8:	2207      	movs	r2, #7
 80022ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	e000e010 	.word	0xe000e010

080022dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ff47 	bl	8002178 <__NVIC_SetPriorityGrouping>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b086      	sub	sp, #24
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002300:	f7ff ff5e 	bl	80021c0 <__NVIC_GetPriorityGrouping>
 8002304:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	6978      	ldr	r0, [r7, #20]
 800230c:	f7ff ff90 	bl	8002230 <NVIC_EncodePriority>
 8002310:	4602      	mov	r2, r0
 8002312:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff5f 	bl	80021dc <__NVIC_SetPriority>
}
 800231e:	bf00      	nop
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ffb2 	bl	8002298 <SysTick_Config>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800234e:	4b89      	ldr	r3, [pc, #548]	; (8002574 <HAL_GPIO_Init+0x234>)
 8002350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002352:	e194      	b.n	800267e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	2101      	movs	r1, #1
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8186 	beq.w	8002678 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d005      	beq.n	8002384 <HAL_GPIO_Init+0x44>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d130      	bne.n	80023e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023ba:	2201      	movs	r2, #1
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	f003 0201 	and.w	r2, r3, #1
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d017      	beq.n	8002422 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	2203      	movs	r2, #3
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d123      	bne.n	8002476 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	220f      	movs	r2, #15
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	08da      	lsrs	r2, r3, #3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3208      	adds	r2, #8
 8002470:	69b9      	ldr	r1, [r7, #24]
 8002472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	2203      	movs	r2, #3
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0203 	and.w	r2, r3, #3
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 80e0 	beq.w	8002678 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b8:	4b2f      	ldr	r3, [pc, #188]	; (8002578 <HAL_GPIO_Init+0x238>)
 80024ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024be:	4a2e      	ldr	r2, [pc, #184]	; (8002578 <HAL_GPIO_Init+0x238>)
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80024c8:	4b2b      	ldr	r3, [pc, #172]	; (8002578 <HAL_GPIO_Init+0x238>)
 80024ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024d6:	4a29      	ldr	r2, [pc, #164]	; (800257c <HAL_GPIO_Init+0x23c>)
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3302      	adds	r3, #2
 80024de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	220f      	movs	r2, #15
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a20      	ldr	r2, [pc, #128]	; (8002580 <HAL_GPIO_Init+0x240>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d052      	beq.n	80025a8 <HAL_GPIO_Init+0x268>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a1f      	ldr	r2, [pc, #124]	; (8002584 <HAL_GPIO_Init+0x244>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d031      	beq.n	800256e <HAL_GPIO_Init+0x22e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a1e      	ldr	r2, [pc, #120]	; (8002588 <HAL_GPIO_Init+0x248>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d02b      	beq.n	800256a <HAL_GPIO_Init+0x22a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a1d      	ldr	r2, [pc, #116]	; (800258c <HAL_GPIO_Init+0x24c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d025      	beq.n	8002566 <HAL_GPIO_Init+0x226>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <HAL_GPIO_Init+0x250>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d01f      	beq.n	8002562 <HAL_GPIO_Init+0x222>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a1b      	ldr	r2, [pc, #108]	; (8002594 <HAL_GPIO_Init+0x254>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d019      	beq.n	800255e <HAL_GPIO_Init+0x21e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a1a      	ldr	r2, [pc, #104]	; (8002598 <HAL_GPIO_Init+0x258>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d013      	beq.n	800255a <HAL_GPIO_Init+0x21a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a19      	ldr	r2, [pc, #100]	; (800259c <HAL_GPIO_Init+0x25c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00d      	beq.n	8002556 <HAL_GPIO_Init+0x216>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a18      	ldr	r2, [pc, #96]	; (80025a0 <HAL_GPIO_Init+0x260>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <HAL_GPIO_Init+0x212>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a17      	ldr	r2, [pc, #92]	; (80025a4 <HAL_GPIO_Init+0x264>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d101      	bne.n	800254e <HAL_GPIO_Init+0x20e>
 800254a:	2309      	movs	r3, #9
 800254c:	e02d      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 800254e:	230a      	movs	r3, #10
 8002550:	e02b      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 8002552:	2308      	movs	r3, #8
 8002554:	e029      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 8002556:	2307      	movs	r3, #7
 8002558:	e027      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 800255a:	2306      	movs	r3, #6
 800255c:	e025      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 800255e:	2305      	movs	r3, #5
 8002560:	e023      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 8002562:	2304      	movs	r3, #4
 8002564:	e021      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 8002566:	2303      	movs	r3, #3
 8002568:	e01f      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 800256a:	2302      	movs	r3, #2
 800256c:	e01d      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 800256e:	2301      	movs	r3, #1
 8002570:	e01b      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 8002572:	bf00      	nop
 8002574:	58000080 	.word	0x58000080
 8002578:	58024400 	.word	0x58024400
 800257c:	58000400 	.word	0x58000400
 8002580:	58020000 	.word	0x58020000
 8002584:	58020400 	.word	0x58020400
 8002588:	58020800 	.word	0x58020800
 800258c:	58020c00 	.word	0x58020c00
 8002590:	58021000 	.word	0x58021000
 8002594:	58021400 	.word	0x58021400
 8002598:	58021800 	.word	0x58021800
 800259c:	58021c00 	.word	0x58021c00
 80025a0:	58022000 	.word	0x58022000
 80025a4:	58022400 	.word	0x58022400
 80025a8:	2300      	movs	r3, #0
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	f002 0203 	and.w	r2, r2, #3
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	4093      	lsls	r3, r2
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ba:	4938      	ldr	r1, [pc, #224]	; (800269c <HAL_GPIO_Init+0x35c>)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80025ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80025f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800261c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	3301      	adds	r3, #1
 800267c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	f47f ae63 	bne.w	8002354 <HAL_GPIO_Init+0x14>
  }
}
 800268e:	bf00      	nop
 8002690:	bf00      	nop
 8002692:	3724      	adds	r7, #36	; 0x24
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	58000400 	.word	0x58000400

080026a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	887b      	ldrh	r3, [r7, #2]
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
 80026bc:	e001      	b.n	80026c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80026d8:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_PWREx_ConfigSupply+0x70>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d00a      	beq.n	80026fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <HAL_PWREx_ConfigSupply+0x70>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d001      	beq.n	80026f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e01f      	b.n	8002736 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	e01d      	b.n	8002736 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_PWREx_ConfigSupply+0x70>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f023 0207 	bic.w	r2, r3, #7
 8002702:	490f      	ldr	r1, [pc, #60]	; (8002740 <HAL_PWREx_ConfigSupply+0x70>)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4313      	orrs	r3, r2
 8002708:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800270a:	f7ff fcf9 	bl	8002100 <HAL_GetTick>
 800270e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002710:	e009      	b.n	8002726 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002712:	f7ff fcf5 	bl	8002100 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002720:	d901      	bls.n	8002726 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e007      	b.n	8002736 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_PWREx_ConfigSupply+0x70>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800272e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002732:	d1ee      	bne.n	8002712 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	58024800 	.word	0x58024800

08002744 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08c      	sub	sp, #48	; 0x30
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d102      	bne.n	8002758 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	f000 bc1c 	b.w	8002f90 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8087 	beq.w	8002874 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002766:	4b9e      	ldr	r3, [pc, #632]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002770:	4b9b      	ldr	r3, [pc, #620]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002778:	2b10      	cmp	r3, #16
 800277a:	d007      	beq.n	800278c <HAL_RCC_OscConfig+0x48>
 800277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277e:	2b18      	cmp	r3, #24
 8002780:	d110      	bne.n	80027a4 <HAL_RCC_OscConfig+0x60>
 8002782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d10b      	bne.n	80027a4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	4b94      	ldr	r3, [pc, #592]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d06c      	beq.n	8002872 <HAL_RCC_OscConfig+0x12e>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d168      	bne.n	8002872 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e3f5      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ac:	d106      	bne.n	80027bc <HAL_RCC_OscConfig+0x78>
 80027ae:	4b8c      	ldr	r3, [pc, #560]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a8b      	ldr	r2, [pc, #556]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e02e      	b.n	800281a <HAL_RCC_OscConfig+0xd6>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10c      	bne.n	80027de <HAL_RCC_OscConfig+0x9a>
 80027c4:	4b86      	ldr	r3, [pc, #536]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a85      	ldr	r2, [pc, #532]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80027ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b83      	ldr	r3, [pc, #524]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a82      	ldr	r2, [pc, #520]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80027d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	e01d      	b.n	800281a <HAL_RCC_OscConfig+0xd6>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e6:	d10c      	bne.n	8002802 <HAL_RCC_OscConfig+0xbe>
 80027e8:	4b7d      	ldr	r3, [pc, #500]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a7c      	ldr	r2, [pc, #496]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80027ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	4b7a      	ldr	r3, [pc, #488]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a79      	ldr	r2, [pc, #484]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80027fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	e00b      	b.n	800281a <HAL_RCC_OscConfig+0xd6>
 8002802:	4b77      	ldr	r3, [pc, #476]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a76      	ldr	r2, [pc, #472]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 8002808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b74      	ldr	r3, [pc, #464]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a73      	ldr	r2, [pc, #460]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 8002814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002818:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d013      	beq.n	800284a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002822:	f7ff fc6d 	bl	8002100 <HAL_GetTick>
 8002826:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800282a:	f7ff fc69 	bl	8002100 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b64      	cmp	r3, #100	; 0x64
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e3a9      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800283c:	4b68      	ldr	r3, [pc, #416]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0xe6>
 8002848:	e014      	b.n	8002874 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7ff fc59 	bl	8002100 <HAL_GetTick>
 800284e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002852:	f7ff fc55 	bl	8002100 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b64      	cmp	r3, #100	; 0x64
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e395      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002864:	4b5e      	ldr	r3, [pc, #376]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f0      	bne.n	8002852 <HAL_RCC_OscConfig+0x10e>
 8002870:	e000      	b.n	8002874 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002872:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80ca 	beq.w	8002a16 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002882:	4b57      	ldr	r3, [pc, #348]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800288a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800288c:	4b54      	ldr	r3, [pc, #336]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <HAL_RCC_OscConfig+0x164>
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	2b18      	cmp	r3, #24
 800289c:	d156      	bne.n	800294c <HAL_RCC_OscConfig+0x208>
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d151      	bne.n	800294c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028a8:	4b4d      	ldr	r3, [pc, #308]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_OscConfig+0x17c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e367      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028c0:	4b47      	ldr	r3, [pc, #284]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f023 0219 	bic.w	r2, r3, #25
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4944      	ldr	r1, [pc, #272]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028d2:	f7ff fc15 	bl	8002100 <HAL_GetTick>
 80028d6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028da:	f7ff fc11 	bl	8002100 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e351      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ec:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f8:	f7ff fc32 	bl	8002160 <HAL_GetREVID>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8002902:	4293      	cmp	r3, r2
 8002904:	d817      	bhi.n	8002936 <HAL_RCC_OscConfig+0x1f2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2b40      	cmp	r3, #64	; 0x40
 800290c:	d108      	bne.n	8002920 <HAL_RCC_OscConfig+0x1dc>
 800290e:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002916:	4a32      	ldr	r2, [pc, #200]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 8002918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800291e:	e07a      	b.n	8002a16 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002920:	4b2f      	ldr	r3, [pc, #188]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	031b      	lsls	r3, r3, #12
 800292e:	492c      	ldr	r1, [pc, #176]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002934:	e06f      	b.n	8002a16 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002936:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	061b      	lsls	r3, r3, #24
 8002944:	4926      	ldr	r1, [pc, #152]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800294a:	e064      	b.n	8002a16 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d047      	beq.n	80029e4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002954:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 0219 	bic.w	r2, r3, #25
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	491f      	ldr	r1, [pc, #124]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7ff fbcb 	bl	8002100 <HAL_GetTick>
 800296a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296e:	f7ff fbc7 	bl	8002100 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e307      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002980:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298c:	f7ff fbe8 	bl	8002160 <HAL_GetREVID>
 8002990:	4603      	mov	r3, r0
 8002992:	f241 0203 	movw	r2, #4099	; 0x1003
 8002996:	4293      	cmp	r3, r2
 8002998:	d817      	bhi.n	80029ca <HAL_RCC_OscConfig+0x286>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b40      	cmp	r3, #64	; 0x40
 80029a0:	d108      	bne.n	80029b4 <HAL_RCC_OscConfig+0x270>
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029aa:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b0:	6053      	str	r3, [r2, #4]
 80029b2:	e030      	b.n	8002a16 <HAL_RCC_OscConfig+0x2d2>
 80029b4:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	031b      	lsls	r3, r3, #12
 80029c2:	4907      	ldr	r1, [pc, #28]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
 80029c8:	e025      	b.n	8002a16 <HAL_RCC_OscConfig+0x2d2>
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	061b      	lsls	r3, r3, #24
 80029d8:	4901      	ldr	r1, [pc, #4]	; (80029e0 <HAL_RCC_OscConfig+0x29c>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
 80029de:	e01a      	b.n	8002a16 <HAL_RCC_OscConfig+0x2d2>
 80029e0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029e4:	4b9e      	ldr	r3, [pc, #632]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a9d      	ldr	r2, [pc, #628]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 80029ea:	f023 0301 	bic.w	r3, r3, #1
 80029ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7ff fb86 	bl	8002100 <HAL_GetTick>
 80029f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f8:	f7ff fb82 	bl	8002100 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e2c2      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a0a:	4b95      	ldr	r3, [pc, #596]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80a9 	beq.w	8002b76 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a24:	4b8e      	ldr	r3, [pc, #568]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a2c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a2e:	4b8c      	ldr	r3, [pc, #560]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d007      	beq.n	8002a4a <HAL_RCC_OscConfig+0x306>
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	2b18      	cmp	r3, #24
 8002a3e:	d13a      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x372>
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d135      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a4a:	4b85      	ldr	r3, [pc, #532]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_RCC_OscConfig+0x31e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	2b80      	cmp	r3, #128	; 0x80
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e296      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a62:	f7ff fb7d 	bl	8002160 <HAL_GetREVID>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d817      	bhi.n	8002aa0 <HAL_RCC_OscConfig+0x35c>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d108      	bne.n	8002a8a <HAL_RCC_OscConfig+0x346>
 8002a78:	4b79      	ldr	r3, [pc, #484]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a80:	4a77      	ldr	r2, [pc, #476]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002a82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a86:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a88:	e075      	b.n	8002b76 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a8a:	4b75      	ldr	r3, [pc, #468]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	069b      	lsls	r3, r3, #26
 8002a98:	4971      	ldr	r1, [pc, #452]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a9e:	e06a      	b.n	8002b76 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002aa0:	4b6f      	ldr	r3, [pc, #444]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	496c      	ldr	r1, [pc, #432]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ab4:	e05f      	b.n	8002b76 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d042      	beq.n	8002b44 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002abe:	4b68      	ldr	r3, [pc, #416]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a67      	ldr	r2, [pc, #412]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aca:	f7ff fb19 	bl	8002100 <HAL_GetTick>
 8002ace:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ad2:	f7ff fb15 	bl	8002100 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e255      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ae4:	4b5e      	ldr	r3, [pc, #376]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002af0:	f7ff fb36 	bl	8002160 <HAL_GetREVID>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f241 0203 	movw	r2, #4099	; 0x1003
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d817      	bhi.n	8002b2e <HAL_RCC_OscConfig+0x3ea>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d108      	bne.n	8002b18 <HAL_RCC_OscConfig+0x3d4>
 8002b06:	4b56      	ldr	r3, [pc, #344]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b0e:	4a54      	ldr	r2, [pc, #336]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002b10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b14:	6053      	str	r3, [r2, #4]
 8002b16:	e02e      	b.n	8002b76 <HAL_RCC_OscConfig+0x432>
 8002b18:	4b51      	ldr	r3, [pc, #324]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	069b      	lsls	r3, r3, #26
 8002b26:	494e      	ldr	r1, [pc, #312]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]
 8002b2c:	e023      	b.n	8002b76 <HAL_RCC_OscConfig+0x432>
 8002b2e:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	061b      	lsls	r3, r3, #24
 8002b3c:	4948      	ldr	r1, [pc, #288]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60cb      	str	r3, [r1, #12]
 8002b42:	e018      	b.n	8002b76 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b44:	4b46      	ldr	r3, [pc, #280]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a45      	ldr	r2, [pc, #276]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7ff fad6 	bl	8002100 <HAL_GetTick>
 8002b54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b58:	f7ff fad2 	bl	8002100 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e212      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b6a:	4b3d      	ldr	r3, [pc, #244]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d036      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d019      	beq.n	8002bbe <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b8a:	4b35      	ldr	r3, [pc, #212]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8e:	4a34      	ldr	r2, [pc, #208]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b96:	f7ff fab3 	bl	8002100 <HAL_GetTick>
 8002b9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b9e:	f7ff faaf 	bl	8002100 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e1ef      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bb0:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x45a>
 8002bbc:	e018      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bbe:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc2:	4a27      	ldr	r2, [pc, #156]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bca:	f7ff fa99 	bl	8002100 <HAL_GetTick>
 8002bce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd2:	f7ff fa95 	bl	8002100 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e1d5      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002be4:	4b1e      	ldr	r3, [pc, #120]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f0      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d039      	beq.n	8002c70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d019      	beq.n	8002c38 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a15      	ldr	r2, [pc, #84]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002c0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c10:	f7ff fa76 	bl	8002100 <HAL_GetTick>
 8002c14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c18:	f7ff fa72 	bl	8002100 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e1b2      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0x4d4>
 8002c36:	e01b      	b.n	8002c70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a08      	ldr	r2, [pc, #32]	; (8002c60 <HAL_RCC_OscConfig+0x51c>)
 8002c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c44:	f7ff fa5c 	bl	8002100 <HAL_GetTick>
 8002c48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c4a:	e00b      	b.n	8002c64 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c4c:	f7ff fa58 	bl	8002100 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d904      	bls.n	8002c64 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e198      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
 8002c5e:	bf00      	nop
 8002c60:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c64:	4ba3      	ldr	r3, [pc, #652]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1ed      	bne.n	8002c4c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 8081 	beq.w	8002d80 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c7e:	4b9e      	ldr	r3, [pc, #632]	; (8002ef8 <HAL_RCC_OscConfig+0x7b4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a9d      	ldr	r2, [pc, #628]	; (8002ef8 <HAL_RCC_OscConfig+0x7b4>)
 8002c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c8a:	f7ff fa39 	bl	8002100 <HAL_GetTick>
 8002c8e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c92:	f7ff fa35 	bl	8002100 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b64      	cmp	r3, #100	; 0x64
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e175      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ca4:	4b94      	ldr	r3, [pc, #592]	; (8002ef8 <HAL_RCC_OscConfig+0x7b4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x582>
 8002cb8:	4b8e      	ldr	r3, [pc, #568]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	4a8d      	ldr	r2, [pc, #564]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc4:	e02d      	b.n	8002d22 <HAL_RCC_OscConfig+0x5de>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5a4>
 8002cce:	4b89      	ldr	r3, [pc, #548]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	4a88      	ldr	r2, [pc, #544]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002cd4:	f023 0301 	bic.w	r3, r3, #1
 8002cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cda:	4b86      	ldr	r3, [pc, #536]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	4a85      	ldr	r2, [pc, #532]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002ce0:	f023 0304 	bic.w	r3, r3, #4
 8002ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce6:	e01c      	b.n	8002d22 <HAL_RCC_OscConfig+0x5de>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b05      	cmp	r3, #5
 8002cee:	d10c      	bne.n	8002d0a <HAL_RCC_OscConfig+0x5c6>
 8002cf0:	4b80      	ldr	r3, [pc, #512]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf4:	4a7f      	ldr	r2, [pc, #508]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002cf6:	f043 0304 	orr.w	r3, r3, #4
 8002cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfc:	4b7d      	ldr	r3, [pc, #500]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	4a7c      	ldr	r2, [pc, #496]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6713      	str	r3, [r2, #112]	; 0x70
 8002d08:	e00b      	b.n	8002d22 <HAL_RCC_OscConfig+0x5de>
 8002d0a:	4b7a      	ldr	r3, [pc, #488]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	4a79      	ldr	r2, [pc, #484]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	6713      	str	r3, [r2, #112]	; 0x70
 8002d16:	4b77      	ldr	r3, [pc, #476]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	4a76      	ldr	r2, [pc, #472]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002d1c:	f023 0304 	bic.w	r3, r3, #4
 8002d20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d015      	beq.n	8002d56 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2a:	f7ff f9e9 	bl	8002100 <HAL_GetTick>
 8002d2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7ff f9e5 	bl	8002100 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e123      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d48:	4b6a      	ldr	r3, [pc, #424]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0ee      	beq.n	8002d32 <HAL_RCC_OscConfig+0x5ee>
 8002d54:	e014      	b.n	8002d80 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d56:	f7ff f9d3 	bl	8002100 <HAL_GetTick>
 8002d5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d5e:	f7ff f9cf 	bl	8002100 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e10d      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d74:	4b5f      	ldr	r3, [pc, #380]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1ee      	bne.n	8002d5e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 8102 	beq.w	8002f8e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d8a:	4b5a      	ldr	r3, [pc, #360]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d92:	2b18      	cmp	r3, #24
 8002d94:	f000 80bd 	beq.w	8002f12 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	f040 8095 	bne.w	8002ecc <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da2:	4b54      	ldr	r3, [pc, #336]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a53      	ldr	r2, [pc, #332]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002da8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dae:	f7ff f9a7 	bl	8002100 <HAL_GetTick>
 8002db2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db6:	f7ff f9a3 	bl	8002100 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e0e3      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dc8:	4b4a      	ldr	r3, [pc, #296]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f0      	bne.n	8002db6 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd4:	4b47      	ldr	r3, [pc, #284]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002dd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dd8:	4b48      	ldr	r3, [pc, #288]	; (8002efc <HAL_RCC_OscConfig+0x7b8>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002de4:	0112      	lsls	r2, r2, #4
 8002de6:	430a      	orrs	r2, r1
 8002de8:	4942      	ldr	r1, [pc, #264]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	628b      	str	r3, [r1, #40]	; 0x28
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	3b01      	subs	r3, #1
 8002df4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	025b      	lsls	r3, r3, #9
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	041b      	lsls	r3, r3, #16
 8002e0c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e16:	3b01      	subs	r3, #1
 8002e18:	061b      	lsls	r3, r3, #24
 8002e1a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002e1e:	4935      	ldr	r1, [pc, #212]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002e24:	4b33      	ldr	r3, [pc, #204]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	4a32      	ldr	r2, [pc, #200]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e2a:	f023 0301 	bic.w	r3, r3, #1
 8002e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e30:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e34:	4b32      	ldr	r3, [pc, #200]	; (8002f00 <HAL_RCC_OscConfig+0x7bc>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e3c:	00d2      	lsls	r2, r2, #3
 8002e3e:	492d      	ldr	r1, [pc, #180]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e44:	4b2b      	ldr	r3, [pc, #172]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	f023 020c 	bic.w	r2, r3, #12
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	4928      	ldr	r1, [pc, #160]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e56:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	f023 0202 	bic.w	r2, r3, #2
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	4924      	ldr	r1, [pc, #144]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e68:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	4a21      	ldr	r2, [pc, #132]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e74:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e78:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e80:	4b1c      	ldr	r3, [pc, #112]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	4a1b      	ldr	r2, [pc, #108]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002e8c:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	4a18      	ldr	r2, [pc, #96]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e98:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7ff f92c 	bl	8002100 <HAL_GetTick>
 8002ea8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eac:	f7ff f928 	bl	8002100 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e068      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x768>
 8002eca:	e060      	b.n	8002f8e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a08      	ldr	r2, [pc, #32]	; (8002ef4 <HAL_RCC_OscConfig+0x7b0>)
 8002ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7ff f912 	bl	8002100 <HAL_GetTick>
 8002edc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ede:	e011      	b.n	8002f04 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee0:	f7ff f90e 	bl	8002100 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d90a      	bls.n	8002f04 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e04e      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
 8002ef2:	bf00      	nop
 8002ef4:	58024400 	.word	0x58024400
 8002ef8:	58024800 	.word	0x58024800
 8002efc:	fffffc0c 	.word	0xfffffc0c
 8002f00:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f04:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <HAL_RCC_OscConfig+0x854>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e7      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x79c>
 8002f10:	e03d      	b.n	8002f8e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f12:	4b21      	ldr	r3, [pc, #132]	; (8002f98 <HAL_RCC_OscConfig+0x854>)
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f18:	4b1f      	ldr	r3, [pc, #124]	; (8002f98 <HAL_RCC_OscConfig+0x854>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d031      	beq.n	8002f8a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f003 0203 	and.w	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d12a      	bne.n	8002f8a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d122      	bne.n	8002f8a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d11a      	bne.n	8002f8a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	0a5b      	lsrs	r3, r3, #9
 8002f58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f60:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d111      	bne.n	8002f8a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d108      	bne.n	8002f8a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	0e1b      	lsrs	r3, r3, #24
 8002f7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f84:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d001      	beq.n	8002f8e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3730      	adds	r7, #48	; 0x30
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	58024400 	.word	0x58024400

08002f9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e19c      	b.n	80032ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb0:	4b8a      	ldr	r3, [pc, #552]	; (80031dc <HAL_RCC_ClockConfig+0x240>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d910      	bls.n	8002fe0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	4b87      	ldr	r3, [pc, #540]	; (80031dc <HAL_RCC_ClockConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 020f 	bic.w	r2, r3, #15
 8002fc6:	4985      	ldr	r1, [pc, #532]	; (80031dc <HAL_RCC_ClockConfig+0x240>)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fce:	4b83      	ldr	r3, [pc, #524]	; (80031dc <HAL_RCC_ClockConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e184      	b.n	80032ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d010      	beq.n	800300e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	4b7b      	ldr	r3, [pc, #492]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d908      	bls.n	800300e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ffc:	4b78      	ldr	r3, [pc, #480]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	4975      	ldr	r1, [pc, #468]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 800300a:	4313      	orrs	r3, r2
 800300c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d010      	beq.n	800303c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	4b70      	ldr	r3, [pc, #448]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003026:	429a      	cmp	r2, r3
 8003028:	d908      	bls.n	800303c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800302a:	4b6d      	ldr	r3, [pc, #436]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	496a      	ldr	r1, [pc, #424]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 8003038:	4313      	orrs	r3, r2
 800303a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	d010      	beq.n	800306a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	699a      	ldr	r2, [r3, #24]
 800304c:	4b64      	ldr	r3, [pc, #400]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003054:	429a      	cmp	r2, r3
 8003056:	d908      	bls.n	800306a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003058:	4b61      	ldr	r3, [pc, #388]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	495e      	ldr	r1, [pc, #376]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 8003066:	4313      	orrs	r3, r2
 8003068:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b00      	cmp	r3, #0
 8003074:	d010      	beq.n	8003098 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69da      	ldr	r2, [r3, #28]
 800307a:	4b59      	ldr	r3, [pc, #356]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003082:	429a      	cmp	r2, r3
 8003084:	d908      	bls.n	8003098 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003086:	4b56      	ldr	r3, [pc, #344]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4953      	ldr	r1, [pc, #332]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 8003094:	4313      	orrs	r3, r2
 8003096:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d010      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	4b4d      	ldr	r3, [pc, #308]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d908      	bls.n	80030c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b4:	4b4a      	ldr	r3, [pc, #296]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	f023 020f 	bic.w	r2, r3, #15
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4947      	ldr	r1, [pc, #284]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d055      	beq.n	800317e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030d2:	4b43      	ldr	r3, [pc, #268]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	4940      	ldr	r1, [pc, #256]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d107      	bne.n	80030fc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030ec:	4b3c      	ldr	r3, [pc, #240]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d121      	bne.n	800313c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0f6      	b.n	80032ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d107      	bne.n	8003114 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003104:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d115      	bne.n	800313c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0ea      	b.n	80032ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d107      	bne.n	800312c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800311c:	4b30      	ldr	r3, [pc, #192]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d109      	bne.n	800313c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0de      	b.n	80032ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800312c:	4b2c      	ldr	r3, [pc, #176]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0d6      	b.n	80032ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800313c:	4b28      	ldr	r3, [pc, #160]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f023 0207 	bic.w	r2, r3, #7
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4925      	ldr	r1, [pc, #148]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 800314a:	4313      	orrs	r3, r2
 800314c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314e:	f7fe ffd7 	bl	8002100 <HAL_GetTick>
 8003152:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003154:	e00a      	b.n	800316c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003156:	f7fe ffd3 	bl	8002100 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	f241 3288 	movw	r2, #5000	; 0x1388
 8003164:	4293      	cmp	r3, r2
 8003166:	d901      	bls.n	800316c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e0be      	b.n	80032ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316c:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	429a      	cmp	r2, r3
 800317c:	d1eb      	bne.n	8003156 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d010      	beq.n	80031ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	429a      	cmp	r2, r3
 8003198:	d208      	bcs.n	80031ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f023 020f 	bic.w	r2, r3, #15
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	490e      	ldr	r1, [pc, #56]	; (80031e0 <HAL_RCC_ClockConfig+0x244>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCC_ClockConfig+0x240>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d214      	bcs.n	80031e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <HAL_RCC_ClockConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 020f 	bic.w	r2, r3, #15
 80031c2:	4906      	ldr	r1, [pc, #24]	; (80031dc <HAL_RCC_ClockConfig+0x240>)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b04      	ldr	r3, [pc, #16]	; (80031dc <HAL_RCC_ClockConfig+0x240>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e086      	b.n	80032ea <HAL_RCC_ClockConfig+0x34e>
 80031dc:	52002000 	.word	0x52002000
 80031e0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d010      	beq.n	8003212 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	4b3f      	ldr	r3, [pc, #252]	; (80032f4 <HAL_RCC_ClockConfig+0x358>)
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d208      	bcs.n	8003212 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003200:	4b3c      	ldr	r3, [pc, #240]	; (80032f4 <HAL_RCC_ClockConfig+0x358>)
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	4939      	ldr	r1, [pc, #228]	; (80032f4 <HAL_RCC_ClockConfig+0x358>)
 800320e:	4313      	orrs	r3, r2
 8003210:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d010      	beq.n	8003240 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695a      	ldr	r2, [r3, #20]
 8003222:	4b34      	ldr	r3, [pc, #208]	; (80032f4 <HAL_RCC_ClockConfig+0x358>)
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800322a:	429a      	cmp	r2, r3
 800322c:	d208      	bcs.n	8003240 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800322e:	4b31      	ldr	r3, [pc, #196]	; (80032f4 <HAL_RCC_ClockConfig+0x358>)
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	492e      	ldr	r1, [pc, #184]	; (80032f4 <HAL_RCC_ClockConfig+0x358>)
 800323c:	4313      	orrs	r3, r2
 800323e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0310 	and.w	r3, r3, #16
 8003248:	2b00      	cmp	r3, #0
 800324a:	d010      	beq.n	800326e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699a      	ldr	r2, [r3, #24]
 8003250:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <HAL_RCC_ClockConfig+0x358>)
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003258:	429a      	cmp	r2, r3
 800325a:	d208      	bcs.n	800326e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800325c:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <HAL_RCC_ClockConfig+0x358>)
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	4922      	ldr	r1, [pc, #136]	; (80032f4 <HAL_RCC_ClockConfig+0x358>)
 800326a:	4313      	orrs	r3, r2
 800326c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	2b00      	cmp	r3, #0
 8003278:	d010      	beq.n	800329c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <HAL_RCC_ClockConfig+0x358>)
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003286:	429a      	cmp	r2, r3
 8003288:	d208      	bcs.n	800329c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800328a:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <HAL_RCC_ClockConfig+0x358>)
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	4917      	ldr	r1, [pc, #92]	; (80032f4 <HAL_RCC_ClockConfig+0x358>)
 8003298:	4313      	orrs	r3, r2
 800329a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800329c:	f000 f834 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <HAL_RCC_ClockConfig+0x358>)
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	0a1b      	lsrs	r3, r3, #8
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	4912      	ldr	r1, [pc, #72]	; (80032f8 <HAL_RCC_ClockConfig+0x35c>)
 80032ae:	5ccb      	ldrb	r3, [r1, r3]
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
 80032b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032ba:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <HAL_RCC_ClockConfig+0x358>)
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	4a0d      	ldr	r2, [pc, #52]	; (80032f8 <HAL_RCC_ClockConfig+0x35c>)
 80032c4:	5cd3      	ldrb	r3, [r2, r3]
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
 80032d0:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <HAL_RCC_ClockConfig+0x360>)
 80032d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032d4:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <HAL_RCC_ClockConfig+0x364>)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80032da:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <HAL_RCC_ClockConfig+0x368>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe fec4 	bl	800206c <HAL_InitTick>
 80032e4:	4603      	mov	r3, r0
 80032e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	58024400 	.word	0x58024400
 80032f8:	080073b0 	.word	0x080073b0
 80032fc:	2400006c 	.word	0x2400006c
 8003300:	24000068 	.word	0x24000068
 8003304:	24000070 	.word	0x24000070

08003308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003308:	b480      	push	{r7}
 800330a:	b089      	sub	sp, #36	; 0x24
 800330c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800330e:	4bb3      	ldr	r3, [pc, #716]	; (80035dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003316:	2b18      	cmp	r3, #24
 8003318:	f200 8155 	bhi.w	80035c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800331c:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <HAL_RCC_GetSysClockFreq+0x1c>)
 800331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003322:	bf00      	nop
 8003324:	08003389 	.word	0x08003389
 8003328:	080035c7 	.word	0x080035c7
 800332c:	080035c7 	.word	0x080035c7
 8003330:	080035c7 	.word	0x080035c7
 8003334:	080035c7 	.word	0x080035c7
 8003338:	080035c7 	.word	0x080035c7
 800333c:	080035c7 	.word	0x080035c7
 8003340:	080035c7 	.word	0x080035c7
 8003344:	080033af 	.word	0x080033af
 8003348:	080035c7 	.word	0x080035c7
 800334c:	080035c7 	.word	0x080035c7
 8003350:	080035c7 	.word	0x080035c7
 8003354:	080035c7 	.word	0x080035c7
 8003358:	080035c7 	.word	0x080035c7
 800335c:	080035c7 	.word	0x080035c7
 8003360:	080035c7 	.word	0x080035c7
 8003364:	080033b5 	.word	0x080033b5
 8003368:	080035c7 	.word	0x080035c7
 800336c:	080035c7 	.word	0x080035c7
 8003370:	080035c7 	.word	0x080035c7
 8003374:	080035c7 	.word	0x080035c7
 8003378:	080035c7 	.word	0x080035c7
 800337c:	080035c7 	.word	0x080035c7
 8003380:	080035c7 	.word	0x080035c7
 8003384:	080033bb 	.word	0x080033bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003388:	4b94      	ldr	r3, [pc, #592]	; (80035dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003394:	4b91      	ldr	r3, [pc, #580]	; (80035dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	08db      	lsrs	r3, r3, #3
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	4a90      	ldr	r2, [pc, #576]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
 80033a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80033a6:	e111      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80033a8:	4b8d      	ldr	r3, [pc, #564]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033aa:	61bb      	str	r3, [r7, #24]
    break;
 80033ac:	e10e      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80033ae:	4b8d      	ldr	r3, [pc, #564]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033b0:	61bb      	str	r3, [r7, #24]
    break;
 80033b2:	e10b      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80033b4:	4b8c      	ldr	r3, [pc, #560]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80033b6:	61bb      	str	r3, [r7, #24]
    break;
 80033b8:	e108      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033ba:	4b88      	ldr	r3, [pc, #544]	; (80035dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80033c4:	4b85      	ldr	r3, [pc, #532]	; (80035dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033d0:	4b82      	ldr	r3, [pc, #520]	; (80035dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80033da:	4b80      	ldr	r3, [pc, #512]	; (80035dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033de:	08db      	lsrs	r3, r3, #3
 80033e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80e1 	beq.w	80035c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b02      	cmp	r3, #2
 8003402:	f000 8083 	beq.w	800350c <HAL_RCC_GetSysClockFreq+0x204>
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b02      	cmp	r3, #2
 800340a:	f200 80a1 	bhi.w	8003550 <HAL_RCC_GetSysClockFreq+0x248>
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x114>
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d056      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800341a:	e099      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800341c:	4b6f      	ldr	r3, [pc, #444]	; (80035dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b00      	cmp	r3, #0
 8003426:	d02d      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003428:	4b6c      	ldr	r3, [pc, #432]	; (80035dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	08db      	lsrs	r3, r3, #3
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	4a6b      	ldr	r2, [pc, #428]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
 8003438:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	ee07 3a90 	vmov	s15, r3
 8003440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003452:	4b62      	ldr	r3, [pc, #392]	; (80035dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800345a:	ee07 3a90 	vmov	s15, r3
 800345e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003462:	ed97 6a02 	vldr	s12, [r7, #8]
 8003466:	eddf 5a61 	vldr	s11, [pc, #388]	; 80035ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800346a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800346e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800347a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003482:	e087      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	ee07 3a90 	vmov	s15, r3
 800348a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80035f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003496:	4b51      	ldr	r3, [pc, #324]	; (80035dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349e:	ee07 3a90 	vmov	s15, r3
 80034a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80035ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034c6:	e065      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80035f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034da:	4b40      	ldr	r3, [pc, #256]	; (80035dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80035ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80034f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800350a:	e043      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	ee07 3a90 	vmov	s15, r3
 8003512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003516:	eddf 6a38 	vldr	s13, [pc, #224]	; 80035f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800351a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800351e:	4b2f      	ldr	r3, [pc, #188]	; (80035dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003532:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80035ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8003536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800353a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800353e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800354e:	e021      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80035f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800355e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003562:	4b1e      	ldr	r3, [pc, #120]	; (80035dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356a:	ee07 3a90 	vmov	s15, r3
 800356e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003572:	ed97 6a02 	vldr	s12, [r7, #8]
 8003576:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80035ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800357a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800357e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800358a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003592:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003594:	4b11      	ldr	r3, [pc, #68]	; (80035dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	0a5b      	lsrs	r3, r3, #9
 800359a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800359e:	3301      	adds	r3, #1
 80035a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	ee07 3a90 	vmov	s15, r3
 80035a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80035b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035b8:	ee17 3a90 	vmov	r3, s15
 80035bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80035be:	e005      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61bb      	str	r3, [r7, #24]
    break;
 80035c4:	e002      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80035c6:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035c8:	61bb      	str	r3, [r7, #24]
    break;
 80035ca:	bf00      	nop
  }

  return sysclockfreq;
 80035cc:	69bb      	ldr	r3, [r7, #24]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3724      	adds	r7, #36	; 0x24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	58024400 	.word	0x58024400
 80035e0:	03d09000 	.word	0x03d09000
 80035e4:	003d0900 	.word	0x003d0900
 80035e8:	017d7840 	.word	0x017d7840
 80035ec:	46000000 	.word	0x46000000
 80035f0:	4c742400 	.word	0x4c742400
 80035f4:	4a742400 	.word	0x4a742400
 80035f8:	4bbebc20 	.word	0x4bbebc20

080035fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003602:	f7ff fe81 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 8003606:	4602      	mov	r2, r0
 8003608:	4b10      	ldr	r3, [pc, #64]	; (800364c <HAL_RCC_GetHCLKFreq+0x50>)
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	0a1b      	lsrs	r3, r3, #8
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	490f      	ldr	r1, [pc, #60]	; (8003650 <HAL_RCC_GetHCLKFreq+0x54>)
 8003614:	5ccb      	ldrb	r3, [r1, r3]
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	fa22 f303 	lsr.w	r3, r2, r3
 800361e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003620:	4b0a      	ldr	r3, [pc, #40]	; (800364c <HAL_RCC_GetHCLKFreq+0x50>)
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	4a09      	ldr	r2, [pc, #36]	; (8003650 <HAL_RCC_GetHCLKFreq+0x54>)
 800362a:	5cd3      	ldrb	r3, [r2, r3]
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	fa22 f303 	lsr.w	r3, r2, r3
 8003636:	4a07      	ldr	r2, [pc, #28]	; (8003654 <HAL_RCC_GetHCLKFreq+0x58>)
 8003638:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800363a:	4a07      	ldr	r2, [pc, #28]	; (8003658 <HAL_RCC_GetHCLKFreq+0x5c>)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003640:	4b04      	ldr	r3, [pc, #16]	; (8003654 <HAL_RCC_GetHCLKFreq+0x58>)
 8003642:	681b      	ldr	r3, [r3, #0]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	58024400 	.word	0x58024400
 8003650:	080073b0 	.word	0x080073b0
 8003654:	2400006c 	.word	0x2400006c
 8003658:	24000068 	.word	0x24000068

0800365c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003660:	f7ff ffcc 	bl	80035fc <HAL_RCC_GetHCLKFreq>
 8003664:	4602      	mov	r2, r0
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	4904      	ldr	r1, [pc, #16]	; (8003684 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003672:	5ccb      	ldrb	r3, [r1, r3]
 8003674:	f003 031f 	and.w	r3, r3, #31
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800367c:	4618      	mov	r0, r3
 800367e:	bd80      	pop	{r7, pc}
 8003680:	58024400 	.word	0x58024400
 8003684:	080073b0 	.word	0x080073b0

08003688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800368c:	f7ff ffb6 	bl	80035fc <HAL_RCC_GetHCLKFreq>
 8003690:	4602      	mov	r2, r0
 8003692:	4b06      	ldr	r3, [pc, #24]	; (80036ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	0a1b      	lsrs	r3, r3, #8
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	4904      	ldr	r1, [pc, #16]	; (80036b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800369e:	5ccb      	ldrb	r3, [r1, r3]
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	58024400 	.word	0x58024400
 80036b0:	080073b0 	.word	0x080073b0

080036b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036bc:	2300      	movs	r3, #0
 80036be:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036c0:	2300      	movs	r3, #0
 80036c2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d03f      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036d8:	d02a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036de:	d824      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036e4:	d018      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036ea:	d81e      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036f4:	d007      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036f6:	e018      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f8:	4bab      	ldr	r3, [pc, #684]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	4aaa      	ldr	r2, [pc, #680]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003702:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003704:	e015      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3304      	adds	r3, #4
 800370a:	2102      	movs	r1, #2
 800370c:	4618      	mov	r0, r3
 800370e:	f001 f9cf 	bl	8004ab0 <RCCEx_PLL2_Config>
 8003712:	4603      	mov	r3, r0
 8003714:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003716:	e00c      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3324      	adds	r3, #36	; 0x24
 800371c:	2102      	movs	r1, #2
 800371e:	4618      	mov	r0, r3
 8003720:	f001 fa78 	bl	8004c14 <RCCEx_PLL3_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003728:	e003      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	75fb      	strb	r3, [r7, #23]
      break;
 800372e:	e000      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003732:	7dfb      	ldrb	r3, [r7, #23]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d109      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003738:	4b9b      	ldr	r3, [pc, #620]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800373a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003744:	4998      	ldr	r1, [pc, #608]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003746:	4313      	orrs	r3, r2
 8003748:	650b      	str	r3, [r1, #80]	; 0x50
 800374a:	e001      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374c:	7dfb      	ldrb	r3, [r7, #23]
 800374e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d03d      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003760:	2b04      	cmp	r3, #4
 8003762:	d826      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003764:	a201      	add	r2, pc, #4	; (adr r2, 800376c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	08003781 	.word	0x08003781
 8003770:	0800378f 	.word	0x0800378f
 8003774:	080037a1 	.word	0x080037a1
 8003778:	080037b9 	.word	0x080037b9
 800377c:	080037b9 	.word	0x080037b9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003780:	4b89      	ldr	r3, [pc, #548]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	4a88      	ldr	r2, [pc, #544]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800378a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800378c:	e015      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3304      	adds	r3, #4
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f001 f98b 	bl	8004ab0 <RCCEx_PLL2_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800379e:	e00c      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3324      	adds	r3, #36	; 0x24
 80037a4:	2100      	movs	r1, #0
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 fa34 	bl	8004c14 <RCCEx_PLL3_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037b0:	e003      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	75fb      	strb	r3, [r7, #23]
      break;
 80037b6:	e000      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80037b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d109      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037c0:	4b79      	ldr	r3, [pc, #484]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c4:	f023 0207 	bic.w	r2, r3, #7
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037cc:	4976      	ldr	r1, [pc, #472]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	650b      	str	r3, [r1, #80]	; 0x50
 80037d2:	e001      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
 80037d6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d042      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ec:	d02b      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80037ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f2:	d825      	bhi.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80037f4:	2bc0      	cmp	r3, #192	; 0xc0
 80037f6:	d028      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80037f8:	2bc0      	cmp	r3, #192	; 0xc0
 80037fa:	d821      	bhi.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80037fc:	2b80      	cmp	r3, #128	; 0x80
 80037fe:	d016      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003800:	2b80      	cmp	r3, #128	; 0x80
 8003802:	d81d      	bhi.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	d007      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800380c:	e018      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800380e:	4b66      	ldr	r3, [pc, #408]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	4a65      	ldr	r2, [pc, #404]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003818:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800381a:	e017      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3304      	adds	r3, #4
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f001 f944 	bl	8004ab0 <RCCEx_PLL2_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800382c:	e00e      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3324      	adds	r3, #36	; 0x24
 8003832:	2100      	movs	r1, #0
 8003834:	4618      	mov	r0, r3
 8003836:	f001 f9ed 	bl	8004c14 <RCCEx_PLL3_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800383e:	e005      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	75fb      	strb	r3, [r7, #23]
      break;
 8003844:	e002      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003846:	bf00      	nop
 8003848:	e000      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800384a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003852:	4b55      	ldr	r3, [pc, #340]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003856:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385e:	4952      	ldr	r1, [pc, #328]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003860:	4313      	orrs	r3, r2
 8003862:	650b      	str	r3, [r1, #80]	; 0x50
 8003864:	e001      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003866:	7dfb      	ldrb	r3, [r7, #23]
 8003868:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003872:	2b00      	cmp	r3, #0
 8003874:	d049      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800387c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003880:	d030      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003882:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003886:	d82a      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003888:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800388c:	d02c      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800388e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003892:	d824      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003898:	d018      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800389a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800389e:	d81e      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80038a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038a8:	d007      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x206>
 80038aa:	e018      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ac:	4b3e      	ldr	r3, [pc, #248]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	4a3d      	ldr	r2, [pc, #244]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038b8:	e017      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3304      	adds	r3, #4
 80038be:	2100      	movs	r1, #0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 f8f5 	bl	8004ab0 <RCCEx_PLL2_Config>
 80038c6:	4603      	mov	r3, r0
 80038c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80038ca:	e00e      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3324      	adds	r3, #36	; 0x24
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f001 f99e 	bl	8004c14 <RCCEx_PLL3_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038dc:	e005      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	75fb      	strb	r3, [r7, #23]
      break;
 80038e2:	e002      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80038e4:	bf00      	nop
 80038e6:	e000      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80038e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10a      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038f0:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038fe:	492a      	ldr	r1, [pc, #168]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003900:	4313      	orrs	r3, r2
 8003902:	658b      	str	r3, [r1, #88]	; 0x58
 8003904:	e001      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003912:	2b00      	cmp	r3, #0
 8003914:	d04c      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800391c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003920:	d030      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003922:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003926:	d82a      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003928:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800392c:	d02c      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800392e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003932:	d824      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003934:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003938:	d018      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800393a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800393e:	d81e      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003948:	d007      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800394a:	e018      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800394c:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	4a15      	ldr	r2, [pc, #84]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003956:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003958:	e017      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3304      	adds	r3, #4
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f001 f8a5 	bl	8004ab0 <RCCEx_PLL2_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800396a:	e00e      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3324      	adds	r3, #36	; 0x24
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f001 f94e 	bl	8004c14 <RCCEx_PLL3_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800397c:	e005      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	75fb      	strb	r3, [r7, #23]
      break;
 8003982:	e002      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003984:	bf00      	nop
 8003986:	e000      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10d      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800399e:	4902      	ldr	r1, [pc, #8]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	658b      	str	r3, [r1, #88]	; 0x58
 80039a4:	e004      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80039a6:	bf00      	nop
 80039a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
 80039ae:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d032      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c0:	2b30      	cmp	r3, #48	; 0x30
 80039c2:	d01c      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80039c4:	2b30      	cmp	r3, #48	; 0x30
 80039c6:	d817      	bhi.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d00c      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d813      	bhi.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d016      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80039d4:	2b10      	cmp	r3, #16
 80039d6:	d10f      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d8:	4baf      	ldr	r3, [pc, #700]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	4aae      	ldr	r2, [pc, #696]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80039e4:	e00e      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3304      	adds	r3, #4
 80039ea:	2102      	movs	r1, #2
 80039ec:	4618      	mov	r0, r3
 80039ee:	f001 f85f 	bl	8004ab0 <RCCEx_PLL2_Config>
 80039f2:	4603      	mov	r3, r0
 80039f4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80039f6:	e005      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	75fb      	strb	r3, [r7, #23]
      break;
 80039fc:	e002      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80039fe:	bf00      	nop
 8003a00:	e000      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a04:	7dfb      	ldrb	r3, [r7, #23]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a0a:	4ba3      	ldr	r3, [pc, #652]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a16:	49a0      	ldr	r1, [pc, #640]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a1c:	e001      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
 8003a20:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d047      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a36:	d030      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003a38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a3c:	d82a      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a42:	d02c      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003a44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a48:	d824      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a4e:	d018      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a54:	d81e      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5e:	d007      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003a60:	e018      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a62:	4b8d      	ldr	r3, [pc, #564]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	4a8c      	ldr	r2, [pc, #560]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a6e:	e017      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 f81a 	bl	8004ab0 <RCCEx_PLL2_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a80:	e00e      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3324      	adds	r3, #36	; 0x24
 8003a86:	2100      	movs	r1, #0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f001 f8c3 	bl	8004c14 <RCCEx_PLL3_Config>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a92:	e005      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	75fb      	strb	r3, [r7, #23]
      break;
 8003a98:	e002      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e000      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003a9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003aa6:	4b7c      	ldr	r3, [pc, #496]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aaa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab2:	4979      	ldr	r1, [pc, #484]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	650b      	str	r3, [r1, #80]	; 0x50
 8003ab8:	e001      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d049      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ace:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ad2:	d02e      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ad8:	d828      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003ada:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ade:	d02a      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003ae0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ae4:	d822      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003ae6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003aea:	d026      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003aec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003af0:	d81c      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003af2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003af6:	d010      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003af8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003afc:	d816      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01d      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b06:	d111      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 ffce 	bl	8004ab0 <RCCEx_PLL2_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b18:	e012      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3324      	adds	r3, #36	; 0x24
 8003b1e:	2101      	movs	r1, #1
 8003b20:	4618      	mov	r0, r3
 8003b22:	f001 f877 	bl	8004c14 <RCCEx_PLL3_Config>
 8003b26:	4603      	mov	r3, r0
 8003b28:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b2a:	e009      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b30:	e006      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b32:	bf00      	nop
 8003b34:	e004      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b36:	bf00      	nop
 8003b38:	e002      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e000      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b46:	4b54      	ldr	r3, [pc, #336]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b52:	4951      	ldr	r1, [pc, #324]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	650b      	str	r3, [r1, #80]	; 0x50
 8003b58:	e001      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5a:	7dfb      	ldrb	r3, [r7, #23]
 8003b5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d04b      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b74:	d02e      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b7a:	d828      	bhi.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b80:	d02a      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b86:	d822      	bhi.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b8c:	d026      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003b8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b92:	d81c      	bhi.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b98:	d010      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003b9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b9e:	d816      	bhi.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01d      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003ba4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ba8:	d111      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3304      	adds	r3, #4
 8003bae:	2101      	movs	r1, #1
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 ff7d 	bl	8004ab0 <RCCEx_PLL2_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003bba:	e012      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3324      	adds	r3, #36	; 0x24
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f001 f826 	bl	8004c14 <RCCEx_PLL3_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003bcc:	e009      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd2:	e006      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003bd4:	bf00      	nop
 8003bd6:	e004      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003bd8:	bf00      	nop
 8003bda:	e002      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003bdc:	bf00      	nop
 8003bde:	e000      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003be0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be2:	7dfb      	ldrb	r3, [r7, #23]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10a      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003be8:	4b2b      	ldr	r3, [pc, #172]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bf6:	4928      	ldr	r1, [pc, #160]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	658b      	str	r3, [r1, #88]	; 0x58
 8003bfc:	e001      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d02f      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c16:	d00e      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c1c:	d814      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d015      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c26:	d10f      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c28:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	4a1a      	ldr	r2, [pc, #104]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c34:	e00c      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 ff37 	bl	8004ab0 <RCCEx_PLL2_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c46:	e003      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c4c:	e000      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c62:	490d      	ldr	r1, [pc, #52]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	650b      	str	r3, [r1, #80]	; 0x50
 8003c68:	e001      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
 8003c6c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d033      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d81c      	bhi.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003c82:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c88:	08003cc3 	.word	0x08003cc3
 8003c8c:	08003c9d 	.word	0x08003c9d
 8003c90:	08003cab 	.word	0x08003cab
 8003c94:	08003cc3 	.word	0x08003cc3
 8003c98:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c9c:	4bb8      	ldr	r3, [pc, #736]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	4ab7      	ldr	r2, [pc, #732]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ca8:	e00c      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3304      	adds	r3, #4
 8003cae:	2102      	movs	r1, #2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fefd 	bl	8004ab0 <RCCEx_PLL2_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003cba:	e003      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc0:	e000      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003cc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003cca:	4bad      	ldr	r3, [pc, #692]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cce:	f023 0203 	bic.w	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	49aa      	ldr	r1, [pc, #680]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cdc:	e001      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
 8003ce0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8086 	beq.w	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cf0:	4ba4      	ldr	r3, [pc, #656]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4aa3      	ldr	r2, [pc, #652]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cfc:	f7fe fa00 	bl	8002100 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d02:	e009      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d04:	f7fe f9fc 	bl	8002100 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d902      	bls.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	75fb      	strb	r3, [r7, #23]
        break;
 8003d16:	e005      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d18:	4b9a      	ldr	r3, [pc, #616]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0ef      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d166      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d2a:	4b95      	ldr	r3, [pc, #596]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d34:	4053      	eors	r3, r2
 8003d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d013      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d3e:	4b90      	ldr	r3, [pc, #576]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d46:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d48:	4b8d      	ldr	r3, [pc, #564]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4c:	4a8c      	ldr	r2, [pc, #560]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d52:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d54:	4b8a      	ldr	r3, [pc, #552]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d58:	4a89      	ldr	r2, [pc, #548]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d5e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d60:	4a87      	ldr	r2, [pc, #540]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d70:	d115      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d72:	f7fe f9c5 	bl	8002100 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d78:	e00b      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7a:	f7fe f9c1 	bl	8002100 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d902      	bls.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	75fb      	strb	r3, [r7, #23]
            break;
 8003d90:	e005      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d92:	4b7b      	ldr	r3, [pc, #492]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0ed      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003d9e:	7dfb      	ldrb	r3, [r7, #23]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d126      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003db2:	d10d      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003db4:	4b72      	ldr	r3, [pc, #456]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dc2:	0919      	lsrs	r1, r3, #4
 8003dc4:	4b70      	ldr	r3, [pc, #448]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003dc6:	400b      	ands	r3, r1
 8003dc8:	496d      	ldr	r1, [pc, #436]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	610b      	str	r3, [r1, #16]
 8003dce:	e005      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003dd0:	4b6b      	ldr	r3, [pc, #428]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	4a6a      	ldr	r2, [pc, #424]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003dda:	6113      	str	r3, [r2, #16]
 8003ddc:	4b68      	ldr	r3, [pc, #416]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dea:	4965      	ldr	r1, [pc, #404]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	670b      	str	r3, [r1, #112]	; 0x70
 8003df0:	e004      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
 8003df4:	75bb      	strb	r3, [r7, #22]
 8003df6:	e001      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d07e      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e0c:	2b28      	cmp	r3, #40	; 0x28
 8003e0e:	d867      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003e10:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003ee7 	.word	0x08003ee7
 8003e1c:	08003ee1 	.word	0x08003ee1
 8003e20:	08003ee1 	.word	0x08003ee1
 8003e24:	08003ee1 	.word	0x08003ee1
 8003e28:	08003ee1 	.word	0x08003ee1
 8003e2c:	08003ee1 	.word	0x08003ee1
 8003e30:	08003ee1 	.word	0x08003ee1
 8003e34:	08003ee1 	.word	0x08003ee1
 8003e38:	08003ebd 	.word	0x08003ebd
 8003e3c:	08003ee1 	.word	0x08003ee1
 8003e40:	08003ee1 	.word	0x08003ee1
 8003e44:	08003ee1 	.word	0x08003ee1
 8003e48:	08003ee1 	.word	0x08003ee1
 8003e4c:	08003ee1 	.word	0x08003ee1
 8003e50:	08003ee1 	.word	0x08003ee1
 8003e54:	08003ee1 	.word	0x08003ee1
 8003e58:	08003ecf 	.word	0x08003ecf
 8003e5c:	08003ee1 	.word	0x08003ee1
 8003e60:	08003ee1 	.word	0x08003ee1
 8003e64:	08003ee1 	.word	0x08003ee1
 8003e68:	08003ee1 	.word	0x08003ee1
 8003e6c:	08003ee1 	.word	0x08003ee1
 8003e70:	08003ee1 	.word	0x08003ee1
 8003e74:	08003ee1 	.word	0x08003ee1
 8003e78:	08003ee7 	.word	0x08003ee7
 8003e7c:	08003ee1 	.word	0x08003ee1
 8003e80:	08003ee1 	.word	0x08003ee1
 8003e84:	08003ee1 	.word	0x08003ee1
 8003e88:	08003ee1 	.word	0x08003ee1
 8003e8c:	08003ee1 	.word	0x08003ee1
 8003e90:	08003ee1 	.word	0x08003ee1
 8003e94:	08003ee1 	.word	0x08003ee1
 8003e98:	08003ee7 	.word	0x08003ee7
 8003e9c:	08003ee1 	.word	0x08003ee1
 8003ea0:	08003ee1 	.word	0x08003ee1
 8003ea4:	08003ee1 	.word	0x08003ee1
 8003ea8:	08003ee1 	.word	0x08003ee1
 8003eac:	08003ee1 	.word	0x08003ee1
 8003eb0:	08003ee1 	.word	0x08003ee1
 8003eb4:	08003ee1 	.word	0x08003ee1
 8003eb8:	08003ee7 	.word	0x08003ee7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fdf4 	bl	8004ab0 <RCCEx_PLL2_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ecc:	e00c      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3324      	adds	r3, #36	; 0x24
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fe9d 	bl	8004c14 <RCCEx_PLL3_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ede:	e003      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d109      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003efa:	4921      	ldr	r1, [pc, #132]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	654b      	str	r3, [r1, #84]	; 0x54
 8003f00:	e001      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
 8003f04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d03e      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f16:	2b05      	cmp	r3, #5
 8003f18:	d820      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003f1a:	a201      	add	r2, pc, #4	; (adr r2, 8003f20 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f20:	08003f63 	.word	0x08003f63
 8003f24:	08003f39 	.word	0x08003f39
 8003f28:	08003f4b 	.word	0x08003f4b
 8003f2c:	08003f63 	.word	0x08003f63
 8003f30:	08003f63 	.word	0x08003f63
 8003f34:	08003f63 	.word	0x08003f63
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fdb6 	bl	8004ab0 <RCCEx_PLL2_Config>
 8003f44:	4603      	mov	r3, r0
 8003f46:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f48:	e00c      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3324      	adds	r3, #36	; 0x24
 8003f4e:	2101      	movs	r1, #1
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fe5f 	bl	8004c14 <RCCEx_PLL3_Config>
 8003f56:	4603      	mov	r3, r0
 8003f58:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f5a:	e003      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f60:	e000      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003f62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f64:	7dfb      	ldrb	r3, [r7, #23]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d110      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f6a:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6e:	f023 0207 	bic.w	r2, r3, #7
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f76:	4902      	ldr	r1, [pc, #8]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	654b      	str	r3, [r1, #84]	; 0x54
 8003f7c:	e008      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003f7e:	bf00      	nop
 8003f80:	58024400 	.word	0x58024400
 8003f84:	58024800 	.word	0x58024800
 8003f88:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
 8003f8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d039      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	2b05      	cmp	r3, #5
 8003fa4:	d820      	bhi.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003fa6:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08003fef 	.word	0x08003fef
 8003fb0:	08003fc5 	.word	0x08003fc5
 8003fb4:	08003fd7 	.word	0x08003fd7
 8003fb8:	08003fef 	.word	0x08003fef
 8003fbc:	08003fef 	.word	0x08003fef
 8003fc0:	08003fef 	.word	0x08003fef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	2101      	movs	r1, #1
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fd70 	bl	8004ab0 <RCCEx_PLL2_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fd4:	e00c      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3324      	adds	r3, #36	; 0x24
 8003fda:	2101      	movs	r1, #1
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fe19 	bl	8004c14 <RCCEx_PLL3_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fe6:	e003      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	75fb      	strb	r3, [r7, #23]
      break;
 8003fec:	e000      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10a      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ff6:	4bb7      	ldr	r3, [pc, #732]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	f023 0207 	bic.w	r2, r3, #7
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004004:	49b3      	ldr	r1, [pc, #716]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004006:	4313      	orrs	r3, r2
 8004008:	658b      	str	r3, [r1, #88]	; 0x58
 800400a:	e001      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d04b      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004022:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004026:	d02e      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800402c:	d828      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800402e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004032:	d02a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004038:	d822      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800403a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800403e:	d026      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004040:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004044:	d81c      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800404a:	d010      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800404c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004050:	d816      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01d      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800405a:	d111      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3304      	adds	r3, #4
 8004060:	2100      	movs	r1, #0
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fd24 	bl	8004ab0 <RCCEx_PLL2_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800406c:	e012      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3324      	adds	r3, #36	; 0x24
 8004072:	2102      	movs	r1, #2
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fdcd 	bl	8004c14 <RCCEx_PLL3_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800407e:	e009      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	75fb      	strb	r3, [r7, #23]
      break;
 8004084:	e006      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004086:	bf00      	nop
 8004088:	e004      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800408a:	bf00      	nop
 800408c:	e002      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800408e:	bf00      	nop
 8004090:	e000      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004092:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10a      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800409a:	4b8e      	ldr	r3, [pc, #568]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a8:	498a      	ldr	r1, [pc, #552]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	654b      	str	r3, [r1, #84]	; 0x54
 80040ae:	e001      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
 80040b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d04b      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040ca:	d02e      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80040cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040d0:	d828      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80040d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d6:	d02a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80040d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040dc:	d822      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80040de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040e2:	d026      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80040e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040e8:	d81c      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80040ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ee:	d010      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80040f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f4:	d816      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d01d      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80040fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fe:	d111      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	2100      	movs	r1, #0
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fcd2 	bl	8004ab0 <RCCEx_PLL2_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004110:	e012      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3324      	adds	r3, #36	; 0x24
 8004116:	2102      	movs	r1, #2
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fd7b 	bl	8004c14 <RCCEx_PLL3_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004122:	e009      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	75fb      	strb	r3, [r7, #23]
      break;
 8004128:	e006      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800412a:	bf00      	nop
 800412c:	e004      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800412e:	bf00      	nop
 8004130:	e002      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004132:	bf00      	nop
 8004134:	e000      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004138:	7dfb      	ldrb	r3, [r7, #23]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800413e:	4b65      	ldr	r3, [pc, #404]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800414c:	4961      	ldr	r1, [pc, #388]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800414e:	4313      	orrs	r3, r2
 8004150:	658b      	str	r3, [r1, #88]	; 0x58
 8004152:	e001      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004160:	2b00      	cmp	r3, #0
 8004162:	d04b      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800416a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800416e:	d02e      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004170:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004174:	d828      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800417a:	d02a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800417c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004180:	d822      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004182:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004186:	d026      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004188:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800418c:	d81c      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800418e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004192:	d010      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004198:	d816      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d01d      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800419e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a2:	d111      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fc80 	bl	8004ab0 <RCCEx_PLL2_Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80041b4:	e012      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3324      	adds	r3, #36	; 0x24
 80041ba:	2102      	movs	r1, #2
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fd29 	bl	8004c14 <RCCEx_PLL3_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80041c6:	e009      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	75fb      	strb	r3, [r7, #23]
      break;
 80041cc:	e006      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041ce:	bf00      	nop
 80041d0:	e004      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041d2:	bf00      	nop
 80041d4:	e002      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041d6:	bf00      	nop
 80041d8:	e000      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041e2:	4b3c      	ldr	r3, [pc, #240]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041f0:	4938      	ldr	r1, [pc, #224]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	658b      	str	r3, [r1, #88]	; 0x58
 80041f6:	e001      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f8:	7dfb      	ldrb	r3, [r7, #23]
 80041fa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800420e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004212:	d10a      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3324      	adds	r3, #36	; 0x24
 8004218:	2102      	movs	r1, #2
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fcfa 	bl	8004c14 <RCCEx_PLL3_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800422a:	4b2a      	ldr	r3, [pc, #168]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004238:	4926      	ldr	r1, [pc, #152]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800423a:	4313      	orrs	r3, r2
 800423c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0310 	and.w	r3, r3, #16
 8004246:	2b00      	cmp	r3, #0
 8004248:	d01a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004254:	d10a      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3324      	adds	r3, #36	; 0x24
 800425a:	2102      	movs	r1, #2
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fcd9 	bl	8004c14 <RCCEx_PLL3_Config>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800426c:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004270:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800427a:	4916      	ldr	r1, [pc, #88]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800427c:	4313      	orrs	r3, r2
 800427e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d036      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004296:	d01f      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800429c:	d817      	bhi.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80042a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a6:	d009      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80042a8:	e011      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3304      	adds	r3, #4
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fbfd 	bl	8004ab0 <RCCEx_PLL2_Config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80042ba:	e00e      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3324      	adds	r3, #36	; 0x24
 80042c0:	2102      	movs	r1, #2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fca6 	bl	8004c14 <RCCEx_PLL3_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80042cc:	e005      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	75fb      	strb	r3, [r7, #23]
      break;
 80042d2:	e002      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80042d4:	58024400 	.word	0x58024400
      break;
 80042d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042da:	7dfb      	ldrb	r3, [r7, #23]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042e0:	4b93      	ldr	r3, [pc, #588]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042ee:	4990      	ldr	r1, [pc, #576]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	658b      	str	r3, [r1, #88]	; 0x58
 80042f4:	e001      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f6:	7dfb      	ldrb	r3, [r7, #23]
 80042f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d033      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800430c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004310:	d01c      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004312:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004316:	d816      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800431c:	d003      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800431e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004322:	d007      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004324:	e00f      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004326:	4b82      	ldr	r3, [pc, #520]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	4a81      	ldr	r2, [pc, #516]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800432c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004330:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004332:	e00c      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3324      	adds	r3, #36	; 0x24
 8004338:	2101      	movs	r1, #1
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fc6a 	bl	8004c14 <RCCEx_PLL3_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004344:	e003      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	75fb      	strb	r3, [r7, #23]
      break;
 800434a:	e000      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800434c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800434e:	7dfb      	ldrb	r3, [r7, #23]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004354:	4b76      	ldr	r3, [pc, #472]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004362:	4973      	ldr	r1, [pc, #460]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	654b      	str	r3, [r1, #84]	; 0x54
 8004368:	e001      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436a:	7dfb      	ldrb	r3, [r7, #23]
 800436c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d029      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004386:	d007      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004388:	e00f      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800438a:	4b69      	ldr	r3, [pc, #420]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	4a68      	ldr	r2, [pc, #416]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004394:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004396:	e00b      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3304      	adds	r3, #4
 800439c:	2102      	movs	r1, #2
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fb86 	bl	8004ab0 <RCCEx_PLL2_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80043a8:	e002      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
      break;
 80043ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043b0:	7dfb      	ldrb	r3, [r7, #23]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043b6:	4b5e      	ldr	r3, [pc, #376]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c2:	495b      	ldr	r1, [pc, #364]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80043c8:	e001      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ca:	7dfb      	ldrb	r3, [r7, #23]
 80043cc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3324      	adds	r3, #36	; 0x24
 80043de:	2102      	movs	r1, #2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fc17 	bl	8004c14 <RCCEx_PLL3_Config>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d030      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004400:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004404:	d017      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800440a:	d811      	bhi.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800440c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004410:	d013      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004416:	d80b      	bhi.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004418:	2b00      	cmp	r3, #0
 800441a:	d010      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800441c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004420:	d106      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004422:	4b43      	ldr	r3, [pc, #268]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	4a42      	ldr	r2, [pc, #264]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800442e:	e007      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	75fb      	strb	r3, [r7, #23]
      break;
 8004434:	e004      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004436:	bf00      	nop
 8004438:	e002      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800443e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004440:	7dfb      	ldrb	r3, [r7, #23]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d109      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004446:	4b3a      	ldr	r3, [pc, #232]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004452:	4937      	ldr	r1, [pc, #220]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004454:	4313      	orrs	r3, r2
 8004456:	654b      	str	r3, [r1, #84]	; 0x54
 8004458:	e001      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445a:	7dfb      	ldrb	r3, [r7, #23]
 800445c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d008      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800446a:	4b31      	ldr	r3, [pc, #196]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800446c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	492e      	ldr	r1, [pc, #184]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004478:	4313      	orrs	r3, r2
 800447a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d009      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004488:	4b29      	ldr	r3, [pc, #164]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004496:	4926      	ldr	r1, [pc, #152]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004498:	4313      	orrs	r3, r2
 800449a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044a8:	4b21      	ldr	r3, [pc, #132]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044b4:	491e      	ldr	r1, [pc, #120]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00d      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044c6:	4b1a      	ldr	r3, [pc, #104]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	4a19      	ldr	r2, [pc, #100]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044d0:	6113      	str	r3, [r2, #16]
 80044d2:	4b17      	ldr	r3, [pc, #92]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80044dc:	4914      	ldr	r1, [pc, #80]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	da08      	bge.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044ea:	4b11      	ldr	r3, [pc, #68]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f6:	490e      	ldr	r1, [pc, #56]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d009      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004508:	4b09      	ldr	r3, [pc, #36]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800450a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	4906      	ldr	r1, [pc, #24]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004518:	4313      	orrs	r3, r2
 800451a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800451c:	7dbb      	ldrb	r3, [r7, #22]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	e000      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	58024400 	.word	0x58024400

08004534 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004538:	f7ff f860 	bl	80035fc <HAL_RCC_GetHCLKFreq>
 800453c:	4602      	mov	r2, r0
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	091b      	lsrs	r3, r3, #4
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	4904      	ldr	r1, [pc, #16]	; (800455c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800454a:	5ccb      	ldrb	r3, [r1, r3]
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004554:	4618      	mov	r0, r3
 8004556:	bd80      	pop	{r7, pc}
 8004558:	58024400 	.word	0x58024400
 800455c:	080073b0 	.word	0x080073b0

08004560 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004560:	b480      	push	{r7}
 8004562:	b089      	sub	sp, #36	; 0x24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004568:	4ba1      	ldr	r3, [pc, #644]	; (80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004572:	4b9f      	ldr	r3, [pc, #636]	; (80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	0b1b      	lsrs	r3, r3, #12
 8004578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800457c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800457e:	4b9c      	ldr	r3, [pc, #624]	; (80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	091b      	lsrs	r3, r3, #4
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800458a:	4b99      	ldr	r3, [pc, #612]	; (80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	08db      	lsrs	r3, r3, #3
 8004590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 8111 	beq.w	80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	f000 8083 	beq.w	80046bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	f200 80a1 	bhi.w	8004700 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d056      	beq.n	8004678 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80045ca:	e099      	b.n	8004700 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045cc:	4b88      	ldr	r3, [pc, #544]	; (80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d02d      	beq.n	8004634 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045d8:	4b85      	ldr	r3, [pc, #532]	; (80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	08db      	lsrs	r3, r3, #3
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	4a84      	ldr	r2, [pc, #528]	; (80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
 80045e8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	ee07 3a90 	vmov	s15, r3
 80045f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004602:	4b7b      	ldr	r3, [pc, #492]	; (80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004612:	ed97 6a03 	vldr	s12, [r7, #12]
 8004616:	eddf 5a78 	vldr	s11, [pc, #480]	; 80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800461a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800461e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800462e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004632:	e087      	b.n	8004744 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80047fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004646:	4b6a      	ldr	r3, [pc, #424]	; (80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004656:	ed97 6a03 	vldr	s12, [r7, #12]
 800465a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800465e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800466a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800466e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004672:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004676:	e065      	b.n	8004744 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468a:	4b59      	ldr	r3, [pc, #356]	; (80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469a:	ed97 6a03 	vldr	s12, [r7, #12]
 800469e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046ba:	e043      	b.n	8004744 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004804 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80046ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ce:	4b48      	ldr	r3, [pc, #288]	; (80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046de:	ed97 6a03 	vldr	s12, [r7, #12]
 80046e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046fe:	e021      	b.n	8004744 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800470e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004712:	4b37      	ldr	r3, [pc, #220]	; (80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004722:	ed97 6a03 	vldr	s12, [r7, #12]
 8004726:	eddf 5a34 	vldr	s11, [pc, #208]	; 80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800472a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800472e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800473a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004742:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004744:	4b2a      	ldr	r3, [pc, #168]	; (80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	0a5b      	lsrs	r3, r3, #9
 800474a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800475a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800475e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800476a:	ee17 2a90 	vmov	r2, s15
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004772:	4b1f      	ldr	r3, [pc, #124]	; (80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	0c1b      	lsrs	r3, r3, #16
 8004778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800477c:	ee07 3a90 	vmov	s15, r3
 8004780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004788:	ee37 7a87 	vadd.f32	s14, s15, s14
 800478c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004798:	ee17 2a90 	vmov	r2, s15
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80047a0:	4b13      	ldr	r3, [pc, #76]	; (80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	0e1b      	lsrs	r3, r3, #24
 80047a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80047be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c6:	ee17 2a90 	vmov	r2, s15
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047ce:	e008      	b.n	80047e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	609a      	str	r2, [r3, #8]
}
 80047e2:	bf00      	nop
 80047e4:	3724      	adds	r7, #36	; 0x24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	58024400 	.word	0x58024400
 80047f4:	03d09000 	.word	0x03d09000
 80047f8:	46000000 	.word	0x46000000
 80047fc:	4c742400 	.word	0x4c742400
 8004800:	4a742400 	.word	0x4a742400
 8004804:	4bbebc20 	.word	0x4bbebc20

08004808 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004808:	b480      	push	{r7}
 800480a:	b089      	sub	sp, #36	; 0x24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004810:	4ba1      	ldr	r3, [pc, #644]	; (8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800481a:	4b9f      	ldr	r3, [pc, #636]	; (8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	0d1b      	lsrs	r3, r3, #20
 8004820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004824:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004826:	4b9c      	ldr	r3, [pc, #624]	; (8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004832:	4b99      	ldr	r3, [pc, #612]	; (8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004836:	08db      	lsrs	r3, r3, #3
 8004838:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	fb02 f303 	mul.w	r3, r2, r3
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8111 	beq.w	8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b02      	cmp	r3, #2
 800485a:	f000 8083 	beq.w	8004964 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	2b02      	cmp	r3, #2
 8004862:	f200 80a1 	bhi.w	80049a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d056      	beq.n	8004920 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004872:	e099      	b.n	80049a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004874:	4b88      	ldr	r3, [pc, #544]	; (8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	2b00      	cmp	r3, #0
 800487e:	d02d      	beq.n	80048dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004880:	4b85      	ldr	r3, [pc, #532]	; (8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	08db      	lsrs	r3, r3, #3
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	4a84      	ldr	r2, [pc, #528]	; (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
 8004890:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	ee07 3a90 	vmov	s15, r3
 8004898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048aa:	4b7b      	ldr	r3, [pc, #492]	; (8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b2:	ee07 3a90 	vmov	s15, r3
 80048b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80048be:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80048da:	e087      	b.n	80049ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80048ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ee:	4b6a      	ldr	r3, [pc, #424]	; (8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004902:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800490e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800491e:	e065      	b.n	80049ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800492e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004932:	4b59      	ldr	r3, [pc, #356]	; (8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004942:	ed97 6a03 	vldr	s12, [r7, #12]
 8004946:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800494a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800494e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004962:	e043      	b.n	80049ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004aac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004976:	4b48      	ldr	r3, [pc, #288]	; (8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004986:	ed97 6a03 	vldr	s12, [r7, #12]
 800498a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800498e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800499a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800499e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049a6:	e021      	b.n	80049ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ba:	4b37      	ldr	r3, [pc, #220]	; (8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80049ec:	4b2a      	ldr	r3, [pc, #168]	; (8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	0a5b      	lsrs	r3, r3, #9
 80049f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a12:	ee17 2a90 	vmov	r2, s15
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004a1a:	4b1f      	ldr	r3, [pc, #124]	; (8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	0c1b      	lsrs	r3, r3, #16
 8004a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a24:	ee07 3a90 	vmov	s15, r3
 8004a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a34:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a40:	ee17 2a90 	vmov	r2, s15
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004a48:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	0e1b      	lsrs	r3, r3, #24
 8004a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a62:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a6e:	ee17 2a90 	vmov	r2, s15
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a76:	e008      	b.n	8004a8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	609a      	str	r2, [r3, #8]
}
 8004a8a:	bf00      	nop
 8004a8c:	3724      	adds	r7, #36	; 0x24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	58024400 	.word	0x58024400
 8004a9c:	03d09000 	.word	0x03d09000
 8004aa0:	46000000 	.word	0x46000000
 8004aa4:	4c742400 	.word	0x4c742400
 8004aa8:	4a742400 	.word	0x4a742400
 8004aac:	4bbebc20 	.word	0x4bbebc20

08004ab0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004abe:	4b53      	ldr	r3, [pc, #332]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d101      	bne.n	8004ace <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e099      	b.n	8004c02 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ace:	4b4f      	ldr	r3, [pc, #316]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a4e      	ldr	r2, [pc, #312]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004ad4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ada:	f7fd fb11 	bl	8002100 <HAL_GetTick>
 8004ade:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ae0:	e008      	b.n	8004af4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004ae2:	f7fd fb0d 	bl	8002100 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e086      	b.n	8004c02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004af4:	4b45      	ldr	r3, [pc, #276]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f0      	bne.n	8004ae2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b00:	4b42      	ldr	r3, [pc, #264]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	031b      	lsls	r3, r3, #12
 8004b0e:	493f      	ldr	r1, [pc, #252]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	628b      	str	r3, [r1, #40]	; 0x28
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	025b      	lsls	r3, r3, #9
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	041b      	lsls	r3, r3, #16
 8004b32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	061b      	lsls	r3, r3, #24
 8004b40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b44:	4931      	ldr	r1, [pc, #196]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b4a:	4b30      	ldr	r3, [pc, #192]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	492d      	ldr	r1, [pc, #180]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b5c:	4b2b      	ldr	r3, [pc, #172]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	f023 0220 	bic.w	r2, r3, #32
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	4928      	ldr	r1, [pc, #160]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b6e:	4b27      	ldr	r3, [pc, #156]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	4a26      	ldr	r2, [pc, #152]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004b74:	f023 0310 	bic.w	r3, r3, #16
 8004b78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b7a:	4b24      	ldr	r3, [pc, #144]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b7e:	4b24      	ldr	r3, [pc, #144]	; (8004c10 <RCCEx_PLL2_Config+0x160>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	69d2      	ldr	r2, [r2, #28]
 8004b86:	00d2      	lsls	r2, r2, #3
 8004b88:	4920      	ldr	r1, [pc, #128]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b8e:	4b1f      	ldr	r3, [pc, #124]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b92:	4a1e      	ldr	r2, [pc, #120]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004b94:	f043 0310 	orr.w	r3, r3, #16
 8004b98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d106      	bne.n	8004bae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ba0:	4b1a      	ldr	r3, [pc, #104]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004ba6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004baa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bac:	e00f      	b.n	8004bce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d106      	bne.n	8004bc2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004bb4:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	4a14      	ldr	r2, [pc, #80]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004bba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bc0:	e005      	b.n	8004bce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	4a11      	ldr	r2, [pc, #68]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004bc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bcc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004bce:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a0e      	ldr	r2, [pc, #56]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004bd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bda:	f7fd fa91 	bl	8002100 <HAL_GetTick>
 8004bde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004be0:	e008      	b.n	8004bf4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004be2:	f7fd fa8d 	bl	8002100 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e006      	b.n	8004c02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <RCCEx_PLL2_Config+0x15c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0f0      	beq.n	8004be2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	58024400 	.word	0x58024400
 8004c10:	ffff0007 	.word	0xffff0007

08004c14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c22:	4b53      	ldr	r3, [pc, #332]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d101      	bne.n	8004c32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e099      	b.n	8004d66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c32:	4b4f      	ldr	r3, [pc, #316]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a4e      	ldr	r2, [pc, #312]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c3e:	f7fd fa5f 	bl	8002100 <HAL_GetTick>
 8004c42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c44:	e008      	b.n	8004c58 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c46:	f7fd fa5b 	bl	8002100 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e086      	b.n	8004d66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c58:	4b45      	ldr	r3, [pc, #276]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1f0      	bne.n	8004c46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c64:	4b42      	ldr	r3, [pc, #264]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c68:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	051b      	lsls	r3, r3, #20
 8004c72:	493f      	ldr	r1, [pc, #252]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	628b      	str	r3, [r1, #40]	; 0x28
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	025b      	lsls	r3, r3, #9
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	041b      	lsls	r3, r3, #16
 8004c96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	061b      	lsls	r3, r3, #24
 8004ca4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ca8:	4931      	ldr	r1, [pc, #196]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004cae:	4b30      	ldr	r3, [pc, #192]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	492d      	ldr	r1, [pc, #180]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004cc0:	4b2b      	ldr	r3, [pc, #172]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	4928      	ldr	r1, [pc, #160]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004cd2:	4b27      	ldr	r3, [pc, #156]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	4a26      	ldr	r2, [pc, #152]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004cde:	4b24      	ldr	r3, [pc, #144]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ce2:	4b24      	ldr	r3, [pc, #144]	; (8004d74 <RCCEx_PLL3_Config+0x160>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	69d2      	ldr	r2, [r2, #28]
 8004cea:	00d2      	lsls	r2, r2, #3
 8004cec:	4920      	ldr	r1, [pc, #128]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cf2:	4b1f      	ldr	r3, [pc, #124]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d106      	bne.n	8004d12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d04:	4b1a      	ldr	r3, [pc, #104]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	4a19      	ldr	r2, [pc, #100]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004d0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d10:	e00f      	b.n	8004d32 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d106      	bne.n	8004d26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d18:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	4a14      	ldr	r2, [pc, #80]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004d1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d24:	e005      	b.n	8004d32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d26:	4b12      	ldr	r3, [pc, #72]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	4a11      	ldr	r2, [pc, #68]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004d2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d32:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a0e      	ldr	r2, [pc, #56]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d3e:	f7fd f9df 	bl	8002100 <HAL_GetTick>
 8004d42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d44:	e008      	b.n	8004d58 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d46:	f7fd f9db 	bl	8002100 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e006      	b.n	8004d66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d58:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <RCCEx_PLL3_Config+0x15c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0f0      	beq.n	8004d46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	58024400 	.word	0x58024400
 8004d74:	ffff0007 	.word	0xffff0007

08004d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e049      	b.n	8004e1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fc feaa 	bl	8001af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3304      	adds	r3, #4
 8004db4:	4619      	mov	r1, r3
 8004db6:	4610      	mov	r0, r2
 8004db8:	f000 fbb0 	bl	800551c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e049      	b.n	8004ecc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f841 	bl	8004ed4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2202      	movs	r2, #2
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3304      	adds	r3, #4
 8004e62:	4619      	mov	r1, r3
 8004e64:	4610      	mov	r0, r2
 8004e66:	f000 fb59 	bl	800551c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d109      	bne.n	8004f0c <HAL_TIM_PWM_Start+0x24>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	bf14      	ite	ne
 8004f04:	2301      	movne	r3, #1
 8004f06:	2300      	moveq	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	e03c      	b.n	8004f86 <HAL_TIM_PWM_Start+0x9e>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d109      	bne.n	8004f26 <HAL_TIM_PWM_Start+0x3e>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	bf14      	ite	ne
 8004f1e:	2301      	movne	r3, #1
 8004f20:	2300      	moveq	r3, #0
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	e02f      	b.n	8004f86 <HAL_TIM_PWM_Start+0x9e>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d109      	bne.n	8004f40 <HAL_TIM_PWM_Start+0x58>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	bf14      	ite	ne
 8004f38:	2301      	movne	r3, #1
 8004f3a:	2300      	moveq	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	e022      	b.n	8004f86 <HAL_TIM_PWM_Start+0x9e>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2b0c      	cmp	r3, #12
 8004f44:	d109      	bne.n	8004f5a <HAL_TIM_PWM_Start+0x72>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	bf14      	ite	ne
 8004f52:	2301      	movne	r3, #1
 8004f54:	2300      	moveq	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	e015      	b.n	8004f86 <HAL_TIM_PWM_Start+0x9e>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b10      	cmp	r3, #16
 8004f5e:	d109      	bne.n	8004f74 <HAL_TIM_PWM_Start+0x8c>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	bf14      	ite	ne
 8004f6c:	2301      	movne	r3, #1
 8004f6e:	2300      	moveq	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	e008      	b.n	8004f86 <HAL_TIM_PWM_Start+0x9e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	bf14      	ite	ne
 8004f80:	2301      	movne	r3, #1
 8004f82:	2300      	moveq	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e0a1      	b.n	80050d2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d104      	bne.n	8004f9e <HAL_TIM_PWM_Start+0xb6>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f9c:	e023      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xfe>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d104      	bne.n	8004fae <HAL_TIM_PWM_Start+0xc6>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fac:	e01b      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xfe>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d104      	bne.n	8004fbe <HAL_TIM_PWM_Start+0xd6>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fbc:	e013      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xfe>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b0c      	cmp	r3, #12
 8004fc2:	d104      	bne.n	8004fce <HAL_TIM_PWM_Start+0xe6>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fcc:	e00b      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xfe>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b10      	cmp	r3, #16
 8004fd2:	d104      	bne.n	8004fde <HAL_TIM_PWM_Start+0xf6>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fdc:	e003      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xfe>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2201      	movs	r2, #1
 8004fec:	6839      	ldr	r1, [r7, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fea2 	bl	8005d38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a38      	ldr	r2, [pc, #224]	; (80050dc <HAL_TIM_PWM_Start+0x1f4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d013      	beq.n	8005026 <HAL_TIM_PWM_Start+0x13e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a37      	ldr	r2, [pc, #220]	; (80050e0 <HAL_TIM_PWM_Start+0x1f8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00e      	beq.n	8005026 <HAL_TIM_PWM_Start+0x13e>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a35      	ldr	r2, [pc, #212]	; (80050e4 <HAL_TIM_PWM_Start+0x1fc>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d009      	beq.n	8005026 <HAL_TIM_PWM_Start+0x13e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a34      	ldr	r2, [pc, #208]	; (80050e8 <HAL_TIM_PWM_Start+0x200>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d004      	beq.n	8005026 <HAL_TIM_PWM_Start+0x13e>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a32      	ldr	r2, [pc, #200]	; (80050ec <HAL_TIM_PWM_Start+0x204>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d101      	bne.n	800502a <HAL_TIM_PWM_Start+0x142>
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <HAL_TIM_PWM_Start+0x144>
 800502a:	2300      	movs	r3, #0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d007      	beq.n	8005040 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800503e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a25      	ldr	r2, [pc, #148]	; (80050dc <HAL_TIM_PWM_Start+0x1f4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d022      	beq.n	8005090 <HAL_TIM_PWM_Start+0x1a8>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005052:	d01d      	beq.n	8005090 <HAL_TIM_PWM_Start+0x1a8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a25      	ldr	r2, [pc, #148]	; (80050f0 <HAL_TIM_PWM_Start+0x208>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d018      	beq.n	8005090 <HAL_TIM_PWM_Start+0x1a8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a24      	ldr	r2, [pc, #144]	; (80050f4 <HAL_TIM_PWM_Start+0x20c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d013      	beq.n	8005090 <HAL_TIM_PWM_Start+0x1a8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a22      	ldr	r2, [pc, #136]	; (80050f8 <HAL_TIM_PWM_Start+0x210>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d00e      	beq.n	8005090 <HAL_TIM_PWM_Start+0x1a8>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1a      	ldr	r2, [pc, #104]	; (80050e0 <HAL_TIM_PWM_Start+0x1f8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d009      	beq.n	8005090 <HAL_TIM_PWM_Start+0x1a8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1e      	ldr	r2, [pc, #120]	; (80050fc <HAL_TIM_PWM_Start+0x214>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d004      	beq.n	8005090 <HAL_TIM_PWM_Start+0x1a8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a16      	ldr	r2, [pc, #88]	; (80050e4 <HAL_TIM_PWM_Start+0x1fc>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d115      	bne.n	80050bc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	4b1a      	ldr	r3, [pc, #104]	; (8005100 <HAL_TIM_PWM_Start+0x218>)
 8005098:	4013      	ands	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b06      	cmp	r3, #6
 80050a0:	d015      	beq.n	80050ce <HAL_TIM_PWM_Start+0x1e6>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a8:	d011      	beq.n	80050ce <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0201 	orr.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ba:	e008      	b.n	80050ce <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0201 	orr.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	e000      	b.n	80050d0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40010000 	.word	0x40010000
 80050e0:	40010400 	.word	0x40010400
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40014400 	.word	0x40014400
 80050ec:	40014800 	.word	0x40014800
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40000c00 	.word	0x40000c00
 80050fc:	40001800 	.word	0x40001800
 8005100:	00010007 	.word	0x00010007

08005104 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005110:	2300      	movs	r3, #0
 8005112:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800511e:	2302      	movs	r3, #2
 8005120:	e0ff      	b.n	8005322 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b14      	cmp	r3, #20
 800512e:	f200 80f0 	bhi.w	8005312 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005132:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005138:	0800518d 	.word	0x0800518d
 800513c:	08005313 	.word	0x08005313
 8005140:	08005313 	.word	0x08005313
 8005144:	08005313 	.word	0x08005313
 8005148:	080051cd 	.word	0x080051cd
 800514c:	08005313 	.word	0x08005313
 8005150:	08005313 	.word	0x08005313
 8005154:	08005313 	.word	0x08005313
 8005158:	0800520f 	.word	0x0800520f
 800515c:	08005313 	.word	0x08005313
 8005160:	08005313 	.word	0x08005313
 8005164:	08005313 	.word	0x08005313
 8005168:	0800524f 	.word	0x0800524f
 800516c:	08005313 	.word	0x08005313
 8005170:	08005313 	.word	0x08005313
 8005174:	08005313 	.word	0x08005313
 8005178:	08005291 	.word	0x08005291
 800517c:	08005313 	.word	0x08005313
 8005180:	08005313 	.word	0x08005313
 8005184:	08005313 	.word	0x08005313
 8005188:	080052d1 	.word	0x080052d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fa5c 	bl	8005650 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0208 	orr.w	r2, r2, #8
 80051a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0204 	bic.w	r2, r2, #4
 80051b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6999      	ldr	r1, [r3, #24]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	619a      	str	r2, [r3, #24]
      break;
 80051ca:	e0a5      	b.n	8005318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 facc 	bl	8005770 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6999      	ldr	r1, [r3, #24]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	021a      	lsls	r2, r3, #8
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	619a      	str	r2, [r3, #24]
      break;
 800520c:	e084      	b.n	8005318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fb35 	bl	8005884 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0208 	orr.w	r2, r2, #8
 8005228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69da      	ldr	r2, [r3, #28]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0204 	bic.w	r2, r2, #4
 8005238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69d9      	ldr	r1, [r3, #28]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	61da      	str	r2, [r3, #28]
      break;
 800524c:	e064      	b.n	8005318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fb9d 	bl	8005994 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69da      	ldr	r2, [r3, #28]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69d9      	ldr	r1, [r3, #28]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	021a      	lsls	r2, r3, #8
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	61da      	str	r2, [r3, #28]
      break;
 800528e:	e043      	b.n	8005318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fbe6 	bl	8005a68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0208 	orr.w	r2, r2, #8
 80052aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0204 	bic.w	r2, r2, #4
 80052ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052ce:	e023      	b.n	8005318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fc2a 	bl	8005b30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	021a      	lsls	r2, r3, #8
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005310:	e002      	b.n	8005318 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	75fb      	strb	r3, [r7, #23]
      break;
 8005316:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005320:	7dfb      	ldrb	r3, [r7, #23]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop

0800532c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_TIM_ConfigClockSource+0x1c>
 8005344:	2302      	movs	r3, #2
 8005346:	e0dc      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x1d6>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	4b6a      	ldr	r3, [pc, #424]	; (800550c <HAL_TIM_ConfigClockSource+0x1e0>)
 8005364:	4013      	ands	r3, r2
 8005366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800536e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a64      	ldr	r2, [pc, #400]	; (8005510 <HAL_TIM_ConfigClockSource+0x1e4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	f000 80a9 	beq.w	80054d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005384:	4a62      	ldr	r2, [pc, #392]	; (8005510 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	f200 80ae 	bhi.w	80054e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800538c:	4a61      	ldr	r2, [pc, #388]	; (8005514 <HAL_TIM_ConfigClockSource+0x1e8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	f000 80a1 	beq.w	80054d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005394:	4a5f      	ldr	r2, [pc, #380]	; (8005514 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	f200 80a6 	bhi.w	80054e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800539c:	4a5e      	ldr	r2, [pc, #376]	; (8005518 <HAL_TIM_ConfigClockSource+0x1ec>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	f000 8099 	beq.w	80054d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80053a4:	4a5c      	ldr	r2, [pc, #368]	; (8005518 <HAL_TIM_ConfigClockSource+0x1ec>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	f200 809e 	bhi.w	80054e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80053ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80053b0:	f000 8091 	beq.w	80054d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80053b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80053b8:	f200 8096 	bhi.w	80054e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80053bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053c0:	f000 8089 	beq.w	80054d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80053c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053c8:	f200 808e 	bhi.w	80054e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80053cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d0:	d03e      	beq.n	8005450 <HAL_TIM_ConfigClockSource+0x124>
 80053d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d6:	f200 8087 	bhi.w	80054e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80053da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053de:	f000 8086 	beq.w	80054ee <HAL_TIM_ConfigClockSource+0x1c2>
 80053e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e6:	d87f      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80053e8:	2b70      	cmp	r3, #112	; 0x70
 80053ea:	d01a      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0xf6>
 80053ec:	2b70      	cmp	r3, #112	; 0x70
 80053ee:	d87b      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80053f0:	2b60      	cmp	r3, #96	; 0x60
 80053f2:	d050      	beq.n	8005496 <HAL_TIM_ConfigClockSource+0x16a>
 80053f4:	2b60      	cmp	r3, #96	; 0x60
 80053f6:	d877      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80053f8:	2b50      	cmp	r3, #80	; 0x50
 80053fa:	d03c      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0x14a>
 80053fc:	2b50      	cmp	r3, #80	; 0x50
 80053fe:	d873      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005400:	2b40      	cmp	r3, #64	; 0x40
 8005402:	d058      	beq.n	80054b6 <HAL_TIM_ConfigClockSource+0x18a>
 8005404:	2b40      	cmp	r3, #64	; 0x40
 8005406:	d86f      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005408:	2b30      	cmp	r3, #48	; 0x30
 800540a:	d064      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800540c:	2b30      	cmp	r3, #48	; 0x30
 800540e:	d86b      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005410:	2b20      	cmp	r3, #32
 8005412:	d060      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005414:	2b20      	cmp	r3, #32
 8005416:	d867      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d05c      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800541c:	2b10      	cmp	r3, #16
 800541e:	d05a      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005420:	e062      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6899      	ldr	r1, [r3, #8]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f000 fc61 	bl	8005cf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005444:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	609a      	str	r2, [r3, #8]
      break;
 800544e:	e04f      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6818      	ldr	r0, [r3, #0]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	6899      	ldr	r1, [r3, #8]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f000 fc4a 	bl	8005cf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005472:	609a      	str	r2, [r3, #8]
      break;
 8005474:	e03c      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6859      	ldr	r1, [r3, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	461a      	mov	r2, r3
 8005484:	f000 fbba 	bl	8005bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2150      	movs	r1, #80	; 0x50
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fc14 	bl	8005cbc <TIM_ITRx_SetConfig>
      break;
 8005494:	e02c      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6859      	ldr	r1, [r3, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	461a      	mov	r2, r3
 80054a4:	f000 fbd9 	bl	8005c5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2160      	movs	r1, #96	; 0x60
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fc04 	bl	8005cbc <TIM_ITRx_SetConfig>
      break;
 80054b4:	e01c      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6859      	ldr	r1, [r3, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f000 fb9a 	bl	8005bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2140      	movs	r1, #64	; 0x40
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fbf4 	bl	8005cbc <TIM_ITRx_SetConfig>
      break;
 80054d4:	e00c      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4619      	mov	r1, r3
 80054e0:	4610      	mov	r0, r2
 80054e2:	f000 fbeb 	bl	8005cbc <TIM_ITRx_SetConfig>
      break;
 80054e6:	e003      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
      break;
 80054ec:	e000      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80054ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	ffceff88 	.word	0xffceff88
 8005510:	00100040 	.word	0x00100040
 8005514:	00100030 	.word	0x00100030
 8005518:	00100020 	.word	0x00100020

0800551c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a40      	ldr	r2, [pc, #256]	; (8005630 <TIM_Base_SetConfig+0x114>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d013      	beq.n	800555c <TIM_Base_SetConfig+0x40>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553a:	d00f      	beq.n	800555c <TIM_Base_SetConfig+0x40>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a3d      	ldr	r2, [pc, #244]	; (8005634 <TIM_Base_SetConfig+0x118>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00b      	beq.n	800555c <TIM_Base_SetConfig+0x40>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a3c      	ldr	r2, [pc, #240]	; (8005638 <TIM_Base_SetConfig+0x11c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d007      	beq.n	800555c <TIM_Base_SetConfig+0x40>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a3b      	ldr	r2, [pc, #236]	; (800563c <TIM_Base_SetConfig+0x120>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d003      	beq.n	800555c <TIM_Base_SetConfig+0x40>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a3a      	ldr	r2, [pc, #232]	; (8005640 <TIM_Base_SetConfig+0x124>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d108      	bne.n	800556e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a2f      	ldr	r2, [pc, #188]	; (8005630 <TIM_Base_SetConfig+0x114>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d01f      	beq.n	80055b6 <TIM_Base_SetConfig+0x9a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557c:	d01b      	beq.n	80055b6 <TIM_Base_SetConfig+0x9a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a2c      	ldr	r2, [pc, #176]	; (8005634 <TIM_Base_SetConfig+0x118>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d017      	beq.n	80055b6 <TIM_Base_SetConfig+0x9a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a2b      	ldr	r2, [pc, #172]	; (8005638 <TIM_Base_SetConfig+0x11c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d013      	beq.n	80055b6 <TIM_Base_SetConfig+0x9a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a2a      	ldr	r2, [pc, #168]	; (800563c <TIM_Base_SetConfig+0x120>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00f      	beq.n	80055b6 <TIM_Base_SetConfig+0x9a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a29      	ldr	r2, [pc, #164]	; (8005640 <TIM_Base_SetConfig+0x124>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00b      	beq.n	80055b6 <TIM_Base_SetConfig+0x9a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a28      	ldr	r2, [pc, #160]	; (8005644 <TIM_Base_SetConfig+0x128>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d007      	beq.n	80055b6 <TIM_Base_SetConfig+0x9a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a27      	ldr	r2, [pc, #156]	; (8005648 <TIM_Base_SetConfig+0x12c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d003      	beq.n	80055b6 <TIM_Base_SetConfig+0x9a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a26      	ldr	r2, [pc, #152]	; (800564c <TIM_Base_SetConfig+0x130>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d108      	bne.n	80055c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a10      	ldr	r2, [pc, #64]	; (8005630 <TIM_Base_SetConfig+0x114>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00f      	beq.n	8005614 <TIM_Base_SetConfig+0xf8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a12      	ldr	r2, [pc, #72]	; (8005640 <TIM_Base_SetConfig+0x124>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00b      	beq.n	8005614 <TIM_Base_SetConfig+0xf8>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a11      	ldr	r2, [pc, #68]	; (8005644 <TIM_Base_SetConfig+0x128>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d007      	beq.n	8005614 <TIM_Base_SetConfig+0xf8>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a10      	ldr	r2, [pc, #64]	; (8005648 <TIM_Base_SetConfig+0x12c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d003      	beq.n	8005614 <TIM_Base_SetConfig+0xf8>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a0f      	ldr	r2, [pc, #60]	; (800564c <TIM_Base_SetConfig+0x130>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d103      	bne.n	800561c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	615a      	str	r2, [r3, #20]
}
 8005622:	bf00      	nop
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40010000 	.word	0x40010000
 8005634:	40000400 	.word	0x40000400
 8005638:	40000800 	.word	0x40000800
 800563c:	40000c00 	.word	0x40000c00
 8005640:	40010400 	.word	0x40010400
 8005644:	40014000 	.word	0x40014000
 8005648:	40014400 	.word	0x40014400
 800564c:	40014800 	.word	0x40014800

08005650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f023 0201 	bic.w	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4b37      	ldr	r3, [pc, #220]	; (8005758 <TIM_OC1_SetConfig+0x108>)
 800567c:	4013      	ands	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0303 	bic.w	r3, r3, #3
 8005686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f023 0302 	bic.w	r3, r3, #2
 8005698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a2d      	ldr	r2, [pc, #180]	; (800575c <TIM_OC1_SetConfig+0x10c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00f      	beq.n	80056cc <TIM_OC1_SetConfig+0x7c>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a2c      	ldr	r2, [pc, #176]	; (8005760 <TIM_OC1_SetConfig+0x110>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00b      	beq.n	80056cc <TIM_OC1_SetConfig+0x7c>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a2b      	ldr	r2, [pc, #172]	; (8005764 <TIM_OC1_SetConfig+0x114>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d007      	beq.n	80056cc <TIM_OC1_SetConfig+0x7c>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a2a      	ldr	r2, [pc, #168]	; (8005768 <TIM_OC1_SetConfig+0x118>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_OC1_SetConfig+0x7c>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a29      	ldr	r2, [pc, #164]	; (800576c <TIM_OC1_SetConfig+0x11c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d10c      	bne.n	80056e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f023 0308 	bic.w	r3, r3, #8
 80056d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f023 0304 	bic.w	r3, r3, #4
 80056e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a1c      	ldr	r2, [pc, #112]	; (800575c <TIM_OC1_SetConfig+0x10c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00f      	beq.n	800570e <TIM_OC1_SetConfig+0xbe>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a1b      	ldr	r2, [pc, #108]	; (8005760 <TIM_OC1_SetConfig+0x110>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00b      	beq.n	800570e <TIM_OC1_SetConfig+0xbe>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1a      	ldr	r2, [pc, #104]	; (8005764 <TIM_OC1_SetConfig+0x114>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d007      	beq.n	800570e <TIM_OC1_SetConfig+0xbe>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a19      	ldr	r2, [pc, #100]	; (8005768 <TIM_OC1_SetConfig+0x118>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_OC1_SetConfig+0xbe>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a18      	ldr	r2, [pc, #96]	; (800576c <TIM_OC1_SetConfig+0x11c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d111      	bne.n	8005732 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800571c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	4313      	orrs	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	621a      	str	r2, [r3, #32]
}
 800574c:	bf00      	nop
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	fffeff8f 	.word	0xfffeff8f
 800575c:	40010000 	.word	0x40010000
 8005760:	40010400 	.word	0x40010400
 8005764:	40014000 	.word	0x40014000
 8005768:	40014400 	.word	0x40014400
 800576c:	40014800 	.word	0x40014800

08005770 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	f023 0210 	bic.w	r2, r3, #16
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4b34      	ldr	r3, [pc, #208]	; (800586c <TIM_OC2_SetConfig+0xfc>)
 800579c:	4013      	ands	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f023 0320 	bic.w	r3, r3, #32
 80057ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a29      	ldr	r2, [pc, #164]	; (8005870 <TIM_OC2_SetConfig+0x100>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_OC2_SetConfig+0x68>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a28      	ldr	r2, [pc, #160]	; (8005874 <TIM_OC2_SetConfig+0x104>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d10d      	bne.n	80057f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a1e      	ldr	r2, [pc, #120]	; (8005870 <TIM_OC2_SetConfig+0x100>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00f      	beq.n	800581c <TIM_OC2_SetConfig+0xac>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a1d      	ldr	r2, [pc, #116]	; (8005874 <TIM_OC2_SetConfig+0x104>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d00b      	beq.n	800581c <TIM_OC2_SetConfig+0xac>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a1c      	ldr	r2, [pc, #112]	; (8005878 <TIM_OC2_SetConfig+0x108>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d007      	beq.n	800581c <TIM_OC2_SetConfig+0xac>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a1b      	ldr	r2, [pc, #108]	; (800587c <TIM_OC2_SetConfig+0x10c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d003      	beq.n	800581c <TIM_OC2_SetConfig+0xac>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a1a      	ldr	r2, [pc, #104]	; (8005880 <TIM_OC2_SetConfig+0x110>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d113      	bne.n	8005844 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005822:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800582a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	4313      	orrs	r3, r2
 8005836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	feff8fff 	.word	0xfeff8fff
 8005870:	40010000 	.word	0x40010000
 8005874:	40010400 	.word	0x40010400
 8005878:	40014000 	.word	0x40014000
 800587c:	40014400 	.word	0x40014400
 8005880:	40014800 	.word	0x40014800

08005884 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4b33      	ldr	r3, [pc, #204]	; (800597c <TIM_OC3_SetConfig+0xf8>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0303 	bic.w	r3, r3, #3
 80058ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	021b      	lsls	r3, r3, #8
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a28      	ldr	r2, [pc, #160]	; (8005980 <TIM_OC3_SetConfig+0xfc>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d003      	beq.n	80058ea <TIM_OC3_SetConfig+0x66>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a27      	ldr	r2, [pc, #156]	; (8005984 <TIM_OC3_SetConfig+0x100>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d10d      	bne.n	8005906 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a1d      	ldr	r2, [pc, #116]	; (8005980 <TIM_OC3_SetConfig+0xfc>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00f      	beq.n	800592e <TIM_OC3_SetConfig+0xaa>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a1c      	ldr	r2, [pc, #112]	; (8005984 <TIM_OC3_SetConfig+0x100>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00b      	beq.n	800592e <TIM_OC3_SetConfig+0xaa>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a1b      	ldr	r2, [pc, #108]	; (8005988 <TIM_OC3_SetConfig+0x104>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d007      	beq.n	800592e <TIM_OC3_SetConfig+0xaa>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a1a      	ldr	r2, [pc, #104]	; (800598c <TIM_OC3_SetConfig+0x108>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d003      	beq.n	800592e <TIM_OC3_SetConfig+0xaa>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a19      	ldr	r2, [pc, #100]	; (8005990 <TIM_OC3_SetConfig+0x10c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d113      	bne.n	8005956 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800593c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	4313      	orrs	r3, r2
 8005954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	621a      	str	r2, [r3, #32]
}
 8005970:	bf00      	nop
 8005972:	371c      	adds	r7, #28
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	fffeff8f 	.word	0xfffeff8f
 8005980:	40010000 	.word	0x40010000
 8005984:	40010400 	.word	0x40010400
 8005988:	40014000 	.word	0x40014000
 800598c:	40014400 	.word	0x40014400
 8005990:	40014800 	.word	0x40014800

08005994 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4b24      	ldr	r3, [pc, #144]	; (8005a50 <TIM_OC4_SetConfig+0xbc>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	021b      	lsls	r3, r3, #8
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	031b      	lsls	r3, r3, #12
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a19      	ldr	r2, [pc, #100]	; (8005a54 <TIM_OC4_SetConfig+0xc0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00f      	beq.n	8005a14 <TIM_OC4_SetConfig+0x80>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a18      	ldr	r2, [pc, #96]	; (8005a58 <TIM_OC4_SetConfig+0xc4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00b      	beq.n	8005a14 <TIM_OC4_SetConfig+0x80>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a17      	ldr	r2, [pc, #92]	; (8005a5c <TIM_OC4_SetConfig+0xc8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d007      	beq.n	8005a14 <TIM_OC4_SetConfig+0x80>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a16      	ldr	r2, [pc, #88]	; (8005a60 <TIM_OC4_SetConfig+0xcc>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <TIM_OC4_SetConfig+0x80>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a15      	ldr	r2, [pc, #84]	; (8005a64 <TIM_OC4_SetConfig+0xd0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d109      	bne.n	8005a28 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	019b      	lsls	r3, r3, #6
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	621a      	str	r2, [r3, #32]
}
 8005a42:	bf00      	nop
 8005a44:	371c      	adds	r7, #28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	feff8fff 	.word	0xfeff8fff
 8005a54:	40010000 	.word	0x40010000
 8005a58:	40010400 	.word	0x40010400
 8005a5c:	40014000 	.word	0x40014000
 8005a60:	40014400 	.word	0x40014400
 8005a64:	40014800 	.word	0x40014800

08005a68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4b21      	ldr	r3, [pc, #132]	; (8005b18 <TIM_OC5_SetConfig+0xb0>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005aa8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	041b      	lsls	r3, r3, #16
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a18      	ldr	r2, [pc, #96]	; (8005b1c <TIM_OC5_SetConfig+0xb4>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00f      	beq.n	8005ade <TIM_OC5_SetConfig+0x76>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a17      	ldr	r2, [pc, #92]	; (8005b20 <TIM_OC5_SetConfig+0xb8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00b      	beq.n	8005ade <TIM_OC5_SetConfig+0x76>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a16      	ldr	r2, [pc, #88]	; (8005b24 <TIM_OC5_SetConfig+0xbc>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d007      	beq.n	8005ade <TIM_OC5_SetConfig+0x76>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a15      	ldr	r2, [pc, #84]	; (8005b28 <TIM_OC5_SetConfig+0xc0>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d003      	beq.n	8005ade <TIM_OC5_SetConfig+0x76>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a14      	ldr	r2, [pc, #80]	; (8005b2c <TIM_OC5_SetConfig+0xc4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d109      	bne.n	8005af2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ae4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	021b      	lsls	r3, r3, #8
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	621a      	str	r2, [r3, #32]
}
 8005b0c:	bf00      	nop
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	fffeff8f 	.word	0xfffeff8f
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	40010400 	.word	0x40010400
 8005b24:	40014000 	.word	0x40014000
 8005b28:	40014400 	.word	0x40014400
 8005b2c:	40014800 	.word	0x40014800

08005b30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4b22      	ldr	r3, [pc, #136]	; (8005be4 <TIM_OC6_SetConfig+0xb4>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	051b      	lsls	r3, r3, #20
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a19      	ldr	r2, [pc, #100]	; (8005be8 <TIM_OC6_SetConfig+0xb8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00f      	beq.n	8005ba8 <TIM_OC6_SetConfig+0x78>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a18      	ldr	r2, [pc, #96]	; (8005bec <TIM_OC6_SetConfig+0xbc>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00b      	beq.n	8005ba8 <TIM_OC6_SetConfig+0x78>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a17      	ldr	r2, [pc, #92]	; (8005bf0 <TIM_OC6_SetConfig+0xc0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d007      	beq.n	8005ba8 <TIM_OC6_SetConfig+0x78>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a16      	ldr	r2, [pc, #88]	; (8005bf4 <TIM_OC6_SetConfig+0xc4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_OC6_SetConfig+0x78>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <TIM_OC6_SetConfig+0xc8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d109      	bne.n	8005bbc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	029b      	lsls	r3, r3, #10
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	621a      	str	r2, [r3, #32]
}
 8005bd6:	bf00      	nop
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	feff8fff 	.word	0xfeff8fff
 8005be8:	40010000 	.word	0x40010000
 8005bec:	40010400 	.word	0x40010400
 8005bf0:	40014000 	.word	0x40014000
 8005bf4:	40014400 	.word	0x40014400
 8005bf8:	40014800 	.word	0x40014800

08005bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	f023 0201 	bic.w	r2, r3, #1
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f023 030a 	bic.w	r3, r3, #10
 8005c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b087      	sub	sp, #28
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	60f8      	str	r0, [r7, #12]
 8005c62:	60b9      	str	r1, [r7, #8]
 8005c64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	f023 0210 	bic.w	r2, r3, #16
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	031b      	lsls	r3, r3, #12
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	621a      	str	r2, [r3, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
	...

08005cbc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <TIM_ITRx_SetConfig+0x38>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f043 0307 	orr.w	r3, r3, #7
 8005cde:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	609a      	str	r2, [r3, #8]
}
 8005ce6:	bf00      	nop
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	ffcfff8f 	.word	0xffcfff8f

08005cf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
 8005d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	021a      	lsls	r2, r3, #8
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	609a      	str	r2, [r3, #8]
}
 8005d2c:	bf00      	nop
 8005d2e:	371c      	adds	r7, #28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f003 031f 	and.w	r3, r3, #31
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a1a      	ldr	r2, [r3, #32]
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	401a      	ands	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a1a      	ldr	r2, [r3, #32]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f003 031f 	and.w	r3, r3, #31
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d70:	431a      	orrs	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	621a      	str	r2, [r3, #32]
}
 8005d76:	bf00      	nop
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
	...

08005d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e06d      	b.n	8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a30      	ldr	r2, [pc, #192]	; (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d004      	beq.n	8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a2f      	ldr	r2, [pc, #188]	; (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d108      	bne.n	8005de2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005dd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a20      	ldr	r2, [pc, #128]	; (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d022      	beq.n	8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e0e:	d01d      	beq.n	8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a1d      	ldr	r2, [pc, #116]	; (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d018      	beq.n	8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1c      	ldr	r2, [pc, #112]	; (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d013      	beq.n	8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a1a      	ldr	r2, [pc, #104]	; (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d00e      	beq.n	8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a15      	ldr	r2, [pc, #84]	; (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d009      	beq.n	8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a16      	ldr	r2, [pc, #88]	; (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d004      	beq.n	8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a15      	ldr	r2, [pc, #84]	; (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d10c      	bne.n	8005e66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	40010000 	.word	0x40010000
 8005e88:	40010400 	.word	0x40010400
 8005e8c:	40000400 	.word	0x40000400
 8005e90:	40000800 	.word	0x40000800
 8005e94:	40000c00 	.word	0x40000c00
 8005e98:	40001800 	.word	0x40001800
 8005e9c:	40014000 	.word	0x40014000

08005ea0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e065      	b.n	8005f88 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	041b      	lsls	r3, r3, #16
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a16      	ldr	r2, [pc, #88]	; (8005f94 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d004      	beq.n	8005f4a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a14      	ldr	r2, [pc, #80]	; (8005f98 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d115      	bne.n	8005f76 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	051b      	lsls	r3, r3, #20
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	40010000 	.word	0x40010000
 8005f98:	40010400 	.word	0x40010400

08005f9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e042      	b.n	8006034 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d106      	bne.n	8005fc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7fb fe39 	bl	8001c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2224      	movs	r2, #36	; 0x24
 8005fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0201 	bic.w	r2, r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f996 	bl	8006310 <UART_SetConfig>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d101      	bne.n	8005fee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e022      	b.n	8006034 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d002      	beq.n	8005ffc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 feea 	bl	8006dd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800600a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800601a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0201 	orr.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 ff71 	bl	8006f14 <UART_CheckIdleState>
 8006032:	4603      	mov	r3, r0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08a      	sub	sp, #40	; 0x28
 8006040:	af02      	add	r7, sp, #8
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	603b      	str	r3, [r7, #0]
 8006048:	4613      	mov	r3, r2
 800604a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006052:	2b20      	cmp	r3, #32
 8006054:	f040 8083 	bne.w	800615e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <HAL_UART_Transmit+0x28>
 800605e:	88fb      	ldrh	r3, [r7, #6]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e07b      	b.n	8006160 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800606e:	2b01      	cmp	r3, #1
 8006070:	d101      	bne.n	8006076 <HAL_UART_Transmit+0x3a>
 8006072:	2302      	movs	r3, #2
 8006074:	e074      	b.n	8006160 <HAL_UART_Transmit+0x124>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2221      	movs	r2, #33	; 0x21
 800608a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800608e:	f7fc f837 	bl	8002100 <HAL_GetTick>
 8006092:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	88fa      	ldrh	r2, [r7, #6]
 8006098:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	88fa      	ldrh	r2, [r7, #6]
 80060a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ac:	d108      	bne.n	80060c0 <HAL_UART_Transmit+0x84>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d104      	bne.n	80060c0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	61bb      	str	r3, [r7, #24]
 80060be:	e003      	b.n	80060c8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80060d0:	e02c      	b.n	800612c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2200      	movs	r2, #0
 80060da:	2180      	movs	r1, #128	; 0x80
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 ff64 	bl	8006faa <UART_WaitOnFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e039      	b.n	8006160 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10b      	bne.n	800610a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006100:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	3302      	adds	r3, #2
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	e007      	b.n	800611a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	781a      	ldrb	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	3301      	adds	r3, #1
 8006118:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006120:	b29b      	uxth	r3, r3
 8006122:	3b01      	subs	r3, #1
 8006124:	b29a      	uxth	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006132:	b29b      	uxth	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1cc      	bne.n	80060d2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2200      	movs	r2, #0
 8006140:	2140      	movs	r1, #64	; 0x40
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 ff31 	bl	8006faa <UART_WaitOnFlagUntilTimeout>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e006      	b.n	8006160 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2220      	movs	r2, #32
 8006156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	e000      	b.n	8006160 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800615e:	2302      	movs	r3, #2
  }
}
 8006160:	4618      	mov	r0, r3
 8006162:	3720      	adds	r7, #32
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08a      	sub	sp, #40	; 0x28
 800616c:	af02      	add	r7, sp, #8
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	603b      	str	r3, [r7, #0]
 8006174:	4613      	mov	r3, r2
 8006176:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617e:	2b20      	cmp	r3, #32
 8006180:	f040 80c0 	bne.w	8006304 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <HAL_UART_Receive+0x28>
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e0b8      	b.n	8006306 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800619a:	2b01      	cmp	r3, #1
 800619c:	d101      	bne.n	80061a2 <HAL_UART_Receive+0x3a>
 800619e:	2302      	movs	r3, #2
 80061a0:	e0b1      	b.n	8006306 <HAL_UART_Receive+0x19e>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2222      	movs	r2, #34	; 0x22
 80061b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061c0:	f7fb ff9e 	bl	8002100 <HAL_GetTick>
 80061c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	88fa      	ldrh	r2, [r7, #6]
 80061ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	88fa      	ldrh	r2, [r7, #6]
 80061d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061de:	d10e      	bne.n	80061fe <HAL_UART_Receive+0x96>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d105      	bne.n	80061f4 <HAL_UART_Receive+0x8c>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80061ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061f2:	e02d      	b.n	8006250 <HAL_UART_Receive+0xe8>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	22ff      	movs	r2, #255	; 0xff
 80061f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061fc:	e028      	b.n	8006250 <HAL_UART_Receive+0xe8>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10d      	bne.n	8006222 <HAL_UART_Receive+0xba>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d104      	bne.n	8006218 <HAL_UART_Receive+0xb0>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	22ff      	movs	r2, #255	; 0xff
 8006212:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006216:	e01b      	b.n	8006250 <HAL_UART_Receive+0xe8>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	227f      	movs	r2, #127	; 0x7f
 800621c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006220:	e016      	b.n	8006250 <HAL_UART_Receive+0xe8>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800622a:	d10d      	bne.n	8006248 <HAL_UART_Receive+0xe0>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <HAL_UART_Receive+0xd6>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	227f      	movs	r2, #127	; 0x7f
 8006238:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800623c:	e008      	b.n	8006250 <HAL_UART_Receive+0xe8>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	223f      	movs	r2, #63	; 0x3f
 8006242:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006246:	e003      	b.n	8006250 <HAL_UART_Receive+0xe8>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006256:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006260:	d108      	bne.n	8006274 <HAL_UART_Receive+0x10c>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800626a:	2300      	movs	r3, #0
 800626c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	61bb      	str	r3, [r7, #24]
 8006272:	e003      	b.n	800627c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006278:	2300      	movs	r3, #0
 800627a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006284:	e032      	b.n	80062ec <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2200      	movs	r2, #0
 800628e:	2120      	movs	r1, #32
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 fe8a 	bl	8006faa <UART_WaitOnFlagUntilTimeout>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e032      	b.n	8006306 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10c      	bne.n	80062c0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	8a7b      	ldrh	r3, [r7, #18]
 80062b0:	4013      	ands	r3, r2
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	3302      	adds	r3, #2
 80062bc:	61bb      	str	r3, [r7, #24]
 80062be:	e00c      	b.n	80062da <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	8a7b      	ldrh	r3, [r7, #18]
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	4013      	ands	r3, r2
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	3301      	adds	r3, #1
 80062d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1c6      	bne.n	8006286 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2220      	movs	r2, #32
 80062fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	e000      	b.n	8006306 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8006304:	2302      	movs	r3, #2
  }
}
 8006306:	4618      	mov	r0, r3
 8006308:	3720      	adds	r7, #32
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
	...

08006310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006310:	b5b0      	push	{r4, r5, r7, lr}
 8006312:	b08e      	sub	sp, #56	; 0x38
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	4313      	orrs	r3, r2
 8006334:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	4bbf      	ldr	r3, [pc, #764]	; (800663c <UART_SetConfig+0x32c>)
 800633e:	4013      	ands	r3, r2
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6812      	ldr	r2, [r2, #0]
 8006344:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006346:	430b      	orrs	r3, r1
 8006348:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4ab5      	ldr	r2, [pc, #724]	; (8006640 <UART_SetConfig+0x330>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d004      	beq.n	800637a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006376:	4313      	orrs	r3, r2
 8006378:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	4bb0      	ldr	r3, [pc, #704]	; (8006644 <UART_SetConfig+0x334>)
 8006382:	4013      	ands	r3, r2
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6812      	ldr	r2, [r2, #0]
 8006388:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800638a:	430b      	orrs	r3, r1
 800638c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	f023 010f 	bic.w	r1, r3, #15
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4aa7      	ldr	r2, [pc, #668]	; (8006648 <UART_SetConfig+0x338>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d176      	bne.n	800649c <UART_SetConfig+0x18c>
 80063ae:	4ba7      	ldr	r3, [pc, #668]	; (800664c <UART_SetConfig+0x33c>)
 80063b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063b6:	2b28      	cmp	r3, #40	; 0x28
 80063b8:	d86c      	bhi.n	8006494 <UART_SetConfig+0x184>
 80063ba:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <UART_SetConfig+0xb0>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	08006465 	.word	0x08006465
 80063c4:	08006495 	.word	0x08006495
 80063c8:	08006495 	.word	0x08006495
 80063cc:	08006495 	.word	0x08006495
 80063d0:	08006495 	.word	0x08006495
 80063d4:	08006495 	.word	0x08006495
 80063d8:	08006495 	.word	0x08006495
 80063dc:	08006495 	.word	0x08006495
 80063e0:	0800646d 	.word	0x0800646d
 80063e4:	08006495 	.word	0x08006495
 80063e8:	08006495 	.word	0x08006495
 80063ec:	08006495 	.word	0x08006495
 80063f0:	08006495 	.word	0x08006495
 80063f4:	08006495 	.word	0x08006495
 80063f8:	08006495 	.word	0x08006495
 80063fc:	08006495 	.word	0x08006495
 8006400:	08006475 	.word	0x08006475
 8006404:	08006495 	.word	0x08006495
 8006408:	08006495 	.word	0x08006495
 800640c:	08006495 	.word	0x08006495
 8006410:	08006495 	.word	0x08006495
 8006414:	08006495 	.word	0x08006495
 8006418:	08006495 	.word	0x08006495
 800641c:	08006495 	.word	0x08006495
 8006420:	0800647d 	.word	0x0800647d
 8006424:	08006495 	.word	0x08006495
 8006428:	08006495 	.word	0x08006495
 800642c:	08006495 	.word	0x08006495
 8006430:	08006495 	.word	0x08006495
 8006434:	08006495 	.word	0x08006495
 8006438:	08006495 	.word	0x08006495
 800643c:	08006495 	.word	0x08006495
 8006440:	08006485 	.word	0x08006485
 8006444:	08006495 	.word	0x08006495
 8006448:	08006495 	.word	0x08006495
 800644c:	08006495 	.word	0x08006495
 8006450:	08006495 	.word	0x08006495
 8006454:	08006495 	.word	0x08006495
 8006458:	08006495 	.word	0x08006495
 800645c:	08006495 	.word	0x08006495
 8006460:	0800648d 	.word	0x0800648d
 8006464:	2301      	movs	r3, #1
 8006466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800646a:	e222      	b.n	80068b2 <UART_SetConfig+0x5a2>
 800646c:	2304      	movs	r3, #4
 800646e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006472:	e21e      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006474:	2308      	movs	r3, #8
 8006476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800647a:	e21a      	b.n	80068b2 <UART_SetConfig+0x5a2>
 800647c:	2310      	movs	r3, #16
 800647e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006482:	e216      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006484:	2320      	movs	r3, #32
 8006486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800648a:	e212      	b.n	80068b2 <UART_SetConfig+0x5a2>
 800648c:	2340      	movs	r3, #64	; 0x40
 800648e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006492:	e20e      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006494:	2380      	movs	r3, #128	; 0x80
 8006496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800649a:	e20a      	b.n	80068b2 <UART_SetConfig+0x5a2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a6b      	ldr	r2, [pc, #428]	; (8006650 <UART_SetConfig+0x340>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d130      	bne.n	8006508 <UART_SetConfig+0x1f8>
 80064a6:	4b69      	ldr	r3, [pc, #420]	; (800664c <UART_SetConfig+0x33c>)
 80064a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	2b05      	cmp	r3, #5
 80064b0:	d826      	bhi.n	8006500 <UART_SetConfig+0x1f0>
 80064b2:	a201      	add	r2, pc, #4	; (adr r2, 80064b8 <UART_SetConfig+0x1a8>)
 80064b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b8:	080064d1 	.word	0x080064d1
 80064bc:	080064d9 	.word	0x080064d9
 80064c0:	080064e1 	.word	0x080064e1
 80064c4:	080064e9 	.word	0x080064e9
 80064c8:	080064f1 	.word	0x080064f1
 80064cc:	080064f9 	.word	0x080064f9
 80064d0:	2300      	movs	r3, #0
 80064d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064d6:	e1ec      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80064d8:	2304      	movs	r3, #4
 80064da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064de:	e1e8      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80064e0:	2308      	movs	r3, #8
 80064e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064e6:	e1e4      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80064e8:	2310      	movs	r3, #16
 80064ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ee:	e1e0      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80064f0:	2320      	movs	r3, #32
 80064f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064f6:	e1dc      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80064f8:	2340      	movs	r3, #64	; 0x40
 80064fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064fe:	e1d8      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006500:	2380      	movs	r3, #128	; 0x80
 8006502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006506:	e1d4      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a51      	ldr	r2, [pc, #324]	; (8006654 <UART_SetConfig+0x344>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d130      	bne.n	8006574 <UART_SetConfig+0x264>
 8006512:	4b4e      	ldr	r3, [pc, #312]	; (800664c <UART_SetConfig+0x33c>)
 8006514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	2b05      	cmp	r3, #5
 800651c:	d826      	bhi.n	800656c <UART_SetConfig+0x25c>
 800651e:	a201      	add	r2, pc, #4	; (adr r2, 8006524 <UART_SetConfig+0x214>)
 8006520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006524:	0800653d 	.word	0x0800653d
 8006528:	08006545 	.word	0x08006545
 800652c:	0800654d 	.word	0x0800654d
 8006530:	08006555 	.word	0x08006555
 8006534:	0800655d 	.word	0x0800655d
 8006538:	08006565 	.word	0x08006565
 800653c:	2300      	movs	r3, #0
 800653e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006542:	e1b6      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006544:	2304      	movs	r3, #4
 8006546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800654a:	e1b2      	b.n	80068b2 <UART_SetConfig+0x5a2>
 800654c:	2308      	movs	r3, #8
 800654e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006552:	e1ae      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006554:	2310      	movs	r3, #16
 8006556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800655a:	e1aa      	b.n	80068b2 <UART_SetConfig+0x5a2>
 800655c:	2320      	movs	r3, #32
 800655e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006562:	e1a6      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006564:	2340      	movs	r3, #64	; 0x40
 8006566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800656a:	e1a2      	b.n	80068b2 <UART_SetConfig+0x5a2>
 800656c:	2380      	movs	r3, #128	; 0x80
 800656e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006572:	e19e      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a37      	ldr	r2, [pc, #220]	; (8006658 <UART_SetConfig+0x348>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d130      	bne.n	80065e0 <UART_SetConfig+0x2d0>
 800657e:	4b33      	ldr	r3, [pc, #204]	; (800664c <UART_SetConfig+0x33c>)
 8006580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	2b05      	cmp	r3, #5
 8006588:	d826      	bhi.n	80065d8 <UART_SetConfig+0x2c8>
 800658a:	a201      	add	r2, pc, #4	; (adr r2, 8006590 <UART_SetConfig+0x280>)
 800658c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006590:	080065a9 	.word	0x080065a9
 8006594:	080065b1 	.word	0x080065b1
 8006598:	080065b9 	.word	0x080065b9
 800659c:	080065c1 	.word	0x080065c1
 80065a0:	080065c9 	.word	0x080065c9
 80065a4:	080065d1 	.word	0x080065d1
 80065a8:	2300      	movs	r3, #0
 80065aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ae:	e180      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80065b0:	2304      	movs	r3, #4
 80065b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065b6:	e17c      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80065b8:	2308      	movs	r3, #8
 80065ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065be:	e178      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80065c0:	2310      	movs	r3, #16
 80065c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065c6:	e174      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80065c8:	2320      	movs	r3, #32
 80065ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ce:	e170      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80065d0:	2340      	movs	r3, #64	; 0x40
 80065d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065d6:	e16c      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80065d8:	2380      	movs	r3, #128	; 0x80
 80065da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065de:	e168      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1d      	ldr	r2, [pc, #116]	; (800665c <UART_SetConfig+0x34c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d142      	bne.n	8006670 <UART_SetConfig+0x360>
 80065ea:	4b18      	ldr	r3, [pc, #96]	; (800664c <UART_SetConfig+0x33c>)
 80065ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ee:	f003 0307 	and.w	r3, r3, #7
 80065f2:	2b05      	cmp	r3, #5
 80065f4:	d838      	bhi.n	8006668 <UART_SetConfig+0x358>
 80065f6:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <UART_SetConfig+0x2ec>)
 80065f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fc:	08006615 	.word	0x08006615
 8006600:	0800661d 	.word	0x0800661d
 8006604:	08006625 	.word	0x08006625
 8006608:	0800662d 	.word	0x0800662d
 800660c:	08006635 	.word	0x08006635
 8006610:	08006661 	.word	0x08006661
 8006614:	2300      	movs	r3, #0
 8006616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800661a:	e14a      	b.n	80068b2 <UART_SetConfig+0x5a2>
 800661c:	2304      	movs	r3, #4
 800661e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006622:	e146      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006624:	2308      	movs	r3, #8
 8006626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800662a:	e142      	b.n	80068b2 <UART_SetConfig+0x5a2>
 800662c:	2310      	movs	r3, #16
 800662e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006632:	e13e      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006634:	2320      	movs	r3, #32
 8006636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800663a:	e13a      	b.n	80068b2 <UART_SetConfig+0x5a2>
 800663c:	cfff69f3 	.word	0xcfff69f3
 8006640:	58000c00 	.word	0x58000c00
 8006644:	11fff4ff 	.word	0x11fff4ff
 8006648:	40011000 	.word	0x40011000
 800664c:	58024400 	.word	0x58024400
 8006650:	40004400 	.word	0x40004400
 8006654:	40004800 	.word	0x40004800
 8006658:	40004c00 	.word	0x40004c00
 800665c:	40005000 	.word	0x40005000
 8006660:	2340      	movs	r3, #64	; 0x40
 8006662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006666:	e124      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006668:	2380      	movs	r3, #128	; 0x80
 800666a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800666e:	e120      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4acc      	ldr	r2, [pc, #816]	; (80069a8 <UART_SetConfig+0x698>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d176      	bne.n	8006768 <UART_SetConfig+0x458>
 800667a:	4bcc      	ldr	r3, [pc, #816]	; (80069ac <UART_SetConfig+0x69c>)
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006682:	2b28      	cmp	r3, #40	; 0x28
 8006684:	d86c      	bhi.n	8006760 <UART_SetConfig+0x450>
 8006686:	a201      	add	r2, pc, #4	; (adr r2, 800668c <UART_SetConfig+0x37c>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	08006731 	.word	0x08006731
 8006690:	08006761 	.word	0x08006761
 8006694:	08006761 	.word	0x08006761
 8006698:	08006761 	.word	0x08006761
 800669c:	08006761 	.word	0x08006761
 80066a0:	08006761 	.word	0x08006761
 80066a4:	08006761 	.word	0x08006761
 80066a8:	08006761 	.word	0x08006761
 80066ac:	08006739 	.word	0x08006739
 80066b0:	08006761 	.word	0x08006761
 80066b4:	08006761 	.word	0x08006761
 80066b8:	08006761 	.word	0x08006761
 80066bc:	08006761 	.word	0x08006761
 80066c0:	08006761 	.word	0x08006761
 80066c4:	08006761 	.word	0x08006761
 80066c8:	08006761 	.word	0x08006761
 80066cc:	08006741 	.word	0x08006741
 80066d0:	08006761 	.word	0x08006761
 80066d4:	08006761 	.word	0x08006761
 80066d8:	08006761 	.word	0x08006761
 80066dc:	08006761 	.word	0x08006761
 80066e0:	08006761 	.word	0x08006761
 80066e4:	08006761 	.word	0x08006761
 80066e8:	08006761 	.word	0x08006761
 80066ec:	08006749 	.word	0x08006749
 80066f0:	08006761 	.word	0x08006761
 80066f4:	08006761 	.word	0x08006761
 80066f8:	08006761 	.word	0x08006761
 80066fc:	08006761 	.word	0x08006761
 8006700:	08006761 	.word	0x08006761
 8006704:	08006761 	.word	0x08006761
 8006708:	08006761 	.word	0x08006761
 800670c:	08006751 	.word	0x08006751
 8006710:	08006761 	.word	0x08006761
 8006714:	08006761 	.word	0x08006761
 8006718:	08006761 	.word	0x08006761
 800671c:	08006761 	.word	0x08006761
 8006720:	08006761 	.word	0x08006761
 8006724:	08006761 	.word	0x08006761
 8006728:	08006761 	.word	0x08006761
 800672c:	08006759 	.word	0x08006759
 8006730:	2301      	movs	r3, #1
 8006732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006736:	e0bc      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006738:	2304      	movs	r3, #4
 800673a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800673e:	e0b8      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006740:	2308      	movs	r3, #8
 8006742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006746:	e0b4      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006748:	2310      	movs	r3, #16
 800674a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800674e:	e0b0      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006750:	2320      	movs	r3, #32
 8006752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006756:	e0ac      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006758:	2340      	movs	r3, #64	; 0x40
 800675a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800675e:	e0a8      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006760:	2380      	movs	r3, #128	; 0x80
 8006762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006766:	e0a4      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a90      	ldr	r2, [pc, #576]	; (80069b0 <UART_SetConfig+0x6a0>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d130      	bne.n	80067d4 <UART_SetConfig+0x4c4>
 8006772:	4b8e      	ldr	r3, [pc, #568]	; (80069ac <UART_SetConfig+0x69c>)
 8006774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	2b05      	cmp	r3, #5
 800677c:	d826      	bhi.n	80067cc <UART_SetConfig+0x4bc>
 800677e:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <UART_SetConfig+0x474>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	0800679d 	.word	0x0800679d
 8006788:	080067a5 	.word	0x080067a5
 800678c:	080067ad 	.word	0x080067ad
 8006790:	080067b5 	.word	0x080067b5
 8006794:	080067bd 	.word	0x080067bd
 8006798:	080067c5 	.word	0x080067c5
 800679c:	2300      	movs	r3, #0
 800679e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067a2:	e086      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80067a4:	2304      	movs	r3, #4
 80067a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067aa:	e082      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80067ac:	2308      	movs	r3, #8
 80067ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067b2:	e07e      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80067b4:	2310      	movs	r3, #16
 80067b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ba:	e07a      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80067bc:	2320      	movs	r3, #32
 80067be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067c2:	e076      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80067c4:	2340      	movs	r3, #64	; 0x40
 80067c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ca:	e072      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80067cc:	2380      	movs	r3, #128	; 0x80
 80067ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067d2:	e06e      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a76      	ldr	r2, [pc, #472]	; (80069b4 <UART_SetConfig+0x6a4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d130      	bne.n	8006840 <UART_SetConfig+0x530>
 80067de:	4b73      	ldr	r3, [pc, #460]	; (80069ac <UART_SetConfig+0x69c>)
 80067e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	2b05      	cmp	r3, #5
 80067e8:	d826      	bhi.n	8006838 <UART_SetConfig+0x528>
 80067ea:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <UART_SetConfig+0x4e0>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	08006809 	.word	0x08006809
 80067f4:	08006811 	.word	0x08006811
 80067f8:	08006819 	.word	0x08006819
 80067fc:	08006821 	.word	0x08006821
 8006800:	08006829 	.word	0x08006829
 8006804:	08006831 	.word	0x08006831
 8006808:	2300      	movs	r3, #0
 800680a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800680e:	e050      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006810:	2304      	movs	r3, #4
 8006812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006816:	e04c      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006818:	2308      	movs	r3, #8
 800681a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800681e:	e048      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006820:	2310      	movs	r3, #16
 8006822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006826:	e044      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006828:	2320      	movs	r3, #32
 800682a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800682e:	e040      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006830:	2340      	movs	r3, #64	; 0x40
 8006832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006836:	e03c      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006838:	2380      	movs	r3, #128	; 0x80
 800683a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800683e:	e038      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a5c      	ldr	r2, [pc, #368]	; (80069b8 <UART_SetConfig+0x6a8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d130      	bne.n	80068ac <UART_SetConfig+0x59c>
 800684a:	4b58      	ldr	r3, [pc, #352]	; (80069ac <UART_SetConfig+0x69c>)
 800684c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	2b05      	cmp	r3, #5
 8006854:	d826      	bhi.n	80068a4 <UART_SetConfig+0x594>
 8006856:	a201      	add	r2, pc, #4	; (adr r2, 800685c <UART_SetConfig+0x54c>)
 8006858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685c:	08006875 	.word	0x08006875
 8006860:	0800687d 	.word	0x0800687d
 8006864:	08006885 	.word	0x08006885
 8006868:	0800688d 	.word	0x0800688d
 800686c:	08006895 	.word	0x08006895
 8006870:	0800689d 	.word	0x0800689d
 8006874:	2302      	movs	r3, #2
 8006876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800687a:	e01a      	b.n	80068b2 <UART_SetConfig+0x5a2>
 800687c:	2304      	movs	r3, #4
 800687e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006882:	e016      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006884:	2308      	movs	r3, #8
 8006886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800688a:	e012      	b.n	80068b2 <UART_SetConfig+0x5a2>
 800688c:	2310      	movs	r3, #16
 800688e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006892:	e00e      	b.n	80068b2 <UART_SetConfig+0x5a2>
 8006894:	2320      	movs	r3, #32
 8006896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800689a:	e00a      	b.n	80068b2 <UART_SetConfig+0x5a2>
 800689c:	2340      	movs	r3, #64	; 0x40
 800689e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068a2:	e006      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80068a4:	2380      	movs	r3, #128	; 0x80
 80068a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068aa:	e002      	b.n	80068b2 <UART_SetConfig+0x5a2>
 80068ac:	2380      	movs	r3, #128	; 0x80
 80068ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a40      	ldr	r2, [pc, #256]	; (80069b8 <UART_SetConfig+0x6a8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	f040 80ef 	bne.w	8006a9c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	dc46      	bgt.n	8006954 <UART_SetConfig+0x644>
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	f2c0 8081 	blt.w	80069ce <UART_SetConfig+0x6be>
 80068cc:	3b02      	subs	r3, #2
 80068ce:	2b1e      	cmp	r3, #30
 80068d0:	d87d      	bhi.n	80069ce <UART_SetConfig+0x6be>
 80068d2:	a201      	add	r2, pc, #4	; (adr r2, 80068d8 <UART_SetConfig+0x5c8>)
 80068d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d8:	0800695b 	.word	0x0800695b
 80068dc:	080069cf 	.word	0x080069cf
 80068e0:	08006963 	.word	0x08006963
 80068e4:	080069cf 	.word	0x080069cf
 80068e8:	080069cf 	.word	0x080069cf
 80068ec:	080069cf 	.word	0x080069cf
 80068f0:	08006973 	.word	0x08006973
 80068f4:	080069cf 	.word	0x080069cf
 80068f8:	080069cf 	.word	0x080069cf
 80068fc:	080069cf 	.word	0x080069cf
 8006900:	080069cf 	.word	0x080069cf
 8006904:	080069cf 	.word	0x080069cf
 8006908:	080069cf 	.word	0x080069cf
 800690c:	080069cf 	.word	0x080069cf
 8006910:	08006983 	.word	0x08006983
 8006914:	080069cf 	.word	0x080069cf
 8006918:	080069cf 	.word	0x080069cf
 800691c:	080069cf 	.word	0x080069cf
 8006920:	080069cf 	.word	0x080069cf
 8006924:	080069cf 	.word	0x080069cf
 8006928:	080069cf 	.word	0x080069cf
 800692c:	080069cf 	.word	0x080069cf
 8006930:	080069cf 	.word	0x080069cf
 8006934:	080069cf 	.word	0x080069cf
 8006938:	080069cf 	.word	0x080069cf
 800693c:	080069cf 	.word	0x080069cf
 8006940:	080069cf 	.word	0x080069cf
 8006944:	080069cf 	.word	0x080069cf
 8006948:	080069cf 	.word	0x080069cf
 800694c:	080069cf 	.word	0x080069cf
 8006950:	080069c1 	.word	0x080069c1
 8006954:	2b40      	cmp	r3, #64	; 0x40
 8006956:	d036      	beq.n	80069c6 <UART_SetConfig+0x6b6>
 8006958:	e039      	b.n	80069ce <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800695a:	f7fd fdeb 	bl	8004534 <HAL_RCCEx_GetD3PCLK1Freq>
 800695e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006960:	e03b      	b.n	80069da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006962:	f107 0314 	add.w	r3, r7, #20
 8006966:	4618      	mov	r0, r3
 8006968:	f7fd fdfa 	bl	8004560 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006970:	e033      	b.n	80069da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006972:	f107 0308 	add.w	r3, r7, #8
 8006976:	4618      	mov	r0, r3
 8006978:	f7fd ff46 	bl	8004808 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006980:	e02b      	b.n	80069da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006982:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <UART_SetConfig+0x69c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0320 	and.w	r3, r3, #32
 800698a:	2b00      	cmp	r3, #0
 800698c:	d009      	beq.n	80069a2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800698e:	4b07      	ldr	r3, [pc, #28]	; (80069ac <UART_SetConfig+0x69c>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	08db      	lsrs	r3, r3, #3
 8006994:	f003 0303 	and.w	r3, r3, #3
 8006998:	4a08      	ldr	r2, [pc, #32]	; (80069bc <UART_SetConfig+0x6ac>)
 800699a:	fa22 f303 	lsr.w	r3, r2, r3
 800699e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069a0:	e01b      	b.n	80069da <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80069a2:	4b06      	ldr	r3, [pc, #24]	; (80069bc <UART_SetConfig+0x6ac>)
 80069a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069a6:	e018      	b.n	80069da <UART_SetConfig+0x6ca>
 80069a8:	40011400 	.word	0x40011400
 80069ac:	58024400 	.word	0x58024400
 80069b0:	40007800 	.word	0x40007800
 80069b4:	40007c00 	.word	0x40007c00
 80069b8:	58000c00 	.word	0x58000c00
 80069bc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069c0:	4bc4      	ldr	r3, [pc, #784]	; (8006cd4 <UART_SetConfig+0x9c4>)
 80069c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069c4:	e009      	b.n	80069da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069cc:	e005      	b.n	80069da <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80069d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 81da 	beq.w	8006d96 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	4abc      	ldr	r2, [pc, #752]	; (8006cd8 <UART_SetConfig+0x9c8>)
 80069e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069ec:	461a      	mov	r2, r3
 80069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80069f4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	4613      	mov	r3, r2
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	4413      	add	r3, r2
 8006a00:	6a3a      	ldr	r2, [r7, #32]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d305      	bcc.n	8006a12 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a0c:	6a3a      	ldr	r2, [r7, #32]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d903      	bls.n	8006a1a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006a18:	e1bd      	b.n	8006d96 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f04f 0100 	mov.w	r1, #0
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	4aac      	ldr	r2, [pc, #688]	; (8006cd8 <UART_SetConfig+0x9c8>)
 8006a28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	f04f 0300 	mov.w	r3, #0
 8006a32:	f7f9 fc51 	bl	80002d8 <__aeabi_uldivmod>
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	f04f 0200 	mov.w	r2, #0
 8006a42:	f04f 0300 	mov.w	r3, #0
 8006a46:	020b      	lsls	r3, r1, #8
 8006a48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a4c:	0202      	lsls	r2, r0, #8
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	6849      	ldr	r1, [r1, #4]
 8006a52:	0849      	lsrs	r1, r1, #1
 8006a54:	4608      	mov	r0, r1
 8006a56:	f04f 0100 	mov.w	r1, #0
 8006a5a:	1814      	adds	r4, r2, r0
 8006a5c:	eb43 0501 	adc.w	r5, r3, r1
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	461a      	mov	r2, r3
 8006a66:	f04f 0300 	mov.w	r3, #0
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	f7f9 fc33 	bl	80002d8 <__aeabi_uldivmod>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	4613      	mov	r3, r2
 8006a78:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a80:	d308      	bcc.n	8006a94 <UART_SetConfig+0x784>
 8006a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a88:	d204      	bcs.n	8006a94 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a90:	60da      	str	r2, [r3, #12]
 8006a92:	e180      	b.n	8006d96 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006a9a:	e17c      	b.n	8006d96 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aa4:	f040 80be 	bne.w	8006c24 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8006aa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	dc49      	bgt.n	8006b44 <UART_SetConfig+0x834>
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	db7c      	blt.n	8006bae <UART_SetConfig+0x89e>
 8006ab4:	2b20      	cmp	r3, #32
 8006ab6:	d87a      	bhi.n	8006bae <UART_SetConfig+0x89e>
 8006ab8:	a201      	add	r2, pc, #4	; (adr r2, 8006ac0 <UART_SetConfig+0x7b0>)
 8006aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abe:	bf00      	nop
 8006ac0:	08006b4b 	.word	0x08006b4b
 8006ac4:	08006b53 	.word	0x08006b53
 8006ac8:	08006baf 	.word	0x08006baf
 8006acc:	08006baf 	.word	0x08006baf
 8006ad0:	08006b5b 	.word	0x08006b5b
 8006ad4:	08006baf 	.word	0x08006baf
 8006ad8:	08006baf 	.word	0x08006baf
 8006adc:	08006baf 	.word	0x08006baf
 8006ae0:	08006b6b 	.word	0x08006b6b
 8006ae4:	08006baf 	.word	0x08006baf
 8006ae8:	08006baf 	.word	0x08006baf
 8006aec:	08006baf 	.word	0x08006baf
 8006af0:	08006baf 	.word	0x08006baf
 8006af4:	08006baf 	.word	0x08006baf
 8006af8:	08006baf 	.word	0x08006baf
 8006afc:	08006baf 	.word	0x08006baf
 8006b00:	08006b7b 	.word	0x08006b7b
 8006b04:	08006baf 	.word	0x08006baf
 8006b08:	08006baf 	.word	0x08006baf
 8006b0c:	08006baf 	.word	0x08006baf
 8006b10:	08006baf 	.word	0x08006baf
 8006b14:	08006baf 	.word	0x08006baf
 8006b18:	08006baf 	.word	0x08006baf
 8006b1c:	08006baf 	.word	0x08006baf
 8006b20:	08006baf 	.word	0x08006baf
 8006b24:	08006baf 	.word	0x08006baf
 8006b28:	08006baf 	.word	0x08006baf
 8006b2c:	08006baf 	.word	0x08006baf
 8006b30:	08006baf 	.word	0x08006baf
 8006b34:	08006baf 	.word	0x08006baf
 8006b38:	08006baf 	.word	0x08006baf
 8006b3c:	08006baf 	.word	0x08006baf
 8006b40:	08006ba1 	.word	0x08006ba1
 8006b44:	2b40      	cmp	r3, #64	; 0x40
 8006b46:	d02e      	beq.n	8006ba6 <UART_SetConfig+0x896>
 8006b48:	e031      	b.n	8006bae <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b4a:	f7fc fd87 	bl	800365c <HAL_RCC_GetPCLK1Freq>
 8006b4e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006b50:	e033      	b.n	8006bba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b52:	f7fc fd99 	bl	8003688 <HAL_RCC_GetPCLK2Freq>
 8006b56:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006b58:	e02f      	b.n	8006bba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b5a:	f107 0314 	add.w	r3, r7, #20
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fd fcfe 	bl	8004560 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b68:	e027      	b.n	8006bba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b6a:	f107 0308 	add.w	r3, r7, #8
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fd fe4a 	bl	8004808 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b78:	e01f      	b.n	8006bba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b7a:	4b58      	ldr	r3, [pc, #352]	; (8006cdc <UART_SetConfig+0x9cc>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0320 	and.w	r3, r3, #32
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d009      	beq.n	8006b9a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b86:	4b55      	ldr	r3, [pc, #340]	; (8006cdc <UART_SetConfig+0x9cc>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	08db      	lsrs	r3, r3, #3
 8006b8c:	f003 0303 	and.w	r3, r3, #3
 8006b90:	4a53      	ldr	r2, [pc, #332]	; (8006ce0 <UART_SetConfig+0x9d0>)
 8006b92:	fa22 f303 	lsr.w	r3, r2, r3
 8006b96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b98:	e00f      	b.n	8006bba <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006b9a:	4b51      	ldr	r3, [pc, #324]	; (8006ce0 <UART_SetConfig+0x9d0>)
 8006b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b9e:	e00c      	b.n	8006bba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ba0:	4b4c      	ldr	r3, [pc, #304]	; (8006cd4 <UART_SetConfig+0x9c4>)
 8006ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ba4:	e009      	b.n	8006bba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006baa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bac:	e005      	b.n	8006bba <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006bb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 80ea 	beq.w	8006d96 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	4a44      	ldr	r2, [pc, #272]	; (8006cd8 <UART_SetConfig+0x9c8>)
 8006bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bd4:	005a      	lsls	r2, r3, #1
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	085b      	lsrs	r3, r3, #1
 8006bdc:	441a      	add	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	2b0f      	cmp	r3, #15
 8006bec:	d916      	bls.n	8006c1c <UART_SetConfig+0x90c>
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf4:	d212      	bcs.n	8006c1c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	f023 030f 	bic.w	r3, r3, #15
 8006bfe:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	085b      	lsrs	r3, r3, #1
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	f003 0307 	and.w	r3, r3, #7
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006c18:	60da      	str	r2, [r3, #12]
 8006c1a:	e0bc      	b.n	8006d96 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006c22:	e0b8      	b.n	8006d96 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	dc4b      	bgt.n	8006cc4 <UART_SetConfig+0x9b4>
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f2c0 8087 	blt.w	8006d40 <UART_SetConfig+0xa30>
 8006c32:	2b20      	cmp	r3, #32
 8006c34:	f200 8084 	bhi.w	8006d40 <UART_SetConfig+0xa30>
 8006c38:	a201      	add	r2, pc, #4	; (adr r2, 8006c40 <UART_SetConfig+0x930>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006ccb 	.word	0x08006ccb
 8006c44:	08006ce5 	.word	0x08006ce5
 8006c48:	08006d41 	.word	0x08006d41
 8006c4c:	08006d41 	.word	0x08006d41
 8006c50:	08006ced 	.word	0x08006ced
 8006c54:	08006d41 	.word	0x08006d41
 8006c58:	08006d41 	.word	0x08006d41
 8006c5c:	08006d41 	.word	0x08006d41
 8006c60:	08006cfd 	.word	0x08006cfd
 8006c64:	08006d41 	.word	0x08006d41
 8006c68:	08006d41 	.word	0x08006d41
 8006c6c:	08006d41 	.word	0x08006d41
 8006c70:	08006d41 	.word	0x08006d41
 8006c74:	08006d41 	.word	0x08006d41
 8006c78:	08006d41 	.word	0x08006d41
 8006c7c:	08006d41 	.word	0x08006d41
 8006c80:	08006d0d 	.word	0x08006d0d
 8006c84:	08006d41 	.word	0x08006d41
 8006c88:	08006d41 	.word	0x08006d41
 8006c8c:	08006d41 	.word	0x08006d41
 8006c90:	08006d41 	.word	0x08006d41
 8006c94:	08006d41 	.word	0x08006d41
 8006c98:	08006d41 	.word	0x08006d41
 8006c9c:	08006d41 	.word	0x08006d41
 8006ca0:	08006d41 	.word	0x08006d41
 8006ca4:	08006d41 	.word	0x08006d41
 8006ca8:	08006d41 	.word	0x08006d41
 8006cac:	08006d41 	.word	0x08006d41
 8006cb0:	08006d41 	.word	0x08006d41
 8006cb4:	08006d41 	.word	0x08006d41
 8006cb8:	08006d41 	.word	0x08006d41
 8006cbc:	08006d41 	.word	0x08006d41
 8006cc0:	08006d33 	.word	0x08006d33
 8006cc4:	2b40      	cmp	r3, #64	; 0x40
 8006cc6:	d037      	beq.n	8006d38 <UART_SetConfig+0xa28>
 8006cc8:	e03a      	b.n	8006d40 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cca:	f7fc fcc7 	bl	800365c <HAL_RCC_GetPCLK1Freq>
 8006cce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006cd0:	e03c      	b.n	8006d4c <UART_SetConfig+0xa3c>
 8006cd2:	bf00      	nop
 8006cd4:	003d0900 	.word	0x003d0900
 8006cd8:	080073c0 	.word	0x080073c0
 8006cdc:	58024400 	.word	0x58024400
 8006ce0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ce4:	f7fc fcd0 	bl	8003688 <HAL_RCC_GetPCLK2Freq>
 8006ce8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006cea:	e02f      	b.n	8006d4c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cec:	f107 0314 	add.w	r3, r7, #20
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fd fc35 	bl	8004560 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cfa:	e027      	b.n	8006d4c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cfc:	f107 0308 	add.w	r3, r7, #8
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fd fd81 	bl	8004808 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d0a:	e01f      	b.n	8006d4c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d0c:	4b2c      	ldr	r3, [pc, #176]	; (8006dc0 <UART_SetConfig+0xab0>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0320 	and.w	r3, r3, #32
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d009      	beq.n	8006d2c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d18:	4b29      	ldr	r3, [pc, #164]	; (8006dc0 <UART_SetConfig+0xab0>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	08db      	lsrs	r3, r3, #3
 8006d1e:	f003 0303 	and.w	r3, r3, #3
 8006d22:	4a28      	ldr	r2, [pc, #160]	; (8006dc4 <UART_SetConfig+0xab4>)
 8006d24:	fa22 f303 	lsr.w	r3, r2, r3
 8006d28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d2a:	e00f      	b.n	8006d4c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006d2c:	4b25      	ldr	r3, [pc, #148]	; (8006dc4 <UART_SetConfig+0xab4>)
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d30:	e00c      	b.n	8006d4c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d32:	4b25      	ldr	r3, [pc, #148]	; (8006dc8 <UART_SetConfig+0xab8>)
 8006d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d36:	e009      	b.n	8006d4c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d3e:	e005      	b.n	8006d4c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006d4a:	bf00      	nop
    }

    if (pclk != 0U)
 8006d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d021      	beq.n	8006d96 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	4a1d      	ldr	r2, [pc, #116]	; (8006dcc <UART_SetConfig+0xabc>)
 8006d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d60:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	085b      	lsrs	r3, r3, #1
 8006d6a:	441a      	add	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d74:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d78:	2b0f      	cmp	r3, #15
 8006d7a:	d909      	bls.n	8006d90 <UART_SetConfig+0xa80>
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d82:	d205      	bcs.n	8006d90 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	60da      	str	r2, [r3, #12]
 8006d8e:	e002      	b.n	8006d96 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006db2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3738      	adds	r7, #56	; 0x38
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	58024400 	.word	0x58024400
 8006dc4:	03d09000 	.word	0x03d09000
 8006dc8:	003d0900 	.word	0x003d0900
 8006dcc:	080073c0 	.word	0x080073c0

08006dd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00a      	beq.n	8006dfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00a      	beq.n	8006e3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e42:	f003 0308 	and.w	r3, r3, #8
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00a      	beq.n	8006e60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e64:	f003 0310 	and.w	r3, r3, #16
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00a      	beq.n	8006e82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e86:	f003 0320 	and.w	r3, r3, #32
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d01a      	beq.n	8006ee6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ece:	d10a      	bne.n	8006ee6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00a      	beq.n	8006f08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	605a      	str	r2, [r3, #4]
  }
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af02      	add	r7, sp, #8
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f24:	f7fb f8ec 	bl	8002100 <HAL_GetTick>
 8006f28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0308 	and.w	r3, r3, #8
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d10e      	bne.n	8006f56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f82f 	bl	8006faa <UART_WaitOnFlagUntilTimeout>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e025      	b.n	8006fa2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b04      	cmp	r3, #4
 8006f62:	d10e      	bne.n	8006f82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f819 	bl	8006faa <UART_WaitOnFlagUntilTimeout>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e00f      	b.n	8006fa2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2220      	movs	r2, #32
 8006f86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b09c      	sub	sp, #112	; 0x70
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	603b      	str	r3, [r7, #0]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fba:	e0a9      	b.n	8007110 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc2:	f000 80a5 	beq.w	8007110 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc6:	f7fb f89b 	bl	8002100 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d302      	bcc.n	8006fdc <UART_WaitOnFlagUntilTimeout+0x32>
 8006fd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d140      	bne.n	800705e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ff0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ffc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007000:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e6      	bne.n	8006fdc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3308      	adds	r3, #8
 8007014:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800701e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007020:	f023 0301 	bic.w	r3, r3, #1
 8007024:	663b      	str	r3, [r7, #96]	; 0x60
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3308      	adds	r3, #8
 800702c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800702e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007030:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800703c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e5      	bne.n	800700e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2220      	movs	r2, #32
 8007046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2220      	movs	r2, #32
 800704e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e069      	b.n	8007132 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0304 	and.w	r3, r3, #4
 8007068:	2b00      	cmp	r3, #0
 800706a:	d051      	beq.n	8007110 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800707a:	d149      	bne.n	8007110 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007084:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800709a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a4:	637b      	str	r3, [r7, #52]	; 0x34
 80070a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e6      	bne.n	8007086 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3308      	adds	r3, #8
 80070be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	613b      	str	r3, [r7, #16]
   return(result);
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f023 0301 	bic.w	r3, r3, #1
 80070ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3308      	adds	r3, #8
 80070d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070d8:	623a      	str	r2, [r7, #32]
 80070da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	69f9      	ldr	r1, [r7, #28]
 80070de:	6a3a      	ldr	r2, [r7, #32]
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e5      	bne.n	80070b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2220      	movs	r2, #32
 8007100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e010      	b.n	8007132 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	69da      	ldr	r2, [r3, #28]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	4013      	ands	r3, r2
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	429a      	cmp	r2, r3
 800711e:	bf0c      	ite	eq
 8007120:	2301      	moveq	r3, #1
 8007122:	2300      	movne	r3, #0
 8007124:	b2db      	uxtb	r3, r3
 8007126:	461a      	mov	r2, r3
 8007128:	79fb      	ldrb	r3, [r7, #7]
 800712a:	429a      	cmp	r2, r3
 800712c:	f43f af46 	beq.w	8006fbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3770      	adds	r7, #112	; 0x70
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800713a:	b480      	push	{r7}
 800713c:	b085      	sub	sp, #20
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_UARTEx_DisableFifoMode+0x16>
 800714c:	2302      	movs	r3, #2
 800714e:	e027      	b.n	80071a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2224      	movs	r2, #36	; 0x24
 800715c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0201 	bic.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800717e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2220      	movs	r2, #32
 8007192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e02d      	b.n	8007220 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2224      	movs	r2, #36	; 0x24
 80071d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0201 	bic.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f84f 	bl	80072a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2220      	movs	r2, #32
 8007212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800723c:	2302      	movs	r3, #2
 800723e:	e02d      	b.n	800729c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2224      	movs	r2, #36	; 0x24
 800724c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0201 	bic.w	r2, r2, #1
 8007266:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f811 	bl	80072a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2220      	movs	r2, #32
 800728e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d108      	bne.n	80072c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072c4:	e031      	b.n	800732a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072c6:	2310      	movs	r3, #16
 80072c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072ca:	2310      	movs	r3, #16
 80072cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	0e5b      	lsrs	r3, r3, #25
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	f003 0307 	and.w	r3, r3, #7
 80072dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	0f5b      	lsrs	r3, r3, #29
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	f003 0307 	and.w	r3, r3, #7
 80072ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072ee:	7bbb      	ldrb	r3, [r7, #14]
 80072f0:	7b3a      	ldrb	r2, [r7, #12]
 80072f2:	4911      	ldr	r1, [pc, #68]	; (8007338 <UARTEx_SetNbDataToProcess+0x94>)
 80072f4:	5c8a      	ldrb	r2, [r1, r2]
 80072f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072fa:	7b3a      	ldrb	r2, [r7, #12]
 80072fc:	490f      	ldr	r1, [pc, #60]	; (800733c <UARTEx_SetNbDataToProcess+0x98>)
 80072fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007300:	fb93 f3f2 	sdiv	r3, r3, r2
 8007304:	b29a      	uxth	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800730c:	7bfb      	ldrb	r3, [r7, #15]
 800730e:	7b7a      	ldrb	r2, [r7, #13]
 8007310:	4909      	ldr	r1, [pc, #36]	; (8007338 <UARTEx_SetNbDataToProcess+0x94>)
 8007312:	5c8a      	ldrb	r2, [r1, r2]
 8007314:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007318:	7b7a      	ldrb	r2, [r7, #13]
 800731a:	4908      	ldr	r1, [pc, #32]	; (800733c <UARTEx_SetNbDataToProcess+0x98>)
 800731c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800731e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007322:	b29a      	uxth	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800732a:	bf00      	nop
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	080073d8 	.word	0x080073d8
 800733c:	080073e0 	.word	0x080073e0

08007340 <__libc_init_array>:
 8007340:	b570      	push	{r4, r5, r6, lr}
 8007342:	4d0d      	ldr	r5, [pc, #52]	; (8007378 <__libc_init_array+0x38>)
 8007344:	4c0d      	ldr	r4, [pc, #52]	; (800737c <__libc_init_array+0x3c>)
 8007346:	1b64      	subs	r4, r4, r5
 8007348:	10a4      	asrs	r4, r4, #2
 800734a:	2600      	movs	r6, #0
 800734c:	42a6      	cmp	r6, r4
 800734e:	d109      	bne.n	8007364 <__libc_init_array+0x24>
 8007350:	4d0b      	ldr	r5, [pc, #44]	; (8007380 <__libc_init_array+0x40>)
 8007352:	4c0c      	ldr	r4, [pc, #48]	; (8007384 <__libc_init_array+0x44>)
 8007354:	f000 f820 	bl	8007398 <_init>
 8007358:	1b64      	subs	r4, r4, r5
 800735a:	10a4      	asrs	r4, r4, #2
 800735c:	2600      	movs	r6, #0
 800735e:	42a6      	cmp	r6, r4
 8007360:	d105      	bne.n	800736e <__libc_init_array+0x2e>
 8007362:	bd70      	pop	{r4, r5, r6, pc}
 8007364:	f855 3b04 	ldr.w	r3, [r5], #4
 8007368:	4798      	blx	r3
 800736a:	3601      	adds	r6, #1
 800736c:	e7ee      	b.n	800734c <__libc_init_array+0xc>
 800736e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007372:	4798      	blx	r3
 8007374:	3601      	adds	r6, #1
 8007376:	e7f2      	b.n	800735e <__libc_init_array+0x1e>
 8007378:	080073f0 	.word	0x080073f0
 800737c:	080073f0 	.word	0x080073f0
 8007380:	080073f0 	.word	0x080073f0
 8007384:	080073f4 	.word	0x080073f4

08007388 <memset>:
 8007388:	4402      	add	r2, r0
 800738a:	4603      	mov	r3, r0
 800738c:	4293      	cmp	r3, r2
 800738e:	d100      	bne.n	8007392 <memset+0xa>
 8007390:	4770      	bx	lr
 8007392:	f803 1b01 	strb.w	r1, [r3], #1
 8007396:	e7f9      	b.n	800738c <memset+0x4>

08007398 <_init>:
 8007398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739a:	bf00      	nop
 800739c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800739e:	bc08      	pop	{r3}
 80073a0:	469e      	mov	lr, r3
 80073a2:	4770      	bx	lr

080073a4 <_fini>:
 80073a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a6:	bf00      	nop
 80073a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073aa:	bc08      	pop	{r3}
 80073ac:	469e      	mov	lr, r3
 80073ae:	4770      	bx	lr
