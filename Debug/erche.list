
erche.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070f0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007388  08007388  00017388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073c0  080073c0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080073c0  080073c0  000173c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073c8  080073c8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073c8  080073c8  000173c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073cc  080073cc  000173cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  080073d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  24000078  08007448  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000308  08007448  00020308  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d90c  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a9e  00000000  00000000  0003d9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00040450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00041400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000365d3  00000000  00000000  000422f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014277  00000000  00000000  000788cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001618e6  00000000  00000000  0008cb42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ee428  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c8  00000000  00000000  001ee47c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007370 	.word	0x08007370

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	08007370 	.word	0x08007370

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <move>:
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,25);
		HAL_Delay(700);*/
	}
}
void move(int n)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if(n==1)//直行
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	f040 80c0 	bne.w	8000760 <move+0x190>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 80005e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e4:	48a0      	ldr	r0, [pc, #640]	; (8000868 <move+0x298>)
 80005e6:	f002 f847 	bl	8002678 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d127      	bne.n	8000640 <move+0x70>
 80005f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f4:	489c      	ldr	r0, [pc, #624]	; (8000868 <move+0x298>)
 80005f6:	f002 f83f 	bl	8002678 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d11f      	bne.n	8000640 <move+0x70>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,28);
 8000600:	4b9a      	ldr	r3, [pc, #616]	; (800086c <move+0x29c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	221c      	movs	r2, #28
 8000606:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000608:	4b98      	ldr	r3, [pc, #608]	; (800086c <move+0x29c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,28);
 8000610:	4b96      	ldr	r3, [pc, #600]	; (800086c <move+0x29c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	221c      	movs	r2, #28
 8000616:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000618:	4b94      	ldr	r3, [pc, #592]	; (800086c <move+0x29c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2200      	movs	r2, #0
 800061e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,14);
 8000620:	4b93      	ldr	r3, [pc, #588]	; (8000870 <move+0x2a0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	220e      	movs	r2, #14
 8000626:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000628:	4b91      	ldr	r3, [pc, #580]	; (8000870 <move+0x2a0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,30);
 8000630:	4b8f      	ldr	r3, [pc, #572]	; (8000870 <move+0x2a0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	221e      	movs	r2, #30
 8000636:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000638:	4b8d      	ldr	r3, [pc, #564]	; (8000870 <move+0x2a0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2200      	movs	r2, #0
 800063e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000640:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000644:	4888      	ldr	r0, [pc, #544]	; (8000868 <move+0x298>)
 8000646:	f002 f817 	bl	8002678 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d127      	bne.n	80006a0 <move+0xd0>
 8000650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000654:	4884      	ldr	r0, [pc, #528]	; (8000868 <move+0x298>)
 8000656:	f002 f80f 	bl	8002678 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d11f      	bne.n	80006a0 <move+0xd0>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,28);
 8000660:	4b82      	ldr	r3, [pc, #520]	; (800086c <move+0x29c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	221c      	movs	r2, #28
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000668:	4b80      	ldr	r3, [pc, #512]	; (800086c <move+0x29c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,28);
 8000670:	4b7e      	ldr	r3, [pc, #504]	; (800086c <move+0x29c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	221c      	movs	r2, #28
 8000676:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000678:	4b7c      	ldr	r3, [pc, #496]	; (800086c <move+0x29c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2200      	movs	r2, #0
 800067e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,30);
 8000680:	4b7b      	ldr	r3, [pc, #492]	; (8000870 <move+0x2a0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	221e      	movs	r2, #30
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000688:	4b79      	ldr	r3, [pc, #484]	; (8000870 <move+0x2a0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,14);
 8000690:	4b77      	ldr	r3, [pc, #476]	; (8000870 <move+0x2a0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	220e      	movs	r2, #14
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000698:	4b75      	ldr	r3, [pc, #468]	; (8000870 <move+0x2a0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2200      	movs	r2, #0
 800069e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 80006a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a4:	4870      	ldr	r0, [pc, #448]	; (8000868 <move+0x298>)
 80006a6:	f001 ffe7 	bl	8002678 <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d127      	bne.n	8000700 <move+0x130>
 80006b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b4:	486c      	ldr	r0, [pc, #432]	; (8000868 <move+0x298>)
 80006b6:	f001 ffdf 	bl	8002678 <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d11f      	bne.n	8000700 <move+0x130>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,28);
 80006c0:	4b6a      	ldr	r3, [pc, #424]	; (800086c <move+0x29c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	221c      	movs	r2, #28
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80006c8:	4b68      	ldr	r3, [pc, #416]	; (800086c <move+0x29c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2200      	movs	r2, #0
 80006ce:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,28);
 80006d0:	4b66      	ldr	r3, [pc, #408]	; (800086c <move+0x29c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	221c      	movs	r2, #28
 80006d6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80006d8:	4b64      	ldr	r3, [pc, #400]	; (800086c <move+0x29c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2200      	movs	r2, #0
 80006de:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,14);
 80006e0:	4b63      	ldr	r3, [pc, #396]	; (8000870 <move+0x2a0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	220e      	movs	r2, #14
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 80006e8:	4b61      	ldr	r3, [pc, #388]	; (8000870 <move+0x2a0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2200      	movs	r2, #0
 80006ee:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,14);
 80006f0:	4b5f      	ldr	r3, [pc, #380]	; (8000870 <move+0x2a0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	220e      	movs	r2, #14
 80006f6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 80006f8:	4b5d      	ldr	r3, [pc, #372]	; (8000870 <move+0x2a0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2200      	movs	r2, #0
 80006fe:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000700:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000704:	4858      	ldr	r0, [pc, #352]	; (8000868 <move+0x298>)
 8000706:	f001 ffb7 	bl	8002678 <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d127      	bne.n	8000760 <move+0x190>
 8000710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000714:	4854      	ldr	r0, [pc, #336]	; (8000868 <move+0x298>)
 8000716:	f001 ffaf 	bl	8002678 <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d11f      	bne.n	8000760 <move+0x190>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 8000720:	4b52      	ldr	r3, [pc, #328]	; (800086c <move+0x29c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2264      	movs	r2, #100	; 0x64
 8000726:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 8000728:	4b50      	ldr	r3, [pc, #320]	; (800086c <move+0x29c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2264      	movs	r2, #100	; 0x64
 800072e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 8000730:	4b4e      	ldr	r3, [pc, #312]	; (800086c <move+0x29c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2264      	movs	r2, #100	; 0x64
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 8000738:	4b4c      	ldr	r3, [pc, #304]	; (800086c <move+0x29c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2264      	movs	r2, #100	; 0x64
 800073e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 8000740:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <move+0x2a0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2264      	movs	r2, #100	; 0x64
 8000746:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 8000748:	4b49      	ldr	r3, [pc, #292]	; (8000870 <move+0x2a0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2264      	movs	r2, #100	; 0x64
 800074e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 8000750:	4b47      	ldr	r3, [pc, #284]	; (8000870 <move+0x2a0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2264      	movs	r2, #100	; 0x64
 8000756:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 8000758:	4b45      	ldr	r3, [pc, #276]	; (8000870 <move+0x2a0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2264      	movs	r2, #100	; 0x64
 800075e:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	if(n==2)//右行
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b02      	cmp	r3, #2
 8000764:	f040 80c7 	bne.w	80008f6 <move+0x326>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1)
 8000768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076c:	4841      	ldr	r0, [pc, #260]	; (8000874 <move+0x2a4>)
 800076e:	f001 ff83 	bl	8002678 <HAL_GPIO_ReadPin>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d126      	bne.n	80007c6 <move+0x1f6>
 8000778:	2120      	movs	r1, #32
 800077a:	483f      	ldr	r0, [pc, #252]	; (8000878 <move+0x2a8>)
 800077c:	f001 ff7c 	bl	8002678 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d11f      	bne.n	80007c6 <move+0x1f6>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,19);
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <move+0x29c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2213      	movs	r2, #19
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800078e:	4b37      	ldr	r3, [pc, #220]	; (800086c <move+0x29c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2200      	movs	r2, #0
 8000794:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000796:	4b35      	ldr	r3, [pc, #212]	; (800086c <move+0x29c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2200      	movs	r2, #0
 800079c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,22);
 800079e:	4b33      	ldr	r3, [pc, #204]	; (800086c <move+0x29c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2216      	movs	r2, #22
 80007a4:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 80007a6:	4b32      	ldr	r3, [pc, #200]	; (8000870 <move+0x2a0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2210      	movs	r2, #16
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 80007ae:	4b30      	ldr	r3, [pc, #192]	; (8000870 <move+0x2a0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2200      	movs	r2, #0
 80007b4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 80007b6:	4b2e      	ldr	r3, [pc, #184]	; (8000870 <move+0x2a0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2200      	movs	r2, #0
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,24);
 80007be:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <move+0x2a0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2218      	movs	r2, #24
 80007c4:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 80007c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ca:	482a      	ldr	r0, [pc, #168]	; (8000874 <move+0x2a4>)
 80007cc:	f001 ff54 	bl	8002678 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d126      	bne.n	8000824 <move+0x254>
 80007d6:	2120      	movs	r1, #32
 80007d8:	4827      	ldr	r0, [pc, #156]	; (8000878 <move+0x2a8>)
 80007da:	f001 ff4d 	bl	8002678 <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d11f      	bne.n	8000824 <move+0x254>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,24);
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <move+0x29c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2218      	movs	r2, #24
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <move+0x29c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2200      	movs	r2, #0
 80007f2:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <move+0x29c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2200      	movs	r2, #0
 80007fa:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,21);
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <move+0x29c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2215      	movs	r2, #21
 8000802:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,18);
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <move+0x2a0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2212      	movs	r2, #18
 800080a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <move+0x2a0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2200      	movs	r2, #0
 8000812:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <move+0x2a0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2200      	movs	r2, #0
 800081a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,19);
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <move+0x2a0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2213      	movs	r2, #19
 8000822:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1)
 8000824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000828:	4812      	ldr	r0, [pc, #72]	; (8000874 <move+0x2a4>)
 800082a:	f001 ff25 	bl	8002678 <HAL_GPIO_ReadPin>
 800082e:	4603      	mov	r3, r0
 8000830:	2b01      	cmp	r3, #1
 8000832:	d131      	bne.n	8000898 <move+0x2c8>
 8000834:	2120      	movs	r1, #32
 8000836:	4810      	ldr	r0, [pc, #64]	; (8000878 <move+0x2a8>)
 8000838:	f001 ff1e 	bl	8002678 <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b01      	cmp	r3, #1
 8000840:	d12a      	bne.n	8000898 <move+0x2c8>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,19);
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <move+0x29c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2213      	movs	r2, #19
 8000848:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <move+0x29c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2200      	movs	r2, #0
 8000850:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <move+0x29c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2200      	movs	r2, #0
 8000858:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,20);
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <move+0x29c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2214      	movs	r2, #20
 8000860:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 8000862:	4b03      	ldr	r3, [pc, #12]	; (8000870 <move+0x2a0>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	e009      	b.n	800087c <move+0x2ac>
 8000868:	58020400 	.word	0x58020400
 800086c:	24000228 	.word	0x24000228
 8000870:	240000b0 	.word	0x240000b0
 8000874:	58020800 	.word	0x58020800
 8000878:	58021000 	.word	0x58021000
 800087c:	2210      	movs	r2, #16
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000880:	4b9a      	ldr	r3, [pc, #616]	; (8000aec <move+0x51c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2200      	movs	r2, #0
 8000886:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 8000888:	4b98      	ldr	r3, [pc, #608]	; (8000aec <move+0x51c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,19);
 8000890:	4b96      	ldr	r3, [pc, #600]	; (8000aec <move+0x51c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2213      	movs	r2, #19
 8000896:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	4894      	ldr	r0, [pc, #592]	; (8000af0 <move+0x520>)
 800089e:	f001 feeb 	bl	8002678 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d126      	bne.n	80008f6 <move+0x326>
 80008a8:	2120      	movs	r1, #32
 80008aa:	4892      	ldr	r0, [pc, #584]	; (8000af4 <move+0x524>)
 80008ac:	f001 fee4 	bl	8002678 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d11f      	bne.n	80008f6 <move+0x326>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 80008b6:	4b90      	ldr	r3, [pc, #576]	; (8000af8 <move+0x528>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2264      	movs	r2, #100	; 0x64
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 80008be:	4b8e      	ldr	r3, [pc, #568]	; (8000af8 <move+0x528>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2264      	movs	r2, #100	; 0x64
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 80008c6:	4b8c      	ldr	r3, [pc, #560]	; (8000af8 <move+0x528>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2264      	movs	r2, #100	; 0x64
 80008cc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 80008ce:	4b8a      	ldr	r3, [pc, #552]	; (8000af8 <move+0x528>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2264      	movs	r2, #100	; 0x64
 80008d4:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 80008d6:	4b85      	ldr	r3, [pc, #532]	; (8000aec <move+0x51c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2264      	movs	r2, #100	; 0x64
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 80008de:	4b83      	ldr	r3, [pc, #524]	; (8000aec <move+0x51c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2264      	movs	r2, #100	; 0x64
 80008e4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 80008e6:	4b81      	ldr	r3, [pc, #516]	; (8000aec <move+0x51c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2264      	movs	r2, #100	; 0x64
 80008ec:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 80008ee:	4b7f      	ldr	r3, [pc, #508]	; (8000aec <move+0x51c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2264      	movs	r2, #100	; 0x64
 80008f4:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	if(n==3)//旋转
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d11f      	bne.n	800093c <move+0x36c>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 80008fc:	4b7e      	ldr	r3, [pc, #504]	; (8000af8 <move+0x528>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2200      	movs	r2, #0
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,29);//27
 8000904:	4b7c      	ldr	r3, [pc, #496]	; (8000af8 <move+0x528>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	221d      	movs	r2, #29
 800090a:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,27);//24
 800090c:	4b7a      	ldr	r3, [pc, #488]	; (8000af8 <move+0x528>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	221b      	movs	r2, #27
 8000912:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,0);
 8000914:	4b78      	ldr	r3, [pc, #480]	; (8000af8 <move+0x528>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2200      	movs	r2, #0
 800091a:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,20);//20
 800091c:	4b73      	ldr	r3, [pc, #460]	; (8000aec <move+0x51c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2214      	movs	r2, #20
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000924:	4b71      	ldr	r3, [pc, #452]	; (8000aec <move+0x51c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2200      	movs	r2, #0
 800092a:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 800092c:	4b6f      	ldr	r3, [pc, #444]	; (8000aec <move+0x51c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2200      	movs	r2, #0
 8000932:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,21);//21
 8000934:	4b6d      	ldr	r3, [pc, #436]	; (8000aec <move+0x51c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2215      	movs	r2, #21
 800093a:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==4)//刹车
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b04      	cmp	r3, #4
 8000940:	d11f      	bne.n	8000982 <move+0x3b2>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 8000942:	4b6d      	ldr	r3, [pc, #436]	; (8000af8 <move+0x528>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2264      	movs	r2, #100	; 0x64
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 800094a:	4b6b      	ldr	r3, [pc, #428]	; (8000af8 <move+0x528>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2264      	movs	r2, #100	; 0x64
 8000950:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,100);
 8000952:	4b69      	ldr	r3, [pc, #420]	; (8000af8 <move+0x528>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2264      	movs	r2, #100	; 0x64
 8000958:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,100);
 800095a:	4b67      	ldr	r3, [pc, #412]	; (8000af8 <move+0x528>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2264      	movs	r2, #100	; 0x64
 8000960:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,100);
 8000962:	4b62      	ldr	r3, [pc, #392]	; (8000aec <move+0x51c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2264      	movs	r2, #100	; 0x64
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,100);
 800096a:	4b60      	ldr	r3, [pc, #384]	; (8000aec <move+0x51c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2264      	movs	r2, #100	; 0x64
 8000970:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,100);
 8000972:	4b5e      	ldr	r3, [pc, #376]	; (8000aec <move+0x51c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2264      	movs	r2, #100	; 0x64
 8000978:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,100);
 800097a:	4b5c      	ldr	r3, [pc, #368]	; (8000aec <move+0x51c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2264      	movs	r2, #100	; 0x64
 8000980:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==5)//倒车入库
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b05      	cmp	r3, #5
 8000986:	d11f      	bne.n	80009c8 <move+0x3f8>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 8000988:	4b5b      	ldr	r3, [pc, #364]	; (8000af8 <move+0x528>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2264      	movs	r2, #100	; 0x64
 800098e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 8000990:	4b59      	ldr	r3, [pc, #356]	; (8000af8 <move+0x528>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2264      	movs	r2, #100	; 0x64
 8000996:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,30);
 8000998:	4b57      	ldr	r3, [pc, #348]	; (8000af8 <move+0x528>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	221e      	movs	r2, #30
 800099e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80009a0:	4b55      	ldr	r3, [pc, #340]	; (8000af8 <move+0x528>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2200      	movs	r2, #0
 80009a6:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,100);
 80009a8:	4b50      	ldr	r3, [pc, #320]	; (8000aec <move+0x51c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2264      	movs	r2, #100	; 0x64
 80009ae:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,100);
 80009b0:	4b4e      	ldr	r3, [pc, #312]	; (8000aec <move+0x51c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2264      	movs	r2, #100	; 0x64
 80009b6:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,30);
 80009b8:	4b4c      	ldr	r3, [pc, #304]	; (8000aec <move+0x51c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	221e      	movs	r2, #30
 80009be:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 80009c0:	4b4a      	ldr	r3, [pc, #296]	; (8000aec <move+0x51c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2200      	movs	r2, #0
 80009c6:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==6)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	f040 80cc 	bne.w	8000b68 <move+0x598>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 80009d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d4:	4849      	ldr	r0, [pc, #292]	; (8000afc <move+0x52c>)
 80009d6:	f001 fe4f 	bl	8002678 <HAL_GPIO_ReadPin>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d127      	bne.n	8000a30 <move+0x460>
 80009e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e4:	4845      	ldr	r0, [pc, #276]	; (8000afc <move+0x52c>)
 80009e6:	f001 fe47 	bl	8002678 <HAL_GPIO_ReadPin>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d11f      	bne.n	8000a30 <move+0x460>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,22.4);
 80009f0:	4b41      	ldr	r3, [pc, #260]	; (8000af8 <move+0x528>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2216      	movs	r2, #22
 80009f6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80009f8:	4b3f      	ldr	r3, [pc, #252]	; (8000af8 <move+0x528>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2200      	movs	r2, #0
 80009fe:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,22.4);
 8000a00:	4b3d      	ldr	r3, [pc, #244]	; (8000af8 <move+0x528>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2216      	movs	r2, #22
 8000a06:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000a08:	4b3b      	ldr	r3, [pc, #236]	; (8000af8 <move+0x528>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,11.2);
 8000a10:	4b36      	ldr	r3, [pc, #216]	; (8000aec <move+0x51c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	220b      	movs	r2, #11
 8000a16:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000a18:	4b34      	ldr	r3, [pc, #208]	; (8000aec <move+0x51c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,24);
 8000a20:	4b32      	ldr	r3, [pc, #200]	; (8000aec <move+0x51c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2218      	movs	r2, #24
 8000a26:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000a28:	4b30      	ldr	r3, [pc, #192]	; (8000aec <move+0x51c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000a30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a34:	4831      	ldr	r0, [pc, #196]	; (8000afc <move+0x52c>)
 8000a36:	f001 fe1f 	bl	8002678 <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d127      	bne.n	8000a90 <move+0x4c0>
 8000a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a44:	482d      	ldr	r0, [pc, #180]	; (8000afc <move+0x52c>)
 8000a46:	f001 fe17 	bl	8002678 <HAL_GPIO_ReadPin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d11f      	bne.n	8000a90 <move+0x4c0>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,22.4);
 8000a50:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <move+0x528>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2216      	movs	r2, #22
 8000a56:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <move+0x528>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,22.4);
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <move+0x528>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2216      	movs	r2, #22
 8000a66:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000a68:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <move+0x528>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,24);
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <move+0x51c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2218      	movs	r2, #24
 8000a76:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <move+0x51c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,11.2);
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <move+0x51c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	220b      	movs	r2, #11
 8000a86:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <move+0x51c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000a90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a94:	4819      	ldr	r0, [pc, #100]	; (8000afc <move+0x52c>)
 8000a96:	f001 fdef 	bl	8002678 <HAL_GPIO_ReadPin>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d133      	bne.n	8000b08 <move+0x538>
 8000aa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa4:	4815      	ldr	r0, [pc, #84]	; (8000afc <move+0x52c>)
 8000aa6:	f001 fde7 	bl	8002678 <HAL_GPIO_ReadPin>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d12b      	bne.n	8000b08 <move+0x538>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,22.4);
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <move+0x528>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2216      	movs	r2, #22
 8000ab6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <move+0x528>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2200      	movs	r2, #0
 8000abe:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,22.4);
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <move+0x528>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2216      	movs	r2, #22
 8000ac6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <move+0x528>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2200      	movs	r2, #0
 8000ace:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,11.2);
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <move+0x51c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	220b      	movs	r2, #11
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <move+0x51c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2200      	movs	r2, #0
 8000ade:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,11.2);
 8000ae0:	4b02      	ldr	r3, [pc, #8]	; (8000aec <move+0x51c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	220b      	movs	r2, #11
 8000ae6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ae8:	e00a      	b.n	8000b00 <move+0x530>
 8000aea:	bf00      	nop
 8000aec:	240000b0 	.word	0x240000b0
 8000af0:	58020800 	.word	0x58020800
 8000af4:	58021000 	.word	0x58021000
 8000af8:	24000228 	.word	0x24000228
 8000afc:	58020400 	.word	0x58020400
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <move+0x5a0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2200      	movs	r2, #0
 8000b06:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000b08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b0c:	4819      	ldr	r0, [pc, #100]	; (8000b74 <move+0x5a4>)
 8000b0e:	f001 fdb3 	bl	8002678 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d127      	bne.n	8000b68 <move+0x598>
 8000b18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1c:	4815      	ldr	r0, [pc, #84]	; (8000b74 <move+0x5a4>)
 8000b1e:	f001 fdab 	bl	8002678 <HAL_GPIO_ReadPin>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d11f      	bne.n	8000b68 <move+0x598>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <move+0x5a8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2264      	movs	r2, #100	; 0x64
 8000b2e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <move+0x5a8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2264      	movs	r2, #100	; 0x64
 8000b36:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <move+0x5a8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2264      	movs	r2, #100	; 0x64
 8000b3e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <move+0x5a8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2264      	movs	r2, #100	; 0x64
 8000b46:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <move+0x5a0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2264      	movs	r2, #100	; 0x64
 8000b4e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <move+0x5a0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2264      	movs	r2, #100	; 0x64
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <move+0x5a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2264      	movs	r2, #100	; 0x64
 8000b5e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <move+0x5a0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2264      	movs	r2, #100	; 0x64
 8000b66:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	240000b0 	.word	0x240000b0
 8000b74:	58020400 	.word	0x58020400
 8000b78:	24000228 	.word	0x24000228

08000b7c <shuxian>:

void shuxian()
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	if(step==1)//直走
 8000b80:	4b7f      	ldr	r3, [pc, #508]	; (8000d80 <shuxian+0x204>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d11c      	bne.n	8000bc2 <shuxian+0x46>
	{
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000b88:	2120      	movs	r1, #32
 8000b8a:	487e      	ldr	r0, [pc, #504]	; (8000d84 <shuxian+0x208>)
 8000b8c:	f001 fd74 	bl	8002678 <HAL_GPIO_ReadPin>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d102      	bne.n	8000b9c <shuxian+0x20>
		{
			Xflag=1;
 8000b96:	4b7c      	ldr	r3, [pc, #496]	; (8000d88 <shuxian+0x20c>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Xflag==1)
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	4879      	ldr	r0, [pc, #484]	; (8000d84 <shuxian+0x208>)
 8000ba0:	f001 fd6a 	bl	8002678 <HAL_GPIO_ReadPin>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d10b      	bne.n	8000bc2 <shuxian+0x46>
 8000baa:	4b77      	ldr	r3, [pc, #476]	; (8000d88 <shuxian+0x20c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d107      	bne.n	8000bc2 <shuxian+0x46>
		{
			X+=1;
 8000bb2:	4b76      	ldr	r3, [pc, #472]	; (8000d8c <shuxian+0x210>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	4a74      	ldr	r2, [pc, #464]	; (8000d8c <shuxian+0x210>)
 8000bba:	6013      	str	r3, [r2, #0]
			Xflag=0;
 8000bbc:	4b72      	ldr	r3, [pc, #456]	; (8000d88 <shuxian+0x20c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==2||step==4||step==6||step==12||step==14)//旋转
 8000bc2:	4b6f      	ldr	r3, [pc, #444]	; (8000d80 <shuxian+0x204>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d00f      	beq.n	8000bea <shuxian+0x6e>
 8000bca:	4b6d      	ldr	r3, [pc, #436]	; (8000d80 <shuxian+0x204>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	d00b      	beq.n	8000bea <shuxian+0x6e>
 8000bd2:	4b6b      	ldr	r3, [pc, #428]	; (8000d80 <shuxian+0x204>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b06      	cmp	r3, #6
 8000bd8:	d007      	beq.n	8000bea <shuxian+0x6e>
 8000bda:	4b69      	ldr	r3, [pc, #420]	; (8000d80 <shuxian+0x204>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b0c      	cmp	r3, #12
 8000be0:	d003      	beq.n	8000bea <shuxian+0x6e>
 8000be2:	4b67      	ldr	r3, [pc, #412]	; (8000d80 <shuxian+0x204>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b0e      	cmp	r3, #14
 8000be8:	d11e      	bne.n	8000c28 <shuxian+0xac>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1&&turnflag==1)
 8000bea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bee:	4868      	ldr	r0, [pc, #416]	; (8000d90 <shuxian+0x214>)
 8000bf0:	f001 fd42 	bl	8002678 <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d10b      	bne.n	8000c12 <shuxian+0x96>
 8000bfa:	4b66      	ldr	r3, [pc, #408]	; (8000d94 <shuxian+0x218>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d107      	bne.n	8000c12 <shuxian+0x96>
		{
			turn+=1;
 8000c02:	4b65      	ldr	r3, [pc, #404]	; (8000d98 <shuxian+0x21c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	3301      	adds	r3, #1
 8000c08:	4a63      	ldr	r2, [pc, #396]	; (8000d98 <shuxian+0x21c>)
 8000c0a:	6013      	str	r3, [r2, #0]
			turnflag=0;
 8000c0c:	4b61      	ldr	r3, [pc, #388]	; (8000d94 <shuxian+0x218>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000c12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c16:	485e      	ldr	r0, [pc, #376]	; (8000d90 <shuxian+0x214>)
 8000c18:	f001 fd2e 	bl	8002678 <HAL_GPIO_ReadPin>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d102      	bne.n	8000c28 <shuxian+0xac>
		{
			turnflag=1;
 8000c22:	4b5c      	ldr	r3, [pc, #368]	; (8000d94 <shuxian+0x218>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==3||step==11||step==-1)//直走
 8000c28:	4b55      	ldr	r3, [pc, #340]	; (8000d80 <shuxian+0x204>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	d008      	beq.n	8000c42 <shuxian+0xc6>
 8000c30:	4b53      	ldr	r3, [pc, #332]	; (8000d80 <shuxian+0x204>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b0b      	cmp	r3, #11
 8000c36:	d004      	beq.n	8000c42 <shuxian+0xc6>
 8000c38:	4b51      	ldr	r3, [pc, #324]	; (8000d80 <shuxian+0x204>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c40:	d122      	bne.n	8000c88 <shuxian+0x10c>
	{
		turn=0;
 8000c42:	4b55      	ldr	r3, [pc, #340]	; (8000d98 <shuxian+0x21c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000c48:	4b52      	ldr	r3, [pc, #328]	; (8000d94 <shuxian+0x218>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Yflag==1)
 8000c4e:	2120      	movs	r1, #32
 8000c50:	484c      	ldr	r0, [pc, #304]	; (8000d84 <shuxian+0x208>)
 8000c52:	f001 fd11 	bl	8002678 <HAL_GPIO_ReadPin>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d10b      	bne.n	8000c74 <shuxian+0xf8>
 8000c5c:	4b4f      	ldr	r3, [pc, #316]	; (8000d9c <shuxian+0x220>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d107      	bne.n	8000c74 <shuxian+0xf8>
		{
			Y+=1;
 8000c64:	4b4e      	ldr	r3, [pc, #312]	; (8000da0 <shuxian+0x224>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	4a4d      	ldr	r2, [pc, #308]	; (8000da0 <shuxian+0x224>)
 8000c6c:	6013      	str	r3, [r2, #0]
			Yflag=0;
 8000c6e:	4b4b      	ldr	r3, [pc, #300]	; (8000d9c <shuxian+0x220>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000c74:	2120      	movs	r1, #32
 8000c76:	4843      	ldr	r0, [pc, #268]	; (8000d84 <shuxian+0x208>)
 8000c78:	f001 fcfe 	bl	8002678 <HAL_GPIO_ReadPin>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d102      	bne.n	8000c88 <shuxian+0x10c>
		{
			Yflag=1;
 8000c82:	4b46      	ldr	r3, [pc, #280]	; (8000d9c <shuxian+0x220>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==5||step==13)//�????回一�????
 8000c88:	4b3d      	ldr	r3, [pc, #244]	; (8000d80 <shuxian+0x204>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b05      	cmp	r3, #5
 8000c8e:	d003      	beq.n	8000c98 <shuxian+0x11c>
 8000c90:	4b3b      	ldr	r3, [pc, #236]	; (8000d80 <shuxian+0x204>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b0d      	cmp	r3, #13
 8000c96:	d122      	bne.n	8000cde <shuxian+0x162>
	{
		turn=0;
 8000c98:	4b3f      	ldr	r3, [pc, #252]	; (8000d98 <shuxian+0x21c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000c9e:	4b3d      	ldr	r3, [pc, #244]	; (8000d94 <shuxian+0x218>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Xflag==1)
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	4837      	ldr	r0, [pc, #220]	; (8000d84 <shuxian+0x208>)
 8000ca8:	f001 fce6 	bl	8002678 <HAL_GPIO_ReadPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d10b      	bne.n	8000cca <shuxian+0x14e>
 8000cb2:	4b35      	ldr	r3, [pc, #212]	; (8000d88 <shuxian+0x20c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d107      	bne.n	8000cca <shuxian+0x14e>
		{
			X-=1;
 8000cba:	4b34      	ldr	r3, [pc, #208]	; (8000d8c <shuxian+0x210>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	4a32      	ldr	r2, [pc, #200]	; (8000d8c <shuxian+0x210>)
 8000cc2:	6013      	str	r3, [r2, #0]
			Xflag=0;
 8000cc4:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <shuxian+0x20c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000cca:	2120      	movs	r1, #32
 8000ccc:	482d      	ldr	r0, [pc, #180]	; (8000d84 <shuxian+0x208>)
 8000cce:	f001 fcd3 	bl	8002678 <HAL_GPIO_ReadPin>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <shuxian+0x162>
		{
			Xflag=1;
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <shuxian+0x20c>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==7||step==15)//�????回一�????
 8000cde:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <shuxian+0x204>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b07      	cmp	r3, #7
 8000ce4:	d003      	beq.n	8000cee <shuxian+0x172>
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <shuxian+0x204>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b0f      	cmp	r3, #15
 8000cec:	d122      	bne.n	8000d34 <shuxian+0x1b8>
	{
		turn=0;
 8000cee:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <shuxian+0x21c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000cf4:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <shuxian+0x218>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Yflag==1)
 8000cfa:	2120      	movs	r1, #32
 8000cfc:	4821      	ldr	r0, [pc, #132]	; (8000d84 <shuxian+0x208>)
 8000cfe:	f001 fcbb 	bl	8002678 <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d10b      	bne.n	8000d20 <shuxian+0x1a4>
 8000d08:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <shuxian+0x220>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d107      	bne.n	8000d20 <shuxian+0x1a4>
		{
			Y-=1;
 8000d10:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <shuxian+0x224>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <shuxian+0x224>)
 8000d18:	6013      	str	r3, [r2, #0]
			Yflag=0;
 8000d1a:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <shuxian+0x220>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000d20:	2120      	movs	r1, #32
 8000d22:	4818      	ldr	r0, [pc, #96]	; (8000d84 <shuxian+0x208>)
 8000d24:	f001 fca8 	bl	8002678 <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <shuxian+0x1b8>
		{
			Yflag=1;
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <shuxian+0x220>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==8)
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <shuxian+0x204>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b08      	cmp	r3, #8
 8000d3a:	d11e      	bne.n	8000d7a <shuxian+0x1fe>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
 8000d3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d40:	4818      	ldr	r0, [pc, #96]	; (8000da4 <shuxian+0x228>)
 8000d42:	f001 fc99 	bl	8002678 <HAL_GPIO_ReadPin>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <shuxian+0x1d6>
		{
			Zflag=1;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <shuxian+0x22c>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&Zflag==1)
 8000d52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d56:	4813      	ldr	r0, [pc, #76]	; (8000da4 <shuxian+0x228>)
 8000d58:	f001 fc8e 	bl	8002678 <HAL_GPIO_ReadPin>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d10b      	bne.n	8000d7a <shuxian+0x1fe>
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <shuxian+0x22c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d107      	bne.n	8000d7a <shuxian+0x1fe>
		{
			Z+=1;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <shuxian+0x230>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <shuxian+0x230>)
 8000d72:	6013      	str	r3, [r2, #0]
			Zflag=0;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <shuxian+0x22c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	24000094 	.word	0x24000094
 8000d84:	58021000 	.word	0x58021000
 8000d88:	24000058 	.word	0x24000058
 8000d8c:	24000098 	.word	0x24000098
 8000d90:	58020400 	.word	0x58020400
 8000d94:	24000064 	.word	0x24000064
 8000d98:	240000a4 	.word	0x240000a4
 8000d9c:	2400005c 	.word	0x2400005c
 8000da0:	2400009c 	.word	0x2400009c
 8000da4:	58020800 	.word	0x58020800
 8000da8:	24000060 	.word	0x24000060
 8000dac:	240000a0 	.word	0x240000a0

08000db0 <buzhou>:


void buzhou()
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	if(step==0)//等待语音
 8000db4:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <buzhou+0xb0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d171      	bne.n	8000ea0 <buzhou+0xf0>
	{
		HAL_UART_Receive(&huart3,&color,1,HAL_MAX_DELAY);
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4928      	ldr	r1, [pc, #160]	; (8000e64 <buzhou+0xb4>)
 8000dc4:	4828      	ldr	r0, [pc, #160]	; (8000e68 <buzhou+0xb8>)
 8000dc6:	f005 f9bb 	bl	8006140 <HAL_UART_Receive>
		if(color==1)
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <buzhou+0xb4>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d10a      	bne.n	8000de8 <buzhou+0x38>
		{
			HAL_UART_Transmit(&huart2,redGreen,sizeof(redGreen),1000);
 8000dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	4924      	ldr	r1, [pc, #144]	; (8000e6c <buzhou+0xbc>)
 8000dda:	4825      	ldr	r0, [pc, #148]	; (8000e70 <buzhou+0xc0>)
 8000ddc:	f005 f91a 	bl	8006014 <HAL_UART_Transmit>
			step=1;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <buzhou+0xb0>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	e05b      	b.n	8000ea0 <buzhou+0xf0>
		}
		else if(color==2)
 8000de8:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <buzhou+0xb4>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d10a      	bne.n	8000e06 <buzhou+0x56>
		{
			HAL_UART_Transmit(&huart2,redBlue,sizeof(redBlue),1000);
 8000df0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df4:	2208      	movs	r2, #8
 8000df6:	491f      	ldr	r1, [pc, #124]	; (8000e74 <buzhou+0xc4>)
 8000df8:	481d      	ldr	r0, [pc, #116]	; (8000e70 <buzhou+0xc0>)
 8000dfa:	f005 f90b 	bl	8006014 <HAL_UART_Transmit>
			step=1;
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <buzhou+0xb0>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	e04c      	b.n	8000ea0 <buzhou+0xf0>
		}
		else if(color==3)
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <buzhou+0xb4>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d10a      	bne.n	8000e24 <buzhou+0x74>
		{
			HAL_UART_Transmit(&huart2,greenBlue,sizeof(greenBlue),1000);
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	2208      	movs	r2, #8
 8000e14:	4918      	ldr	r1, [pc, #96]	; (8000e78 <buzhou+0xc8>)
 8000e16:	4816      	ldr	r0, [pc, #88]	; (8000e70 <buzhou+0xc0>)
 8000e18:	f005 f8fc 	bl	8006014 <HAL_UART_Transmit>
			step=1;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <buzhou+0xb0>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	e03d      	b.n	8000ea0 <buzhou+0xf0>
		}
		else if(color==4)
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <buzhou+0xb4>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d10a      	bne.n	8000e42 <buzhou+0x92>
		{
			HAL_UART_Transmit(&huart2,greenRed,sizeof(greenRed),1000);
 8000e2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e30:	2208      	movs	r2, #8
 8000e32:	4912      	ldr	r1, [pc, #72]	; (8000e7c <buzhou+0xcc>)
 8000e34:	480e      	ldr	r0, [pc, #56]	; (8000e70 <buzhou+0xc0>)
 8000e36:	f005 f8ed 	bl	8006014 <HAL_UART_Transmit>
			step=1;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <buzhou+0xb0>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	e02e      	b.n	8000ea0 <buzhou+0xf0>
		}
		else if(color==5)
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <buzhou+0xb4>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b05      	cmp	r3, #5
 8000e48:	d11c      	bne.n	8000e84 <buzhou+0xd4>
		{
			HAL_UART_Transmit(&huart2,blueRed,sizeof(blueRed),1000);
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	2208      	movs	r2, #8
 8000e50:	490b      	ldr	r1, [pc, #44]	; (8000e80 <buzhou+0xd0>)
 8000e52:	4807      	ldr	r0, [pc, #28]	; (8000e70 <buzhou+0xc0>)
 8000e54:	f005 f8de 	bl	8006014 <HAL_UART_Transmit>
			step=1;
 8000e58:	4b01      	ldr	r3, [pc, #4]	; (8000e60 <buzhou+0xb0>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	e01f      	b.n	8000ea0 <buzhou+0xf0>
 8000e60:	24000094 	.word	0x24000094
 8000e64:	240000ac 	.word	0x240000ac
 8000e68:	240000fc 	.word	0x240000fc
 8000e6c:	24000000 	.word	0x24000000
 8000e70:	24000274 	.word	0x24000274
 8000e74:	24000010 	.word	0x24000010
 8000e78:	24000028 	.word	0x24000028
 8000e7c:	24000008 	.word	0x24000008
 8000e80:	24000018 	.word	0x24000018
		}
		else if(color==6)
 8000e84:	4bb6      	ldr	r3, [pc, #728]	; (8001160 <buzhou+0x3b0>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b06      	cmp	r3, #6
 8000e8a:	d109      	bne.n	8000ea0 <buzhou+0xf0>
		{
			HAL_UART_Transmit(&huart2,blueGreen,sizeof(blueGreen),1000);
 8000e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e90:	2208      	movs	r2, #8
 8000e92:	49b4      	ldr	r1, [pc, #720]	; (8001164 <buzhou+0x3b4>)
 8000e94:	48b4      	ldr	r0, [pc, #720]	; (8001168 <buzhou+0x3b8>)
 8000e96:	f005 f8bd 	bl	8006014 <HAL_UART_Transmit>
			step=1;
 8000e9a:	4bb4      	ldr	r3, [pc, #720]	; (800116c <buzhou+0x3bc>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]
		}

//		step=1;
	}
	if(step==1)//move straight
 8000ea0:	4bb2      	ldr	r3, [pc, #712]	; (800116c <buzhou+0x3bc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d116      	bne.n	8000ed6 <buzhou+0x126>
	{
		move(1);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f7ff fb91 	bl	80005d0 <move>
		shuxian();
 8000eae:	f7ff fe65 	bl	8000b7c <shuxian>
		if(X==2&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000eb2:	4baf      	ldr	r3, [pc, #700]	; (8001170 <buzhou+0x3c0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d10d      	bne.n	8000ed6 <buzhou+0x126>
 8000eba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ebe:	48ad      	ldr	r0, [pc, #692]	; (8001174 <buzhou+0x3c4>)
 8000ec0:	f001 fbda 	bl	8002678 <HAL_GPIO_ReadPin>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d105      	bne.n	8000ed6 <buzhou+0x126>
		{
			move(4);
 8000eca:	2004      	movs	r0, #4
 8000ecc:	f7ff fb80 	bl	80005d0 <move>
			step=2;
 8000ed0:	4ba6      	ldr	r3, [pc, #664]	; (800116c <buzhou+0x3bc>)
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==2)//turn right
 8000ed6:	4ba5      	ldr	r3, [pc, #660]	; (800116c <buzhou+0x3bc>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d10f      	bne.n	8000efe <buzhou+0x14e>
	{
		move(3);
 8000ede:	2003      	movs	r0, #3
 8000ee0:	f7ff fb76 	bl	80005d0 <move>
		shuxian();
 8000ee4:	f7ff fe4a 	bl	8000b7c <shuxian>
		if(turn==3)
 8000ee8:	4ba3      	ldr	r3, [pc, #652]	; (8001178 <buzhou+0x3c8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d106      	bne.n	8000efe <buzhou+0x14e>
		{
			move(4);
 8000ef0:	2004      	movs	r0, #4
 8000ef2:	f7ff fb6d 	bl	80005d0 <move>
			step=-1;
 8000ef6:	4b9d      	ldr	r3, [pc, #628]	; (800116c <buzhou+0x3bc>)
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8000efc:	601a      	str	r2, [r3, #0]
//			step=3;
		}
	}
	if(step==-1)//move straight
 8000efe:	4b9b      	ldr	r3, [pc, #620]	; (800116c <buzhou+0x3bc>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f06:	d117      	bne.n	8000f38 <buzhou+0x188>
	{
		move(1);
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff fb61 	bl	80005d0 <move>
		shuxian();
 8000f0e:	f7ff fe35 	bl	8000b7c <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000f12:	4b9a      	ldr	r3, [pc, #616]	; (800117c <buzhou+0x3cc>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d10e      	bne.n	8000f38 <buzhou+0x188>
 8000f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1e:	4895      	ldr	r0, [pc, #596]	; (8001174 <buzhou+0x3c4>)
 8000f20:	f001 fbaa 	bl	8002678 <HAL_GPIO_ReadPin>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d106      	bne.n	8000f38 <buzhou+0x188>
		{
			move(4);
 8000f2a:	2004      	movs	r0, #4
 8000f2c:	f7ff fb50 	bl	80005d0 <move>
			step=-2;
 8000f30:	4b8e      	ldr	r3, [pc, #568]	; (800116c <buzhou+0x3bc>)
 8000f32:	f06f 0201 	mvn.w	r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-2)//wait for car1 and activate arm
 8000f38:	4b8c      	ldr	r3, [pc, #560]	; (800116c <buzhou+0x3bc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f113 0f02 	cmn.w	r3, #2
 8000f40:	d11e      	bne.n	8000f80 <buzhou+0x1d0>
	{
		if(arm==0)
 8000f42:	4b8f      	ldr	r3, [pc, #572]	; (8001180 <buzhou+0x3d0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d109      	bne.n	8000f5e <buzhou+0x1ae>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A0,sizeof(A0),0xffff);//机械臂初始化
 8000f4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f4e:	2205      	movs	r2, #5
 8000f50:	498c      	ldr	r1, [pc, #560]	; (8001184 <buzhou+0x3d4>)
 8000f52:	488d      	ldr	r0, [pc, #564]	; (8001188 <buzhou+0x3d8>)
 8000f54:	f005 f85e 	bl	8006014 <HAL_UART_Transmit>
			arm=1;
 8000f58:	4b89      	ldr	r3, [pc, #548]	; (8001180 <buzhou+0x3d0>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]
		}
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK&&arm==1)
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	2201      	movs	r2, #1
 8000f64:	4989      	ldr	r1, [pc, #548]	; (800118c <buzhou+0x3dc>)
 8000f66:	488a      	ldr	r0, [pc, #552]	; (8001190 <buzhou+0x3e0>)
 8000f68:	f005 f8ea 	bl	8006140 <HAL_UART_Receive>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d106      	bne.n	8000f80 <buzhou+0x1d0>
 8000f72:	4b83      	ldr	r3, [pc, #524]	; (8001180 <buzhou+0x3d0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d102      	bne.n	8000f80 <buzhou+0x1d0>
		{
			step=3;
 8000f7a:	4b7c      	ldr	r3, [pc, #496]	; (800116c <buzhou+0x3bc>)
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==3)//move straight
 8000f80:	4b7a      	ldr	r3, [pc, #488]	; (800116c <buzhou+0x3bc>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d122      	bne.n	8000fce <buzhou+0x21e>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)A0,sizeof(A0),0xffff);
 8000f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	497d      	ldr	r1, [pc, #500]	; (8001184 <buzhou+0x3d4>)
 8000f90:	487d      	ldr	r0, [pc, #500]	; (8001188 <buzhou+0x3d8>)
 8000f92:	f005 f83f 	bl	8006014 <HAL_UART_Transmit>
		move(1);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f7ff fb1a 	bl	80005d0 <move>
		shuxian();
 8000f9c:	f7ff fdee 	bl	8000b7c <shuxian>
		if(Y==2&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000fa0:	4b76      	ldr	r3, [pc, #472]	; (800117c <buzhou+0x3cc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d112      	bne.n	8000fce <buzhou+0x21e>
 8000fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fac:	4871      	ldr	r0, [pc, #452]	; (8001174 <buzhou+0x3c4>)
 8000fae:	f001 fb63 	bl	8002678 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d10a      	bne.n	8000fce <buzhou+0x21e>
		{
			move(4);
 8000fb8:	2004      	movs	r0, #4
 8000fba:	f7ff fb09 	bl	80005d0 <move>
			HAL_Delay(1000);
 8000fbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc2:	f001 f895 	bl	80020f0 <HAL_Delay>
//			step=11;
//			step=4;
			step=-4;
 8000fc6:	4b69      	ldr	r3, [pc, #420]	; (800116c <buzhou+0x3bc>)
 8000fc8:	f06f 0203 	mvn.w	r2, #3
 8000fcc:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-4)//wait for car1 to catch
 8000fce:	4b67      	ldr	r3, [pc, #412]	; (800116c <buzhou+0x3bc>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f113 0f04 	cmn.w	r3, #4
 8000fd6:	d114      	bne.n	8001002 <buzhou+0x252>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fdc:	2201      	movs	r2, #1
 8000fde:	496b      	ldr	r1, [pc, #428]	; (800118c <buzhou+0x3dc>)
 8000fe0:	486b      	ldr	r0, [pc, #428]	; (8001190 <buzhou+0x3e0>)
 8000fe2:	f005 f8ad 	bl	8006140 <HAL_UART_Receive>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10a      	bne.n	8001002 <buzhou+0x252>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A1,sizeof(A1),0xffff);
 8000fec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ff0:	2205      	movs	r2, #5
 8000ff2:	4968      	ldr	r1, [pc, #416]	; (8001194 <buzhou+0x3e4>)
 8000ff4:	4864      	ldr	r0, [pc, #400]	; (8001188 <buzhou+0x3d8>)
 8000ff6:	f005 f80d 	bl	8006014 <HAL_UART_Transmit>
			step=-5;
 8000ffa:	4b5c      	ldr	r3, [pc, #368]	; (800116c <buzhou+0x3bc>)
 8000ffc:	f06f 0204 	mvn.w	r2, #4
 8001000:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-5)
 8001002:	4b5a      	ldr	r3, [pc, #360]	; (800116c <buzhou+0x3bc>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f113 0f05 	cmn.w	r3, #5
 800100a:	d114      	bne.n	8001036 <buzhou+0x286>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	2201      	movs	r2, #1
 8001012:	495e      	ldr	r1, [pc, #376]	; (800118c <buzhou+0x3dc>)
 8001014:	485e      	ldr	r0, [pc, #376]	; (8001190 <buzhou+0x3e0>)
 8001016:	f005 f893 	bl	8006140 <HAL_UART_Receive>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d10a      	bne.n	8001036 <buzhou+0x286>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A2,sizeof(A2),0xffff);
 8001020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001024:	2205      	movs	r2, #5
 8001026:	495c      	ldr	r1, [pc, #368]	; (8001198 <buzhou+0x3e8>)
 8001028:	4857      	ldr	r0, [pc, #348]	; (8001188 <buzhou+0x3d8>)
 800102a:	f004 fff3 	bl	8006014 <HAL_UART_Transmit>
			step=-6;
 800102e:	4b4f      	ldr	r3, [pc, #316]	; (800116c <buzhou+0x3bc>)
 8001030:	f06f 0205 	mvn.w	r2, #5
 8001034:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-6)//wait for car1 to move
 8001036:	4b4d      	ldr	r3, [pc, #308]	; (800116c <buzhou+0x3bc>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f113 0f06 	cmn.w	r3, #6
 800103e:	d10c      	bne.n	800105a <buzhou+0x2aa>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	2201      	movs	r2, #1
 8001046:	4951      	ldr	r1, [pc, #324]	; (800118c <buzhou+0x3dc>)
 8001048:	4851      	ldr	r0, [pc, #324]	; (8001190 <buzhou+0x3e0>)
 800104a:	f005 f879 	bl	8006140 <HAL_UART_Receive>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <buzhou+0x2aa>
		{
//			step=4;
			step=11;
 8001054:	4b45      	ldr	r3, [pc, #276]	; (800116c <buzhou+0x3bc>)
 8001056:	220b      	movs	r2, #11
 8001058:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==4)//turn right
 800105a:	4b44      	ldr	r3, [pc, #272]	; (800116c <buzhou+0x3bc>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b04      	cmp	r3, #4
 8001060:	d10e      	bne.n	8001080 <buzhou+0x2d0>
	{
		move(3);
 8001062:	2003      	movs	r0, #3
 8001064:	f7ff fab4 	bl	80005d0 <move>
		shuxian();
 8001068:	f7ff fd88 	bl	8000b7c <shuxian>
		if(turn==3)
 800106c:	4b42      	ldr	r3, [pc, #264]	; (8001178 <buzhou+0x3c8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b03      	cmp	r3, #3
 8001072:	d105      	bne.n	8001080 <buzhou+0x2d0>
		{
			move(4);
 8001074:	2004      	movs	r0, #4
 8001076:	f7ff faab 	bl	80005d0 <move>
			step=5;
 800107a:	4b3c      	ldr	r3, [pc, #240]	; (800116c <buzhou+0x3bc>)
 800107c:	2205      	movs	r2, #5
 800107e:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==5)//move straight
 8001080:	4b3a      	ldr	r3, [pc, #232]	; (800116c <buzhou+0x3bc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b05      	cmp	r3, #5
 8001086:	d116      	bne.n	80010b6 <buzhou+0x306>
	{
		move(1);
 8001088:	2001      	movs	r0, #1
 800108a:	f7ff faa1 	bl	80005d0 <move>
		shuxian();
 800108e:	f7ff fd75 	bl	8000b7c <shuxian>
		if(X==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8001092:	4b37      	ldr	r3, [pc, #220]	; (8001170 <buzhou+0x3c0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d10d      	bne.n	80010b6 <buzhou+0x306>
 800109a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109e:	4835      	ldr	r0, [pc, #212]	; (8001174 <buzhou+0x3c4>)
 80010a0:	f001 faea 	bl	8002678 <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d105      	bne.n	80010b6 <buzhou+0x306>
		{
			move(4);
 80010aa:	2004      	movs	r0, #4
 80010ac:	f7ff fa90 	bl	80005d0 <move>
			step=6;
 80010b0:	4b2e      	ldr	r3, [pc, #184]	; (800116c <buzhou+0x3bc>)
 80010b2:	2206      	movs	r2, #6
 80010b4:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==6)//turn right
 80010b6:	4b2d      	ldr	r3, [pc, #180]	; (800116c <buzhou+0x3bc>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d10e      	bne.n	80010dc <buzhou+0x32c>
	{
		move(3);
 80010be:	2003      	movs	r0, #3
 80010c0:	f7ff fa86 	bl	80005d0 <move>
		shuxian();
 80010c4:	f7ff fd5a 	bl	8000b7c <shuxian>
		if(turn==3)
 80010c8:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <buzhou+0x3c8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d105      	bne.n	80010dc <buzhou+0x32c>
		{
			move(4);
 80010d0:	2004      	movs	r0, #4
 80010d2:	f7ff fa7d 	bl	80005d0 <move>
			step=7;
 80010d6:	4b25      	ldr	r3, [pc, #148]	; (800116c <buzhou+0x3bc>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==7)//move straight
 80010dc:	4b23      	ldr	r3, [pc, #140]	; (800116c <buzhou+0x3bc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b07      	cmp	r3, #7
 80010e2:	d116      	bne.n	8001112 <buzhou+0x362>
	{
		move(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff fa73 	bl	80005d0 <move>
		shuxian();
 80010ea:	f7ff fd47 	bl	8000b7c <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 80010ee:	4b23      	ldr	r3, [pc, #140]	; (800117c <buzhou+0x3cc>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d10d      	bne.n	8001112 <buzhou+0x362>
 80010f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fa:	481e      	ldr	r0, [pc, #120]	; (8001174 <buzhou+0x3c4>)
 80010fc:	f001 fabc 	bl	8002678 <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	2b01      	cmp	r3, #1
 8001104:	d105      	bne.n	8001112 <buzhou+0x362>
		{
			move(4);
 8001106:	2004      	movs	r0, #4
 8001108:	f7ff fa62 	bl	80005d0 <move>
			step=8;
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <buzhou+0x3bc>)
 800110e:	2208      	movs	r2, #8
 8001110:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==8)
 8001112:	4b16      	ldr	r3, [pc, #88]	; (800116c <buzhou+0x3bc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b08      	cmp	r3, #8
 8001118:	d10e      	bne.n	8001138 <buzhou+0x388>
	{
		move(5);
 800111a:	2005      	movs	r0, #5
 800111c:	f7ff fa58 	bl	80005d0 <move>
		shuxian();
 8001120:	f7ff fd2c 	bl	8000b7c <shuxian>
		if(Z==3)
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <buzhou+0x3ec>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b03      	cmp	r3, #3
 800112a:	d105      	bne.n	8001138 <buzhou+0x388>
		{
			move(4);
 800112c:	2004      	movs	r0, #4
 800112e:	f7ff fa4f 	bl	80005d0 <move>
			step=9;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <buzhou+0x3bc>)
 8001134:	2209      	movs	r2, #9
 8001136:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==11)//move straight
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <buzhou+0x3bc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b0b      	cmp	r3, #11
 800113e:	d13d      	bne.n	80011bc <buzhou+0x40c>
	{
		move(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f7ff fa45 	bl	80005d0 <move>
		shuxian();
 8001146:	f7ff fd19 	bl	8000b7c <shuxian>
		if(Y==4&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <buzhou+0x3cc>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b04      	cmp	r3, #4
 8001150:	d134      	bne.n	80011bc <buzhou+0x40c>
 8001152:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001156:	4807      	ldr	r0, [pc, #28]	; (8001174 <buzhou+0x3c4>)
 8001158:	f001 fa8e 	bl	8002678 <HAL_GPIO_ReadPin>
 800115c:	e020      	b.n	80011a0 <buzhou+0x3f0>
 800115e:	bf00      	nop
 8001160:	240000ac 	.word	0x240000ac
 8001164:	24000020 	.word	0x24000020
 8001168:	24000274 	.word	0x24000274
 800116c:	24000094 	.word	0x24000094
 8001170:	24000098 	.word	0x24000098
 8001174:	58020800 	.word	0x58020800
 8001178:	240000a4 	.word	0x240000a4
 800117c:	2400009c 	.word	0x2400009c
 8001180:	240000a8 	.word	0x240000a8
 8001184:	24000030 	.word	0x24000030
 8001188:	24000198 	.word	0x24000198
 800118c:	240000ad 	.word	0x240000ad
 8001190:	240000fc 	.word	0x240000fc
 8001194:	24000038 	.word	0x24000038
 8001198:	24000040 	.word	0x24000040
 800119c:	240000a0 	.word	0x240000a0
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d10a      	bne.n	80011bc <buzhou+0x40c>
		{
			move(4);
 80011a6:	2004      	movs	r0, #4
 80011a8:	f7ff fa12 	bl	80005d0 <move>
			HAL_Delay(1000);
 80011ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b0:	f000 ff9e 	bl	80020f0 <HAL_Delay>
			step=-8;
 80011b4:	4b53      	ldr	r3, [pc, #332]	; (8001304 <buzhou+0x554>)
 80011b6:	f06f 0207 	mvn.w	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
//			step=12;
		}
	}
	if(step==-8)//arm move
 80011bc:	4b51      	ldr	r3, [pc, #324]	; (8001304 <buzhou+0x554>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f113 0f08 	cmn.w	r3, #8
 80011c4:	d114      	bne.n	80011f0 <buzhou+0x440>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	2201      	movs	r2, #1
 80011cc:	494e      	ldr	r1, [pc, #312]	; (8001308 <buzhou+0x558>)
 80011ce:	484f      	ldr	r0, [pc, #316]	; (800130c <buzhou+0x55c>)
 80011d0:	f004 ffb6 	bl	8006140 <HAL_UART_Receive>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10a      	bne.n	80011f0 <buzhou+0x440>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A5,sizeof(A5),0xffff);
 80011da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011de:	2205      	movs	r2, #5
 80011e0:	494b      	ldr	r1, [pc, #300]	; (8001310 <buzhou+0x560>)
 80011e2:	484c      	ldr	r0, [pc, #304]	; (8001314 <buzhou+0x564>)
 80011e4:	f004 ff16 	bl	8006014 <HAL_UART_Transmit>
			step=-9;
 80011e8:	4b46      	ldr	r3, [pc, #280]	; (8001304 <buzhou+0x554>)
 80011ea:	f06f 0208 	mvn.w	r2, #8
 80011ee:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==-9)//arm move
 80011f0:	4b44      	ldr	r3, [pc, #272]	; (8001304 <buzhou+0x554>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f113 0f09 	cmn.w	r3, #9
 80011f8:	d114      	bne.n	8001224 <buzhou+0x474>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	2201      	movs	r2, #1
 8001200:	4941      	ldr	r1, [pc, #260]	; (8001308 <buzhou+0x558>)
 8001202:	4842      	ldr	r0, [pc, #264]	; (800130c <buzhou+0x55c>)
 8001204:	f004 ff9c 	bl	8006140 <HAL_UART_Receive>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10a      	bne.n	8001224 <buzhou+0x474>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)A6,sizeof(A6),0xffff);
 800120e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001212:	2205      	movs	r2, #5
 8001214:	4940      	ldr	r1, [pc, #256]	; (8001318 <buzhou+0x568>)
 8001216:	483f      	ldr	r0, [pc, #252]	; (8001314 <buzhou+0x564>)
 8001218:	f004 fefc 	bl	8006014 <HAL_UART_Transmit>
			HAL_Delay(28000);
 800121c:	f646 5060 	movw	r0, #28000	; 0x6d60
 8001220:	f000 ff66 	bl	80020f0 <HAL_Delay>
		}
	}
	if(step==-10)//wait for car1
 8001224:	4b37      	ldr	r3, [pc, #220]	; (8001304 <buzhou+0x554>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f113 0f0a 	cmn.w	r3, #10
 800122c:	d10c      	bne.n	8001248 <buzhou+0x498>
	{
		if(HAL_UART_Receive(&huart3,&rx2,1,HAL_MAX_DELAY)==HAL_OK)
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	2201      	movs	r2, #1
 8001234:	4934      	ldr	r1, [pc, #208]	; (8001308 <buzhou+0x558>)
 8001236:	4835      	ldr	r0, [pc, #212]	; (800130c <buzhou+0x55c>)
 8001238:	f004 ff82 	bl	8006140 <HAL_UART_Receive>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d102      	bne.n	8001248 <buzhou+0x498>
		{
			step=12;
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <buzhou+0x554>)
 8001244:	220c      	movs	r2, #12
 8001246:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==12)
 8001248:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <buzhou+0x554>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b0c      	cmp	r3, #12
 800124e:	d10e      	bne.n	800126e <buzhou+0x4be>
	{
		move(3);
 8001250:	2003      	movs	r0, #3
 8001252:	f7ff f9bd 	bl	80005d0 <move>
		shuxian();
 8001256:	f7ff fc91 	bl	8000b7c <shuxian>
		if(turn==3)
 800125a:	4b30      	ldr	r3, [pc, #192]	; (800131c <buzhou+0x56c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b03      	cmp	r3, #3
 8001260:	d105      	bne.n	800126e <buzhou+0x4be>
		{
			move(4);
 8001262:	2004      	movs	r0, #4
 8001264:	f7ff f9b4 	bl	80005d0 <move>
			step=13;
 8001268:	4b26      	ldr	r3, [pc, #152]	; (8001304 <buzhou+0x554>)
 800126a:	220d      	movs	r2, #13
 800126c:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==13)
 800126e:	4b25      	ldr	r3, [pc, #148]	; (8001304 <buzhou+0x554>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b0d      	cmp	r3, #13
 8001274:	d116      	bne.n	80012a4 <buzhou+0x4f4>
	{
		move(6);
 8001276:	2006      	movs	r0, #6
 8001278:	f7ff f9aa 	bl	80005d0 <move>
		shuxian();
 800127c:	f7ff fc7e 	bl	8000b7c <shuxian>
		if(X==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8001280:	4b27      	ldr	r3, [pc, #156]	; (8001320 <buzhou+0x570>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10d      	bne.n	80012a4 <buzhou+0x4f4>
 8001288:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128c:	4825      	ldr	r0, [pc, #148]	; (8001324 <buzhou+0x574>)
 800128e:	f001 f9f3 	bl	8002678 <HAL_GPIO_ReadPin>
 8001292:	4603      	mov	r3, r0
 8001294:	2b01      	cmp	r3, #1
 8001296:	d105      	bne.n	80012a4 <buzhou+0x4f4>
		{
			move(4);
 8001298:	2004      	movs	r0, #4
 800129a:	f7ff f999 	bl	80005d0 <move>
			step=14;
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <buzhou+0x554>)
 80012a0:	220e      	movs	r2, #14
 80012a2:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==14)
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <buzhou+0x554>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b0e      	cmp	r3, #14
 80012aa:	d10e      	bne.n	80012ca <buzhou+0x51a>
	{
		move(3);
 80012ac:	2003      	movs	r0, #3
 80012ae:	f7ff f98f 	bl	80005d0 <move>
		shuxian();
 80012b2:	f7ff fc63 	bl	8000b7c <shuxian>
		if(turn==3)
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <buzhou+0x56c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d105      	bne.n	80012ca <buzhou+0x51a>
		{
			move(4);
 80012be:	2004      	movs	r0, #4
 80012c0:	f7ff f986 	bl	80005d0 <move>
			step=15;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <buzhou+0x554>)
 80012c6:	220f      	movs	r2, #15
 80012c8:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==15)//move straight
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <buzhou+0x554>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b0f      	cmp	r3, #15
 80012d0:	d116      	bne.n	8001300 <buzhou+0x550>
	{
		move(1);
 80012d2:	2001      	movs	r0, #1
 80012d4:	f7ff f97c 	bl	80005d0 <move>
		shuxian();
 80012d8:	f7ff fc50 	bl	8000b7c <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <buzhou+0x578>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d10d      	bne.n	8001300 <buzhou+0x550>
 80012e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e8:	480e      	ldr	r0, [pc, #56]	; (8001324 <buzhou+0x574>)
 80012ea:	f001 f9c5 	bl	8002678 <HAL_GPIO_ReadPin>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d105      	bne.n	8001300 <buzhou+0x550>
		{
			move(4);
 80012f4:	2004      	movs	r0, #4
 80012f6:	f7ff f96b 	bl	80005d0 <move>
			step=8;
 80012fa:	4b02      	ldr	r3, [pc, #8]	; (8001304 <buzhou+0x554>)
 80012fc:	2208      	movs	r2, #8
 80012fe:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	24000094 	.word	0x24000094
 8001308:	240000ad 	.word	0x240000ad
 800130c:	240000fc 	.word	0x240000fc
 8001310:	24000048 	.word	0x24000048
 8001314:	24000198 	.word	0x24000198
 8001318:	24000050 	.word	0x24000050
 800131c:	240000a4 	.word	0x240000a4
 8001320:	24000098 	.word	0x24000098
 8001324:	58020800 	.word	0x58020800
 8001328:	2400009c 	.word	0x2400009c

0800132c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001330:	f000 fe4c 	bl	8001fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001334:	f000 f834 	bl	80013a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001338:	f000 fb22 	bl	8001980 <MX_GPIO_Init>
  MX_TIM8_Init();
 800133c:	f000 f96c 	bl	8001618 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001340:	f000 fa3a 	bl	80017b8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001344:	f000 fa84 	bl	8001850 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001348:	f000 f896 	bl	8001478 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800134c:	f000 facc 	bl	80018e8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001350:	2100      	movs	r1, #0
 8001352:	4811      	ldr	r0, [pc, #68]	; (8001398 <main+0x6c>)
 8001354:	f003 fdb4 	bl	8004ec0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001358:	2104      	movs	r1, #4
 800135a:	480f      	ldr	r0, [pc, #60]	; (8001398 <main+0x6c>)
 800135c:	f003 fdb0 	bl	8004ec0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8001360:	2108      	movs	r1, #8
 8001362:	480d      	ldr	r0, [pc, #52]	; (8001398 <main+0x6c>)
 8001364:	f003 fdac 	bl	8004ec0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8001368:	210c      	movs	r1, #12
 800136a:	480b      	ldr	r0, [pc, #44]	; (8001398 <main+0x6c>)
 800136c:	f003 fda8 	bl	8004ec0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8001370:	2100      	movs	r1, #0
 8001372:	480a      	ldr	r0, [pc, #40]	; (800139c <main+0x70>)
 8001374:	f003 fda4 	bl	8004ec0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8001378:	2104      	movs	r1, #4
 800137a:	4808      	ldr	r0, [pc, #32]	; (800139c <main+0x70>)
 800137c:	f003 fda0 	bl	8004ec0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 8001380:	2108      	movs	r1, #8
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <main+0x70>)
 8001384:	f003 fd9c 	bl	8004ec0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);
 8001388:	210c      	movs	r1, #12
 800138a:	4804      	ldr	r0, [pc, #16]	; (800139c <main+0x70>)
 800138c:	f003 fd98 	bl	8004ec0 <HAL_TIM_PWM_Start>
//	       HAL_UART_Transmit(&huart1, (uint8_t *)A1,sizeof(A1),0xffff);
//	       HAL_Delay(2000);
	  /*HAL_UART_Transmit(&huart2,redGreen,sizeof(redGreen),1000);
	  HAL_UART_Transmit(&huart1, (uint8_t *)A1,sizeof(A1),0xffff);
	  HAL_Delay(10000);*/
	  buzhou();
 8001390:	f7ff fd0e 	bl	8000db0 <buzhou>
 8001394:	e7fc      	b.n	8001390 <main+0x64>
 8001396:	bf00      	nop
 8001398:	24000228 	.word	0x24000228
 800139c:	240000b0 	.word	0x240000b0

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b09c      	sub	sp, #112	; 0x70
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013aa:	224c      	movs	r2, #76	; 0x4c
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f005 ffd6 	bl	8007360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	2220      	movs	r2, #32
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f005 ffd0 	bl	8007360 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013c0:	2002      	movs	r0, #2
 80013c2:	f001 f971 	bl	80026a8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <SystemClock_Config+0xd0>)
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ce:	4a28      	ldr	r2, [pc, #160]	; (8001470 <SystemClock_Config+0xd0>)
 80013d0:	f023 0301 	bic.w	r3, r3, #1
 80013d4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <SystemClock_Config+0xd0>)
 80013d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <SystemClock_Config+0xd4>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013e8:	4a22      	ldr	r2, [pc, #136]	; (8001474 <SystemClock_Config+0xd4>)
 80013ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b20      	ldr	r3, [pc, #128]	; (8001474 <SystemClock_Config+0xd4>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013fc:	bf00      	nop
 80013fe:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <SystemClock_Config+0xd4>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800140a:	d1f8      	bne.n	80013fe <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800140c:	2302      	movs	r3, #2
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001410:	2301      	movs	r3, #1
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001414:	2340      	movs	r3, #64	; 0x40
 8001416:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001418:	2300      	movs	r3, #0
 800141a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001420:	4618      	mov	r0, r3
 8001422:	f001 f97b 	bl	800271c <HAL_RCC_OscConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800142c:	f000 fb30 	bl	8001a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001430:	233f      	movs	r3, #63	; 0x3f
 8001432:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001444:	2340      	movs	r3, #64	; 0x40
 8001446:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800144c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2101      	movs	r1, #1
 8001456:	4618      	mov	r0, r3
 8001458:	f001 fd8c 	bl	8002f74 <HAL_RCC_ClockConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001462:	f000 fb15 	bl	8001a90 <Error_Handler>
  }
}
 8001466:	bf00      	nop
 8001468:	3770      	adds	r7, #112	; 0x70
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	58000400 	.word	0x58000400
 8001474:	58024800 	.word	0x58024800

08001478 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b09a      	sub	sp, #104	; 0x68
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001498:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
 80014a8:	615a      	str	r2, [r3, #20]
 80014aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	222c      	movs	r2, #44	; 0x2c
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f005 ff54 	bl	8007360 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014b8:	4b55      	ldr	r3, [pc, #340]	; (8001610 <MX_TIM1_Init+0x198>)
 80014ba:	4a56      	ldr	r2, [pc, #344]	; (8001614 <MX_TIM1_Init+0x19c>)
 80014bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 80014be:	4b54      	ldr	r3, [pc, #336]	; (8001610 <MX_TIM1_Init+0x198>)
 80014c0:	221f      	movs	r2, #31
 80014c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c4:	4b52      	ldr	r3, [pc, #328]	; (8001610 <MX_TIM1_Init+0x198>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80014ca:	4b51      	ldr	r3, [pc, #324]	; (8001610 <MX_TIM1_Init+0x198>)
 80014cc:	2263      	movs	r2, #99	; 0x63
 80014ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d0:	4b4f      	ldr	r3, [pc, #316]	; (8001610 <MX_TIM1_Init+0x198>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014d6:	4b4e      	ldr	r3, [pc, #312]	; (8001610 <MX_TIM1_Init+0x198>)
 80014d8:	2200      	movs	r2, #0
 80014da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014dc:	4b4c      	ldr	r3, [pc, #304]	; (8001610 <MX_TIM1_Init+0x198>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014e2:	484b      	ldr	r0, [pc, #300]	; (8001610 <MX_TIM1_Init+0x198>)
 80014e4:	f003 fc34 	bl	8004d50 <HAL_TIM_Base_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014ee:	f000 facf 	bl	8001a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014fc:	4619      	mov	r1, r3
 80014fe:	4844      	ldr	r0, [pc, #272]	; (8001610 <MX_TIM1_Init+0x198>)
 8001500:	f003 ff00 	bl	8005304 <HAL_TIM_ConfigClockSource>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800150a:	f000 fac1 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800150e:	4840      	ldr	r0, [pc, #256]	; (8001610 <MX_TIM1_Init+0x198>)
 8001510:	f003 fc75 	bl	8004dfe <HAL_TIM_PWM_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800151a:	f000 fab9 	bl	8001a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800152a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800152e:	4619      	mov	r1, r3
 8001530:	4837      	ldr	r0, [pc, #220]	; (8001610 <MX_TIM1_Init+0x198>)
 8001532:	f004 fc13 	bl	8005d5c <HAL_TIMEx_MasterConfigSynchronization>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800153c:	f000 faa8 	bl	8001a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001540:	2360      	movs	r3, #96	; 0x60
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001548:	2300      	movs	r3, #0
 800154a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800154c:	2300      	movs	r3, #0
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800155c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001560:	2200      	movs	r2, #0
 8001562:	4619      	mov	r1, r3
 8001564:	482a      	ldr	r0, [pc, #168]	; (8001610 <MX_TIM1_Init+0x198>)
 8001566:	f003 fdb9 	bl	80050dc <HAL_TIM_PWM_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001570:	f000 fa8e 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001574:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001578:	2204      	movs	r2, #4
 800157a:	4619      	mov	r1, r3
 800157c:	4824      	ldr	r0, [pc, #144]	; (8001610 <MX_TIM1_Init+0x198>)
 800157e:	f003 fdad 	bl	80050dc <HAL_TIM_PWM_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001588:	f000 fa82 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800158c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001590:	2208      	movs	r2, #8
 8001592:	4619      	mov	r1, r3
 8001594:	481e      	ldr	r0, [pc, #120]	; (8001610 <MX_TIM1_Init+0x198>)
 8001596:	f003 fda1 	bl	80050dc <HAL_TIM_PWM_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80015a0:	f000 fa76 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015a8:	220c      	movs	r2, #12
 80015aa:	4619      	mov	r1, r3
 80015ac:	4818      	ldr	r0, [pc, #96]	; (8001610 <MX_TIM1_Init+0x198>)
 80015ae:	f003 fd95 	bl	80050dc <HAL_TIM_PWM_ConfigChannel>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80015b8:	f000 fa6a 	bl	8001a90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	4619      	mov	r1, r3
 80015f0:	4807      	ldr	r0, [pc, #28]	; (8001610 <MX_TIM1_Init+0x198>)
 80015f2:	f004 fc41 	bl	8005e78 <HAL_TIMEx_ConfigBreakDeadTime>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 80015fc:	f000 fa48 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001600:	4803      	ldr	r0, [pc, #12]	; (8001610 <MX_TIM1_Init+0x198>)
 8001602:	f000 fa9f 	bl	8001b44 <HAL_TIM_MspPostInit>

}
 8001606:	bf00      	nop
 8001608:	3768      	adds	r7, #104	; 0x68
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	24000228 	.word	0x24000228
 8001614:	40010000 	.word	0x40010000

08001618 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b09a      	sub	sp, #104	; 0x68
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001638:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
 8001648:	615a      	str	r2, [r3, #20]
 800164a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	222c      	movs	r2, #44	; 0x2c
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f005 fe84 	bl	8007360 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001658:	4b55      	ldr	r3, [pc, #340]	; (80017b0 <MX_TIM8_Init+0x198>)
 800165a:	4a56      	ldr	r2, [pc, #344]	; (80017b4 <MX_TIM8_Init+0x19c>)
 800165c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 800165e:	4b54      	ldr	r3, [pc, #336]	; (80017b0 <MX_TIM8_Init+0x198>)
 8001660:	223f      	movs	r2, #63	; 0x3f
 8001662:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001664:	4b52      	ldr	r3, [pc, #328]	; (80017b0 <MX_TIM8_Init+0x198>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 800166a:	4b51      	ldr	r3, [pc, #324]	; (80017b0 <MX_TIM8_Init+0x198>)
 800166c:	2263      	movs	r2, #99	; 0x63
 800166e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001670:	4b4f      	ldr	r3, [pc, #316]	; (80017b0 <MX_TIM8_Init+0x198>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001676:	4b4e      	ldr	r3, [pc, #312]	; (80017b0 <MX_TIM8_Init+0x198>)
 8001678:	2200      	movs	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167c:	4b4c      	ldr	r3, [pc, #304]	; (80017b0 <MX_TIM8_Init+0x198>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001682:	484b      	ldr	r0, [pc, #300]	; (80017b0 <MX_TIM8_Init+0x198>)
 8001684:	f003 fb64 	bl	8004d50 <HAL_TIM_Base_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800168e:	f000 f9ff 	bl	8001a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001696:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001698:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800169c:	4619      	mov	r1, r3
 800169e:	4844      	ldr	r0, [pc, #272]	; (80017b0 <MX_TIM8_Init+0x198>)
 80016a0:	f003 fe30 	bl	8005304 <HAL_TIM_ConfigClockSource>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80016aa:	f000 f9f1 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016ae:	4840      	ldr	r0, [pc, #256]	; (80017b0 <MX_TIM8_Init+0x198>)
 80016b0:	f003 fba5 	bl	8004dfe <HAL_TIM_PWM_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80016ba:	f000 f9e9 	bl	8001a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016ce:	4619      	mov	r1, r3
 80016d0:	4837      	ldr	r0, [pc, #220]	; (80017b0 <MX_TIM8_Init+0x198>)
 80016d2:	f004 fb43 	bl	8005d5c <HAL_TIMEx_MasterConfigSynchronization>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 80016dc:	f000 f9d8 	bl	8001a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e0:	2360      	movs	r3, #96	; 0x60
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e8:	2300      	movs	r3, #0
 80016ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016ec:	2300      	movs	r3, #0
 80016ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016f4:	2300      	movs	r3, #0
 80016f6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001700:	2200      	movs	r2, #0
 8001702:	4619      	mov	r1, r3
 8001704:	482a      	ldr	r0, [pc, #168]	; (80017b0 <MX_TIM8_Init+0x198>)
 8001706:	f003 fce9 	bl	80050dc <HAL_TIM_PWM_ConfigChannel>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8001710:	f000 f9be 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001714:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001718:	2204      	movs	r2, #4
 800171a:	4619      	mov	r1, r3
 800171c:	4824      	ldr	r0, [pc, #144]	; (80017b0 <MX_TIM8_Init+0x198>)
 800171e:	f003 fcdd 	bl	80050dc <HAL_TIM_PWM_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8001728:	f000 f9b2 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800172c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001730:	2208      	movs	r2, #8
 8001732:	4619      	mov	r1, r3
 8001734:	481e      	ldr	r0, [pc, #120]	; (80017b0 <MX_TIM8_Init+0x198>)
 8001736:	f003 fcd1 	bl	80050dc <HAL_TIM_PWM_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8001740:	f000 f9a6 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001744:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001748:	220c      	movs	r2, #12
 800174a:	4619      	mov	r1, r3
 800174c:	4818      	ldr	r0, [pc, #96]	; (80017b0 <MX_TIM8_Init+0x198>)
 800174e:	f003 fcc5 	bl	80050dc <HAL_TIM_PWM_ConfigChannel>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8001758:	f000 f99a 	bl	8001a90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001774:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800177e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	4619      	mov	r1, r3
 8001790:	4807      	ldr	r0, [pc, #28]	; (80017b0 <MX_TIM8_Init+0x198>)
 8001792:	f004 fb71 	bl	8005e78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM8_Init+0x188>
  {
    Error_Handler();
 800179c:	f000 f978 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80017a0:	4803      	ldr	r0, [pc, #12]	; (80017b0 <MX_TIM8_Init+0x198>)
 80017a2:	f000 f9cf 	bl	8001b44 <HAL_TIM_MspPostInit>

}
 80017a6:	bf00      	nop
 80017a8:	3768      	adds	r7, #104	; 0x68
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	240000b0 	.word	0x240000b0
 80017b4:	40010400 	.word	0x40010400

080017b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017bc:	4b22      	ldr	r3, [pc, #136]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017be:	4a23      	ldr	r2, [pc, #140]	; (800184c <MX_USART1_UART_Init+0x94>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b19      	ldr	r3, [pc, #100]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001800:	4811      	ldr	r0, [pc, #68]	; (8001848 <MX_USART1_UART_Init+0x90>)
 8001802:	f004 fbb7 	bl	8005f74 <HAL_UART_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800180c:	f000 f940 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001810:	2100      	movs	r1, #0
 8001812:	480d      	ldr	r0, [pc, #52]	; (8001848 <MX_USART1_UART_Init+0x90>)
 8001814:	f005 fcb6 	bl	8007184 <HAL_UARTEx_SetTxFifoThreshold>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800181e:	f000 f937 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001822:	2100      	movs	r1, #0
 8001824:	4808      	ldr	r0, [pc, #32]	; (8001848 <MX_USART1_UART_Init+0x90>)
 8001826:	f005 fceb 	bl	8007200 <HAL_UARTEx_SetRxFifoThreshold>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001830:	f000 f92e 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <MX_USART1_UART_Init+0x90>)
 8001836:	f005 fc6c 	bl	8007112 <HAL_UARTEx_DisableFifoMode>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001840:	f000 f926 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	24000198 	.word	0x24000198
 800184c:	40011000 	.word	0x40011000

08001850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001854:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <MX_USART2_UART_Init+0x90>)
 8001856:	4a23      	ldr	r2, [pc, #140]	; (80018e4 <MX_USART2_UART_Init+0x94>)
 8001858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <MX_USART2_UART_Init+0x90>)
 800185c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001862:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <MX_USART2_UART_Init+0x90>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <MX_USART2_UART_Init+0x90>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <MX_USART2_UART_Init+0x90>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_USART2_UART_Init+0x90>)
 8001876:	220c      	movs	r2, #12
 8001878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <MX_USART2_UART_Init+0x90>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <MX_USART2_UART_Init+0x90>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <MX_USART2_UART_Init+0x90>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_USART2_UART_Init+0x90>)
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <MX_USART2_UART_Init+0x90>)
 8001894:	2200      	movs	r2, #0
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001898:	4811      	ldr	r0, [pc, #68]	; (80018e0 <MX_USART2_UART_Init+0x90>)
 800189a:	f004 fb6b 	bl	8005f74 <HAL_UART_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80018a4:	f000 f8f4 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a8:	2100      	movs	r1, #0
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <MX_USART2_UART_Init+0x90>)
 80018ac:	f005 fc6a 	bl	8007184 <HAL_UARTEx_SetTxFifoThreshold>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80018b6:	f000 f8eb 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ba:	2100      	movs	r1, #0
 80018bc:	4808      	ldr	r0, [pc, #32]	; (80018e0 <MX_USART2_UART_Init+0x90>)
 80018be:	f005 fc9f 	bl	8007200 <HAL_UARTEx_SetRxFifoThreshold>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80018c8:	f000 f8e2 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <MX_USART2_UART_Init+0x90>)
 80018ce:	f005 fc20 	bl	8007112 <HAL_UARTEx_DisableFifoMode>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80018d8:	f000 f8da 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	24000274 	.word	0x24000274
 80018e4:	40004400 	.word	0x40004400

080018e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018ec:	4b22      	ldr	r3, [pc, #136]	; (8001978 <MX_USART3_UART_Init+0x90>)
 80018ee:	4a23      	ldr	r2, [pc, #140]	; (800197c <MX_USART3_UART_Init+0x94>)
 80018f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80018f2:	4b21      	ldr	r3, [pc, #132]	; (8001978 <MX_USART3_UART_Init+0x90>)
 80018f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <MX_USART3_UART_Init+0x90>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <MX_USART3_UART_Init+0x90>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <MX_USART3_UART_Init+0x90>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <MX_USART3_UART_Init+0x90>)
 800190e:	220c      	movs	r2, #12
 8001910:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <MX_USART3_UART_Init+0x90>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <MX_USART3_UART_Init+0x90>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <MX_USART3_UART_Init+0x90>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <MX_USART3_UART_Init+0x90>)
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <MX_USART3_UART_Init+0x90>)
 800192c:	2200      	movs	r2, #0
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001930:	4811      	ldr	r0, [pc, #68]	; (8001978 <MX_USART3_UART_Init+0x90>)
 8001932:	f004 fb1f 	bl	8005f74 <HAL_UART_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800193c:	f000 f8a8 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001940:	2100      	movs	r1, #0
 8001942:	480d      	ldr	r0, [pc, #52]	; (8001978 <MX_USART3_UART_Init+0x90>)
 8001944:	f005 fc1e 	bl	8007184 <HAL_UARTEx_SetTxFifoThreshold>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800194e:	f000 f89f 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001952:	2100      	movs	r1, #0
 8001954:	4808      	ldr	r0, [pc, #32]	; (8001978 <MX_USART3_UART_Init+0x90>)
 8001956:	f005 fc53 	bl	8007200 <HAL_UARTEx_SetRxFifoThreshold>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001960:	f000 f896 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <MX_USART3_UART_Init+0x90>)
 8001966:	f005 fbd4 	bl	8007112 <HAL_UARTEx_DisableFifoMode>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001970:	f000 f88e 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	240000fc 	.word	0x240000fc
 800197c:	40004800 	.word	0x40004800

08001980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001996:	4b3a      	ldr	r3, [pc, #232]	; (8001a80 <MX_GPIO_Init+0x100>)
 8001998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199c:	4a38      	ldr	r2, [pc, #224]	; (8001a80 <MX_GPIO_Init+0x100>)
 800199e:	f043 0310 	orr.w	r3, r3, #16
 80019a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019a6:	4b36      	ldr	r3, [pc, #216]	; (8001a80 <MX_GPIO_Init+0x100>)
 80019a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ac:	f003 0310 	and.w	r3, r3, #16
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b4:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <MX_GPIO_Init+0x100>)
 80019b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ba:	4a31      	ldr	r2, [pc, #196]	; (8001a80 <MX_GPIO_Init+0x100>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019c4:	4b2e      	ldr	r3, [pc, #184]	; (8001a80 <MX_GPIO_Init+0x100>)
 80019c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <MX_GPIO_Init+0x100>)
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d8:	4a29      	ldr	r2, [pc, #164]	; (8001a80 <MX_GPIO_Init+0x100>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e2:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <MX_GPIO_Init+0x100>)
 80019e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f0:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <MX_GPIO_Init+0x100>)
 80019f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f6:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <MX_GPIO_Init+0x100>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a00:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <MX_GPIO_Init+0x100>)
 8001a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <MX_GPIO_Init+0x100>)
 8001a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a14:	4a1a      	ldr	r2, [pc, #104]	; (8001a80 <MX_GPIO_Init+0x100>)
 8001a16:	f043 0308 	orr.w	r3, r3, #8
 8001a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <MX_GPIO_Init+0x100>)
 8001a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a2c:	2320      	movs	r3, #32
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4811      	ldr	r0, [pc, #68]	; (8001a84 <MX_GPIO_Init+0x104>)
 8001a40:	f000 fc6a 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4619      	mov	r1, r3
 8001a58:	480b      	ldr	r0, [pc, #44]	; (8001a88 <MX_GPIO_Init+0x108>)
 8001a5a:	f000 fc5d 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4619      	mov	r1, r3
 8001a72:	4806      	ldr	r0, [pc, #24]	; (8001a8c <MX_GPIO_Init+0x10c>)
 8001a74:	f000 fc50 	bl	8002318 <HAL_GPIO_Init>

}
 8001a78:	bf00      	nop
 8001a7a:	3728      	adds	r7, #40	; 0x28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	58024400 	.word	0x58024400
 8001a84:	58021000 	.word	0x58021000
 8001a88:	58020800 	.word	0x58020800
 8001a8c:	58020400 	.word	0x58020400

08001a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a94:	b672      	cpsid	i
}
 8001a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <Error_Handler+0x8>
	...

08001a9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_MspInit+0x30>)
 8001aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001aa8:	4a08      	ldr	r2, [pc, #32]	; (8001acc <HAL_MspInit+0x30>)
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_MspInit+0x30>)
 8001ab4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	58024400 	.word	0x58024400

08001ad0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a16      	ldr	r2, [pc, #88]	; (8001b38 <HAL_TIM_Base_MspInit+0x68>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d10f      	bne.n	8001b02 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_TIM_Base_MspInit+0x6c>)
 8001ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ae8:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <HAL_TIM_Base_MspInit+0x6c>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_TIM_Base_MspInit+0x6c>)
 8001af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001b00:	e013      	b.n	8001b2a <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM8)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_TIM_Base_MspInit+0x70>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d10e      	bne.n	8001b2a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_TIM_Base_MspInit+0x6c>)
 8001b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <HAL_TIM_Base_MspInit+0x6c>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b1c:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <HAL_TIM_Base_MspInit+0x6c>)
 8001b1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
}
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40010000 	.word	0x40010000
 8001b3c:	58024400 	.word	0x58024400
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a26      	ldr	r2, [pc, #152]	; (8001bfc <HAL_TIM_MspPostInit+0xb8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d120      	bne.n	8001ba8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b66:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <HAL_TIM_MspPostInit+0xbc>)
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6c:	4a24      	ldr	r2, [pc, #144]	; (8001c00 <HAL_TIM_MspPostInit+0xbc>)
 8001b6e:	f043 0310 	orr.w	r3, r3, #16
 8001b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b76:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <HAL_TIM_MspPostInit+0xbc>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001b84:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b96:	2301      	movs	r3, #1
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4818      	ldr	r0, [pc, #96]	; (8001c04 <HAL_TIM_MspPostInit+0xc0>)
 8001ba2:	f000 fbb9 	bl	8002318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001ba6:	e024      	b.n	8001bf2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM8)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <HAL_TIM_MspPostInit+0xc4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d11f      	bne.n	8001bf2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <HAL_TIM_MspPostInit+0xbc>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb8:	4a11      	ldr	r2, [pc, #68]	; (8001c00 <HAL_TIM_MspPostInit+0xbc>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <HAL_TIM_MspPostInit+0xbc>)
 8001bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001bd0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001be2:	2303      	movs	r3, #3
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	4807      	ldr	r0, [pc, #28]	; (8001c0c <HAL_TIM_MspPostInit+0xc8>)
 8001bee:	f000 fb93 	bl	8002318 <HAL_GPIO_Init>
}
 8001bf2:	bf00      	nop
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40010000 	.word	0x40010000
 8001c00:	58024400 	.word	0x58024400
 8001c04:	58021000 	.word	0x58021000
 8001c08:	40010400 	.word	0x40010400
 8001c0c:	58020800 	.word	0x58020800

08001c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b0bc      	sub	sp, #240	; 0xf0
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c28:	f107 0320 	add.w	r3, r7, #32
 8001c2c:	22bc      	movs	r2, #188	; 0xbc
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f005 fb95 	bl	8007360 <memset>
  if(huart->Instance==USART1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a6d      	ldr	r2, [pc, #436]	; (8001df0 <HAL_UART_MspInit+0x1e0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d143      	bne.n	8001cc8 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c40:	2301      	movs	r3, #1
 8001c42:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c4a:	f107 0320 	add.w	r3, r7, #32
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f001 fd1c 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c5a:	f7ff ff19 	bl	8001a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c5e:	4b65      	ldr	r3, [pc, #404]	; (8001df4 <HAL_UART_MspInit+0x1e4>)
 8001c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c64:	4a63      	ldr	r2, [pc, #396]	; (8001df4 <HAL_UART_MspInit+0x1e4>)
 8001c66:	f043 0310 	orr.w	r3, r3, #16
 8001c6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c6e:	4b61      	ldr	r3, [pc, #388]	; (8001df4 <HAL_UART_MspInit+0x1e4>)
 8001c70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c74:	f003 0310 	and.w	r3, r3, #16
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7c:	4b5d      	ldr	r3, [pc, #372]	; (8001df4 <HAL_UART_MspInit+0x1e4>)
 8001c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c82:	4a5c      	ldr	r2, [pc, #368]	; (8001df4 <HAL_UART_MspInit+0x1e4>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8c:	4b59      	ldr	r3, [pc, #356]	; (8001df4 <HAL_UART_MspInit+0x1e4>)
 8001c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c9a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cba:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	484d      	ldr	r0, [pc, #308]	; (8001df8 <HAL_UART_MspInit+0x1e8>)
 8001cc2:	f000 fb29 	bl	8002318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cc6:	e08f      	b.n	8001de8 <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a4b      	ldr	r2, [pc, #300]	; (8001dfc <HAL_UART_MspInit+0x1ec>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d142      	bne.n	8001d58 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cdc:	f107 0320 	add.w	r3, r7, #32
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f001 fcd3 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001cec:	f7ff fed0 	bl	8001a90 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cf0:	4b40      	ldr	r3, [pc, #256]	; (8001df4 <HAL_UART_MspInit+0x1e4>)
 8001cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cf6:	4a3f      	ldr	r2, [pc, #252]	; (8001df4 <HAL_UART_MspInit+0x1e4>)
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d00:	4b3c      	ldr	r3, [pc, #240]	; (8001df4 <HAL_UART_MspInit+0x1e4>)
 8001d02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <HAL_UART_MspInit+0x1e4>)
 8001d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d14:	4a37      	ldr	r2, [pc, #220]	; (8001df4 <HAL_UART_MspInit+0x1e4>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d1e:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <HAL_UART_MspInit+0x1e4>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d2c:	230c      	movs	r3, #12
 8001d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d44:	2307      	movs	r3, #7
 8001d46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d4e:	4619      	mov	r1, r3
 8001d50:	482b      	ldr	r0, [pc, #172]	; (8001e00 <HAL_UART_MspInit+0x1f0>)
 8001d52:	f000 fae1 	bl	8002318 <HAL_GPIO_Init>
}
 8001d56:	e047      	b.n	8001de8 <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART3)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a29      	ldr	r2, [pc, #164]	; (8001e04 <HAL_UART_MspInit+0x1f4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d142      	bne.n	8001de8 <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d62:	2302      	movs	r3, #2
 8001d64:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d6c:	f107 0320 	add.w	r3, r7, #32
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 fc8b 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8001d7c:	f7ff fe88 	bl	8001a90 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d80:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <HAL_UART_MspInit+0x1e4>)
 8001d82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d86:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <HAL_UART_MspInit+0x1e4>)
 8001d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <HAL_UART_MspInit+0x1e4>)
 8001d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <HAL_UART_MspInit+0x1e4>)
 8001da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da4:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <HAL_UART_MspInit+0x1e4>)
 8001da6:	f043 0308 	orr.w	r3, r3, #8
 8001daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_UART_MspInit+0x1e4>)
 8001db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dbc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dd6:	2307      	movs	r3, #7
 8001dd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ddc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001de0:	4619      	mov	r1, r3
 8001de2:	4809      	ldr	r0, [pc, #36]	; (8001e08 <HAL_UART_MspInit+0x1f8>)
 8001de4:	f000 fa98 	bl	8002318 <HAL_GPIO_Init>
}
 8001de8:	bf00      	nop
 8001dea:	37f0      	adds	r7, #240	; 0xf0
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40011000 	.word	0x40011000
 8001df4:	58024400 	.word	0x58024400
 8001df8:	58020400 	.word	0x58020400
 8001dfc:	40004400 	.word	0x40004400
 8001e00:	58020000 	.word	0x58020000
 8001e04:	40004800 	.word	0x40004800
 8001e08:	58020c00 	.word	0x58020c00

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <NMI_Handler+0x4>

08001e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <HardFault_Handler+0x4>

08001e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <MemManage_Handler+0x4>

08001e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <BusFault_Handler+0x4>

08001e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <UsageFault_Handler+0x4>

08001e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e58:	f000 f92a 	bl	80020b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e64:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <SystemInit+0xec>)
 8001e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6a:	4a38      	ldr	r2, [pc, #224]	; (8001f4c <SystemInit+0xec>)
 8001e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e74:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <SystemInit+0xf0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 030f 	and.w	r3, r3, #15
 8001e7c:	2b06      	cmp	r3, #6
 8001e7e:	d807      	bhi.n	8001e90 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e80:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <SystemInit+0xf0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f023 030f 	bic.w	r3, r3, #15
 8001e88:	4a31      	ldr	r2, [pc, #196]	; (8001f50 <SystemInit+0xf0>)
 8001e8a:	f043 0307 	orr.w	r3, r3, #7
 8001e8e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e90:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <SystemInit+0xf4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a2f      	ldr	r2, [pc, #188]	; (8001f54 <SystemInit+0xf4>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e9c:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <SystemInit+0xf4>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ea2:	4b2c      	ldr	r3, [pc, #176]	; (8001f54 <SystemInit+0xf4>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	492b      	ldr	r1, [pc, #172]	; (8001f54 <SystemInit+0xf4>)
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <SystemInit+0xf8>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001eae:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <SystemInit+0xf0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001eba:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <SystemInit+0xf0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 030f 	bic.w	r3, r3, #15
 8001ec2:	4a23      	ldr	r2, [pc, #140]	; (8001f50 <SystemInit+0xf0>)
 8001ec4:	f043 0307 	orr.w	r3, r3, #7
 8001ec8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <SystemInit+0xf4>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ed0:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <SystemInit+0xf4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <SystemInit+0xf4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001edc:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <SystemInit+0xf4>)
 8001ede:	4a1f      	ldr	r2, [pc, #124]	; (8001f5c <SystemInit+0xfc>)
 8001ee0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <SystemInit+0xf4>)
 8001ee4:	4a1e      	ldr	r2, [pc, #120]	; (8001f60 <SystemInit+0x100>)
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <SystemInit+0xf4>)
 8001eea:	4a1e      	ldr	r2, [pc, #120]	; (8001f64 <SystemInit+0x104>)
 8001eec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001eee:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <SystemInit+0xf4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <SystemInit+0xf4>)
 8001ef6:	4a1b      	ldr	r2, [pc, #108]	; (8001f64 <SystemInit+0x104>)
 8001ef8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001efa:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <SystemInit+0xf4>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f00:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <SystemInit+0xf4>)
 8001f02:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <SystemInit+0x104>)
 8001f04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f06:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <SystemInit+0xf4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <SystemInit+0xf4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a10      	ldr	r2, [pc, #64]	; (8001f54 <SystemInit+0xf4>)
 8001f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <SystemInit+0xf4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <SystemInit+0x108>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <SystemInit+0x10c>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f2a:	d202      	bcs.n	8001f32 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001f2c:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <SystemInit+0x110>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <SystemInit+0x114>)
 8001f34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f38:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f3a:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <SystemInit+0xec>)
 8001f3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f40:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00
 8001f50:	52002000 	.word	0x52002000
 8001f54:	58024400 	.word	0x58024400
 8001f58:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f5c:	02020200 	.word	0x02020200
 8001f60:	01ff0000 	.word	0x01ff0000
 8001f64:	01010280 	.word	0x01010280
 8001f68:	5c001000 	.word	0x5c001000
 8001f6c:	ffff0000 	.word	0xffff0000
 8001f70:	51008108 	.word	0x51008108
 8001f74:	52004000 	.word	0x52004000

08001f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f7c:	f7ff ff70 	bl	8001e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f82:	e003      	b.n	8001f8c <LoopCopyDataInit>

08001f84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001f86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f8a:	3104      	adds	r1, #4

08001f8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f8c:	480a      	ldr	r0, [pc, #40]	; (8001fb8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001f90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f94:	d3f6      	bcc.n	8001f84 <CopyDataInit>
  ldr  r2, =_sbss
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001f98:	e002      	b.n	8001fa0 <LoopFillZerobss>

08001f9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f9c:	f842 3b04 	str.w	r3, [r2], #4

08001fa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001fa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fa4:	d3f9      	bcc.n	8001f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fa6:	f005 f9b7 	bl	8007318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001faa:	f7ff f9bf 	bl	800132c <main>
  bx  lr    
 8001fae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fb0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001fb4:	080073d0 	.word	0x080073d0
  ldr  r0, =_sdata
 8001fb8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001fbc:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 8001fc0:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 8001fc4:	24000308 	.word	0x24000308

08001fc8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <ADC3_IRQHandler>
	...

08001fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd2:	2003      	movs	r0, #3
 8001fd4:	f000 f96e 	bl	80022b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fd8:	f001 f982 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <HAL_Init+0x68>)
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	0a1b      	lsrs	r3, r3, #8
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	4913      	ldr	r1, [pc, #76]	; (8002038 <HAL_Init+0x6c>)
 8001fea:	5ccb      	ldrb	r3, [r1, r3]
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <HAL_Init+0x68>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <HAL_Init+0x6c>)
 8002000:	5cd3      	ldrb	r3, [r2, r3]
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
 800200c:	4a0b      	ldr	r2, [pc, #44]	; (800203c <HAL_Init+0x70>)
 800200e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002010:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <HAL_Init+0x74>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002016:	2000      	movs	r0, #0
 8002018:	f000 f814 	bl	8002044 <HAL_InitTick>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e002      	b.n	800202c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002026:	f7ff fd39 	bl	8001a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	58024400 	.word	0x58024400
 8002038:	08007388 	.word	0x08007388
 800203c:	2400006c 	.word	0x2400006c
 8002040:	24000068 	.word	0x24000068

08002044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_InitTick+0x60>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e021      	b.n	800209c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <HAL_InitTick+0x64>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_InitTick+0x60>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4619      	mov	r1, r3
 8002062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002066:	fbb3 f3f1 	udiv	r3, r3, r1
 800206a:	fbb2 f3f3 	udiv	r3, r2, r3
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f945 	bl	80022fe <HAL_SYSTICK_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e00e      	b.n	800209c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	d80a      	bhi.n	800209a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002084:	2200      	movs	r2, #0
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f000 f91d 	bl	80022ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002090:	4a06      	ldr	r2, [pc, #24]	; (80020ac <HAL_InitTick+0x68>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	24000074 	.word	0x24000074
 80020a8:	24000068 	.word	0x24000068
 80020ac:	24000070 	.word	0x24000070

080020b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_IncTick+0x20>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_IncTick+0x24>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <HAL_IncTick+0x24>)
 80020c2:	6013      	str	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	24000074 	.word	0x24000074
 80020d4:	24000304 	.word	0x24000304

080020d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return uwTick;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <HAL_GetTick+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	24000304 	.word	0x24000304

080020f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f8:	f7ff ffee 	bl	80020d8 <HAL_GetTick>
 80020fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d005      	beq.n	8002116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <HAL_Delay+0x44>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002116:	bf00      	nop
 8002118:	f7ff ffde 	bl	80020d8 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	429a      	cmp	r2, r3
 8002126:	d8f7      	bhi.n	8002118 <HAL_Delay+0x28>
  {
  }
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	24000074 	.word	0x24000074

08002138 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <HAL_GetREVID+0x14>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	0c1b      	lsrs	r3, r3, #16
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	5c001000 	.word	0x5c001000

08002150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <__NVIC_SetPriorityGrouping+0x40>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800216c:	4013      	ands	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 800217a:	4313      	orrs	r3, r2
 800217c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217e:	4a04      	ldr	r2, [pc, #16]	; (8002190 <__NVIC_SetPriorityGrouping+0x40>)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	60d3      	str	r3, [r2, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00
 8002194:	05fa0000 	.word	0x05fa0000

08002198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <__NVIC_GetPriorityGrouping+0x18>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	f003 0307 	and.w	r3, r3, #7
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db0a      	blt.n	80021de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	490c      	ldr	r1, [pc, #48]	; (8002200 <__NVIC_SetPriority+0x4c>)
 80021ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	440b      	add	r3, r1
 80021d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021dc:	e00a      	b.n	80021f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4908      	ldr	r1, [pc, #32]	; (8002204 <__NVIC_SetPriority+0x50>)
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	3b04      	subs	r3, #4
 80021ec:	0112      	lsls	r2, r2, #4
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	440b      	add	r3, r1
 80021f2:	761a      	strb	r2, [r3, #24]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f1c3 0307 	rsb	r3, r3, #7
 8002222:	2b04      	cmp	r3, #4
 8002224:	bf28      	it	cs
 8002226:	2304      	movcs	r3, #4
 8002228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3304      	adds	r3, #4
 800222e:	2b06      	cmp	r3, #6
 8002230:	d902      	bls.n	8002238 <NVIC_EncodePriority+0x30>
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3b03      	subs	r3, #3
 8002236:	e000      	b.n	800223a <NVIC_EncodePriority+0x32>
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	f04f 32ff 	mov.w	r2, #4294967295
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43da      	mvns	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	401a      	ands	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002250:	f04f 31ff 	mov.w	r1, #4294967295
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43d9      	mvns	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	4313      	orrs	r3, r2
         );
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	; 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002280:	d301      	bcc.n	8002286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002282:	2301      	movs	r3, #1
 8002284:	e00f      	b.n	80022a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <SysTick_Config+0x40>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228e:	210f      	movs	r1, #15
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
 8002294:	f7ff ff8e 	bl	80021b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <SysTick_Config+0x40>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <SysTick_Config+0x40>)
 80022a0:	2207      	movs	r2, #7
 80022a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	e000e010 	.word	0xe000e010

080022b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff47 	bl	8002150 <__NVIC_SetPriorityGrouping>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022d8:	f7ff ff5e 	bl	8002198 <__NVIC_GetPriorityGrouping>
 80022dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	6978      	ldr	r0, [r7, #20]
 80022e4:	f7ff ff90 	bl	8002208 <NVIC_EncodePriority>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff5f 	bl	80021b4 <__NVIC_SetPriority>
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff ffb2 	bl	8002270 <SysTick_Config>
 800230c:	4603      	mov	r3, r0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	; 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002326:	4b89      	ldr	r3, [pc, #548]	; (800254c <HAL_GPIO_Init+0x234>)
 8002328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800232a:	e194      	b.n	8002656 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2101      	movs	r1, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 8186 	beq.w	8002650 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d005      	beq.n	800235c <HAL_GPIO_Init+0x44>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d130      	bne.n	80023be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002392:	2201      	movs	r2, #1
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	f003 0201 	and.w	r2, r3, #1
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d017      	beq.n	80023fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	2203      	movs	r2, #3
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d123      	bne.n	800244e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	08da      	lsrs	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3208      	adds	r2, #8
 800240e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	220f      	movs	r2, #15
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	08da      	lsrs	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3208      	adds	r2, #8
 8002448:	69b9      	ldr	r1, [r7, #24]
 800244a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0203 	and.w	r2, r3, #3
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80e0 	beq.w	8002650 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002490:	4b2f      	ldr	r3, [pc, #188]	; (8002550 <HAL_GPIO_Init+0x238>)
 8002492:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002496:	4a2e      	ldr	r2, [pc, #184]	; (8002550 <HAL_GPIO_Init+0x238>)
 8002498:	f043 0302 	orr.w	r3, r3, #2
 800249c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80024a0:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <HAL_GPIO_Init+0x238>)
 80024a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ae:	4a29      	ldr	r2, [pc, #164]	; (8002554 <HAL_GPIO_Init+0x23c>)
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	089b      	lsrs	r3, r3, #2
 80024b4:	3302      	adds	r3, #2
 80024b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	220f      	movs	r2, #15
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a20      	ldr	r2, [pc, #128]	; (8002558 <HAL_GPIO_Init+0x240>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d052      	beq.n	8002580 <HAL_GPIO_Init+0x268>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a1f      	ldr	r2, [pc, #124]	; (800255c <HAL_GPIO_Init+0x244>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d031      	beq.n	8002546 <HAL_GPIO_Init+0x22e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a1e      	ldr	r2, [pc, #120]	; (8002560 <HAL_GPIO_Init+0x248>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d02b      	beq.n	8002542 <HAL_GPIO_Init+0x22a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <HAL_GPIO_Init+0x24c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d025      	beq.n	800253e <HAL_GPIO_Init+0x226>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <HAL_GPIO_Init+0x250>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d01f      	beq.n	800253a <HAL_GPIO_Init+0x222>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a1b      	ldr	r2, [pc, #108]	; (800256c <HAL_GPIO_Init+0x254>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d019      	beq.n	8002536 <HAL_GPIO_Init+0x21e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a1a      	ldr	r2, [pc, #104]	; (8002570 <HAL_GPIO_Init+0x258>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d013      	beq.n	8002532 <HAL_GPIO_Init+0x21a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a19      	ldr	r2, [pc, #100]	; (8002574 <HAL_GPIO_Init+0x25c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00d      	beq.n	800252e <HAL_GPIO_Init+0x216>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a18      	ldr	r2, [pc, #96]	; (8002578 <HAL_GPIO_Init+0x260>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d007      	beq.n	800252a <HAL_GPIO_Init+0x212>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a17      	ldr	r2, [pc, #92]	; (800257c <HAL_GPIO_Init+0x264>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d101      	bne.n	8002526 <HAL_GPIO_Init+0x20e>
 8002522:	2309      	movs	r3, #9
 8002524:	e02d      	b.n	8002582 <HAL_GPIO_Init+0x26a>
 8002526:	230a      	movs	r3, #10
 8002528:	e02b      	b.n	8002582 <HAL_GPIO_Init+0x26a>
 800252a:	2308      	movs	r3, #8
 800252c:	e029      	b.n	8002582 <HAL_GPIO_Init+0x26a>
 800252e:	2307      	movs	r3, #7
 8002530:	e027      	b.n	8002582 <HAL_GPIO_Init+0x26a>
 8002532:	2306      	movs	r3, #6
 8002534:	e025      	b.n	8002582 <HAL_GPIO_Init+0x26a>
 8002536:	2305      	movs	r3, #5
 8002538:	e023      	b.n	8002582 <HAL_GPIO_Init+0x26a>
 800253a:	2304      	movs	r3, #4
 800253c:	e021      	b.n	8002582 <HAL_GPIO_Init+0x26a>
 800253e:	2303      	movs	r3, #3
 8002540:	e01f      	b.n	8002582 <HAL_GPIO_Init+0x26a>
 8002542:	2302      	movs	r3, #2
 8002544:	e01d      	b.n	8002582 <HAL_GPIO_Init+0x26a>
 8002546:	2301      	movs	r3, #1
 8002548:	e01b      	b.n	8002582 <HAL_GPIO_Init+0x26a>
 800254a:	bf00      	nop
 800254c:	58000080 	.word	0x58000080
 8002550:	58024400 	.word	0x58024400
 8002554:	58000400 	.word	0x58000400
 8002558:	58020000 	.word	0x58020000
 800255c:	58020400 	.word	0x58020400
 8002560:	58020800 	.word	0x58020800
 8002564:	58020c00 	.word	0x58020c00
 8002568:	58021000 	.word	0x58021000
 800256c:	58021400 	.word	0x58021400
 8002570:	58021800 	.word	0x58021800
 8002574:	58021c00 	.word	0x58021c00
 8002578:	58022000 	.word	0x58022000
 800257c:	58022400 	.word	0x58022400
 8002580:	2300      	movs	r3, #0
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	f002 0203 	and.w	r2, r2, #3
 8002588:	0092      	lsls	r2, r2, #2
 800258a:	4093      	lsls	r3, r2
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002592:	4938      	ldr	r1, [pc, #224]	; (8002674 <HAL_GPIO_Init+0x35c>)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	089b      	lsrs	r3, r3, #2
 8002598:	3302      	adds	r3, #2
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80025c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80025ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80025f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	3301      	adds	r3, #1
 8002654:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	f47f ae63 	bne.w	800232c <HAL_GPIO_Init+0x14>
  }
}
 8002666:	bf00      	nop
 8002668:	bf00      	nop
 800266a:	3724      	adds	r7, #36	; 0x24
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	58000400 	.word	0x58000400

08002678 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	887b      	ldrh	r3, [r7, #2]
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002690:	2301      	movs	r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
 8002694:	e001      	b.n	800269a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002696:	2300      	movs	r3, #0
 8002698:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80026b0:	4b19      	ldr	r3, [pc, #100]	; (8002718 <HAL_PWREx_ConfigSupply+0x70>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d00a      	beq.n	80026d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80026bc:	4b16      	ldr	r3, [pc, #88]	; (8002718 <HAL_PWREx_ConfigSupply+0x70>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d001      	beq.n	80026ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e01f      	b.n	800270e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e01d      	b.n	800270e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <HAL_PWREx_ConfigSupply+0x70>)
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f023 0207 	bic.w	r2, r3, #7
 80026da:	490f      	ldr	r1, [pc, #60]	; (8002718 <HAL_PWREx_ConfigSupply+0x70>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80026e2:	f7ff fcf9 	bl	80020d8 <HAL_GetTick>
 80026e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026e8:	e009      	b.n	80026fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026ea:	f7ff fcf5 	bl	80020d8 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026f8:	d901      	bls.n	80026fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e007      	b.n	800270e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_PWREx_ConfigSupply+0x70>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800270a:	d1ee      	bne.n	80026ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	58024800 	.word	0x58024800

0800271c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08c      	sub	sp, #48	; 0x30
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d102      	bne.n	8002730 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	f000 bc1c 	b.w	8002f68 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8087 	beq.w	800284c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800273e:	4b9e      	ldr	r3, [pc, #632]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002748:	4b9b      	ldr	r3, [pc, #620]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002750:	2b10      	cmp	r3, #16
 8002752:	d007      	beq.n	8002764 <HAL_RCC_OscConfig+0x48>
 8002754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002756:	2b18      	cmp	r3, #24
 8002758:	d110      	bne.n	800277c <HAL_RCC_OscConfig+0x60>
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d10b      	bne.n	800277c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	4b94      	ldr	r3, [pc, #592]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d06c      	beq.n	800284a <HAL_RCC_OscConfig+0x12e>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d168      	bne.n	800284a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e3f5      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002784:	d106      	bne.n	8002794 <HAL_RCC_OscConfig+0x78>
 8002786:	4b8c      	ldr	r3, [pc, #560]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a8b      	ldr	r2, [pc, #556]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e02e      	b.n	80027f2 <HAL_RCC_OscConfig+0xd6>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10c      	bne.n	80027b6 <HAL_RCC_OscConfig+0x9a>
 800279c:	4b86      	ldr	r3, [pc, #536]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a85      	ldr	r2, [pc, #532]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 80027a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b83      	ldr	r3, [pc, #524]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a82      	ldr	r2, [pc, #520]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 80027ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	e01d      	b.n	80027f2 <HAL_RCC_OscConfig+0xd6>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027be:	d10c      	bne.n	80027da <HAL_RCC_OscConfig+0xbe>
 80027c0:	4b7d      	ldr	r3, [pc, #500]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a7c      	ldr	r2, [pc, #496]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 80027c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b7a      	ldr	r3, [pc, #488]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a79      	ldr	r2, [pc, #484]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 80027d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	e00b      	b.n	80027f2 <HAL_RCC_OscConfig+0xd6>
 80027da:	4b77      	ldr	r3, [pc, #476]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a76      	ldr	r2, [pc, #472]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 80027e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	4b74      	ldr	r3, [pc, #464]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a73      	ldr	r2, [pc, #460]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 80027ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d013      	beq.n	8002822 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7ff fc6d 	bl	80020d8 <HAL_GetTick>
 80027fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002802:	f7ff fc69 	bl	80020d8 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b64      	cmp	r3, #100	; 0x64
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e3a9      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002814:	4b68      	ldr	r3, [pc, #416]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0xe6>
 8002820:	e014      	b.n	800284c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002822:	f7ff fc59 	bl	80020d8 <HAL_GetTick>
 8002826:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800282a:	f7ff fc55 	bl	80020d8 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b64      	cmp	r3, #100	; 0x64
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e395      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800283c:	4b5e      	ldr	r3, [pc, #376]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f0      	bne.n	800282a <HAL_RCC_OscConfig+0x10e>
 8002848:	e000      	b.n	800284c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80ca 	beq.w	80029ee <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800285a:	4b57      	ldr	r3, [pc, #348]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002862:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002864:	4b54      	ldr	r3, [pc, #336]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <HAL_RCC_OscConfig+0x164>
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	2b18      	cmp	r3, #24
 8002874:	d156      	bne.n	8002924 <HAL_RCC_OscConfig+0x208>
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d151      	bne.n	8002924 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002880:	4b4d      	ldr	r3, [pc, #308]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_RCC_OscConfig+0x17c>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e367      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002898:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f023 0219 	bic.w	r2, r3, #25
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4944      	ldr	r1, [pc, #272]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028aa:	f7ff fc15 	bl	80020d8 <HAL_GetTick>
 80028ae:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b2:	f7ff fc11 	bl	80020d8 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e351      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028c4:	4b3c      	ldr	r3, [pc, #240]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	f7ff fc32 	bl	8002138 <HAL_GetREVID>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80028da:	4293      	cmp	r3, r2
 80028dc:	d817      	bhi.n	800290e <HAL_RCC_OscConfig+0x1f2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b40      	cmp	r3, #64	; 0x40
 80028e4:	d108      	bne.n	80028f8 <HAL_RCC_OscConfig+0x1dc>
 80028e6:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80028ee:	4a32      	ldr	r2, [pc, #200]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 80028f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028f6:	e07a      	b.n	80029ee <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f8:	4b2f      	ldr	r3, [pc, #188]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	031b      	lsls	r3, r3, #12
 8002906:	492c      	ldr	r1, [pc, #176]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800290c:	e06f      	b.n	80029ee <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	061b      	lsls	r3, r3, #24
 800291c:	4926      	ldr	r1, [pc, #152]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002922:	e064      	b.n	80029ee <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d047      	beq.n	80029bc <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800292c:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f023 0219 	bic.w	r2, r3, #25
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	491f      	ldr	r1, [pc, #124]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 800293a:	4313      	orrs	r3, r2
 800293c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293e:	f7ff fbcb 	bl	80020d8 <HAL_GetTick>
 8002942:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002946:	f7ff fbc7 	bl	80020d8 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e307      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002958:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	f7ff fbe8 	bl	8002138 <HAL_GetREVID>
 8002968:	4603      	mov	r3, r0
 800296a:	f241 0203 	movw	r2, #4099	; 0x1003
 800296e:	4293      	cmp	r3, r2
 8002970:	d817      	bhi.n	80029a2 <HAL_RCC_OscConfig+0x286>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	d108      	bne.n	800298c <HAL_RCC_OscConfig+0x270>
 800297a:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002982:	4a0d      	ldr	r2, [pc, #52]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 8002984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002988:	6053      	str	r3, [r2, #4]
 800298a:	e030      	b.n	80029ee <HAL_RCC_OscConfig+0x2d2>
 800298c:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	031b      	lsls	r3, r3, #12
 800299a:	4907      	ldr	r1, [pc, #28]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
 80029a0:	e025      	b.n	80029ee <HAL_RCC_OscConfig+0x2d2>
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	061b      	lsls	r3, r3, #24
 80029b0:	4901      	ldr	r1, [pc, #4]	; (80029b8 <HAL_RCC_OscConfig+0x29c>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	604b      	str	r3, [r1, #4]
 80029b6:	e01a      	b.n	80029ee <HAL_RCC_OscConfig+0x2d2>
 80029b8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029bc:	4b9e      	ldr	r3, [pc, #632]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a9d      	ldr	r2, [pc, #628]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 80029c2:	f023 0301 	bic.w	r3, r3, #1
 80029c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7ff fb86 	bl	80020d8 <HAL_GetTick>
 80029cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d0:	f7ff fb82 	bl	80020d8 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e2c2      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029e2:	4b95      	ldr	r3, [pc, #596]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80a9 	beq.w	8002b4e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fc:	4b8e      	ldr	r3, [pc, #568]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a04:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a06:	4b8c      	ldr	r3, [pc, #560]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d007      	beq.n	8002a22 <HAL_RCC_OscConfig+0x306>
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	2b18      	cmp	r3, #24
 8002a16:	d13a      	bne.n	8002a8e <HAL_RCC_OscConfig+0x372>
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d135      	bne.n	8002a8e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a22:	4b85      	ldr	r3, [pc, #532]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_RCC_OscConfig+0x31e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	2b80      	cmp	r3, #128	; 0x80
 8002a34:	d001      	beq.n	8002a3a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e296      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a3a:	f7ff fb7d 	bl	8002138 <HAL_GetREVID>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d817      	bhi.n	8002a78 <HAL_RCC_OscConfig+0x35c>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	d108      	bne.n	8002a62 <HAL_RCC_OscConfig+0x346>
 8002a50:	4b79      	ldr	r3, [pc, #484]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a58:	4a77      	ldr	r2, [pc, #476]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002a5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a5e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a60:	e075      	b.n	8002b4e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a62:	4b75      	ldr	r3, [pc, #468]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	069b      	lsls	r3, r3, #26
 8002a70:	4971      	ldr	r1, [pc, #452]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a76:	e06a      	b.n	8002b4e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a78:	4b6f      	ldr	r3, [pc, #444]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	061b      	lsls	r3, r3, #24
 8002a86:	496c      	ldr	r1, [pc, #432]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a8c:	e05f      	b.n	8002b4e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d042      	beq.n	8002b1c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a96:	4b68      	ldr	r3, [pc, #416]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a67      	ldr	r2, [pc, #412]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa2:	f7ff fb19 	bl	80020d8 <HAL_GetTick>
 8002aa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002aaa:	f7ff fb15 	bl	80020d8 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e255      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002abc:	4b5e      	ldr	r3, [pc, #376]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ac8:	f7ff fb36 	bl	8002138 <HAL_GetREVID>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d817      	bhi.n	8002b06 <HAL_RCC_OscConfig+0x3ea>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	d108      	bne.n	8002af0 <HAL_RCC_OscConfig+0x3d4>
 8002ade:	4b56      	ldr	r3, [pc, #344]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ae6:	4a54      	ldr	r2, [pc, #336]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002ae8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002aec:	6053      	str	r3, [r2, #4]
 8002aee:	e02e      	b.n	8002b4e <HAL_RCC_OscConfig+0x432>
 8002af0:	4b51      	ldr	r3, [pc, #324]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	069b      	lsls	r3, r3, #26
 8002afe:	494e      	ldr	r1, [pc, #312]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
 8002b04:	e023      	b.n	8002b4e <HAL_RCC_OscConfig+0x432>
 8002b06:	4b4c      	ldr	r3, [pc, #304]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	061b      	lsls	r3, r3, #24
 8002b14:	4948      	ldr	r1, [pc, #288]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60cb      	str	r3, [r1, #12]
 8002b1a:	e018      	b.n	8002b4e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b1c:	4b46      	ldr	r3, [pc, #280]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a45      	ldr	r2, [pc, #276]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7ff fad6 	bl	80020d8 <HAL_GetTick>
 8002b2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b30:	f7ff fad2 	bl	80020d8 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e212      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b42:	4b3d      	ldr	r3, [pc, #244]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d036      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d019      	beq.n	8002b96 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b62:	4b35      	ldr	r3, [pc, #212]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b66:	4a34      	ldr	r2, [pc, #208]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6e:	f7ff fab3 	bl	80020d8 <HAL_GetTick>
 8002b72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b76:	f7ff faaf 	bl	80020d8 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e1ef      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b88:	4b2b      	ldr	r3, [pc, #172]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x45a>
 8002b94:	e018      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b96:	4b28      	ldr	r3, [pc, #160]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9a:	4a27      	ldr	r2, [pc, #156]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002b9c:	f023 0301 	bic.w	r3, r3, #1
 8002ba0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba2:	f7ff fa99 	bl	80020d8 <HAL_GetTick>
 8002ba6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002baa:	f7ff fa95 	bl	80020d8 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e1d5      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bbc:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f0      	bne.n	8002baa <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d039      	beq.n	8002c48 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d019      	beq.n	8002c10 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bdc:	4b16      	ldr	r3, [pc, #88]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a15      	ldr	r2, [pc, #84]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002be2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002be6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002be8:	f7ff fa76 	bl	80020d8 <HAL_GetTick>
 8002bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bf0:	f7ff fa72 	bl	80020d8 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e1b2      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c02:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x4d4>
 8002c0e:	e01b      	b.n	8002c48 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c10:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a08      	ldr	r2, [pc, #32]	; (8002c38 <HAL_RCC_OscConfig+0x51c>)
 8002c16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c1c:	f7ff fa5c 	bl	80020d8 <HAL_GetTick>
 8002c20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c22:	e00b      	b.n	8002c3c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c24:	f7ff fa58 	bl	80020d8 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d904      	bls.n	8002c3c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e198      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
 8002c36:	bf00      	nop
 8002c38:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c3c:	4ba3      	ldr	r3, [pc, #652]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1ed      	bne.n	8002c24 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8081 	beq.w	8002d58 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c56:	4b9e      	ldr	r3, [pc, #632]	; (8002ed0 <HAL_RCC_OscConfig+0x7b4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a9d      	ldr	r2, [pc, #628]	; (8002ed0 <HAL_RCC_OscConfig+0x7b4>)
 8002c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c62:	f7ff fa39 	bl	80020d8 <HAL_GetTick>
 8002c66:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c6a:	f7ff fa35 	bl	80020d8 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b64      	cmp	r3, #100	; 0x64
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e175      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c7c:	4b94      	ldr	r3, [pc, #592]	; (8002ed0 <HAL_RCC_OscConfig+0x7b4>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d106      	bne.n	8002c9e <HAL_RCC_OscConfig+0x582>
 8002c90:	4b8e      	ldr	r3, [pc, #568]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	4a8d      	ldr	r2, [pc, #564]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9c:	e02d      	b.n	8002cfa <HAL_RCC_OscConfig+0x5de>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x5a4>
 8002ca6:	4b89      	ldr	r3, [pc, #548]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	4a88      	ldr	r2, [pc, #544]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002cac:	f023 0301 	bic.w	r3, r3, #1
 8002cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb2:	4b86      	ldr	r3, [pc, #536]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb6:	4a85      	ldr	r2, [pc, #532]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002cb8:	f023 0304 	bic.w	r3, r3, #4
 8002cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cbe:	e01c      	b.n	8002cfa <HAL_RCC_OscConfig+0x5de>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2b05      	cmp	r3, #5
 8002cc6:	d10c      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x5c6>
 8002cc8:	4b80      	ldr	r3, [pc, #512]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ccc:	4a7f      	ldr	r2, [pc, #508]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002cce:	f043 0304 	orr.w	r3, r3, #4
 8002cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd4:	4b7d      	ldr	r3, [pc, #500]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	4a7c      	ldr	r2, [pc, #496]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce0:	e00b      	b.n	8002cfa <HAL_RCC_OscConfig+0x5de>
 8002ce2:	4b7a      	ldr	r3, [pc, #488]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce6:	4a79      	ldr	r2, [pc, #484]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	6713      	str	r3, [r2, #112]	; 0x70
 8002cee:	4b77      	ldr	r3, [pc, #476]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	4a76      	ldr	r2, [pc, #472]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002cf4:	f023 0304 	bic.w	r3, r3, #4
 8002cf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d015      	beq.n	8002d2e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d02:	f7ff f9e9 	bl	80020d8 <HAL_GetTick>
 8002d06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7ff f9e5 	bl	80020d8 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e123      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d20:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0ee      	beq.n	8002d0a <HAL_RCC_OscConfig+0x5ee>
 8002d2c:	e014      	b.n	8002d58 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2e:	f7ff f9d3 	bl	80020d8 <HAL_GetTick>
 8002d32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d34:	e00a      	b.n	8002d4c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d36:	f7ff f9cf 	bl	80020d8 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e10d      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d4c:	4b5f      	ldr	r3, [pc, #380]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1ee      	bne.n	8002d36 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 8102 	beq.w	8002f66 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d62:	4b5a      	ldr	r3, [pc, #360]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d6a:	2b18      	cmp	r3, #24
 8002d6c:	f000 80bd 	beq.w	8002eea <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	f040 8095 	bne.w	8002ea4 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7a:	4b54      	ldr	r3, [pc, #336]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a53      	ldr	r2, [pc, #332]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002d80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7ff f9a7 	bl	80020d8 <HAL_GetTick>
 8002d8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8e:	f7ff f9a3 	bl	80020d8 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e0e3      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002da0:	4b4a      	ldr	r3, [pc, #296]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f0      	bne.n	8002d8e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dac:	4b47      	ldr	r3, [pc, #284]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002dae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002db0:	4b48      	ldr	r3, [pc, #288]	; (8002ed4 <HAL_RCC_OscConfig+0x7b8>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002dbc:	0112      	lsls	r2, r2, #4
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	4942      	ldr	r1, [pc, #264]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	628b      	str	r3, [r1, #40]	; 0x28
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	025b      	lsls	r3, r3, #9
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	3b01      	subs	r3, #1
 8002de2:	041b      	lsls	r3, r3, #16
 8002de4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dee:	3b01      	subs	r3, #1
 8002df0:	061b      	lsls	r3, r3, #24
 8002df2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002df6:	4935      	ldr	r1, [pc, #212]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002dfc:	4b33      	ldr	r3, [pc, #204]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	4a32      	ldr	r2, [pc, #200]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002e02:	f023 0301 	bic.w	r3, r3, #1
 8002e06:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e08:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e0c:	4b32      	ldr	r3, [pc, #200]	; (8002ed8 <HAL_RCC_OscConfig+0x7bc>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e14:	00d2      	lsls	r2, r2, #3
 8002e16:	492d      	ldr	r1, [pc, #180]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	f023 020c 	bic.w	r2, r3, #12
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	4928      	ldr	r1, [pc, #160]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e2e:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	f023 0202 	bic.w	r2, r3, #2
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	4924      	ldr	r1, [pc, #144]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e40:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	4a21      	ldr	r2, [pc, #132]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	4a1e      	ldr	r2, [pc, #120]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e58:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002e5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e70:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a15      	ldr	r2, [pc, #84]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7ff f92c 	bl	80020d8 <HAL_GetTick>
 8002e80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e84:	f7ff f928 	bl	80020d8 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e068      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e96:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x768>
 8002ea2:	e060      	b.n	8002f66 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea4:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <HAL_RCC_OscConfig+0x7b0>)
 8002eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7ff f912 	bl	80020d8 <HAL_GetTick>
 8002eb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eb6:	e011      	b.n	8002edc <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7ff f90e 	bl	80020d8 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d90a      	bls.n	8002edc <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e04e      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
 8002eca:	bf00      	nop
 8002ecc:	58024400 	.word	0x58024400
 8002ed0:	58024800 	.word	0x58024800
 8002ed4:	fffffc0c 	.word	0xfffffc0c
 8002ed8:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002edc:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <HAL_RCC_OscConfig+0x854>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e7      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x79c>
 8002ee8:	e03d      	b.n	8002f66 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002eea:	4b21      	ldr	r3, [pc, #132]	; (8002f70 <HAL_RCC_OscConfig+0x854>)
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ef0:	4b1f      	ldr	r3, [pc, #124]	; (8002f70 <HAL_RCC_OscConfig+0x854>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d031      	beq.n	8002f62 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f003 0203 	and.w	r2, r3, #3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d12a      	bne.n	8002f62 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	091b      	lsrs	r3, r3, #4
 8002f10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d122      	bne.n	8002f62 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d11a      	bne.n	8002f62 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	0a5b      	lsrs	r3, r3, #9
 8002f30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d111      	bne.n	8002f62 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	0c1b      	lsrs	r3, r3, #16
 8002f42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d108      	bne.n	8002f62 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	0e1b      	lsrs	r3, r3, #24
 8002f54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3730      	adds	r7, #48	; 0x30
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	58024400 	.word	0x58024400

08002f74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e19c      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b8a      	ldr	r3, [pc, #552]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d910      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b87      	ldr	r3, [pc, #540]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 020f 	bic.w	r2, r3, #15
 8002f9e:	4985      	ldr	r1, [pc, #532]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b83      	ldr	r3, [pc, #524]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e184      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d010      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	4b7b      	ldr	r3, [pc, #492]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d908      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fd4:	4b78      	ldr	r3, [pc, #480]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	4975      	ldr	r1, [pc, #468]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d010      	beq.n	8003014 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	4b70      	ldr	r3, [pc, #448]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d908      	bls.n	8003014 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003002:	4b6d      	ldr	r3, [pc, #436]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	496a      	ldr	r1, [pc, #424]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003010:	4313      	orrs	r3, r2
 8003012:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	d010      	beq.n	8003042 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699a      	ldr	r2, [r3, #24]
 8003024:	4b64      	ldr	r3, [pc, #400]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800302c:	429a      	cmp	r2, r3
 800302e:	d908      	bls.n	8003042 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003030:	4b61      	ldr	r3, [pc, #388]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	495e      	ldr	r1, [pc, #376]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 800303e:	4313      	orrs	r3, r2
 8003040:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b00      	cmp	r3, #0
 800304c:	d010      	beq.n	8003070 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	4b59      	ldr	r3, [pc, #356]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800305a:	429a      	cmp	r2, r3
 800305c:	d908      	bls.n	8003070 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800305e:	4b56      	ldr	r3, [pc, #344]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	4953      	ldr	r1, [pc, #332]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 800306c:	4313      	orrs	r3, r2
 800306e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d010      	beq.n	800309e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	4b4d      	ldr	r3, [pc, #308]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	429a      	cmp	r2, r3
 800308a:	d908      	bls.n	800309e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308c:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f023 020f 	bic.w	r2, r3, #15
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4947      	ldr	r1, [pc, #284]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 800309a:	4313      	orrs	r3, r2
 800309c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d055      	beq.n	8003156 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030aa:	4b43      	ldr	r3, [pc, #268]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	4940      	ldr	r1, [pc, #256]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d107      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030c4:	4b3c      	ldr	r3, [pc, #240]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d121      	bne.n	8003114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0f6      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d107      	bne.n	80030ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030dc:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d115      	bne.n	8003114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0ea      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030f4:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d109      	bne.n	8003114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0de      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003104:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0d6      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003114:	4b28      	ldr	r3, [pc, #160]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f023 0207 	bic.w	r2, r3, #7
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4925      	ldr	r1, [pc, #148]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003122:	4313      	orrs	r3, r2
 8003124:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003126:	f7fe ffd7 	bl	80020d8 <HAL_GetTick>
 800312a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312c:	e00a      	b.n	8003144 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312e:	f7fe ffd3 	bl	80020d8 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	f241 3288 	movw	r2, #5000	; 0x1388
 800313c:	4293      	cmp	r3, r2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e0be      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003144:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	429a      	cmp	r2, r3
 8003154:	d1eb      	bne.n	800312e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d010      	beq.n	8003184 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	429a      	cmp	r2, r3
 8003170:	d208      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f023 020f 	bic.w	r2, r3, #15
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	490e      	ldr	r1, [pc, #56]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003180:	4313      	orrs	r3, r2
 8003182:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d214      	bcs.n	80031bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 020f 	bic.w	r2, r3, #15
 800319a:	4906      	ldr	r1, [pc, #24]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	4313      	orrs	r3, r2
 80031a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b04      	ldr	r3, [pc, #16]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e086      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
 80031b4:	52002000 	.word	0x52002000
 80031b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d010      	beq.n	80031ea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	4b3f      	ldr	r3, [pc, #252]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d208      	bcs.n	80031ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031d8:	4b3c      	ldr	r3, [pc, #240]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	4939      	ldr	r1, [pc, #228]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d010      	beq.n	8003218 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	4b34      	ldr	r3, [pc, #208]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003202:	429a      	cmp	r2, r3
 8003204:	d208      	bcs.n	8003218 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003206:	4b31      	ldr	r3, [pc, #196]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	492e      	ldr	r1, [pc, #184]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003214:	4313      	orrs	r3, r2
 8003216:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b00      	cmp	r3, #0
 8003222:	d010      	beq.n	8003246 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699a      	ldr	r2, [r3, #24]
 8003228:	4b28      	ldr	r3, [pc, #160]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003230:	429a      	cmp	r2, r3
 8003232:	d208      	bcs.n	8003246 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003234:	4b25      	ldr	r3, [pc, #148]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	4922      	ldr	r1, [pc, #136]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003242:	4313      	orrs	r3, r2
 8003244:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d010      	beq.n	8003274 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69da      	ldr	r2, [r3, #28]
 8003256:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800325e:	429a      	cmp	r2, r3
 8003260:	d208      	bcs.n	8003274 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	4917      	ldr	r1, [pc, #92]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003270:	4313      	orrs	r3, r2
 8003272:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003274:	f000 f834 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b14      	ldr	r3, [pc, #80]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	4912      	ldr	r1, [pc, #72]	; (80032d0 <HAL_RCC_ClockConfig+0x35c>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
 8003290:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <HAL_RCC_ClockConfig+0x35c>)
 800329c:	5cd3      	ldrb	r3, [r2, r3]
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	fa22 f303 	lsr.w	r3, r2, r3
 80032a8:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <HAL_RCC_ClockConfig+0x360>)
 80032aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032ac:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <HAL_RCC_ClockConfig+0x364>)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <HAL_RCC_ClockConfig+0x368>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe fec4 	bl	8002044 <HAL_InitTick>
 80032bc:	4603      	mov	r3, r0
 80032be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	58024400 	.word	0x58024400
 80032d0:	08007388 	.word	0x08007388
 80032d4:	2400006c 	.word	0x2400006c
 80032d8:	24000068 	.word	0x24000068
 80032dc:	24000070 	.word	0x24000070

080032e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b089      	sub	sp, #36	; 0x24
 80032e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e6:	4bb3      	ldr	r3, [pc, #716]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032ee:	2b18      	cmp	r3, #24
 80032f0:	f200 8155 	bhi.w	800359e <HAL_RCC_GetSysClockFreq+0x2be>
 80032f4:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	08003361 	.word	0x08003361
 8003300:	0800359f 	.word	0x0800359f
 8003304:	0800359f 	.word	0x0800359f
 8003308:	0800359f 	.word	0x0800359f
 800330c:	0800359f 	.word	0x0800359f
 8003310:	0800359f 	.word	0x0800359f
 8003314:	0800359f 	.word	0x0800359f
 8003318:	0800359f 	.word	0x0800359f
 800331c:	08003387 	.word	0x08003387
 8003320:	0800359f 	.word	0x0800359f
 8003324:	0800359f 	.word	0x0800359f
 8003328:	0800359f 	.word	0x0800359f
 800332c:	0800359f 	.word	0x0800359f
 8003330:	0800359f 	.word	0x0800359f
 8003334:	0800359f 	.word	0x0800359f
 8003338:	0800359f 	.word	0x0800359f
 800333c:	0800338d 	.word	0x0800338d
 8003340:	0800359f 	.word	0x0800359f
 8003344:	0800359f 	.word	0x0800359f
 8003348:	0800359f 	.word	0x0800359f
 800334c:	0800359f 	.word	0x0800359f
 8003350:	0800359f 	.word	0x0800359f
 8003354:	0800359f 	.word	0x0800359f
 8003358:	0800359f 	.word	0x0800359f
 800335c:	08003393 	.word	0x08003393
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003360:	4b94      	ldr	r3, [pc, #592]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d009      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800336c:	4b91      	ldr	r3, [pc, #580]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	08db      	lsrs	r3, r3, #3
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	4a90      	ldr	r2, [pc, #576]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
 800337c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800337e:	e111      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003380:	4b8d      	ldr	r3, [pc, #564]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003382:	61bb      	str	r3, [r7, #24]
    break;
 8003384:	e10e      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003386:	4b8d      	ldr	r3, [pc, #564]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003388:	61bb      	str	r3, [r7, #24]
    break;
 800338a:	e10b      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800338c:	4b8c      	ldr	r3, [pc, #560]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800338e:	61bb      	str	r3, [r7, #24]
    break;
 8003390:	e108      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003392:	4b88      	ldr	r3, [pc, #544]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800339c:	4b85      	ldr	r3, [pc, #532]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033a8:	4b82      	ldr	r3, [pc, #520]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80033b2:	4b80      	ldr	r3, [pc, #512]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b6:	08db      	lsrs	r3, r3, #3
 80033b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	ee07 3a90 	vmov	s15, r3
 80033c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80e1 	beq.w	8003598 <HAL_RCC_GetSysClockFreq+0x2b8>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	f000 8083 	beq.w	80034e4 <HAL_RCC_GetSysClockFreq+0x204>
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	f200 80a1 	bhi.w	8003528 <HAL_RCC_GetSysClockFreq+0x248>
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x114>
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d056      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033f2:	e099      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033f4:	4b6f      	ldr	r3, [pc, #444]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d02d      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003400:	4b6c      	ldr	r3, [pc, #432]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	08db      	lsrs	r3, r3, #3
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	4a6b      	ldr	r2, [pc, #428]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
 8003410:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	ee07 3a90 	vmov	s15, r3
 8003418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800342a:	4b62      	ldr	r3, [pc, #392]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343a:	ed97 6a02 	vldr	s12, [r7, #8]
 800343e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80035c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800344a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800344e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003456:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800345a:	e087      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003466:	eddf 6a58 	vldr	s13, [pc, #352]	; 80035c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800346a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800346e:	4b51      	ldr	r3, [pc, #324]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003476:	ee07 3a90 	vmov	s15, r3
 800347a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800347e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003482:	eddf 5a50 	vldr	s11, [pc, #320]	; 80035c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800348a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800348e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800349e:	e065      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80035cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80034ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034b2:	4b40      	ldr	r3, [pc, #256]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ba:	ee07 3a90 	vmov	s15, r3
 80034be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80035c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034e2:	e043      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80035d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034f6:	4b2f      	ldr	r3, [pc, #188]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034fe:	ee07 3a90 	vmov	s15, r3
 8003502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003506:	ed97 6a02 	vldr	s12, [r7, #8]
 800350a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80035c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800350e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800351a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800351e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003526:	e021      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003532:	eddf 6a26 	vldr	s13, [pc, #152]	; 80035cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800353a:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003542:	ee07 3a90 	vmov	s15, r3
 8003546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800354a:	ed97 6a02 	vldr	s12, [r7, #8]
 800354e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80035c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800355a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800355e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800356a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800356c:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	0a5b      	lsrs	r3, r3, #9
 8003572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003576:	3301      	adds	r3, #1
 8003578:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	ee07 3a90 	vmov	s15, r3
 8003580:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003584:	edd7 6a07 	vldr	s13, [r7, #28]
 8003588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800358c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003590:	ee17 3a90 	vmov	r3, s15
 8003594:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003596:	e005      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	61bb      	str	r3, [r7, #24]
    break;
 800359c:	e002      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035a0:	61bb      	str	r3, [r7, #24]
    break;
 80035a2:	bf00      	nop
  }

  return sysclockfreq;
 80035a4:	69bb      	ldr	r3, [r7, #24]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3724      	adds	r7, #36	; 0x24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	58024400 	.word	0x58024400
 80035b8:	03d09000 	.word	0x03d09000
 80035bc:	003d0900 	.word	0x003d0900
 80035c0:	017d7840 	.word	0x017d7840
 80035c4:	46000000 	.word	0x46000000
 80035c8:	4c742400 	.word	0x4c742400
 80035cc:	4a742400 	.word	0x4a742400
 80035d0:	4bbebc20 	.word	0x4bbebc20

080035d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035da:	f7ff fe81 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 80035de:	4602      	mov	r2, r0
 80035e0:	4b10      	ldr	r3, [pc, #64]	; (8003624 <HAL_RCC_GetHCLKFreq+0x50>)
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	490f      	ldr	r1, [pc, #60]	; (8003628 <HAL_RCC_GetHCLKFreq+0x54>)
 80035ec:	5ccb      	ldrb	r3, [r1, r3]
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	fa22 f303 	lsr.w	r3, r2, r3
 80035f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035f8:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <HAL_RCC_GetHCLKFreq+0x50>)
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	4a09      	ldr	r2, [pc, #36]	; (8003628 <HAL_RCC_GetHCLKFreq+0x54>)
 8003602:	5cd3      	ldrb	r3, [r2, r3]
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	fa22 f303 	lsr.w	r3, r2, r3
 800360e:	4a07      	ldr	r2, [pc, #28]	; (800362c <HAL_RCC_GetHCLKFreq+0x58>)
 8003610:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003612:	4a07      	ldr	r2, [pc, #28]	; (8003630 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003618:	4b04      	ldr	r3, [pc, #16]	; (800362c <HAL_RCC_GetHCLKFreq+0x58>)
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	58024400 	.word	0x58024400
 8003628:	08007388 	.word	0x08007388
 800362c:	2400006c 	.word	0x2400006c
 8003630:	24000068 	.word	0x24000068

08003634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003638:	f7ff ffcc 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 800363c:	4602      	mov	r2, r0
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	4904      	ldr	r1, [pc, #16]	; (800365c <HAL_RCC_GetPCLK1Freq+0x28>)
 800364a:	5ccb      	ldrb	r3, [r1, r3]
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	58024400 	.word	0x58024400
 800365c:	08007388 	.word	0x08007388

08003660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003664:	f7ff ffb6 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <HAL_RCC_GetPCLK2Freq+0x24>)
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	4904      	ldr	r1, [pc, #16]	; (8003688 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003676:	5ccb      	ldrb	r3, [r1, r3]
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003680:	4618      	mov	r0, r3
 8003682:	bd80      	pop	{r7, pc}
 8003684:	58024400 	.word	0x58024400
 8003688:	08007388 	.word	0x08007388

0800368c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003694:	2300      	movs	r3, #0
 8003696:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003698:	2300      	movs	r3, #0
 800369a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d03f      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036b0:	d02a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036b6:	d824      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036bc:	d018      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036c2:	d81e      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036cc:	d007      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036ce:	e018      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d0:	4bab      	ldr	r3, [pc, #684]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	4aaa      	ldr	r2, [pc, #680]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036dc:	e015      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3304      	adds	r3, #4
 80036e2:	2102      	movs	r1, #2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 f9cf 	bl	8004a88 <RCCEx_PLL2_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036ee:	e00c      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3324      	adds	r3, #36	; 0x24
 80036f4:	2102      	movs	r1, #2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f001 fa78 	bl	8004bec <RCCEx_PLL3_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003700:	e003      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	75fb      	strb	r3, [r7, #23]
      break;
 8003706:	e000      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003708:	bf00      	nop
    }

    if(ret == HAL_OK)
 800370a:	7dfb      	ldrb	r3, [r7, #23]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003710:	4b9b      	ldr	r3, [pc, #620]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003714:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800371c:	4998      	ldr	r1, [pc, #608]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800371e:	4313      	orrs	r3, r2
 8003720:	650b      	str	r3, [r1, #80]	; 0x50
 8003722:	e001      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003724:	7dfb      	ldrb	r3, [r7, #23]
 8003726:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d03d      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	2b04      	cmp	r3, #4
 800373a:	d826      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800373c:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	08003759 	.word	0x08003759
 8003748:	08003767 	.word	0x08003767
 800374c:	08003779 	.word	0x08003779
 8003750:	08003791 	.word	0x08003791
 8003754:	08003791 	.word	0x08003791
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003758:	4b89      	ldr	r3, [pc, #548]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	4a88      	ldr	r2, [pc, #544]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800375e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003762:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003764:	e015      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3304      	adds	r3, #4
 800376a:	2100      	movs	r1, #0
 800376c:	4618      	mov	r0, r3
 800376e:	f001 f98b 	bl	8004a88 <RCCEx_PLL2_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003776:	e00c      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3324      	adds	r3, #36	; 0x24
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f001 fa34 	bl	8004bec <RCCEx_PLL3_Config>
 8003784:	4603      	mov	r3, r0
 8003786:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003788:	e003      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	75fb      	strb	r3, [r7, #23]
      break;
 800378e:	e000      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003790:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003792:	7dfb      	ldrb	r3, [r7, #23]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d109      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003798:	4b79      	ldr	r3, [pc, #484]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800379a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379c:	f023 0207 	bic.w	r2, r3, #7
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a4:	4976      	ldr	r1, [pc, #472]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	650b      	str	r3, [r1, #80]	; 0x50
 80037aa:	e001      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d042      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c4:	d02b      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80037c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ca:	d825      	bhi.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80037cc:	2bc0      	cmp	r3, #192	; 0xc0
 80037ce:	d028      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80037d0:	2bc0      	cmp	r3, #192	; 0xc0
 80037d2:	d821      	bhi.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80037d4:	2b80      	cmp	r3, #128	; 0x80
 80037d6:	d016      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80037d8:	2b80      	cmp	r3, #128	; 0x80
 80037da:	d81d      	bhi.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d007      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80037e4:	e018      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e6:	4b66      	ldr	r3, [pc, #408]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	4a65      	ldr	r2, [pc, #404]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037f2:	e017      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3304      	adds	r3, #4
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 f944 	bl	8004a88 <RCCEx_PLL2_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003804:	e00e      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3324      	adds	r3, #36	; 0x24
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f001 f9ed 	bl	8004bec <RCCEx_PLL3_Config>
 8003812:	4603      	mov	r3, r0
 8003814:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003816:	e005      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	75fb      	strb	r3, [r7, #23]
      break;
 800381c:	e002      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800381e:	bf00      	nop
 8003820:	e000      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800382a:	4b55      	ldr	r3, [pc, #340]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800382c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003836:	4952      	ldr	r1, [pc, #328]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003838:	4313      	orrs	r3, r2
 800383a:	650b      	str	r3, [r1, #80]	; 0x50
 800383c:	e001      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383e:	7dfb      	ldrb	r3, [r7, #23]
 8003840:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384a:	2b00      	cmp	r3, #0
 800384c:	d049      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003854:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003858:	d030      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800385a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800385e:	d82a      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003860:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003864:	d02c      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003866:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800386a:	d824      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800386c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003870:	d018      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003876:	d81e      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800387c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003880:	d007      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003882:	e018      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003884:	4b3e      	ldr	r3, [pc, #248]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	4a3d      	ldr	r2, [pc, #244]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800388a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003890:	e017      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3304      	adds	r3, #4
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f001 f8f5 	bl	8004a88 <RCCEx_PLL2_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80038a2:	e00e      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3324      	adds	r3, #36	; 0x24
 80038a8:	2100      	movs	r1, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	f001 f99e 	bl	8004bec <RCCEx_PLL3_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038b4:	e005      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	75fb      	strb	r3, [r7, #23]
      break;
 80038ba:	e002      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80038bc:	bf00      	nop
 80038be:	e000      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80038c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038c2:	7dfb      	ldrb	r3, [r7, #23]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038c8:	4b2d      	ldr	r3, [pc, #180]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038cc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038d6:	492a      	ldr	r1, [pc, #168]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	658b      	str	r3, [r1, #88]	; 0x58
 80038dc:	e001      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038de:	7dfb      	ldrb	r3, [r7, #23]
 80038e0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d04c      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038f8:	d030      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80038fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038fe:	d82a      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003900:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003904:	d02c      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003906:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800390a:	d824      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800390c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003910:	d018      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003912:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003916:	d81e      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800391c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003920:	d007      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003922:	e018      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003924:	4b16      	ldr	r3, [pc, #88]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	4a15      	ldr	r2, [pc, #84]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800392a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800392e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003930:	e017      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3304      	adds	r3, #4
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f001 f8a5 	bl	8004a88 <RCCEx_PLL2_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003942:	e00e      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3324      	adds	r3, #36	; 0x24
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f001 f94e 	bl	8004bec <RCCEx_PLL3_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003954:	e005      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	75fb      	strb	r3, [r7, #23]
      break;
 800395a:	e002      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800395c:	bf00      	nop
 800395e:	e000      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003960:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003962:	7dfb      	ldrb	r3, [r7, #23]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10d      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003976:	4902      	ldr	r1, [pc, #8]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003978:	4313      	orrs	r3, r2
 800397a:	658b      	str	r3, [r1, #88]	; 0x58
 800397c:	e004      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800397e:	bf00      	nop
 8003980:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003984:	7dfb      	ldrb	r3, [r7, #23]
 8003986:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d032      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003998:	2b30      	cmp	r3, #48	; 0x30
 800399a:	d01c      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800399c:	2b30      	cmp	r3, #48	; 0x30
 800399e:	d817      	bhi.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d00c      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x332>
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d813      	bhi.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d016      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d10f      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b0:	4baf      	ldr	r3, [pc, #700]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	4aae      	ldr	r2, [pc, #696]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80039bc:	e00e      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3304      	adds	r3, #4
 80039c2:	2102      	movs	r1, #2
 80039c4:	4618      	mov	r0, r3
 80039c6:	f001 f85f 	bl	8004a88 <RCCEx_PLL2_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80039ce:	e005      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	75fb      	strb	r3, [r7, #23]
      break;
 80039d4:	e002      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80039d6:	bf00      	nop
 80039d8:	e000      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80039da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039e2:	4ba3      	ldr	r3, [pc, #652]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ee:	49a0      	ldr	r1, [pc, #640]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80039f4:	e001      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f6:	7dfb      	ldrb	r3, [r7, #23]
 80039f8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d047      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a0e:	d030      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a14:	d82a      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a1a:	d02c      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003a1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a20:	d824      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a26:	d018      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2c:	d81e      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a36:	d007      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003a38:	e018      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a3a:	4b8d      	ldr	r3, [pc, #564]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	4a8c      	ldr	r2, [pc, #560]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a46:	e017      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 f81a 	bl	8004a88 <RCCEx_PLL2_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a58:	e00e      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3324      	adds	r3, #36	; 0x24
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 f8c3 	bl	8004bec <RCCEx_PLL3_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a6a:	e005      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a70:	e002      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003a72:	bf00      	nop
 8003a74:	e000      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a7e:	4b7c      	ldr	r3, [pc, #496]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a82:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8a:	4979      	ldr	r1, [pc, #484]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	650b      	str	r3, [r1, #80]	; 0x50
 8003a90:	e001      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
 8003a94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d049      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aaa:	d02e      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ab0:	d828      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003ab2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ab6:	d02a      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003ab8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003abc:	d822      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003abe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ac2:	d026      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ac4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ac8:	d81c      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003aca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ace:	d010      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ad4:	d816      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d01d      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ade:	d111      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 ffce 	bl	8004a88 <RCCEx_PLL2_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003af0:	e012      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3324      	adds	r3, #36	; 0x24
 8003af6:	2101      	movs	r1, #1
 8003af8:	4618      	mov	r0, r3
 8003afa:	f001 f877 	bl	8004bec <RCCEx_PLL3_Config>
 8003afe:	4603      	mov	r3, r0
 8003b00:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b02:	e009      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	75fb      	strb	r3, [r7, #23]
      break;
 8003b08:	e006      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e004      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e002      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b12:	bf00      	nop
 8003b14:	e000      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b1e:	4b54      	ldr	r3, [pc, #336]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b22:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2a:	4951      	ldr	r1, [pc, #324]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	650b      	str	r3, [r1, #80]	; 0x50
 8003b30:	e001      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
 8003b34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d04b      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b4c:	d02e      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b52:	d828      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b58:	d02a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5e:	d822      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b64:	d026      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003b66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b6a:	d81c      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b70:	d010      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b76:	d816      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01d      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003b7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b80:	d111      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3304      	adds	r3, #4
 8003b86:	2101      	movs	r1, #1
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 ff7d 	bl	8004a88 <RCCEx_PLL2_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b92:	e012      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3324      	adds	r3, #36	; 0x24
 8003b98:	2101      	movs	r1, #1
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f001 f826 	bl	8004bec <RCCEx_PLL3_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ba4:	e009      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8003baa:	e006      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003bac:	bf00      	nop
 8003bae:	e004      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003bb0:	bf00      	nop
 8003bb2:	e002      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003bb4:	bf00      	nop
 8003bb6:	e000      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bba:	7dfb      	ldrb	r3, [r7, #23]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bce:	4928      	ldr	r1, [pc, #160]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	658b      	str	r3, [r1, #88]	; 0x58
 8003bd4:	e001      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
 8003bd8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d02f      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bee:	d00e      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bf4:	d814      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d015      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003bfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bfe:	d10f      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	4a1a      	ldr	r2, [pc, #104]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c0c:	e00c      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3304      	adds	r3, #4
 8003c12:	2101      	movs	r1, #1
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 ff37 	bl	8004a88 <RCCEx_PLL2_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c1e:	e003      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	75fb      	strb	r3, [r7, #23]
      break;
 8003c24:	e000      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d109      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c2e:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c3a:	490d      	ldr	r1, [pc, #52]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	650b      	str	r3, [r1, #80]	; 0x50
 8003c40:	e001      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
 8003c44:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d033      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d81c      	bhi.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003c5a:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c60:	08003c9b 	.word	0x08003c9b
 8003c64:	08003c75 	.word	0x08003c75
 8003c68:	08003c83 	.word	0x08003c83
 8003c6c:	08003c9b 	.word	0x08003c9b
 8003c70:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c74:	4bb8      	ldr	r3, [pc, #736]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	4ab7      	ldr	r2, [pc, #732]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c80:	e00c      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3304      	adds	r3, #4
 8003c86:	2102      	movs	r1, #2
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fefd 	bl	8004a88 <RCCEx_PLL2_Config>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c92:	e003      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	75fb      	strb	r3, [r7, #23]
      break;
 8003c98:	e000      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ca2:	4bad      	ldr	r3, [pc, #692]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca6:	f023 0203 	bic.w	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	49aa      	ldr	r1, [pc, #680]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cb4:	e001      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb6:	7dfb      	ldrb	r3, [r7, #23]
 8003cb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 8086 	beq.w	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc8:	4ba4      	ldr	r3, [pc, #656]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4aa3      	ldr	r2, [pc, #652]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cd4:	f7fe fa00 	bl	80020d8 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cda:	e009      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cdc:	f7fe f9fc 	bl	80020d8 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d902      	bls.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	75fb      	strb	r3, [r7, #23]
        break;
 8003cee:	e005      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cf0:	4b9a      	ldr	r3, [pc, #616]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ef      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d166      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d02:	4b95      	ldr	r3, [pc, #596]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d0c:	4053      	eors	r3, r2
 8003d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d013      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d16:	4b90      	ldr	r3, [pc, #576]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d1e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d20:	4b8d      	ldr	r3, [pc, #564]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d24:	4a8c      	ldr	r2, [pc, #560]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d2c:	4b8a      	ldr	r3, [pc, #552]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	4a89      	ldr	r2, [pc, #548]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d36:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d38:	4a87      	ldr	r2, [pc, #540]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d48:	d115      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7fe f9c5 	bl	80020d8 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d50:	e00b      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f7fe f9c1 	bl	80020d8 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d902      	bls.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	75fb      	strb	r3, [r7, #23]
            break;
 8003d68:	e005      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d6a:	4b7b      	ldr	r3, [pc, #492]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0ed      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d126      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d8a:	d10d      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003d8c:	4b72      	ldr	r3, [pc, #456]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d9a:	0919      	lsrs	r1, r3, #4
 8003d9c:	4b70      	ldr	r3, [pc, #448]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003d9e:	400b      	ands	r3, r1
 8003da0:	496d      	ldr	r1, [pc, #436]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	610b      	str	r3, [r1, #16]
 8003da6:	e005      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003da8:	4b6b      	ldr	r3, [pc, #428]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	4a6a      	ldr	r2, [pc, #424]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003db2:	6113      	str	r3, [r2, #16]
 8003db4:	4b68      	ldr	r3, [pc, #416]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003db6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc2:	4965      	ldr	r1, [pc, #404]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	670b      	str	r3, [r1, #112]	; 0x70
 8003dc8:	e004      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
 8003dcc:	75bb      	strb	r3, [r7, #22]
 8003dce:	e001      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
 8003dd2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d07e      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de4:	2b28      	cmp	r3, #40	; 0x28
 8003de6:	d867      	bhi.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003de8:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dee:	bf00      	nop
 8003df0:	08003ebf 	.word	0x08003ebf
 8003df4:	08003eb9 	.word	0x08003eb9
 8003df8:	08003eb9 	.word	0x08003eb9
 8003dfc:	08003eb9 	.word	0x08003eb9
 8003e00:	08003eb9 	.word	0x08003eb9
 8003e04:	08003eb9 	.word	0x08003eb9
 8003e08:	08003eb9 	.word	0x08003eb9
 8003e0c:	08003eb9 	.word	0x08003eb9
 8003e10:	08003e95 	.word	0x08003e95
 8003e14:	08003eb9 	.word	0x08003eb9
 8003e18:	08003eb9 	.word	0x08003eb9
 8003e1c:	08003eb9 	.word	0x08003eb9
 8003e20:	08003eb9 	.word	0x08003eb9
 8003e24:	08003eb9 	.word	0x08003eb9
 8003e28:	08003eb9 	.word	0x08003eb9
 8003e2c:	08003eb9 	.word	0x08003eb9
 8003e30:	08003ea7 	.word	0x08003ea7
 8003e34:	08003eb9 	.word	0x08003eb9
 8003e38:	08003eb9 	.word	0x08003eb9
 8003e3c:	08003eb9 	.word	0x08003eb9
 8003e40:	08003eb9 	.word	0x08003eb9
 8003e44:	08003eb9 	.word	0x08003eb9
 8003e48:	08003eb9 	.word	0x08003eb9
 8003e4c:	08003eb9 	.word	0x08003eb9
 8003e50:	08003ebf 	.word	0x08003ebf
 8003e54:	08003eb9 	.word	0x08003eb9
 8003e58:	08003eb9 	.word	0x08003eb9
 8003e5c:	08003eb9 	.word	0x08003eb9
 8003e60:	08003eb9 	.word	0x08003eb9
 8003e64:	08003eb9 	.word	0x08003eb9
 8003e68:	08003eb9 	.word	0x08003eb9
 8003e6c:	08003eb9 	.word	0x08003eb9
 8003e70:	08003ebf 	.word	0x08003ebf
 8003e74:	08003eb9 	.word	0x08003eb9
 8003e78:	08003eb9 	.word	0x08003eb9
 8003e7c:	08003eb9 	.word	0x08003eb9
 8003e80:	08003eb9 	.word	0x08003eb9
 8003e84:	08003eb9 	.word	0x08003eb9
 8003e88:	08003eb9 	.word	0x08003eb9
 8003e8c:	08003eb9 	.word	0x08003eb9
 8003e90:	08003ebf 	.word	0x08003ebf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3304      	adds	r3, #4
 8003e98:	2101      	movs	r1, #1
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fdf4 	bl	8004a88 <RCCEx_PLL2_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ea4:	e00c      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3324      	adds	r3, #36	; 0x24
 8003eaa:	2101      	movs	r1, #1
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fe9d 	bl	8004bec <RCCEx_PLL3_Config>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003eb6:	e003      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	75fb      	strb	r3, [r7, #23]
      break;
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ec6:	4b24      	ldr	r3, [pc, #144]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ed2:	4921      	ldr	r1, [pc, #132]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	654b      	str	r3, [r1, #84]	; 0x54
 8003ed8:	e001      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
 8003edc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d03e      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eee:	2b05      	cmp	r3, #5
 8003ef0:	d820      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003ef2:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef8:	08003f3b 	.word	0x08003f3b
 8003efc:	08003f11 	.word	0x08003f11
 8003f00:	08003f23 	.word	0x08003f23
 8003f04:	08003f3b 	.word	0x08003f3b
 8003f08:	08003f3b 	.word	0x08003f3b
 8003f0c:	08003f3b 	.word	0x08003f3b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3304      	adds	r3, #4
 8003f14:	2101      	movs	r1, #1
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fdb6 	bl	8004a88 <RCCEx_PLL2_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f20:	e00c      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3324      	adds	r3, #36	; 0x24
 8003f26:	2101      	movs	r1, #1
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fe5f 	bl	8004bec <RCCEx_PLL3_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f32:	e003      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	75fb      	strb	r3, [r7, #23]
      break;
 8003f38:	e000      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d110      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f42:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	f023 0207 	bic.w	r2, r3, #7
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4e:	4902      	ldr	r1, [pc, #8]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	654b      	str	r3, [r1, #84]	; 0x54
 8003f54:	e008      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003f56:	bf00      	nop
 8003f58:	58024400 	.word	0x58024400
 8003f5c:	58024800 	.word	0x58024800
 8003f60:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	7dfb      	ldrb	r3, [r7, #23]
 8003f66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d039      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7a:	2b05      	cmp	r3, #5
 8003f7c:	d820      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003f7e:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f84:	08003fc7 	.word	0x08003fc7
 8003f88:	08003f9d 	.word	0x08003f9d
 8003f8c:	08003faf 	.word	0x08003faf
 8003f90:	08003fc7 	.word	0x08003fc7
 8003f94:	08003fc7 	.word	0x08003fc7
 8003f98:	08003fc7 	.word	0x08003fc7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fd70 	bl	8004a88 <RCCEx_PLL2_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fac:	e00c      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3324      	adds	r3, #36	; 0x24
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fe19 	bl	8004bec <RCCEx_PLL3_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fbe:	e003      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fc4:	e000      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc8:	7dfb      	ldrb	r3, [r7, #23]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fce:	4bb7      	ldr	r3, [pc, #732]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd2:	f023 0207 	bic.w	r2, r3, #7
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fdc:	49b3      	ldr	r1, [pc, #716]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	658b      	str	r3, [r1, #88]	; 0x58
 8003fe2:	e001      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d04b      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ffe:	d02e      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004004:	d828      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400a:	d02a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800400c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004010:	d822      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004012:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004016:	d026      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004018:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800401c:	d81c      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800401e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004022:	d010      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004028:	d816      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d01d      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800402e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004032:	d111      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fd24 	bl	8004a88 <RCCEx_PLL2_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004044:	e012      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3324      	adds	r3, #36	; 0x24
 800404a:	2102      	movs	r1, #2
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fdcd 	bl	8004bec <RCCEx_PLL3_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004056:	e009      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	75fb      	strb	r3, [r7, #23]
      break;
 800405c:	e006      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800405e:	bf00      	nop
 8004060:	e004      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004062:	bf00      	nop
 8004064:	e002      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004066:	bf00      	nop
 8004068:	e000      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800406a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800406c:	7dfb      	ldrb	r3, [r7, #23]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004072:	4b8e      	ldr	r3, [pc, #568]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004076:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004080:	498a      	ldr	r1, [pc, #552]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004082:	4313      	orrs	r3, r2
 8004084:	654b      	str	r3, [r1, #84]	; 0x54
 8004086:	e001      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004088:	7dfb      	ldrb	r3, [r7, #23]
 800408a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	d04b      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800409e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040a2:	d02e      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80040a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040a8:	d828      	bhi.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80040aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ae:	d02a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80040b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b4:	d822      	bhi.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80040b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040ba:	d026      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80040bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040c0:	d81c      	bhi.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80040c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c6:	d010      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80040c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040cc:	d816      	bhi.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01d      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d6:	d111      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3304      	adds	r3, #4
 80040dc:	2100      	movs	r1, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fcd2 	bl	8004a88 <RCCEx_PLL2_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80040e8:	e012      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3324      	adds	r3, #36	; 0x24
 80040ee:	2102      	movs	r1, #2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fd7b 	bl	8004bec <RCCEx_PLL3_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80040fa:	e009      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004100:	e006      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004102:	bf00      	nop
 8004104:	e004      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004106:	bf00      	nop
 8004108:	e002      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800410a:	bf00      	nop
 800410c:	e000      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800410e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004116:	4b65      	ldr	r3, [pc, #404]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004124:	4961      	ldr	r1, [pc, #388]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004126:	4313      	orrs	r3, r2
 8004128:	658b      	str	r3, [r1, #88]	; 0x58
 800412a:	e001      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	7dfb      	ldrb	r3, [r7, #23]
 800412e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004138:	2b00      	cmp	r3, #0
 800413a:	d04b      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004142:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004146:	d02e      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004148:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800414c:	d828      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800414e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004152:	d02a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004158:	d822      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800415a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800415e:	d026      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004160:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004164:	d81c      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004166:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800416a:	d010      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800416c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004170:	d816      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01d      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800417a:	d111      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fc80 	bl	8004a88 <RCCEx_PLL2_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800418c:	e012      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3324      	adds	r3, #36	; 0x24
 8004192:	2102      	movs	r1, #2
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fd29 	bl	8004bec <RCCEx_PLL3_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800419e:	e009      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	75fb      	strb	r3, [r7, #23]
      break;
 80041a4:	e006      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041a6:	bf00      	nop
 80041a8:	e004      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041aa:	bf00      	nop
 80041ac:	e002      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041ae:	bf00      	nop
 80041b0:	e000      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10a      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041ba:	4b3c      	ldr	r3, [pc, #240]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041c8:	4938      	ldr	r1, [pc, #224]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	658b      	str	r3, [r1, #88]	; 0x58
 80041ce:	e001      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ea:	d10a      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3324      	adds	r3, #36	; 0x24
 80041f0:	2102      	movs	r1, #2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fcfa 	bl	8004bec <RCCEx_PLL3_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004202:	4b2a      	ldr	r3, [pc, #168]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004210:	4926      	ldr	r1, [pc, #152]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004212:	4313      	orrs	r3, r2
 8004214:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b00      	cmp	r3, #0
 8004220:	d01a      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800422c:	d10a      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3324      	adds	r3, #36	; 0x24
 8004232:	2102      	movs	r1, #2
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fcd9 	bl	8004bec <RCCEx_PLL3_Config>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004244:	4b19      	ldr	r3, [pc, #100]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004252:	4916      	ldr	r1, [pc, #88]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004254:	4313      	orrs	r3, r2
 8004256:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d036      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800426a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800426e:	d01f      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004274:	d817      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800427a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427e:	d009      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004280:	e011      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3304      	adds	r3, #4
 8004286:	2100      	movs	r1, #0
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fbfd 	bl	8004a88 <RCCEx_PLL2_Config>
 800428e:	4603      	mov	r3, r0
 8004290:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004292:	e00e      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3324      	adds	r3, #36	; 0x24
 8004298:	2102      	movs	r1, #2
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fca6 	bl	8004bec <RCCEx_PLL3_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80042a4:	e005      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	75fb      	strb	r3, [r7, #23]
      break;
 80042aa:	e002      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80042ac:	58024400 	.word	0x58024400
      break;
 80042b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042b8:	4b93      	ldr	r3, [pc, #588]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042c6:	4990      	ldr	r1, [pc, #576]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	658b      	str	r3, [r1, #88]	; 0x58
 80042cc:	e001      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
 80042d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d033      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042e8:	d01c      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80042ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042ee:	d816      	bhi.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80042f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042f4:	d003      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80042f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042fa:	d007      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80042fc:	e00f      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042fe:	4b82      	ldr	r3, [pc, #520]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	4a81      	ldr	r2, [pc, #516]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004308:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800430a:	e00c      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3324      	adds	r3, #36	; 0x24
 8004310:	2101      	movs	r1, #1
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fc6a 	bl	8004bec <RCCEx_PLL3_Config>
 8004318:	4603      	mov	r3, r0
 800431a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800431c:	e003      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	75fb      	strb	r3, [r7, #23]
      break;
 8004322:	e000      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004326:	7dfb      	ldrb	r3, [r7, #23]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10a      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800432c:	4b76      	ldr	r3, [pc, #472]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800432e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004330:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433a:	4973      	ldr	r1, [pc, #460]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800433c:	4313      	orrs	r3, r2
 800433e:	654b      	str	r3, [r1, #84]	; 0x54
 8004340:	e001      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004342:	7dfb      	ldrb	r3, [r7, #23]
 8004344:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d029      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800435a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800435e:	d007      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004360:	e00f      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004362:	4b69      	ldr	r3, [pc, #420]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004366:	4a68      	ldr	r2, [pc, #416]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800436c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800436e:	e00b      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3304      	adds	r3, #4
 8004374:	2102      	movs	r1, #2
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fb86 	bl	8004a88 <RCCEx_PLL2_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004380:	e002      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	75fb      	strb	r3, [r7, #23]
      break;
 8004386:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004388:	7dfb      	ldrb	r3, [r7, #23]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d109      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800438e:	4b5e      	ldr	r3, [pc, #376]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004392:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439a:	495b      	ldr	r1, [pc, #364]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800439c:	4313      	orrs	r3, r2
 800439e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80043a0:	e001      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a2:	7dfb      	ldrb	r3, [r7, #23]
 80043a4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3324      	adds	r3, #36	; 0x24
 80043b6:	2102      	movs	r1, #2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fc17 	bl	8004bec <RCCEx_PLL3_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d030      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043dc:	d017      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80043de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e2:	d811      	bhi.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80043e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e8:	d013      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80043ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ee:	d80b      	bhi.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d010      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80043f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f8:	d106      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043fa:	4b43      	ldr	r3, [pc, #268]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	4a42      	ldr	r2, [pc, #264]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004404:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004406:	e007      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	75fb      	strb	r3, [r7, #23]
      break;
 800440c:	e004      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800440e:	bf00      	nop
 8004410:	e002      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004412:	bf00      	nop
 8004414:	e000      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004416:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004418:	7dfb      	ldrb	r3, [r7, #23]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800441e:	4b3a      	ldr	r3, [pc, #232]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004422:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800442a:	4937      	ldr	r1, [pc, #220]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800442c:	4313      	orrs	r3, r2
 800442e:	654b      	str	r3, [r1, #84]	; 0x54
 8004430:	e001      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004432:	7dfb      	ldrb	r3, [r7, #23]
 8004434:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004442:	4b31      	ldr	r3, [pc, #196]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004446:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	492e      	ldr	r1, [pc, #184]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004450:	4313      	orrs	r3, r2
 8004452:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d009      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004460:	4b29      	ldr	r3, [pc, #164]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800446e:	4926      	ldr	r1, [pc, #152]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004470:	4313      	orrs	r3, r2
 8004472:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004480:	4b21      	ldr	r3, [pc, #132]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004484:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800448c:	491e      	ldr	r1, [pc, #120]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800448e:	4313      	orrs	r3, r2
 8004490:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00d      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800449e:	4b1a      	ldr	r3, [pc, #104]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	4a19      	ldr	r2, [pc, #100]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044a8:	6113      	str	r3, [r2, #16]
 80044aa:	4b17      	ldr	r3, [pc, #92]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044ac:	691a      	ldr	r2, [r3, #16]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80044b4:	4914      	ldr	r1, [pc, #80]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	da08      	bge.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044c2:	4b11      	ldr	r3, [pc, #68]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ce:	490e      	ldr	r1, [pc, #56]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d009      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044e0:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ee:	4906      	ldr	r1, [pc, #24]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80044f4:	7dbb      	ldrb	r3, [r7, #22]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e000      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	58024400 	.word	0x58024400

0800450c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004510:	f7ff f860 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	091b      	lsrs	r3, r3, #4
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	4904      	ldr	r1, [pc, #16]	; (8004534 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004522:	5ccb      	ldrb	r3, [r1, r3]
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	58024400 	.word	0x58024400
 8004534:	08007388 	.word	0x08007388

08004538 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004538:	b480      	push	{r7}
 800453a:	b089      	sub	sp, #36	; 0x24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004540:	4ba1      	ldr	r3, [pc, #644]	; (80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800454a:	4b9f      	ldr	r3, [pc, #636]	; (80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454e:	0b1b      	lsrs	r3, r3, #12
 8004550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004554:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004556:	4b9c      	ldr	r3, [pc, #624]	; (80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	091b      	lsrs	r3, r3, #4
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004562:	4b99      	ldr	r3, [pc, #612]	; (80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004566:	08db      	lsrs	r3, r3, #3
 8004568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	fb02 f303 	mul.w	r3, r2, r3
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8111 	beq.w	80047a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	2b02      	cmp	r3, #2
 800458a:	f000 8083 	beq.w	8004694 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	2b02      	cmp	r3, #2
 8004592:	f200 80a1 	bhi.w	80046d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d056      	beq.n	8004650 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80045a2:	e099      	b.n	80046d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045a4:	4b88      	ldr	r3, [pc, #544]	; (80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d02d      	beq.n	800460c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045b0:	4b85      	ldr	r3, [pc, #532]	; (80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	08db      	lsrs	r3, r3, #3
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	4a84      	ldr	r2, [pc, #528]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
 80045c0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	ee07 3a90 	vmov	s15, r3
 80045c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045da:	4b7b      	ldr	r3, [pc, #492]	; (80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004606:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800460a:	e087      	b.n	800471c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800461a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461e:	4b6a      	ldr	r3, [pc, #424]	; (80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004632:	eddf 5a67 	vldr	s11, [pc, #412]	; 80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800464e:	e065      	b.n	800471c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800465e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004662:	4b59      	ldr	r3, [pc, #356]	; (80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004672:	ed97 6a03 	vldr	s12, [r7, #12]
 8004676:	eddf 5a56 	vldr	s11, [pc, #344]	; 80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800467a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004692:	e043      	b.n	800471c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80046a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a6:	4b48      	ldr	r3, [pc, #288]	; (80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046d6:	e021      	b.n	800471c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ea:	4b37      	ldr	r3, [pc, #220]	; (80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80046fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800470a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800470e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004716:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800471a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800471c:	4b2a      	ldr	r3, [pc, #168]	; (80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	0a5b      	lsrs	r3, r3, #9
 8004722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004732:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004736:	edd7 6a07 	vldr	s13, [r7, #28]
 800473a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800473e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004742:	ee17 2a90 	vmov	r2, s15
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800474a:	4b1f      	ldr	r3, [pc, #124]	; (80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	0c1b      	lsrs	r3, r3, #16
 8004750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004754:	ee07 3a90 	vmov	s15, r3
 8004758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004760:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004764:	edd7 6a07 	vldr	s13, [r7, #28]
 8004768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800476c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004770:	ee17 2a90 	vmov	r2, s15
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004778:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	0e1b      	lsrs	r3, r3, #24
 800477e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800478e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004792:	edd7 6a07 	vldr	s13, [r7, #28]
 8004796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800479a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800479e:	ee17 2a90 	vmov	r2, s15
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047a6:	e008      	b.n	80047ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	609a      	str	r2, [r3, #8]
}
 80047ba:	bf00      	nop
 80047bc:	3724      	adds	r7, #36	; 0x24
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	58024400 	.word	0x58024400
 80047cc:	03d09000 	.word	0x03d09000
 80047d0:	46000000 	.word	0x46000000
 80047d4:	4c742400 	.word	0x4c742400
 80047d8:	4a742400 	.word	0x4a742400
 80047dc:	4bbebc20 	.word	0x4bbebc20

080047e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b089      	sub	sp, #36	; 0x24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047e8:	4ba1      	ldr	r3, [pc, #644]	; (8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80047f2:	4b9f      	ldr	r3, [pc, #636]	; (8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	0d1b      	lsrs	r3, r3, #20
 80047f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80047fe:	4b9c      	ldr	r3, [pc, #624]	; (8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	0a1b      	lsrs	r3, r3, #8
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800480a:	4b99      	ldr	r3, [pc, #612]	; (8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	08db      	lsrs	r3, r3, #3
 8004810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	fb02 f303 	mul.w	r3, r2, r3
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004822:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8111 	beq.w	8004a50 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b02      	cmp	r3, #2
 8004832:	f000 8083 	beq.w	800493c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b02      	cmp	r3, #2
 800483a:	f200 80a1 	bhi.w	8004980 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d056      	beq.n	80048f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800484a:	e099      	b.n	8004980 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800484c:	4b88      	ldr	r3, [pc, #544]	; (8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0320 	and.w	r3, r3, #32
 8004854:	2b00      	cmp	r3, #0
 8004856:	d02d      	beq.n	80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004858:	4b85      	ldr	r3, [pc, #532]	; (8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	08db      	lsrs	r3, r3, #3
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	4a84      	ldr	r2, [pc, #528]	; (8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
 8004868:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	ee07 3a90 	vmov	s15, r3
 8004870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004882:	4b7b      	ldr	r3, [pc, #492]	; (8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004892:	ed97 6a03 	vldr	s12, [r7, #12]
 8004896:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800489a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800489e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80048b2:	e087      	b.n	80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80048c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c6:	4b6a      	ldr	r3, [pc, #424]	; (8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048f6:	e065      	b.n	80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004902:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800490a:	4b59      	ldr	r3, [pc, #356]	; (8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800491a:	ed97 6a03 	vldr	s12, [r7, #12]
 800491e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800492a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800492e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004936:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800493a:	e043      	b.n	80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004946:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800494a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494e:	4b48      	ldr	r3, [pc, #288]	; (8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004962:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800496a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800497e:	e021      	b.n	80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800498e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004992:	4b37      	ldr	r3, [pc, #220]	; (8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80049c4:	4b2a      	ldr	r3, [pc, #168]	; (8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	0a5b      	lsrs	r3, r3, #9
 80049ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ce:	ee07 3a90 	vmov	s15, r3
 80049d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049de:	edd7 6a07 	vldr	s13, [r7, #28]
 80049e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ea:	ee17 2a90 	vmov	r2, s15
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80049f2:	4b1f      	ldr	r3, [pc, #124]	; (8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	0c1b      	lsrs	r3, r3, #16
 80049f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049fc:	ee07 3a90 	vmov	s15, r3
 8004a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a18:	ee17 2a90 	vmov	r2, s15
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004a20:	4b13      	ldr	r3, [pc, #76]	; (8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	0e1b      	lsrs	r3, r3, #24
 8004a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a46:	ee17 2a90 	vmov	r2, s15
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a4e:	e008      	b.n	8004a62 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	609a      	str	r2, [r3, #8]
}
 8004a62:	bf00      	nop
 8004a64:	3724      	adds	r7, #36	; 0x24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	58024400 	.word	0x58024400
 8004a74:	03d09000 	.word	0x03d09000
 8004a78:	46000000 	.word	0x46000000
 8004a7c:	4c742400 	.word	0x4c742400
 8004a80:	4a742400 	.word	0x4a742400
 8004a84:	4bbebc20 	.word	0x4bbebc20

08004a88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a96:	4b53      	ldr	r3, [pc, #332]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	d101      	bne.n	8004aa6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e099      	b.n	8004bda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004aa6:	4b4f      	ldr	r3, [pc, #316]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a4e      	ldr	r2, [pc, #312]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004aac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab2:	f7fd fb11 	bl	80020d8 <HAL_GetTick>
 8004ab6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ab8:	e008      	b.n	8004acc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004aba:	f7fd fb0d 	bl	80020d8 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e086      	b.n	8004bda <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004acc:	4b45      	ldr	r3, [pc, #276]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f0      	bne.n	8004aba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ad8:	4b42      	ldr	r3, [pc, #264]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004adc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	031b      	lsls	r3, r3, #12
 8004ae6:	493f      	ldr	r1, [pc, #252]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	628b      	str	r3, [r1, #40]	; 0x28
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	025b      	lsls	r3, r3, #9
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	041b      	lsls	r3, r3, #16
 8004b0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	061b      	lsls	r3, r3, #24
 8004b18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b1c:	4931      	ldr	r1, [pc, #196]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b22:	4b30      	ldr	r3, [pc, #192]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	492d      	ldr	r1, [pc, #180]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b34:	4b2b      	ldr	r3, [pc, #172]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	f023 0220 	bic.w	r2, r3, #32
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	4928      	ldr	r1, [pc, #160]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b46:	4b27      	ldr	r3, [pc, #156]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4a:	4a26      	ldr	r2, [pc, #152]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004b4c:	f023 0310 	bic.w	r3, r3, #16
 8004b50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b52:	4b24      	ldr	r3, [pc, #144]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004b54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b56:	4b24      	ldr	r3, [pc, #144]	; (8004be8 <RCCEx_PLL2_Config+0x160>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	69d2      	ldr	r2, [r2, #28]
 8004b5e:	00d2      	lsls	r2, r2, #3
 8004b60:	4920      	ldr	r1, [pc, #128]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b66:	4b1f      	ldr	r3, [pc, #124]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004b6c:	f043 0310 	orr.w	r3, r3, #16
 8004b70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d106      	bne.n	8004b86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b78:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004b7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b84:	e00f      	b.n	8004ba6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d106      	bne.n	8004b9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b8c:	4b15      	ldr	r3, [pc, #84]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	4a14      	ldr	r2, [pc, #80]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b98:	e005      	b.n	8004ba6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b9a:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	4a11      	ldr	r2, [pc, #68]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004ba0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ba4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ba6:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a0e      	ldr	r2, [pc, #56]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004bac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb2:	f7fd fa91 	bl	80020d8 <HAL_GetTick>
 8004bb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bb8:	e008      	b.n	8004bcc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004bba:	f7fd fa8d 	bl	80020d8 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e006      	b.n	8004bda <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bcc:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <RCCEx_PLL2_Config+0x15c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0f0      	beq.n	8004bba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	58024400 	.word	0x58024400
 8004be8:	ffff0007 	.word	0xffff0007

08004bec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bfa:	4b53      	ldr	r3, [pc, #332]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d101      	bne.n	8004c0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e099      	b.n	8004d3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c0a:	4b4f      	ldr	r3, [pc, #316]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a4e      	ldr	r2, [pc, #312]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c16:	f7fd fa5f 	bl	80020d8 <HAL_GetTick>
 8004c1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c1c:	e008      	b.n	8004c30 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c1e:	f7fd fa5b 	bl	80020d8 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e086      	b.n	8004d3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c30:	4b45      	ldr	r3, [pc, #276]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1f0      	bne.n	8004c1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c3c:	4b42      	ldr	r3, [pc, #264]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	051b      	lsls	r3, r3, #20
 8004c4a:	493f      	ldr	r1, [pc, #252]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	628b      	str	r3, [r1, #40]	; 0x28
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	025b      	lsls	r3, r3, #9
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	041b      	lsls	r3, r3, #16
 8004c6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	061b      	lsls	r3, r3, #24
 8004c7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c80:	4931      	ldr	r1, [pc, #196]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c86:	4b30      	ldr	r3, [pc, #192]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	492d      	ldr	r1, [pc, #180]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c98:	4b2b      	ldr	r3, [pc, #172]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	4928      	ldr	r1, [pc, #160]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004caa:	4b27      	ldr	r3, [pc, #156]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	4a26      	ldr	r2, [pc, #152]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004cb6:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cba:	4b24      	ldr	r3, [pc, #144]	; (8004d4c <RCCEx_PLL3_Config+0x160>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	69d2      	ldr	r2, [r2, #28]
 8004cc2:	00d2      	lsls	r2, r2, #3
 8004cc4:	4920      	ldr	r1, [pc, #128]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cca:	4b1f      	ldr	r3, [pc, #124]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cce:	4a1e      	ldr	r2, [pc, #120]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d106      	bne.n	8004cea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004cdc:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	4a19      	ldr	r2, [pc, #100]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004ce2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ce6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ce8:	e00f      	b.n	8004d0a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d106      	bne.n	8004cfe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004cf0:	4b15      	ldr	r3, [pc, #84]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	4a14      	ldr	r2, [pc, #80]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004cf6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cfc:	e005      	b.n	8004d0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004cfe:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	4a11      	ldr	r2, [pc, #68]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004d04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d0a:	4b0f      	ldr	r3, [pc, #60]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a0e      	ldr	r2, [pc, #56]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d16:	f7fd f9df 	bl	80020d8 <HAL_GetTick>
 8004d1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d1c:	e008      	b.n	8004d30 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d1e:	f7fd f9db 	bl	80020d8 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e006      	b.n	8004d3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d30:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <RCCEx_PLL3_Config+0x15c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f0      	beq.n	8004d1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	58024400 	.word	0x58024400
 8004d4c:	ffff0007 	.word	0xffff0007

08004d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e049      	b.n	8004df6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fc feaa 	bl	8001ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4610      	mov	r0, r2
 8004d90:	f000 fbb0 	bl	80054f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e049      	b.n	8004ea4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d106      	bne.n	8004e2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f841 	bl	8004eac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	f000 fb59 	bl	80054f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d109      	bne.n	8004ee4 <HAL_TIM_PWM_Start+0x24>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	bf14      	ite	ne
 8004edc:	2301      	movne	r3, #1
 8004ede:	2300      	moveq	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	e03c      	b.n	8004f5e <HAL_TIM_PWM_Start+0x9e>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d109      	bne.n	8004efe <HAL_TIM_PWM_Start+0x3e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	bf14      	ite	ne
 8004ef6:	2301      	movne	r3, #1
 8004ef8:	2300      	moveq	r3, #0
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	e02f      	b.n	8004f5e <HAL_TIM_PWM_Start+0x9e>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d109      	bne.n	8004f18 <HAL_TIM_PWM_Start+0x58>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	bf14      	ite	ne
 8004f10:	2301      	movne	r3, #1
 8004f12:	2300      	moveq	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	e022      	b.n	8004f5e <HAL_TIM_PWM_Start+0x9e>
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	2b0c      	cmp	r3, #12
 8004f1c:	d109      	bne.n	8004f32 <HAL_TIM_PWM_Start+0x72>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	bf14      	ite	ne
 8004f2a:	2301      	movne	r3, #1
 8004f2c:	2300      	moveq	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	e015      	b.n	8004f5e <HAL_TIM_PWM_Start+0x9e>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b10      	cmp	r3, #16
 8004f36:	d109      	bne.n	8004f4c <HAL_TIM_PWM_Start+0x8c>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	bf14      	ite	ne
 8004f44:	2301      	movne	r3, #1
 8004f46:	2300      	moveq	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	e008      	b.n	8004f5e <HAL_TIM_PWM_Start+0x9e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	bf14      	ite	ne
 8004f58:	2301      	movne	r3, #1
 8004f5a:	2300      	moveq	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e0a1      	b.n	80050aa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d104      	bne.n	8004f76 <HAL_TIM_PWM_Start+0xb6>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f74:	e023      	b.n	8004fbe <HAL_TIM_PWM_Start+0xfe>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d104      	bne.n	8004f86 <HAL_TIM_PWM_Start+0xc6>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f84:	e01b      	b.n	8004fbe <HAL_TIM_PWM_Start+0xfe>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d104      	bne.n	8004f96 <HAL_TIM_PWM_Start+0xd6>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f94:	e013      	b.n	8004fbe <HAL_TIM_PWM_Start+0xfe>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b0c      	cmp	r3, #12
 8004f9a:	d104      	bne.n	8004fa6 <HAL_TIM_PWM_Start+0xe6>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fa4:	e00b      	b.n	8004fbe <HAL_TIM_PWM_Start+0xfe>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b10      	cmp	r3, #16
 8004faa:	d104      	bne.n	8004fb6 <HAL_TIM_PWM_Start+0xf6>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fb4:	e003      	b.n	8004fbe <HAL_TIM_PWM_Start+0xfe>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	6839      	ldr	r1, [r7, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fea2 	bl	8005d10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a38      	ldr	r2, [pc, #224]	; (80050b4 <HAL_TIM_PWM_Start+0x1f4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d013      	beq.n	8004ffe <HAL_TIM_PWM_Start+0x13e>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a37      	ldr	r2, [pc, #220]	; (80050b8 <HAL_TIM_PWM_Start+0x1f8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00e      	beq.n	8004ffe <HAL_TIM_PWM_Start+0x13e>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a35      	ldr	r2, [pc, #212]	; (80050bc <HAL_TIM_PWM_Start+0x1fc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d009      	beq.n	8004ffe <HAL_TIM_PWM_Start+0x13e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a34      	ldr	r2, [pc, #208]	; (80050c0 <HAL_TIM_PWM_Start+0x200>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <HAL_TIM_PWM_Start+0x13e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a32      	ldr	r2, [pc, #200]	; (80050c4 <HAL_TIM_PWM_Start+0x204>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d101      	bne.n	8005002 <HAL_TIM_PWM_Start+0x142>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <HAL_TIM_PWM_Start+0x144>
 8005002:	2300      	movs	r3, #0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005016:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a25      	ldr	r2, [pc, #148]	; (80050b4 <HAL_TIM_PWM_Start+0x1f4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d022      	beq.n	8005068 <HAL_TIM_PWM_Start+0x1a8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502a:	d01d      	beq.n	8005068 <HAL_TIM_PWM_Start+0x1a8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a25      	ldr	r2, [pc, #148]	; (80050c8 <HAL_TIM_PWM_Start+0x208>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d018      	beq.n	8005068 <HAL_TIM_PWM_Start+0x1a8>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a24      	ldr	r2, [pc, #144]	; (80050cc <HAL_TIM_PWM_Start+0x20c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <HAL_TIM_PWM_Start+0x1a8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a22      	ldr	r2, [pc, #136]	; (80050d0 <HAL_TIM_PWM_Start+0x210>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00e      	beq.n	8005068 <HAL_TIM_PWM_Start+0x1a8>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1a      	ldr	r2, [pc, #104]	; (80050b8 <HAL_TIM_PWM_Start+0x1f8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d009      	beq.n	8005068 <HAL_TIM_PWM_Start+0x1a8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1e      	ldr	r2, [pc, #120]	; (80050d4 <HAL_TIM_PWM_Start+0x214>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <HAL_TIM_PWM_Start+0x1a8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a16      	ldr	r2, [pc, #88]	; (80050bc <HAL_TIM_PWM_Start+0x1fc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d115      	bne.n	8005094 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	4b1a      	ldr	r3, [pc, #104]	; (80050d8 <HAL_TIM_PWM_Start+0x218>)
 8005070:	4013      	ands	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b06      	cmp	r3, #6
 8005078:	d015      	beq.n	80050a6 <HAL_TIM_PWM_Start+0x1e6>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005080:	d011      	beq.n	80050a6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005092:	e008      	b.n	80050a6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	e000      	b.n	80050a8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40010400 	.word	0x40010400
 80050bc:	40014000 	.word	0x40014000
 80050c0:	40014400 	.word	0x40014400
 80050c4:	40014800 	.word	0x40014800
 80050c8:	40000400 	.word	0x40000400
 80050cc:	40000800 	.word	0x40000800
 80050d0:	40000c00 	.word	0x40000c00
 80050d4:	40001800 	.word	0x40001800
 80050d8:	00010007 	.word	0x00010007

080050dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e0ff      	b.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b14      	cmp	r3, #20
 8005106:	f200 80f0 	bhi.w	80052ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800510a:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005110:	08005165 	.word	0x08005165
 8005114:	080052eb 	.word	0x080052eb
 8005118:	080052eb 	.word	0x080052eb
 800511c:	080052eb 	.word	0x080052eb
 8005120:	080051a5 	.word	0x080051a5
 8005124:	080052eb 	.word	0x080052eb
 8005128:	080052eb 	.word	0x080052eb
 800512c:	080052eb 	.word	0x080052eb
 8005130:	080051e7 	.word	0x080051e7
 8005134:	080052eb 	.word	0x080052eb
 8005138:	080052eb 	.word	0x080052eb
 800513c:	080052eb 	.word	0x080052eb
 8005140:	08005227 	.word	0x08005227
 8005144:	080052eb 	.word	0x080052eb
 8005148:	080052eb 	.word	0x080052eb
 800514c:	080052eb 	.word	0x080052eb
 8005150:	08005269 	.word	0x08005269
 8005154:	080052eb 	.word	0x080052eb
 8005158:	080052eb 	.word	0x080052eb
 800515c:	080052eb 	.word	0x080052eb
 8005160:	080052a9 	.word	0x080052a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68b9      	ldr	r1, [r7, #8]
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fa5c 	bl	8005628 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699a      	ldr	r2, [r3, #24]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0208 	orr.w	r2, r2, #8
 800517e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699a      	ldr	r2, [r3, #24]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0204 	bic.w	r2, r2, #4
 800518e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6999      	ldr	r1, [r3, #24]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	619a      	str	r2, [r3, #24]
      break;
 80051a2:	e0a5      	b.n	80052f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 facc 	bl	8005748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699a      	ldr	r2, [r3, #24]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6999      	ldr	r1, [r3, #24]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	021a      	lsls	r2, r3, #8
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	619a      	str	r2, [r3, #24]
      break;
 80051e4:	e084      	b.n	80052f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68b9      	ldr	r1, [r7, #8]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fb35 	bl	800585c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69da      	ldr	r2, [r3, #28]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f042 0208 	orr.w	r2, r2, #8
 8005200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69da      	ldr	r2, [r3, #28]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0204 	bic.w	r2, r2, #4
 8005210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69d9      	ldr	r1, [r3, #28]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	691a      	ldr	r2, [r3, #16]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	61da      	str	r2, [r3, #28]
      break;
 8005224:	e064      	b.n	80052f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68b9      	ldr	r1, [r7, #8]
 800522c:	4618      	mov	r0, r3
 800522e:	f000 fb9d 	bl	800596c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69da      	ldr	r2, [r3, #28]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69d9      	ldr	r1, [r3, #28]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	021a      	lsls	r2, r3, #8
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	61da      	str	r2, [r3, #28]
      break;
 8005266:	e043      	b.n	80052f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68b9      	ldr	r1, [r7, #8]
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fbe6 	bl	8005a40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0208 	orr.w	r2, r2, #8
 8005282:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0204 	bic.w	r2, r2, #4
 8005292:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052a6:	e023      	b.n	80052f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fc2a 	bl	8005b08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	021a      	lsls	r2, r3, #8
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052e8:	e002      	b.n	80052f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	75fb      	strb	r3, [r7, #23]
      break;
 80052ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop

08005304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005318:	2b01      	cmp	r3, #1
 800531a:	d101      	bne.n	8005320 <HAL_TIM_ConfigClockSource+0x1c>
 800531c:	2302      	movs	r3, #2
 800531e:	e0dc      	b.n	80054da <HAL_TIM_ConfigClockSource+0x1d6>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	4b6a      	ldr	r3, [pc, #424]	; (80054e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800533c:	4013      	ands	r3, r2
 800533e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005346:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a64      	ldr	r2, [pc, #400]	; (80054e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005356:	4293      	cmp	r3, r2
 8005358:	f000 80a9 	beq.w	80054ae <HAL_TIM_ConfigClockSource+0x1aa>
 800535c:	4a62      	ldr	r2, [pc, #392]	; (80054e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	f200 80ae 	bhi.w	80054c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005364:	4a61      	ldr	r2, [pc, #388]	; (80054ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	f000 80a1 	beq.w	80054ae <HAL_TIM_ConfigClockSource+0x1aa>
 800536c:	4a5f      	ldr	r2, [pc, #380]	; (80054ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	f200 80a6 	bhi.w	80054c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005374:	4a5e      	ldr	r2, [pc, #376]	; (80054f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005376:	4293      	cmp	r3, r2
 8005378:	f000 8099 	beq.w	80054ae <HAL_TIM_ConfigClockSource+0x1aa>
 800537c:	4a5c      	ldr	r2, [pc, #368]	; (80054f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800537e:	4293      	cmp	r3, r2
 8005380:	f200 809e 	bhi.w	80054c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005384:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005388:	f000 8091 	beq.w	80054ae <HAL_TIM_ConfigClockSource+0x1aa>
 800538c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005390:	f200 8096 	bhi.w	80054c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005394:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005398:	f000 8089 	beq.w	80054ae <HAL_TIM_ConfigClockSource+0x1aa>
 800539c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053a0:	f200 808e 	bhi.w	80054c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80053a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a8:	d03e      	beq.n	8005428 <HAL_TIM_ConfigClockSource+0x124>
 80053aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ae:	f200 8087 	bhi.w	80054c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80053b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b6:	f000 8086 	beq.w	80054c6 <HAL_TIM_ConfigClockSource+0x1c2>
 80053ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053be:	d87f      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80053c0:	2b70      	cmp	r3, #112	; 0x70
 80053c2:	d01a      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0xf6>
 80053c4:	2b70      	cmp	r3, #112	; 0x70
 80053c6:	d87b      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80053c8:	2b60      	cmp	r3, #96	; 0x60
 80053ca:	d050      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x16a>
 80053cc:	2b60      	cmp	r3, #96	; 0x60
 80053ce:	d877      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80053d0:	2b50      	cmp	r3, #80	; 0x50
 80053d2:	d03c      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x14a>
 80053d4:	2b50      	cmp	r3, #80	; 0x50
 80053d6:	d873      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80053d8:	2b40      	cmp	r3, #64	; 0x40
 80053da:	d058      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x18a>
 80053dc:	2b40      	cmp	r3, #64	; 0x40
 80053de:	d86f      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80053e0:	2b30      	cmp	r3, #48	; 0x30
 80053e2:	d064      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x1aa>
 80053e4:	2b30      	cmp	r3, #48	; 0x30
 80053e6:	d86b      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d060      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x1aa>
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d867      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d05c      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x1aa>
 80053f4:	2b10      	cmp	r3, #16
 80053f6:	d05a      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x1aa>
 80053f8:	e062      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6899      	ldr	r1, [r3, #8]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f000 fc61 	bl	8005cd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800541c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	609a      	str	r2, [r3, #8]
      break;
 8005426:	e04f      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6818      	ldr	r0, [r3, #0]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	6899      	ldr	r1, [r3, #8]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f000 fc4a 	bl	8005cd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800544a:	609a      	str	r2, [r3, #8]
      break;
 800544c:	e03c      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	6859      	ldr	r1, [r3, #4]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	461a      	mov	r2, r3
 800545c:	f000 fbba 	bl	8005bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2150      	movs	r1, #80	; 0x50
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fc14 	bl	8005c94 <TIM_ITRx_SetConfig>
      break;
 800546c:	e02c      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6859      	ldr	r1, [r3, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	461a      	mov	r2, r3
 800547c:	f000 fbd9 	bl	8005c32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2160      	movs	r1, #96	; 0x60
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fc04 	bl	8005c94 <TIM_ITRx_SetConfig>
      break;
 800548c:	e01c      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6859      	ldr	r1, [r3, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	461a      	mov	r2, r3
 800549c:	f000 fb9a 	bl	8005bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2140      	movs	r1, #64	; 0x40
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fbf4 	bl	8005c94 <TIM_ITRx_SetConfig>
      break;
 80054ac:	e00c      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4619      	mov	r1, r3
 80054b8:	4610      	mov	r0, r2
 80054ba:	f000 fbeb 	bl	8005c94 <TIM_ITRx_SetConfig>
      break;
 80054be:	e003      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	73fb      	strb	r3, [r7, #15]
      break;
 80054c4:	e000      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80054c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	ffceff88 	.word	0xffceff88
 80054e8:	00100040 	.word	0x00100040
 80054ec:	00100030 	.word	0x00100030
 80054f0:	00100020 	.word	0x00100020

080054f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a40      	ldr	r2, [pc, #256]	; (8005608 <TIM_Base_SetConfig+0x114>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d013      	beq.n	8005534 <TIM_Base_SetConfig+0x40>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005512:	d00f      	beq.n	8005534 <TIM_Base_SetConfig+0x40>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a3d      	ldr	r2, [pc, #244]	; (800560c <TIM_Base_SetConfig+0x118>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00b      	beq.n	8005534 <TIM_Base_SetConfig+0x40>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a3c      	ldr	r2, [pc, #240]	; (8005610 <TIM_Base_SetConfig+0x11c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d007      	beq.n	8005534 <TIM_Base_SetConfig+0x40>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a3b      	ldr	r2, [pc, #236]	; (8005614 <TIM_Base_SetConfig+0x120>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_Base_SetConfig+0x40>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a3a      	ldr	r2, [pc, #232]	; (8005618 <TIM_Base_SetConfig+0x124>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d108      	bne.n	8005546 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a2f      	ldr	r2, [pc, #188]	; (8005608 <TIM_Base_SetConfig+0x114>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d01f      	beq.n	800558e <TIM_Base_SetConfig+0x9a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005554:	d01b      	beq.n	800558e <TIM_Base_SetConfig+0x9a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a2c      	ldr	r2, [pc, #176]	; (800560c <TIM_Base_SetConfig+0x118>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d017      	beq.n	800558e <TIM_Base_SetConfig+0x9a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a2b      	ldr	r2, [pc, #172]	; (8005610 <TIM_Base_SetConfig+0x11c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d013      	beq.n	800558e <TIM_Base_SetConfig+0x9a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a2a      	ldr	r2, [pc, #168]	; (8005614 <TIM_Base_SetConfig+0x120>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00f      	beq.n	800558e <TIM_Base_SetConfig+0x9a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a29      	ldr	r2, [pc, #164]	; (8005618 <TIM_Base_SetConfig+0x124>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00b      	beq.n	800558e <TIM_Base_SetConfig+0x9a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a28      	ldr	r2, [pc, #160]	; (800561c <TIM_Base_SetConfig+0x128>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d007      	beq.n	800558e <TIM_Base_SetConfig+0x9a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a27      	ldr	r2, [pc, #156]	; (8005620 <TIM_Base_SetConfig+0x12c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d003      	beq.n	800558e <TIM_Base_SetConfig+0x9a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a26      	ldr	r2, [pc, #152]	; (8005624 <TIM_Base_SetConfig+0x130>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d108      	bne.n	80055a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	4313      	orrs	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a10      	ldr	r2, [pc, #64]	; (8005608 <TIM_Base_SetConfig+0x114>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00f      	beq.n	80055ec <TIM_Base_SetConfig+0xf8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a12      	ldr	r2, [pc, #72]	; (8005618 <TIM_Base_SetConfig+0x124>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00b      	beq.n	80055ec <TIM_Base_SetConfig+0xf8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a11      	ldr	r2, [pc, #68]	; (800561c <TIM_Base_SetConfig+0x128>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d007      	beq.n	80055ec <TIM_Base_SetConfig+0xf8>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a10      	ldr	r2, [pc, #64]	; (8005620 <TIM_Base_SetConfig+0x12c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d003      	beq.n	80055ec <TIM_Base_SetConfig+0xf8>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a0f      	ldr	r2, [pc, #60]	; (8005624 <TIM_Base_SetConfig+0x130>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d103      	bne.n	80055f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	615a      	str	r2, [r3, #20]
}
 80055fa:	bf00      	nop
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40010000 	.word	0x40010000
 800560c:	40000400 	.word	0x40000400
 8005610:	40000800 	.word	0x40000800
 8005614:	40000c00 	.word	0x40000c00
 8005618:	40010400 	.word	0x40010400
 800561c:	40014000 	.word	0x40014000
 8005620:	40014400 	.word	0x40014400
 8005624:	40014800 	.word	0x40014800

08005628 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	f023 0201 	bic.w	r2, r3, #1
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4b37      	ldr	r3, [pc, #220]	; (8005730 <TIM_OC1_SetConfig+0x108>)
 8005654:	4013      	ands	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0303 	bic.w	r3, r3, #3
 800565e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f023 0302 	bic.w	r3, r3, #2
 8005670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a2d      	ldr	r2, [pc, #180]	; (8005734 <TIM_OC1_SetConfig+0x10c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00f      	beq.n	80056a4 <TIM_OC1_SetConfig+0x7c>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a2c      	ldr	r2, [pc, #176]	; (8005738 <TIM_OC1_SetConfig+0x110>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00b      	beq.n	80056a4 <TIM_OC1_SetConfig+0x7c>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a2b      	ldr	r2, [pc, #172]	; (800573c <TIM_OC1_SetConfig+0x114>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d007      	beq.n	80056a4 <TIM_OC1_SetConfig+0x7c>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a2a      	ldr	r2, [pc, #168]	; (8005740 <TIM_OC1_SetConfig+0x118>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_OC1_SetConfig+0x7c>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a29      	ldr	r2, [pc, #164]	; (8005744 <TIM_OC1_SetConfig+0x11c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d10c      	bne.n	80056be <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f023 0308 	bic.w	r3, r3, #8
 80056aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f023 0304 	bic.w	r3, r3, #4
 80056bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a1c      	ldr	r2, [pc, #112]	; (8005734 <TIM_OC1_SetConfig+0x10c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00f      	beq.n	80056e6 <TIM_OC1_SetConfig+0xbe>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a1b      	ldr	r2, [pc, #108]	; (8005738 <TIM_OC1_SetConfig+0x110>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00b      	beq.n	80056e6 <TIM_OC1_SetConfig+0xbe>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a1a      	ldr	r2, [pc, #104]	; (800573c <TIM_OC1_SetConfig+0x114>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d007      	beq.n	80056e6 <TIM_OC1_SetConfig+0xbe>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a19      	ldr	r2, [pc, #100]	; (8005740 <TIM_OC1_SetConfig+0x118>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d003      	beq.n	80056e6 <TIM_OC1_SetConfig+0xbe>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a18      	ldr	r2, [pc, #96]	; (8005744 <TIM_OC1_SetConfig+0x11c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d111      	bne.n	800570a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	621a      	str	r2, [r3, #32]
}
 8005724:	bf00      	nop
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	fffeff8f 	.word	0xfffeff8f
 8005734:	40010000 	.word	0x40010000
 8005738:	40010400 	.word	0x40010400
 800573c:	40014000 	.word	0x40014000
 8005740:	40014400 	.word	0x40014400
 8005744:	40014800 	.word	0x40014800

08005748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	f023 0210 	bic.w	r2, r3, #16
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4b34      	ldr	r3, [pc, #208]	; (8005844 <TIM_OC2_SetConfig+0xfc>)
 8005774:	4013      	ands	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800577e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	021b      	lsls	r3, r3, #8
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4313      	orrs	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f023 0320 	bic.w	r3, r3, #32
 8005792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a29      	ldr	r2, [pc, #164]	; (8005848 <TIM_OC2_SetConfig+0x100>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d003      	beq.n	80057b0 <TIM_OC2_SetConfig+0x68>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a28      	ldr	r2, [pc, #160]	; (800584c <TIM_OC2_SetConfig+0x104>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d10d      	bne.n	80057cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a1e      	ldr	r2, [pc, #120]	; (8005848 <TIM_OC2_SetConfig+0x100>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00f      	beq.n	80057f4 <TIM_OC2_SetConfig+0xac>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a1d      	ldr	r2, [pc, #116]	; (800584c <TIM_OC2_SetConfig+0x104>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00b      	beq.n	80057f4 <TIM_OC2_SetConfig+0xac>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a1c      	ldr	r2, [pc, #112]	; (8005850 <TIM_OC2_SetConfig+0x108>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d007      	beq.n	80057f4 <TIM_OC2_SetConfig+0xac>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a1b      	ldr	r2, [pc, #108]	; (8005854 <TIM_OC2_SetConfig+0x10c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_OC2_SetConfig+0xac>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a1a      	ldr	r2, [pc, #104]	; (8005858 <TIM_OC2_SetConfig+0x110>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d113      	bne.n	800581c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	621a      	str	r2, [r3, #32]
}
 8005836:	bf00      	nop
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	feff8fff 	.word	0xfeff8fff
 8005848:	40010000 	.word	0x40010000
 800584c:	40010400 	.word	0x40010400
 8005850:	40014000 	.word	0x40014000
 8005854:	40014400 	.word	0x40014400
 8005858:	40014800 	.word	0x40014800

0800585c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4b33      	ldr	r3, [pc, #204]	; (8005954 <TIM_OC3_SetConfig+0xf8>)
 8005888:	4013      	ands	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0303 	bic.w	r3, r3, #3
 8005892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a28      	ldr	r2, [pc, #160]	; (8005958 <TIM_OC3_SetConfig+0xfc>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d003      	beq.n	80058c2 <TIM_OC3_SetConfig+0x66>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a27      	ldr	r2, [pc, #156]	; (800595c <TIM_OC3_SetConfig+0x100>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d10d      	bne.n	80058de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	021b      	lsls	r3, r3, #8
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a1d      	ldr	r2, [pc, #116]	; (8005958 <TIM_OC3_SetConfig+0xfc>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00f      	beq.n	8005906 <TIM_OC3_SetConfig+0xaa>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a1c      	ldr	r2, [pc, #112]	; (800595c <TIM_OC3_SetConfig+0x100>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00b      	beq.n	8005906 <TIM_OC3_SetConfig+0xaa>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a1b      	ldr	r2, [pc, #108]	; (8005960 <TIM_OC3_SetConfig+0x104>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <TIM_OC3_SetConfig+0xaa>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a1a      	ldr	r2, [pc, #104]	; (8005964 <TIM_OC3_SetConfig+0x108>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_OC3_SetConfig+0xaa>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a19      	ldr	r2, [pc, #100]	; (8005968 <TIM_OC3_SetConfig+0x10c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d113      	bne.n	800592e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800590c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	621a      	str	r2, [r3, #32]
}
 8005948:	bf00      	nop
 800594a:	371c      	adds	r7, #28
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	fffeff8f 	.word	0xfffeff8f
 8005958:	40010000 	.word	0x40010000
 800595c:	40010400 	.word	0x40010400
 8005960:	40014000 	.word	0x40014000
 8005964:	40014400 	.word	0x40014400
 8005968:	40014800 	.word	0x40014800

0800596c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4b24      	ldr	r3, [pc, #144]	; (8005a28 <TIM_OC4_SetConfig+0xbc>)
 8005998:	4013      	ands	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	021b      	lsls	r3, r3, #8
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	031b      	lsls	r3, r3, #12
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a19      	ldr	r2, [pc, #100]	; (8005a2c <TIM_OC4_SetConfig+0xc0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00f      	beq.n	80059ec <TIM_OC4_SetConfig+0x80>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a18      	ldr	r2, [pc, #96]	; (8005a30 <TIM_OC4_SetConfig+0xc4>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00b      	beq.n	80059ec <TIM_OC4_SetConfig+0x80>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a17      	ldr	r2, [pc, #92]	; (8005a34 <TIM_OC4_SetConfig+0xc8>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d007      	beq.n	80059ec <TIM_OC4_SetConfig+0x80>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a16      	ldr	r2, [pc, #88]	; (8005a38 <TIM_OC4_SetConfig+0xcc>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d003      	beq.n	80059ec <TIM_OC4_SetConfig+0x80>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a15      	ldr	r2, [pc, #84]	; (8005a3c <TIM_OC4_SetConfig+0xd0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d109      	bne.n	8005a00 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	019b      	lsls	r3, r3, #6
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	621a      	str	r2, [r3, #32]
}
 8005a1a:	bf00      	nop
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	feff8fff 	.word	0xfeff8fff
 8005a2c:	40010000 	.word	0x40010000
 8005a30:	40010400 	.word	0x40010400
 8005a34:	40014000 	.word	0x40014000
 8005a38:	40014400 	.word	0x40014400
 8005a3c:	40014800 	.word	0x40014800

08005a40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4b21      	ldr	r3, [pc, #132]	; (8005af0 <TIM_OC5_SetConfig+0xb0>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	041b      	lsls	r3, r3, #16
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a18      	ldr	r2, [pc, #96]	; (8005af4 <TIM_OC5_SetConfig+0xb4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00f      	beq.n	8005ab6 <TIM_OC5_SetConfig+0x76>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a17      	ldr	r2, [pc, #92]	; (8005af8 <TIM_OC5_SetConfig+0xb8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00b      	beq.n	8005ab6 <TIM_OC5_SetConfig+0x76>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a16      	ldr	r2, [pc, #88]	; (8005afc <TIM_OC5_SetConfig+0xbc>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d007      	beq.n	8005ab6 <TIM_OC5_SetConfig+0x76>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a15      	ldr	r2, [pc, #84]	; (8005b00 <TIM_OC5_SetConfig+0xc0>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d003      	beq.n	8005ab6 <TIM_OC5_SetConfig+0x76>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a14      	ldr	r2, [pc, #80]	; (8005b04 <TIM_OC5_SetConfig+0xc4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d109      	bne.n	8005aca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005abc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	021b      	lsls	r3, r3, #8
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	621a      	str	r2, [r3, #32]
}
 8005ae4:	bf00      	nop
 8005ae6:	371c      	adds	r7, #28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	fffeff8f 	.word	0xfffeff8f
 8005af4:	40010000 	.word	0x40010000
 8005af8:	40010400 	.word	0x40010400
 8005afc:	40014000 	.word	0x40014000
 8005b00:	40014400 	.word	0x40014400
 8005b04:	40014800 	.word	0x40014800

08005b08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4b22      	ldr	r3, [pc, #136]	; (8005bbc <TIM_OC6_SetConfig+0xb4>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	021b      	lsls	r3, r3, #8
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	051b      	lsls	r3, r3, #20
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a19      	ldr	r2, [pc, #100]	; (8005bc0 <TIM_OC6_SetConfig+0xb8>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00f      	beq.n	8005b80 <TIM_OC6_SetConfig+0x78>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a18      	ldr	r2, [pc, #96]	; (8005bc4 <TIM_OC6_SetConfig+0xbc>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00b      	beq.n	8005b80 <TIM_OC6_SetConfig+0x78>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a17      	ldr	r2, [pc, #92]	; (8005bc8 <TIM_OC6_SetConfig+0xc0>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d007      	beq.n	8005b80 <TIM_OC6_SetConfig+0x78>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a16      	ldr	r2, [pc, #88]	; (8005bcc <TIM_OC6_SetConfig+0xc4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d003      	beq.n	8005b80 <TIM_OC6_SetConfig+0x78>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a15      	ldr	r2, [pc, #84]	; (8005bd0 <TIM_OC6_SetConfig+0xc8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d109      	bne.n	8005b94 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	029b      	lsls	r3, r3, #10
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	621a      	str	r2, [r3, #32]
}
 8005bae:	bf00      	nop
 8005bb0:	371c      	adds	r7, #28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	feff8fff 	.word	0xfeff8fff
 8005bc0:	40010000 	.word	0x40010000
 8005bc4:	40010400 	.word	0x40010400
 8005bc8:	40014000 	.word	0x40014000
 8005bcc:	40014400 	.word	0x40014400
 8005bd0:	40014800 	.word	0x40014800

08005bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f023 0201 	bic.w	r2, r3, #1
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f023 030a 	bic.w	r3, r3, #10
 8005c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	621a      	str	r2, [r3, #32]
}
 8005c26:	bf00      	nop
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b087      	sub	sp, #28
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f023 0210 	bic.w	r2, r3, #16
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	031b      	lsls	r3, r3, #12
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	621a      	str	r2, [r3, #32]
}
 8005c86:	bf00      	nop
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
	...

08005c94 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4b09      	ldr	r3, [pc, #36]	; (8005ccc <TIM_ITRx_SetConfig+0x38>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f043 0307 	orr.w	r3, r3, #7
 8005cb6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	609a      	str	r2, [r3, #8]
}
 8005cbe:	bf00      	nop
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	ffcfff8f 	.word	0xffcfff8f

08005cd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	021a      	lsls	r2, r3, #8
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	609a      	str	r2, [r3, #8]
}
 8005d04:	bf00      	nop
 8005d06:	371c      	adds	r7, #28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f003 031f 	and.w	r3, r3, #31
 8005d22:	2201      	movs	r2, #1
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6a1a      	ldr	r2, [r3, #32]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	43db      	mvns	r3, r3
 8005d32:	401a      	ands	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a1a      	ldr	r2, [r3, #32]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f003 031f 	and.w	r3, r3, #31
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	fa01 f303 	lsl.w	r3, r1, r3
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
	...

08005d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d101      	bne.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d70:	2302      	movs	r3, #2
 8005d72:	e06d      	b.n	8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a30      	ldr	r2, [pc, #192]	; (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d004      	beq.n	8005da8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a2f      	ldr	r2, [pc, #188]	; (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d108      	bne.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005dae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a20      	ldr	r2, [pc, #128]	; (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d022      	beq.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de6:	d01d      	beq.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a1d      	ldr	r2, [pc, #116]	; (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d018      	beq.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a1c      	ldr	r2, [pc, #112]	; (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d013      	beq.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1a      	ldr	r2, [pc, #104]	; (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00e      	beq.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a15      	ldr	r2, [pc, #84]	; (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d009      	beq.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a16      	ldr	r2, [pc, #88]	; (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d004      	beq.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a15      	ldr	r2, [pc, #84]	; (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d10c      	bne.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	40010000 	.word	0x40010000
 8005e60:	40010400 	.word	0x40010400
 8005e64:	40000400 	.word	0x40000400
 8005e68:	40000800 	.word	0x40000800
 8005e6c:	40000c00 	.word	0x40000c00
 8005e70:	40001800 	.word	0x40001800
 8005e74:	40014000 	.word	0x40014000

08005e78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e065      	b.n	8005f60 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	041b      	lsls	r3, r3, #16
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a16      	ldr	r2, [pc, #88]	; (8005f6c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d004      	beq.n	8005f22 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a14      	ldr	r2, [pc, #80]	; (8005f70 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d115      	bne.n	8005f4e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	051b      	lsls	r3, r3, #20
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	40010000 	.word	0x40010000
 8005f70:	40010400 	.word	0x40010400

08005f74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e042      	b.n	800600c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d106      	bne.n	8005f9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7fb fe39 	bl	8001c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2224      	movs	r2, #36	; 0x24
 8005fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0201 	bic.w	r2, r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f996 	bl	80062e8 <UART_SetConfig>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e022      	b.n	800600c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 feea 	bl	8006da8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fe2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689a      	ldr	r2, [r3, #8]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ff2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f042 0201 	orr.w	r2, r2, #1
 8006002:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 ff71 	bl	8006eec <UART_CheckIdleState>
 800600a:	4603      	mov	r3, r0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08a      	sub	sp, #40	; 0x28
 8006018:	af02      	add	r7, sp, #8
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	603b      	str	r3, [r7, #0]
 8006020:	4613      	mov	r3, r2
 8006022:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800602a:	2b20      	cmp	r3, #32
 800602c:	f040 8083 	bne.w	8006136 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <HAL_UART_Transmit+0x28>
 8006036:	88fb      	ldrh	r3, [r7, #6]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e07b      	b.n	8006138 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006046:	2b01      	cmp	r3, #1
 8006048:	d101      	bne.n	800604e <HAL_UART_Transmit+0x3a>
 800604a:	2302      	movs	r3, #2
 800604c:	e074      	b.n	8006138 <HAL_UART_Transmit+0x124>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2221      	movs	r2, #33	; 0x21
 8006062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006066:	f7fc f837 	bl	80020d8 <HAL_GetTick>
 800606a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	88fa      	ldrh	r2, [r7, #6]
 8006070:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	88fa      	ldrh	r2, [r7, #6]
 8006078:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006084:	d108      	bne.n	8006098 <HAL_UART_Transmit+0x84>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d104      	bne.n	8006098 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800608e:	2300      	movs	r3, #0
 8006090:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	61bb      	str	r3, [r7, #24]
 8006096:	e003      	b.n	80060a0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800609c:	2300      	movs	r3, #0
 800609e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80060a8:	e02c      	b.n	8006104 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2200      	movs	r2, #0
 80060b2:	2180      	movs	r1, #128	; 0x80
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 ff64 	bl	8006f82 <UART_WaitOnFlagUntilTimeout>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e039      	b.n	8006138 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10b      	bne.n	80060e2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	3302      	adds	r3, #2
 80060de:	61bb      	str	r3, [r7, #24]
 80060e0:	e007      	b.n	80060f2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	781a      	ldrb	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	3301      	adds	r3, #1
 80060f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800610a:	b29b      	uxth	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1cc      	bne.n	80060aa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2200      	movs	r2, #0
 8006118:	2140      	movs	r1, #64	; 0x40
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 ff31 	bl	8006f82 <UART_WaitOnFlagUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e006      	b.n	8006138 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2220      	movs	r2, #32
 800612e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	e000      	b.n	8006138 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006136:	2302      	movs	r3, #2
  }
}
 8006138:	4618      	mov	r0, r3
 800613a:	3720      	adds	r7, #32
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08a      	sub	sp, #40	; 0x28
 8006144:	af02      	add	r7, sp, #8
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	603b      	str	r3, [r7, #0]
 800614c:	4613      	mov	r3, r2
 800614e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006156:	2b20      	cmp	r3, #32
 8006158:	f040 80c0 	bne.w	80062dc <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <HAL_UART_Receive+0x28>
 8006162:	88fb      	ldrh	r3, [r7, #6]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e0b8      	b.n	80062de <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <HAL_UART_Receive+0x3a>
 8006176:	2302      	movs	r3, #2
 8006178:	e0b1      	b.n	80062de <HAL_UART_Receive+0x19e>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2222      	movs	r2, #34	; 0x22
 800618e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006198:	f7fb ff9e 	bl	80020d8 <HAL_GetTick>
 800619c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	88fa      	ldrh	r2, [r7, #6]
 80061a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	88fa      	ldrh	r2, [r7, #6]
 80061aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b6:	d10e      	bne.n	80061d6 <HAL_UART_Receive+0x96>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d105      	bne.n	80061cc <HAL_UART_Receive+0x8c>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80061c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061ca:	e02d      	b.n	8006228 <HAL_UART_Receive+0xe8>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	22ff      	movs	r2, #255	; 0xff
 80061d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061d4:	e028      	b.n	8006228 <HAL_UART_Receive+0xe8>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10d      	bne.n	80061fa <HAL_UART_Receive+0xba>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d104      	bne.n	80061f0 <HAL_UART_Receive+0xb0>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	22ff      	movs	r2, #255	; 0xff
 80061ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061ee:	e01b      	b.n	8006228 <HAL_UART_Receive+0xe8>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	227f      	movs	r2, #127	; 0x7f
 80061f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061f8:	e016      	b.n	8006228 <HAL_UART_Receive+0xe8>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006202:	d10d      	bne.n	8006220 <HAL_UART_Receive+0xe0>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <HAL_UART_Receive+0xd6>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	227f      	movs	r2, #127	; 0x7f
 8006210:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006214:	e008      	b.n	8006228 <HAL_UART_Receive+0xe8>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	223f      	movs	r2, #63	; 0x3f
 800621a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800621e:	e003      	b.n	8006228 <HAL_UART_Receive+0xe8>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800622e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006238:	d108      	bne.n	800624c <HAL_UART_Receive+0x10c>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d104      	bne.n	800624c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8006242:	2300      	movs	r3, #0
 8006244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	61bb      	str	r3, [r7, #24]
 800624a:	e003      	b.n	8006254 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006250:	2300      	movs	r3, #0
 8006252:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800625c:	e032      	b.n	80062c4 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2200      	movs	r2, #0
 8006266:	2120      	movs	r1, #32
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 fe8a 	bl	8006f82 <UART_WaitOnFlagUntilTimeout>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e032      	b.n	80062de <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10c      	bne.n	8006298 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	b29a      	uxth	r2, r3
 8006286:	8a7b      	ldrh	r3, [r7, #18]
 8006288:	4013      	ands	r3, r2
 800628a:	b29a      	uxth	r2, r3
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	3302      	adds	r3, #2
 8006294:	61bb      	str	r3, [r7, #24]
 8006296:	e00c      	b.n	80062b2 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	8a7b      	ldrh	r3, [r7, #18]
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	4013      	ands	r3, r2
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	3301      	adds	r3, #1
 80062b0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1c6      	bne.n	800625e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80062d8:	2300      	movs	r3, #0
 80062da:	e000      	b.n	80062de <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80062dc:	2302      	movs	r3, #2
  }
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3720      	adds	r7, #32
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062e8:	b5b0      	push	{r4, r5, r7, lr}
 80062ea:	b08e      	sub	sp, #56	; 0x38
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	4313      	orrs	r3, r2
 800630c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	4bbf      	ldr	r3, [pc, #764]	; (8006614 <UART_SetConfig+0x32c>)
 8006316:	4013      	ands	r3, r2
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6812      	ldr	r2, [r2, #0]
 800631c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800631e:	430b      	orrs	r3, r1
 8006320:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4ab5      	ldr	r2, [pc, #724]	; (8006618 <UART_SetConfig+0x330>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d004      	beq.n	8006352 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800634e:	4313      	orrs	r3, r2
 8006350:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	4bb0      	ldr	r3, [pc, #704]	; (800661c <UART_SetConfig+0x334>)
 800635a:	4013      	ands	r3, r2
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006362:	430b      	orrs	r3, r1
 8006364:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	f023 010f 	bic.w	r1, r3, #15
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4aa7      	ldr	r2, [pc, #668]	; (8006620 <UART_SetConfig+0x338>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d176      	bne.n	8006474 <UART_SetConfig+0x18c>
 8006386:	4ba7      	ldr	r3, [pc, #668]	; (8006624 <UART_SetConfig+0x33c>)
 8006388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800638e:	2b28      	cmp	r3, #40	; 0x28
 8006390:	d86c      	bhi.n	800646c <UART_SetConfig+0x184>
 8006392:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <UART_SetConfig+0xb0>)
 8006394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006398:	0800643d 	.word	0x0800643d
 800639c:	0800646d 	.word	0x0800646d
 80063a0:	0800646d 	.word	0x0800646d
 80063a4:	0800646d 	.word	0x0800646d
 80063a8:	0800646d 	.word	0x0800646d
 80063ac:	0800646d 	.word	0x0800646d
 80063b0:	0800646d 	.word	0x0800646d
 80063b4:	0800646d 	.word	0x0800646d
 80063b8:	08006445 	.word	0x08006445
 80063bc:	0800646d 	.word	0x0800646d
 80063c0:	0800646d 	.word	0x0800646d
 80063c4:	0800646d 	.word	0x0800646d
 80063c8:	0800646d 	.word	0x0800646d
 80063cc:	0800646d 	.word	0x0800646d
 80063d0:	0800646d 	.word	0x0800646d
 80063d4:	0800646d 	.word	0x0800646d
 80063d8:	0800644d 	.word	0x0800644d
 80063dc:	0800646d 	.word	0x0800646d
 80063e0:	0800646d 	.word	0x0800646d
 80063e4:	0800646d 	.word	0x0800646d
 80063e8:	0800646d 	.word	0x0800646d
 80063ec:	0800646d 	.word	0x0800646d
 80063f0:	0800646d 	.word	0x0800646d
 80063f4:	0800646d 	.word	0x0800646d
 80063f8:	08006455 	.word	0x08006455
 80063fc:	0800646d 	.word	0x0800646d
 8006400:	0800646d 	.word	0x0800646d
 8006404:	0800646d 	.word	0x0800646d
 8006408:	0800646d 	.word	0x0800646d
 800640c:	0800646d 	.word	0x0800646d
 8006410:	0800646d 	.word	0x0800646d
 8006414:	0800646d 	.word	0x0800646d
 8006418:	0800645d 	.word	0x0800645d
 800641c:	0800646d 	.word	0x0800646d
 8006420:	0800646d 	.word	0x0800646d
 8006424:	0800646d 	.word	0x0800646d
 8006428:	0800646d 	.word	0x0800646d
 800642c:	0800646d 	.word	0x0800646d
 8006430:	0800646d 	.word	0x0800646d
 8006434:	0800646d 	.word	0x0800646d
 8006438:	08006465 	.word	0x08006465
 800643c:	2301      	movs	r3, #1
 800643e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006442:	e222      	b.n	800688a <UART_SetConfig+0x5a2>
 8006444:	2304      	movs	r3, #4
 8006446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800644a:	e21e      	b.n	800688a <UART_SetConfig+0x5a2>
 800644c:	2308      	movs	r3, #8
 800644e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006452:	e21a      	b.n	800688a <UART_SetConfig+0x5a2>
 8006454:	2310      	movs	r3, #16
 8006456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800645a:	e216      	b.n	800688a <UART_SetConfig+0x5a2>
 800645c:	2320      	movs	r3, #32
 800645e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006462:	e212      	b.n	800688a <UART_SetConfig+0x5a2>
 8006464:	2340      	movs	r3, #64	; 0x40
 8006466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800646a:	e20e      	b.n	800688a <UART_SetConfig+0x5a2>
 800646c:	2380      	movs	r3, #128	; 0x80
 800646e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006472:	e20a      	b.n	800688a <UART_SetConfig+0x5a2>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a6b      	ldr	r2, [pc, #428]	; (8006628 <UART_SetConfig+0x340>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d130      	bne.n	80064e0 <UART_SetConfig+0x1f8>
 800647e:	4b69      	ldr	r3, [pc, #420]	; (8006624 <UART_SetConfig+0x33c>)
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	2b05      	cmp	r3, #5
 8006488:	d826      	bhi.n	80064d8 <UART_SetConfig+0x1f0>
 800648a:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <UART_SetConfig+0x1a8>)
 800648c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006490:	080064a9 	.word	0x080064a9
 8006494:	080064b1 	.word	0x080064b1
 8006498:	080064b9 	.word	0x080064b9
 800649c:	080064c1 	.word	0x080064c1
 80064a0:	080064c9 	.word	0x080064c9
 80064a4:	080064d1 	.word	0x080064d1
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ae:	e1ec      	b.n	800688a <UART_SetConfig+0x5a2>
 80064b0:	2304      	movs	r3, #4
 80064b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064b6:	e1e8      	b.n	800688a <UART_SetConfig+0x5a2>
 80064b8:	2308      	movs	r3, #8
 80064ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064be:	e1e4      	b.n	800688a <UART_SetConfig+0x5a2>
 80064c0:	2310      	movs	r3, #16
 80064c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064c6:	e1e0      	b.n	800688a <UART_SetConfig+0x5a2>
 80064c8:	2320      	movs	r3, #32
 80064ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ce:	e1dc      	b.n	800688a <UART_SetConfig+0x5a2>
 80064d0:	2340      	movs	r3, #64	; 0x40
 80064d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064d6:	e1d8      	b.n	800688a <UART_SetConfig+0x5a2>
 80064d8:	2380      	movs	r3, #128	; 0x80
 80064da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064de:	e1d4      	b.n	800688a <UART_SetConfig+0x5a2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a51      	ldr	r2, [pc, #324]	; (800662c <UART_SetConfig+0x344>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d130      	bne.n	800654c <UART_SetConfig+0x264>
 80064ea:	4b4e      	ldr	r3, [pc, #312]	; (8006624 <UART_SetConfig+0x33c>)
 80064ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	2b05      	cmp	r3, #5
 80064f4:	d826      	bhi.n	8006544 <UART_SetConfig+0x25c>
 80064f6:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <UART_SetConfig+0x214>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	08006515 	.word	0x08006515
 8006500:	0800651d 	.word	0x0800651d
 8006504:	08006525 	.word	0x08006525
 8006508:	0800652d 	.word	0x0800652d
 800650c:	08006535 	.word	0x08006535
 8006510:	0800653d 	.word	0x0800653d
 8006514:	2300      	movs	r3, #0
 8006516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800651a:	e1b6      	b.n	800688a <UART_SetConfig+0x5a2>
 800651c:	2304      	movs	r3, #4
 800651e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006522:	e1b2      	b.n	800688a <UART_SetConfig+0x5a2>
 8006524:	2308      	movs	r3, #8
 8006526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800652a:	e1ae      	b.n	800688a <UART_SetConfig+0x5a2>
 800652c:	2310      	movs	r3, #16
 800652e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006532:	e1aa      	b.n	800688a <UART_SetConfig+0x5a2>
 8006534:	2320      	movs	r3, #32
 8006536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800653a:	e1a6      	b.n	800688a <UART_SetConfig+0x5a2>
 800653c:	2340      	movs	r3, #64	; 0x40
 800653e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006542:	e1a2      	b.n	800688a <UART_SetConfig+0x5a2>
 8006544:	2380      	movs	r3, #128	; 0x80
 8006546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800654a:	e19e      	b.n	800688a <UART_SetConfig+0x5a2>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a37      	ldr	r2, [pc, #220]	; (8006630 <UART_SetConfig+0x348>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d130      	bne.n	80065b8 <UART_SetConfig+0x2d0>
 8006556:	4b33      	ldr	r3, [pc, #204]	; (8006624 <UART_SetConfig+0x33c>)
 8006558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	2b05      	cmp	r3, #5
 8006560:	d826      	bhi.n	80065b0 <UART_SetConfig+0x2c8>
 8006562:	a201      	add	r2, pc, #4	; (adr r2, 8006568 <UART_SetConfig+0x280>)
 8006564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006568:	08006581 	.word	0x08006581
 800656c:	08006589 	.word	0x08006589
 8006570:	08006591 	.word	0x08006591
 8006574:	08006599 	.word	0x08006599
 8006578:	080065a1 	.word	0x080065a1
 800657c:	080065a9 	.word	0x080065a9
 8006580:	2300      	movs	r3, #0
 8006582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006586:	e180      	b.n	800688a <UART_SetConfig+0x5a2>
 8006588:	2304      	movs	r3, #4
 800658a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800658e:	e17c      	b.n	800688a <UART_SetConfig+0x5a2>
 8006590:	2308      	movs	r3, #8
 8006592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006596:	e178      	b.n	800688a <UART_SetConfig+0x5a2>
 8006598:	2310      	movs	r3, #16
 800659a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800659e:	e174      	b.n	800688a <UART_SetConfig+0x5a2>
 80065a0:	2320      	movs	r3, #32
 80065a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065a6:	e170      	b.n	800688a <UART_SetConfig+0x5a2>
 80065a8:	2340      	movs	r3, #64	; 0x40
 80065aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ae:	e16c      	b.n	800688a <UART_SetConfig+0x5a2>
 80065b0:	2380      	movs	r3, #128	; 0x80
 80065b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065b6:	e168      	b.n	800688a <UART_SetConfig+0x5a2>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a1d      	ldr	r2, [pc, #116]	; (8006634 <UART_SetConfig+0x34c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d142      	bne.n	8006648 <UART_SetConfig+0x360>
 80065c2:	4b18      	ldr	r3, [pc, #96]	; (8006624 <UART_SetConfig+0x33c>)
 80065c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	2b05      	cmp	r3, #5
 80065cc:	d838      	bhi.n	8006640 <UART_SetConfig+0x358>
 80065ce:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <UART_SetConfig+0x2ec>)
 80065d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d4:	080065ed 	.word	0x080065ed
 80065d8:	080065f5 	.word	0x080065f5
 80065dc:	080065fd 	.word	0x080065fd
 80065e0:	08006605 	.word	0x08006605
 80065e4:	0800660d 	.word	0x0800660d
 80065e8:	08006639 	.word	0x08006639
 80065ec:	2300      	movs	r3, #0
 80065ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065f2:	e14a      	b.n	800688a <UART_SetConfig+0x5a2>
 80065f4:	2304      	movs	r3, #4
 80065f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065fa:	e146      	b.n	800688a <UART_SetConfig+0x5a2>
 80065fc:	2308      	movs	r3, #8
 80065fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006602:	e142      	b.n	800688a <UART_SetConfig+0x5a2>
 8006604:	2310      	movs	r3, #16
 8006606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800660a:	e13e      	b.n	800688a <UART_SetConfig+0x5a2>
 800660c:	2320      	movs	r3, #32
 800660e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006612:	e13a      	b.n	800688a <UART_SetConfig+0x5a2>
 8006614:	cfff69f3 	.word	0xcfff69f3
 8006618:	58000c00 	.word	0x58000c00
 800661c:	11fff4ff 	.word	0x11fff4ff
 8006620:	40011000 	.word	0x40011000
 8006624:	58024400 	.word	0x58024400
 8006628:	40004400 	.word	0x40004400
 800662c:	40004800 	.word	0x40004800
 8006630:	40004c00 	.word	0x40004c00
 8006634:	40005000 	.word	0x40005000
 8006638:	2340      	movs	r3, #64	; 0x40
 800663a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800663e:	e124      	b.n	800688a <UART_SetConfig+0x5a2>
 8006640:	2380      	movs	r3, #128	; 0x80
 8006642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006646:	e120      	b.n	800688a <UART_SetConfig+0x5a2>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4acc      	ldr	r2, [pc, #816]	; (8006980 <UART_SetConfig+0x698>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d176      	bne.n	8006740 <UART_SetConfig+0x458>
 8006652:	4bcc      	ldr	r3, [pc, #816]	; (8006984 <UART_SetConfig+0x69c>)
 8006654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800665a:	2b28      	cmp	r3, #40	; 0x28
 800665c:	d86c      	bhi.n	8006738 <UART_SetConfig+0x450>
 800665e:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <UART_SetConfig+0x37c>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	08006709 	.word	0x08006709
 8006668:	08006739 	.word	0x08006739
 800666c:	08006739 	.word	0x08006739
 8006670:	08006739 	.word	0x08006739
 8006674:	08006739 	.word	0x08006739
 8006678:	08006739 	.word	0x08006739
 800667c:	08006739 	.word	0x08006739
 8006680:	08006739 	.word	0x08006739
 8006684:	08006711 	.word	0x08006711
 8006688:	08006739 	.word	0x08006739
 800668c:	08006739 	.word	0x08006739
 8006690:	08006739 	.word	0x08006739
 8006694:	08006739 	.word	0x08006739
 8006698:	08006739 	.word	0x08006739
 800669c:	08006739 	.word	0x08006739
 80066a0:	08006739 	.word	0x08006739
 80066a4:	08006719 	.word	0x08006719
 80066a8:	08006739 	.word	0x08006739
 80066ac:	08006739 	.word	0x08006739
 80066b0:	08006739 	.word	0x08006739
 80066b4:	08006739 	.word	0x08006739
 80066b8:	08006739 	.word	0x08006739
 80066bc:	08006739 	.word	0x08006739
 80066c0:	08006739 	.word	0x08006739
 80066c4:	08006721 	.word	0x08006721
 80066c8:	08006739 	.word	0x08006739
 80066cc:	08006739 	.word	0x08006739
 80066d0:	08006739 	.word	0x08006739
 80066d4:	08006739 	.word	0x08006739
 80066d8:	08006739 	.word	0x08006739
 80066dc:	08006739 	.word	0x08006739
 80066e0:	08006739 	.word	0x08006739
 80066e4:	08006729 	.word	0x08006729
 80066e8:	08006739 	.word	0x08006739
 80066ec:	08006739 	.word	0x08006739
 80066f0:	08006739 	.word	0x08006739
 80066f4:	08006739 	.word	0x08006739
 80066f8:	08006739 	.word	0x08006739
 80066fc:	08006739 	.word	0x08006739
 8006700:	08006739 	.word	0x08006739
 8006704:	08006731 	.word	0x08006731
 8006708:	2301      	movs	r3, #1
 800670a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800670e:	e0bc      	b.n	800688a <UART_SetConfig+0x5a2>
 8006710:	2304      	movs	r3, #4
 8006712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006716:	e0b8      	b.n	800688a <UART_SetConfig+0x5a2>
 8006718:	2308      	movs	r3, #8
 800671a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800671e:	e0b4      	b.n	800688a <UART_SetConfig+0x5a2>
 8006720:	2310      	movs	r3, #16
 8006722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006726:	e0b0      	b.n	800688a <UART_SetConfig+0x5a2>
 8006728:	2320      	movs	r3, #32
 800672a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800672e:	e0ac      	b.n	800688a <UART_SetConfig+0x5a2>
 8006730:	2340      	movs	r3, #64	; 0x40
 8006732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006736:	e0a8      	b.n	800688a <UART_SetConfig+0x5a2>
 8006738:	2380      	movs	r3, #128	; 0x80
 800673a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800673e:	e0a4      	b.n	800688a <UART_SetConfig+0x5a2>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a90      	ldr	r2, [pc, #576]	; (8006988 <UART_SetConfig+0x6a0>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d130      	bne.n	80067ac <UART_SetConfig+0x4c4>
 800674a:	4b8e      	ldr	r3, [pc, #568]	; (8006984 <UART_SetConfig+0x69c>)
 800674c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	2b05      	cmp	r3, #5
 8006754:	d826      	bhi.n	80067a4 <UART_SetConfig+0x4bc>
 8006756:	a201      	add	r2, pc, #4	; (adr r2, 800675c <UART_SetConfig+0x474>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	08006775 	.word	0x08006775
 8006760:	0800677d 	.word	0x0800677d
 8006764:	08006785 	.word	0x08006785
 8006768:	0800678d 	.word	0x0800678d
 800676c:	08006795 	.word	0x08006795
 8006770:	0800679d 	.word	0x0800679d
 8006774:	2300      	movs	r3, #0
 8006776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800677a:	e086      	b.n	800688a <UART_SetConfig+0x5a2>
 800677c:	2304      	movs	r3, #4
 800677e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006782:	e082      	b.n	800688a <UART_SetConfig+0x5a2>
 8006784:	2308      	movs	r3, #8
 8006786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800678a:	e07e      	b.n	800688a <UART_SetConfig+0x5a2>
 800678c:	2310      	movs	r3, #16
 800678e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006792:	e07a      	b.n	800688a <UART_SetConfig+0x5a2>
 8006794:	2320      	movs	r3, #32
 8006796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800679a:	e076      	b.n	800688a <UART_SetConfig+0x5a2>
 800679c:	2340      	movs	r3, #64	; 0x40
 800679e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067a2:	e072      	b.n	800688a <UART_SetConfig+0x5a2>
 80067a4:	2380      	movs	r3, #128	; 0x80
 80067a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067aa:	e06e      	b.n	800688a <UART_SetConfig+0x5a2>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a76      	ldr	r2, [pc, #472]	; (800698c <UART_SetConfig+0x6a4>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d130      	bne.n	8006818 <UART_SetConfig+0x530>
 80067b6:	4b73      	ldr	r3, [pc, #460]	; (8006984 <UART_SetConfig+0x69c>)
 80067b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	2b05      	cmp	r3, #5
 80067c0:	d826      	bhi.n	8006810 <UART_SetConfig+0x528>
 80067c2:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <UART_SetConfig+0x4e0>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067e1 	.word	0x080067e1
 80067cc:	080067e9 	.word	0x080067e9
 80067d0:	080067f1 	.word	0x080067f1
 80067d4:	080067f9 	.word	0x080067f9
 80067d8:	08006801 	.word	0x08006801
 80067dc:	08006809 	.word	0x08006809
 80067e0:	2300      	movs	r3, #0
 80067e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067e6:	e050      	b.n	800688a <UART_SetConfig+0x5a2>
 80067e8:	2304      	movs	r3, #4
 80067ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ee:	e04c      	b.n	800688a <UART_SetConfig+0x5a2>
 80067f0:	2308      	movs	r3, #8
 80067f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067f6:	e048      	b.n	800688a <UART_SetConfig+0x5a2>
 80067f8:	2310      	movs	r3, #16
 80067fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067fe:	e044      	b.n	800688a <UART_SetConfig+0x5a2>
 8006800:	2320      	movs	r3, #32
 8006802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006806:	e040      	b.n	800688a <UART_SetConfig+0x5a2>
 8006808:	2340      	movs	r3, #64	; 0x40
 800680a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800680e:	e03c      	b.n	800688a <UART_SetConfig+0x5a2>
 8006810:	2380      	movs	r3, #128	; 0x80
 8006812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006816:	e038      	b.n	800688a <UART_SetConfig+0x5a2>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a5c      	ldr	r2, [pc, #368]	; (8006990 <UART_SetConfig+0x6a8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d130      	bne.n	8006884 <UART_SetConfig+0x59c>
 8006822:	4b58      	ldr	r3, [pc, #352]	; (8006984 <UART_SetConfig+0x69c>)
 8006824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	2b05      	cmp	r3, #5
 800682c:	d826      	bhi.n	800687c <UART_SetConfig+0x594>
 800682e:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <UART_SetConfig+0x54c>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	0800684d 	.word	0x0800684d
 8006838:	08006855 	.word	0x08006855
 800683c:	0800685d 	.word	0x0800685d
 8006840:	08006865 	.word	0x08006865
 8006844:	0800686d 	.word	0x0800686d
 8006848:	08006875 	.word	0x08006875
 800684c:	2302      	movs	r3, #2
 800684e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006852:	e01a      	b.n	800688a <UART_SetConfig+0x5a2>
 8006854:	2304      	movs	r3, #4
 8006856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800685a:	e016      	b.n	800688a <UART_SetConfig+0x5a2>
 800685c:	2308      	movs	r3, #8
 800685e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006862:	e012      	b.n	800688a <UART_SetConfig+0x5a2>
 8006864:	2310      	movs	r3, #16
 8006866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800686a:	e00e      	b.n	800688a <UART_SetConfig+0x5a2>
 800686c:	2320      	movs	r3, #32
 800686e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006872:	e00a      	b.n	800688a <UART_SetConfig+0x5a2>
 8006874:	2340      	movs	r3, #64	; 0x40
 8006876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800687a:	e006      	b.n	800688a <UART_SetConfig+0x5a2>
 800687c:	2380      	movs	r3, #128	; 0x80
 800687e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006882:	e002      	b.n	800688a <UART_SetConfig+0x5a2>
 8006884:	2380      	movs	r3, #128	; 0x80
 8006886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a40      	ldr	r2, [pc, #256]	; (8006990 <UART_SetConfig+0x6a8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	f040 80ef 	bne.w	8006a74 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006896:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800689a:	2b20      	cmp	r3, #32
 800689c:	dc46      	bgt.n	800692c <UART_SetConfig+0x644>
 800689e:	2b02      	cmp	r3, #2
 80068a0:	f2c0 8081 	blt.w	80069a6 <UART_SetConfig+0x6be>
 80068a4:	3b02      	subs	r3, #2
 80068a6:	2b1e      	cmp	r3, #30
 80068a8:	d87d      	bhi.n	80069a6 <UART_SetConfig+0x6be>
 80068aa:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <UART_SetConfig+0x5c8>)
 80068ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b0:	08006933 	.word	0x08006933
 80068b4:	080069a7 	.word	0x080069a7
 80068b8:	0800693b 	.word	0x0800693b
 80068bc:	080069a7 	.word	0x080069a7
 80068c0:	080069a7 	.word	0x080069a7
 80068c4:	080069a7 	.word	0x080069a7
 80068c8:	0800694b 	.word	0x0800694b
 80068cc:	080069a7 	.word	0x080069a7
 80068d0:	080069a7 	.word	0x080069a7
 80068d4:	080069a7 	.word	0x080069a7
 80068d8:	080069a7 	.word	0x080069a7
 80068dc:	080069a7 	.word	0x080069a7
 80068e0:	080069a7 	.word	0x080069a7
 80068e4:	080069a7 	.word	0x080069a7
 80068e8:	0800695b 	.word	0x0800695b
 80068ec:	080069a7 	.word	0x080069a7
 80068f0:	080069a7 	.word	0x080069a7
 80068f4:	080069a7 	.word	0x080069a7
 80068f8:	080069a7 	.word	0x080069a7
 80068fc:	080069a7 	.word	0x080069a7
 8006900:	080069a7 	.word	0x080069a7
 8006904:	080069a7 	.word	0x080069a7
 8006908:	080069a7 	.word	0x080069a7
 800690c:	080069a7 	.word	0x080069a7
 8006910:	080069a7 	.word	0x080069a7
 8006914:	080069a7 	.word	0x080069a7
 8006918:	080069a7 	.word	0x080069a7
 800691c:	080069a7 	.word	0x080069a7
 8006920:	080069a7 	.word	0x080069a7
 8006924:	080069a7 	.word	0x080069a7
 8006928:	08006999 	.word	0x08006999
 800692c:	2b40      	cmp	r3, #64	; 0x40
 800692e:	d036      	beq.n	800699e <UART_SetConfig+0x6b6>
 8006930:	e039      	b.n	80069a6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006932:	f7fd fdeb 	bl	800450c <HAL_RCCEx_GetD3PCLK1Freq>
 8006936:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006938:	e03b      	b.n	80069b2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800693a:	f107 0314 	add.w	r3, r7, #20
 800693e:	4618      	mov	r0, r3
 8006940:	f7fd fdfa 	bl	8004538 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006948:	e033      	b.n	80069b2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800694a:	f107 0308 	add.w	r3, r7, #8
 800694e:	4618      	mov	r0, r3
 8006950:	f7fd ff46 	bl	80047e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006958:	e02b      	b.n	80069b2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800695a:	4b0a      	ldr	r3, [pc, #40]	; (8006984 <UART_SetConfig+0x69c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0320 	and.w	r3, r3, #32
 8006962:	2b00      	cmp	r3, #0
 8006964:	d009      	beq.n	800697a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006966:	4b07      	ldr	r3, [pc, #28]	; (8006984 <UART_SetConfig+0x69c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	08db      	lsrs	r3, r3, #3
 800696c:	f003 0303 	and.w	r3, r3, #3
 8006970:	4a08      	ldr	r2, [pc, #32]	; (8006994 <UART_SetConfig+0x6ac>)
 8006972:	fa22 f303 	lsr.w	r3, r2, r3
 8006976:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006978:	e01b      	b.n	80069b2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800697a:	4b06      	ldr	r3, [pc, #24]	; (8006994 <UART_SetConfig+0x6ac>)
 800697c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800697e:	e018      	b.n	80069b2 <UART_SetConfig+0x6ca>
 8006980:	40011400 	.word	0x40011400
 8006984:	58024400 	.word	0x58024400
 8006988:	40007800 	.word	0x40007800
 800698c:	40007c00 	.word	0x40007c00
 8006990:	58000c00 	.word	0x58000c00
 8006994:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006998:	4bc4      	ldr	r3, [pc, #784]	; (8006cac <UART_SetConfig+0x9c4>)
 800699a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800699c:	e009      	b.n	80069b2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800699e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069a4:	e005      	b.n	80069b2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80069b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 81da 	beq.w	8006d6e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	4abc      	ldr	r2, [pc, #752]	; (8006cb0 <UART_SetConfig+0x9c8>)
 80069c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069c4:	461a      	mov	r2, r3
 80069c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80069cc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	4613      	mov	r3, r2
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	4413      	add	r3, r2
 80069d8:	6a3a      	ldr	r2, [r7, #32]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d305      	bcc.n	80069ea <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069e4:	6a3a      	ldr	r2, [r7, #32]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d903      	bls.n	80069f2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80069f0:	e1bd      	b.n	8006d6e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	4618      	mov	r0, r3
 80069f6:	f04f 0100 	mov.w	r1, #0
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	4aac      	ldr	r2, [pc, #688]	; (8006cb0 <UART_SetConfig+0x9c8>)
 8006a00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	f04f 0300 	mov.w	r3, #0
 8006a0a:	f7f9 fc65 	bl	80002d8 <__aeabi_uldivmod>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	4610      	mov	r0, r2
 8006a14:	4619      	mov	r1, r3
 8006a16:	f04f 0200 	mov.w	r2, #0
 8006a1a:	f04f 0300 	mov.w	r3, #0
 8006a1e:	020b      	lsls	r3, r1, #8
 8006a20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a24:	0202      	lsls	r2, r0, #8
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	6849      	ldr	r1, [r1, #4]
 8006a2a:	0849      	lsrs	r1, r1, #1
 8006a2c:	4608      	mov	r0, r1
 8006a2e:	f04f 0100 	mov.w	r1, #0
 8006a32:	1814      	adds	r4, r2, r0
 8006a34:	eb43 0501 	adc.w	r5, r3, r1
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	f04f 0300 	mov.w	r3, #0
 8006a42:	4620      	mov	r0, r4
 8006a44:	4629      	mov	r1, r5
 8006a46:	f7f9 fc47 	bl	80002d8 <__aeabi_uldivmod>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4613      	mov	r3, r2
 8006a50:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a58:	d308      	bcc.n	8006a6c <UART_SetConfig+0x784>
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a60:	d204      	bcs.n	8006a6c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a68:	60da      	str	r2, [r3, #12]
 8006a6a:	e180      	b.n	8006d6e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006a72:	e17c      	b.n	8006d6e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a7c:	f040 80be 	bne.w	8006bfc <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8006a80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	dc49      	bgt.n	8006b1c <UART_SetConfig+0x834>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	db7c      	blt.n	8006b86 <UART_SetConfig+0x89e>
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d87a      	bhi.n	8006b86 <UART_SetConfig+0x89e>
 8006a90:	a201      	add	r2, pc, #4	; (adr r2, 8006a98 <UART_SetConfig+0x7b0>)
 8006a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a96:	bf00      	nop
 8006a98:	08006b23 	.word	0x08006b23
 8006a9c:	08006b2b 	.word	0x08006b2b
 8006aa0:	08006b87 	.word	0x08006b87
 8006aa4:	08006b87 	.word	0x08006b87
 8006aa8:	08006b33 	.word	0x08006b33
 8006aac:	08006b87 	.word	0x08006b87
 8006ab0:	08006b87 	.word	0x08006b87
 8006ab4:	08006b87 	.word	0x08006b87
 8006ab8:	08006b43 	.word	0x08006b43
 8006abc:	08006b87 	.word	0x08006b87
 8006ac0:	08006b87 	.word	0x08006b87
 8006ac4:	08006b87 	.word	0x08006b87
 8006ac8:	08006b87 	.word	0x08006b87
 8006acc:	08006b87 	.word	0x08006b87
 8006ad0:	08006b87 	.word	0x08006b87
 8006ad4:	08006b87 	.word	0x08006b87
 8006ad8:	08006b53 	.word	0x08006b53
 8006adc:	08006b87 	.word	0x08006b87
 8006ae0:	08006b87 	.word	0x08006b87
 8006ae4:	08006b87 	.word	0x08006b87
 8006ae8:	08006b87 	.word	0x08006b87
 8006aec:	08006b87 	.word	0x08006b87
 8006af0:	08006b87 	.word	0x08006b87
 8006af4:	08006b87 	.word	0x08006b87
 8006af8:	08006b87 	.word	0x08006b87
 8006afc:	08006b87 	.word	0x08006b87
 8006b00:	08006b87 	.word	0x08006b87
 8006b04:	08006b87 	.word	0x08006b87
 8006b08:	08006b87 	.word	0x08006b87
 8006b0c:	08006b87 	.word	0x08006b87
 8006b10:	08006b87 	.word	0x08006b87
 8006b14:	08006b87 	.word	0x08006b87
 8006b18:	08006b79 	.word	0x08006b79
 8006b1c:	2b40      	cmp	r3, #64	; 0x40
 8006b1e:	d02e      	beq.n	8006b7e <UART_SetConfig+0x896>
 8006b20:	e031      	b.n	8006b86 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b22:	f7fc fd87 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 8006b26:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006b28:	e033      	b.n	8006b92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b2a:	f7fc fd99 	bl	8003660 <HAL_RCC_GetPCLK2Freq>
 8006b2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006b30:	e02f      	b.n	8006b92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b32:	f107 0314 	add.w	r3, r7, #20
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fd fcfe 	bl	8004538 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b40:	e027      	b.n	8006b92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b42:	f107 0308 	add.w	r3, r7, #8
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fd fe4a 	bl	80047e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b50:	e01f      	b.n	8006b92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b52:	4b58      	ldr	r3, [pc, #352]	; (8006cb4 <UART_SetConfig+0x9cc>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0320 	and.w	r3, r3, #32
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d009      	beq.n	8006b72 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b5e:	4b55      	ldr	r3, [pc, #340]	; (8006cb4 <UART_SetConfig+0x9cc>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	08db      	lsrs	r3, r3, #3
 8006b64:	f003 0303 	and.w	r3, r3, #3
 8006b68:	4a53      	ldr	r2, [pc, #332]	; (8006cb8 <UART_SetConfig+0x9d0>)
 8006b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b70:	e00f      	b.n	8006b92 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006b72:	4b51      	ldr	r3, [pc, #324]	; (8006cb8 <UART_SetConfig+0x9d0>)
 8006b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b76:	e00c      	b.n	8006b92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b78:	4b4c      	ldr	r3, [pc, #304]	; (8006cac <UART_SetConfig+0x9c4>)
 8006b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b7c:	e009      	b.n	8006b92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b84:	e005      	b.n	8006b92 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006b90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 80ea 	beq.w	8006d6e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	4a44      	ldr	r2, [pc, #272]	; (8006cb0 <UART_SetConfig+0x9c8>)
 8006ba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bac:	005a      	lsls	r2, r3, #1
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	085b      	lsrs	r3, r3, #1
 8006bb4:	441a      	add	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bbe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	2b0f      	cmp	r3, #15
 8006bc4:	d916      	bls.n	8006bf4 <UART_SetConfig+0x90c>
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bcc:	d212      	bcs.n	8006bf4 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	f023 030f 	bic.w	r3, r3, #15
 8006bd6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	085b      	lsrs	r3, r3, #1
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006be6:	4313      	orrs	r3, r2
 8006be8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006bf0:	60da      	str	r2, [r3, #12]
 8006bf2:	e0bc      	b.n	8006d6e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006bfa:	e0b8      	b.n	8006d6e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c00:	2b20      	cmp	r3, #32
 8006c02:	dc4b      	bgt.n	8006c9c <UART_SetConfig+0x9b4>
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f2c0 8087 	blt.w	8006d18 <UART_SetConfig+0xa30>
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	f200 8084 	bhi.w	8006d18 <UART_SetConfig+0xa30>
 8006c10:	a201      	add	r2, pc, #4	; (adr r2, 8006c18 <UART_SetConfig+0x930>)
 8006c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c16:	bf00      	nop
 8006c18:	08006ca3 	.word	0x08006ca3
 8006c1c:	08006cbd 	.word	0x08006cbd
 8006c20:	08006d19 	.word	0x08006d19
 8006c24:	08006d19 	.word	0x08006d19
 8006c28:	08006cc5 	.word	0x08006cc5
 8006c2c:	08006d19 	.word	0x08006d19
 8006c30:	08006d19 	.word	0x08006d19
 8006c34:	08006d19 	.word	0x08006d19
 8006c38:	08006cd5 	.word	0x08006cd5
 8006c3c:	08006d19 	.word	0x08006d19
 8006c40:	08006d19 	.word	0x08006d19
 8006c44:	08006d19 	.word	0x08006d19
 8006c48:	08006d19 	.word	0x08006d19
 8006c4c:	08006d19 	.word	0x08006d19
 8006c50:	08006d19 	.word	0x08006d19
 8006c54:	08006d19 	.word	0x08006d19
 8006c58:	08006ce5 	.word	0x08006ce5
 8006c5c:	08006d19 	.word	0x08006d19
 8006c60:	08006d19 	.word	0x08006d19
 8006c64:	08006d19 	.word	0x08006d19
 8006c68:	08006d19 	.word	0x08006d19
 8006c6c:	08006d19 	.word	0x08006d19
 8006c70:	08006d19 	.word	0x08006d19
 8006c74:	08006d19 	.word	0x08006d19
 8006c78:	08006d19 	.word	0x08006d19
 8006c7c:	08006d19 	.word	0x08006d19
 8006c80:	08006d19 	.word	0x08006d19
 8006c84:	08006d19 	.word	0x08006d19
 8006c88:	08006d19 	.word	0x08006d19
 8006c8c:	08006d19 	.word	0x08006d19
 8006c90:	08006d19 	.word	0x08006d19
 8006c94:	08006d19 	.word	0x08006d19
 8006c98:	08006d0b 	.word	0x08006d0b
 8006c9c:	2b40      	cmp	r3, #64	; 0x40
 8006c9e:	d037      	beq.n	8006d10 <UART_SetConfig+0xa28>
 8006ca0:	e03a      	b.n	8006d18 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ca2:	f7fc fcc7 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 8006ca6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006ca8:	e03c      	b.n	8006d24 <UART_SetConfig+0xa3c>
 8006caa:	bf00      	nop
 8006cac:	003d0900 	.word	0x003d0900
 8006cb0:	08007398 	.word	0x08007398
 8006cb4:	58024400 	.word	0x58024400
 8006cb8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cbc:	f7fc fcd0 	bl	8003660 <HAL_RCC_GetPCLK2Freq>
 8006cc0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006cc2:	e02f      	b.n	8006d24 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cc4:	f107 0314 	add.w	r3, r7, #20
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7fd fc35 	bl	8004538 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cd2:	e027      	b.n	8006d24 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cd4:	f107 0308 	add.w	r3, r7, #8
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fd fd81 	bl	80047e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ce2:	e01f      	b.n	8006d24 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ce4:	4b2c      	ldr	r3, [pc, #176]	; (8006d98 <UART_SetConfig+0xab0>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0320 	and.w	r3, r3, #32
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d009      	beq.n	8006d04 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cf0:	4b29      	ldr	r3, [pc, #164]	; (8006d98 <UART_SetConfig+0xab0>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	08db      	lsrs	r3, r3, #3
 8006cf6:	f003 0303 	and.w	r3, r3, #3
 8006cfa:	4a28      	ldr	r2, [pc, #160]	; (8006d9c <UART_SetConfig+0xab4>)
 8006cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d02:	e00f      	b.n	8006d24 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006d04:	4b25      	ldr	r3, [pc, #148]	; (8006d9c <UART_SetConfig+0xab4>)
 8006d06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d08:	e00c      	b.n	8006d24 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d0a:	4b25      	ldr	r3, [pc, #148]	; (8006da0 <UART_SetConfig+0xab8>)
 8006d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d0e:	e009      	b.n	8006d24 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d16:	e005      	b.n	8006d24 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006d22:	bf00      	nop
    }

    if (pclk != 0U)
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d021      	beq.n	8006d6e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	4a1d      	ldr	r2, [pc, #116]	; (8006da4 <UART_SetConfig+0xabc>)
 8006d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d34:	461a      	mov	r2, r3
 8006d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d38:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	085b      	lsrs	r3, r3, #1
 8006d42:	441a      	add	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d4c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	2b0f      	cmp	r3, #15
 8006d52:	d909      	bls.n	8006d68 <UART_SetConfig+0xa80>
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d5a:	d205      	bcs.n	8006d68 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60da      	str	r2, [r3, #12]
 8006d66:	e002      	b.n	8006d6e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006d8a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3738      	adds	r7, #56	; 0x38
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bdb0      	pop	{r4, r5, r7, pc}
 8006d96:	bf00      	nop
 8006d98:	58024400 	.word	0x58024400
 8006d9c:	03d09000 	.word	0x03d09000
 8006da0:	003d0900 	.word	0x003d0900
 8006da4:	08007398 	.word	0x08007398

08006da8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00a      	beq.n	8006e16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1a:	f003 0308 	and.w	r3, r3, #8
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3c:	f003 0310 	and.w	r3, r3, #16
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d01a      	beq.n	8006ebe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ea6:	d10a      	bne.n	8006ebe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	605a      	str	r2, [r3, #4]
  }
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af02      	add	r7, sp, #8
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006efc:	f7fb f8ec 	bl	80020d8 <HAL_GetTick>
 8006f00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0308 	and.w	r3, r3, #8
 8006f0c:	2b08      	cmp	r3, #8
 8006f0e:	d10e      	bne.n	8006f2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f82f 	bl	8006f82 <UART_WaitOnFlagUntilTimeout>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e025      	b.n	8006f7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d10e      	bne.n	8006f5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f819 	bl	8006f82 <UART_WaitOnFlagUntilTimeout>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e00f      	b.n	8006f7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b09c      	sub	sp, #112	; 0x70
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	60f8      	str	r0, [r7, #12]
 8006f8a:	60b9      	str	r1, [r7, #8]
 8006f8c:	603b      	str	r3, [r7, #0]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f92:	e0a9      	b.n	80070e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9a:	f000 80a5 	beq.w	80070e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f9e:	f7fb f89b 	bl	80020d8 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d302      	bcc.n	8006fb4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006fae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d140      	bne.n	8007036 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fc8:	667b      	str	r3, [r7, #100]	; 0x64
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fd4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e6      	bne.n	8006fb4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3308      	adds	r3, #8
 8006fec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff8:	f023 0301 	bic.w	r3, r3, #1
 8006ffc:	663b      	str	r3, [r7, #96]	; 0x60
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3308      	adds	r3, #8
 8007004:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007006:	64ba      	str	r2, [r7, #72]	; 0x48
 8007008:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800700c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e5      	bne.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2220      	movs	r2, #32
 800701e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2220      	movs	r2, #32
 8007026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e069      	b.n	800710a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b00      	cmp	r3, #0
 8007042:	d051      	beq.n	80070e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800704e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007052:	d149      	bne.n	80070e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800705c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	e853 3f00 	ldrex	r3, [r3]
 800706a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007072:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800707c:	637b      	str	r3, [r7, #52]	; 0x34
 800707e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007084:	e841 2300 	strex	r3, r2, [r1]
 8007088:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800708a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e6      	bne.n	800705e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3308      	adds	r3, #8
 8007096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	e853 3f00 	ldrex	r3, [r3]
 800709e:	613b      	str	r3, [r7, #16]
   return(result);
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f023 0301 	bic.w	r3, r3, #1
 80070a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3308      	adds	r3, #8
 80070ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070b0:	623a      	str	r2, [r7, #32]
 80070b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b4:	69f9      	ldr	r1, [r7, #28]
 80070b6:	6a3a      	ldr	r2, [r7, #32]
 80070b8:	e841 2300 	strex	r3, r2, [r1]
 80070bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e5      	bne.n	8007090 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2220      	movs	r2, #32
 80070d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e010      	b.n	800710a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	69da      	ldr	r2, [r3, #28]
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	4013      	ands	r3, r2
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	bf0c      	ite	eq
 80070f8:	2301      	moveq	r3, #1
 80070fa:	2300      	movne	r3, #0
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	461a      	mov	r2, r3
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	429a      	cmp	r2, r3
 8007104:	f43f af46 	beq.w	8006f94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3770      	adds	r7, #112	; 0x70
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007112:	b480      	push	{r7}
 8007114:	b085      	sub	sp, #20
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <HAL_UARTEx_DisableFifoMode+0x16>
 8007124:	2302      	movs	r3, #2
 8007126:	e027      	b.n	8007178 <HAL_UARTEx_DisableFifoMode+0x66>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2224      	movs	r2, #36	; 0x24
 8007134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0201 	bic.w	r2, r2, #1
 800714e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007156:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007194:	2b01      	cmp	r3, #1
 8007196:	d101      	bne.n	800719c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007198:	2302      	movs	r3, #2
 800719a:	e02d      	b.n	80071f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2224      	movs	r2, #36	; 0x24
 80071a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0201 	bic.w	r2, r2, #1
 80071c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f84f 	bl	800727c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007210:	2b01      	cmp	r3, #1
 8007212:	d101      	bne.n	8007218 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007214:	2302      	movs	r3, #2
 8007216:	e02d      	b.n	8007274 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2224      	movs	r2, #36	; 0x24
 8007224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 0201 	bic.w	r2, r2, #1
 800723e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	430a      	orrs	r2, r1
 8007252:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f811 	bl	800727c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2220      	movs	r2, #32
 8007266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007288:	2b00      	cmp	r3, #0
 800728a:	d108      	bne.n	800729e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800729c:	e031      	b.n	8007302 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800729e:	2310      	movs	r3, #16
 80072a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072a2:	2310      	movs	r3, #16
 80072a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	0e5b      	lsrs	r3, r3, #25
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	f003 0307 	and.w	r3, r3, #7
 80072b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	0f5b      	lsrs	r3, r3, #29
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072c6:	7bbb      	ldrb	r3, [r7, #14]
 80072c8:	7b3a      	ldrb	r2, [r7, #12]
 80072ca:	4911      	ldr	r1, [pc, #68]	; (8007310 <UARTEx_SetNbDataToProcess+0x94>)
 80072cc:	5c8a      	ldrb	r2, [r1, r2]
 80072ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072d2:	7b3a      	ldrb	r2, [r7, #12]
 80072d4:	490f      	ldr	r1, [pc, #60]	; (8007314 <UARTEx_SetNbDataToProcess+0x98>)
 80072d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80072dc:	b29a      	uxth	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
 80072e6:	7b7a      	ldrb	r2, [r7, #13]
 80072e8:	4909      	ldr	r1, [pc, #36]	; (8007310 <UARTEx_SetNbDataToProcess+0x94>)
 80072ea:	5c8a      	ldrb	r2, [r1, r2]
 80072ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072f0:	7b7a      	ldrb	r2, [r7, #13]
 80072f2:	4908      	ldr	r1, [pc, #32]	; (8007314 <UARTEx_SetNbDataToProcess+0x98>)
 80072f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007302:	bf00      	nop
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	080073b0 	.word	0x080073b0
 8007314:	080073b8 	.word	0x080073b8

08007318 <__libc_init_array>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	4d0d      	ldr	r5, [pc, #52]	; (8007350 <__libc_init_array+0x38>)
 800731c:	4c0d      	ldr	r4, [pc, #52]	; (8007354 <__libc_init_array+0x3c>)
 800731e:	1b64      	subs	r4, r4, r5
 8007320:	10a4      	asrs	r4, r4, #2
 8007322:	2600      	movs	r6, #0
 8007324:	42a6      	cmp	r6, r4
 8007326:	d109      	bne.n	800733c <__libc_init_array+0x24>
 8007328:	4d0b      	ldr	r5, [pc, #44]	; (8007358 <__libc_init_array+0x40>)
 800732a:	4c0c      	ldr	r4, [pc, #48]	; (800735c <__libc_init_array+0x44>)
 800732c:	f000 f820 	bl	8007370 <_init>
 8007330:	1b64      	subs	r4, r4, r5
 8007332:	10a4      	asrs	r4, r4, #2
 8007334:	2600      	movs	r6, #0
 8007336:	42a6      	cmp	r6, r4
 8007338:	d105      	bne.n	8007346 <__libc_init_array+0x2e>
 800733a:	bd70      	pop	{r4, r5, r6, pc}
 800733c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007340:	4798      	blx	r3
 8007342:	3601      	adds	r6, #1
 8007344:	e7ee      	b.n	8007324 <__libc_init_array+0xc>
 8007346:	f855 3b04 	ldr.w	r3, [r5], #4
 800734a:	4798      	blx	r3
 800734c:	3601      	adds	r6, #1
 800734e:	e7f2      	b.n	8007336 <__libc_init_array+0x1e>
 8007350:	080073c8 	.word	0x080073c8
 8007354:	080073c8 	.word	0x080073c8
 8007358:	080073c8 	.word	0x080073c8
 800735c:	080073cc 	.word	0x080073cc

08007360 <memset>:
 8007360:	4402      	add	r2, r0
 8007362:	4603      	mov	r3, r0
 8007364:	4293      	cmp	r3, r2
 8007366:	d100      	bne.n	800736a <memset+0xa>
 8007368:	4770      	bx	lr
 800736a:	f803 1b01 	strb.w	r1, [r3], #1
 800736e:	e7f9      	b.n	8007364 <memset+0x4>

08007370 <_init>:
 8007370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007372:	bf00      	nop
 8007374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007376:	bc08      	pop	{r3}
 8007378:	469e      	mov	lr, r3
 800737a:	4770      	bx	lr

0800737c <_fini>:
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737e:	bf00      	nop
 8007380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007382:	bc08      	pop	{r3}
 8007384:	469e      	mov	lr, r3
 8007386:	4770      	bx	lr
