
erche.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061d4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800646c  0800646c  0001646c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a4  080064a4  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080064a4  080064a4  000164a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064ac  080064ac  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064ac  080064ac  000164ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064b0  080064b0  000164b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  24000000  080064b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  24000018  080064cc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400028c  080064cc  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d8fa  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a9e  00000000  00000000  0003d940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  000403e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00041390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000365d3  00000000  00000000  00042288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014229  00000000  00000000  0007885b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001618e6  00000000  00000000  0008ca84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ee36a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c8  00000000  00000000  001ee3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006454 	.word	0x08006454

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	08006454 	.word	0x08006454

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fe58 	bl	8001288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f840 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 fb2e 	bl	8000c3c <MX_GPIO_Init>
  MX_TIM8_Init();
 80005e0:	f000 f978 	bl	80008d4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80005e4:	f000 fa46 	bl	8000a74 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 fa90 	bl	8000b0c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005ec:	f000 f8a2 	bl	8000734 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80005f0:	f000 fad8 	bl	8000ba4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80005f4:	2100      	movs	r1, #0
 80005f6:	4815      	ldr	r0, [pc, #84]	; (800064c <main+0x7c>)
 80005f8:	f003 fda8 	bl	800414c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80005fc:	2104      	movs	r1, #4
 80005fe:	4813      	ldr	r0, [pc, #76]	; (800064c <main+0x7c>)
 8000600:	f003 fda4 	bl	800414c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000604:	2108      	movs	r1, #8
 8000606:	4811      	ldr	r0, [pc, #68]	; (800064c <main+0x7c>)
 8000608:	f003 fda0 	bl	800414c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 800060c:	210c      	movs	r1, #12
 800060e:	480f      	ldr	r0, [pc, #60]	; (800064c <main+0x7c>)
 8000610:	f003 fd9c 	bl	800414c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8000614:	2100      	movs	r1, #0
 8000616:	480e      	ldr	r0, [pc, #56]	; (8000650 <main+0x80>)
 8000618:	f003 fd98 	bl	800414c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 800061c:	2104      	movs	r1, #4
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <main+0x80>)
 8000620:	f003 fd94 	bl	800414c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 8000624:	2108      	movs	r1, #8
 8000626:	480a      	ldr	r0, [pc, #40]	; (8000650 <main+0x80>)
 8000628:	f003 fd90 	bl	800414c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);
 800062c:	210c      	movs	r1, #12
 800062e:	4808      	ldr	r0, [pc, #32]	; (8000650 <main+0x80>)
 8000630:	f003 fd8c 	bl	800414c <HAL_TIM_PWM_Start>
//	       HAL_UART_Transmit(&huart2,YY1,sizeof(YY1),1000);
//	       HAL_Delay(2000);


//	HAL_UART_Transmit(&huart2,redBlue,sizeof(redBlue),1000);
	HAL_UART_Transmit(&huart1,A1,sizeof(A1),1000);
 8000634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000638:	2205      	movs	r2, #5
 800063a:	4906      	ldr	r1, [pc, #24]	; (8000654 <main+0x84>)
 800063c:	4806      	ldr	r0, [pc, #24]	; (8000658 <main+0x88>)
 800063e:	f004 fe2f 	bl	80052a0 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000646:	f000 feb1 	bl	80013ac <HAL_Delay>
	HAL_UART_Transmit(&huart1,A1,sizeof(A1),1000);
 800064a:	e7f3      	b.n	8000634 <main+0x64>
 800064c:	240001ac 	.word	0x240001ac
 8000650:	24000034 	.word	0x24000034
 8000654:	24000000 	.word	0x24000000
 8000658:	2400011c 	.word	0x2400011c

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b09c      	sub	sp, #112	; 0x70
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000666:	224c      	movs	r2, #76	; 0x4c
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f005 feea 	bl	8006444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2220      	movs	r2, #32
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f005 fee4 	bl	8006444 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800067c:	2002      	movs	r0, #2
 800067e:	f001 f959 	bl	8001934 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	4b29      	ldr	r3, [pc, #164]	; (800072c <SystemClock_Config+0xd0>)
 8000688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800068a:	4a28      	ldr	r2, [pc, #160]	; (800072c <SystemClock_Config+0xd0>)
 800068c:	f023 0301 	bic.w	r3, r3, #1
 8000690:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <SystemClock_Config+0xd0>)
 8000694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	4b24      	ldr	r3, [pc, #144]	; (8000730 <SystemClock_Config+0xd4>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a4:	4a22      	ldr	r2, [pc, #136]	; (8000730 <SystemClock_Config+0xd4>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b20      	ldr	r3, [pc, #128]	; (8000730 <SystemClock_Config+0xd4>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006b8:	bf00      	nop
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <SystemClock_Config+0xd4>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006c6:	d1f8      	bne.n	80006ba <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2340      	movs	r3, #64	; 0x40
 80006d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 f963 	bl	80019a8 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006e8:	f000 fb30 	bl	8000d4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	233f      	movs	r3, #63	; 0x3f
 80006ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000700:	2340      	movs	r3, #64	; 0x40
 8000702:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000708:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2101      	movs	r1, #1
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fd74 	bl	8002200 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800071e:	f000 fb15 	bl	8000d4c <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3770      	adds	r7, #112	; 0x70
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	58000400 	.word	0x58000400
 8000730:	58024800 	.word	0x58024800

08000734 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b09a      	sub	sp, #104	; 0x68
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000748:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000754:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
 8000764:	615a      	str	r2, [r3, #20]
 8000766:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	222c      	movs	r2, #44	; 0x2c
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f005 fe68 	bl	8006444 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000774:	4b55      	ldr	r3, [pc, #340]	; (80008cc <MX_TIM1_Init+0x198>)
 8000776:	4a56      	ldr	r2, [pc, #344]	; (80008d0 <MX_TIM1_Init+0x19c>)
 8000778:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 800077a:	4b54      	ldr	r3, [pc, #336]	; (80008cc <MX_TIM1_Init+0x198>)
 800077c:	221f      	movs	r2, #31
 800077e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000780:	4b52      	ldr	r3, [pc, #328]	; (80008cc <MX_TIM1_Init+0x198>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000786:	4b51      	ldr	r3, [pc, #324]	; (80008cc <MX_TIM1_Init+0x198>)
 8000788:	2263      	movs	r2, #99	; 0x63
 800078a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078c:	4b4f      	ldr	r3, [pc, #316]	; (80008cc <MX_TIM1_Init+0x198>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000792:	4b4e      	ldr	r3, [pc, #312]	; (80008cc <MX_TIM1_Init+0x198>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000798:	4b4c      	ldr	r3, [pc, #304]	; (80008cc <MX_TIM1_Init+0x198>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800079e:	484b      	ldr	r0, [pc, #300]	; (80008cc <MX_TIM1_Init+0x198>)
 80007a0:	f003 fc1c 	bl	8003fdc <HAL_TIM_Base_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007aa:	f000 facf 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007b8:	4619      	mov	r1, r3
 80007ba:	4844      	ldr	r0, [pc, #272]	; (80008cc <MX_TIM1_Init+0x198>)
 80007bc:	f003 fee8 	bl	8004590 <HAL_TIM_ConfigClockSource>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007c6:	f000 fac1 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ca:	4840      	ldr	r0, [pc, #256]	; (80008cc <MX_TIM1_Init+0x198>)
 80007cc:	f003 fc5d 	bl	800408a <HAL_TIM_PWM_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80007d6:	f000 fab9 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007ea:	4619      	mov	r1, r3
 80007ec:	4837      	ldr	r0, [pc, #220]	; (80008cc <MX_TIM1_Init+0x198>)
 80007ee:	f004 fbfb 	bl	8004fe8 <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80007f8:	f000 faa8 	bl	8000d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fc:	2360      	movs	r3, #96	; 0x60
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000804:	2300      	movs	r3, #0
 8000806:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000808:	2300      	movs	r3, #0
 800080a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000818:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800081c:	2200      	movs	r2, #0
 800081e:	4619      	mov	r1, r3
 8000820:	482a      	ldr	r0, [pc, #168]	; (80008cc <MX_TIM1_Init+0x198>)
 8000822:	f003 fda1 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800082c:	f000 fa8e 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000830:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000834:	2204      	movs	r2, #4
 8000836:	4619      	mov	r1, r3
 8000838:	4824      	ldr	r0, [pc, #144]	; (80008cc <MX_TIM1_Init+0x198>)
 800083a:	f003 fd95 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000844:	f000 fa82 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000848:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800084c:	2208      	movs	r2, #8
 800084e:	4619      	mov	r1, r3
 8000850:	481e      	ldr	r0, [pc, #120]	; (80008cc <MX_TIM1_Init+0x198>)
 8000852:	f003 fd89 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800085c:	f000 fa76 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000860:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000864:	220c      	movs	r2, #12
 8000866:	4619      	mov	r1, r3
 8000868:	4818      	ldr	r0, [pc, #96]	; (80008cc <MX_TIM1_Init+0x198>)
 800086a:	f003 fd7d 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000874:	f000 fa6a 	bl	8000d4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800088c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000890:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800089a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	4619      	mov	r1, r3
 80008ac:	4807      	ldr	r0, [pc, #28]	; (80008cc <MX_TIM1_Init+0x198>)
 80008ae:	f004 fc29 	bl	8005104 <HAL_TIMEx_ConfigBreakDeadTime>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 80008b8:	f000 fa48 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <MX_TIM1_Init+0x198>)
 80008be:	f000 fa9f 	bl	8000e00 <HAL_TIM_MspPostInit>

}
 80008c2:	bf00      	nop
 80008c4:	3768      	adds	r7, #104	; 0x68
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	240001ac 	.word	0x240001ac
 80008d0:	40010000 	.word	0x40010000

080008d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b09a      	sub	sp, #104	; 0x68
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
 8000904:	615a      	str	r2, [r3, #20]
 8000906:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	222c      	movs	r2, #44	; 0x2c
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f005 fd98 	bl	8006444 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000914:	4b55      	ldr	r3, [pc, #340]	; (8000a6c <MX_TIM8_Init+0x198>)
 8000916:	4a56      	ldr	r2, [pc, #344]	; (8000a70 <MX_TIM8_Init+0x19c>)
 8000918:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 800091a:	4b54      	ldr	r3, [pc, #336]	; (8000a6c <MX_TIM8_Init+0x198>)
 800091c:	223f      	movs	r2, #63	; 0x3f
 800091e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000920:	4b52      	ldr	r3, [pc, #328]	; (8000a6c <MX_TIM8_Init+0x198>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 8000926:	4b51      	ldr	r3, [pc, #324]	; (8000a6c <MX_TIM8_Init+0x198>)
 8000928:	2263      	movs	r2, #99	; 0x63
 800092a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092c:	4b4f      	ldr	r3, [pc, #316]	; (8000a6c <MX_TIM8_Init+0x198>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000932:	4b4e      	ldr	r3, [pc, #312]	; (8000a6c <MX_TIM8_Init+0x198>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b4c      	ldr	r3, [pc, #304]	; (8000a6c <MX_TIM8_Init+0x198>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800093e:	484b      	ldr	r0, [pc, #300]	; (8000a6c <MX_TIM8_Init+0x198>)
 8000940:	f003 fb4c 	bl	8003fdc <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800094a:	f000 f9ff 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000952:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000954:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000958:	4619      	mov	r1, r3
 800095a:	4844      	ldr	r0, [pc, #272]	; (8000a6c <MX_TIM8_Init+0x198>)
 800095c:	f003 fe18 	bl	8004590 <HAL_TIM_ConfigClockSource>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000966:	f000 f9f1 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800096a:	4840      	ldr	r0, [pc, #256]	; (8000a6c <MX_TIM8_Init+0x198>)
 800096c:	f003 fb8d 	bl	800408a <HAL_TIM_PWM_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000976:	f000 f9e9 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800097e:	2300      	movs	r3, #0
 8000980:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000986:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800098a:	4619      	mov	r1, r3
 800098c:	4837      	ldr	r0, [pc, #220]	; (8000a6c <MX_TIM8_Init+0x198>)
 800098e:	f004 fb2b 	bl	8004fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8000998:	f000 f9d8 	bl	8000d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099c:	2360      	movs	r3, #96	; 0x60
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a4:	2300      	movs	r3, #0
 80009a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009bc:	2200      	movs	r2, #0
 80009be:	4619      	mov	r1, r3
 80009c0:	482a      	ldr	r0, [pc, #168]	; (8000a6c <MX_TIM8_Init+0x198>)
 80009c2:	f003 fcd1 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 80009cc:	f000 f9be 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009d4:	2204      	movs	r2, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4824      	ldr	r0, [pc, #144]	; (8000a6c <MX_TIM8_Init+0x198>)
 80009da:	f003 fcc5 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 80009e4:	f000 f9b2 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ec:	2208      	movs	r2, #8
 80009ee:	4619      	mov	r1, r3
 80009f0:	481e      	ldr	r0, [pc, #120]	; (8000a6c <MX_TIM8_Init+0x198>)
 80009f2:	f003 fcb9 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 80009fc:	f000 f9a6 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a04:	220c      	movs	r2, #12
 8000a06:	4619      	mov	r1, r3
 8000a08:	4818      	ldr	r0, [pc, #96]	; (8000a6c <MX_TIM8_Init+0x198>)
 8000a0a:	f003 fcad 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8000a14:	f000 f99a 	bl	8000d4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4807      	ldr	r0, [pc, #28]	; (8000a6c <MX_TIM8_Init+0x198>)
 8000a4e:	f004 fb59 	bl	8005104 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM8_Init+0x188>
  {
    Error_Handler();
 8000a58:	f000 f978 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <MX_TIM8_Init+0x198>)
 8000a5e:	f000 f9cf 	bl	8000e00 <HAL_TIM_MspPostInit>

}
 8000a62:	bf00      	nop
 8000a64:	3768      	adds	r7, #104	; 0x68
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	24000034 	.word	0x24000034
 8000a70:	40010400 	.word	0x40010400

08000a74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <MX_USART1_UART_Init+0x90>)
 8000a7a:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <MX_USART1_UART_Init+0x94>)
 8000a7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MX_USART1_UART_Init+0x90>)
 8000a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_USART1_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_USART1_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_USART1_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_USART1_UART_Init+0x90>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_USART1_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_USART1_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_USART1_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USART1_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_USART1_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <MX_USART1_UART_Init+0x90>)
 8000abe:	f004 fb9f 	bl	8005200 <HAL_UART_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ac8:	f000 f940 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_USART1_UART_Init+0x90>)
 8000ad0:	f005 fbca 	bl	8006268 <HAL_UARTEx_SetTxFifoThreshold>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ada:	f000 f937 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4808      	ldr	r0, [pc, #32]	; (8000b04 <MX_USART1_UART_Init+0x90>)
 8000ae2:	f005 fbff 	bl	80062e4 <HAL_UARTEx_SetRxFifoThreshold>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000aec:	f000 f92e 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_USART1_UART_Init+0x90>)
 8000af2:	f005 fb80 	bl	80061f6 <HAL_UARTEx_DisableFifoMode>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000afc:	f000 f926 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2400011c 	.word	0x2400011c
 8000b08:	40011000 	.word	0x40011000

08000b0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b10:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <MX_USART2_UART_Init+0x90>)
 8000b12:	4a23      	ldr	r2, [pc, #140]	; (8000ba0 <MX_USART2_UART_Init+0x94>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b16:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <MX_USART2_UART_Init+0x90>)
 8000b18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <MX_USART2_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <MX_USART2_UART_Init+0x90>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <MX_USART2_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_USART2_UART_Init+0x90>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <MX_USART2_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_USART2_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_USART2_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_USART2_UART_Init+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_USART2_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b54:	4811      	ldr	r0, [pc, #68]	; (8000b9c <MX_USART2_UART_Init+0x90>)
 8000b56:	f004 fb53 	bl	8005200 <HAL_UART_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b60:	f000 f8f4 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b64:	2100      	movs	r1, #0
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_USART2_UART_Init+0x90>)
 8000b68:	f005 fb7e 	bl	8006268 <HAL_UARTEx_SetTxFifoThreshold>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b72:	f000 f8eb 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b76:	2100      	movs	r1, #0
 8000b78:	4808      	ldr	r0, [pc, #32]	; (8000b9c <MX_USART2_UART_Init+0x90>)
 8000b7a:	f005 fbb3 	bl	80062e4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b84:	f000 f8e2 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_USART2_UART_Init+0x90>)
 8000b8a:	f005 fb34 	bl	80061f6 <HAL_UARTEx_DisableFifoMode>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b94:	f000 f8da 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	240001f8 	.word	0x240001f8
 8000ba0:	40004400 	.word	0x40004400

08000ba4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ba8:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000baa:	4a23      	ldr	r2, [pc, #140]	; (8000c38 <MX_USART3_UART_Init+0x94>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000bb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bec:	4811      	ldr	r0, [pc, #68]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000bee:	f004 fb07 	bl	8005200 <HAL_UART_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bf8:	f000 f8a8 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000c00:	f005 fb32 	bl	8006268 <HAL_UARTEx_SetTxFifoThreshold>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c0a:	f000 f89f 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000c12:	f005 fb67 	bl	80062e4 <HAL_UARTEx_SetRxFifoThreshold>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c1c:	f000 f896 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000c22:	f005 fae8 	bl	80061f6 <HAL_UARTEx_DisableFifoMode>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c2c:	f000 f88e 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	24000080 	.word	0x24000080
 8000c38:	40004800 	.word	0x40004800

08000c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c52:	4b3a      	ldr	r3, [pc, #232]	; (8000d3c <MX_GPIO_Init+0x100>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	4a38      	ldr	r2, [pc, #224]	; (8000d3c <MX_GPIO_Init+0x100>)
 8000c5a:	f043 0310 	orr.w	r3, r3, #16
 8000c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c62:	4b36      	ldr	r3, [pc, #216]	; (8000d3c <MX_GPIO_Init+0x100>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	f003 0310 	and.w	r3, r3, #16
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c70:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <MX_GPIO_Init+0x100>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	4a31      	ldr	r2, [pc, #196]	; (8000d3c <MX_GPIO_Init+0x100>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c80:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <MX_GPIO_Init+0x100>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	f003 0304 	and.w	r3, r3, #4
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b2b      	ldr	r3, [pc, #172]	; (8000d3c <MX_GPIO_Init+0x100>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a29      	ldr	r2, [pc, #164]	; (8000d3c <MX_GPIO_Init+0x100>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <MX_GPIO_Init+0x100>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cac:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <MX_GPIO_Init+0x100>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a22      	ldr	r2, [pc, #136]	; (8000d3c <MX_GPIO_Init+0x100>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <MX_GPIO_Init+0x100>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <MX_GPIO_Init+0x100>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	4a1a      	ldr	r2, [pc, #104]	; (8000d3c <MX_GPIO_Init+0x100>)
 8000cd2:	f043 0308 	orr.w	r3, r3, #8
 8000cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <MX_GPIO_Init+0x100>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce0:	f003 0308 	and.w	r3, r3, #8
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ce8:	2320      	movs	r3, #32
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4811      	ldr	r0, [pc, #68]	; (8000d40 <MX_GPIO_Init+0x104>)
 8000cfc:	f000 fc6a 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	480b      	ldr	r0, [pc, #44]	; (8000d44 <MX_GPIO_Init+0x108>)
 8000d16:	f000 fc5d 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4806      	ldr	r0, [pc, #24]	; (8000d48 <MX_GPIO_Init+0x10c>)
 8000d30:	f000 fc50 	bl	80015d4 <HAL_GPIO_Init>

}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	; 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58021000 	.word	0x58021000
 8000d44:	58020800 	.word	0x58020800
 8000d48:	58020400 	.word	0x58020400

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <HAL_MspInit+0x30>)
 8000d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d64:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_MspInit+0x30>)
 8000d66:	f043 0302 	orr.w	r3, r3, #2
 8000d6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_MspInit+0x30>)
 8000d70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	58024400 	.word	0x58024400

08000d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a16      	ldr	r2, [pc, #88]	; (8000df4 <HAL_TIM_Base_MspInit+0x68>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d10f      	bne.n	8000dbe <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <HAL_TIM_Base_MspInit+0x6c>)
 8000da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <HAL_TIM_Base_MspInit+0x6c>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000dae:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_TIM_Base_MspInit+0x6c>)
 8000db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000dbc:	e013      	b.n	8000de6 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM8)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <HAL_TIM_Base_MspInit+0x70>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d10e      	bne.n	8000de6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_TIM_Base_MspInit+0x6c>)
 8000dca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_TIM_Base_MspInit+0x6c>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <HAL_TIM_Base_MspInit+0x6c>)
 8000dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40010000 	.word	0x40010000
 8000df8:	58024400 	.word	0x58024400
 8000dfc:	40010400 	.word	0x40010400

08000e00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a26      	ldr	r2, [pc, #152]	; (8000eb8 <HAL_TIM_MspPostInit+0xb8>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d120      	bne.n	8000e64 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <HAL_TIM_MspPostInit+0xbc>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	4a24      	ldr	r2, [pc, #144]	; (8000ebc <HAL_TIM_MspPostInit+0xbc>)
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e32:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <HAL_TIM_MspPostInit+0xbc>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	f003 0310 	and.w	r3, r3, #16
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000e40:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4818      	ldr	r0, [pc, #96]	; (8000ec0 <HAL_TIM_MspPostInit+0xc0>)
 8000e5e:	f000 fbb9 	bl	80015d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000e62:	e024      	b.n	8000eae <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM8)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a16      	ldr	r2, [pc, #88]	; (8000ec4 <HAL_TIM_MspPostInit+0xc4>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d11f      	bne.n	8000eae <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <HAL_TIM_MspPostInit+0xbc>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <HAL_TIM_MspPostInit+0xbc>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <HAL_TIM_MspPostInit+0xbc>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000e8c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <HAL_TIM_MspPostInit+0xc8>)
 8000eaa:	f000 fb93 	bl	80015d4 <HAL_GPIO_Init>
}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	58021000 	.word	0x58021000
 8000ec4:	40010400 	.word	0x40010400
 8000ec8:	58020800 	.word	0x58020800

08000ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0bc      	sub	sp, #240	; 0xf0
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee4:	f107 0320 	add.w	r3, r7, #32
 8000ee8:	22bc      	movs	r2, #188	; 0xbc
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f005 faa9 	bl	8006444 <memset>
  if(huart->Instance==USART1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a6d      	ldr	r2, [pc, #436]	; (80010ac <HAL_UART_MspInit+0x1e0>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d143      	bne.n	8000f84 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000efc:	2301      	movs	r3, #1
 8000efe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f06:	f107 0320 	add.w	r3, r7, #32
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fd04 	bl	8002918 <HAL_RCCEx_PeriphCLKConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f16:	f7ff ff19 	bl	8000d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f1a:	4b65      	ldr	r3, [pc, #404]	; (80010b0 <HAL_UART_MspInit+0x1e4>)
 8000f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f20:	4a63      	ldr	r2, [pc, #396]	; (80010b0 <HAL_UART_MspInit+0x1e4>)
 8000f22:	f043 0310 	orr.w	r3, r3, #16
 8000f26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f2a:	4b61      	ldr	r3, [pc, #388]	; (80010b0 <HAL_UART_MspInit+0x1e4>)
 8000f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f38:	4b5d      	ldr	r3, [pc, #372]	; (80010b0 <HAL_UART_MspInit+0x1e4>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3e:	4a5c      	ldr	r2, [pc, #368]	; (80010b0 <HAL_UART_MspInit+0x1e4>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f48:	4b59      	ldr	r3, [pc, #356]	; (80010b0 <HAL_UART_MspInit+0x1e4>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f56:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f70:	2304      	movs	r3, #4
 8000f72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f76:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	484d      	ldr	r0, [pc, #308]	; (80010b4 <HAL_UART_MspInit+0x1e8>)
 8000f7e:	f000 fb29 	bl	80015d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f82:	e08f      	b.n	80010a4 <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <HAL_UART_MspInit+0x1ec>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d142      	bne.n	8001014 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f98:	f107 0320 	add.w	r3, r7, #32
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f001 fcbb 	bl	8002918 <HAL_RCCEx_PeriphCLKConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000fa8:	f7ff fed0 	bl	8000d4c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fac:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <HAL_UART_MspInit+0x1e4>)
 8000fae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fb2:	4a3f      	ldr	r2, [pc, #252]	; (80010b0 <HAL_UART_MspInit+0x1e4>)
 8000fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fbc:	4b3c      	ldr	r3, [pc, #240]	; (80010b0 <HAL_UART_MspInit+0x1e4>)
 8000fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <HAL_UART_MspInit+0x1e4>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd0:	4a37      	ldr	r2, [pc, #220]	; (80010b0 <HAL_UART_MspInit+0x1e4>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fda:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <HAL_UART_MspInit+0x1e4>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fe8:	230c      	movs	r3, #12
 8000fea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001000:	2307      	movs	r3, #7
 8001002:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800100a:	4619      	mov	r1, r3
 800100c:	482b      	ldr	r0, [pc, #172]	; (80010bc <HAL_UART_MspInit+0x1f0>)
 800100e:	f000 fae1 	bl	80015d4 <HAL_GPIO_Init>
}
 8001012:	e047      	b.n	80010a4 <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART3)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a29      	ldr	r2, [pc, #164]	; (80010c0 <HAL_UART_MspInit+0x1f4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d142      	bne.n	80010a4 <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800101e:	2302      	movs	r3, #2
 8001020:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001028:	f107 0320 	add.w	r3, r7, #32
 800102c:	4618      	mov	r0, r3
 800102e:	f001 fc73 	bl	8002918 <HAL_RCCEx_PeriphCLKConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <HAL_UART_MspInit+0x170>
      Error_Handler();
 8001038:	f7ff fe88 	bl	8000d4c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800103c:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <HAL_UART_MspInit+0x1e4>)
 800103e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001042:	4a1b      	ldr	r2, [pc, #108]	; (80010b0 <HAL_UART_MspInit+0x1e4>)
 8001044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001048:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_UART_MspInit+0x1e4>)
 800104e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_UART_MspInit+0x1e4>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001060:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <HAL_UART_MspInit+0x1e4>)
 8001062:	f043 0308 	orr.w	r3, r3, #8
 8001066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_UART_MspInit+0x1e4>)
 800106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001070:	f003 0308 	and.w	r3, r3, #8
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001078:	f44f 7340 	mov.w	r3, #768	; 0x300
 800107c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001092:	2307      	movs	r3, #7
 8001094:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001098:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800109c:	4619      	mov	r1, r3
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <HAL_UART_MspInit+0x1f8>)
 80010a0:	f000 fa98 	bl	80015d4 <HAL_GPIO_Init>
}
 80010a4:	bf00      	nop
 80010a6:	37f0      	adds	r7, #240	; 0xf0
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40011000 	.word	0x40011000
 80010b0:	58024400 	.word	0x58024400
 80010b4:	58020400 	.word	0x58020400
 80010b8:	40004400 	.word	0x40004400
 80010bc:	58020000 	.word	0x58020000
 80010c0:	40004800 	.word	0x40004800
 80010c4:	58020c00 	.word	0x58020c00

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <MemManage_Handler+0x4>

080010da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001114:	f000 f92a 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001120:	4b39      	ldr	r3, [pc, #228]	; (8001208 <SystemInit+0xec>)
 8001122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001126:	4a38      	ldr	r2, [pc, #224]	; (8001208 <SystemInit+0xec>)
 8001128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001130:	4b36      	ldr	r3, [pc, #216]	; (800120c <SystemInit+0xf0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 030f 	and.w	r3, r3, #15
 8001138:	2b06      	cmp	r3, #6
 800113a:	d807      	bhi.n	800114c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800113c:	4b33      	ldr	r3, [pc, #204]	; (800120c <SystemInit+0xf0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f023 030f 	bic.w	r3, r3, #15
 8001144:	4a31      	ldr	r2, [pc, #196]	; (800120c <SystemInit+0xf0>)
 8001146:	f043 0307 	orr.w	r3, r3, #7
 800114a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800114c:	4b30      	ldr	r3, [pc, #192]	; (8001210 <SystemInit+0xf4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a2f      	ldr	r2, [pc, #188]	; (8001210 <SystemInit+0xf4>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001158:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <SystemInit+0xf4>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <SystemInit+0xf4>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	492b      	ldr	r1, [pc, #172]	; (8001210 <SystemInit+0xf4>)
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <SystemInit+0xf8>)
 8001166:	4013      	ands	r3, r2
 8001168:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800116a:	4b28      	ldr	r3, [pc, #160]	; (800120c <SystemInit+0xf0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	2b00      	cmp	r3, #0
 8001174:	d007      	beq.n	8001186 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001176:	4b25      	ldr	r3, [pc, #148]	; (800120c <SystemInit+0xf0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f023 030f 	bic.w	r3, r3, #15
 800117e:	4a23      	ldr	r2, [pc, #140]	; (800120c <SystemInit+0xf0>)
 8001180:	f043 0307 	orr.w	r3, r3, #7
 8001184:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001186:	4b22      	ldr	r3, [pc, #136]	; (8001210 <SystemInit+0xf4>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800118c:	4b20      	ldr	r3, [pc, #128]	; (8001210 <SystemInit+0xf4>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001192:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <SystemInit+0xf4>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <SystemInit+0xf4>)
 800119a:	4a1f      	ldr	r2, [pc, #124]	; (8001218 <SystemInit+0xfc>)
 800119c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <SystemInit+0xf4>)
 80011a0:	4a1e      	ldr	r2, [pc, #120]	; (800121c <SystemInit+0x100>)
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <SystemInit+0xf4>)
 80011a6:	4a1e      	ldr	r2, [pc, #120]	; (8001220 <SystemInit+0x104>)
 80011a8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <SystemInit+0xf4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <SystemInit+0xf4>)
 80011b2:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <SystemInit+0x104>)
 80011b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <SystemInit+0xf4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <SystemInit+0xf4>)
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <SystemInit+0x104>)
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <SystemInit+0xf4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <SystemInit+0xf4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a10      	ldr	r2, [pc, #64]	; (8001210 <SystemInit+0xf4>)
 80011ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <SystemInit+0xf4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <SystemInit+0x108>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <SystemInit+0x10c>)
 80011e0:	4013      	ands	r3, r2
 80011e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011e6:	d202      	bcs.n	80011ee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <SystemInit+0x110>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <SystemInit+0x114>)
 80011f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011f4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <SystemInit+0xec>)
 80011f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011fc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00
 800120c:	52002000 	.word	0x52002000
 8001210:	58024400 	.word	0x58024400
 8001214:	eaf6ed7f 	.word	0xeaf6ed7f
 8001218:	02020200 	.word	0x02020200
 800121c:	01ff0000 	.word	0x01ff0000
 8001220:	01010280 	.word	0x01010280
 8001224:	5c001000 	.word	0x5c001000
 8001228:	ffff0000 	.word	0xffff0000
 800122c:	51008108 	.word	0x51008108
 8001230:	52004000 	.word	0x52004000

08001234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800126c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001238:	f7ff ff70 	bl	800111c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800123c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800123e:	e003      	b.n	8001248 <LoopCopyDataInit>

08001240 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001242:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001244:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001246:	3104      	adds	r1, #4

08001248 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001248:	480a      	ldr	r0, [pc, #40]	; (8001274 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800124c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800124e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001250:	d3f6      	bcc.n	8001240 <CopyDataInit>
  ldr  r2, =_sbss
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001254:	e002      	b.n	800125c <LoopFillZerobss>

08001256 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001256:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001258:	f842 3b04 	str.w	r3, [r2], #4

0800125c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800125e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001260:	d3f9      	bcc.n	8001256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001262:	f005 f8cb 	bl	80063fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001266:	f7ff f9b3 	bl	80005d0 <main>
  bx  lr    
 800126a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800126c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001270:	080064b4 	.word	0x080064b4
  ldr  r0, =_sdata
 8001274:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001278:	24000018 	.word	0x24000018
  ldr  r2, =_sbss
 800127c:	24000018 	.word	0x24000018
  ldr  r3, = _ebss
 8001280:	2400028c 	.word	0x2400028c

08001284 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC3_IRQHandler>
	...

08001288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128e:	2003      	movs	r0, #3
 8001290:	f000 f96e 	bl	8001570 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001294:	f001 f96a 	bl	800256c <HAL_RCC_GetSysClockFreq>
 8001298:	4602      	mov	r2, r0
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_Init+0x68>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	0a1b      	lsrs	r3, r3, #8
 80012a0:	f003 030f 	and.w	r3, r3, #15
 80012a4:	4913      	ldr	r1, [pc, #76]	; (80012f4 <HAL_Init+0x6c>)
 80012a6:	5ccb      	ldrb	r3, [r1, r3]
 80012a8:	f003 031f 	and.w	r3, r3, #31
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
 80012b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_Init+0x68>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <HAL_Init+0x6c>)
 80012bc:	5cd3      	ldrb	r3, [r2, r3]
 80012be:	f003 031f 	and.w	r3, r3, #31
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	fa22 f303 	lsr.w	r3, r2, r3
 80012c8:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <HAL_Init+0x70>)
 80012ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012cc:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <HAL_Init+0x74>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012d2:	2000      	movs	r0, #0
 80012d4:	f000 f814 	bl	8001300 <HAL_InitTick>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e002      	b.n	80012e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012e2:	f7ff fd39 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	58024400 	.word	0x58024400
 80012f4:	0800646c 	.word	0x0800646c
 80012f8:	2400000c 	.word	0x2400000c
 80012fc:	24000008 	.word	0x24000008

08001300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_InitTick+0x60>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e021      	b.n	8001358 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <HAL_InitTick+0x64>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_InitTick+0x60>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	fbb3 f3f1 	udiv	r3, r3, r1
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f945 	bl	80015ba <HAL_SYSTICK_Config>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00e      	b.n	8001358 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d80a      	bhi.n	8001356 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f000 f91d 	bl	8001586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800134c:	4a06      	ldr	r2, [pc, #24]	; (8001368 <HAL_InitTick+0x68>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	24000014 	.word	0x24000014
 8001364:	24000008 	.word	0x24000008
 8001368:	24000010 	.word	0x24000010

0800136c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x20>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x24>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_IncTick+0x24>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	24000014 	.word	0x24000014
 8001390:	24000288 	.word	0x24000288

08001394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_GetTick+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	24000288 	.word	0x24000288

080013ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff ffee 	bl	8001394 <HAL_GetTick>
 80013b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	d005      	beq.n	80013d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_Delay+0x44>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013d2:	bf00      	nop
 80013d4:	f7ff ffde 	bl	8001394 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8f7      	bhi.n	80013d4 <HAL_Delay+0x28>
  {
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	24000014 	.word	0x24000014

080013f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <HAL_GetREVID+0x14>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	0c1b      	lsrs	r3, r3, #16
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	5c001000 	.word	0x5c001000

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <__NVIC_SetPriorityGrouping+0x40>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	4313      	orrs	r3, r2
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	; (800144c <__NVIC_SetPriorityGrouping+0x40>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00
 8001450:	05fa0000 	.word	0x05fa0000

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	; (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	; (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800153c:	d301      	bcc.n	8001542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153e:	2301      	movs	r3, #1
 8001540:	e00f      	b.n	8001562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <SysTick_Config+0x40>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154a:	210f      	movs	r1, #15
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f7ff ff8e 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <SysTick_Config+0x40>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <SysTick_Config+0x40>)
 800155c:	2207      	movs	r2, #7
 800155e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	e000e010 	.word	0xe000e010

08001570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff47 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff5e 	bl	8001454 <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff90 	bl	80014c4 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5f 	bl	8001470 <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffb2 	bl	800152c <SysTick_Config>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80015e2:	4b89      	ldr	r3, [pc, #548]	; (8001808 <HAL_GPIO_Init+0x234>)
 80015e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015e6:	e194      	b.n	8001912 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8186 	beq.w	800190c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b01      	cmp	r3, #1
 800160a:	d005      	beq.n	8001618 <HAL_GPIO_Init+0x44>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d130      	bne.n	800167a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800164e:	2201      	movs	r2, #1
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	f003 0201 	and.w	r2, r3, #1
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b03      	cmp	r3, #3
 8001684:	d017      	beq.n	80016b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	2203      	movs	r2, #3
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d123      	bne.n	800170a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	220f      	movs	r2, #15
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3208      	adds	r2, #8
 8001704:	69b9      	ldr	r1, [r7, #24]
 8001706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	2203      	movs	r2, #3
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0203 	and.w	r2, r3, #3
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80e0 	beq.w	800190c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174c:	4b2f      	ldr	r3, [pc, #188]	; (800180c <HAL_GPIO_Init+0x238>)
 800174e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001752:	4a2e      	ldr	r2, [pc, #184]	; (800180c <HAL_GPIO_Init+0x238>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <HAL_GPIO_Init+0x238>)
 800175e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800176a:	4a29      	ldr	r2, [pc, #164]	; (8001810 <HAL_GPIO_Init+0x23c>)
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	3302      	adds	r3, #2
 8001772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	220f      	movs	r2, #15
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a20      	ldr	r2, [pc, #128]	; (8001814 <HAL_GPIO_Init+0x240>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d052      	beq.n	800183c <HAL_GPIO_Init+0x268>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <HAL_GPIO_Init+0x244>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d031      	beq.n	8001802 <HAL_GPIO_Init+0x22e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a1e      	ldr	r2, [pc, #120]	; (800181c <HAL_GPIO_Init+0x248>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d02b      	beq.n	80017fe <HAL_GPIO_Init+0x22a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_GPIO_Init+0x24c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d025      	beq.n	80017fa <HAL_GPIO_Init+0x226>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_GPIO_Init+0x250>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d01f      	beq.n	80017f6 <HAL_GPIO_Init+0x222>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a1b      	ldr	r2, [pc, #108]	; (8001828 <HAL_GPIO_Init+0x254>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d019      	beq.n	80017f2 <HAL_GPIO_Init+0x21e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a1a      	ldr	r2, [pc, #104]	; (800182c <HAL_GPIO_Init+0x258>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_GPIO_Init+0x21a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a19      	ldr	r2, [pc, #100]	; (8001830 <HAL_GPIO_Init+0x25c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00d      	beq.n	80017ea <HAL_GPIO_Init+0x216>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a18      	ldr	r2, [pc, #96]	; (8001834 <HAL_GPIO_Init+0x260>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d007      	beq.n	80017e6 <HAL_GPIO_Init+0x212>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a17      	ldr	r2, [pc, #92]	; (8001838 <HAL_GPIO_Init+0x264>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d101      	bne.n	80017e2 <HAL_GPIO_Init+0x20e>
 80017de:	2309      	movs	r3, #9
 80017e0:	e02d      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017e2:	230a      	movs	r3, #10
 80017e4:	e02b      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017e6:	2308      	movs	r3, #8
 80017e8:	e029      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017ea:	2307      	movs	r3, #7
 80017ec:	e027      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017ee:	2306      	movs	r3, #6
 80017f0:	e025      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017f2:	2305      	movs	r3, #5
 80017f4:	e023      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017f6:	2304      	movs	r3, #4
 80017f8:	e021      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017fa:	2303      	movs	r3, #3
 80017fc:	e01f      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017fe:	2302      	movs	r3, #2
 8001800:	e01d      	b.n	800183e <HAL_GPIO_Init+0x26a>
 8001802:	2301      	movs	r3, #1
 8001804:	e01b      	b.n	800183e <HAL_GPIO_Init+0x26a>
 8001806:	bf00      	nop
 8001808:	58000080 	.word	0x58000080
 800180c:	58024400 	.word	0x58024400
 8001810:	58000400 	.word	0x58000400
 8001814:	58020000 	.word	0x58020000
 8001818:	58020400 	.word	0x58020400
 800181c:	58020800 	.word	0x58020800
 8001820:	58020c00 	.word	0x58020c00
 8001824:	58021000 	.word	0x58021000
 8001828:	58021400 	.word	0x58021400
 800182c:	58021800 	.word	0x58021800
 8001830:	58021c00 	.word	0x58021c00
 8001834:	58022000 	.word	0x58022000
 8001838:	58022400 	.word	0x58022400
 800183c:	2300      	movs	r3, #0
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	f002 0203 	and.w	r2, r2, #3
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	4093      	lsls	r3, r2
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800184e:	4938      	ldr	r1, [pc, #224]	; (8001930 <HAL_GPIO_Init+0x35c>)
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3302      	adds	r3, #2
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800185c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80018b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	3301      	adds	r3, #1
 8001910:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	f47f ae63 	bne.w	80015e8 <HAL_GPIO_Init+0x14>
  }
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	3724      	adds	r7, #36	; 0x24
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	58000400 	.word	0x58000400

08001934 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_PWREx_ConfigSupply+0x70>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b04      	cmp	r3, #4
 8001946:	d00a      	beq.n	800195e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <HAL_PWREx_ConfigSupply+0x70>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	429a      	cmp	r2, r3
 8001954:	d001      	beq.n	800195a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e01f      	b.n	800199a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e01d      	b.n	800199a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_PWREx_ConfigSupply+0x70>)
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f023 0207 	bic.w	r2, r3, #7
 8001966:	490f      	ldr	r1, [pc, #60]	; (80019a4 <HAL_PWREx_ConfigSupply+0x70>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4313      	orrs	r3, r2
 800196c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800196e:	f7ff fd11 	bl	8001394 <HAL_GetTick>
 8001972:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001974:	e009      	b.n	800198a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001976:	f7ff fd0d 	bl	8001394 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001984:	d901      	bls.n	800198a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e007      	b.n	800199a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_PWREx_ConfigSupply+0x70>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001996:	d1ee      	bne.n	8001976 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	58024800 	.word	0x58024800

080019a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	; 0x30
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d102      	bne.n	80019bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	f000 bc1c 	b.w	80021f4 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 8087 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ca:	4b9e      	ldr	r3, [pc, #632]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019d4:	4b9b      	ldr	r3, [pc, #620]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80019da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019dc:	2b10      	cmp	r3, #16
 80019de:	d007      	beq.n	80019f0 <HAL_RCC_OscConfig+0x48>
 80019e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e2:	2b18      	cmp	r3, #24
 80019e4:	d110      	bne.n	8001a08 <HAL_RCC_OscConfig+0x60>
 80019e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d10b      	bne.n	8001a08 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f0:	4b94      	ldr	r3, [pc, #592]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d06c      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x12e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d168      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e3f5      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a10:	d106      	bne.n	8001a20 <HAL_RCC_OscConfig+0x78>
 8001a12:	4b8c      	ldr	r3, [pc, #560]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a8b      	ldr	r2, [pc, #556]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e02e      	b.n	8001a7e <HAL_RCC_OscConfig+0xd6>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10c      	bne.n	8001a42 <HAL_RCC_OscConfig+0x9a>
 8001a28:	4b86      	ldr	r3, [pc, #536]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a85      	ldr	r2, [pc, #532]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b83      	ldr	r3, [pc, #524]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a82      	ldr	r2, [pc, #520]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	e01d      	b.n	8001a7e <HAL_RCC_OscConfig+0xd6>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a4a:	d10c      	bne.n	8001a66 <HAL_RCC_OscConfig+0xbe>
 8001a4c:	4b7d      	ldr	r3, [pc, #500]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a7c      	ldr	r2, [pc, #496]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001a52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b7a      	ldr	r3, [pc, #488]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a79      	ldr	r2, [pc, #484]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	e00b      	b.n	8001a7e <HAL_RCC_OscConfig+0xd6>
 8001a66:	4b77      	ldr	r3, [pc, #476]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a76      	ldr	r2, [pc, #472]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b74      	ldr	r3, [pc, #464]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a73      	ldr	r2, [pc, #460]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001a78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d013      	beq.n	8001aae <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff fc85 	bl	8001394 <HAL_GetTick>
 8001a8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a8e:	f7ff fc81 	bl	8001394 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b64      	cmp	r3, #100	; 0x64
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e3a9      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aa0:	4b68      	ldr	r3, [pc, #416]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0xe6>
 8001aac:	e014      	b.n	8001ad8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7ff fc71 	bl	8001394 <HAL_GetTick>
 8001ab2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab6:	f7ff fc6d 	bl	8001394 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b64      	cmp	r3, #100	; 0x64
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e395      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ac8:	4b5e      	ldr	r3, [pc, #376]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f0      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x10e>
 8001ad4:	e000      	b.n	8001ad8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80ca 	beq.w	8001c7a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ae6:	4b57      	ldr	r3, [pc, #348]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001aee:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001af0:	4b54      	ldr	r3, [pc, #336]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d007      	beq.n	8001b0c <HAL_RCC_OscConfig+0x164>
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	2b18      	cmp	r3, #24
 8001b00:	d156      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x208>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d151      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b0c:	4b4d      	ldr	r3, [pc, #308]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_OscConfig+0x17c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e367      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b24:	4b47      	ldr	r3, [pc, #284]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 0219 	bic.w	r2, r3, #25
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4944      	ldr	r1, [pc, #272]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b36:	f7ff fc2d 	bl	8001394 <HAL_GetTick>
 8001b3a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b3e:	f7ff fc29 	bl	8001394 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e351      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b50:	4b3c      	ldr	r3, [pc, #240]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5c:	f7ff fc4a 	bl	80013f4 <HAL_GetREVID>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d817      	bhi.n	8001b9a <HAL_RCC_OscConfig+0x1f2>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b40      	cmp	r3, #64	; 0x40
 8001b70:	d108      	bne.n	8001b84 <HAL_RCC_OscConfig+0x1dc>
 8001b72:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b7a:	4a32      	ldr	r2, [pc, #200]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b80:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b82:	e07a      	b.n	8001c7a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b84:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	031b      	lsls	r3, r3, #12
 8001b92:	492c      	ldr	r1, [pc, #176]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b98:	e06f      	b.n	8001c7a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	061b      	lsls	r3, r3, #24
 8001ba8:	4926      	ldr	r1, [pc, #152]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bae:	e064      	b.n	8001c7a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d047      	beq.n	8001c48 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f023 0219 	bic.w	r2, r3, #25
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	491f      	ldr	r1, [pc, #124]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bca:	f7ff fbe3 	bl	8001394 <HAL_GetTick>
 8001bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd2:	f7ff fbdf 	bl	8001394 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e307      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf0:	f7ff fc00 	bl	80013f4 <HAL_GetREVID>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d817      	bhi.n	8001c2e <HAL_RCC_OscConfig+0x286>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2b40      	cmp	r3, #64	; 0x40
 8001c04:	d108      	bne.n	8001c18 <HAL_RCC_OscConfig+0x270>
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c0e:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c14:	6053      	str	r3, [r2, #4]
 8001c16:	e030      	b.n	8001c7a <HAL_RCC_OscConfig+0x2d2>
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	031b      	lsls	r3, r3, #12
 8001c26:	4907      	ldr	r1, [pc, #28]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
 8001c2c:	e025      	b.n	8001c7a <HAL_RCC_OscConfig+0x2d2>
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	061b      	lsls	r3, r3, #24
 8001c3c:	4901      	ldr	r1, [pc, #4]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
 8001c42:	e01a      	b.n	8001c7a <HAL_RCC_OscConfig+0x2d2>
 8001c44:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c48:	4b9e      	ldr	r3, [pc, #632]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a9d      	ldr	r2, [pc, #628]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001c4e:	f023 0301 	bic.w	r3, r3, #1
 8001c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff fb9e 	bl	8001394 <HAL_GetTick>
 8001c58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c5c:	f7ff fb9a 	bl	8001394 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e2c2      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c6e:	4b95      	ldr	r3, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80a9 	beq.w	8001dda <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c88:	4b8e      	ldr	r3, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c90:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d007      	beq.n	8001cae <HAL_RCC_OscConfig+0x306>
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2b18      	cmp	r3, #24
 8001ca2:	d13a      	bne.n	8001d1a <HAL_RCC_OscConfig+0x372>
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d135      	bne.n	8001d1a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cae:	4b85      	ldr	r3, [pc, #532]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x31e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	2b80      	cmp	r3, #128	; 0x80
 8001cc0:	d001      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e296      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cc6:	f7ff fb95 	bl	80013f4 <HAL_GetREVID>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d817      	bhi.n	8001d04 <HAL_RCC_OscConfig+0x35c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	d108      	bne.n	8001cee <HAL_RCC_OscConfig+0x346>
 8001cdc:	4b79      	ldr	r3, [pc, #484]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ce4:	4a77      	ldr	r2, [pc, #476]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001ce6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cea:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cec:	e075      	b.n	8001dda <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cee:	4b75      	ldr	r3, [pc, #468]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	069b      	lsls	r3, r3, #26
 8001cfc:	4971      	ldr	r1, [pc, #452]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d02:	e06a      	b.n	8001dda <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d04:	4b6f      	ldr	r3, [pc, #444]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	061b      	lsls	r3, r3, #24
 8001d12:	496c      	ldr	r1, [pc, #432]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d18:	e05f      	b.n	8001dda <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d042      	beq.n	8001da8 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d22:	4b68      	ldr	r3, [pc, #416]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a67      	ldr	r2, [pc, #412]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2e:	f7ff fb31 	bl	8001394 <HAL_GetTick>
 8001d32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d36:	f7ff fb2d 	bl	8001394 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e255      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d48:	4b5e      	ldr	r3, [pc, #376]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d54:	f7ff fb4e 	bl	80013f4 <HAL_GetREVID>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d817      	bhi.n	8001d92 <HAL_RCC_OscConfig+0x3ea>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	d108      	bne.n	8001d7c <HAL_RCC_OscConfig+0x3d4>
 8001d6a:	4b56      	ldr	r3, [pc, #344]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d72:	4a54      	ldr	r2, [pc, #336]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001d74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d78:	6053      	str	r3, [r2, #4]
 8001d7a:	e02e      	b.n	8001dda <HAL_RCC_OscConfig+0x432>
 8001d7c:	4b51      	ldr	r3, [pc, #324]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	069b      	lsls	r3, r3, #26
 8001d8a:	494e      	ldr	r1, [pc, #312]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
 8001d90:	e023      	b.n	8001dda <HAL_RCC_OscConfig+0x432>
 8001d92:	4b4c      	ldr	r3, [pc, #304]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	061b      	lsls	r3, r3, #24
 8001da0:	4948      	ldr	r1, [pc, #288]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60cb      	str	r3, [r1, #12]
 8001da6:	e018      	b.n	8001dda <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001da8:	4b46      	ldr	r3, [pc, #280]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a45      	ldr	r2, [pc, #276]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff faee 	bl	8001394 <HAL_GetTick>
 8001db8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001dbc:	f7ff faea 	bl	8001394 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e212      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001dce:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d036      	beq.n	8001e54 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d019      	beq.n	8001e22 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dee:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df2:	4a34      	ldr	r2, [pc, #208]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfa:	f7ff facb 	bl	8001394 <HAL_GetTick>
 8001dfe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e02:	f7ff fac7 	bl	8001394 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e1ef      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e14:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x45a>
 8001e20:	e018      	b.n	8001e54 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e22:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e26:	4a27      	ldr	r2, [pc, #156]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2e:	f7ff fab1 	bl	8001394 <HAL_GetTick>
 8001e32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e36:	f7ff faad 	bl	8001394 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e1d5      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f0      	bne.n	8001e36 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d039      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d019      	beq.n	8001e9c <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e68:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001e6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e74:	f7ff fa8e 	bl	8001394 <HAL_GetTick>
 8001e78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e7c:	f7ff fa8a 	bl	8001394 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e1b2      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x4d4>
 8001e9a:	e01b      	b.n	8001ed4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x51c>)
 8001ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ea6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ea8:	f7ff fa74 	bl	8001394 <HAL_GetTick>
 8001eac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001eae:	e00b      	b.n	8001ec8 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001eb0:	f7ff fa70 	bl	8001394 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d904      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e198      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
 8001ec2:	bf00      	nop
 8001ec4:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ec8:	4ba3      	ldr	r3, [pc, #652]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1ed      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 8081 	beq.w	8001fe4 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ee2:	4b9e      	ldr	r3, [pc, #632]	; (800215c <HAL_RCC_OscConfig+0x7b4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a9d      	ldr	r2, [pc, #628]	; (800215c <HAL_RCC_OscConfig+0x7b4>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eee:	f7ff fa51 	bl	8001394 <HAL_GetTick>
 8001ef2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ef6:	f7ff fa4d 	bl	8001394 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b64      	cmp	r3, #100	; 0x64
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e175      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f08:	4b94      	ldr	r3, [pc, #592]	; (800215c <HAL_RCC_OscConfig+0x7b4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x582>
 8001f1c:	4b8e      	ldr	r3, [pc, #568]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	4a8d      	ldr	r2, [pc, #564]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6713      	str	r3, [r2, #112]	; 0x70
 8001f28:	e02d      	b.n	8001f86 <HAL_RCC_OscConfig+0x5de>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x5a4>
 8001f32:	4b89      	ldr	r3, [pc, #548]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8001f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f36:	4a88      	ldr	r2, [pc, #544]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3e:	4b86      	ldr	r3, [pc, #536]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f42:	4a85      	ldr	r2, [pc, #532]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8001f44:	f023 0304 	bic.w	r3, r3, #4
 8001f48:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4a:	e01c      	b.n	8001f86 <HAL_RCC_OscConfig+0x5de>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d10c      	bne.n	8001f6e <HAL_RCC_OscConfig+0x5c6>
 8001f54:	4b80      	ldr	r3, [pc, #512]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	4a7f      	ldr	r2, [pc, #508]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f60:	4b7d      	ldr	r3, [pc, #500]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	4a7c      	ldr	r2, [pc, #496]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6c:	e00b      	b.n	8001f86 <HAL_RCC_OscConfig+0x5de>
 8001f6e:	4b7a      	ldr	r3, [pc, #488]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f72:	4a79      	ldr	r2, [pc, #484]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7a:	4b77      	ldr	r3, [pc, #476]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	4a76      	ldr	r2, [pc, #472]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8001f80:	f023 0304 	bic.w	r3, r3, #4
 8001f84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d015      	beq.n	8001fba <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8e:	f7ff fa01 	bl	8001394 <HAL_GetTick>
 8001f92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f7ff f9fd 	bl	8001394 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e123      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fac:	4b6a      	ldr	r3, [pc, #424]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0ee      	beq.n	8001f96 <HAL_RCC_OscConfig+0x5ee>
 8001fb8:	e014      	b.n	8001fe4 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fba:	f7ff f9eb 	bl	8001394 <HAL_GetTick>
 8001fbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7ff f9e7 	bl	8001394 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e10d      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fd8:	4b5f      	ldr	r3, [pc, #380]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1ee      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 8102 	beq.w	80021f2 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001fee:	4b5a      	ldr	r3, [pc, #360]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ff6:	2b18      	cmp	r3, #24
 8001ff8:	f000 80bd 	beq.w	8002176 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	2b02      	cmp	r3, #2
 8002002:	f040 8095 	bne.w	8002130 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b54      	ldr	r3, [pc, #336]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a53      	ldr	r2, [pc, #332]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 800200c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7ff f9bf 	bl	8001394 <HAL_GetTick>
 8002016:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201a:	f7ff f9bb 	bl	8001394 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e0e3      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800202c:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f0      	bne.n	800201a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002038:	4b47      	ldr	r3, [pc, #284]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 800203a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800203c:	4b48      	ldr	r3, [pc, #288]	; (8002160 <HAL_RCC_OscConfig+0x7b8>)
 800203e:	4013      	ands	r3, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002048:	0112      	lsls	r2, r2, #4
 800204a:	430a      	orrs	r2, r1
 800204c:	4942      	ldr	r1, [pc, #264]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 800204e:	4313      	orrs	r3, r2
 8002050:	628b      	str	r3, [r1, #40]	; 0x28
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	3b01      	subs	r3, #1
 8002058:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002060:	3b01      	subs	r3, #1
 8002062:	025b      	lsls	r3, r3, #9
 8002064:	b29b      	uxth	r3, r3
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206c:	3b01      	subs	r3, #1
 800206e:	041b      	lsls	r3, r3, #16
 8002070:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207a:	3b01      	subs	r3, #1
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002082:	4935      	ldr	r1, [pc, #212]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8002084:	4313      	orrs	r3, r2
 8002086:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002088:	4b33      	ldr	r3, [pc, #204]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	4a32      	ldr	r2, [pc, #200]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 800208e:	f023 0301 	bic.w	r3, r3, #1
 8002092:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002094:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8002096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002098:	4b32      	ldr	r3, [pc, #200]	; (8002164 <HAL_RCC_OscConfig+0x7bc>)
 800209a:	4013      	ands	r3, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020a0:	00d2      	lsls	r2, r2, #3
 80020a2:	492d      	ldr	r1, [pc, #180]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80020a8:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	f023 020c 	bic.w	r2, r3, #12
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	4928      	ldr	r1, [pc, #160]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80020ba:	4b27      	ldr	r3, [pc, #156]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	f023 0202 	bic.w	r2, r3, #2
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	4924      	ldr	r1, [pc, #144]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80020cc:	4b22      	ldr	r3, [pc, #136]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	4a21      	ldr	r2, [pc, #132]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 80020d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020d8:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 80020de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020e4:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	4a1b      	ldr	r2, [pc, #108]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 80020ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	4a18      	ldr	r2, [pc, #96]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020fc:	4b16      	ldr	r3, [pc, #88]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a15      	ldr	r2, [pc, #84]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8002102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7ff f944 	bl	8001394 <HAL_GetTick>
 800210c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002110:	f7ff f940 	bl	8001394 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e068      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x768>
 800212e:	e060      	b.n	80021f2 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a08      	ldr	r2, [pc, #32]	; (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8002136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800213a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff f92a 	bl	8001394 <HAL_GetTick>
 8002140:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002142:	e011      	b.n	8002168 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002144:	f7ff f926 	bl	8001394 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d90a      	bls.n	8002168 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e04e      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
 8002156:	bf00      	nop
 8002158:	58024400 	.word	0x58024400
 800215c:	58024800 	.word	0x58024800
 8002160:	fffffc0c 	.word	0xfffffc0c
 8002164:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002168:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCC_OscConfig+0x854>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1e7      	bne.n	8002144 <HAL_RCC_OscConfig+0x79c>
 8002174:	e03d      	b.n	80021f2 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <HAL_RCC_OscConfig+0x854>)
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800217c:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <HAL_RCC_OscConfig+0x854>)
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	2b01      	cmp	r3, #1
 8002188:	d031      	beq.n	80021ee <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f003 0203 	and.w	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002194:	429a      	cmp	r2, r3
 8002196:	d12a      	bne.n	80021ee <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d122      	bne.n	80021ee <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d11a      	bne.n	80021ee <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	0a5b      	lsrs	r3, r3, #9
 80021bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d111      	bne.n	80021ee <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	0c1b      	lsrs	r3, r3, #16
 80021ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d108      	bne.n	80021ee <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	0e1b      	lsrs	r3, r3, #24
 80021e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3730      	adds	r7, #48	; 0x30
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	58024400 	.word	0x58024400

08002200 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e19c      	b.n	800254e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002214:	4b8a      	ldr	r3, [pc, #552]	; (8002440 <HAL_RCC_ClockConfig+0x240>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d910      	bls.n	8002244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b87      	ldr	r3, [pc, #540]	; (8002440 <HAL_RCC_ClockConfig+0x240>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 020f 	bic.w	r2, r3, #15
 800222a:	4985      	ldr	r1, [pc, #532]	; (8002440 <HAL_RCC_ClockConfig+0x240>)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002232:	4b83      	ldr	r3, [pc, #524]	; (8002440 <HAL_RCC_ClockConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d001      	beq.n	8002244 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e184      	b.n	800254e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d010      	beq.n	8002272 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	4b7b      	ldr	r3, [pc, #492]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800225c:	429a      	cmp	r2, r3
 800225e:	d908      	bls.n	8002272 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002260:	4b78      	ldr	r3, [pc, #480]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	4975      	ldr	r1, [pc, #468]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 800226e:	4313      	orrs	r3, r2
 8002270:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d010      	beq.n	80022a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695a      	ldr	r2, [r3, #20]
 8002282:	4b70      	ldr	r3, [pc, #448]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800228a:	429a      	cmp	r2, r3
 800228c:	d908      	bls.n	80022a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800228e:	4b6d      	ldr	r3, [pc, #436]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	496a      	ldr	r1, [pc, #424]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 800229c:	4313      	orrs	r3, r2
 800229e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d010      	beq.n	80022ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699a      	ldr	r2, [r3, #24]
 80022b0:	4b64      	ldr	r3, [pc, #400]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d908      	bls.n	80022ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022bc:	4b61      	ldr	r3, [pc, #388]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	495e      	ldr	r1, [pc, #376]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0320 	and.w	r3, r3, #32
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d010      	beq.n	80022fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69da      	ldr	r2, [r3, #28]
 80022de:	4b59      	ldr	r3, [pc, #356]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d908      	bls.n	80022fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022ea:	4b56      	ldr	r3, [pc, #344]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	4953      	ldr	r1, [pc, #332]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d010      	beq.n	800232a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	4b4d      	ldr	r3, [pc, #308]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	429a      	cmp	r2, r3
 8002316:	d908      	bls.n	800232a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002318:	4b4a      	ldr	r3, [pc, #296]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f023 020f 	bic.w	r2, r3, #15
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4947      	ldr	r1, [pc, #284]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 8002326:	4313      	orrs	r3, r2
 8002328:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d055      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002336:	4b43      	ldr	r3, [pc, #268]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	4940      	ldr	r1, [pc, #256]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 8002344:	4313      	orrs	r3, r2
 8002346:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d107      	bne.n	8002360 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002350:	4b3c      	ldr	r3, [pc, #240]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d121      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0f6      	b.n	800254e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d107      	bne.n	8002378 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002368:	4b36      	ldr	r3, [pc, #216]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d115      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0ea      	b.n	800254e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d107      	bne.n	8002390 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002380:	4b30      	ldr	r3, [pc, #192]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d109      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0de      	b.n	800254e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002390:	4b2c      	ldr	r3, [pc, #176]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0d6      	b.n	800254e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023a0:	4b28      	ldr	r3, [pc, #160]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	f023 0207 	bic.w	r2, r3, #7
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4925      	ldr	r1, [pc, #148]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b2:	f7fe ffef 	bl	8001394 <HAL_GetTick>
 80023b6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ba:	f7fe ffeb 	bl	8001394 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0be      	b.n	800254e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d0:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	429a      	cmp	r2, r3
 80023e0:	d1eb      	bne.n	80023ba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d010      	beq.n	8002410 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	4b14      	ldr	r3, [pc, #80]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d208      	bcs.n	8002410 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fe:	4b11      	ldr	r3, [pc, #68]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f023 020f 	bic.w	r2, r3, #15
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	490e      	ldr	r1, [pc, #56]	; (8002444 <HAL_RCC_ClockConfig+0x244>)
 800240c:	4313      	orrs	r3, r2
 800240e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_ClockConfig+0x240>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d214      	bcs.n	8002448 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_RCC_ClockConfig+0x240>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 020f 	bic.w	r2, r3, #15
 8002426:	4906      	ldr	r1, [pc, #24]	; (8002440 <HAL_RCC_ClockConfig+0x240>)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	4313      	orrs	r3, r2
 800242c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242e:	4b04      	ldr	r3, [pc, #16]	; (8002440 <HAL_RCC_ClockConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e086      	b.n	800254e <HAL_RCC_ClockConfig+0x34e>
 8002440:	52002000 	.word	0x52002000
 8002444:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d010      	beq.n	8002476 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	4b3f      	ldr	r3, [pc, #252]	; (8002558 <HAL_RCC_ClockConfig+0x358>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002460:	429a      	cmp	r2, r3
 8002462:	d208      	bcs.n	8002476 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002464:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <HAL_RCC_ClockConfig+0x358>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	4939      	ldr	r1, [pc, #228]	; (8002558 <HAL_RCC_ClockConfig+0x358>)
 8002472:	4313      	orrs	r3, r2
 8002474:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d010      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	4b34      	ldr	r3, [pc, #208]	; (8002558 <HAL_RCC_ClockConfig+0x358>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800248e:	429a      	cmp	r2, r3
 8002490:	d208      	bcs.n	80024a4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002492:	4b31      	ldr	r3, [pc, #196]	; (8002558 <HAL_RCC_ClockConfig+0x358>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	492e      	ldr	r1, [pc, #184]	; (8002558 <HAL_RCC_ClockConfig+0x358>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d010      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699a      	ldr	r2, [r3, #24]
 80024b4:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_RCC_ClockConfig+0x358>)
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024bc:	429a      	cmp	r2, r3
 80024be:	d208      	bcs.n	80024d2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_RCC_ClockConfig+0x358>)
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	4922      	ldr	r1, [pc, #136]	; (8002558 <HAL_RCC_ClockConfig+0x358>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0320 	and.w	r3, r3, #32
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d010      	beq.n	8002500 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69da      	ldr	r2, [r3, #28]
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_RCC_ClockConfig+0x358>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d208      	bcs.n	8002500 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80024ee:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <HAL_RCC_ClockConfig+0x358>)
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	4917      	ldr	r1, [pc, #92]	; (8002558 <HAL_RCC_ClockConfig+0x358>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002500:	f000 f834 	bl	800256c <HAL_RCC_GetSysClockFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <HAL_RCC_ClockConfig+0x358>)
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	4912      	ldr	r1, [pc, #72]	; (800255c <HAL_RCC_ClockConfig+0x35c>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	fa22 f303 	lsr.w	r3, r2, r3
 800251c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_RCC_ClockConfig+0x358>)
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	4a0d      	ldr	r2, [pc, #52]	; (800255c <HAL_RCC_ClockConfig+0x35c>)
 8002528:	5cd3      	ldrb	r3, [r2, r3]
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
 8002534:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <HAL_RCC_ClockConfig+0x360>)
 8002536:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002538:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <HAL_RCC_ClockConfig+0x364>)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_RCC_ClockConfig+0x368>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fedc 	bl	8001300 <HAL_InitTick>
 8002548:	4603      	mov	r3, r0
 800254a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800254c:	7bfb      	ldrb	r3, [r7, #15]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	58024400 	.word	0x58024400
 800255c:	0800646c 	.word	0x0800646c
 8002560:	2400000c 	.word	0x2400000c
 8002564:	24000008 	.word	0x24000008
 8002568:	24000010 	.word	0x24000010

0800256c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002572:	4bb3      	ldr	r3, [pc, #716]	; (8002840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800257a:	2b18      	cmp	r3, #24
 800257c:	f200 8155 	bhi.w	800282a <HAL_RCC_GetSysClockFreq+0x2be>
 8002580:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002586:	bf00      	nop
 8002588:	080025ed 	.word	0x080025ed
 800258c:	0800282b 	.word	0x0800282b
 8002590:	0800282b 	.word	0x0800282b
 8002594:	0800282b 	.word	0x0800282b
 8002598:	0800282b 	.word	0x0800282b
 800259c:	0800282b 	.word	0x0800282b
 80025a0:	0800282b 	.word	0x0800282b
 80025a4:	0800282b 	.word	0x0800282b
 80025a8:	08002613 	.word	0x08002613
 80025ac:	0800282b 	.word	0x0800282b
 80025b0:	0800282b 	.word	0x0800282b
 80025b4:	0800282b 	.word	0x0800282b
 80025b8:	0800282b 	.word	0x0800282b
 80025bc:	0800282b 	.word	0x0800282b
 80025c0:	0800282b 	.word	0x0800282b
 80025c4:	0800282b 	.word	0x0800282b
 80025c8:	08002619 	.word	0x08002619
 80025cc:	0800282b 	.word	0x0800282b
 80025d0:	0800282b 	.word	0x0800282b
 80025d4:	0800282b 	.word	0x0800282b
 80025d8:	0800282b 	.word	0x0800282b
 80025dc:	0800282b 	.word	0x0800282b
 80025e0:	0800282b 	.word	0x0800282b
 80025e4:	0800282b 	.word	0x0800282b
 80025e8:	0800261f 	.word	0x0800261f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025ec:	4b94      	ldr	r3, [pc, #592]	; (8002840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d009      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025f8:	4b91      	ldr	r3, [pc, #580]	; (8002840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	08db      	lsrs	r3, r3, #3
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	4a90      	ldr	r2, [pc, #576]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
 8002608:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800260a:	e111      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800260c:	4b8d      	ldr	r3, [pc, #564]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800260e:	61bb      	str	r3, [r7, #24]
    break;
 8002610:	e10e      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002612:	4b8d      	ldr	r3, [pc, #564]	; (8002848 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002614:	61bb      	str	r3, [r7, #24]
    break;
 8002616:	e10b      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002618:	4b8c      	ldr	r3, [pc, #560]	; (800284c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800261a:	61bb      	str	r3, [r7, #24]
    break;
 800261c:	e108      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800261e:	4b88      	ldr	r3, [pc, #544]	; (8002840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002628:	4b85      	ldr	r3, [pc, #532]	; (8002840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002632:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002634:	4b82      	ldr	r3, [pc, #520]	; (8002840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800263e:	4b80      	ldr	r3, [pc, #512]	; (8002840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002642:	08db      	lsrs	r3, r3, #3
 8002644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	ee07 3a90 	vmov	s15, r3
 8002652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002656:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80e1 	beq.w	8002824 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b02      	cmp	r3, #2
 8002666:	f000 8083 	beq.w	8002770 <HAL_RCC_GetSysClockFreq+0x204>
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b02      	cmp	r3, #2
 800266e:	f200 80a1 	bhi.w	80027b4 <HAL_RCC_GetSysClockFreq+0x248>
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0x114>
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d056      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0x1c0>
 800267e:	e099      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002680:	4b6f      	ldr	r3, [pc, #444]	; (8002840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	d02d      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800268c:	4b6c      	ldr	r3, [pc, #432]	; (8002840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	08db      	lsrs	r3, r3, #3
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	4a6b      	ldr	r2, [pc, #428]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
 800269c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	ee07 3a90 	vmov	s15, r3
 80026a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	ee07 3a90 	vmov	s15, r3
 80026ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026b6:	4b62      	ldr	r3, [pc, #392]	; (8002840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002850 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80026e6:	e087      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	ee07 3a90 	vmov	s15, r3
 80026ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002854 <HAL_RCC_GetSysClockFreq+0x2e8>
 80026f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026fa:	4b51      	ldr	r3, [pc, #324]	; (8002840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002702:	ee07 3a90 	vmov	s15, r3
 8002706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800270a:	ed97 6a02 	vldr	s12, [r7, #8]
 800270e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002850 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800271a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800271e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800272a:	e065      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	ee07 3a90 	vmov	s15, r3
 8002732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002736:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002858 <HAL_RCC_GetSysClockFreq+0x2ec>
 800273a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800273e:	4b40      	ldr	r3, [pc, #256]	; (8002840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002746:	ee07 3a90 	vmov	s15, r3
 800274a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800274e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002752:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002850 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800275a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800275e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800276e:	e043      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800277a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800285c <HAL_RCC_GetSysClockFreq+0x2f0>
 800277e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002782:	4b2f      	ldr	r3, [pc, #188]	; (8002840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002792:	ed97 6a02 	vldr	s12, [r7, #8]
 8002796:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002850 <HAL_RCC_GetSysClockFreq+0x2e4>
 800279a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800279e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027b2:	e021      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	ee07 3a90 	vmov	s15, r3
 80027ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002858 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027c6:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ce:	ee07 3a90 	vmov	s15, r3
 80027d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002850 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027f6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	0a5b      	lsrs	r3, r3, #9
 80027fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002802:	3301      	adds	r3, #1
 8002804:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002810:	edd7 6a07 	vldr	s13, [r7, #28]
 8002814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800281c:	ee17 3a90 	vmov	r3, s15
 8002820:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002822:	e005      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
    break;
 8002828:	e002      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800282a:	4b07      	ldr	r3, [pc, #28]	; (8002848 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800282c:	61bb      	str	r3, [r7, #24]
    break;
 800282e:	bf00      	nop
  }

  return sysclockfreq;
 8002830:	69bb      	ldr	r3, [r7, #24]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3724      	adds	r7, #36	; 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	58024400 	.word	0x58024400
 8002844:	03d09000 	.word	0x03d09000
 8002848:	003d0900 	.word	0x003d0900
 800284c:	017d7840 	.word	0x017d7840
 8002850:	46000000 	.word	0x46000000
 8002854:	4c742400 	.word	0x4c742400
 8002858:	4a742400 	.word	0x4a742400
 800285c:	4bbebc20 	.word	0x4bbebc20

08002860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002866:	f7ff fe81 	bl	800256c <HAL_RCC_GetSysClockFreq>
 800286a:	4602      	mov	r2, r0
 800286c:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	490f      	ldr	r1, [pc, #60]	; (80028b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002878:	5ccb      	ldrb	r3, [r1, r3]
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800288e:	5cd3      	ldrb	r3, [r2, r3]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	fa22 f303 	lsr.w	r3, r2, r3
 800289a:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800289c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800289e:	4a07      	ldr	r2, [pc, #28]	; (80028bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	58024400 	.word	0x58024400
 80028b4:	0800646c 	.word	0x0800646c
 80028b8:	2400000c 	.word	0x2400000c
 80028bc:	24000008 	.word	0x24000008

080028c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80028c4:	f7ff ffcc 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	4904      	ldr	r1, [pc, #16]	; (80028e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028d6:	5ccb      	ldrb	r3, [r1, r3]
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	58024400 	.word	0x58024400
 80028e8:	0800646c 	.word	0x0800646c

080028ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80028f0:	f7ff ffb6 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	4904      	ldr	r1, [pc, #16]	; (8002914 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800290c:	4618      	mov	r0, r3
 800290e:	bd80      	pop	{r7, pc}
 8002910:	58024400 	.word	0x58024400
 8002914:	0800646c 	.word	0x0800646c

08002918 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002920:	2300      	movs	r3, #0
 8002922:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002924:	2300      	movs	r3, #0
 8002926:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d03f      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002938:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800293c:	d02a      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800293e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002942:	d824      	bhi.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002944:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002948:	d018      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800294a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800294e:	d81e      	bhi.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002958:	d007      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800295a:	e018      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800295c:	4bab      	ldr	r3, [pc, #684]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	4aaa      	ldr	r2, [pc, #680]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002966:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002968:	e015      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3304      	adds	r3, #4
 800296e:	2102      	movs	r1, #2
 8002970:	4618      	mov	r0, r3
 8002972:	f001 f9cf 	bl	8003d14 <RCCEx_PLL2_Config>
 8002976:	4603      	mov	r3, r0
 8002978:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800297a:	e00c      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3324      	adds	r3, #36	; 0x24
 8002980:	2102      	movs	r1, #2
 8002982:	4618      	mov	r0, r3
 8002984:	f001 fa78 	bl	8003e78 <RCCEx_PLL3_Config>
 8002988:	4603      	mov	r3, r0
 800298a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800298c:	e003      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	75fb      	strb	r3, [r7, #23]
      break;
 8002992:	e000      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002996:	7dfb      	ldrb	r3, [r7, #23]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800299c:	4b9b      	ldr	r3, [pc, #620]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800299e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029a8:	4998      	ldr	r1, [pc, #608]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	650b      	str	r3, [r1, #80]	; 0x50
 80029ae:	e001      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b0:	7dfb      	ldrb	r3, [r7, #23]
 80029b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d03d      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d826      	bhi.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80029c8:	a201      	add	r2, pc, #4	; (adr r2, 80029d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80029ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ce:	bf00      	nop
 80029d0:	080029e5 	.word	0x080029e5
 80029d4:	080029f3 	.word	0x080029f3
 80029d8:	08002a05 	.word	0x08002a05
 80029dc:	08002a1d 	.word	0x08002a1d
 80029e0:	08002a1d 	.word	0x08002a1d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e4:	4b89      	ldr	r3, [pc, #548]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	4a88      	ldr	r2, [pc, #544]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029f0:	e015      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3304      	adds	r3, #4
 80029f6:	2100      	movs	r1, #0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 f98b 	bl	8003d14 <RCCEx_PLL2_Config>
 80029fe:	4603      	mov	r3, r0
 8002a00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a02:	e00c      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3324      	adds	r3, #36	; 0x24
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f001 fa34 	bl	8003e78 <RCCEx_PLL3_Config>
 8002a10:	4603      	mov	r3, r0
 8002a12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a14:	e003      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	75fb      	strb	r3, [r7, #23]
      break;
 8002a1a:	e000      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a1e:	7dfb      	ldrb	r3, [r7, #23]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d109      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a24:	4b79      	ldr	r3, [pc, #484]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a28:	f023 0207 	bic.w	r2, r3, #7
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a30:	4976      	ldr	r1, [pc, #472]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	650b      	str	r3, [r1, #80]	; 0x50
 8002a36:	e001      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d042      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a50:	d02b      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a56:	d825      	bhi.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a58:	2bc0      	cmp	r3, #192	; 0xc0
 8002a5a:	d028      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002a5c:	2bc0      	cmp	r3, #192	; 0xc0
 8002a5e:	d821      	bhi.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a60:	2b80      	cmp	r3, #128	; 0x80
 8002a62:	d016      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002a64:	2b80      	cmp	r3, #128	; 0x80
 8002a66:	d81d      	bhi.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002a6c:	2b40      	cmp	r3, #64	; 0x40
 8002a6e:	d007      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002a70:	e018      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a72:	4b66      	ldr	r3, [pc, #408]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	4a65      	ldr	r2, [pc, #404]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a7e:	e017      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3304      	adds	r3, #4
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 f944 	bl	8003d14 <RCCEx_PLL2_Config>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a90:	e00e      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3324      	adds	r3, #36	; 0x24
 8002a96:	2100      	movs	r1, #0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f001 f9ed 	bl	8003e78 <RCCEx_PLL3_Config>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002aa2:	e005      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8002aa8:	e002      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002aaa:	bf00      	nop
 8002aac:	e000      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002ab6:	4b55      	ldr	r3, [pc, #340]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	4952      	ldr	r1, [pc, #328]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	650b      	str	r3, [r1, #80]	; 0x50
 8002ac8:	e001      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aca:	7dfb      	ldrb	r3, [r7, #23]
 8002acc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d049      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ae0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ae4:	d030      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002ae6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002aea:	d82a      	bhi.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002aec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002af0:	d02c      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002af2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002af6:	d824      	bhi.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002afc:	d018      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b02:	d81e      	bhi.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002b08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b0c:	d007      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002b0e:	e018      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b10:	4b3e      	ldr	r3, [pc, #248]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	4a3d      	ldr	r2, [pc, #244]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b1c:	e017      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2100      	movs	r1, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f001 f8f5 	bl	8003d14 <RCCEx_PLL2_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002b2e:	e00e      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3324      	adds	r3, #36	; 0x24
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f001 f99e 	bl	8003e78 <RCCEx_PLL3_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b40:	e005      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	75fb      	strb	r3, [r7, #23]
      break;
 8002b46:	e002      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b48:	bf00      	nop
 8002b4a:	e000      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b4e:	7dfb      	ldrb	r3, [r7, #23]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10a      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b54:	4b2d      	ldr	r3, [pc, #180]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b62:	492a      	ldr	r1, [pc, #168]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	658b      	str	r3, [r1, #88]	; 0x58
 8002b68:	e001      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d04c      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b84:	d030      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002b86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b8a:	d82a      	bhi.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b90:	d02c      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002b92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b96:	d824      	bhi.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b9c:	d018      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002b9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ba2:	d81e      	bhi.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bac:	d007      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002bae:	e018      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bb0:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	4a15      	ldr	r2, [pc, #84]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bbc:	e017      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f001 f8a5 	bl	8003d14 <RCCEx_PLL2_Config>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002bce:	e00e      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3324      	adds	r3, #36	; 0x24
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f001 f94e 	bl	8003e78 <RCCEx_PLL3_Config>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002be0:	e005      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	75fb      	strb	r3, [r7, #23]
      break;
 8002be6:	e002      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002be8:	bf00      	nop
 8002bea:	e000      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bee:	7dfb      	ldrb	r3, [r7, #23]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10d      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c02:	4902      	ldr	r1, [pc, #8]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	658b      	str	r3, [r1, #88]	; 0x58
 8002c08:	e004      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002c0a:	bf00      	nop
 8002c0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d032      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c24:	2b30      	cmp	r3, #48	; 0x30
 8002c26:	d01c      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002c28:	2b30      	cmp	r3, #48	; 0x30
 8002c2a:	d817      	bhi.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d00c      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d813      	bhi.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d016      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002c38:	2b10      	cmp	r3, #16
 8002c3a:	d10f      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c3c:	4baf      	ldr	r3, [pc, #700]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	4aae      	ldr	r2, [pc, #696]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c48:	e00e      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	2102      	movs	r1, #2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f001 f85f 	bl	8003d14 <RCCEx_PLL2_Config>
 8002c56:	4603      	mov	r3, r0
 8002c58:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c5a:	e005      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c60:	e002      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002c62:	bf00      	nop
 8002c64:	e000      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c68:	7dfb      	ldrb	r3, [r7, #23]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c6e:	4ba3      	ldr	r3, [pc, #652]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c72:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7a:	49a0      	ldr	r1, [pc, #640]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c80:	e001      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
 8002c84:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d047      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c9a:	d030      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ca0:	d82a      	bhi.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002ca2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ca6:	d02c      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002ca8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cac:	d824      	bhi.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb2:	d018      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb8:	d81e      	bhi.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc2:	d007      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002cc4:	e018      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cc6:	4b8d      	ldr	r3, [pc, #564]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	4a8c      	ldr	r2, [pc, #560]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002cd2:	e017      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 f81a 	bl	8003d14 <RCCEx_PLL2_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ce4:	e00e      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3324      	adds	r3, #36	; 0x24
 8002cea:	2100      	movs	r1, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	f001 f8c3 	bl	8003e78 <RCCEx_PLL3_Config>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002cf6:	e005      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8002cfc:	e002      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002cfe:	bf00      	nop
 8002d00:	e000      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002d02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d109      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d0a:	4b7c      	ldr	r3, [pc, #496]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	4979      	ldr	r1, [pc, #484]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	650b      	str	r3, [r1, #80]	; 0x50
 8002d1c:	e001      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
 8002d20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d049      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d36:	d02e      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d3c:	d828      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002d3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d42:	d02a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002d44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d48:	d822      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002d4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d4e:	d026      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002d50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d54:	d81c      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002d56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d5a:	d010      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002d5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d60:	d816      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d01d      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6a:	d111      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	2101      	movs	r1, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 ffce 	bl	8003d14 <RCCEx_PLL2_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d7c:	e012      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3324      	adds	r3, #36	; 0x24
 8002d82:	2101      	movs	r1, #1
 8002d84:	4618      	mov	r0, r3
 8002d86:	f001 f877 	bl	8003e78 <RCCEx_PLL3_Config>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d8e:	e009      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	75fb      	strb	r3, [r7, #23]
      break;
 8002d94:	e006      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002d96:	bf00      	nop
 8002d98:	e004      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002d9a:	bf00      	nop
 8002d9c:	e002      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002d9e:	bf00      	nop
 8002da0:	e000      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002da2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002daa:	4b54      	ldr	r3, [pc, #336]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dae:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db6:	4951      	ldr	r1, [pc, #324]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	650b      	str	r3, [r1, #80]	; 0x50
 8002dbc:	e001      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
 8002dc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d04b      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dd8:	d02e      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dde:	d828      	bhi.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de4:	d02a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dea:	d822      	bhi.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002dec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002df0:	d026      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002df2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002df6:	d81c      	bhi.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dfc:	d010      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e02:	d816      	bhi.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01d      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002e08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e0c:	d111      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3304      	adds	r3, #4
 8002e12:	2101      	movs	r1, #1
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 ff7d 	bl	8003d14 <RCCEx_PLL2_Config>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e1e:	e012      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3324      	adds	r3, #36	; 0x24
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f001 f826 	bl	8003e78 <RCCEx_PLL3_Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e30:	e009      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	75fb      	strb	r3, [r7, #23]
      break;
 8002e36:	e006      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002e38:	bf00      	nop
 8002e3a:	e004      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002e3c:	bf00      	nop
 8002e3e:	e002      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002e40:	bf00      	nop
 8002e42:	e000      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e46:	7dfb      	ldrb	r3, [r7, #23]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10a      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e4c:	4b2b      	ldr	r3, [pc, #172]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e50:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e5a:	4928      	ldr	r1, [pc, #160]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	658b      	str	r3, [r1, #88]	; 0x58
 8002e60:	e001      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
 8002e64:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d02f      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e7a:	d00e      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e80:	d814      	bhi.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x594>
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d015      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e8a:	d10f      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	4a1a      	ldr	r2, [pc, #104]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e98:	e00c      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 ff37 	bl	8003d14 <RCCEx_PLL2_Config>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002eaa:	e003      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	75fb      	strb	r3, [r7, #23]
      break;
 8002eb0:	e000      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8002eb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ebe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec6:	490d      	ldr	r1, [pc, #52]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	650b      	str	r3, [r1, #80]	; 0x50
 8002ecc:	e001      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ece:	7dfb      	ldrb	r3, [r7, #23]
 8002ed0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d033      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d81c      	bhi.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002ee6:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002f27 	.word	0x08002f27
 8002ef0:	08002f01 	.word	0x08002f01
 8002ef4:	08002f0f 	.word	0x08002f0f
 8002ef8:	08002f27 	.word	0x08002f27
 8002efc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f00:	4bb8      	ldr	r3, [pc, #736]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	4ab7      	ldr	r2, [pc, #732]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f0c:	e00c      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3304      	adds	r3, #4
 8002f12:	2102      	movs	r1, #2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fefd 	bl	8003d14 <RCCEx_PLL2_Config>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f1e:	e003      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	75fb      	strb	r3, [r7, #23]
      break;
 8002f24:	e000      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f2e:	4bad      	ldr	r3, [pc, #692]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f32:	f023 0203 	bic.w	r2, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	49aa      	ldr	r1, [pc, #680]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f40:	e001      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f42:	7dfb      	ldrb	r3, [r7, #23]
 8002f44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 8086 	beq.w	8003060 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f54:	4ba4      	ldr	r3, [pc, #656]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4aa3      	ldr	r2, [pc, #652]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f60:	f7fe fa18 	bl	8001394 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f66:	e009      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f68:	f7fe fa14 	bl	8001394 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d902      	bls.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	75fb      	strb	r3, [r7, #23]
        break;
 8002f7a:	e005      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f7c:	4b9a      	ldr	r3, [pc, #616]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ef      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002f88:	7dfb      	ldrb	r3, [r7, #23]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d166      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f8e:	4b95      	ldr	r3, [pc, #596]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f98:	4053      	eors	r3, r2
 8002f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d013      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fa2:	4b90      	ldr	r3, [pc, #576]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002faa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fac:	4b8d      	ldr	r3, [pc, #564]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	4a8c      	ldr	r2, [pc, #560]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fb8:	4b8a      	ldr	r3, [pc, #552]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	4a89      	ldr	r2, [pc, #548]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002fc4:	4a87      	ldr	r2, [pc, #540]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd4:	d115      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f7fe f9dd 	bl	8001394 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fdc:	e00b      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fde:	f7fe f9d9 	bl	8001394 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d902      	bls.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	75fb      	strb	r3, [r7, #23]
            break;
 8002ff4:	e005      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ff6:	4b7b      	ldr	r3, [pc, #492]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0ed      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d126      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800300e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003016:	d10d      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003018:	4b72      	ldr	r3, [pc, #456]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003026:	0919      	lsrs	r1, r3, #4
 8003028:	4b70      	ldr	r3, [pc, #448]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800302a:	400b      	ands	r3, r1
 800302c:	496d      	ldr	r1, [pc, #436]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800302e:	4313      	orrs	r3, r2
 8003030:	610b      	str	r3, [r1, #16]
 8003032:	e005      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003034:	4b6b      	ldr	r3, [pc, #428]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	4a6a      	ldr	r2, [pc, #424]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800303a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800303e:	6113      	str	r3, [r2, #16]
 8003040:	4b68      	ldr	r3, [pc, #416]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003042:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800304a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304e:	4965      	ldr	r1, [pc, #404]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003050:	4313      	orrs	r3, r2
 8003052:	670b      	str	r3, [r1, #112]	; 0x70
 8003054:	e004      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003056:	7dfb      	ldrb	r3, [r7, #23]
 8003058:	75bb      	strb	r3, [r7, #22]
 800305a:	e001      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d07e      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003070:	2b28      	cmp	r3, #40	; 0x28
 8003072:	d867      	bhi.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003074:	a201      	add	r2, pc, #4	; (adr r2, 800307c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	0800314b 	.word	0x0800314b
 8003080:	08003145 	.word	0x08003145
 8003084:	08003145 	.word	0x08003145
 8003088:	08003145 	.word	0x08003145
 800308c:	08003145 	.word	0x08003145
 8003090:	08003145 	.word	0x08003145
 8003094:	08003145 	.word	0x08003145
 8003098:	08003145 	.word	0x08003145
 800309c:	08003121 	.word	0x08003121
 80030a0:	08003145 	.word	0x08003145
 80030a4:	08003145 	.word	0x08003145
 80030a8:	08003145 	.word	0x08003145
 80030ac:	08003145 	.word	0x08003145
 80030b0:	08003145 	.word	0x08003145
 80030b4:	08003145 	.word	0x08003145
 80030b8:	08003145 	.word	0x08003145
 80030bc:	08003133 	.word	0x08003133
 80030c0:	08003145 	.word	0x08003145
 80030c4:	08003145 	.word	0x08003145
 80030c8:	08003145 	.word	0x08003145
 80030cc:	08003145 	.word	0x08003145
 80030d0:	08003145 	.word	0x08003145
 80030d4:	08003145 	.word	0x08003145
 80030d8:	08003145 	.word	0x08003145
 80030dc:	0800314b 	.word	0x0800314b
 80030e0:	08003145 	.word	0x08003145
 80030e4:	08003145 	.word	0x08003145
 80030e8:	08003145 	.word	0x08003145
 80030ec:	08003145 	.word	0x08003145
 80030f0:	08003145 	.word	0x08003145
 80030f4:	08003145 	.word	0x08003145
 80030f8:	08003145 	.word	0x08003145
 80030fc:	0800314b 	.word	0x0800314b
 8003100:	08003145 	.word	0x08003145
 8003104:	08003145 	.word	0x08003145
 8003108:	08003145 	.word	0x08003145
 800310c:	08003145 	.word	0x08003145
 8003110:	08003145 	.word	0x08003145
 8003114:	08003145 	.word	0x08003145
 8003118:	08003145 	.word	0x08003145
 800311c:	0800314b 	.word	0x0800314b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	2101      	movs	r1, #1
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fdf4 	bl	8003d14 <RCCEx_PLL2_Config>
 800312c:	4603      	mov	r3, r0
 800312e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003130:	e00c      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3324      	adds	r3, #36	; 0x24
 8003136:	2101      	movs	r1, #1
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fe9d 	bl	8003e78 <RCCEx_PLL3_Config>
 800313e:	4603      	mov	r3, r0
 8003140:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003142:	e003      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	75fb      	strb	r3, [r7, #23]
      break;
 8003148:	e000      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800314a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800314c:	7dfb      	ldrb	r3, [r7, #23]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003152:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003156:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800315e:	4921      	ldr	r1, [pc, #132]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003160:	4313      	orrs	r3, r2
 8003162:	654b      	str	r3, [r1, #84]	; 0x54
 8003164:	e001      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003166:	7dfb      	ldrb	r3, [r7, #23]
 8003168:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d03e      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317a:	2b05      	cmp	r3, #5
 800317c:	d820      	bhi.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800317e:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003184:	080031c7 	.word	0x080031c7
 8003188:	0800319d 	.word	0x0800319d
 800318c:	080031af 	.word	0x080031af
 8003190:	080031c7 	.word	0x080031c7
 8003194:	080031c7 	.word	0x080031c7
 8003198:	080031c7 	.word	0x080031c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3304      	adds	r3, #4
 80031a0:	2101      	movs	r1, #1
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fdb6 	bl	8003d14 <RCCEx_PLL2_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80031ac:	e00c      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3324      	adds	r3, #36	; 0x24
 80031b2:	2101      	movs	r1, #1
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fe5f 	bl	8003e78 <RCCEx_PLL3_Config>
 80031ba:	4603      	mov	r3, r0
 80031bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80031be:	e003      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	75fb      	strb	r3, [r7, #23]
      break;
 80031c4:	e000      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80031c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d110      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	f023 0207 	bic.w	r2, r3, #7
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031da:	4902      	ldr	r1, [pc, #8]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	654b      	str	r3, [r1, #84]	; 0x54
 80031e0:	e008      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80031e2:	bf00      	nop
 80031e4:	58024400 	.word	0x58024400
 80031e8:	58024800 	.word	0x58024800
 80031ec:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f0:	7dfb      	ldrb	r3, [r7, #23]
 80031f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d039      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	2b05      	cmp	r3, #5
 8003208:	d820      	bhi.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800320a:	a201      	add	r2, pc, #4	; (adr r2, 8003210 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800320c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003210:	08003253 	.word	0x08003253
 8003214:	08003229 	.word	0x08003229
 8003218:	0800323b 	.word	0x0800323b
 800321c:	08003253 	.word	0x08003253
 8003220:	08003253 	.word	0x08003253
 8003224:	08003253 	.word	0x08003253
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3304      	adds	r3, #4
 800322c:	2101      	movs	r1, #1
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fd70 	bl	8003d14 <RCCEx_PLL2_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003238:	e00c      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3324      	adds	r3, #36	; 0x24
 800323e:	2101      	movs	r1, #1
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fe19 	bl	8003e78 <RCCEx_PLL3_Config>
 8003246:	4603      	mov	r3, r0
 8003248:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800324a:	e003      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	75fb      	strb	r3, [r7, #23]
      break;
 8003250:	e000      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10a      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800325a:	4bb7      	ldr	r3, [pc, #732]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325e:	f023 0207 	bic.w	r2, r3, #7
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003268:	49b3      	ldr	r1, [pc, #716]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800326a:	4313      	orrs	r3, r2
 800326c:	658b      	str	r3, [r1, #88]	; 0x58
 800326e:	e001      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003270:	7dfb      	ldrb	r3, [r7, #23]
 8003272:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d04b      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003286:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800328a:	d02e      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800328c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003290:	d828      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003296:	d02a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329c:	d822      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800329e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032a2:	d026      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80032a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032a8:	d81c      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80032aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ae:	d010      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80032b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032b4:	d816      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d01d      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80032ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032be:	d111      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3304      	adds	r3, #4
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fd24 	bl	8003d14 <RCCEx_PLL2_Config>
 80032cc:	4603      	mov	r3, r0
 80032ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80032d0:	e012      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3324      	adds	r3, #36	; 0x24
 80032d6:	2102      	movs	r1, #2
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fdcd 	bl	8003e78 <RCCEx_PLL3_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80032e2:	e009      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	75fb      	strb	r3, [r7, #23]
      break;
 80032e8:	e006      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80032ea:	bf00      	nop
 80032ec:	e004      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80032ee:	bf00      	nop
 80032f0:	e002      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80032f2:	bf00      	nop
 80032f4:	e000      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80032f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032fe:	4b8e      	ldr	r3, [pc, #568]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800330c:	498a      	ldr	r1, [pc, #552]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800330e:	4313      	orrs	r3, r2
 8003310:	654b      	str	r3, [r1, #84]	; 0x54
 8003312:	e001      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003314:	7dfb      	ldrb	r3, [r7, #23]
 8003316:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d04b      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800332a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800332e:	d02e      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003330:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003334:	d828      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333a:	d02a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800333c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003340:	d822      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003342:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003346:	d026      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003348:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800334c:	d81c      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800334e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003352:	d010      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003358:	d816      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800335a:	2b00      	cmp	r3, #0
 800335c:	d01d      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800335e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003362:	d111      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3304      	adds	r3, #4
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fcd2 	bl	8003d14 <RCCEx_PLL2_Config>
 8003370:	4603      	mov	r3, r0
 8003372:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003374:	e012      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3324      	adds	r3, #36	; 0x24
 800337a:	2102      	movs	r1, #2
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fd7b 	bl	8003e78 <RCCEx_PLL3_Config>
 8003382:	4603      	mov	r3, r0
 8003384:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003386:	e009      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	75fb      	strb	r3, [r7, #23]
      break;
 800338c:	e006      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800338e:	bf00      	nop
 8003390:	e004      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003392:	bf00      	nop
 8003394:	e002      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003396:	bf00      	nop
 8003398:	e000      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800339a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033a2:	4b65      	ldr	r3, [pc, #404]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033b0:	4961      	ldr	r1, [pc, #388]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	658b      	str	r3, [r1, #88]	; 0x58
 80033b6:	e001      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d04b      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033d2:	d02e      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80033d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033d8:	d828      	bhi.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80033da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033de:	d02a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80033e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e4:	d822      	bhi.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80033e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80033ea:	d026      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80033ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80033f0:	d81c      	bhi.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80033f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033f6:	d010      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80033f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033fc:	d816      	bhi.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d01d      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003406:	d111      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3304      	adds	r3, #4
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fc80 	bl	8003d14 <RCCEx_PLL2_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003418:	e012      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3324      	adds	r3, #36	; 0x24
 800341e:	2102      	movs	r1, #2
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fd29 	bl	8003e78 <RCCEx_PLL3_Config>
 8003426:	4603      	mov	r3, r0
 8003428:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800342a:	e009      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	75fb      	strb	r3, [r7, #23]
      break;
 8003430:	e006      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003432:	bf00      	nop
 8003434:	e004      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003436:	bf00      	nop
 8003438:	e002      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800343a:	bf00      	nop
 800343c:	e000      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800343e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10a      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003446:	4b3c      	ldr	r3, [pc, #240]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003454:	4938      	ldr	r1, [pc, #224]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003456:	4313      	orrs	r3, r2
 8003458:	658b      	str	r3, [r1, #88]	; 0x58
 800345a:	e001      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345c:	7dfb      	ldrb	r3, [r7, #23]
 800345e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01a      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003476:	d10a      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3324      	adds	r3, #36	; 0x24
 800347c:	2102      	movs	r1, #2
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fcfa 	bl	8003e78 <RCCEx_PLL3_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800348e:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003492:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800349c:	4926      	ldr	r1, [pc, #152]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0310 	and.w	r3, r3, #16
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d01a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b8:	d10a      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3324      	adds	r3, #36	; 0x24
 80034be:	2102      	movs	r1, #2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fcd9 	bl	8003e78 <RCCEx_PLL3_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034d0:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034de:	4916      	ldr	r1, [pc, #88]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d036      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034fa:	d01f      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80034fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003500:	d817      	bhi.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800350a:	d009      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800350c:	e011      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3304      	adds	r3, #4
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fbfd 	bl	8003d14 <RCCEx_PLL2_Config>
 800351a:	4603      	mov	r3, r0
 800351c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800351e:	e00e      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3324      	adds	r3, #36	; 0x24
 8003524:	2102      	movs	r1, #2
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fca6 	bl	8003e78 <RCCEx_PLL3_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003530:	e005      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	75fb      	strb	r3, [r7, #23]
      break;
 8003536:	e002      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003538:	58024400 	.word	0x58024400
      break;
 800353c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800353e:	7dfb      	ldrb	r3, [r7, #23]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003544:	4b93      	ldr	r3, [pc, #588]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003552:	4990      	ldr	r1, [pc, #576]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003554:	4313      	orrs	r3, r2
 8003556:	658b      	str	r3, [r1, #88]	; 0x58
 8003558:	e001      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355a:	7dfb      	ldrb	r3, [r7, #23]
 800355c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d033      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003570:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003574:	d01c      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003576:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800357a:	d816      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800357c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003580:	d003      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003582:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003586:	d007      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003588:	e00f      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800358a:	4b82      	ldr	r3, [pc, #520]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	4a81      	ldr	r2, [pc, #516]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003594:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003596:	e00c      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3324      	adds	r3, #36	; 0x24
 800359c:	2101      	movs	r1, #1
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fc6a 	bl	8003e78 <RCCEx_PLL3_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80035a8:	e003      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	75fb      	strb	r3, [r7, #23]
      break;
 80035ae:	e000      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80035b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10a      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035b8:	4b76      	ldr	r3, [pc, #472]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c6:	4973      	ldr	r1, [pc, #460]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	654b      	str	r3, [r1, #84]	; 0x54
 80035cc:	e001      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
 80035d0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d029      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80035e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ea:	d007      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80035ec:	e00f      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ee:	4b69      	ldr	r3, [pc, #420]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	4a68      	ldr	r2, [pc, #416]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80035fa:	e00b      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3304      	adds	r3, #4
 8003600:	2102      	movs	r1, #2
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fb86 	bl	8003d14 <RCCEx_PLL2_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800360c:	e002      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	75fb      	strb	r3, [r7, #23]
      break;
 8003612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003614:	7dfb      	ldrb	r3, [r7, #23]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800361a:	4b5e      	ldr	r3, [pc, #376]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800361c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003626:	495b      	ldr	r1, [pc, #364]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800362c:	e001      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362e:	7dfb      	ldrb	r3, [r7, #23]
 8003630:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3324      	adds	r3, #36	; 0x24
 8003642:	2102      	movs	r1, #2
 8003644:	4618      	mov	r0, r3
 8003646:	f000 fc17 	bl	8003e78 <RCCEx_PLL3_Config>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d030      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003664:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003668:	d017      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800366a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800366e:	d811      	bhi.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003674:	d013      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800367a:	d80b      	bhi.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800367c:	2b00      	cmp	r3, #0
 800367e:	d010      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003684:	d106      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003686:	4b43      	ldr	r3, [pc, #268]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	4a42      	ldr	r2, [pc, #264]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800368c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003690:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003692:	e007      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	75fb      	strb	r3, [r7, #23]
      break;
 8003698:	e004      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800369a:	bf00      	nop
 800369c:	e002      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800369e:	bf00      	nop
 80036a0:	e000      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80036a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036aa:	4b3a      	ldr	r3, [pc, #232]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036b6:	4937      	ldr	r1, [pc, #220]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	654b      	str	r3, [r1, #84]	; 0x54
 80036bc:	e001      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036be:	7dfb      	ldrb	r3, [r7, #23]
 80036c0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d008      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036ce:	4b31      	ldr	r3, [pc, #196]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	492e      	ldr	r1, [pc, #184]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d009      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80036ec:	4b29      	ldr	r3, [pc, #164]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036fa:	4926      	ldr	r1, [pc, #152]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800370c:	4b21      	ldr	r3, [pc, #132]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800370e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003710:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003718:	491e      	ldr	r1, [pc, #120]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800371a:	4313      	orrs	r3, r2
 800371c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00d      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800372a:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003730:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003734:	6113      	str	r3, [r2, #16]
 8003736:	4b17      	ldr	r3, [pc, #92]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003740:	4914      	ldr	r1, [pc, #80]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003742:	4313      	orrs	r3, r2
 8003744:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	da08      	bge.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003752:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800375a:	490e      	ldr	r1, [pc, #56]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800375c:	4313      	orrs	r3, r2
 800375e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800376c:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800376e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003770:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	4906      	ldr	r1, [pc, #24]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800377c:	4313      	orrs	r3, r2
 800377e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003780:	7dbb      	ldrb	r3, [r7, #22]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	e000      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	58024400 	.word	0x58024400

08003798 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800379c:	f7ff f860 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4904      	ldr	r1, [pc, #16]	; (80037c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	f003 031f 	and.w	r3, r3, #31
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	58024400 	.word	0x58024400
 80037c0:	0800646c 	.word	0x0800646c

080037c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b089      	sub	sp, #36	; 0x24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037cc:	4ba1      	ldr	r3, [pc, #644]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80037d6:	4b9f      	ldr	r3, [pc, #636]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	0b1b      	lsrs	r3, r3, #12
 80037dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80037e2:	4b9c      	ldr	r3, [pc, #624]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80037ee:	4b99      	ldr	r3, [pc, #612]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f2:	08db      	lsrs	r3, r3, #3
 80037f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	fb02 f303 	mul.w	r3, r2, r3
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003806:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8111 	beq.w	8003a34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	2b02      	cmp	r3, #2
 8003816:	f000 8083 	beq.w	8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	2b02      	cmp	r3, #2
 800381e:	f200 80a1 	bhi.w	8003964 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d056      	beq.n	80038dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800382e:	e099      	b.n	8003964 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003830:	4b88      	ldr	r3, [pc, #544]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d02d      	beq.n	8003898 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800383c:	4b85      	ldr	r3, [pc, #532]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	08db      	lsrs	r3, r3, #3
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	4a84      	ldr	r2, [pc, #528]	; (8003a58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003848:	fa22 f303 	lsr.w	r3, r2, r3
 800384c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	ee07 3a90 	vmov	s15, r3
 8003854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003866:	4b7b      	ldr	r3, [pc, #492]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003876:	ed97 6a03 	vldr	s12, [r7, #12]
 800387a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800387e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800388a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800388e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003892:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003896:	e087      	b.n	80039a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80038a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038aa:	4b6a      	ldr	r3, [pc, #424]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b2:	ee07 3a90 	vmov	s15, r3
 80038b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80038be:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038da:	e065      	b.n	80039a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ee:	4b59      	ldr	r3, [pc, #356]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f6:	ee07 3a90 	vmov	s15, r3
 80038fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003902:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800390a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800391e:	e043      	b.n	80039a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800392e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003932:	4b48      	ldr	r3, [pc, #288]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003942:	ed97 6a03 	vldr	s12, [r7, #12]
 8003946:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800394a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800394e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800395a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003962:	e021      	b.n	80039a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003976:	4b37      	ldr	r3, [pc, #220]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003986:	ed97 6a03 	vldr	s12, [r7, #12]
 800398a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800398e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800399a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80039a8:	4b2a      	ldr	r3, [pc, #168]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	0a5b      	lsrs	r3, r3, #9
 80039ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b2:	ee07 3a90 	vmov	s15, r3
 80039b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80039c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ce:	ee17 2a90 	vmov	r2, s15
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80039d6:	4b1f      	ldr	r3, [pc, #124]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	0c1b      	lsrs	r3, r3, #16
 80039dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e0:	ee07 3a90 	vmov	s15, r3
 80039e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80039f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039fc:	ee17 2a90 	vmov	r2, s15
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003a04:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	0e1b      	lsrs	r3, r3, #24
 8003a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a0e:	ee07 3a90 	vmov	s15, r3
 8003a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a2a:	ee17 2a90 	vmov	r2, s15
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003a32:	e008      	b.n	8003a46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	609a      	str	r2, [r3, #8]
}
 8003a46:	bf00      	nop
 8003a48:	3724      	adds	r7, #36	; 0x24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	58024400 	.word	0x58024400
 8003a58:	03d09000 	.word	0x03d09000
 8003a5c:	46000000 	.word	0x46000000
 8003a60:	4c742400 	.word	0x4c742400
 8003a64:	4a742400 	.word	0x4a742400
 8003a68:	4bbebc20 	.word	0x4bbebc20

08003a6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b089      	sub	sp, #36	; 0x24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a74:	4ba1      	ldr	r3, [pc, #644]	; (8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003a7e:	4b9f      	ldr	r3, [pc, #636]	; (8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a82:	0d1b      	lsrs	r3, r3, #20
 8003a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003a8a:	4b9c      	ldr	r3, [pc, #624]	; (8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003a96:	4b99      	ldr	r3, [pc, #612]	; (8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	08db      	lsrs	r3, r3, #3
 8003a9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	fb02 f303 	mul.w	r3, r2, r3
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 8111 	beq.w	8003cdc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	f000 8083 	beq.w	8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	f200 80a1 	bhi.w	8003c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d056      	beq.n	8003b84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003ad6:	e099      	b.n	8003c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ad8:	4b88      	ldr	r3, [pc, #544]	; (8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0320 	and.w	r3, r3, #32
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d02d      	beq.n	8003b40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ae4:	4b85      	ldr	r3, [pc, #532]	; (8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	08db      	lsrs	r3, r3, #3
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	4a84      	ldr	r2, [pc, #528]	; (8003d00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
 8003af4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	ee07 3a90 	vmov	s15, r3
 8003afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b0e:	4b7b      	ldr	r3, [pc, #492]	; (8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b22:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003b3e:	e087      	b.n	8003c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	ee07 3a90 	vmov	s15, r3
 8003b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d08 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b52:	4b6a      	ldr	r3, [pc, #424]	; (8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5a:	ee07 3a90 	vmov	s15, r3
 8003b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b66:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b82:	e065      	b.n	8003c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	ee07 3a90 	vmov	s15, r3
 8003b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b96:	4b59      	ldr	r3, [pc, #356]	; (8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003baa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bc6:	e043      	b.n	8003c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bda:	4b48      	ldr	r3, [pc, #288]	; (8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c0a:	e021      	b.n	8003c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c1e:	4b37      	ldr	r3, [pc, #220]	; (8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c32:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c4e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003c50:	4b2a      	ldr	r3, [pc, #168]	; (8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	0a5b      	lsrs	r3, r3, #9
 8003c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c5a:	ee07 3a90 	vmov	s15, r3
 8003c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c76:	ee17 2a90 	vmov	r2, s15
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003c7e:	4b1f      	ldr	r3, [pc, #124]	; (8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	0c1b      	lsrs	r3, r3, #16
 8003c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c88:	ee07 3a90 	vmov	s15, r3
 8003c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c98:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ca4:	ee17 2a90 	vmov	r2, s15
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003cac:	4b13      	ldr	r3, [pc, #76]	; (8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	0e1b      	lsrs	r3, r3, #24
 8003cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cb6:	ee07 3a90 	vmov	s15, r3
 8003cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cd2:	ee17 2a90 	vmov	r2, s15
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003cda:	e008      	b.n	8003cee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	609a      	str	r2, [r3, #8]
}
 8003cee:	bf00      	nop
 8003cf0:	3724      	adds	r7, #36	; 0x24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	58024400 	.word	0x58024400
 8003d00:	03d09000 	.word	0x03d09000
 8003d04:	46000000 	.word	0x46000000
 8003d08:	4c742400 	.word	0x4c742400
 8003d0c:	4a742400 	.word	0x4a742400
 8003d10:	4bbebc20 	.word	0x4bbebc20

08003d14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d22:	4b53      	ldr	r3, [pc, #332]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d101      	bne.n	8003d32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e099      	b.n	8003e66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d32:	4b4f      	ldr	r3, [pc, #316]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a4e      	ldr	r2, [pc, #312]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003d38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d3e:	f7fd fb29 	bl	8001394 <HAL_GetTick>
 8003d42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d44:	e008      	b.n	8003d58 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d46:	f7fd fb25 	bl	8001394 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e086      	b.n	8003e66 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d58:	4b45      	ldr	r3, [pc, #276]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1f0      	bne.n	8003d46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d64:	4b42      	ldr	r3, [pc, #264]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	031b      	lsls	r3, r3, #12
 8003d72:	493f      	ldr	r1, [pc, #252]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	628b      	str	r3, [r1, #40]	; 0x28
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	025b      	lsls	r3, r3, #9
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	041b      	lsls	r3, r3, #16
 8003d96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	061b      	lsls	r3, r3, #24
 8003da4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003da8:	4931      	ldr	r1, [pc, #196]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003dae:	4b30      	ldr	r3, [pc, #192]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	492d      	ldr	r1, [pc, #180]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003dc0:	4b2b      	ldr	r3, [pc, #172]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	f023 0220 	bic.w	r2, r3, #32
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	4928      	ldr	r1, [pc, #160]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003dd2:	4b27      	ldr	r3, [pc, #156]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	4a26      	ldr	r2, [pc, #152]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003dd8:	f023 0310 	bic.w	r3, r3, #16
 8003ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003dde:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003de0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003de2:	4b24      	ldr	r3, [pc, #144]	; (8003e74 <RCCEx_PLL2_Config+0x160>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	69d2      	ldr	r2, [r2, #28]
 8003dea:	00d2      	lsls	r2, r2, #3
 8003dec:	4920      	ldr	r1, [pc, #128]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003df2:	4b1f      	ldr	r3, [pc, #124]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	4a1e      	ldr	r2, [pc, #120]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003df8:	f043 0310 	orr.w	r3, r3, #16
 8003dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d106      	bne.n	8003e12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e04:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	4a19      	ldr	r2, [pc, #100]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003e0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e10:	e00f      	b.n	8003e32 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d106      	bne.n	8003e26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e18:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	4a14      	ldr	r2, [pc, #80]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e24:	e005      	b.n	8003e32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e26:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	4a11      	ldr	r2, [pc, #68]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003e2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e32:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a0e      	ldr	r2, [pc, #56]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003e38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3e:	f7fd faa9 	bl	8001394 <HAL_GetTick>
 8003e42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e44:	e008      	b.n	8003e58 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003e46:	f7fd faa5 	bl	8001394 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e006      	b.n	8003e66 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e58:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <RCCEx_PLL2_Config+0x15c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0f0      	beq.n	8003e46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	58024400 	.word	0x58024400
 8003e74:	ffff0007 	.word	0xffff0007

08003e78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e86:	4b53      	ldr	r3, [pc, #332]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d101      	bne.n	8003e96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e099      	b.n	8003fca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e96:	4b4f      	ldr	r3, [pc, #316]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a4e      	ldr	r2, [pc, #312]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea2:	f7fd fa77 	bl	8001394 <HAL_GetTick>
 8003ea6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ea8:	e008      	b.n	8003ebc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003eaa:	f7fd fa73 	bl	8001394 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e086      	b.n	8003fca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ebc:	4b45      	ldr	r3, [pc, #276]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f0      	bne.n	8003eaa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ec8:	4b42      	ldr	r3, [pc, #264]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	051b      	lsls	r3, r3, #20
 8003ed6:	493f      	ldr	r1, [pc, #252]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	628b      	str	r3, [r1, #40]	; 0x28
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	025b      	lsls	r3, r3, #9
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	041b      	lsls	r3, r3, #16
 8003efa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	061b      	lsls	r3, r3, #24
 8003f08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f0c:	4931      	ldr	r1, [pc, #196]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f12:	4b30      	ldr	r3, [pc, #192]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	492d      	ldr	r1, [pc, #180]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f24:	4b2b      	ldr	r3, [pc, #172]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	4928      	ldr	r1, [pc, #160]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f36:	4b27      	ldr	r3, [pc, #156]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	4a26      	ldr	r2, [pc, #152]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f42:	4b24      	ldr	r3, [pc, #144]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f46:	4b24      	ldr	r3, [pc, #144]	; (8003fd8 <RCCEx_PLL3_Config+0x160>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	69d2      	ldr	r2, [r2, #28]
 8003f4e:	00d2      	lsls	r2, r2, #3
 8003f50:	4920      	ldr	r1, [pc, #128]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f56:	4b1f      	ldr	r3, [pc, #124]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	4a1e      	ldr	r2, [pc, #120]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d106      	bne.n	8003f76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f68:	4b1a      	ldr	r3, [pc, #104]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	4a19      	ldr	r2, [pc, #100]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f74:	e00f      	b.n	8003f96 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d106      	bne.n	8003f8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f7c:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f88:	e005      	b.n	8003f96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f8a:	4b12      	ldr	r3, [pc, #72]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	4a11      	ldr	r2, [pc, #68]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f96:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a0e      	ldr	r2, [pc, #56]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa2:	f7fd f9f7 	bl	8001394 <HAL_GetTick>
 8003fa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fa8:	e008      	b.n	8003fbc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003faa:	f7fd f9f3 	bl	8001394 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e006      	b.n	8003fca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <RCCEx_PLL3_Config+0x15c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	58024400 	.word	0x58024400
 8003fd8:	ffff0007 	.word	0xffff0007

08003fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e049      	b.n	8004082 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fc fec2 	bl	8000d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3304      	adds	r3, #4
 8004018:	4619      	mov	r1, r3
 800401a:	4610      	mov	r0, r2
 800401c:	f000 fbb0 	bl	8004780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e049      	b.n	8004130 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f841 	bl	8004138 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2202      	movs	r2, #2
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3304      	adds	r3, #4
 80040c6:	4619      	mov	r1, r3
 80040c8:	4610      	mov	r0, r2
 80040ca:	f000 fb59 	bl	8004780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d109      	bne.n	8004170 <HAL_TIM_PWM_Start+0x24>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b01      	cmp	r3, #1
 8004166:	bf14      	ite	ne
 8004168:	2301      	movne	r3, #1
 800416a:	2300      	moveq	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e03c      	b.n	80041ea <HAL_TIM_PWM_Start+0x9e>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b04      	cmp	r3, #4
 8004174:	d109      	bne.n	800418a <HAL_TIM_PWM_Start+0x3e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b01      	cmp	r3, #1
 8004180:	bf14      	ite	ne
 8004182:	2301      	movne	r3, #1
 8004184:	2300      	moveq	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	e02f      	b.n	80041ea <HAL_TIM_PWM_Start+0x9e>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b08      	cmp	r3, #8
 800418e:	d109      	bne.n	80041a4 <HAL_TIM_PWM_Start+0x58>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b01      	cmp	r3, #1
 800419a:	bf14      	ite	ne
 800419c:	2301      	movne	r3, #1
 800419e:	2300      	moveq	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	e022      	b.n	80041ea <HAL_TIM_PWM_Start+0x9e>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b0c      	cmp	r3, #12
 80041a8:	d109      	bne.n	80041be <HAL_TIM_PWM_Start+0x72>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	bf14      	ite	ne
 80041b6:	2301      	movne	r3, #1
 80041b8:	2300      	moveq	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	e015      	b.n	80041ea <HAL_TIM_PWM_Start+0x9e>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d109      	bne.n	80041d8 <HAL_TIM_PWM_Start+0x8c>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	bf14      	ite	ne
 80041d0:	2301      	movne	r3, #1
 80041d2:	2300      	moveq	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	e008      	b.n	80041ea <HAL_TIM_PWM_Start+0x9e>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	bf14      	ite	ne
 80041e4:	2301      	movne	r3, #1
 80041e6:	2300      	moveq	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e0a1      	b.n	8004336 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d104      	bne.n	8004202 <HAL_TIM_PWM_Start+0xb6>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004200:	e023      	b.n	800424a <HAL_TIM_PWM_Start+0xfe>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b04      	cmp	r3, #4
 8004206:	d104      	bne.n	8004212 <HAL_TIM_PWM_Start+0xc6>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004210:	e01b      	b.n	800424a <HAL_TIM_PWM_Start+0xfe>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b08      	cmp	r3, #8
 8004216:	d104      	bne.n	8004222 <HAL_TIM_PWM_Start+0xd6>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004220:	e013      	b.n	800424a <HAL_TIM_PWM_Start+0xfe>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b0c      	cmp	r3, #12
 8004226:	d104      	bne.n	8004232 <HAL_TIM_PWM_Start+0xe6>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004230:	e00b      	b.n	800424a <HAL_TIM_PWM_Start+0xfe>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b10      	cmp	r3, #16
 8004236:	d104      	bne.n	8004242 <HAL_TIM_PWM_Start+0xf6>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004240:	e003      	b.n	800424a <HAL_TIM_PWM_Start+0xfe>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2202      	movs	r2, #2
 8004246:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2201      	movs	r2, #1
 8004250:	6839      	ldr	r1, [r7, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fea2 	bl	8004f9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a38      	ldr	r2, [pc, #224]	; (8004340 <HAL_TIM_PWM_Start+0x1f4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d013      	beq.n	800428a <HAL_TIM_PWM_Start+0x13e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a37      	ldr	r2, [pc, #220]	; (8004344 <HAL_TIM_PWM_Start+0x1f8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00e      	beq.n	800428a <HAL_TIM_PWM_Start+0x13e>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a35      	ldr	r2, [pc, #212]	; (8004348 <HAL_TIM_PWM_Start+0x1fc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d009      	beq.n	800428a <HAL_TIM_PWM_Start+0x13e>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a34      	ldr	r2, [pc, #208]	; (800434c <HAL_TIM_PWM_Start+0x200>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d004      	beq.n	800428a <HAL_TIM_PWM_Start+0x13e>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a32      	ldr	r2, [pc, #200]	; (8004350 <HAL_TIM_PWM_Start+0x204>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d101      	bne.n	800428e <HAL_TIM_PWM_Start+0x142>
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <HAL_TIM_PWM_Start+0x144>
 800428e:	2300      	movs	r3, #0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d007      	beq.n	80042a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a25      	ldr	r2, [pc, #148]	; (8004340 <HAL_TIM_PWM_Start+0x1f4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d022      	beq.n	80042f4 <HAL_TIM_PWM_Start+0x1a8>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b6:	d01d      	beq.n	80042f4 <HAL_TIM_PWM_Start+0x1a8>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a25      	ldr	r2, [pc, #148]	; (8004354 <HAL_TIM_PWM_Start+0x208>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d018      	beq.n	80042f4 <HAL_TIM_PWM_Start+0x1a8>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a24      	ldr	r2, [pc, #144]	; (8004358 <HAL_TIM_PWM_Start+0x20c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d013      	beq.n	80042f4 <HAL_TIM_PWM_Start+0x1a8>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a22      	ldr	r2, [pc, #136]	; (800435c <HAL_TIM_PWM_Start+0x210>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00e      	beq.n	80042f4 <HAL_TIM_PWM_Start+0x1a8>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1a      	ldr	r2, [pc, #104]	; (8004344 <HAL_TIM_PWM_Start+0x1f8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d009      	beq.n	80042f4 <HAL_TIM_PWM_Start+0x1a8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1e      	ldr	r2, [pc, #120]	; (8004360 <HAL_TIM_PWM_Start+0x214>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d004      	beq.n	80042f4 <HAL_TIM_PWM_Start+0x1a8>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a16      	ldr	r2, [pc, #88]	; (8004348 <HAL_TIM_PWM_Start+0x1fc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d115      	bne.n	8004320 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	4b1a      	ldr	r3, [pc, #104]	; (8004364 <HAL_TIM_PWM_Start+0x218>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b06      	cmp	r3, #6
 8004304:	d015      	beq.n	8004332 <HAL_TIM_PWM_Start+0x1e6>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430c:	d011      	beq.n	8004332 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0201 	orr.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431e:	e008      	b.n	8004332 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	e000      	b.n	8004334 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004332:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40010000 	.word	0x40010000
 8004344:	40010400 	.word	0x40010400
 8004348:	40014000 	.word	0x40014000
 800434c:	40014400 	.word	0x40014400
 8004350:	40014800 	.word	0x40014800
 8004354:	40000400 	.word	0x40000400
 8004358:	40000800 	.word	0x40000800
 800435c:	40000c00 	.word	0x40000c00
 8004360:	40001800 	.word	0x40001800
 8004364:	00010007 	.word	0x00010007

08004368 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004382:	2302      	movs	r3, #2
 8004384:	e0ff      	b.n	8004586 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b14      	cmp	r3, #20
 8004392:	f200 80f0 	bhi.w	8004576 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004396:	a201      	add	r2, pc, #4	; (adr r2, 800439c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439c:	080043f1 	.word	0x080043f1
 80043a0:	08004577 	.word	0x08004577
 80043a4:	08004577 	.word	0x08004577
 80043a8:	08004577 	.word	0x08004577
 80043ac:	08004431 	.word	0x08004431
 80043b0:	08004577 	.word	0x08004577
 80043b4:	08004577 	.word	0x08004577
 80043b8:	08004577 	.word	0x08004577
 80043bc:	08004473 	.word	0x08004473
 80043c0:	08004577 	.word	0x08004577
 80043c4:	08004577 	.word	0x08004577
 80043c8:	08004577 	.word	0x08004577
 80043cc:	080044b3 	.word	0x080044b3
 80043d0:	08004577 	.word	0x08004577
 80043d4:	08004577 	.word	0x08004577
 80043d8:	08004577 	.word	0x08004577
 80043dc:	080044f5 	.word	0x080044f5
 80043e0:	08004577 	.word	0x08004577
 80043e4:	08004577 	.word	0x08004577
 80043e8:	08004577 	.word	0x08004577
 80043ec:	08004535 	.word	0x08004535
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68b9      	ldr	r1, [r7, #8]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fa5c 	bl	80048b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699a      	ldr	r2, [r3, #24]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0208 	orr.w	r2, r2, #8
 800440a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0204 	bic.w	r2, r2, #4
 800441a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6999      	ldr	r1, [r3, #24]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	691a      	ldr	r2, [r3, #16]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	619a      	str	r2, [r3, #24]
      break;
 800442e:	e0a5      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 facc 	bl	80049d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800444a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6999      	ldr	r1, [r3, #24]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	021a      	lsls	r2, r3, #8
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	619a      	str	r2, [r3, #24]
      break;
 8004470:	e084      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fb35 	bl	8004ae8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0208 	orr.w	r2, r2, #8
 800448c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0204 	bic.w	r2, r2, #4
 800449c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69d9      	ldr	r1, [r3, #28]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	61da      	str	r2, [r3, #28]
      break;
 80044b0:	e064      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fb9d 	bl	8004bf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69d9      	ldr	r1, [r3, #28]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	021a      	lsls	r2, r3, #8
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	61da      	str	r2, [r3, #28]
      break;
 80044f2:	e043      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fbe6 	bl	8004ccc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0208 	orr.w	r2, r2, #8
 800450e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0204 	bic.w	r2, r2, #4
 800451e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	691a      	ldr	r2, [r3, #16]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004532:	e023      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fc2a 	bl	8004d94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800454e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800455e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	021a      	lsls	r2, r3, #8
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004574:	e002      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	75fb      	strb	r3, [r7, #23]
      break;
 800457a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004584:	7dfb      	ldrb	r3, [r7, #23]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop

08004590 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_TIM_ConfigClockSource+0x1c>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e0dc      	b.n	8004766 <HAL_TIM_ConfigClockSource+0x1d6>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	4b6a      	ldr	r3, [pc, #424]	; (8004770 <HAL_TIM_ConfigClockSource+0x1e0>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a64      	ldr	r2, [pc, #400]	; (8004774 <HAL_TIM_ConfigClockSource+0x1e4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	f000 80a9 	beq.w	800473a <HAL_TIM_ConfigClockSource+0x1aa>
 80045e8:	4a62      	ldr	r2, [pc, #392]	; (8004774 <HAL_TIM_ConfigClockSource+0x1e4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	f200 80ae 	bhi.w	800474c <HAL_TIM_ConfigClockSource+0x1bc>
 80045f0:	4a61      	ldr	r2, [pc, #388]	; (8004778 <HAL_TIM_ConfigClockSource+0x1e8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	f000 80a1 	beq.w	800473a <HAL_TIM_ConfigClockSource+0x1aa>
 80045f8:	4a5f      	ldr	r2, [pc, #380]	; (8004778 <HAL_TIM_ConfigClockSource+0x1e8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	f200 80a6 	bhi.w	800474c <HAL_TIM_ConfigClockSource+0x1bc>
 8004600:	4a5e      	ldr	r2, [pc, #376]	; (800477c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004602:	4293      	cmp	r3, r2
 8004604:	f000 8099 	beq.w	800473a <HAL_TIM_ConfigClockSource+0x1aa>
 8004608:	4a5c      	ldr	r2, [pc, #368]	; (800477c <HAL_TIM_ConfigClockSource+0x1ec>)
 800460a:	4293      	cmp	r3, r2
 800460c:	f200 809e 	bhi.w	800474c <HAL_TIM_ConfigClockSource+0x1bc>
 8004610:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004614:	f000 8091 	beq.w	800473a <HAL_TIM_ConfigClockSource+0x1aa>
 8004618:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800461c:	f200 8096 	bhi.w	800474c <HAL_TIM_ConfigClockSource+0x1bc>
 8004620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004624:	f000 8089 	beq.w	800473a <HAL_TIM_ConfigClockSource+0x1aa>
 8004628:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800462c:	f200 808e 	bhi.w	800474c <HAL_TIM_ConfigClockSource+0x1bc>
 8004630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004634:	d03e      	beq.n	80046b4 <HAL_TIM_ConfigClockSource+0x124>
 8004636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800463a:	f200 8087 	bhi.w	800474c <HAL_TIM_ConfigClockSource+0x1bc>
 800463e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004642:	f000 8086 	beq.w	8004752 <HAL_TIM_ConfigClockSource+0x1c2>
 8004646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464a:	d87f      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x1bc>
 800464c:	2b70      	cmp	r3, #112	; 0x70
 800464e:	d01a      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0xf6>
 8004650:	2b70      	cmp	r3, #112	; 0x70
 8004652:	d87b      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x1bc>
 8004654:	2b60      	cmp	r3, #96	; 0x60
 8004656:	d050      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0x16a>
 8004658:	2b60      	cmp	r3, #96	; 0x60
 800465a:	d877      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x1bc>
 800465c:	2b50      	cmp	r3, #80	; 0x50
 800465e:	d03c      	beq.n	80046da <HAL_TIM_ConfigClockSource+0x14a>
 8004660:	2b50      	cmp	r3, #80	; 0x50
 8004662:	d873      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x1bc>
 8004664:	2b40      	cmp	r3, #64	; 0x40
 8004666:	d058      	beq.n	800471a <HAL_TIM_ConfigClockSource+0x18a>
 8004668:	2b40      	cmp	r3, #64	; 0x40
 800466a:	d86f      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x1bc>
 800466c:	2b30      	cmp	r3, #48	; 0x30
 800466e:	d064      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x1aa>
 8004670:	2b30      	cmp	r3, #48	; 0x30
 8004672:	d86b      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x1bc>
 8004674:	2b20      	cmp	r3, #32
 8004676:	d060      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x1aa>
 8004678:	2b20      	cmp	r3, #32
 800467a:	d867      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x1bc>
 800467c:	2b00      	cmp	r3, #0
 800467e:	d05c      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x1aa>
 8004680:	2b10      	cmp	r3, #16
 8004682:	d05a      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x1aa>
 8004684:	e062      	b.n	800474c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	6899      	ldr	r1, [r3, #8]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f000 fc61 	bl	8004f5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	609a      	str	r2, [r3, #8]
      break;
 80046b2:	e04f      	b.n	8004754 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	6899      	ldr	r1, [r3, #8]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f000 fc4a 	bl	8004f5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046d6:	609a      	str	r2, [r3, #8]
      break;
 80046d8:	e03c      	b.n	8004754 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6859      	ldr	r1, [r3, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	461a      	mov	r2, r3
 80046e8:	f000 fbba 	bl	8004e60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2150      	movs	r1, #80	; 0x50
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fc14 	bl	8004f20 <TIM_ITRx_SetConfig>
      break;
 80046f8:	e02c      	b.n	8004754 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	6859      	ldr	r1, [r3, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	461a      	mov	r2, r3
 8004708:	f000 fbd9 	bl	8004ebe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2160      	movs	r1, #96	; 0x60
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fc04 	bl	8004f20 <TIM_ITRx_SetConfig>
      break;
 8004718:	e01c      	b.n	8004754 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	6859      	ldr	r1, [r3, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	461a      	mov	r2, r3
 8004728:	f000 fb9a 	bl	8004e60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2140      	movs	r1, #64	; 0x40
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fbf4 	bl	8004f20 <TIM_ITRx_SetConfig>
      break;
 8004738:	e00c      	b.n	8004754 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4619      	mov	r1, r3
 8004744:	4610      	mov	r0, r2
 8004746:	f000 fbeb 	bl	8004f20 <TIM_ITRx_SetConfig>
      break;
 800474a:	e003      	b.n	8004754 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
      break;
 8004750:	e000      	b.n	8004754 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004752:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004764:	7bfb      	ldrb	r3, [r7, #15]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	ffceff88 	.word	0xffceff88
 8004774:	00100040 	.word	0x00100040
 8004778:	00100030 	.word	0x00100030
 800477c:	00100020 	.word	0x00100020

08004780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a40      	ldr	r2, [pc, #256]	; (8004894 <TIM_Base_SetConfig+0x114>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d013      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479e:	d00f      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a3d      	ldr	r2, [pc, #244]	; (8004898 <TIM_Base_SetConfig+0x118>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00b      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a3c      	ldr	r2, [pc, #240]	; (800489c <TIM_Base_SetConfig+0x11c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d007      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a3b      	ldr	r2, [pc, #236]	; (80048a0 <TIM_Base_SetConfig+0x120>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d003      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a3a      	ldr	r2, [pc, #232]	; (80048a4 <TIM_Base_SetConfig+0x124>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d108      	bne.n	80047d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a2f      	ldr	r2, [pc, #188]	; (8004894 <TIM_Base_SetConfig+0x114>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d01f      	beq.n	800481a <TIM_Base_SetConfig+0x9a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e0:	d01b      	beq.n	800481a <TIM_Base_SetConfig+0x9a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a2c      	ldr	r2, [pc, #176]	; (8004898 <TIM_Base_SetConfig+0x118>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d017      	beq.n	800481a <TIM_Base_SetConfig+0x9a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a2b      	ldr	r2, [pc, #172]	; (800489c <TIM_Base_SetConfig+0x11c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d013      	beq.n	800481a <TIM_Base_SetConfig+0x9a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a2a      	ldr	r2, [pc, #168]	; (80048a0 <TIM_Base_SetConfig+0x120>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00f      	beq.n	800481a <TIM_Base_SetConfig+0x9a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a29      	ldr	r2, [pc, #164]	; (80048a4 <TIM_Base_SetConfig+0x124>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00b      	beq.n	800481a <TIM_Base_SetConfig+0x9a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a28      	ldr	r2, [pc, #160]	; (80048a8 <TIM_Base_SetConfig+0x128>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d007      	beq.n	800481a <TIM_Base_SetConfig+0x9a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a27      	ldr	r2, [pc, #156]	; (80048ac <TIM_Base_SetConfig+0x12c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d003      	beq.n	800481a <TIM_Base_SetConfig+0x9a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a26      	ldr	r2, [pc, #152]	; (80048b0 <TIM_Base_SetConfig+0x130>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d108      	bne.n	800482c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a10      	ldr	r2, [pc, #64]	; (8004894 <TIM_Base_SetConfig+0x114>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00f      	beq.n	8004878 <TIM_Base_SetConfig+0xf8>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a12      	ldr	r2, [pc, #72]	; (80048a4 <TIM_Base_SetConfig+0x124>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00b      	beq.n	8004878 <TIM_Base_SetConfig+0xf8>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a11      	ldr	r2, [pc, #68]	; (80048a8 <TIM_Base_SetConfig+0x128>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d007      	beq.n	8004878 <TIM_Base_SetConfig+0xf8>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a10      	ldr	r2, [pc, #64]	; (80048ac <TIM_Base_SetConfig+0x12c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d003      	beq.n	8004878 <TIM_Base_SetConfig+0xf8>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a0f      	ldr	r2, [pc, #60]	; (80048b0 <TIM_Base_SetConfig+0x130>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d103      	bne.n	8004880 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	615a      	str	r2, [r3, #20]
}
 8004886:	bf00      	nop
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40010000 	.word	0x40010000
 8004898:	40000400 	.word	0x40000400
 800489c:	40000800 	.word	0x40000800
 80048a0:	40000c00 	.word	0x40000c00
 80048a4:	40010400 	.word	0x40010400
 80048a8:	40014000 	.word	0x40014000
 80048ac:	40014400 	.word	0x40014400
 80048b0:	40014800 	.word	0x40014800

080048b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f023 0201 	bic.w	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4b37      	ldr	r3, [pc, #220]	; (80049bc <TIM_OC1_SetConfig+0x108>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0303 	bic.w	r3, r3, #3
 80048ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f023 0302 	bic.w	r3, r3, #2
 80048fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a2d      	ldr	r2, [pc, #180]	; (80049c0 <TIM_OC1_SetConfig+0x10c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00f      	beq.n	8004930 <TIM_OC1_SetConfig+0x7c>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a2c      	ldr	r2, [pc, #176]	; (80049c4 <TIM_OC1_SetConfig+0x110>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00b      	beq.n	8004930 <TIM_OC1_SetConfig+0x7c>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a2b      	ldr	r2, [pc, #172]	; (80049c8 <TIM_OC1_SetConfig+0x114>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d007      	beq.n	8004930 <TIM_OC1_SetConfig+0x7c>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a2a      	ldr	r2, [pc, #168]	; (80049cc <TIM_OC1_SetConfig+0x118>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_OC1_SetConfig+0x7c>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a29      	ldr	r2, [pc, #164]	; (80049d0 <TIM_OC1_SetConfig+0x11c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d10c      	bne.n	800494a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f023 0308 	bic.w	r3, r3, #8
 8004936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f023 0304 	bic.w	r3, r3, #4
 8004948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1c      	ldr	r2, [pc, #112]	; (80049c0 <TIM_OC1_SetConfig+0x10c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00f      	beq.n	8004972 <TIM_OC1_SetConfig+0xbe>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a1b      	ldr	r2, [pc, #108]	; (80049c4 <TIM_OC1_SetConfig+0x110>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00b      	beq.n	8004972 <TIM_OC1_SetConfig+0xbe>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a1a      	ldr	r2, [pc, #104]	; (80049c8 <TIM_OC1_SetConfig+0x114>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d007      	beq.n	8004972 <TIM_OC1_SetConfig+0xbe>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a19      	ldr	r2, [pc, #100]	; (80049cc <TIM_OC1_SetConfig+0x118>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d003      	beq.n	8004972 <TIM_OC1_SetConfig+0xbe>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a18      	ldr	r2, [pc, #96]	; (80049d0 <TIM_OC1_SetConfig+0x11c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d111      	bne.n	8004996 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	621a      	str	r2, [r3, #32]
}
 80049b0:	bf00      	nop
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	fffeff8f 	.word	0xfffeff8f
 80049c0:	40010000 	.word	0x40010000
 80049c4:	40010400 	.word	0x40010400
 80049c8:	40014000 	.word	0x40014000
 80049cc:	40014400 	.word	0x40014400
 80049d0:	40014800 	.word	0x40014800

080049d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	f023 0210 	bic.w	r2, r3, #16
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4b34      	ldr	r3, [pc, #208]	; (8004ad0 <TIM_OC2_SetConfig+0xfc>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	021b      	lsls	r3, r3, #8
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f023 0320 	bic.w	r3, r3, #32
 8004a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a29      	ldr	r2, [pc, #164]	; (8004ad4 <TIM_OC2_SetConfig+0x100>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d003      	beq.n	8004a3c <TIM_OC2_SetConfig+0x68>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a28      	ldr	r2, [pc, #160]	; (8004ad8 <TIM_OC2_SetConfig+0x104>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d10d      	bne.n	8004a58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a1e      	ldr	r2, [pc, #120]	; (8004ad4 <TIM_OC2_SetConfig+0x100>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00f      	beq.n	8004a80 <TIM_OC2_SetConfig+0xac>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a1d      	ldr	r2, [pc, #116]	; (8004ad8 <TIM_OC2_SetConfig+0x104>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00b      	beq.n	8004a80 <TIM_OC2_SetConfig+0xac>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a1c      	ldr	r2, [pc, #112]	; (8004adc <TIM_OC2_SetConfig+0x108>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d007      	beq.n	8004a80 <TIM_OC2_SetConfig+0xac>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a1b      	ldr	r2, [pc, #108]	; (8004ae0 <TIM_OC2_SetConfig+0x10c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_OC2_SetConfig+0xac>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ae4 <TIM_OC2_SetConfig+0x110>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d113      	bne.n	8004aa8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	feff8fff 	.word	0xfeff8fff
 8004ad4:	40010000 	.word	0x40010000
 8004ad8:	40010400 	.word	0x40010400
 8004adc:	40014000 	.word	0x40014000
 8004ae0:	40014400 	.word	0x40014400
 8004ae4:	40014800 	.word	0x40014800

08004ae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4b33      	ldr	r3, [pc, #204]	; (8004be0 <TIM_OC3_SetConfig+0xf8>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0303 	bic.w	r3, r3, #3
 8004b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a28      	ldr	r2, [pc, #160]	; (8004be4 <TIM_OC3_SetConfig+0xfc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d003      	beq.n	8004b4e <TIM_OC3_SetConfig+0x66>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a27      	ldr	r2, [pc, #156]	; (8004be8 <TIM_OC3_SetConfig+0x100>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d10d      	bne.n	8004b6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a1d      	ldr	r2, [pc, #116]	; (8004be4 <TIM_OC3_SetConfig+0xfc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00f      	beq.n	8004b92 <TIM_OC3_SetConfig+0xaa>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a1c      	ldr	r2, [pc, #112]	; (8004be8 <TIM_OC3_SetConfig+0x100>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00b      	beq.n	8004b92 <TIM_OC3_SetConfig+0xaa>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a1b      	ldr	r2, [pc, #108]	; (8004bec <TIM_OC3_SetConfig+0x104>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d007      	beq.n	8004b92 <TIM_OC3_SetConfig+0xaa>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a1a      	ldr	r2, [pc, #104]	; (8004bf0 <TIM_OC3_SetConfig+0x108>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d003      	beq.n	8004b92 <TIM_OC3_SetConfig+0xaa>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a19      	ldr	r2, [pc, #100]	; (8004bf4 <TIM_OC3_SetConfig+0x10c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d113      	bne.n	8004bba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	621a      	str	r2, [r3, #32]
}
 8004bd4:	bf00      	nop
 8004bd6:	371c      	adds	r7, #28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	fffeff8f 	.word	0xfffeff8f
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40010400 	.word	0x40010400
 8004bec:	40014000 	.word	0x40014000
 8004bf0:	40014400 	.word	0x40014400
 8004bf4:	40014800 	.word	0x40014800

08004bf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <TIM_OC4_SetConfig+0xbc>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	021b      	lsls	r3, r3, #8
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	031b      	lsls	r3, r3, #12
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a19      	ldr	r2, [pc, #100]	; (8004cb8 <TIM_OC4_SetConfig+0xc0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00f      	beq.n	8004c78 <TIM_OC4_SetConfig+0x80>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a18      	ldr	r2, [pc, #96]	; (8004cbc <TIM_OC4_SetConfig+0xc4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d00b      	beq.n	8004c78 <TIM_OC4_SetConfig+0x80>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a17      	ldr	r2, [pc, #92]	; (8004cc0 <TIM_OC4_SetConfig+0xc8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d007      	beq.n	8004c78 <TIM_OC4_SetConfig+0x80>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a16      	ldr	r2, [pc, #88]	; (8004cc4 <TIM_OC4_SetConfig+0xcc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d003      	beq.n	8004c78 <TIM_OC4_SetConfig+0x80>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a15      	ldr	r2, [pc, #84]	; (8004cc8 <TIM_OC4_SetConfig+0xd0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d109      	bne.n	8004c8c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	019b      	lsls	r3, r3, #6
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	621a      	str	r2, [r3, #32]
}
 8004ca6:	bf00      	nop
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	feff8fff 	.word	0xfeff8fff
 8004cb8:	40010000 	.word	0x40010000
 8004cbc:	40010400 	.word	0x40010400
 8004cc0:	40014000 	.word	0x40014000
 8004cc4:	40014400 	.word	0x40014400
 8004cc8:	40014800 	.word	0x40014800

08004ccc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <TIM_OC5_SetConfig+0xb0>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	041b      	lsls	r3, r3, #16
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a18      	ldr	r2, [pc, #96]	; (8004d80 <TIM_OC5_SetConfig+0xb4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00f      	beq.n	8004d42 <TIM_OC5_SetConfig+0x76>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a17      	ldr	r2, [pc, #92]	; (8004d84 <TIM_OC5_SetConfig+0xb8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00b      	beq.n	8004d42 <TIM_OC5_SetConfig+0x76>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a16      	ldr	r2, [pc, #88]	; (8004d88 <TIM_OC5_SetConfig+0xbc>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d007      	beq.n	8004d42 <TIM_OC5_SetConfig+0x76>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a15      	ldr	r2, [pc, #84]	; (8004d8c <TIM_OC5_SetConfig+0xc0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d003      	beq.n	8004d42 <TIM_OC5_SetConfig+0x76>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a14      	ldr	r2, [pc, #80]	; (8004d90 <TIM_OC5_SetConfig+0xc4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d109      	bne.n	8004d56 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	021b      	lsls	r3, r3, #8
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	621a      	str	r2, [r3, #32]
}
 8004d70:	bf00      	nop
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	fffeff8f 	.word	0xfffeff8f
 8004d80:	40010000 	.word	0x40010000
 8004d84:	40010400 	.word	0x40010400
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800

08004d94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4b22      	ldr	r3, [pc, #136]	; (8004e48 <TIM_OC6_SetConfig+0xb4>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	051b      	lsls	r3, r3, #20
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a19      	ldr	r2, [pc, #100]	; (8004e4c <TIM_OC6_SetConfig+0xb8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00f      	beq.n	8004e0c <TIM_OC6_SetConfig+0x78>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a18      	ldr	r2, [pc, #96]	; (8004e50 <TIM_OC6_SetConfig+0xbc>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00b      	beq.n	8004e0c <TIM_OC6_SetConfig+0x78>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a17      	ldr	r2, [pc, #92]	; (8004e54 <TIM_OC6_SetConfig+0xc0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d007      	beq.n	8004e0c <TIM_OC6_SetConfig+0x78>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a16      	ldr	r2, [pc, #88]	; (8004e58 <TIM_OC6_SetConfig+0xc4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <TIM_OC6_SetConfig+0x78>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a15      	ldr	r2, [pc, #84]	; (8004e5c <TIM_OC6_SetConfig+0xc8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d109      	bne.n	8004e20 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	029b      	lsls	r3, r3, #10
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	feff8fff 	.word	0xfeff8fff
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40010400 	.word	0x40010400
 8004e54:	40014000 	.word	0x40014000
 8004e58:	40014400 	.word	0x40014400
 8004e5c:	40014800 	.word	0x40014800

08004e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f023 0201 	bic.w	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f023 030a 	bic.w	r3, r3, #10
 8004e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	621a      	str	r2, [r3, #32]
}
 8004eb2:	bf00      	nop
 8004eb4:	371c      	adds	r7, #28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b087      	sub	sp, #28
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f023 0210 	bic.w	r2, r3, #16
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ee8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	031b      	lsls	r3, r3, #12
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004efa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	621a      	str	r2, [r3, #32]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
	...

08004f20 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <TIM_ITRx_SetConfig+0x38>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f043 0307 	orr.w	r3, r3, #7
 8004f42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	609a      	str	r2, [r3, #8]
}
 8004f4a:	bf00      	nop
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	ffcfff8f 	.word	0xffcfff8f

08004f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	021a      	lsls	r2, r3, #8
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	609a      	str	r2, [r3, #8]
}
 8004f90:	bf00      	nop
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	2201      	movs	r2, #1
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a1a      	ldr	r2, [r3, #32]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	401a      	ands	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a1a      	ldr	r2, [r3, #32]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f003 031f 	and.w	r3, r3, #31
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	621a      	str	r2, [r3, #32]
}
 8004fda:	bf00      	nop
 8004fdc:	371c      	adds	r7, #28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e06d      	b.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a30      	ldr	r2, [pc, #192]	; (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d004      	beq.n	8005034 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a2f      	ldr	r2, [pc, #188]	; (80050ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d108      	bne.n	8005046 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800503a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	4313      	orrs	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a20      	ldr	r2, [pc, #128]	; (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d022      	beq.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005072:	d01d      	beq.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1d      	ldr	r2, [pc, #116]	; (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d018      	beq.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1c      	ldr	r2, [pc, #112]	; (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d013      	beq.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1a      	ldr	r2, [pc, #104]	; (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00e      	beq.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a15      	ldr	r2, [pc, #84]	; (80050ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d009      	beq.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a16      	ldr	r2, [pc, #88]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d004      	beq.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a15      	ldr	r2, [pc, #84]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d10c      	bne.n	80050ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	40010000 	.word	0x40010000
 80050ec:	40010400 	.word	0x40010400
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40000c00 	.word	0x40000c00
 80050fc:	40001800 	.word	0x40001800
 8005100:	40014000 	.word	0x40014000

08005104 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800511c:	2302      	movs	r3, #2
 800511e:	e065      	b.n	80051ec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	041b      	lsls	r3, r3, #16
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a16      	ldr	r2, [pc, #88]	; (80051f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d004      	beq.n	80051ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a14      	ldr	r2, [pc, #80]	; (80051fc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d115      	bne.n	80051da <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	051b      	lsls	r3, r3, #20
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	40010000 	.word	0x40010000
 80051fc:	40010400 	.word	0x40010400

08005200 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e042      	b.n	8005298 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005218:	2b00      	cmp	r3, #0
 800521a:	d106      	bne.n	800522a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7fb fe51 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2224      	movs	r2, #36	; 0x24
 800522e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0201 	bic.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f8c2 	bl	80053cc <UART_SetConfig>
 8005248:	4603      	mov	r3, r0
 800524a:	2b01      	cmp	r3, #1
 800524c:	d101      	bne.n	8005252 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e022      	b.n	8005298 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fe16 	bl	8005e8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800526e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800527e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fe9d 	bl	8005fd0 <UART_CheckIdleState>
 8005296:	4603      	mov	r3, r0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	; 0x28
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	4613      	mov	r3, r2
 80052ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	f040 8083 	bne.w	80053c2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <HAL_UART_Transmit+0x28>
 80052c2:	88fb      	ldrh	r3, [r7, #6]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e07b      	b.n	80053c4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d101      	bne.n	80052da <HAL_UART_Transmit+0x3a>
 80052d6:	2302      	movs	r3, #2
 80052d8:	e074      	b.n	80053c4 <HAL_UART_Transmit+0x124>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2221      	movs	r2, #33	; 0x21
 80052ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052f2:	f7fc f84f 	bl	8001394 <HAL_GetTick>
 80052f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	88fa      	ldrh	r2, [r7, #6]
 80052fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	88fa      	ldrh	r2, [r7, #6]
 8005304:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005310:	d108      	bne.n	8005324 <HAL_UART_Transmit+0x84>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d104      	bne.n	8005324 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	61bb      	str	r3, [r7, #24]
 8005322:	e003      	b.n	800532c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005328:	2300      	movs	r3, #0
 800532a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005334:	e02c      	b.n	8005390 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2200      	movs	r2, #0
 800533e:	2180      	movs	r1, #128	; 0x80
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 fe90 	bl	8006066 <UART_WaitOnFlagUntilTimeout>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e039      	b.n	80053c4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10b      	bne.n	800536e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005364:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	3302      	adds	r3, #2
 800536a:	61bb      	str	r3, [r7, #24]
 800536c:	e007      	b.n	800537e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	781a      	ldrb	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	3301      	adds	r3, #1
 800537c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005384:	b29b      	uxth	r3, r3
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005396:	b29b      	uxth	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1cc      	bne.n	8005336 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2200      	movs	r2, #0
 80053a4:	2140      	movs	r1, #64	; 0x40
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 fe5d 	bl	8006066 <UART_WaitOnFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e006      	b.n	80053c4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	e000      	b.n	80053c4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
  }
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3720      	adds	r7, #32
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053cc:	b5b0      	push	{r4, r5, r7, lr}
 80053ce:	b08e      	sub	sp, #56	; 0x38
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	4bbf      	ldr	r3, [pc, #764]	; (80056f8 <UART_SetConfig+0x32c>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6812      	ldr	r2, [r2, #0]
 8005400:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005402:	430b      	orrs	r3, r1
 8005404:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4ab5      	ldr	r2, [pc, #724]	; (80056fc <UART_SetConfig+0x330>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d004      	beq.n	8005436 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005432:	4313      	orrs	r3, r2
 8005434:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	4bb0      	ldr	r3, [pc, #704]	; (8005700 <UART_SetConfig+0x334>)
 800543e:	4013      	ands	r3, r2
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6812      	ldr	r2, [r2, #0]
 8005444:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005446:	430b      	orrs	r3, r1
 8005448:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005450:	f023 010f 	bic.w	r1, r3, #15
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4aa7      	ldr	r2, [pc, #668]	; (8005704 <UART_SetConfig+0x338>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d176      	bne.n	8005558 <UART_SetConfig+0x18c>
 800546a:	4ba7      	ldr	r3, [pc, #668]	; (8005708 <UART_SetConfig+0x33c>)
 800546c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005472:	2b28      	cmp	r3, #40	; 0x28
 8005474:	d86c      	bhi.n	8005550 <UART_SetConfig+0x184>
 8005476:	a201      	add	r2, pc, #4	; (adr r2, 800547c <UART_SetConfig+0xb0>)
 8005478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547c:	08005521 	.word	0x08005521
 8005480:	08005551 	.word	0x08005551
 8005484:	08005551 	.word	0x08005551
 8005488:	08005551 	.word	0x08005551
 800548c:	08005551 	.word	0x08005551
 8005490:	08005551 	.word	0x08005551
 8005494:	08005551 	.word	0x08005551
 8005498:	08005551 	.word	0x08005551
 800549c:	08005529 	.word	0x08005529
 80054a0:	08005551 	.word	0x08005551
 80054a4:	08005551 	.word	0x08005551
 80054a8:	08005551 	.word	0x08005551
 80054ac:	08005551 	.word	0x08005551
 80054b0:	08005551 	.word	0x08005551
 80054b4:	08005551 	.word	0x08005551
 80054b8:	08005551 	.word	0x08005551
 80054bc:	08005531 	.word	0x08005531
 80054c0:	08005551 	.word	0x08005551
 80054c4:	08005551 	.word	0x08005551
 80054c8:	08005551 	.word	0x08005551
 80054cc:	08005551 	.word	0x08005551
 80054d0:	08005551 	.word	0x08005551
 80054d4:	08005551 	.word	0x08005551
 80054d8:	08005551 	.word	0x08005551
 80054dc:	08005539 	.word	0x08005539
 80054e0:	08005551 	.word	0x08005551
 80054e4:	08005551 	.word	0x08005551
 80054e8:	08005551 	.word	0x08005551
 80054ec:	08005551 	.word	0x08005551
 80054f0:	08005551 	.word	0x08005551
 80054f4:	08005551 	.word	0x08005551
 80054f8:	08005551 	.word	0x08005551
 80054fc:	08005541 	.word	0x08005541
 8005500:	08005551 	.word	0x08005551
 8005504:	08005551 	.word	0x08005551
 8005508:	08005551 	.word	0x08005551
 800550c:	08005551 	.word	0x08005551
 8005510:	08005551 	.word	0x08005551
 8005514:	08005551 	.word	0x08005551
 8005518:	08005551 	.word	0x08005551
 800551c:	08005549 	.word	0x08005549
 8005520:	2301      	movs	r3, #1
 8005522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005526:	e222      	b.n	800596e <UART_SetConfig+0x5a2>
 8005528:	2304      	movs	r3, #4
 800552a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800552e:	e21e      	b.n	800596e <UART_SetConfig+0x5a2>
 8005530:	2308      	movs	r3, #8
 8005532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005536:	e21a      	b.n	800596e <UART_SetConfig+0x5a2>
 8005538:	2310      	movs	r3, #16
 800553a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800553e:	e216      	b.n	800596e <UART_SetConfig+0x5a2>
 8005540:	2320      	movs	r3, #32
 8005542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005546:	e212      	b.n	800596e <UART_SetConfig+0x5a2>
 8005548:	2340      	movs	r3, #64	; 0x40
 800554a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800554e:	e20e      	b.n	800596e <UART_SetConfig+0x5a2>
 8005550:	2380      	movs	r3, #128	; 0x80
 8005552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005556:	e20a      	b.n	800596e <UART_SetConfig+0x5a2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a6b      	ldr	r2, [pc, #428]	; (800570c <UART_SetConfig+0x340>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d130      	bne.n	80055c4 <UART_SetConfig+0x1f8>
 8005562:	4b69      	ldr	r3, [pc, #420]	; (8005708 <UART_SetConfig+0x33c>)
 8005564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	2b05      	cmp	r3, #5
 800556c:	d826      	bhi.n	80055bc <UART_SetConfig+0x1f0>
 800556e:	a201      	add	r2, pc, #4	; (adr r2, 8005574 <UART_SetConfig+0x1a8>)
 8005570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005574:	0800558d 	.word	0x0800558d
 8005578:	08005595 	.word	0x08005595
 800557c:	0800559d 	.word	0x0800559d
 8005580:	080055a5 	.word	0x080055a5
 8005584:	080055ad 	.word	0x080055ad
 8005588:	080055b5 	.word	0x080055b5
 800558c:	2300      	movs	r3, #0
 800558e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005592:	e1ec      	b.n	800596e <UART_SetConfig+0x5a2>
 8005594:	2304      	movs	r3, #4
 8005596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800559a:	e1e8      	b.n	800596e <UART_SetConfig+0x5a2>
 800559c:	2308      	movs	r3, #8
 800559e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055a2:	e1e4      	b.n	800596e <UART_SetConfig+0x5a2>
 80055a4:	2310      	movs	r3, #16
 80055a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055aa:	e1e0      	b.n	800596e <UART_SetConfig+0x5a2>
 80055ac:	2320      	movs	r3, #32
 80055ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055b2:	e1dc      	b.n	800596e <UART_SetConfig+0x5a2>
 80055b4:	2340      	movs	r3, #64	; 0x40
 80055b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ba:	e1d8      	b.n	800596e <UART_SetConfig+0x5a2>
 80055bc:	2380      	movs	r3, #128	; 0x80
 80055be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055c2:	e1d4      	b.n	800596e <UART_SetConfig+0x5a2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a51      	ldr	r2, [pc, #324]	; (8005710 <UART_SetConfig+0x344>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d130      	bne.n	8005630 <UART_SetConfig+0x264>
 80055ce:	4b4e      	ldr	r3, [pc, #312]	; (8005708 <UART_SetConfig+0x33c>)
 80055d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	2b05      	cmp	r3, #5
 80055d8:	d826      	bhi.n	8005628 <UART_SetConfig+0x25c>
 80055da:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <UART_SetConfig+0x214>)
 80055dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e0:	080055f9 	.word	0x080055f9
 80055e4:	08005601 	.word	0x08005601
 80055e8:	08005609 	.word	0x08005609
 80055ec:	08005611 	.word	0x08005611
 80055f0:	08005619 	.word	0x08005619
 80055f4:	08005621 	.word	0x08005621
 80055f8:	2300      	movs	r3, #0
 80055fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055fe:	e1b6      	b.n	800596e <UART_SetConfig+0x5a2>
 8005600:	2304      	movs	r3, #4
 8005602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005606:	e1b2      	b.n	800596e <UART_SetConfig+0x5a2>
 8005608:	2308      	movs	r3, #8
 800560a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800560e:	e1ae      	b.n	800596e <UART_SetConfig+0x5a2>
 8005610:	2310      	movs	r3, #16
 8005612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005616:	e1aa      	b.n	800596e <UART_SetConfig+0x5a2>
 8005618:	2320      	movs	r3, #32
 800561a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800561e:	e1a6      	b.n	800596e <UART_SetConfig+0x5a2>
 8005620:	2340      	movs	r3, #64	; 0x40
 8005622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005626:	e1a2      	b.n	800596e <UART_SetConfig+0x5a2>
 8005628:	2380      	movs	r3, #128	; 0x80
 800562a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800562e:	e19e      	b.n	800596e <UART_SetConfig+0x5a2>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a37      	ldr	r2, [pc, #220]	; (8005714 <UART_SetConfig+0x348>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d130      	bne.n	800569c <UART_SetConfig+0x2d0>
 800563a:	4b33      	ldr	r3, [pc, #204]	; (8005708 <UART_SetConfig+0x33c>)
 800563c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	2b05      	cmp	r3, #5
 8005644:	d826      	bhi.n	8005694 <UART_SetConfig+0x2c8>
 8005646:	a201      	add	r2, pc, #4	; (adr r2, 800564c <UART_SetConfig+0x280>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	08005665 	.word	0x08005665
 8005650:	0800566d 	.word	0x0800566d
 8005654:	08005675 	.word	0x08005675
 8005658:	0800567d 	.word	0x0800567d
 800565c:	08005685 	.word	0x08005685
 8005660:	0800568d 	.word	0x0800568d
 8005664:	2300      	movs	r3, #0
 8005666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800566a:	e180      	b.n	800596e <UART_SetConfig+0x5a2>
 800566c:	2304      	movs	r3, #4
 800566e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005672:	e17c      	b.n	800596e <UART_SetConfig+0x5a2>
 8005674:	2308      	movs	r3, #8
 8005676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800567a:	e178      	b.n	800596e <UART_SetConfig+0x5a2>
 800567c:	2310      	movs	r3, #16
 800567e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005682:	e174      	b.n	800596e <UART_SetConfig+0x5a2>
 8005684:	2320      	movs	r3, #32
 8005686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800568a:	e170      	b.n	800596e <UART_SetConfig+0x5a2>
 800568c:	2340      	movs	r3, #64	; 0x40
 800568e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005692:	e16c      	b.n	800596e <UART_SetConfig+0x5a2>
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800569a:	e168      	b.n	800596e <UART_SetConfig+0x5a2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1d      	ldr	r2, [pc, #116]	; (8005718 <UART_SetConfig+0x34c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d142      	bne.n	800572c <UART_SetConfig+0x360>
 80056a6:	4b18      	ldr	r3, [pc, #96]	; (8005708 <UART_SetConfig+0x33c>)
 80056a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	2b05      	cmp	r3, #5
 80056b0:	d838      	bhi.n	8005724 <UART_SetConfig+0x358>
 80056b2:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <UART_SetConfig+0x2ec>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	080056d1 	.word	0x080056d1
 80056bc:	080056d9 	.word	0x080056d9
 80056c0:	080056e1 	.word	0x080056e1
 80056c4:	080056e9 	.word	0x080056e9
 80056c8:	080056f1 	.word	0x080056f1
 80056cc:	0800571d 	.word	0x0800571d
 80056d0:	2300      	movs	r3, #0
 80056d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056d6:	e14a      	b.n	800596e <UART_SetConfig+0x5a2>
 80056d8:	2304      	movs	r3, #4
 80056da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056de:	e146      	b.n	800596e <UART_SetConfig+0x5a2>
 80056e0:	2308      	movs	r3, #8
 80056e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056e6:	e142      	b.n	800596e <UART_SetConfig+0x5a2>
 80056e8:	2310      	movs	r3, #16
 80056ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ee:	e13e      	b.n	800596e <UART_SetConfig+0x5a2>
 80056f0:	2320      	movs	r3, #32
 80056f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056f6:	e13a      	b.n	800596e <UART_SetConfig+0x5a2>
 80056f8:	cfff69f3 	.word	0xcfff69f3
 80056fc:	58000c00 	.word	0x58000c00
 8005700:	11fff4ff 	.word	0x11fff4ff
 8005704:	40011000 	.word	0x40011000
 8005708:	58024400 	.word	0x58024400
 800570c:	40004400 	.word	0x40004400
 8005710:	40004800 	.word	0x40004800
 8005714:	40004c00 	.word	0x40004c00
 8005718:	40005000 	.word	0x40005000
 800571c:	2340      	movs	r3, #64	; 0x40
 800571e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005722:	e124      	b.n	800596e <UART_SetConfig+0x5a2>
 8005724:	2380      	movs	r3, #128	; 0x80
 8005726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800572a:	e120      	b.n	800596e <UART_SetConfig+0x5a2>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4acc      	ldr	r2, [pc, #816]	; (8005a64 <UART_SetConfig+0x698>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d176      	bne.n	8005824 <UART_SetConfig+0x458>
 8005736:	4bcc      	ldr	r3, [pc, #816]	; (8005a68 <UART_SetConfig+0x69c>)
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800573e:	2b28      	cmp	r3, #40	; 0x28
 8005740:	d86c      	bhi.n	800581c <UART_SetConfig+0x450>
 8005742:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <UART_SetConfig+0x37c>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	080057ed 	.word	0x080057ed
 800574c:	0800581d 	.word	0x0800581d
 8005750:	0800581d 	.word	0x0800581d
 8005754:	0800581d 	.word	0x0800581d
 8005758:	0800581d 	.word	0x0800581d
 800575c:	0800581d 	.word	0x0800581d
 8005760:	0800581d 	.word	0x0800581d
 8005764:	0800581d 	.word	0x0800581d
 8005768:	080057f5 	.word	0x080057f5
 800576c:	0800581d 	.word	0x0800581d
 8005770:	0800581d 	.word	0x0800581d
 8005774:	0800581d 	.word	0x0800581d
 8005778:	0800581d 	.word	0x0800581d
 800577c:	0800581d 	.word	0x0800581d
 8005780:	0800581d 	.word	0x0800581d
 8005784:	0800581d 	.word	0x0800581d
 8005788:	080057fd 	.word	0x080057fd
 800578c:	0800581d 	.word	0x0800581d
 8005790:	0800581d 	.word	0x0800581d
 8005794:	0800581d 	.word	0x0800581d
 8005798:	0800581d 	.word	0x0800581d
 800579c:	0800581d 	.word	0x0800581d
 80057a0:	0800581d 	.word	0x0800581d
 80057a4:	0800581d 	.word	0x0800581d
 80057a8:	08005805 	.word	0x08005805
 80057ac:	0800581d 	.word	0x0800581d
 80057b0:	0800581d 	.word	0x0800581d
 80057b4:	0800581d 	.word	0x0800581d
 80057b8:	0800581d 	.word	0x0800581d
 80057bc:	0800581d 	.word	0x0800581d
 80057c0:	0800581d 	.word	0x0800581d
 80057c4:	0800581d 	.word	0x0800581d
 80057c8:	0800580d 	.word	0x0800580d
 80057cc:	0800581d 	.word	0x0800581d
 80057d0:	0800581d 	.word	0x0800581d
 80057d4:	0800581d 	.word	0x0800581d
 80057d8:	0800581d 	.word	0x0800581d
 80057dc:	0800581d 	.word	0x0800581d
 80057e0:	0800581d 	.word	0x0800581d
 80057e4:	0800581d 	.word	0x0800581d
 80057e8:	08005815 	.word	0x08005815
 80057ec:	2301      	movs	r3, #1
 80057ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057f2:	e0bc      	b.n	800596e <UART_SetConfig+0x5a2>
 80057f4:	2304      	movs	r3, #4
 80057f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057fa:	e0b8      	b.n	800596e <UART_SetConfig+0x5a2>
 80057fc:	2308      	movs	r3, #8
 80057fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005802:	e0b4      	b.n	800596e <UART_SetConfig+0x5a2>
 8005804:	2310      	movs	r3, #16
 8005806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800580a:	e0b0      	b.n	800596e <UART_SetConfig+0x5a2>
 800580c:	2320      	movs	r3, #32
 800580e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005812:	e0ac      	b.n	800596e <UART_SetConfig+0x5a2>
 8005814:	2340      	movs	r3, #64	; 0x40
 8005816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800581a:	e0a8      	b.n	800596e <UART_SetConfig+0x5a2>
 800581c:	2380      	movs	r3, #128	; 0x80
 800581e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005822:	e0a4      	b.n	800596e <UART_SetConfig+0x5a2>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a90      	ldr	r2, [pc, #576]	; (8005a6c <UART_SetConfig+0x6a0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d130      	bne.n	8005890 <UART_SetConfig+0x4c4>
 800582e:	4b8e      	ldr	r3, [pc, #568]	; (8005a68 <UART_SetConfig+0x69c>)
 8005830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	2b05      	cmp	r3, #5
 8005838:	d826      	bhi.n	8005888 <UART_SetConfig+0x4bc>
 800583a:	a201      	add	r2, pc, #4	; (adr r2, 8005840 <UART_SetConfig+0x474>)
 800583c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005840:	08005859 	.word	0x08005859
 8005844:	08005861 	.word	0x08005861
 8005848:	08005869 	.word	0x08005869
 800584c:	08005871 	.word	0x08005871
 8005850:	08005879 	.word	0x08005879
 8005854:	08005881 	.word	0x08005881
 8005858:	2300      	movs	r3, #0
 800585a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800585e:	e086      	b.n	800596e <UART_SetConfig+0x5a2>
 8005860:	2304      	movs	r3, #4
 8005862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005866:	e082      	b.n	800596e <UART_SetConfig+0x5a2>
 8005868:	2308      	movs	r3, #8
 800586a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800586e:	e07e      	b.n	800596e <UART_SetConfig+0x5a2>
 8005870:	2310      	movs	r3, #16
 8005872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005876:	e07a      	b.n	800596e <UART_SetConfig+0x5a2>
 8005878:	2320      	movs	r3, #32
 800587a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800587e:	e076      	b.n	800596e <UART_SetConfig+0x5a2>
 8005880:	2340      	movs	r3, #64	; 0x40
 8005882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005886:	e072      	b.n	800596e <UART_SetConfig+0x5a2>
 8005888:	2380      	movs	r3, #128	; 0x80
 800588a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800588e:	e06e      	b.n	800596e <UART_SetConfig+0x5a2>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a76      	ldr	r2, [pc, #472]	; (8005a70 <UART_SetConfig+0x6a4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d130      	bne.n	80058fc <UART_SetConfig+0x530>
 800589a:	4b73      	ldr	r3, [pc, #460]	; (8005a68 <UART_SetConfig+0x69c>)
 800589c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	2b05      	cmp	r3, #5
 80058a4:	d826      	bhi.n	80058f4 <UART_SetConfig+0x528>
 80058a6:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <UART_SetConfig+0x4e0>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058c5 	.word	0x080058c5
 80058b0:	080058cd 	.word	0x080058cd
 80058b4:	080058d5 	.word	0x080058d5
 80058b8:	080058dd 	.word	0x080058dd
 80058bc:	080058e5 	.word	0x080058e5
 80058c0:	080058ed 	.word	0x080058ed
 80058c4:	2300      	movs	r3, #0
 80058c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ca:	e050      	b.n	800596e <UART_SetConfig+0x5a2>
 80058cc:	2304      	movs	r3, #4
 80058ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058d2:	e04c      	b.n	800596e <UART_SetConfig+0x5a2>
 80058d4:	2308      	movs	r3, #8
 80058d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058da:	e048      	b.n	800596e <UART_SetConfig+0x5a2>
 80058dc:	2310      	movs	r3, #16
 80058de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058e2:	e044      	b.n	800596e <UART_SetConfig+0x5a2>
 80058e4:	2320      	movs	r3, #32
 80058e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ea:	e040      	b.n	800596e <UART_SetConfig+0x5a2>
 80058ec:	2340      	movs	r3, #64	; 0x40
 80058ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058f2:	e03c      	b.n	800596e <UART_SetConfig+0x5a2>
 80058f4:	2380      	movs	r3, #128	; 0x80
 80058f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058fa:	e038      	b.n	800596e <UART_SetConfig+0x5a2>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a5c      	ldr	r2, [pc, #368]	; (8005a74 <UART_SetConfig+0x6a8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d130      	bne.n	8005968 <UART_SetConfig+0x59c>
 8005906:	4b58      	ldr	r3, [pc, #352]	; (8005a68 <UART_SetConfig+0x69c>)
 8005908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	2b05      	cmp	r3, #5
 8005910:	d826      	bhi.n	8005960 <UART_SetConfig+0x594>
 8005912:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <UART_SetConfig+0x54c>)
 8005914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005918:	08005931 	.word	0x08005931
 800591c:	08005939 	.word	0x08005939
 8005920:	08005941 	.word	0x08005941
 8005924:	08005949 	.word	0x08005949
 8005928:	08005951 	.word	0x08005951
 800592c:	08005959 	.word	0x08005959
 8005930:	2302      	movs	r3, #2
 8005932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005936:	e01a      	b.n	800596e <UART_SetConfig+0x5a2>
 8005938:	2304      	movs	r3, #4
 800593a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800593e:	e016      	b.n	800596e <UART_SetConfig+0x5a2>
 8005940:	2308      	movs	r3, #8
 8005942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005946:	e012      	b.n	800596e <UART_SetConfig+0x5a2>
 8005948:	2310      	movs	r3, #16
 800594a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800594e:	e00e      	b.n	800596e <UART_SetConfig+0x5a2>
 8005950:	2320      	movs	r3, #32
 8005952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005956:	e00a      	b.n	800596e <UART_SetConfig+0x5a2>
 8005958:	2340      	movs	r3, #64	; 0x40
 800595a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800595e:	e006      	b.n	800596e <UART_SetConfig+0x5a2>
 8005960:	2380      	movs	r3, #128	; 0x80
 8005962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005966:	e002      	b.n	800596e <UART_SetConfig+0x5a2>
 8005968:	2380      	movs	r3, #128	; 0x80
 800596a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a40      	ldr	r2, [pc, #256]	; (8005a74 <UART_SetConfig+0x6a8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	f040 80ef 	bne.w	8005b58 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800597a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800597e:	2b20      	cmp	r3, #32
 8005980:	dc46      	bgt.n	8005a10 <UART_SetConfig+0x644>
 8005982:	2b02      	cmp	r3, #2
 8005984:	f2c0 8081 	blt.w	8005a8a <UART_SetConfig+0x6be>
 8005988:	3b02      	subs	r3, #2
 800598a:	2b1e      	cmp	r3, #30
 800598c:	d87d      	bhi.n	8005a8a <UART_SetConfig+0x6be>
 800598e:	a201      	add	r2, pc, #4	; (adr r2, 8005994 <UART_SetConfig+0x5c8>)
 8005990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005994:	08005a17 	.word	0x08005a17
 8005998:	08005a8b 	.word	0x08005a8b
 800599c:	08005a1f 	.word	0x08005a1f
 80059a0:	08005a8b 	.word	0x08005a8b
 80059a4:	08005a8b 	.word	0x08005a8b
 80059a8:	08005a8b 	.word	0x08005a8b
 80059ac:	08005a2f 	.word	0x08005a2f
 80059b0:	08005a8b 	.word	0x08005a8b
 80059b4:	08005a8b 	.word	0x08005a8b
 80059b8:	08005a8b 	.word	0x08005a8b
 80059bc:	08005a8b 	.word	0x08005a8b
 80059c0:	08005a8b 	.word	0x08005a8b
 80059c4:	08005a8b 	.word	0x08005a8b
 80059c8:	08005a8b 	.word	0x08005a8b
 80059cc:	08005a3f 	.word	0x08005a3f
 80059d0:	08005a8b 	.word	0x08005a8b
 80059d4:	08005a8b 	.word	0x08005a8b
 80059d8:	08005a8b 	.word	0x08005a8b
 80059dc:	08005a8b 	.word	0x08005a8b
 80059e0:	08005a8b 	.word	0x08005a8b
 80059e4:	08005a8b 	.word	0x08005a8b
 80059e8:	08005a8b 	.word	0x08005a8b
 80059ec:	08005a8b 	.word	0x08005a8b
 80059f0:	08005a8b 	.word	0x08005a8b
 80059f4:	08005a8b 	.word	0x08005a8b
 80059f8:	08005a8b 	.word	0x08005a8b
 80059fc:	08005a8b 	.word	0x08005a8b
 8005a00:	08005a8b 	.word	0x08005a8b
 8005a04:	08005a8b 	.word	0x08005a8b
 8005a08:	08005a8b 	.word	0x08005a8b
 8005a0c:	08005a7d 	.word	0x08005a7d
 8005a10:	2b40      	cmp	r3, #64	; 0x40
 8005a12:	d036      	beq.n	8005a82 <UART_SetConfig+0x6b6>
 8005a14:	e039      	b.n	8005a8a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005a16:	f7fd febf 	bl	8003798 <HAL_RCCEx_GetD3PCLK1Freq>
 8005a1a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005a1c:	e03b      	b.n	8005a96 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a1e:	f107 0314 	add.w	r3, r7, #20
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fd fece 	bl	80037c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a2c:	e033      	b.n	8005a96 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a2e:	f107 0308 	add.w	r3, r7, #8
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fe f81a 	bl	8003a6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a3c:	e02b      	b.n	8005a96 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a3e:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <UART_SetConfig+0x69c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a4a:	4b07      	ldr	r3, [pc, #28]	; (8005a68 <UART_SetConfig+0x69c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	08db      	lsrs	r3, r3, #3
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	4a08      	ldr	r2, [pc, #32]	; (8005a78 <UART_SetConfig+0x6ac>)
 8005a56:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a5c:	e01b      	b.n	8005a96 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8005a5e:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <UART_SetConfig+0x6ac>)
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a62:	e018      	b.n	8005a96 <UART_SetConfig+0x6ca>
 8005a64:	40011400 	.word	0x40011400
 8005a68:	58024400 	.word	0x58024400
 8005a6c:	40007800 	.word	0x40007800
 8005a70:	40007c00 	.word	0x40007c00
 8005a74:	58000c00 	.word	0x58000c00
 8005a78:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a7c:	4bc4      	ldr	r3, [pc, #784]	; (8005d90 <UART_SetConfig+0x9c4>)
 8005a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a80:	e009      	b.n	8005a96 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a88:	e005      	b.n	8005a96 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005a94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 81da 	beq.w	8005e52 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	4abc      	ldr	r2, [pc, #752]	; (8005d94 <UART_SetConfig+0x9c8>)
 8005aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ab0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	4413      	add	r3, r2
 8005abc:	6a3a      	ldr	r2, [r7, #32]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d305      	bcc.n	8005ace <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ac8:	6a3a      	ldr	r2, [r7, #32]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d903      	bls.n	8005ad6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005ad4:	e1bd      	b.n	8005e52 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f04f 0100 	mov.w	r1, #0
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	4aac      	ldr	r2, [pc, #688]	; (8005d94 <UART_SetConfig+0x9c8>)
 8005ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	f04f 0300 	mov.w	r3, #0
 8005aee:	f7fa fbf3 	bl	80002d8 <__aeabi_uldivmod>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	4610      	mov	r0, r2
 8005af8:	4619      	mov	r1, r3
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	f04f 0300 	mov.w	r3, #0
 8005b02:	020b      	lsls	r3, r1, #8
 8005b04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b08:	0202      	lsls	r2, r0, #8
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	6849      	ldr	r1, [r1, #4]
 8005b0e:	0849      	lsrs	r1, r1, #1
 8005b10:	4608      	mov	r0, r1
 8005b12:	f04f 0100 	mov.w	r1, #0
 8005b16:	1814      	adds	r4, r2, r0
 8005b18:	eb43 0501 	adc.w	r5, r3, r1
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	461a      	mov	r2, r3
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	4620      	mov	r0, r4
 8005b28:	4629      	mov	r1, r5
 8005b2a:	f7fa fbd5 	bl	80002d8 <__aeabi_uldivmod>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4613      	mov	r3, r2
 8005b34:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b3c:	d308      	bcc.n	8005b50 <UART_SetConfig+0x784>
 8005b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b44:	d204      	bcs.n	8005b50 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b4c:	60da      	str	r2, [r3, #12]
 8005b4e:	e180      	b.n	8005e52 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005b56:	e17c      	b.n	8005e52 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b60:	f040 80be 	bne.w	8005ce0 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8005b64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b68:	2b20      	cmp	r3, #32
 8005b6a:	dc49      	bgt.n	8005c00 <UART_SetConfig+0x834>
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	db7c      	blt.n	8005c6a <UART_SetConfig+0x89e>
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d87a      	bhi.n	8005c6a <UART_SetConfig+0x89e>
 8005b74:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <UART_SetConfig+0x7b0>)
 8005b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7a:	bf00      	nop
 8005b7c:	08005c07 	.word	0x08005c07
 8005b80:	08005c0f 	.word	0x08005c0f
 8005b84:	08005c6b 	.word	0x08005c6b
 8005b88:	08005c6b 	.word	0x08005c6b
 8005b8c:	08005c17 	.word	0x08005c17
 8005b90:	08005c6b 	.word	0x08005c6b
 8005b94:	08005c6b 	.word	0x08005c6b
 8005b98:	08005c6b 	.word	0x08005c6b
 8005b9c:	08005c27 	.word	0x08005c27
 8005ba0:	08005c6b 	.word	0x08005c6b
 8005ba4:	08005c6b 	.word	0x08005c6b
 8005ba8:	08005c6b 	.word	0x08005c6b
 8005bac:	08005c6b 	.word	0x08005c6b
 8005bb0:	08005c6b 	.word	0x08005c6b
 8005bb4:	08005c6b 	.word	0x08005c6b
 8005bb8:	08005c6b 	.word	0x08005c6b
 8005bbc:	08005c37 	.word	0x08005c37
 8005bc0:	08005c6b 	.word	0x08005c6b
 8005bc4:	08005c6b 	.word	0x08005c6b
 8005bc8:	08005c6b 	.word	0x08005c6b
 8005bcc:	08005c6b 	.word	0x08005c6b
 8005bd0:	08005c6b 	.word	0x08005c6b
 8005bd4:	08005c6b 	.word	0x08005c6b
 8005bd8:	08005c6b 	.word	0x08005c6b
 8005bdc:	08005c6b 	.word	0x08005c6b
 8005be0:	08005c6b 	.word	0x08005c6b
 8005be4:	08005c6b 	.word	0x08005c6b
 8005be8:	08005c6b 	.word	0x08005c6b
 8005bec:	08005c6b 	.word	0x08005c6b
 8005bf0:	08005c6b 	.word	0x08005c6b
 8005bf4:	08005c6b 	.word	0x08005c6b
 8005bf8:	08005c6b 	.word	0x08005c6b
 8005bfc:	08005c5d 	.word	0x08005c5d
 8005c00:	2b40      	cmp	r3, #64	; 0x40
 8005c02:	d02e      	beq.n	8005c62 <UART_SetConfig+0x896>
 8005c04:	e031      	b.n	8005c6a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c06:	f7fc fe5b 	bl	80028c0 <HAL_RCC_GetPCLK1Freq>
 8005c0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005c0c:	e033      	b.n	8005c76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c0e:	f7fc fe6d 	bl	80028ec <HAL_RCC_GetPCLK2Freq>
 8005c12:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005c14:	e02f      	b.n	8005c76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c16:	f107 0314 	add.w	r3, r7, #20
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fd fdd2 	bl	80037c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c24:	e027      	b.n	8005c76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c26:	f107 0308 	add.w	r3, r7, #8
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fd ff1e 	bl	8003a6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c34:	e01f      	b.n	8005c76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c36:	4b58      	ldr	r3, [pc, #352]	; (8005d98 <UART_SetConfig+0x9cc>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d009      	beq.n	8005c56 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c42:	4b55      	ldr	r3, [pc, #340]	; (8005d98 <UART_SetConfig+0x9cc>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	08db      	lsrs	r3, r3, #3
 8005c48:	f003 0303 	and.w	r3, r3, #3
 8005c4c:	4a53      	ldr	r2, [pc, #332]	; (8005d9c <UART_SetConfig+0x9d0>)
 8005c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c54:	e00f      	b.n	8005c76 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8005c56:	4b51      	ldr	r3, [pc, #324]	; (8005d9c <UART_SetConfig+0x9d0>)
 8005c58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c5a:	e00c      	b.n	8005c76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c5c:	4b4c      	ldr	r3, [pc, #304]	; (8005d90 <UART_SetConfig+0x9c4>)
 8005c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c60:	e009      	b.n	8005c76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c68:	e005      	b.n	8005c76 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005c74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 80ea 	beq.w	8005e52 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	4a44      	ldr	r2, [pc, #272]	; (8005d94 <UART_SetConfig+0x9c8>)
 8005c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c90:	005a      	lsls	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	085b      	lsrs	r3, r3, #1
 8005c98:	441a      	add	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	2b0f      	cmp	r3, #15
 8005ca8:	d916      	bls.n	8005cd8 <UART_SetConfig+0x90c>
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb0:	d212      	bcs.n	8005cd8 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	f023 030f 	bic.w	r3, r3, #15
 8005cba:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbe:	085b      	lsrs	r3, r3, #1
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005cd4:	60da      	str	r2, [r3, #12]
 8005cd6:	e0bc      	b.n	8005e52 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005cde:	e0b8      	b.n	8005e52 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ce0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ce4:	2b20      	cmp	r3, #32
 8005ce6:	dc4b      	bgt.n	8005d80 <UART_SetConfig+0x9b4>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f2c0 8087 	blt.w	8005dfc <UART_SetConfig+0xa30>
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	f200 8084 	bhi.w	8005dfc <UART_SetConfig+0xa30>
 8005cf4:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <UART_SetConfig+0x930>)
 8005cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfa:	bf00      	nop
 8005cfc:	08005d87 	.word	0x08005d87
 8005d00:	08005da1 	.word	0x08005da1
 8005d04:	08005dfd 	.word	0x08005dfd
 8005d08:	08005dfd 	.word	0x08005dfd
 8005d0c:	08005da9 	.word	0x08005da9
 8005d10:	08005dfd 	.word	0x08005dfd
 8005d14:	08005dfd 	.word	0x08005dfd
 8005d18:	08005dfd 	.word	0x08005dfd
 8005d1c:	08005db9 	.word	0x08005db9
 8005d20:	08005dfd 	.word	0x08005dfd
 8005d24:	08005dfd 	.word	0x08005dfd
 8005d28:	08005dfd 	.word	0x08005dfd
 8005d2c:	08005dfd 	.word	0x08005dfd
 8005d30:	08005dfd 	.word	0x08005dfd
 8005d34:	08005dfd 	.word	0x08005dfd
 8005d38:	08005dfd 	.word	0x08005dfd
 8005d3c:	08005dc9 	.word	0x08005dc9
 8005d40:	08005dfd 	.word	0x08005dfd
 8005d44:	08005dfd 	.word	0x08005dfd
 8005d48:	08005dfd 	.word	0x08005dfd
 8005d4c:	08005dfd 	.word	0x08005dfd
 8005d50:	08005dfd 	.word	0x08005dfd
 8005d54:	08005dfd 	.word	0x08005dfd
 8005d58:	08005dfd 	.word	0x08005dfd
 8005d5c:	08005dfd 	.word	0x08005dfd
 8005d60:	08005dfd 	.word	0x08005dfd
 8005d64:	08005dfd 	.word	0x08005dfd
 8005d68:	08005dfd 	.word	0x08005dfd
 8005d6c:	08005dfd 	.word	0x08005dfd
 8005d70:	08005dfd 	.word	0x08005dfd
 8005d74:	08005dfd 	.word	0x08005dfd
 8005d78:	08005dfd 	.word	0x08005dfd
 8005d7c:	08005def 	.word	0x08005def
 8005d80:	2b40      	cmp	r3, #64	; 0x40
 8005d82:	d037      	beq.n	8005df4 <UART_SetConfig+0xa28>
 8005d84:	e03a      	b.n	8005dfc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d86:	f7fc fd9b 	bl	80028c0 <HAL_RCC_GetPCLK1Freq>
 8005d8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005d8c:	e03c      	b.n	8005e08 <UART_SetConfig+0xa3c>
 8005d8e:	bf00      	nop
 8005d90:	003d0900 	.word	0x003d0900
 8005d94:	0800647c 	.word	0x0800647c
 8005d98:	58024400 	.word	0x58024400
 8005d9c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005da0:	f7fc fda4 	bl	80028ec <HAL_RCC_GetPCLK2Freq>
 8005da4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005da6:	e02f      	b.n	8005e08 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005da8:	f107 0314 	add.w	r3, r7, #20
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fd fd09 	bl	80037c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005db6:	e027      	b.n	8005e08 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005db8:	f107 0308 	add.w	r3, r7, #8
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fd fe55 	bl	8003a6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dc6:	e01f      	b.n	8005e08 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dc8:	4b2c      	ldr	r3, [pc, #176]	; (8005e7c <UART_SetConfig+0xab0>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d009      	beq.n	8005de8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005dd4:	4b29      	ldr	r3, [pc, #164]	; (8005e7c <UART_SetConfig+0xab0>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	08db      	lsrs	r3, r3, #3
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	4a28      	ldr	r2, [pc, #160]	; (8005e80 <UART_SetConfig+0xab4>)
 8005de0:	fa22 f303 	lsr.w	r3, r2, r3
 8005de4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005de6:	e00f      	b.n	8005e08 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8005de8:	4b25      	ldr	r3, [pc, #148]	; (8005e80 <UART_SetConfig+0xab4>)
 8005dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dec:	e00c      	b.n	8005e08 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005dee:	4b25      	ldr	r3, [pc, #148]	; (8005e84 <UART_SetConfig+0xab8>)
 8005df0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005df2:	e009      	b.n	8005e08 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005df4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005df8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dfa:	e005      	b.n	8005e08 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005e06:	bf00      	nop
    }

    if (pclk != 0U)
 8005e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d021      	beq.n	8005e52 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	4a1d      	ldr	r2, [pc, #116]	; (8005e88 <UART_SetConfig+0xabc>)
 8005e14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	085b      	lsrs	r3, r3, #1
 8005e26:	441a      	add	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e30:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	2b0f      	cmp	r3, #15
 8005e36:	d909      	bls.n	8005e4c <UART_SetConfig+0xa80>
 8005e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e3e:	d205      	bcs.n	8005e4c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	60da      	str	r2, [r3, #12]
 8005e4a:	e002      	b.n	8005e52 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005e6e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3738      	adds	r7, #56	; 0x38
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bdb0      	pop	{r4, r5, r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	58024400 	.word	0x58024400
 8005e80:	03d09000 	.word	0x03d09000
 8005e84:	003d0900 	.word	0x003d0900
 8005e88:	0800647c 	.word	0x0800647c

08005e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00a      	beq.n	8005eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00a      	beq.n	8005efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f20:	f003 0310 	and.w	r3, r3, #16
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f42:	f003 0320 	and.w	r3, r3, #32
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01a      	beq.n	8005fa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f8a:	d10a      	bne.n	8005fa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	605a      	str	r2, [r3, #4]
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af02      	add	r7, sp, #8
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fe0:	f7fb f9d8 	bl	8001394 <HAL_GetTick>
 8005fe4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0308 	and.w	r3, r3, #8
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d10e      	bne.n	8006012 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f82f 	bl	8006066 <UART_WaitOnFlagUntilTimeout>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e025      	b.n	800605e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b04      	cmp	r3, #4
 800601e:	d10e      	bne.n	800603e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006020:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f819 	bl	8006066 <UART_WaitOnFlagUntilTimeout>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e00f      	b.n	800605e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2220      	movs	r2, #32
 8006042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2220      	movs	r2, #32
 800604a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b09c      	sub	sp, #112	; 0x70
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	603b      	str	r3, [r7, #0]
 8006072:	4613      	mov	r3, r2
 8006074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006076:	e0a9      	b.n	80061cc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607e:	f000 80a5 	beq.w	80061cc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006082:	f7fb f987 	bl	8001394 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800608e:	429a      	cmp	r2, r3
 8006090:	d302      	bcc.n	8006098 <UART_WaitOnFlagUntilTimeout+0x32>
 8006092:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006094:	2b00      	cmp	r3, #0
 8006096:	d140      	bne.n	800611a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060ac:	667b      	str	r3, [r7, #100]	; 0x64
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060b8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80060bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80060c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e6      	bne.n	8006098 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3308      	adds	r3, #8
 80060d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060dc:	f023 0301 	bic.w	r3, r3, #1
 80060e0:	663b      	str	r3, [r7, #96]	; 0x60
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3308      	adds	r3, #8
 80060e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80060ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e5      	bne.n	80060ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2220      	movs	r2, #32
 8006102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2220      	movs	r2, #32
 800610a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e069      	b.n	80061ee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	d051      	beq.n	80061cc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006136:	d149      	bne.n	80061cc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006140:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	e853 3f00 	ldrex	r3, [r3]
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006156:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	461a      	mov	r2, r3
 800615e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006160:	637b      	str	r3, [r7, #52]	; 0x34
 8006162:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e6      	bne.n	8006142 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3308      	adds	r3, #8
 800617a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	613b      	str	r3, [r7, #16]
   return(result);
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f023 0301 	bic.w	r3, r3, #1
 800618a:	66bb      	str	r3, [r7, #104]	; 0x68
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3308      	adds	r3, #8
 8006192:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006194:	623a      	str	r2, [r7, #32]
 8006196:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	69f9      	ldr	r1, [r7, #28]
 800619a:	6a3a      	ldr	r2, [r7, #32]
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e5      	bne.n	8006174 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e010      	b.n	80061ee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	69da      	ldr	r2, [r3, #28]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	4013      	ands	r3, r2
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	429a      	cmp	r2, r3
 80061da:	bf0c      	ite	eq
 80061dc:	2301      	moveq	r3, #1
 80061de:	2300      	movne	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	461a      	mov	r2, r3
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	f43f af46 	beq.w	8006078 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3770      	adds	r7, #112	; 0x70
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b085      	sub	sp, #20
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_UARTEx_DisableFifoMode+0x16>
 8006208:	2302      	movs	r3, #2
 800620a:	e027      	b.n	800625c <HAL_UARTEx_DisableFifoMode+0x66>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2224      	movs	r2, #36	; 0x24
 8006218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0201 	bic.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800623a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2220      	movs	r2, #32
 800624e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800627c:	2302      	movs	r3, #2
 800627e:	e02d      	b.n	80062dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2224      	movs	r2, #36	; 0x24
 800628c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0201 	bic.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f84f 	bl	8006360 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062f8:	2302      	movs	r3, #2
 80062fa:	e02d      	b.n	8006358 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2224      	movs	r2, #36	; 0x24
 8006308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0201 	bic.w	r2, r2, #1
 8006322:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f811 	bl	8006360 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800636c:	2b00      	cmp	r3, #0
 800636e:	d108      	bne.n	8006382 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006380:	e031      	b.n	80063e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006382:	2310      	movs	r3, #16
 8006384:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006386:	2310      	movs	r3, #16
 8006388:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	0e5b      	lsrs	r3, r3, #25
 8006392:	b2db      	uxtb	r3, r3
 8006394:	f003 0307 	and.w	r3, r3, #7
 8006398:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	0f5b      	lsrs	r3, r3, #29
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063aa:	7bbb      	ldrb	r3, [r7, #14]
 80063ac:	7b3a      	ldrb	r2, [r7, #12]
 80063ae:	4911      	ldr	r1, [pc, #68]	; (80063f4 <UARTEx_SetNbDataToProcess+0x94>)
 80063b0:	5c8a      	ldrb	r2, [r1, r2]
 80063b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063b6:	7b3a      	ldrb	r2, [r7, #12]
 80063b8:	490f      	ldr	r1, [pc, #60]	; (80063f8 <UARTEx_SetNbDataToProcess+0x98>)
 80063ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	7b7a      	ldrb	r2, [r7, #13]
 80063cc:	4909      	ldr	r1, [pc, #36]	; (80063f4 <UARTEx_SetNbDataToProcess+0x94>)
 80063ce:	5c8a      	ldrb	r2, [r1, r2]
 80063d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80063d4:	7b7a      	ldrb	r2, [r7, #13]
 80063d6:	4908      	ldr	r1, [pc, #32]	; (80063f8 <UARTEx_SetNbDataToProcess+0x98>)
 80063d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063da:	fb93 f3f2 	sdiv	r3, r3, r2
 80063de:	b29a      	uxth	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80063e6:	bf00      	nop
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	08006494 	.word	0x08006494
 80063f8:	0800649c 	.word	0x0800649c

080063fc <__libc_init_array>:
 80063fc:	b570      	push	{r4, r5, r6, lr}
 80063fe:	4d0d      	ldr	r5, [pc, #52]	; (8006434 <__libc_init_array+0x38>)
 8006400:	4c0d      	ldr	r4, [pc, #52]	; (8006438 <__libc_init_array+0x3c>)
 8006402:	1b64      	subs	r4, r4, r5
 8006404:	10a4      	asrs	r4, r4, #2
 8006406:	2600      	movs	r6, #0
 8006408:	42a6      	cmp	r6, r4
 800640a:	d109      	bne.n	8006420 <__libc_init_array+0x24>
 800640c:	4d0b      	ldr	r5, [pc, #44]	; (800643c <__libc_init_array+0x40>)
 800640e:	4c0c      	ldr	r4, [pc, #48]	; (8006440 <__libc_init_array+0x44>)
 8006410:	f000 f820 	bl	8006454 <_init>
 8006414:	1b64      	subs	r4, r4, r5
 8006416:	10a4      	asrs	r4, r4, #2
 8006418:	2600      	movs	r6, #0
 800641a:	42a6      	cmp	r6, r4
 800641c:	d105      	bne.n	800642a <__libc_init_array+0x2e>
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	f855 3b04 	ldr.w	r3, [r5], #4
 8006424:	4798      	blx	r3
 8006426:	3601      	adds	r6, #1
 8006428:	e7ee      	b.n	8006408 <__libc_init_array+0xc>
 800642a:	f855 3b04 	ldr.w	r3, [r5], #4
 800642e:	4798      	blx	r3
 8006430:	3601      	adds	r6, #1
 8006432:	e7f2      	b.n	800641a <__libc_init_array+0x1e>
 8006434:	080064ac 	.word	0x080064ac
 8006438:	080064ac 	.word	0x080064ac
 800643c:	080064ac 	.word	0x080064ac
 8006440:	080064b0 	.word	0x080064b0

08006444 <memset>:
 8006444:	4402      	add	r2, r0
 8006446:	4603      	mov	r3, r0
 8006448:	4293      	cmp	r3, r2
 800644a:	d100      	bne.n	800644e <memset+0xa>
 800644c:	4770      	bx	lr
 800644e:	f803 1b01 	strb.w	r1, [r3], #1
 8006452:	e7f9      	b.n	8006448 <memset+0x4>

08006454 <_init>:
 8006454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006456:	bf00      	nop
 8006458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645a:	bc08      	pop	{r3}
 800645c:	469e      	mov	lr, r3
 800645e:	4770      	bx	lr

08006460 <_fini>:
 8006460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006462:	bf00      	nop
 8006464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006466:	bc08      	pop	{r3}
 8006468:	469e      	mov	lr, r3
 800646a:	4770      	bx	lr
