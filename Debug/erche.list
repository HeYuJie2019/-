
erche.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a50  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006ce8  08006ce8  00016ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d20  08006d20  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08006d20  08006d20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d28  08006d28  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d28  08006d28  00016d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d2c  08006d2c  00016d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  24000000  08006d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  24000020  08006d50  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000294  08006d50  00020294  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a26c  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002982  00000000  00000000  0003a2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  0003cc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  0003dbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035fb7  00000000  00000000  0003ea98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011948  00000000  00000000  00074a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015f030  00000000  00000000  00086397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e53c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004254  00000000  00000000  001e541c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006cd0 	.word	0x08006cd0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	08006cd0 	.word	0x08006cd0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <move>:
		HAL_Delay(300);

	}
}
void move(int n)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if(n==1)//直行
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	f040 80c0 	bne.w	8000760 <move+0x190>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 80005e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e4:	48a0      	ldr	r0, [pc, #640]	; (8000868 <move+0x298>)
 80005e6:	f001 fc75 	bl	8001ed4 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d127      	bne.n	8000640 <move+0x70>
 80005f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f4:	489c      	ldr	r0, [pc, #624]	; (8000868 <move+0x298>)
 80005f6:	f001 fc6d 	bl	8001ed4 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d11f      	bne.n	8000640 <move+0x70>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,17);
 8000600:	4b9a      	ldr	r3, [pc, #616]	; (800086c <move+0x29c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2211      	movs	r2, #17
 8000606:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 8000608:	4b98      	ldr	r3, [pc, #608]	; (800086c <move+0x29c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,17);
 8000610:	4b96      	ldr	r3, [pc, #600]	; (800086c <move+0x29c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2211      	movs	r2, #17
 8000616:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,0);
 8000618:	4b94      	ldr	r3, [pc, #592]	; (800086c <move+0x29c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2200      	movs	r2, #0
 800061e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,17);
 8000620:	4b93      	ldr	r3, [pc, #588]	; (8000870 <move+0x2a0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2211      	movs	r2, #17
 8000626:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000628:	4b91      	ldr	r3, [pc, #580]	; (8000870 <move+0x2a0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,30);
 8000630:	4b8f      	ldr	r3, [pc, #572]	; (8000870 <move+0x2a0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	221e      	movs	r2, #30
 8000636:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,0);
 8000638:	4b8d      	ldr	r3, [pc, #564]	; (8000870 <move+0x2a0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2200      	movs	r2, #0
 800063e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000640:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000644:	4888      	ldr	r0, [pc, #544]	; (8000868 <move+0x298>)
 8000646:	f001 fc45 	bl	8001ed4 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d127      	bne.n	80006a0 <move+0xd0>
 8000650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000654:	4884      	ldr	r0, [pc, #528]	; (8000868 <move+0x298>)
 8000656:	f001 fc3d 	bl	8001ed4 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d11f      	bne.n	80006a0 <move+0xd0>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,17);
 8000660:	4b82      	ldr	r3, [pc, #520]	; (800086c <move+0x29c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2211      	movs	r2, #17
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 8000668:	4b80      	ldr	r3, [pc, #512]	; (800086c <move+0x29c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,17);
 8000670:	4b7e      	ldr	r3, [pc, #504]	; (800086c <move+0x29c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2211      	movs	r2, #17
 8000676:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,0);
 8000678:	4b7c      	ldr	r3, [pc, #496]	; (800086c <move+0x29c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2200      	movs	r2, #0
 800067e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,22);
 8000680:	4b7b      	ldr	r3, [pc, #492]	; (8000870 <move+0x2a0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2216      	movs	r2, #22
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000688:	4b79      	ldr	r3, [pc, #484]	; (8000870 <move+0x2a0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,22);
 8000690:	4b77      	ldr	r3, [pc, #476]	; (8000870 <move+0x2a0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2216      	movs	r2, #22
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,0);
 8000698:	4b75      	ldr	r3, [pc, #468]	; (8000870 <move+0x2a0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2200      	movs	r2, #0
 800069e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 80006a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a4:	4870      	ldr	r0, [pc, #448]	; (8000868 <move+0x298>)
 80006a6:	f001 fc15 	bl	8001ed4 <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d127      	bne.n	8000700 <move+0x130>
 80006b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b4:	486c      	ldr	r0, [pc, #432]	; (8000868 <move+0x298>)
 80006b6:	f001 fc0d 	bl	8001ed4 <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d11f      	bne.n	8000700 <move+0x130>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,17);
 80006c0:	4b6a      	ldr	r3, [pc, #424]	; (800086c <move+0x29c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2211      	movs	r2, #17
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80006c8:	4b68      	ldr	r3, [pc, #416]	; (800086c <move+0x29c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2200      	movs	r2, #0
 80006ce:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,17);
 80006d0:	4b66      	ldr	r3, [pc, #408]	; (800086c <move+0x29c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2211      	movs	r2, #17
 80006d6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,0);
 80006d8:	4b64      	ldr	r3, [pc, #400]	; (800086c <move+0x29c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2200      	movs	r2, #0
 80006de:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,17);
 80006e0:	4b63      	ldr	r3, [pc, #396]	; (8000870 <move+0x2a0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2211      	movs	r2, #17
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 80006e8:	4b61      	ldr	r3, [pc, #388]	; (8000870 <move+0x2a0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2200      	movs	r2, #0
 80006ee:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,24);
 80006f0:	4b5f      	ldr	r3, [pc, #380]	; (8000870 <move+0x2a0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2218      	movs	r2, #24
 80006f6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,0);
 80006f8:	4b5d      	ldr	r3, [pc, #372]	; (8000870 <move+0x2a0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2200      	movs	r2, #0
 80006fe:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000700:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000704:	4858      	ldr	r0, [pc, #352]	; (8000868 <move+0x298>)
 8000706:	f001 fbe5 	bl	8001ed4 <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d127      	bne.n	8000760 <move+0x190>
 8000710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000714:	4854      	ldr	r0, [pc, #336]	; (8000868 <move+0x298>)
 8000716:	f001 fbdd 	bl	8001ed4 <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d11f      	bne.n	8000760 <move+0x190>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 8000720:	4b52      	ldr	r3, [pc, #328]	; (800086c <move+0x29c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2264      	movs	r2, #100	; 0x64
 8000726:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 8000728:	4b50      	ldr	r3, [pc, #320]	; (800086c <move+0x29c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2264      	movs	r2, #100	; 0x64
 800072e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 8000730:	4b4e      	ldr	r3, [pc, #312]	; (800086c <move+0x29c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2264      	movs	r2, #100	; 0x64
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 8000738:	4b4c      	ldr	r3, [pc, #304]	; (800086c <move+0x29c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2264      	movs	r2, #100	; 0x64
 800073e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 8000740:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <move+0x2a0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2264      	movs	r2, #100	; 0x64
 8000746:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 8000748:	4b49      	ldr	r3, [pc, #292]	; (8000870 <move+0x2a0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2264      	movs	r2, #100	; 0x64
 800074e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 8000750:	4b47      	ldr	r3, [pc, #284]	; (8000870 <move+0x2a0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2264      	movs	r2, #100	; 0x64
 8000756:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 8000758:	4b45      	ldr	r3, [pc, #276]	; (8000870 <move+0x2a0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2264      	movs	r2, #100	; 0x64
 800075e:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	if(n==2)//右行
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b02      	cmp	r3, #2
 8000764:	f040 80c7 	bne.w	80008f6 <move+0x326>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1)
 8000768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076c:	4841      	ldr	r0, [pc, #260]	; (8000874 <move+0x2a4>)
 800076e:	f001 fbb1 	bl	8001ed4 <HAL_GPIO_ReadPin>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d126      	bne.n	80007c6 <move+0x1f6>
 8000778:	2120      	movs	r1, #32
 800077a:	483f      	ldr	r0, [pc, #252]	; (8000878 <move+0x2a8>)
 800077c:	f001 fbaa 	bl	8001ed4 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d11f      	bne.n	80007c6 <move+0x1f6>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,19);
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <move+0x29c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2213      	movs	r2, #19
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800078e:	4b37      	ldr	r3, [pc, #220]	; (800086c <move+0x29c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2200      	movs	r2, #0
 8000794:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000796:	4b35      	ldr	r3, [pc, #212]	; (800086c <move+0x29c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2200      	movs	r2, #0
 800079c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,22);
 800079e:	4b33      	ldr	r3, [pc, #204]	; (800086c <move+0x29c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2216      	movs	r2, #22
 80007a4:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 80007a6:	4b32      	ldr	r3, [pc, #200]	; (8000870 <move+0x2a0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2210      	movs	r2, #16
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 80007ae:	4b30      	ldr	r3, [pc, #192]	; (8000870 <move+0x2a0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2200      	movs	r2, #0
 80007b4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 80007b6:	4b2e      	ldr	r3, [pc, #184]	; (8000870 <move+0x2a0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2200      	movs	r2, #0
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,24);
 80007be:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <move+0x2a0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2218      	movs	r2, #24
 80007c4:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 80007c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ca:	482a      	ldr	r0, [pc, #168]	; (8000874 <move+0x2a4>)
 80007cc:	f001 fb82 	bl	8001ed4 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d126      	bne.n	8000824 <move+0x254>
 80007d6:	2120      	movs	r1, #32
 80007d8:	4827      	ldr	r0, [pc, #156]	; (8000878 <move+0x2a8>)
 80007da:	f001 fb7b 	bl	8001ed4 <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d11f      	bne.n	8000824 <move+0x254>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,24);
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <move+0x29c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2218      	movs	r2, #24
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <move+0x29c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2200      	movs	r2, #0
 80007f2:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <move+0x29c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2200      	movs	r2, #0
 80007fa:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,24);
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <move+0x29c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2218      	movs	r2, #24
 8000802:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <move+0x2a0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2210      	movs	r2, #16
 800080a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <move+0x2a0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2200      	movs	r2, #0
 8000812:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <move+0x2a0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2200      	movs	r2, #0
 800081a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,19);
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <move+0x2a0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2213      	movs	r2, #19
 8000822:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1)
 8000824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000828:	4812      	ldr	r0, [pc, #72]	; (8000874 <move+0x2a4>)
 800082a:	f001 fb53 	bl	8001ed4 <HAL_GPIO_ReadPin>
 800082e:	4603      	mov	r3, r0
 8000830:	2b01      	cmp	r3, #1
 8000832:	d131      	bne.n	8000898 <move+0x2c8>
 8000834:	2120      	movs	r1, #32
 8000836:	4810      	ldr	r0, [pc, #64]	; (8000878 <move+0x2a8>)
 8000838:	f001 fb4c 	bl	8001ed4 <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b01      	cmp	r3, #1
 8000840:	d12a      	bne.n	8000898 <move+0x2c8>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,19);
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <move+0x29c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2213      	movs	r2, #19
 8000848:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <move+0x29c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2200      	movs	r2, #0
 8000850:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <move+0x29c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2200      	movs	r2, #0
 8000858:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,20);
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <move+0x29c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2214      	movs	r2, #20
 8000860:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 8000862:	4b03      	ldr	r3, [pc, #12]	; (8000870 <move+0x2a0>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	e009      	b.n	800087c <move+0x2ac>
 8000868:	58020400 	.word	0x58020400
 800086c:	240001b8 	.word	0x240001b8
 8000870:	24000048 	.word	0x24000048
 8000874:	58020800 	.word	0x58020800
 8000878:	58021000 	.word	0x58021000
 800087c:	2210      	movs	r2, #16
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000880:	4b53      	ldr	r3, [pc, #332]	; (80009d0 <move+0x400>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2200      	movs	r2, #0
 8000886:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 8000888:	4b51      	ldr	r3, [pc, #324]	; (80009d0 <move+0x400>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,19);
 8000890:	4b4f      	ldr	r3, [pc, #316]	; (80009d0 <move+0x400>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2213      	movs	r2, #19
 8000896:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	484d      	ldr	r0, [pc, #308]	; (80009d4 <move+0x404>)
 800089e:	f001 fb19 	bl	8001ed4 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d126      	bne.n	80008f6 <move+0x326>
 80008a8:	2120      	movs	r1, #32
 80008aa:	484b      	ldr	r0, [pc, #300]	; (80009d8 <move+0x408>)
 80008ac:	f001 fb12 	bl	8001ed4 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d11f      	bne.n	80008f6 <move+0x326>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 80008b6:	4b49      	ldr	r3, [pc, #292]	; (80009dc <move+0x40c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2264      	movs	r2, #100	; 0x64
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 80008be:	4b47      	ldr	r3, [pc, #284]	; (80009dc <move+0x40c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2264      	movs	r2, #100	; 0x64
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 80008c6:	4b45      	ldr	r3, [pc, #276]	; (80009dc <move+0x40c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2264      	movs	r2, #100	; 0x64
 80008cc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 80008ce:	4b43      	ldr	r3, [pc, #268]	; (80009dc <move+0x40c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2264      	movs	r2, #100	; 0x64
 80008d4:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 80008d6:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <move+0x400>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2264      	movs	r2, #100	; 0x64
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 80008de:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <move+0x400>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2264      	movs	r2, #100	; 0x64
 80008e4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 80008e6:	4b3a      	ldr	r3, [pc, #232]	; (80009d0 <move+0x400>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2264      	movs	r2, #100	; 0x64
 80008ec:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <move+0x400>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2264      	movs	r2, #100	; 0x64
 80008f4:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	if(n==3)//旋转
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d11f      	bne.n	800093c <move+0x36c>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,20);
 80008fc:	4b37      	ldr	r3, [pc, #220]	; (80009dc <move+0x40c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2214      	movs	r2, #20
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000904:	4b35      	ldr	r3, [pc, #212]	; (80009dc <move+0x40c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2200      	movs	r2, #0
 800090a:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 800090c:	4b33      	ldr	r3, [pc, #204]	; (80009dc <move+0x40c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2200      	movs	r2, #0
 8000912:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,20);
 8000914:	4b31      	ldr	r3, [pc, #196]	; (80009dc <move+0x40c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2214      	movs	r2, #20
 800091a:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,0);
 800091c:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <move+0x400>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2200      	movs	r2, #0
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,20);
 8000924:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <move+0x400>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2214      	movs	r2, #20
 800092a:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,20);
 800092c:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <move+0x400>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2214      	movs	r2, #20
 8000932:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000934:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <move+0x400>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2200      	movs	r2, #0
 800093a:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==4)//刹车
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b04      	cmp	r3, #4
 8000940:	d11f      	bne.n	8000982 <move+0x3b2>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 8000942:	4b26      	ldr	r3, [pc, #152]	; (80009dc <move+0x40c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2264      	movs	r2, #100	; 0x64
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 800094a:	4b24      	ldr	r3, [pc, #144]	; (80009dc <move+0x40c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2264      	movs	r2, #100	; 0x64
 8000950:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,100);
 8000952:	4b22      	ldr	r3, [pc, #136]	; (80009dc <move+0x40c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2264      	movs	r2, #100	; 0x64
 8000958:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,100);
 800095a:	4b20      	ldr	r3, [pc, #128]	; (80009dc <move+0x40c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2264      	movs	r2, #100	; 0x64
 8000960:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,100);
 8000962:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <move+0x400>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2264      	movs	r2, #100	; 0x64
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,100);
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <move+0x400>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2264      	movs	r2, #100	; 0x64
 8000970:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,100);
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <move+0x400>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2264      	movs	r2, #100	; 0x64
 8000978:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,100);
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <move+0x400>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2264      	movs	r2, #100	; 0x64
 8000980:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==5)//倒车入库
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b05      	cmp	r3, #5
 8000986:	d11f      	bne.n	80009c8 <move+0x3f8>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <move+0x40c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2200      	movs	r2, #0
 800098e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,30);
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <move+0x40c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	221e      	movs	r2, #30
 8000996:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,100);
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <move+0x40c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2264      	movs	r2, #100	; 0x64
 800099e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,100);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <move+0x40c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2264      	movs	r2, #100	; 0x64
 80009a6:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,0);
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <move+0x400>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2200      	movs	r2, #0
 80009ae:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,30);
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <move+0x400>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	221e      	movs	r2, #30
 80009b6:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,100);
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <move+0x400>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2264      	movs	r2, #100	; 0x64
 80009be:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,100);
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <move+0x400>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2264      	movs	r2, #100	; 0x64
 80009c6:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	24000048 	.word	0x24000048
 80009d4:	58020800 	.word	0x58020800
 80009d8:	58021000 	.word	0x58021000
 80009dc:	240001b8 	.word	0x240001b8

080009e0 <shuxian>:

void shuxian()
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	if(step==1)
 80009e4:	4b35      	ldr	r3, [pc, #212]	; (8000abc <shuxian+0xdc>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d11e      	bne.n	8000a2a <shuxian+0x4a>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
 80009ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f0:	4833      	ldr	r0, [pc, #204]	; (8000ac0 <shuxian+0xe0>)
 80009f2:	f001 fa6f 	bl	8001ed4 <HAL_GPIO_ReadPin>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d102      	bne.n	8000a02 <shuxian+0x22>
		{
			Xflag=1;
 80009fc:	4b31      	ldr	r3, [pc, #196]	; (8000ac4 <shuxian+0xe4>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&Xflag==1)
 8000a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a06:	482e      	ldr	r0, [pc, #184]	; (8000ac0 <shuxian+0xe0>)
 8000a08:	f001 fa64 	bl	8001ed4 <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d10b      	bne.n	8000a2a <shuxian+0x4a>
 8000a12:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <shuxian+0xe4>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d107      	bne.n	8000a2a <shuxian+0x4a>
		{
			X+=1;
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <shuxian+0xe8>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	4a29      	ldr	r2, [pc, #164]	; (8000ac8 <shuxian+0xe8>)
 8000a22:	6013      	str	r3, [r2, #0]
			Xflag=0;
 8000a24:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <shuxian+0xe4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
		}
	}

	if(step==2)
 8000a2a:	4b24      	ldr	r3, [pc, #144]	; (8000abc <shuxian+0xdc>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d11e      	bne.n	8000a70 <shuxian+0x90>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1&&Yflag==1)
 8000a32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a36:	4825      	ldr	r0, [pc, #148]	; (8000acc <shuxian+0xec>)
 8000a38:	f001 fa4c 	bl	8001ed4 <HAL_GPIO_ReadPin>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d10b      	bne.n	8000a5a <shuxian+0x7a>
 8000a42:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <shuxian+0xf0>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d107      	bne.n	8000a5a <shuxian+0x7a>
		{
			Y+=1;
 8000a4a:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <shuxian+0xf4>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	4a20      	ldr	r2, [pc, #128]	; (8000ad4 <shuxian+0xf4>)
 8000a52:	6013      	str	r3, [r2, #0]
			Yflag=0;
 8000a54:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <shuxian+0xf0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000a5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5e:	481b      	ldr	r0, [pc, #108]	; (8000acc <shuxian+0xec>)
 8000a60:	f001 fa38 	bl	8001ed4 <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d102      	bne.n	8000a70 <shuxian+0x90>
		{
			Yflag=1;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <shuxian+0xf0>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	601a      	str	r2, [r3, #0]
		}
	}

	if(step==4)
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <shuxian+0xdc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d11e      	bne.n	8000ab6 <shuxian+0xd6>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1&&Zflag==1)
 8000a78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7c:	4813      	ldr	r0, [pc, #76]	; (8000acc <shuxian+0xec>)
 8000a7e:	f001 fa29 	bl	8001ed4 <HAL_GPIO_ReadPin>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d10b      	bne.n	8000aa0 <shuxian+0xc0>
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <shuxian+0xf8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d107      	bne.n	8000aa0 <shuxian+0xc0>
		{
			Z+=1;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <shuxian+0xfc>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3301      	adds	r3, #1
 8000a96:	4a11      	ldr	r2, [pc, #68]	; (8000adc <shuxian+0xfc>)
 8000a98:	6013      	str	r3, [r2, #0]
			Zflag=0;
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <shuxian+0xf8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000aa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa4:	4809      	ldr	r0, [pc, #36]	; (8000acc <shuxian+0xec>)
 8000aa6:	f001 fa15 	bl	8001ed4 <HAL_GPIO_ReadPin>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <shuxian+0xd6>
		{
			Zflag=1;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <shuxian+0xf8>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	24000000 	.word	0x24000000
 8000ac0:	58020800 	.word	0x58020800
 8000ac4:	24000004 	.word	0x24000004
 8000ac8:	2400003c 	.word	0x2400003c
 8000acc:	58020400 	.word	0x58020400
 8000ad0:	24000008 	.word	0x24000008
 8000ad4:	24000040 	.word	0x24000040
 8000ad8:	2400000c 	.word	0x2400000c
 8000adc:	24000044 	.word	0x24000044

08000ae0 <buzhou>:

void buzhou()
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	if(step==1)
 8000ae4:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <buzhou+0xa8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d112      	bne.n	8000b12 <buzhou+0x32>
	{
		move(1);
 8000aec:	2001      	movs	r0, #1
 8000aee:	f7ff fd6f 	bl	80005d0 <move>
		shuxian();
 8000af2:	f7ff ff75 	bl	80009e0 <shuxian>
		if(X==3)
 8000af6:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <buzhou+0xac>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d109      	bne.n	8000b12 <buzhou+0x32>
		{
			move(4);
 8000afe:	2004      	movs	r0, #4
 8000b00:	f7ff fd66 	bl	80005d0 <move>
			HAL_Delay(1000);
 8000b04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b08:	f000 ff20 	bl	800194c <HAL_Delay>
			step=2;
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <buzhou+0xa8>)
 8000b0e:	2202      	movs	r2, #2
 8000b10:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==2)
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <buzhou+0xa8>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d112      	bne.n	8000b40 <buzhou+0x60>
	{
		move(2);
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f7ff fd58 	bl	80005d0 <move>
		shuxian();
 8000b20:	f7ff ff5e 	bl	80009e0 <shuxian>
		if(Y==3)
 8000b24:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <buzhou+0xb0>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b03      	cmp	r3, #3
 8000b2a:	d109      	bne.n	8000b40 <buzhou+0x60>
		{
			move(4);
 8000b2c:	2004      	movs	r0, #4
 8000b2e:	f7ff fd4f 	bl	80005d0 <move>
			HAL_Delay(1000);
 8000b32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b36:	f000 ff09 	bl	800194c <HAL_Delay>
			step=3;
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <buzhou+0xa8>)
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==3)
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <buzhou+0xa8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d109      	bne.n	8000b5c <buzhou+0x7c>
	{
		move(4);
 8000b48:	2004      	movs	r0, #4
 8000b4a:	f7ff fd41 	bl	80005d0 <move>
		HAL_Delay(2000);
 8000b4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b52:	f000 fefb 	bl	800194c <HAL_Delay>
		step=4;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <buzhou+0xa8>)
 8000b58:	2204      	movs	r2, #4
 8000b5a:	601a      	str	r2, [r3, #0]
	}
	if(step==4)
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <buzhou+0xa8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b04      	cmp	r3, #4
 8000b62:	d10e      	bne.n	8000b82 <buzhou+0xa2>
	{
		move(5);
 8000b64:	2005      	movs	r0, #5
 8000b66:	f7ff fd33 	bl	80005d0 <move>
		shuxian();
 8000b6a:	f7ff ff39 	bl	80009e0 <shuxian>
		if(Z==5)
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <buzhou+0xb4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b05      	cmp	r3, #5
 8000b74:	d105      	bne.n	8000b82 <buzhou+0xa2>
		{
			move(4);
 8000b76:	2004      	movs	r0, #4
 8000b78:	f7ff fd2a 	bl	80005d0 <move>
			step=5;
 8000b7c:	4b02      	ldr	r3, [pc, #8]	; (8000b88 <buzhou+0xa8>)
 8000b7e:	2205      	movs	r2, #5
 8000b80:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	24000000 	.word	0x24000000
 8000b8c:	2400003c 	.word	0x2400003c
 8000b90:	24000040 	.word	0x24000040
 8000b94:	24000044 	.word	0x24000044

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9c:	f000 fe44 	bl	8001828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba0:	f000 f83e 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba4:	f000 fb5c 	bl	8001260 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000ba8:	f000 f9a6 	bl	8000ef8 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000bac:	f000 fa74 	bl	8001098 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000bb0:	f000 fabe 	bl	8001130 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000bb4:	f000 f8d0 	bl	8000d58 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000bb8:	f000 fb06 	bl	80011c8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4814      	ldr	r0, [pc, #80]	; (8000c10 <main+0x78>)
 8000bc0:	f003 fd80 	bl	80046c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000bc4:	2104      	movs	r1, #4
 8000bc6:	4812      	ldr	r0, [pc, #72]	; (8000c10 <main+0x78>)
 8000bc8:	f003 fd7c 	bl	80046c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000bcc:	2108      	movs	r1, #8
 8000bce:	4810      	ldr	r0, [pc, #64]	; (8000c10 <main+0x78>)
 8000bd0:	f003 fd78 	bl	80046c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000bd4:	210c      	movs	r1, #12
 8000bd6:	480e      	ldr	r0, [pc, #56]	; (8000c10 <main+0x78>)
 8000bd8:	f003 fd74 	bl	80046c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	480d      	ldr	r0, [pc, #52]	; (8000c14 <main+0x7c>)
 8000be0:	f003 fd70 	bl	80046c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8000be4:	2104      	movs	r1, #4
 8000be6:	480b      	ldr	r0, [pc, #44]	; (8000c14 <main+0x7c>)
 8000be8:	f003 fd6c 	bl	80046c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 8000bec:	2108      	movs	r1, #8
 8000bee:	4809      	ldr	r0, [pc, #36]	; (8000c14 <main+0x7c>)
 8000bf0:	f003 fd68 	bl	80046c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);
 8000bf4:	210c      	movs	r1, #12
 8000bf6:	4807      	ldr	r0, [pc, #28]	; (8000c14 <main+0x7c>)
 8000bf8:	f003 fd64 	bl	80046c4 <HAL_TIM_PWM_Start>
    HAL_UART_Receive_IT(&huart1,YY,1000);
 8000bfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c00:	4905      	ldr	r1, [pc, #20]	; (8000c18 <main+0x80>)
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <main+0x84>)
 8000c04:	f004 fdb6 	bl	8005774 <HAL_UART_Receive_IT>
	 	 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
	 	 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
	 	 HAL_Delay(2000);
*/
//11左
	  buzhou();
 8000c08:	f7ff ff6a 	bl	8000ae0 <buzhou>
 8000c0c:	e7fc      	b.n	8000c08 <main+0x70>
 8000c0e:	bf00      	nop
 8000c10:	240001b8 	.word	0x240001b8
 8000c14:	24000048 	.word	0x24000048
 8000c18:	24000120 	.word	0x24000120
 8000c1c:	2400012c 	.word	0x2400012c

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b0cc      	sub	sp, #304	; 0x130
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c2a:	224c      	movs	r2, #76	; 0x4c
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f006 f846 	bl	8006cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c38:	2220      	movs	r2, #32
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f006 f83f 	bl	8006cc0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	4618      	mov	r0, r3
 8000c48:	23bc      	movs	r3, #188	; 0xbc
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	f006 f837 	bl	8006cc0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c52:	2002      	movs	r0, #2
 8000c54:	f001 f956 	bl	8001f04 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	4b3c      	ldr	r3, [pc, #240]	; (8000d50 <SystemClock_Config+0x130>)
 8000c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c62:	4a3b      	ldr	r2, [pc, #236]	; (8000d50 <SystemClock_Config+0x130>)
 8000c64:	f023 0301 	bic.w	r3, r3, #1
 8000c68:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c6a:	4b39      	ldr	r3, [pc, #228]	; (8000d50 <SystemClock_Config+0x130>)
 8000c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6e:	f003 0201 	and.w	r2, r3, #1
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	4b37      	ldr	r3, [pc, #220]	; (8000d54 <SystemClock_Config+0x134>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c7e:	4a35      	ldr	r2, [pc, #212]	; (8000d54 <SystemClock_Config+0x134>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c84:	6193      	str	r3, [r2, #24]
 8000c86:	4b33      	ldr	r3, [pc, #204]	; (8000d54 <SystemClock_Config+0x134>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c96:	bf00      	nop
 8000c98:	4b2e      	ldr	r3, [pc, #184]	; (8000d54 <SystemClock_Config+0x134>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ca4:	d1f8      	bne.n	8000c98 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cac:	2301      	movs	r3, #1
 8000cae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb2:	2340      	movs	r3, #64	; 0x40
 8000cb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 f958 	bl	8001f78 <HAL_RCC_OscConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000cce:	f000 fb4f 	bl	8001370 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd2:	233f      	movs	r3, #63	; 0x3f
 8000cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d02:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 fd45 	bl	8002798 <HAL_RCC_ClockConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000d14:	f000 fb2c 	bl	8001370 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	2200      	movs	r2, #0
 8000d26:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d30:	f107 0308 	add.w	r3, r7, #8
 8000d34:	4618      	mov	r0, r3
 8000d36:	f002 f8bb 	bl	8002eb0 <HAL_RCCEx_PeriphCLKConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0x124>
  {
    Error_Handler();
 8000d40:	f000 fb16 	bl	8001370 <Error_Handler>
  }
}
 8000d44:	bf00      	nop
 8000d46:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58000400 	.word	0x58000400
 8000d54:	58024800 	.word	0x58024800

08000d58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b09a      	sub	sp, #104	; 0x68
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	615a      	str	r2, [r3, #20]
 8000d8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	222c      	movs	r2, #44	; 0x2c
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f005 ff94 	bl	8006cc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d98:	4b55      	ldr	r3, [pc, #340]	; (8000ef0 <MX_TIM1_Init+0x198>)
 8000d9a:	4a56      	ldr	r2, [pc, #344]	; (8000ef4 <MX_TIM1_Init+0x19c>)
 8000d9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8000d9e:	4b54      	ldr	r3, [pc, #336]	; (8000ef0 <MX_TIM1_Init+0x198>)
 8000da0:	221f      	movs	r2, #31
 8000da2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da4:	4b52      	ldr	r3, [pc, #328]	; (8000ef0 <MX_TIM1_Init+0x198>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000daa:	4b51      	ldr	r3, [pc, #324]	; (8000ef0 <MX_TIM1_Init+0x198>)
 8000dac:	2263      	movs	r2, #99	; 0x63
 8000dae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db0:	4b4f      	ldr	r3, [pc, #316]	; (8000ef0 <MX_TIM1_Init+0x198>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000db6:	4b4e      	ldr	r3, [pc, #312]	; (8000ef0 <MX_TIM1_Init+0x198>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbc:	4b4c      	ldr	r3, [pc, #304]	; (8000ef0 <MX_TIM1_Init+0x198>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dc2:	484b      	ldr	r0, [pc, #300]	; (8000ef0 <MX_TIM1_Init+0x198>)
 8000dc4:	f003 fbc6 	bl	8004554 <HAL_TIM_Base_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000dce:	f000 facf 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4844      	ldr	r0, [pc, #272]	; (8000ef0 <MX_TIM1_Init+0x198>)
 8000de0:	f003 fe52 	bl	8004a88 <HAL_TIM_ConfigClockSource>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000dea:	f000 fac1 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dee:	4840      	ldr	r0, [pc, #256]	; (8000ef0 <MX_TIM1_Init+0x198>)
 8000df0:	f003 fc07 	bl	8004602 <HAL_TIM_PWM_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000dfa:	f000 fab9 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e02:	2300      	movs	r3, #0
 8000e04:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4837      	ldr	r0, [pc, #220]	; (8000ef0 <MX_TIM1_Init+0x198>)
 8000e12:	f004 fb59 	bl	80054c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000e1c:	f000 faa8 	bl	8001370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e20:	2360      	movs	r3, #96	; 0x60
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e34:	2300      	movs	r3, #0
 8000e36:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e40:	2200      	movs	r2, #0
 8000e42:	4619      	mov	r1, r3
 8000e44:	482a      	ldr	r0, [pc, #168]	; (8000ef0 <MX_TIM1_Init+0x198>)
 8000e46:	f003 fd0f 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000e50:	f000 fa8e 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e58:	2204      	movs	r2, #4
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4824      	ldr	r0, [pc, #144]	; (8000ef0 <MX_TIM1_Init+0x198>)
 8000e5e:	f003 fd03 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000e68:	f000 fa82 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e70:	2208      	movs	r2, #8
 8000e72:	4619      	mov	r1, r3
 8000e74:	481e      	ldr	r0, [pc, #120]	; (8000ef0 <MX_TIM1_Init+0x198>)
 8000e76:	f003 fcf7 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000e80:	f000 fa76 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e88:	220c      	movs	r2, #12
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4818      	ldr	r0, [pc, #96]	; (8000ef0 <MX_TIM1_Init+0x198>)
 8000e8e:	f003 fceb 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000e98:	f000 fa6a 	bl	8001370 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <MX_TIM1_Init+0x198>)
 8000ed2:	f004 fb81 	bl	80055d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000edc:	f000 fa48 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <MX_TIM1_Init+0x198>)
 8000ee2:	f000 fa9f 	bl	8001424 <HAL_TIM_MspPostInit>

}
 8000ee6:	bf00      	nop
 8000ee8:	3768      	adds	r7, #104	; 0x68
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	240001b8 	.word	0x240001b8
 8000ef4:	40010000 	.word	0x40010000

08000ef8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b09a      	sub	sp, #104	; 0x68
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
 8000f28:	615a      	str	r2, [r3, #20]
 8000f2a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	222c      	movs	r2, #44	; 0x2c
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f005 fec4 	bl	8006cc0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f38:	4b55      	ldr	r3, [pc, #340]	; (8001090 <MX_TIM8_Init+0x198>)
 8000f3a:	4a56      	ldr	r2, [pc, #344]	; (8001094 <MX_TIM8_Init+0x19c>)
 8000f3c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 8000f3e:	4b54      	ldr	r3, [pc, #336]	; (8001090 <MX_TIM8_Init+0x198>)
 8000f40:	223f      	movs	r2, #63	; 0x3f
 8000f42:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f44:	4b52      	ldr	r3, [pc, #328]	; (8001090 <MX_TIM8_Init+0x198>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 8000f4a:	4b51      	ldr	r3, [pc, #324]	; (8001090 <MX_TIM8_Init+0x198>)
 8000f4c:	2263      	movs	r2, #99	; 0x63
 8000f4e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f50:	4b4f      	ldr	r3, [pc, #316]	; (8001090 <MX_TIM8_Init+0x198>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f56:	4b4e      	ldr	r3, [pc, #312]	; (8001090 <MX_TIM8_Init+0x198>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5c:	4b4c      	ldr	r3, [pc, #304]	; (8001090 <MX_TIM8_Init+0x198>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f62:	484b      	ldr	r0, [pc, #300]	; (8001090 <MX_TIM8_Init+0x198>)
 8000f64:	f003 faf6 	bl	8004554 <HAL_TIM_Base_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000f6e:	f000 f9ff 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f76:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4844      	ldr	r0, [pc, #272]	; (8001090 <MX_TIM8_Init+0x198>)
 8000f80:	f003 fd82 	bl	8004a88 <HAL_TIM_ConfigClockSource>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000f8a:	f000 f9f1 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000f8e:	4840      	ldr	r0, [pc, #256]	; (8001090 <MX_TIM8_Init+0x198>)
 8000f90:	f003 fb37 	bl	8004602 <HAL_TIM_PWM_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000f9a:	f000 f9e9 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000faa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4837      	ldr	r0, [pc, #220]	; (8001090 <MX_TIM8_Init+0x198>)
 8000fb2:	f004 fa89 	bl	80054c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8000fbc:	f000 f9d8 	bl	8001370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc0:	2360      	movs	r3, #96	; 0x60
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	482a      	ldr	r0, [pc, #168]	; (8001090 <MX_TIM8_Init+0x198>)
 8000fe6:	f003 fc3f 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8000ff0:	f000 f9be 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4824      	ldr	r0, [pc, #144]	; (8001090 <MX_TIM8_Init+0x198>)
 8000ffe:	f003 fc33 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8001008:	f000 f9b2 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800100c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001010:	2208      	movs	r2, #8
 8001012:	4619      	mov	r1, r3
 8001014:	481e      	ldr	r0, [pc, #120]	; (8001090 <MX_TIM8_Init+0x198>)
 8001016:	f003 fc27 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8001020:	f000 f9a6 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001024:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001028:	220c      	movs	r2, #12
 800102a:	4619      	mov	r1, r3
 800102c:	4818      	ldr	r0, [pc, #96]	; (8001090 <MX_TIM8_Init+0x198>)
 800102e:	f003 fc1b 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8001038:	f000 f99a 	bl	8001370 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001054:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800105e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4619      	mov	r1, r3
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <MX_TIM8_Init+0x198>)
 8001072:	f004 fab1 	bl	80055d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM8_Init+0x188>
  {
    Error_Handler();
 800107c:	f000 f978 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <MX_TIM8_Init+0x198>)
 8001082:	f000 f9cf 	bl	8001424 <HAL_TIM_MspPostInit>

}
 8001086:	bf00      	nop
 8001088:	3768      	adds	r7, #104	; 0x68
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	24000048 	.word	0x24000048
 8001094:	40010400 	.word	0x40010400

08001098 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <MX_USART1_UART_Init+0x90>)
 800109e:	4a23      	ldr	r2, [pc, #140]	; (800112c <MX_USART1_UART_Init+0x94>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <MX_USART1_UART_Init+0x90>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <MX_USART1_UART_Init+0x90>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <MX_USART1_UART_Init+0x90>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <MX_USART1_UART_Init+0x90>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_USART1_UART_Init+0x90>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_USART1_UART_Init+0x90>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_USART1_UART_Init+0x90>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_USART1_UART_Init+0x90>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_USART1_UART_Init+0x90>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_USART1_UART_Init+0x90>)
 80010dc:	2200      	movs	r2, #0
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010e0:	4811      	ldr	r0, [pc, #68]	; (8001128 <MX_USART1_UART_Init+0x90>)
 80010e2:	f004 faf7 	bl	80056d4 <HAL_UART_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010ec:	f000 f940 	bl	8001370 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f0:	2100      	movs	r1, #0
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_USART1_UART_Init+0x90>)
 80010f4:	f005 fcdb 	bl	8006aae <HAL_UARTEx_SetTxFifoThreshold>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010fe:	f000 f937 	bl	8001370 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001102:	2100      	movs	r1, #0
 8001104:	4808      	ldr	r0, [pc, #32]	; (8001128 <MX_USART1_UART_Init+0x90>)
 8001106:	f005 fd10 	bl	8006b2a <HAL_UARTEx_SetRxFifoThreshold>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001110:	f000 f92e 	bl	8001370 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_USART1_UART_Init+0x90>)
 8001116:	f005 fc91 	bl	8006a3c <HAL_UARTEx_DisableFifoMode>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001120:	f000 f926 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2400012c 	.word	0x2400012c
 800112c:	40011000 	.word	0x40011000

08001130 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <MX_USART2_UART_Init+0x90>)
 8001136:	4a23      	ldr	r2, [pc, #140]	; (80011c4 <MX_USART2_UART_Init+0x94>)
 8001138:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <MX_USART2_UART_Init+0x90>)
 800113c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001140:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <MX_USART2_UART_Init+0x90>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <MX_USART2_UART_Init+0x90>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <MX_USART2_UART_Init+0x90>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <MX_USART2_UART_Init+0x90>)
 8001156:	220c      	movs	r2, #12
 8001158:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <MX_USART2_UART_Init+0x90>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <MX_USART2_UART_Init+0x90>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <MX_USART2_UART_Init+0x90>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <MX_USART2_UART_Init+0x90>)
 800116e:	2200      	movs	r2, #0
 8001170:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <MX_USART2_UART_Init+0x90>)
 8001174:	2200      	movs	r2, #0
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001178:	4811      	ldr	r0, [pc, #68]	; (80011c0 <MX_USART2_UART_Init+0x90>)
 800117a:	f004 faab 	bl	80056d4 <HAL_UART_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001184:	f000 f8f4 	bl	8001370 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001188:	2100      	movs	r1, #0
 800118a:	480d      	ldr	r0, [pc, #52]	; (80011c0 <MX_USART2_UART_Init+0x90>)
 800118c:	f005 fc8f 	bl	8006aae <HAL_UARTEx_SetTxFifoThreshold>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001196:	f000 f8eb 	bl	8001370 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800119a:	2100      	movs	r1, #0
 800119c:	4808      	ldr	r0, [pc, #32]	; (80011c0 <MX_USART2_UART_Init+0x90>)
 800119e:	f005 fcc4 	bl	8006b2a <HAL_UARTEx_SetRxFifoThreshold>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011a8:	f000 f8e2 	bl	8001370 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <MX_USART2_UART_Init+0x90>)
 80011ae:	f005 fc45 	bl	8006a3c <HAL_UARTEx_DisableFifoMode>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011b8:	f000 f8da 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	24000204 	.word	0x24000204
 80011c4:	40004400 	.word	0x40004400

080011c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <MX_USART3_UART_Init+0x90>)
 80011ce:	4a23      	ldr	r2, [pc, #140]	; (800125c <MX_USART3_UART_Init+0x94>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <MX_USART3_UART_Init+0x90>)
 80011d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <MX_USART3_UART_Init+0x90>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <MX_USART3_UART_Init+0x90>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <MX_USART3_UART_Init+0x90>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <MX_USART3_UART_Init+0x90>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <MX_USART3_UART_Init+0x90>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <MX_USART3_UART_Init+0x90>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <MX_USART3_UART_Init+0x90>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MX_USART3_UART_Init+0x90>)
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <MX_USART3_UART_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001210:	4811      	ldr	r0, [pc, #68]	; (8001258 <MX_USART3_UART_Init+0x90>)
 8001212:	f004 fa5f 	bl	80056d4 <HAL_UART_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800121c:	f000 f8a8 	bl	8001370 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001220:	2100      	movs	r1, #0
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_USART3_UART_Init+0x90>)
 8001224:	f005 fc43 	bl	8006aae <HAL_UARTEx_SetTxFifoThreshold>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800122e:	f000 f89f 	bl	8001370 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001232:	2100      	movs	r1, #0
 8001234:	4808      	ldr	r0, [pc, #32]	; (8001258 <MX_USART3_UART_Init+0x90>)
 8001236:	f005 fc78 	bl	8006b2a <HAL_UARTEx_SetRxFifoThreshold>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001240:	f000 f896 	bl	8001370 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_USART3_UART_Init+0x90>)
 8001246:	f005 fbf9 	bl	8006a3c <HAL_UARTEx_DisableFifoMode>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001250:	f000 f88e 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	24000094 	.word	0x24000094
 800125c:	40004800 	.word	0x40004800

08001260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001276:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <MX_GPIO_Init+0x100>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	4a38      	ldr	r2, [pc, #224]	; (8001360 <MX_GPIO_Init+0x100>)
 800127e:	f043 0310 	orr.w	r3, r3, #16
 8001282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001286:	4b36      	ldr	r3, [pc, #216]	; (8001360 <MX_GPIO_Init+0x100>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001294:	4b32      	ldr	r3, [pc, #200]	; (8001360 <MX_GPIO_Init+0x100>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	4a31      	ldr	r2, [pc, #196]	; (8001360 <MX_GPIO_Init+0x100>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a4:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <MX_GPIO_Init+0x100>)
 80012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <MX_GPIO_Init+0x100>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	4a29      	ldr	r2, [pc, #164]	; (8001360 <MX_GPIO_Init+0x100>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c2:	4b27      	ldr	r3, [pc, #156]	; (8001360 <MX_GPIO_Init+0x100>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <MX_GPIO_Init+0x100>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d6:	4a22      	ldr	r2, [pc, #136]	; (8001360 <MX_GPIO_Init+0x100>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e0:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <MX_GPIO_Init+0x100>)
 80012e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <MX_GPIO_Init+0x100>)
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f4:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <MX_GPIO_Init+0x100>)
 80012f6:	f043 0308 	orr.w	r3, r3, #8
 80012fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_GPIO_Init+0x100>)
 8001300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800130c:	2320      	movs	r3, #32
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4811      	ldr	r0, [pc, #68]	; (8001364 <MX_GPIO_Init+0x104>)
 8001320:	f000 fc28 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	480b      	ldr	r0, [pc, #44]	; (8001368 <MX_GPIO_Init+0x108>)
 800133a:	f000 fc1b 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800133e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	; (800136c <MX_GPIO_Init+0x10c>)
 8001354:	f000 fc0e 	bl	8001b74 <HAL_GPIO_Init>

}
 8001358:	bf00      	nop
 800135a:	3728      	adds	r7, #40	; 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	58024400 	.word	0x58024400
 8001364:	58021000 	.word	0x58021000
 8001368:	58020800 	.word	0x58020800
 800136c:	58020400 	.word	0x58020400

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	e7fe      	b.n	8001378 <Error_Handler+0x8>
	...

0800137c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_MspInit+0x30>)
 8001384:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001388:	4a08      	ldr	r2, [pc, #32]	; (80013ac <HAL_MspInit+0x30>)
 800138a:	f043 0302 	orr.w	r3, r3, #2
 800138e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_MspInit+0x30>)
 8001394:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	58024400 	.word	0x58024400

080013b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a16      	ldr	r2, [pc, #88]	; (8001418 <HAL_TIM_Base_MspInit+0x68>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10f      	bne.n	80013e2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <HAL_TIM_Base_MspInit+0x6c>)
 80013c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013c8:	4a14      	ldr	r2, [pc, #80]	; (800141c <HAL_TIM_Base_MspInit+0x6c>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_TIM_Base_MspInit+0x6c>)
 80013d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80013e0:	e013      	b.n	800140a <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM8)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <HAL_TIM_Base_MspInit+0x70>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d10e      	bne.n	800140a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_TIM_Base_MspInit+0x6c>)
 80013ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_TIM_Base_MspInit+0x6c>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <HAL_TIM_Base_MspInit+0x6c>)
 80013fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40010000 	.word	0x40010000
 800141c:	58024400 	.word	0x58024400
 8001420:	40010400 	.word	0x40010400

08001424 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a26      	ldr	r2, [pc, #152]	; (80014dc <HAL_TIM_MspPostInit+0xb8>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d120      	bne.n	8001488 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <HAL_TIM_MspPostInit+0xbc>)
 8001448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144c:	4a24      	ldr	r2, [pc, #144]	; (80014e0 <HAL_TIM_MspPostInit+0xbc>)
 800144e:	f043 0310 	orr.w	r3, r3, #16
 8001452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_TIM_MspPostInit+0xbc>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001464:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001476:	2301      	movs	r3, #1
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4818      	ldr	r0, [pc, #96]	; (80014e4 <HAL_TIM_MspPostInit+0xc0>)
 8001482:	f000 fb77 	bl	8001b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001486:	e024      	b.n	80014d2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM8)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a16      	ldr	r2, [pc, #88]	; (80014e8 <HAL_TIM_MspPostInit+0xc4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d11f      	bne.n	80014d2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_TIM_MspPostInit+0xbc>)
 8001494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001498:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <HAL_TIM_MspPostInit+0xbc>)
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_TIM_MspPostInit+0xbc>)
 80014a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80014b0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80014c2:	2303      	movs	r3, #3
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4807      	ldr	r0, [pc, #28]	; (80014ec <HAL_TIM_MspPostInit+0xc8>)
 80014ce:	f000 fb51 	bl	8001b74 <HAL_GPIO_Init>
}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40010000 	.word	0x40010000
 80014e0:	58024400 	.word	0x58024400
 80014e4:	58021000 	.word	0x58021000
 80014e8:	40010400 	.word	0x40010400
 80014ec:	58020800 	.word	0x58020800

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08e      	sub	sp, #56	; 0x38
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a4f      	ldr	r2, [pc, #316]	; (800164c <HAL_UART_MspInit+0x15c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d12f      	bne.n	8001572 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001512:	4b4f      	ldr	r3, [pc, #316]	; (8001650 <HAL_UART_MspInit+0x160>)
 8001514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001518:	4a4d      	ldr	r2, [pc, #308]	; (8001650 <HAL_UART_MspInit+0x160>)
 800151a:	f043 0310 	orr.w	r3, r3, #16
 800151e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001522:	4b4b      	ldr	r3, [pc, #300]	; (8001650 <HAL_UART_MspInit+0x160>)
 8001524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001528:	f003 0310 	and.w	r3, r3, #16
 800152c:	623b      	str	r3, [r7, #32]
 800152e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001530:	4b47      	ldr	r3, [pc, #284]	; (8001650 <HAL_UART_MspInit+0x160>)
 8001532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001536:	4a46      	ldr	r2, [pc, #280]	; (8001650 <HAL_UART_MspInit+0x160>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001540:	4b43      	ldr	r3, [pc, #268]	; (8001650 <HAL_UART_MspInit+0x160>)
 8001542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800154e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001560:	2304      	movs	r3, #4
 8001562:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001568:	4619      	mov	r1, r3
 800156a:	483a      	ldr	r0, [pc, #232]	; (8001654 <HAL_UART_MspInit+0x164>)
 800156c:	f000 fb02 	bl	8001b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001570:	e067      	b.n	8001642 <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART2)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a38      	ldr	r2, [pc, #224]	; (8001658 <HAL_UART_MspInit+0x168>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d12e      	bne.n	80015da <HAL_UART_MspInit+0xea>
    __HAL_RCC_USART2_CLK_ENABLE();
 800157c:	4b34      	ldr	r3, [pc, #208]	; (8001650 <HAL_UART_MspInit+0x160>)
 800157e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001582:	4a33      	ldr	r2, [pc, #204]	; (8001650 <HAL_UART_MspInit+0x160>)
 8001584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001588:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800158c:	4b30      	ldr	r3, [pc, #192]	; (8001650 <HAL_UART_MspInit+0x160>)
 800158e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	61bb      	str	r3, [r7, #24]
 8001598:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_UART_MspInit+0x160>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a0:	4a2b      	ldr	r2, [pc, #172]	; (8001650 <HAL_UART_MspInit+0x160>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015aa:	4b29      	ldr	r3, [pc, #164]	; (8001650 <HAL_UART_MspInit+0x160>)
 80015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015b8:	230c      	movs	r3, #12
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c8:	2307      	movs	r3, #7
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d0:	4619      	mov	r1, r3
 80015d2:	4822      	ldr	r0, [pc, #136]	; (800165c <HAL_UART_MspInit+0x16c>)
 80015d4:	f000 face 	bl	8001b74 <HAL_GPIO_Init>
}
 80015d8:	e033      	b.n	8001642 <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART3)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a20      	ldr	r2, [pc, #128]	; (8001660 <HAL_UART_MspInit+0x170>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d12e      	bne.n	8001642 <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_UART_MspInit+0x160>)
 80015e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015ea:	4a19      	ldr	r2, [pc, #100]	; (8001650 <HAL_UART_MspInit+0x160>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_UART_MspInit+0x160>)
 80015f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_UART_MspInit+0x160>)
 8001604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001608:	4a11      	ldr	r2, [pc, #68]	; (8001650 <HAL_UART_MspInit+0x160>)
 800160a:	f043 0308 	orr.w	r3, r3, #8
 800160e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <HAL_UART_MspInit+0x160>)
 8001614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001620:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001632:	2307      	movs	r3, #7
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	4809      	ldr	r0, [pc, #36]	; (8001664 <HAL_UART_MspInit+0x174>)
 800163e:	f000 fa99 	bl	8001b74 <HAL_GPIO_Init>
}
 8001642:	bf00      	nop
 8001644:	3738      	adds	r7, #56	; 0x38
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40011000 	.word	0x40011000
 8001650:	58024400 	.word	0x58024400
 8001654:	58020400 	.word	0x58020400
 8001658:	40004400 	.word	0x40004400
 800165c:	58020000 	.word	0x58020000
 8001660:	40004800 	.word	0x40004800
 8001664:	58020c00 	.word	0x58020c00

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800166c:	e7fe      	b.n	800166c <NMI_Handler+0x4>

0800166e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <MemManage_Handler+0x4>

0800167a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <UsageFault_Handler+0x4>

08001686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b4:	f000 f92a 	bl	800190c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016c0:	4b39      	ldr	r3, [pc, #228]	; (80017a8 <SystemInit+0xec>)
 80016c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c6:	4a38      	ldr	r2, [pc, #224]	; (80017a8 <SystemInit+0xec>)
 80016c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016d0:	4b36      	ldr	r3, [pc, #216]	; (80017ac <SystemInit+0xf0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	2b06      	cmp	r3, #6
 80016da:	d807      	bhi.n	80016ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016dc:	4b33      	ldr	r3, [pc, #204]	; (80017ac <SystemInit+0xf0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f023 030f 	bic.w	r3, r3, #15
 80016e4:	4a31      	ldr	r2, [pc, #196]	; (80017ac <SystemInit+0xf0>)
 80016e6:	f043 0307 	orr.w	r3, r3, #7
 80016ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016ec:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <SystemInit+0xf4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a2f      	ldr	r2, [pc, #188]	; (80017b0 <SystemInit+0xf4>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016f8:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <SystemInit+0xf4>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016fe:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <SystemInit+0xf4>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	492b      	ldr	r1, [pc, #172]	; (80017b0 <SystemInit+0xf4>)
 8001704:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <SystemInit+0xf8>)
 8001706:	4013      	ands	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800170a:	4b28      	ldr	r3, [pc, #160]	; (80017ac <SystemInit+0xf0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001716:	4b25      	ldr	r3, [pc, #148]	; (80017ac <SystemInit+0xf0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 030f 	bic.w	r3, r3, #15
 800171e:	4a23      	ldr	r2, [pc, #140]	; (80017ac <SystemInit+0xf0>)
 8001720:	f043 0307 	orr.w	r3, r3, #7
 8001724:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001726:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <SystemInit+0xf4>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800172c:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <SystemInit+0xf4>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001732:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <SystemInit+0xf4>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001738:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <SystemInit+0xf4>)
 800173a:	4a1f      	ldr	r2, [pc, #124]	; (80017b8 <SystemInit+0xfc>)
 800173c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800173e:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <SystemInit+0xf4>)
 8001740:	4a1e      	ldr	r2, [pc, #120]	; (80017bc <SystemInit+0x100>)
 8001742:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001744:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <SystemInit+0xf4>)
 8001746:	4a1e      	ldr	r2, [pc, #120]	; (80017c0 <SystemInit+0x104>)
 8001748:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <SystemInit+0xf4>)
 800174c:	2200      	movs	r2, #0
 800174e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <SystemInit+0xf4>)
 8001752:	4a1b      	ldr	r2, [pc, #108]	; (80017c0 <SystemInit+0x104>)
 8001754:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <SystemInit+0xf4>)
 8001758:	2200      	movs	r2, #0
 800175a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <SystemInit+0xf4>)
 800175e:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <SystemInit+0x104>)
 8001760:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <SystemInit+0xf4>)
 8001764:	2200      	movs	r2, #0
 8001766:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <SystemInit+0xf4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <SystemInit+0xf4>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <SystemInit+0xf4>)
 8001776:	2200      	movs	r2, #0
 8001778:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <SystemInit+0x108>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <SystemInit+0x10c>)
 8001780:	4013      	ands	r3, r2
 8001782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001786:	d202      	bcs.n	800178e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001788:	4b10      	ldr	r3, [pc, #64]	; (80017cc <SystemInit+0x110>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <SystemInit+0x114>)
 8001790:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001794:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <SystemInit+0xec>)
 8001798:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800179c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00
 80017ac:	52002000 	.word	0x52002000
 80017b0:	58024400 	.word	0x58024400
 80017b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80017b8:	02020200 	.word	0x02020200
 80017bc:	01ff0000 	.word	0x01ff0000
 80017c0:	01010280 	.word	0x01010280
 80017c4:	5c001000 	.word	0x5c001000
 80017c8:	ffff0000 	.word	0xffff0000
 80017cc:	51008108 	.word	0x51008108
 80017d0:	52004000 	.word	0x52004000

080017d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800180c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80017d8:	f7ff ff70 	bl	80016bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017de:	e003      	b.n	80017e8 <LoopCopyDataInit>

080017e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80017e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017e6:	3104      	adds	r1, #4

080017e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017e8:	480a      	ldr	r0, [pc, #40]	; (8001814 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80017ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017f0:	d3f6      	bcc.n	80017e0 <CopyDataInit>
  ldr  r2, =_sbss
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80017f4:	e002      	b.n	80017fc <LoopFillZerobss>

080017f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017f8:	f842 3b04 	str.w	r3, [r2], #4

080017fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80017fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001800:	d3f9      	bcc.n	80017f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001802:	f005 fa39 	bl	8006c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001806:	f7ff f9c7 	bl	8000b98 <main>
  bx  lr    
 800180a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800180c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001810:	08006d30 	.word	0x08006d30
  ldr  r0, =_sdata
 8001814:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001818:	24000020 	.word	0x24000020
  ldr  r2, =_sbss
 800181c:	24000020 	.word	0x24000020
  ldr  r3, = _ebss
 8001820:	24000294 	.word	0x24000294

08001824 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001824:	e7fe      	b.n	8001824 <ADC3_IRQHandler>
	...

08001828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182e:	2003      	movs	r0, #3
 8001830:	f000 f96e 	bl	8001b10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001834:	f001 f966 	bl	8002b04 <HAL_RCC_GetSysClockFreq>
 8001838:	4602      	mov	r2, r0
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_Init+0x68>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	4913      	ldr	r1, [pc, #76]	; (8001894 <HAL_Init+0x6c>)
 8001846:	5ccb      	ldrb	r3, [r1, r3]
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
 8001850:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_Init+0x68>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <HAL_Init+0x6c>)
 800185c:	5cd3      	ldrb	r3, [r2, r3]
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
 8001868:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <HAL_Init+0x70>)
 800186a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800186c:	4a0b      	ldr	r2, [pc, #44]	; (800189c <HAL_Init+0x74>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001872:	2000      	movs	r0, #0
 8001874:	f000 f814 	bl	80018a0 <HAL_InitTick>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e002      	b.n	8001888 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001882:	f7ff fd7b 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	58024400 	.word	0x58024400
 8001894:	08006cf8 	.word	0x08006cf8
 8001898:	24000014 	.word	0x24000014
 800189c:	24000010 	.word	0x24000010

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_InitTick+0x60>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e021      	b.n	80018f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_InitTick+0x64>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_InitTick+0x60>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f945 	bl	8001b5a <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00e      	b.n	80018f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d80a      	bhi.n	80018f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f000 f91d 	bl	8001b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_InitTick+0x68>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	2400001c 	.word	0x2400001c
 8001904:	24000010 	.word	0x24000010
 8001908:	24000018 	.word	0x24000018

0800190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	2400001c 	.word	0x2400001c
 8001930:	24000290 	.word	0x24000290

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	24000290 	.word	0x24000290

0800194c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff ffee 	bl	8001934 <HAL_GetTick>
 8001958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d005      	beq.n	8001972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_Delay+0x44>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001972:	bf00      	nop
 8001974:	f7ff ffde 	bl	8001934 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	d8f7      	bhi.n	8001974 <HAL_Delay+0x28>
  {
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2400001c 	.word	0x2400001c

08001994 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <HAL_GetREVID+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0c1b      	lsrs	r3, r3, #16
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	5c001000 	.word	0x5c001000

080019ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <__NVIC_SetPriorityGrouping+0x40>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019da:	4a04      	ldr	r2, [pc, #16]	; (80019ec <__NVIC_SetPriorityGrouping+0x40>)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	60d3      	str	r3, [r2, #12]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00
 80019f0:	05fa0000 	.word	0x05fa0000

080019f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <__NVIC_GetPriorityGrouping+0x18>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	f003 0307 	and.w	r3, r3, #7
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	db0a      	blt.n	8001a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	490c      	ldr	r1, [pc, #48]	; (8001a5c <__NVIC_SetPriority+0x4c>)
 8001a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a38:	e00a      	b.n	8001a50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4908      	ldr	r1, [pc, #32]	; (8001a60 <__NVIC_SetPriority+0x50>)
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3b04      	subs	r3, #4
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	761a      	strb	r2, [r3, #24]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000e100 	.word	0xe000e100
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f1c3 0307 	rsb	r3, r3, #7
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	bf28      	it	cs
 8001a82:	2304      	movcs	r3, #4
 8001a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d902      	bls.n	8001a94 <NVIC_EncodePriority+0x30>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3b03      	subs	r3, #3
 8001a92:	e000      	b.n	8001a96 <NVIC_EncodePriority+0x32>
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	4313      	orrs	r3, r2
         );
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001adc:	d301      	bcc.n	8001ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00f      	b.n	8001b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <SysTick_Config+0x40>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aea:	210f      	movs	r1, #15
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f7ff ff8e 	bl	8001a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <SysTick_Config+0x40>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <SysTick_Config+0x40>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	e000e010 	.word	0xe000e010

08001b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff47 	bl	80019ac <__NVIC_SetPriorityGrouping>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b34:	f7ff ff5e 	bl	80019f4 <__NVIC_GetPriorityGrouping>
 8001b38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	6978      	ldr	r0, [r7, #20]
 8001b40:	f7ff ff90 	bl	8001a64 <NVIC_EncodePriority>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff5f 	bl	8001a10 <__NVIC_SetPriority>
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffb2 	bl	8001acc <SysTick_Config>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b82:	4b89      	ldr	r3, [pc, #548]	; (8001da8 <HAL_GPIO_Init+0x234>)
 8001b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b86:	e194      	b.n	8001eb2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 8186 	beq.w	8001eac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d00b      	beq.n	8001bc0 <HAL_GPIO_Init+0x4c>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d007      	beq.n	8001bc0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb4:	2b11      	cmp	r3, #17
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b12      	cmp	r3, #18
 8001bbe:	d130      	bne.n	8001c22 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	f003 0201 	and.w	r2, r3, #1
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0xee>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b12      	cmp	r3, #18
 8001c60:	d123      	bne.n	8001caa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	08da      	lsrs	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3208      	adds	r2, #8
 8001c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	220f      	movs	r2, #15
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	691a      	ldr	r2, [r3, #16]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	08da      	lsrs	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3208      	adds	r2, #8
 8001ca4:	69b9      	ldr	r1, [r7, #24]
 8001ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0203 	and.w	r2, r3, #3
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 80e0 	beq.w	8001eac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cec:	4b2f      	ldr	r3, [pc, #188]	; (8001dac <HAL_GPIO_Init+0x238>)
 8001cee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cf2:	4a2e      	ldr	r2, [pc, #184]	; (8001dac <HAL_GPIO_Init+0x238>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_GPIO_Init+0x238>)
 8001cfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d0a:	4a29      	ldr	r2, [pc, #164]	; (8001db0 <HAL_GPIO_Init+0x23c>)
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	089b      	lsrs	r3, r3, #2
 8001d10:	3302      	adds	r3, #2
 8001d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	220f      	movs	r2, #15
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a20      	ldr	r2, [pc, #128]	; (8001db4 <HAL_GPIO_Init+0x240>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d052      	beq.n	8001ddc <HAL_GPIO_Init+0x268>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <HAL_GPIO_Init+0x244>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d031      	beq.n	8001da2 <HAL_GPIO_Init+0x22e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <HAL_GPIO_Init+0x248>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d02b      	beq.n	8001d9e <HAL_GPIO_Init+0x22a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <HAL_GPIO_Init+0x24c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d025      	beq.n	8001d9a <HAL_GPIO_Init+0x226>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a1c      	ldr	r2, [pc, #112]	; (8001dc4 <HAL_GPIO_Init+0x250>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d01f      	beq.n	8001d96 <HAL_GPIO_Init+0x222>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <HAL_GPIO_Init+0x254>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d019      	beq.n	8001d92 <HAL_GPIO_Init+0x21e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a1a      	ldr	r2, [pc, #104]	; (8001dcc <HAL_GPIO_Init+0x258>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_GPIO_Init+0x21a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a19      	ldr	r2, [pc, #100]	; (8001dd0 <HAL_GPIO_Init+0x25c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00d      	beq.n	8001d8a <HAL_GPIO_Init+0x216>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a18      	ldr	r2, [pc, #96]	; (8001dd4 <HAL_GPIO_Init+0x260>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d007      	beq.n	8001d86 <HAL_GPIO_Init+0x212>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a17      	ldr	r2, [pc, #92]	; (8001dd8 <HAL_GPIO_Init+0x264>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d101      	bne.n	8001d82 <HAL_GPIO_Init+0x20e>
 8001d7e:	2309      	movs	r3, #9
 8001d80:	e02d      	b.n	8001dde <HAL_GPIO_Init+0x26a>
 8001d82:	230a      	movs	r3, #10
 8001d84:	e02b      	b.n	8001dde <HAL_GPIO_Init+0x26a>
 8001d86:	2308      	movs	r3, #8
 8001d88:	e029      	b.n	8001dde <HAL_GPIO_Init+0x26a>
 8001d8a:	2307      	movs	r3, #7
 8001d8c:	e027      	b.n	8001dde <HAL_GPIO_Init+0x26a>
 8001d8e:	2306      	movs	r3, #6
 8001d90:	e025      	b.n	8001dde <HAL_GPIO_Init+0x26a>
 8001d92:	2305      	movs	r3, #5
 8001d94:	e023      	b.n	8001dde <HAL_GPIO_Init+0x26a>
 8001d96:	2304      	movs	r3, #4
 8001d98:	e021      	b.n	8001dde <HAL_GPIO_Init+0x26a>
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e01f      	b.n	8001dde <HAL_GPIO_Init+0x26a>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e01d      	b.n	8001dde <HAL_GPIO_Init+0x26a>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e01b      	b.n	8001dde <HAL_GPIO_Init+0x26a>
 8001da6:	bf00      	nop
 8001da8:	58000080 	.word	0x58000080
 8001dac:	58024400 	.word	0x58024400
 8001db0:	58000400 	.word	0x58000400
 8001db4:	58020000 	.word	0x58020000
 8001db8:	58020400 	.word	0x58020400
 8001dbc:	58020800 	.word	0x58020800
 8001dc0:	58020c00 	.word	0x58020c00
 8001dc4:	58021000 	.word	0x58021000
 8001dc8:	58021400 	.word	0x58021400
 8001dcc:	58021800 	.word	0x58021800
 8001dd0:	58021c00 	.word	0x58021c00
 8001dd4:	58022000 	.word	0x58022000
 8001dd8:	58022400 	.word	0x58022400
 8001ddc:	2300      	movs	r3, #0
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	f002 0203 	and.w	r2, r2, #3
 8001de4:	0092      	lsls	r2, r2, #2
 8001de6:	4093      	lsls	r3, r2
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dee:	4938      	ldr	r1, [pc, #224]	; (8001ed0 <HAL_GPIO_Init+0x35c>)
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f47f ae63 	bne.w	8001b88 <HAL_GPIO_Init+0x14>
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	bf00      	nop
 8001ec6:	3724      	adds	r7, #36	; 0x24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	58000400 	.word	0x58000400

08001ed4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	887b      	ldrh	r3, [r7, #2]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eec:	2301      	movs	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	e001      	b.n	8001ef6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_PWREx_ConfigSupply+0x70>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d00a      	beq.n	8001f2e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f18:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <HAL_PWREx_ConfigSupply+0x70>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d001      	beq.n	8001f2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e01f      	b.n	8001f6a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e01d      	b.n	8001f6a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_PWREx_ConfigSupply+0x70>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f023 0207 	bic.w	r2, r3, #7
 8001f36:	490f      	ldr	r1, [pc, #60]	; (8001f74 <HAL_PWREx_ConfigSupply+0x70>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001f3e:	f7ff fcf9 	bl	8001934 <HAL_GetTick>
 8001f42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f44:	e009      	b.n	8001f5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f46:	f7ff fcf5 	bl	8001934 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f54:	d901      	bls.n	8001f5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e007      	b.n	8001f6a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_PWREx_ConfigSupply+0x70>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f66:	d1ee      	bne.n	8001f46 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	58024800 	.word	0x58024800

08001f78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08c      	sub	sp, #48	; 0x30
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e3ff      	b.n	800278a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 8087 	beq.w	80020a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f98:	4b99      	ldr	r3, [pc, #612]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fa2:	4b97      	ldr	r3, [pc, #604]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d007      	beq.n	8001fbe <HAL_RCC_OscConfig+0x46>
 8001fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb0:	2b18      	cmp	r3, #24
 8001fb2:	d110      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x5e>
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d10b      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbe:	4b90      	ldr	r3, [pc, #576]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d06c      	beq.n	80020a4 <HAL_RCC_OscConfig+0x12c>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d168      	bne.n	80020a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e3d9      	b.n	800278a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x76>
 8001fe0:	4b87      	ldr	r3, [pc, #540]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a86      	ldr	r2, [pc, #536]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8001fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	e02e      	b.n	800204c <HAL_RCC_OscConfig+0xd4>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x98>
 8001ff6:	4b82      	ldr	r3, [pc, #520]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a81      	ldr	r2, [pc, #516]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8001ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	4b7f      	ldr	r3, [pc, #508]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a7e      	ldr	r2, [pc, #504]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8002008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e01d      	b.n	800204c <HAL_RCC_OscConfig+0xd4>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0xbc>
 800201a:	4b79      	ldr	r3, [pc, #484]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a78      	ldr	r2, [pc, #480]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8002020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b76      	ldr	r3, [pc, #472]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a75      	ldr	r2, [pc, #468]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e00b      	b.n	800204c <HAL_RCC_OscConfig+0xd4>
 8002034:	4b72      	ldr	r3, [pc, #456]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a71      	ldr	r2, [pc, #452]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 800203a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b6f      	ldr	r3, [pc, #444]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a6e      	ldr	r2, [pc, #440]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8002046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d013      	beq.n	800207c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7ff fc6e 	bl	8001934 <HAL_GetTick>
 8002058:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800205c:	f7ff fc6a 	bl	8001934 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e38d      	b.n	800278a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800206e:	4b64      	ldr	r3, [pc, #400]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0xe4>
 800207a:	e014      	b.n	80020a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7ff fc5a 	bl	8001934 <HAL_GetTick>
 8002080:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002084:	f7ff fc56 	bl	8001934 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e379      	b.n	800278a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002096:	4b5a      	ldr	r3, [pc, #360]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x10c>
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80ae 	beq.w	8002210 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b4:	4b52      	ldr	r3, [pc, #328]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020be:	4b50      	ldr	r3, [pc, #320]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d007      	beq.n	80020da <HAL_RCC_OscConfig+0x162>
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	2b18      	cmp	r3, #24
 80020ce:	d13a      	bne.n	8002146 <HAL_RCC_OscConfig+0x1ce>
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d135      	bne.n	8002146 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020da:	4b49      	ldr	r3, [pc, #292]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <HAL_RCC_OscConfig+0x17a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e34b      	b.n	800278a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f2:	f7ff fc4f 	bl	8001994 <HAL_GetREVID>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d817      	bhi.n	8002130 <HAL_RCC_OscConfig+0x1b8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b40      	cmp	r3, #64	; 0x40
 8002106:	d108      	bne.n	800211a <HAL_RCC_OscConfig+0x1a2>
 8002108:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002110:	4a3b      	ldr	r2, [pc, #236]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8002112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002116:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002118:	e07a      	b.n	8002210 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211a:	4b39      	ldr	r3, [pc, #228]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	031b      	lsls	r3, r3, #12
 8002128:	4935      	ldr	r1, [pc, #212]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800212e:	e06f      	b.n	8002210 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002130:	4b33      	ldr	r3, [pc, #204]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	061b      	lsls	r3, r3, #24
 800213e:	4930      	ldr	r1, [pc, #192]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8002140:	4313      	orrs	r3, r2
 8002142:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002144:	e064      	b.n	8002210 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d045      	beq.n	80021da <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800214e:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 0219 	bic.w	r2, r3, #25
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	4929      	ldr	r1, [pc, #164]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 800215c:	4313      	orrs	r3, r2
 800215e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7ff fbe8 	bl	8001934 <HAL_GetTick>
 8002164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002168:	f7ff fbe4 	bl	8001934 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e307      	b.n	800278a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800217a:	4b21      	ldr	r3, [pc, #132]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002186:	f7ff fc05 	bl	8001994 <HAL_GetREVID>
 800218a:	4603      	mov	r3, r0
 800218c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002190:	4293      	cmp	r3, r2
 8002192:	d817      	bhi.n	80021c4 <HAL_RCC_OscConfig+0x24c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b40      	cmp	r3, #64	; 0x40
 800219a:	d108      	bne.n	80021ae <HAL_RCC_OscConfig+0x236>
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80021a4:	4a16      	ldr	r2, [pc, #88]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 80021a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021aa:	6053      	str	r3, [r2, #4]
 80021ac:	e030      	b.n	8002210 <HAL_RCC_OscConfig+0x298>
 80021ae:	4b14      	ldr	r3, [pc, #80]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	031b      	lsls	r3, r3, #12
 80021bc:	4910      	ldr	r1, [pc, #64]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
 80021c2:	e025      	b.n	8002210 <HAL_RCC_OscConfig+0x298>
 80021c4:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	061b      	lsls	r3, r3, #24
 80021d2:	490b      	ldr	r1, [pc, #44]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]
 80021d8:	e01a      	b.n	8002210 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a08      	ldr	r2, [pc, #32]	; (8002200 <HAL_RCC_OscConfig+0x288>)
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7ff fba5 	bl	8001934 <HAL_GetTick>
 80021ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ee:	f7ff fba1 	bl	8001934 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d903      	bls.n	8002204 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e2c4      	b.n	800278a <HAL_RCC_OscConfig+0x812>
 8002200:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002204:	4ba4      	ldr	r3, [pc, #656]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1ee      	bne.n	80021ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80a9 	beq.w	8002370 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800221e:	4b9e      	ldr	r3, [pc, #632]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002226:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002228:	4b9b      	ldr	r3, [pc, #620]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	2b08      	cmp	r3, #8
 8002232:	d007      	beq.n	8002244 <HAL_RCC_OscConfig+0x2cc>
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b18      	cmp	r3, #24
 8002238:	d13a      	bne.n	80022b0 <HAL_RCC_OscConfig+0x338>
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d135      	bne.n	80022b0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002244:	4b94      	ldr	r3, [pc, #592]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_RCC_OscConfig+0x2e4>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	2b80      	cmp	r3, #128	; 0x80
 8002256:	d001      	beq.n	800225c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e296      	b.n	800278a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800225c:	f7ff fb9a 	bl	8001994 <HAL_GetREVID>
 8002260:	4603      	mov	r3, r0
 8002262:	f241 0203 	movw	r2, #4099	; 0x1003
 8002266:	4293      	cmp	r3, r2
 8002268:	d817      	bhi.n	800229a <HAL_RCC_OscConfig+0x322>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	2b20      	cmp	r3, #32
 8002270:	d108      	bne.n	8002284 <HAL_RCC_OscConfig+0x30c>
 8002272:	4b89      	ldr	r3, [pc, #548]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800227a:	4a87      	ldr	r2, [pc, #540]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 800227c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002280:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002282:	e075      	b.n	8002370 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002284:	4b84      	ldr	r3, [pc, #528]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	069b      	lsls	r3, r3, #26
 8002292:	4981      	ldr	r1, [pc, #516]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002298:	e06a      	b.n	8002370 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800229a:	4b7f      	ldr	r3, [pc, #508]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	061b      	lsls	r3, r3, #24
 80022a8:	497b      	ldr	r1, [pc, #492]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022ae:	e05f      	b.n	8002370 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d042      	beq.n	800233e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80022b8:	4b77      	ldr	r3, [pc, #476]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a76      	ldr	r2, [pc, #472]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 80022be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7ff fb36 	bl	8001934 <HAL_GetTick>
 80022c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80022cc:	f7ff fb32 	bl	8001934 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e255      	b.n	800278a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022de:	4b6e      	ldr	r3, [pc, #440]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022ea:	f7ff fb53 	bl	8001994 <HAL_GetREVID>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d817      	bhi.n	8002328 <HAL_RCC_OscConfig+0x3b0>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d108      	bne.n	8002312 <HAL_RCC_OscConfig+0x39a>
 8002300:	4b65      	ldr	r3, [pc, #404]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002308:	4a63      	ldr	r2, [pc, #396]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 800230a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800230e:	6053      	str	r3, [r2, #4]
 8002310:	e02e      	b.n	8002370 <HAL_RCC_OscConfig+0x3f8>
 8002312:	4b61      	ldr	r3, [pc, #388]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	069b      	lsls	r3, r3, #26
 8002320:	495d      	ldr	r1, [pc, #372]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002322:	4313      	orrs	r3, r2
 8002324:	604b      	str	r3, [r1, #4]
 8002326:	e023      	b.n	8002370 <HAL_RCC_OscConfig+0x3f8>
 8002328:	4b5b      	ldr	r3, [pc, #364]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	061b      	lsls	r3, r3, #24
 8002336:	4958      	ldr	r1, [pc, #352]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002338:	4313      	orrs	r3, r2
 800233a:	60cb      	str	r3, [r1, #12]
 800233c:	e018      	b.n	8002370 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800233e:	4b56      	ldr	r3, [pc, #344]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a55      	ldr	r2, [pc, #340]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234a:	f7ff faf3 	bl	8001934 <HAL_GetTick>
 800234e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002352:	f7ff faef 	bl	8001934 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e212      	b.n	800278a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002364:	4b4c      	ldr	r3, [pc, #304]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f0      	bne.n	8002352 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b00      	cmp	r3, #0
 800237a:	d036      	beq.n	80023ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d019      	beq.n	80023b8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002384:	4b44      	ldr	r3, [pc, #272]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002388:	4a43      	ldr	r2, [pc, #268]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002390:	f7ff fad0 	bl	8001934 <HAL_GetTick>
 8002394:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002398:	f7ff facc 	bl	8001934 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e1ef      	b.n	800278a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023aa:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 80023ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x420>
 80023b6:	e018      	b.n	80023ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b8:	4b37      	ldr	r3, [pc, #220]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 80023ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023bc:	4a36      	ldr	r2, [pc, #216]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c4:	f7ff fab6 	bl	8001934 <HAL_GetTick>
 80023c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023cc:	f7ff fab2 	bl	8001934 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1d5      	b.n	800278a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023de:	4b2e      	ldr	r3, [pc, #184]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 80023e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0320 	and.w	r3, r3, #32
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d036      	beq.n	8002464 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d019      	beq.n	8002432 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023fe:	4b26      	ldr	r3, [pc, #152]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a25      	ldr	r2, [pc, #148]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002404:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002408:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800240a:	f7ff fa93 	bl	8001934 <HAL_GetTick>
 800240e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002412:	f7ff fa8f 	bl	8001934 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e1b2      	b.n	800278a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002424:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x49a>
 8002430:	e018      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002432:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a18      	ldr	r2, [pc, #96]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 8002438:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800243c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800243e:	f7ff fa79 	bl	8001934 <HAL_GetTick>
 8002442:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002446:	f7ff fa75 	bl	8001934 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e198      	b.n	800278a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002458:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <HAL_RCC_OscConfig+0x520>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8085 	beq.w	800257c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <HAL_RCC_OscConfig+0x524>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a09      	ldr	r2, [pc, #36]	; (800249c <HAL_RCC_OscConfig+0x524>)
 8002478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800247e:	f7ff fa59 	bl	8001934 <HAL_GetTick>
 8002482:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002484:	e00c      	b.n	80024a0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002486:	f7ff fa55 	bl	8001934 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b64      	cmp	r3, #100	; 0x64
 8002492:	d905      	bls.n	80024a0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e178      	b.n	800278a <HAL_RCC_OscConfig+0x812>
 8002498:	58024400 	.word	0x58024400
 800249c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024a0:	4b96      	ldr	r3, [pc, #600]	; (80026fc <HAL_RCC_OscConfig+0x784>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ec      	beq.n	8002486 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x54a>
 80024b4:	4b92      	ldr	r3, [pc, #584]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	4a91      	ldr	r2, [pc, #580]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6713      	str	r3, [r2, #112]	; 0x70
 80024c0:	e02d      	b.n	800251e <HAL_RCC_OscConfig+0x5a6>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCC_OscConfig+0x56c>
 80024ca:	4b8d      	ldr	r3, [pc, #564]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ce:	4a8c      	ldr	r2, [pc, #560]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80024d0:	f023 0301 	bic.w	r3, r3, #1
 80024d4:	6713      	str	r3, [r2, #112]	; 0x70
 80024d6:	4b8a      	ldr	r3, [pc, #552]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024da:	4a89      	ldr	r2, [pc, #548]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80024dc:	f023 0304 	bic.w	r3, r3, #4
 80024e0:	6713      	str	r3, [r2, #112]	; 0x70
 80024e2:	e01c      	b.n	800251e <HAL_RCC_OscConfig+0x5a6>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	2b05      	cmp	r3, #5
 80024ea:	d10c      	bne.n	8002506 <HAL_RCC_OscConfig+0x58e>
 80024ec:	4b84      	ldr	r3, [pc, #528]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80024ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f0:	4a83      	ldr	r2, [pc, #524]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80024f2:	f043 0304 	orr.w	r3, r3, #4
 80024f6:	6713      	str	r3, [r2, #112]	; 0x70
 80024f8:	4b81      	ldr	r3, [pc, #516]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	4a80      	ldr	r2, [pc, #512]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6713      	str	r3, [r2, #112]	; 0x70
 8002504:	e00b      	b.n	800251e <HAL_RCC_OscConfig+0x5a6>
 8002506:	4b7e      	ldr	r3, [pc, #504]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	4a7d      	ldr	r2, [pc, #500]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	6713      	str	r3, [r2, #112]	; 0x70
 8002512:	4b7b      	ldr	r3, [pc, #492]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002516:	4a7a      	ldr	r2, [pc, #488]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 8002518:	f023 0304 	bic.w	r3, r3, #4
 800251c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d015      	beq.n	8002552 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002526:	f7ff fa05 	bl	8001934 <HAL_GetTick>
 800252a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800252c:	e00a      	b.n	8002544 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7ff fa01 	bl	8001934 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	; 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e122      	b.n	800278a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002544:	4b6e      	ldr	r3, [pc, #440]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 8002546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0ee      	beq.n	800252e <HAL_RCC_OscConfig+0x5b6>
 8002550:	e014      	b.n	800257c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002552:	f7ff f9ef 	bl	8001934 <HAL_GetTick>
 8002556:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800255a:	f7ff f9eb 	bl	8001934 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f241 3288 	movw	r2, #5000	; 0x1388
 8002568:	4293      	cmp	r3, r2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e10c      	b.n	800278a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002570:	4b63      	ldr	r3, [pc, #396]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1ee      	bne.n	800255a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 8101 	beq.w	8002788 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002586:	4b5e      	ldr	r3, [pc, #376]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800258e:	2b18      	cmp	r3, #24
 8002590:	f000 80bc 	beq.w	800270c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	2b02      	cmp	r3, #2
 800259a:	f040 8095 	bne.w	80026c8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b58      	ldr	r3, [pc, #352]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a57      	ldr	r2, [pc, #348]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80025a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7ff f9c3 	bl	8001934 <HAL_GetTick>
 80025ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b2:	f7ff f9bf 	bl	8001934 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e0e2      	b.n	800278a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025c4:	4b4e      	ldr	r3, [pc, #312]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f0      	bne.n	80025b2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d0:	4b4b      	ldr	r3, [pc, #300]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80025d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025d4:	4b4b      	ldr	r3, [pc, #300]	; (8002704 <HAL_RCC_OscConfig+0x78c>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	430a      	orrs	r2, r1
 80025e4:	4946      	ldr	r1, [pc, #280]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	628b      	str	r3, [r1, #40]	; 0x28
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f8:	3b01      	subs	r3, #1
 80025fa:	025b      	lsls	r3, r3, #9
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002604:	3b01      	subs	r3, #1
 8002606:	041b      	lsls	r3, r3, #16
 8002608:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002612:	3b01      	subs	r3, #1
 8002614:	061b      	lsls	r3, r3, #24
 8002616:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800261a:	4939      	ldr	r1, [pc, #228]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 800261c:	4313      	orrs	r3, r2
 800261e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002620:	4b37      	ldr	r3, [pc, #220]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	4a36      	ldr	r2, [pc, #216]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 8002626:	f023 0301 	bic.w	r3, r3, #1
 800262a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800262c:	4b34      	ldr	r3, [pc, #208]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 800262e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002630:	4b35      	ldr	r3, [pc, #212]	; (8002708 <HAL_RCC_OscConfig+0x790>)
 8002632:	4013      	ands	r3, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002638:	00d2      	lsls	r2, r2, #3
 800263a:	4931      	ldr	r1, [pc, #196]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 800263c:	4313      	orrs	r3, r2
 800263e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002640:	4b2f      	ldr	r3, [pc, #188]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	f023 020c 	bic.w	r2, r3, #12
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	492c      	ldr	r1, [pc, #176]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 800264e:	4313      	orrs	r3, r2
 8002650:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002652:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	f023 0202 	bic.w	r2, r3, #2
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4928      	ldr	r1, [pc, #160]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 8002660:	4313      	orrs	r3, r2
 8002662:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002664:	4b26      	ldr	r3, [pc, #152]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	4a25      	ldr	r2, [pc, #148]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 800266a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002670:	4b23      	ldr	r3, [pc, #140]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	4a22      	ldr	r2, [pc, #136]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 8002676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800267c:	4b20      	ldr	r3, [pc, #128]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	4a1f      	ldr	r2, [pc, #124]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 8002682:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002686:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002688:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002694:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a19      	ldr	r2, [pc, #100]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 800269a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800269e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7ff f948 	bl	8001934 <HAL_GetTick>
 80026a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a8:	f7ff f944 	bl	8001934 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e067      	b.n	800278a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x730>
 80026c6:	e05f      	b.n	8002788 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c8:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80026ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7ff f92e 	bl	8001934 <HAL_GetTick>
 80026d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026dc:	f7ff f92a 	bl	8001934 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e04d      	b.n	800278a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026ee:	4b04      	ldr	r3, [pc, #16]	; (8002700 <HAL_RCC_OscConfig+0x788>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x764>
 80026fa:	e045      	b.n	8002788 <HAL_RCC_OscConfig+0x810>
 80026fc:	58024800 	.word	0x58024800
 8002700:	58024400 	.word	0x58024400
 8002704:	fffffc0c 	.word	0xfffffc0c
 8002708:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800270c:	4b21      	ldr	r3, [pc, #132]	; (8002794 <HAL_RCC_OscConfig+0x81c>)
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002712:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_RCC_OscConfig+0x81c>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	2b01      	cmp	r3, #1
 800271e:	d031      	beq.n	8002784 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f003 0203 	and.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d12a      	bne.n	8002784 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d122      	bne.n	8002784 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800274a:	429a      	cmp	r2, r3
 800274c:	d11a      	bne.n	8002784 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	0a5b      	lsrs	r3, r3, #9
 8002752:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d111      	bne.n	8002784 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	0c1b      	lsrs	r3, r3, #16
 8002764:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d108      	bne.n	8002784 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	0e1b      	lsrs	r3, r3, #24
 8002776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3730      	adds	r7, #48	; 0x30
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	58024400 	.word	0x58024400

08002798 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e19c      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027ac:	4b8a      	ldr	r3, [pc, #552]	; (80029d8 <HAL_RCC_ClockConfig+0x240>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 030f 	and.w	r3, r3, #15
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d910      	bls.n	80027dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ba:	4b87      	ldr	r3, [pc, #540]	; (80029d8 <HAL_RCC_ClockConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 020f 	bic.w	r2, r3, #15
 80027c2:	4985      	ldr	r1, [pc, #532]	; (80029d8 <HAL_RCC_ClockConfig+0x240>)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ca:	4b83      	ldr	r3, [pc, #524]	; (80029d8 <HAL_RCC_ClockConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e184      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d010      	beq.n	800280a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	4b7b      	ldr	r3, [pc, #492]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d908      	bls.n	800280a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027f8:	4b78      	ldr	r3, [pc, #480]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	4975      	ldr	r1, [pc, #468]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 8002806:	4313      	orrs	r3, r2
 8002808:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d010      	beq.n	8002838 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	4b70      	ldr	r3, [pc, #448]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002822:	429a      	cmp	r2, r3
 8002824:	d908      	bls.n	8002838 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002826:	4b6d      	ldr	r3, [pc, #436]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	496a      	ldr	r1, [pc, #424]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 8002834:	4313      	orrs	r3, r2
 8002836:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	d010      	beq.n	8002866 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	4b64      	ldr	r3, [pc, #400]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002850:	429a      	cmp	r2, r3
 8002852:	d908      	bls.n	8002866 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002854:	4b61      	ldr	r3, [pc, #388]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	495e      	ldr	r1, [pc, #376]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 8002862:	4313      	orrs	r3, r2
 8002864:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b00      	cmp	r3, #0
 8002870:	d010      	beq.n	8002894 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69da      	ldr	r2, [r3, #28]
 8002876:	4b59      	ldr	r3, [pc, #356]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800287e:	429a      	cmp	r2, r3
 8002880:	d908      	bls.n	8002894 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002882:	4b56      	ldr	r3, [pc, #344]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	4953      	ldr	r1, [pc, #332]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 8002890:	4313      	orrs	r3, r2
 8002892:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d010      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	4b4d      	ldr	r3, [pc, #308]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d908      	bls.n	80028c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b0:	4b4a      	ldr	r3, [pc, #296]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f023 020f 	bic.w	r2, r3, #15
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	4947      	ldr	r1, [pc, #284]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d055      	beq.n	800297a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80028ce:	4b43      	ldr	r3, [pc, #268]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4940      	ldr	r1, [pc, #256]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d107      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028e8:	4b3c      	ldr	r3, [pc, #240]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d121      	bne.n	8002938 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0f6      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002900:	4b36      	ldr	r3, [pc, #216]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d115      	bne.n	8002938 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0ea      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d107      	bne.n	8002928 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002918:	4b30      	ldr	r3, [pc, #192]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0de      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002928:	4b2c      	ldr	r3, [pc, #176]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0d6      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002938:	4b28      	ldr	r3, [pc, #160]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f023 0207 	bic.w	r2, r3, #7
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4925      	ldr	r1, [pc, #148]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 8002946:	4313      	orrs	r3, r2
 8002948:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294a:	f7fe fff3 	bl	8001934 <HAL_GetTick>
 800294e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002950:	e00a      	b.n	8002968 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002952:	f7fe ffef 	bl	8001934 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e0be      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002968:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	429a      	cmp	r2, r3
 8002978:	d1eb      	bne.n	8002952 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d010      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	429a      	cmp	r2, r3
 8002994:	d208      	bcs.n	80029a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f023 020f 	bic.w	r2, r3, #15
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	490e      	ldr	r1, [pc, #56]	; (80029dc <HAL_RCC_ClockConfig+0x244>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_ClockConfig+0x240>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d214      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_RCC_ClockConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 020f 	bic.w	r2, r3, #15
 80029be:	4906      	ldr	r1, [pc, #24]	; (80029d8 <HAL_RCC_ClockConfig+0x240>)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <HAL_RCC_ClockConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e086      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x34e>
 80029d8:	52002000 	.word	0x52002000
 80029dc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d010      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <HAL_RCC_ClockConfig+0x358>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d208      	bcs.n	8002a0e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029fc:	4b3c      	ldr	r3, [pc, #240]	; (8002af0 <HAL_RCC_ClockConfig+0x358>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	4939      	ldr	r1, [pc, #228]	; (8002af0 <HAL_RCC_ClockConfig+0x358>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d010      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	4b34      	ldr	r3, [pc, #208]	; (8002af0 <HAL_RCC_ClockConfig+0x358>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d208      	bcs.n	8002a3c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a2a:	4b31      	ldr	r3, [pc, #196]	; (8002af0 <HAL_RCC_ClockConfig+0x358>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	492e      	ldr	r1, [pc, #184]	; (8002af0 <HAL_RCC_ClockConfig+0x358>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d010      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699a      	ldr	r2, [r3, #24]
 8002a4c:	4b28      	ldr	r3, [pc, #160]	; (8002af0 <HAL_RCC_ClockConfig+0x358>)
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d208      	bcs.n	8002a6a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a58:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <HAL_RCC_ClockConfig+0x358>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	4922      	ldr	r1, [pc, #136]	; (8002af0 <HAL_RCC_ClockConfig+0x358>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d010      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69da      	ldr	r2, [r3, #28]
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_RCC_ClockConfig+0x358>)
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d208      	bcs.n	8002a98 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a86:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <HAL_RCC_ClockConfig+0x358>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	4917      	ldr	r1, [pc, #92]	; (8002af0 <HAL_RCC_ClockConfig+0x358>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a98:	f000 f834 	bl	8002b04 <HAL_RCC_GetSysClockFreq>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <HAL_RCC_ClockConfig+0x358>)
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	4912      	ldr	r1, [pc, #72]	; (8002af4 <HAL_RCC_ClockConfig+0x35c>)
 8002aaa:	5ccb      	ldrb	r3, [r1, r3]
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_RCC_ClockConfig+0x358>)
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	4a0d      	ldr	r2, [pc, #52]	; (8002af4 <HAL_RCC_ClockConfig+0x35c>)
 8002ac0:	5cd3      	ldrb	r3, [r2, r3]
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8002acc:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <HAL_RCC_ClockConfig+0x360>)
 8002ace:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ad0:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <HAL_RCC_ClockConfig+0x364>)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <HAL_RCC_ClockConfig+0x368>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe fee0 	bl	80018a0 <HAL_InitTick>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	58024400 	.word	0x58024400
 8002af4:	08006cf8 	.word	0x08006cf8
 8002af8:	24000014 	.word	0x24000014
 8002afc:	24000010 	.word	0x24000010
 8002b00:	24000018 	.word	0x24000018

08002b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	; 0x24
 8002b08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b0a:	4bb3      	ldr	r3, [pc, #716]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b12:	2b18      	cmp	r3, #24
 8002b14:	f200 8155 	bhi.w	8002dc2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002b18:	a201      	add	r2, pc, #4	; (adr r2, 8002b20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1e:	bf00      	nop
 8002b20:	08002b85 	.word	0x08002b85
 8002b24:	08002dc3 	.word	0x08002dc3
 8002b28:	08002dc3 	.word	0x08002dc3
 8002b2c:	08002dc3 	.word	0x08002dc3
 8002b30:	08002dc3 	.word	0x08002dc3
 8002b34:	08002dc3 	.word	0x08002dc3
 8002b38:	08002dc3 	.word	0x08002dc3
 8002b3c:	08002dc3 	.word	0x08002dc3
 8002b40:	08002bab 	.word	0x08002bab
 8002b44:	08002dc3 	.word	0x08002dc3
 8002b48:	08002dc3 	.word	0x08002dc3
 8002b4c:	08002dc3 	.word	0x08002dc3
 8002b50:	08002dc3 	.word	0x08002dc3
 8002b54:	08002dc3 	.word	0x08002dc3
 8002b58:	08002dc3 	.word	0x08002dc3
 8002b5c:	08002dc3 	.word	0x08002dc3
 8002b60:	08002bb1 	.word	0x08002bb1
 8002b64:	08002dc3 	.word	0x08002dc3
 8002b68:	08002dc3 	.word	0x08002dc3
 8002b6c:	08002dc3 	.word	0x08002dc3
 8002b70:	08002dc3 	.word	0x08002dc3
 8002b74:	08002dc3 	.word	0x08002dc3
 8002b78:	08002dc3 	.word	0x08002dc3
 8002b7c:	08002dc3 	.word	0x08002dc3
 8002b80:	08002bb7 	.word	0x08002bb7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b84:	4b94      	ldr	r3, [pc, #592]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d009      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b90:	4b91      	ldr	r3, [pc, #580]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	08db      	lsrs	r3, r3, #3
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	4a90      	ldr	r2, [pc, #576]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002ba2:	e111      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ba4:	4b8d      	ldr	r3, [pc, #564]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ba6:	61bb      	str	r3, [r7, #24]
    break;
 8002ba8:	e10e      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002baa:	4b8d      	ldr	r3, [pc, #564]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002bac:	61bb      	str	r3, [r7, #24]
    break;
 8002bae:	e10b      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002bb0:	4b8c      	ldr	r3, [pc, #560]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002bb2:	61bb      	str	r3, [r7, #24]
    break;
 8002bb4:	e108      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002bb6:	4b88      	ldr	r3, [pc, #544]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002bc0:	4b85      	ldr	r3, [pc, #532]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002bcc:	4b82      	ldr	r3, [pc, #520]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002bd6:	4b80      	ldr	r3, [pc, #512]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bda:	08db      	lsrs	r3, r3, #3
 8002bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	ee07 3a90 	vmov	s15, r3
 8002bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80e1 	beq.w	8002dbc <HAL_RCC_GetSysClockFreq+0x2b8>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	f000 8083 	beq.w	8002d08 <HAL_RCC_GetSysClockFreq+0x204>
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	f200 80a1 	bhi.w	8002d4c <HAL_RCC_GetSysClockFreq+0x248>
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x114>
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d056      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002c16:	e099      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c18:	4b6f      	ldr	r3, [pc, #444]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d02d      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c24:	4b6c      	ldr	r3, [pc, #432]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	08db      	lsrs	r3, r3, #3
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	4a6b      	ldr	r2, [pc, #428]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
 8002c34:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	ee07 3a90 	vmov	s15, r3
 8002c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c4e:	4b62      	ldr	r3, [pc, #392]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c56:	ee07 3a90 	vmov	s15, r3
 8002c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c62:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002c7e:	e087      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002dec <HAL_RCC_GetSysClockFreq+0x2e8>
 8002c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c92:	4b51      	ldr	r3, [pc, #324]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c9a:	ee07 3a90 	vmov	s15, r3
 8002c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ca2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ca6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002cc2:	e065      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cce:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002df0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cd6:	4b40      	ldr	r3, [pc, #256]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ce6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d06:	e043      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	ee07 3a90 	vmov	s15, r3
 8002d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d12:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002df4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d1a:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d2e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d4a:	e021      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	ee07 3a90 	vmov	s15, r3
 8002d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d56:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002df0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d5e:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d66:	ee07 3a90 	vmov	s15, r3
 8002d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d72:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d8e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	0a5b      	lsrs	r3, r3, #9
 8002d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	ee07 3a90 	vmov	s15, r3
 8002da4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002da8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002db4:	ee17 3a90 	vmov	r3, s15
 8002db8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002dba:	e005      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61bb      	str	r3, [r7, #24]
    break;
 8002dc0:	e002      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002dc2:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002dc4:	61bb      	str	r3, [r7, #24]
    break;
 8002dc6:	bf00      	nop
  }

  return sysclockfreq;
 8002dc8:	69bb      	ldr	r3, [r7, #24]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3724      	adds	r7, #36	; 0x24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	58024400 	.word	0x58024400
 8002ddc:	03d09000 	.word	0x03d09000
 8002de0:	003d0900 	.word	0x003d0900
 8002de4:	017d7840 	.word	0x017d7840
 8002de8:	46000000 	.word	0x46000000
 8002dec:	4c742400 	.word	0x4c742400
 8002df0:	4a742400 	.word	0x4a742400
 8002df4:	4bbebc20 	.word	0x4bbebc20

08002df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002dfe:	f7ff fe81 	bl	8002b04 <HAL_RCC_GetSysClockFreq>
 8002e02:	4602      	mov	r2, r0
 8002e04:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <HAL_RCC_GetHCLKFreq+0x50>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	0a1b      	lsrs	r3, r3, #8
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	490f      	ldr	r1, [pc, #60]	; (8002e4c <HAL_RCC_GetHCLKFreq+0x54>)
 8002e10:	5ccb      	ldrb	r3, [r1, r3]
 8002e12:	f003 031f 	and.w	r3, r3, #31
 8002e16:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_RCC_GetHCLKFreq+0x50>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	4a09      	ldr	r2, [pc, #36]	; (8002e4c <HAL_RCC_GetHCLKFreq+0x54>)
 8002e26:	5cd3      	ldrb	r3, [r2, r3]
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e32:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <HAL_RCC_GetHCLKFreq+0x58>)
 8002e34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e36:	4a07      	ldr	r2, [pc, #28]	; (8002e54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <HAL_RCC_GetHCLKFreq+0x58>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	58024400 	.word	0x58024400
 8002e4c:	08006cf8 	.word	0x08006cf8
 8002e50:	24000014 	.word	0x24000014
 8002e54:	24000010 	.word	0x24000010

08002e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002e5c:	f7ff ffcc 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e60:	4602      	mov	r2, r0
 8002e62:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	4904      	ldr	r1, [pc, #16]	; (8002e80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e6e:	5ccb      	ldrb	r3, [r1, r3]
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	58024400 	.word	0x58024400
 8002e80:	08006cf8 	.word	0x08006cf8

08002e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002e88:	f7ff ffb6 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	4904      	ldr	r1, [pc, #16]	; (8002eac <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e9a:	5ccb      	ldrb	r3, [r1, r3]
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	58024400 	.word	0x58024400
 8002eac:	08006cf8 	.word	0x08006cf8

08002eb0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002eb8:	2300      	movs	r3, #0
 8002eba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d03f      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ed0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ed4:	d02a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ed6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002eda:	d824      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002edc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ee0:	d018      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ee2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ee6:	d81e      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002eec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ef0:	d007      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ef2:	e018      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ef4:	4bab      	ldr	r3, [pc, #684]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	4aaa      	ldr	r2, [pc, #680]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002efe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002f00:	e015      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3304      	adds	r3, #4
 8002f06:	2102      	movs	r1, #2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f001 f9bf 	bl	800428c <RCCEx_PLL2_Config>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002f12:	e00c      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3324      	adds	r3, #36	; 0x24
 8002f18:	2102      	movs	r1, #2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 fa68 	bl	80043f0 <RCCEx_PLL3_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002f24:	e003      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	75fb      	strb	r3, [r7, #23]
      break;
 8002f2a:	e000      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f2e:	7dfb      	ldrb	r3, [r7, #23]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d109      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002f34:	4b9b      	ldr	r3, [pc, #620]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f40:	4998      	ldr	r1, [pc, #608]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	650b      	str	r3, [r1, #80]	; 0x50
 8002f46:	e001      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d03d      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d826      	bhi.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f60:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002f7d 	.word	0x08002f7d
 8002f6c:	08002f8b 	.word	0x08002f8b
 8002f70:	08002f9d 	.word	0x08002f9d
 8002f74:	08002fb5 	.word	0x08002fb5
 8002f78:	08002fb5 	.word	0x08002fb5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f7c:	4b89      	ldr	r3, [pc, #548]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	4a88      	ldr	r2, [pc, #544]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f88:	e015      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f001 f97b 	bl	800428c <RCCEx_PLL2_Config>
 8002f96:	4603      	mov	r3, r0
 8002f98:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f9a:	e00c      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3324      	adds	r3, #36	; 0x24
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f001 fa24 	bl	80043f0 <RCCEx_PLL3_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fac:	e003      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb6:	7dfb      	ldrb	r3, [r7, #23]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fbc:	4b79      	ldr	r3, [pc, #484]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc0:	f023 0207 	bic.w	r2, r3, #7
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc8:	4976      	ldr	r1, [pc, #472]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	650b      	str	r3, [r1, #80]	; 0x50
 8002fce:	e001      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
 8002fd2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d042      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe8:	d02b      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fee:	d825      	bhi.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002ff0:	2bc0      	cmp	r3, #192	; 0xc0
 8002ff2:	d028      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002ff4:	2bc0      	cmp	r3, #192	; 0xc0
 8002ff6:	d821      	bhi.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002ff8:	2b80      	cmp	r3, #128	; 0x80
 8002ffa:	d016      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002ffc:	2b80      	cmp	r3, #128	; 0x80
 8002ffe:	d81d      	bhi.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003004:	2b40      	cmp	r3, #64	; 0x40
 8003006:	d007      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003008:	e018      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800300a:	4b66      	ldr	r3, [pc, #408]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	4a65      	ldr	r2, [pc, #404]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003014:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003016:	e017      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3304      	adds	r3, #4
 800301c:	2100      	movs	r1, #0
 800301e:	4618      	mov	r0, r3
 8003020:	f001 f934 	bl	800428c <RCCEx_PLL2_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003028:	e00e      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3324      	adds	r3, #36	; 0x24
 800302e:	2100      	movs	r1, #0
 8003030:	4618      	mov	r0, r3
 8003032:	f001 f9dd 	bl	80043f0 <RCCEx_PLL3_Config>
 8003036:	4603      	mov	r3, r0
 8003038:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800303a:	e005      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	75fb      	strb	r3, [r7, #23]
      break;
 8003040:	e002      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003042:	bf00      	nop
 8003044:	e000      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003046:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003048:	7dfb      	ldrb	r3, [r7, #23]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800304e:	4b55      	ldr	r3, [pc, #340]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003052:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	4952      	ldr	r1, [pc, #328]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800305c:	4313      	orrs	r3, r2
 800305e:	650b      	str	r3, [r1, #80]	; 0x50
 8003060:	e001      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003062:	7dfb      	ldrb	r3, [r7, #23]
 8003064:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306e:	2b00      	cmp	r3, #0
 8003070:	d049      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003078:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800307c:	d030      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800307e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003082:	d82a      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003084:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003088:	d02c      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800308a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800308e:	d824      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003094:	d018      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003096:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800309a:	d81e      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80030a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030a4:	d007      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80030a6:	e018      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030a8:	4b3e      	ldr	r3, [pc, #248]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	4a3d      	ldr	r2, [pc, #244]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030b4:	e017      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3304      	adds	r3, #4
 80030ba:	2100      	movs	r1, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	f001 f8e5 	bl	800428c <RCCEx_PLL2_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80030c6:	e00e      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3324      	adds	r3, #36	; 0x24
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f001 f98e 	bl	80043f0 <RCCEx_PLL3_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030d8:	e005      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	75fb      	strb	r3, [r7, #23]
      break;
 80030de:	e002      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80030e0:	bf00      	nop
 80030e2:	e000      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80030e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10a      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80030ec:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030fa:	492a      	ldr	r1, [pc, #168]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	658b      	str	r3, [r1, #88]	; 0x58
 8003100:	e001      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003102:	7dfb      	ldrb	r3, [r7, #23]
 8003104:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310e:	2b00      	cmp	r3, #0
 8003110:	d04c      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003118:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800311c:	d030      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800311e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003122:	d82a      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003124:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003128:	d02c      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800312a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800312e:	d824      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003134:	d018      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003136:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800313a:	d81e      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003144:	d007      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003146:	e018      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003148:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	4a15      	ldr	r2, [pc, #84]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800314e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003152:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003154:	e017      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3304      	adds	r3, #4
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f001 f895 	bl	800428c <RCCEx_PLL2_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003166:	e00e      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3324      	adds	r3, #36	; 0x24
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f001 f93e 	bl	80043f0 <RCCEx_PLL3_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003178:	e005      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	75fb      	strb	r3, [r7, #23]
      break;
 800317e:	e002      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003180:	bf00      	nop
 8003182:	e000      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003186:	7dfb      	ldrb	r3, [r7, #23]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10d      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800319a:	4902      	ldr	r1, [pc, #8]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800319c:	4313      	orrs	r3, r2
 800319e:	658b      	str	r3, [r1, #88]	; 0x58
 80031a0:	e004      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80031a2:	bf00      	nop
 80031a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d032      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031bc:	2b30      	cmp	r3, #48	; 0x30
 80031be:	d01c      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80031c0:	2b30      	cmp	r3, #48	; 0x30
 80031c2:	d817      	bhi.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d00c      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d813      	bhi.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d016      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80031d0:	2b10      	cmp	r3, #16
 80031d2:	d10f      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031d4:	4baf      	ldr	r3, [pc, #700]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	4aae      	ldr	r2, [pc, #696]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80031da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80031e0:	e00e      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3304      	adds	r3, #4
 80031e6:	2102      	movs	r1, #2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f001 f84f 	bl	800428c <RCCEx_PLL2_Config>
 80031ee:	4603      	mov	r3, r0
 80031f0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80031f2:	e005      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	75fb      	strb	r3, [r7, #23]
      break;
 80031f8:	e002      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80031fa:	bf00      	nop
 80031fc:	e000      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80031fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003200:	7dfb      	ldrb	r3, [r7, #23]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003206:	4ba3      	ldr	r3, [pc, #652]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003212:	49a0      	ldr	r1, [pc, #640]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003214:	4313      	orrs	r3, r2
 8003216:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003218:	e001      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321a:	7dfb      	ldrb	r3, [r7, #23]
 800321c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d047      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003232:	d030      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003238:	d82a      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800323a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800323e:	d02c      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003240:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003244:	d824      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324a:	d018      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800324c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003250:	d81e      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325a:	d007      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800325c:	e018      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800325e:	4b8d      	ldr	r3, [pc, #564]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	4a8c      	ldr	r2, [pc, #560]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003268:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800326a:	e017      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f001 f80a 	bl	800428c <RCCEx_PLL2_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800327c:	e00e      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3324      	adds	r3, #36	; 0x24
 8003282:	2100      	movs	r1, #0
 8003284:	4618      	mov	r0, r3
 8003286:	f001 f8b3 	bl	80043f0 <RCCEx_PLL3_Config>
 800328a:	4603      	mov	r3, r0
 800328c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800328e:	e005      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	75fb      	strb	r3, [r7, #23]
      break;
 8003294:	e002      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003296:	bf00      	nop
 8003298:	e000      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800329a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80032a2:	4b7c      	ldr	r3, [pc, #496]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80032a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ae:	4979      	ldr	r1, [pc, #484]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	650b      	str	r3, [r1, #80]	; 0x50
 80032b4:	e001      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b6:	7dfb      	ldrb	r3, [r7, #23]
 80032b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d049      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032ce:	d02e      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80032d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d4:	d828      	bhi.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80032d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032da:	d02a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80032dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032e0:	d822      	bhi.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80032e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032e6:	d026      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80032e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032ec:	d81c      	bhi.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80032ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032f2:	d010      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80032f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032f8:	d816      	bhi.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01d      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80032fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003302:	d111      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3304      	adds	r3, #4
 8003308:	2101      	movs	r1, #1
 800330a:	4618      	mov	r0, r3
 800330c:	f000 ffbe 	bl	800428c <RCCEx_PLL2_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003314:	e012      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3324      	adds	r3, #36	; 0x24
 800331a:	2101      	movs	r1, #1
 800331c:	4618      	mov	r0, r3
 800331e:	f001 f867 	bl	80043f0 <RCCEx_PLL3_Config>
 8003322:	4603      	mov	r3, r0
 8003324:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003326:	e009      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	75fb      	strb	r3, [r7, #23]
      break;
 800332c:	e006      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800332e:	bf00      	nop
 8003330:	e004      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003332:	bf00      	nop
 8003334:	e002      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003336:	bf00      	nop
 8003338:	e000      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800333a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d109      	bne.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003342:	4b54      	ldr	r3, [pc, #336]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003346:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	4951      	ldr	r1, [pc, #324]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003350:	4313      	orrs	r3, r2
 8003352:	650b      	str	r3, [r1, #80]	; 0x50
 8003354:	e001      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003356:	7dfb      	ldrb	r3, [r7, #23]
 8003358:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d04b      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800336c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003370:	d02e      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003372:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003376:	d828      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337c:	d02a      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800337e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003382:	d822      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003384:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003388:	d026      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800338a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800338e:	d81c      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003394:	d010      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800339a:	d816      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01d      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80033a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033a4:	d111      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3304      	adds	r3, #4
 80033aa:	2101      	movs	r1, #1
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 ff6d 	bl	800428c <RCCEx_PLL2_Config>
 80033b2:	4603      	mov	r3, r0
 80033b4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80033b6:	e012      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3324      	adds	r3, #36	; 0x24
 80033bc:	2101      	movs	r1, #1
 80033be:	4618      	mov	r0, r3
 80033c0:	f001 f816 	bl	80043f0 <RCCEx_PLL3_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80033c8:	e009      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
      break;
 80033ce:	e006      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80033d0:	bf00      	nop
 80033d2:	e004      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80033d4:	bf00      	nop
 80033d6:	e002      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80033d8:	bf00      	nop
 80033da:	e000      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80033dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033de:	7dfb      	ldrb	r3, [r7, #23]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80033e4:	4b2b      	ldr	r3, [pc, #172]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80033e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033f2:	4928      	ldr	r1, [pc, #160]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	658b      	str	r3, [r1, #88]	; 0x58
 80033f8:	e001      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
 80033fc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d02f      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800340e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003412:	d00e      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003418:	d814      	bhi.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d015      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800341e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003422:	d10f      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003424:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800342a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800342e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003430:	e00c      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3304      	adds	r3, #4
 8003436:	2101      	movs	r1, #1
 8003438:	4618      	mov	r0, r3
 800343a:	f000 ff27 	bl	800428c <RCCEx_PLL2_Config>
 800343e:	4603      	mov	r3, r0
 8003440:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003442:	e003      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	75fb      	strb	r3, [r7, #23]
      break;
 8003448:	e000      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800344a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003456:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800345e:	490d      	ldr	r1, [pc, #52]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003460:	4313      	orrs	r3, r2
 8003462:	650b      	str	r3, [r1, #80]	; 0x50
 8003464:	e001      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003466:	7dfb      	ldrb	r3, [r7, #23]
 8003468:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d033      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	2b03      	cmp	r3, #3
 800347c:	d81c      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800347e:	a201      	add	r2, pc, #4	; (adr r2, 8003484 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003484:	080034bf 	.word	0x080034bf
 8003488:	08003499 	.word	0x08003499
 800348c:	080034a7 	.word	0x080034a7
 8003490:	080034bf 	.word	0x080034bf
 8003494:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003498:	4bb8      	ldr	r3, [pc, #736]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	4ab7      	ldr	r2, [pc, #732]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800349e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80034a4:	e00c      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3304      	adds	r3, #4
 80034aa:	2102      	movs	r1, #2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 feed 	bl	800428c <RCCEx_PLL2_Config>
 80034b2:	4603      	mov	r3, r0
 80034b4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80034b6:	e003      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	75fb      	strb	r3, [r7, #23]
      break;
 80034bc:	e000      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80034be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034c0:	7dfb      	ldrb	r3, [r7, #23]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80034c6:	4bad      	ldr	r3, [pc, #692]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80034c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ca:	f023 0203 	bic.w	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	49aa      	ldr	r1, [pc, #680]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80034d8:	e001      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034da:	7dfb      	ldrb	r3, [r7, #23]
 80034dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 8086 	beq.w	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034ec:	4ba4      	ldr	r3, [pc, #656]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4aa3      	ldr	r2, [pc, #652]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80034f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034f8:	f7fe fa1c 	bl	8001934 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034fe:	e009      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003500:	f7fe fa18 	bl	8001934 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	; 0x64
 800350c:	d902      	bls.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	75fb      	strb	r3, [r7, #23]
        break;
 8003512:	e005      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003514:	4b9a      	ldr	r3, [pc, #616]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ef      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003520:	7dfb      	ldrb	r3, [r7, #23]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d166      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003526:	4b95      	ldr	r3, [pc, #596]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003528:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003530:	4053      	eors	r3, r2
 8003532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003536:	2b00      	cmp	r3, #0
 8003538:	d013      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800353a:	4b90      	ldr	r3, [pc, #576]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800353c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003542:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003544:	4b8d      	ldr	r3, [pc, #564]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003548:	4a8c      	ldr	r2, [pc, #560]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800354a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003550:	4b8a      	ldr	r3, [pc, #552]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003554:	4a89      	ldr	r2, [pc, #548]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800355a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800355c:	4a87      	ldr	r2, [pc, #540]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800356c:	d115      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356e:	f7fe f9e1 	bl	8001934 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003574:	e00b      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003576:	f7fe f9dd 	bl	8001934 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f241 3288 	movw	r2, #5000	; 0x1388
 8003584:	4293      	cmp	r3, r2
 8003586:	d902      	bls.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	75fb      	strb	r3, [r7, #23]
            break;
 800358c:	e005      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800358e:	4b7b      	ldr	r3, [pc, #492]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0ed      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800359a:	7dfb      	ldrb	r3, [r7, #23]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d126      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ae:	d10d      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80035b0:	4b72      	ldr	r3, [pc, #456]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035be:	0919      	lsrs	r1, r3, #4
 80035c0:	4b70      	ldr	r3, [pc, #448]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80035c2:	400b      	ands	r3, r1
 80035c4:	496d      	ldr	r1, [pc, #436]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	610b      	str	r3, [r1, #16]
 80035ca:	e005      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80035cc:	4b6b      	ldr	r3, [pc, #428]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	4a6a      	ldr	r2, [pc, #424]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80035d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80035d6:	6113      	str	r3, [r2, #16]
 80035d8:	4b68      	ldr	r3, [pc, #416]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80035da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e6:	4965      	ldr	r1, [pc, #404]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	670b      	str	r3, [r1, #112]	; 0x70
 80035ec:	e004      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035ee:	7dfb      	ldrb	r3, [r7, #23]
 80035f0:	75bb      	strb	r3, [r7, #22]
 80035f2:	e001      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f4:	7dfb      	ldrb	r3, [r7, #23]
 80035f6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d07e      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003608:	2b28      	cmp	r3, #40	; 0x28
 800360a:	d867      	bhi.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800360c:	a201      	add	r2, pc, #4	; (adr r2, 8003614 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800360e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003612:	bf00      	nop
 8003614:	080036e3 	.word	0x080036e3
 8003618:	080036dd 	.word	0x080036dd
 800361c:	080036dd 	.word	0x080036dd
 8003620:	080036dd 	.word	0x080036dd
 8003624:	080036dd 	.word	0x080036dd
 8003628:	080036dd 	.word	0x080036dd
 800362c:	080036dd 	.word	0x080036dd
 8003630:	080036dd 	.word	0x080036dd
 8003634:	080036b9 	.word	0x080036b9
 8003638:	080036dd 	.word	0x080036dd
 800363c:	080036dd 	.word	0x080036dd
 8003640:	080036dd 	.word	0x080036dd
 8003644:	080036dd 	.word	0x080036dd
 8003648:	080036dd 	.word	0x080036dd
 800364c:	080036dd 	.word	0x080036dd
 8003650:	080036dd 	.word	0x080036dd
 8003654:	080036cb 	.word	0x080036cb
 8003658:	080036dd 	.word	0x080036dd
 800365c:	080036dd 	.word	0x080036dd
 8003660:	080036dd 	.word	0x080036dd
 8003664:	080036dd 	.word	0x080036dd
 8003668:	080036dd 	.word	0x080036dd
 800366c:	080036dd 	.word	0x080036dd
 8003670:	080036dd 	.word	0x080036dd
 8003674:	080036e3 	.word	0x080036e3
 8003678:	080036dd 	.word	0x080036dd
 800367c:	080036dd 	.word	0x080036dd
 8003680:	080036dd 	.word	0x080036dd
 8003684:	080036dd 	.word	0x080036dd
 8003688:	080036dd 	.word	0x080036dd
 800368c:	080036dd 	.word	0x080036dd
 8003690:	080036dd 	.word	0x080036dd
 8003694:	080036e3 	.word	0x080036e3
 8003698:	080036dd 	.word	0x080036dd
 800369c:	080036dd 	.word	0x080036dd
 80036a0:	080036dd 	.word	0x080036dd
 80036a4:	080036dd 	.word	0x080036dd
 80036a8:	080036dd 	.word	0x080036dd
 80036ac:	080036dd 	.word	0x080036dd
 80036b0:	080036dd 	.word	0x080036dd
 80036b4:	080036e3 	.word	0x080036e3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3304      	adds	r3, #4
 80036bc:	2101      	movs	r1, #1
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fde4 	bl	800428c <RCCEx_PLL2_Config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80036c8:	e00c      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3324      	adds	r3, #36	; 0x24
 80036ce:	2101      	movs	r1, #1
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fe8d 	bl	80043f0 <RCCEx_PLL3_Config>
 80036d6:	4603      	mov	r3, r0
 80036d8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80036da:	e003      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	75fb      	strb	r3, [r7, #23]
      break;
 80036e0:	e000      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80036e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d109      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80036ea:	4b24      	ldr	r3, [pc, #144]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036f6:	4921      	ldr	r1, [pc, #132]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	654b      	str	r3, [r1, #84]	; 0x54
 80036fc:	e001      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d03e      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003712:	2b05      	cmp	r3, #5
 8003714:	d820      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003716:	a201      	add	r2, pc, #4	; (adr r2, 800371c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371c:	0800375f 	.word	0x0800375f
 8003720:	08003735 	.word	0x08003735
 8003724:	08003747 	.word	0x08003747
 8003728:	0800375f 	.word	0x0800375f
 800372c:	0800375f 	.word	0x0800375f
 8003730:	0800375f 	.word	0x0800375f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3304      	adds	r3, #4
 8003738:	2101      	movs	r1, #1
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fda6 	bl	800428c <RCCEx_PLL2_Config>
 8003740:	4603      	mov	r3, r0
 8003742:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003744:	e00c      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3324      	adds	r3, #36	; 0x24
 800374a:	2101      	movs	r1, #1
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fe4f 	bl	80043f0 <RCCEx_PLL3_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003756:	e003      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	75fb      	strb	r3, [r7, #23]
      break;
 800375c:	e000      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800375e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003760:	7dfb      	ldrb	r3, [r7, #23]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d110      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003766:	4b05      	ldr	r3, [pc, #20]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376a:	f023 0207 	bic.w	r2, r3, #7
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	4902      	ldr	r1, [pc, #8]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003774:	4313      	orrs	r3, r2
 8003776:	654b      	str	r3, [r1, #84]	; 0x54
 8003778:	e008      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800377a:	bf00      	nop
 800377c:	58024400 	.word	0x58024400
 8003780:	58024800 	.word	0x58024800
 8003784:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d039      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	2b05      	cmp	r3, #5
 80037a0:	d820      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80037a2:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037eb 	.word	0x080037eb
 80037ac:	080037c1 	.word	0x080037c1
 80037b0:	080037d3 	.word	0x080037d3
 80037b4:	080037eb 	.word	0x080037eb
 80037b8:	080037eb 	.word	0x080037eb
 80037bc:	080037eb 	.word	0x080037eb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3304      	adds	r3, #4
 80037c4:	2101      	movs	r1, #1
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fd60 	bl	800428c <RCCEx_PLL2_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80037d0:	e00c      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3324      	adds	r3, #36	; 0x24
 80037d6:	2101      	movs	r1, #1
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fe09 	bl	80043f0 <RCCEx_PLL3_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80037e2:	e003      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	75fb      	strb	r3, [r7, #23]
      break;
 80037e8:	e000      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80037ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ec:	7dfb      	ldrb	r3, [r7, #23]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037f2:	4bb7      	ldr	r3, [pc, #732]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80037f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f6:	f023 0207 	bic.w	r2, r3, #7
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003800:	49b3      	ldr	r1, [pc, #716]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003802:	4313      	orrs	r3, r2
 8003804:	658b      	str	r3, [r1, #88]	; 0x58
 8003806:	e001      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b00      	cmp	r3, #0
 8003816:	d04b      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800381e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003822:	d02e      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003828:	d828      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800382a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382e:	d02a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003834:	d822      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003836:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800383a:	d026      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800383c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003840:	d81c      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003846:	d010      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800384c:	d816      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800384e:	2b00      	cmp	r3, #0
 8003850:	d01d      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003856:	d111      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fd14 	bl	800428c <RCCEx_PLL2_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003868:	e012      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3324      	adds	r3, #36	; 0x24
 800386e:	2102      	movs	r1, #2
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fdbd 	bl	80043f0 <RCCEx_PLL3_Config>
 8003876:	4603      	mov	r3, r0
 8003878:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800387a:	e009      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	75fb      	strb	r3, [r7, #23]
      break;
 8003880:	e006      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003882:	bf00      	nop
 8003884:	e004      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003886:	bf00      	nop
 8003888:	e002      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800388a:	bf00      	nop
 800388c:	e000      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800388e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003890:	7dfb      	ldrb	r3, [r7, #23]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003896:	4b8e      	ldr	r3, [pc, #568]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a4:	498a      	ldr	r1, [pc, #552]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	654b      	str	r3, [r1, #84]	; 0x54
 80038aa:	e001      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d04b      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038c6:	d02e      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80038c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038cc:	d828      	bhi.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80038ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d2:	d02a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80038d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d8:	d822      	bhi.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80038da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038de:	d026      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80038e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038e4:	d81c      	bhi.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80038e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ea:	d010      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80038ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f0:	d816      	bhi.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d01d      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80038f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fa:	d111      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3304      	adds	r3, #4
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fcc2 	bl	800428c <RCCEx_PLL2_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800390c:	e012      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3324      	adds	r3, #36	; 0x24
 8003912:	2102      	movs	r1, #2
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fd6b 	bl	80043f0 <RCCEx_PLL3_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800391e:	e009      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	75fb      	strb	r3, [r7, #23]
      break;
 8003924:	e006      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003926:	bf00      	nop
 8003928:	e004      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800392a:	bf00      	nop
 800392c:	e002      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800392e:	bf00      	nop
 8003930:	e000      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003932:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003934:	7dfb      	ldrb	r3, [r7, #23]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800393a:	4b65      	ldr	r3, [pc, #404]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003948:	4961      	ldr	r1, [pc, #388]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800394a:	4313      	orrs	r3, r2
 800394c:	658b      	str	r3, [r1, #88]	; 0x58
 800394e:	e001      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395c:	2b00      	cmp	r3, #0
 800395e:	d04b      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003966:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800396a:	d02e      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800396c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003970:	d828      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003976:	d02a      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800397c:	d822      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800397e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003982:	d026      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003984:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003988:	d81c      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800398a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800398e:	d010      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003990:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003994:	d816      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d01d      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800399a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399e:	d111      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	2100      	movs	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fc70 	bl	800428c <RCCEx_PLL2_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80039b0:	e012      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3324      	adds	r3, #36	; 0x24
 80039b6:	2102      	movs	r1, #2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fd19 	bl	80043f0 <RCCEx_PLL3_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80039c2:	e009      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	75fb      	strb	r3, [r7, #23]
      break;
 80039c8:	e006      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80039ca:	bf00      	nop
 80039cc:	e004      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80039ce:	bf00      	nop
 80039d0:	e002      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80039d2:	bf00      	nop
 80039d4:	e000      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80039d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039d8:	7dfb      	ldrb	r3, [r7, #23]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80039de:	4b3c      	ldr	r3, [pc, #240]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039ec:	4938      	ldr	r1, [pc, #224]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	658b      	str	r3, [r1, #88]	; 0x58
 80039f2:	e001      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
 80039f6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01a      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0e:	d10a      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3324      	adds	r3, #36	; 0x24
 8003a14:	2102      	movs	r1, #2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fcea 	bl	80043f0 <RCCEx_PLL3_Config>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003a26:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a34:	4926      	ldr	r1, [pc, #152]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d01a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a50:	d10a      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3324      	adds	r3, #36	; 0x24
 8003a56:	2102      	movs	r1, #2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fcc9 	bl	80043f0 <RCCEx_PLL3_Config>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a68:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a76:	4916      	ldr	r1, [pc, #88]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d036      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a92:	d01f      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003a94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a98:	d817      	bhi.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa2:	d009      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003aa4:	e011      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fbed 	bl	800428c <RCCEx_PLL2_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ab6:	e00e      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3324      	adds	r3, #36	; 0x24
 8003abc:	2102      	movs	r1, #2
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fc96 	bl	80043f0 <RCCEx_PLL3_Config>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ac8:	e005      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	75fb      	strb	r3, [r7, #23]
      break;
 8003ace:	e002      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003ad0:	58024400 	.word	0x58024400
      break;
 8003ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10a      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003adc:	4b8b      	ldr	r3, [pc, #556]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003aea:	4988      	ldr	r1, [pc, #544]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	658b      	str	r3, [r1, #88]	; 0x58
 8003af0:	e001      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
 8003af4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d033      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b0c:	d01c      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003b0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b12:	d816      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b18:	d003      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003b1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b1e:	d007      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003b20:	e00f      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b22:	4b7a      	ldr	r3, [pc, #488]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	4a79      	ldr	r2, [pc, #484]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003b2e:	e00c      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3324      	adds	r3, #36	; 0x24
 8003b34:	2101      	movs	r1, #1
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fc5a 	bl	80043f0 <RCCEx_PLL3_Config>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003b40:	e003      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	75fb      	strb	r3, [r7, #23]
      break;
 8003b46:	e000      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b50:	4b6e      	ldr	r3, [pc, #440]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b5e:	496b      	ldr	r1, [pc, #428]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	654b      	str	r3, [r1, #84]	; 0x54
 8003b64:	e001      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
 8003b68:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d029      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8003b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b82:	d007      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003b84:	e00f      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b86:	4b61      	ldr	r3, [pc, #388]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	4a60      	ldr	r2, [pc, #384]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003b92:	e00b      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3304      	adds	r3, #4
 8003b98:	2102      	movs	r1, #2
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fb76 	bl	800428c <RCCEx_PLL2_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ba4:	e002      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8003baa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d109      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003bb2:	4b56      	ldr	r3, [pc, #344]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bbe:	4953      	ldr	r1, [pc, #332]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003bc4:	e001      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3324      	adds	r3, #36	; 0x24
 8003bda:	2102      	movs	r1, #2
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fc07 	bl	80043f0 <RCCEx_PLL3_Config>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d030      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c00:	d017      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003c02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c06:	d811      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c0c:	d013      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c12:	d80b      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d010      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1c:	d106      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c1e:	4b3b      	ldr	r3, [pc, #236]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	4a3a      	ldr	r2, [pc, #232]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003c2a:	e007      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c30:	e004      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003c32:	bf00      	nop
 8003c34:	e002      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c42:	4b32      	ldr	r3, [pc, #200]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c4e:	492f      	ldr	r1, [pc, #188]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	654b      	str	r3, [r1, #84]	; 0x54
 8003c54:	e001      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
 8003c58:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d008      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c66:	4b29      	ldr	r3, [pc, #164]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4926      	ldr	r1, [pc, #152]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d009      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003c84:	4b21      	ldr	r3, [pc, #132]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c92:	491e      	ldr	r1, [pc, #120]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ca4:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cb0:	4916      	ldr	r1, [pc, #88]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00d      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cc2:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	4a11      	ldr	r2, [pc, #68]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003cc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ccc:	6113      	str	r3, [r2, #16]
 8003cce:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003cd8:	490c      	ldr	r1, [pc, #48]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	da08      	bge.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ce6:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf2:	4906      	ldr	r1, [pc, #24]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003cf8:	7dbb      	ldrb	r3, [r7, #22]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e000      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xe54>
  }
  return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	58024400 	.word	0x58024400

08003d10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003d14:	f7ff f870 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	091b      	lsrs	r3, r3, #4
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	4904      	ldr	r1, [pc, #16]	; (8003d38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	58024400 	.word	0x58024400
 8003d38:	08006cf8 	.word	0x08006cf8

08003d3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b089      	sub	sp, #36	; 0x24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d44:	4ba1      	ldr	r3, [pc, #644]	; (8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003d4e:	4b9f      	ldr	r3, [pc, #636]	; (8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	0b1b      	lsrs	r3, r3, #12
 8003d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003d5a:	4b9c      	ldr	r3, [pc, #624]	; (8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	091b      	lsrs	r3, r3, #4
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003d66:	4b99      	ldr	r3, [pc, #612]	; (8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6a:	08db      	lsrs	r3, r3, #3
 8003d6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8111 	beq.w	8003fac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	f000 8083 	beq.w	8003e98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	f200 80a1 	bhi.w	8003edc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d056      	beq.n	8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003da6:	e099      	b.n	8003edc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003da8:	4b88      	ldr	r3, [pc, #544]	; (8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d02d      	beq.n	8003e10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003db4:	4b85      	ldr	r3, [pc, #532]	; (8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	08db      	lsrs	r3, r3, #3
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	4a84      	ldr	r2, [pc, #528]	; (8003fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	ee07 3a90 	vmov	s15, r3
 8003dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dde:	4b7b      	ldr	r3, [pc, #492]	; (8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003df2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003e0e:	e087      	b.n	8003f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e22:	4b6a      	ldr	r3, [pc, #424]	; (8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e36:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e52:	e065      	b.n	8003f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003fdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e66:	4b59      	ldr	r3, [pc, #356]	; (8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e96:	e043      	b.n	8003f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eaa:	4b48      	ldr	r3, [pc, #288]	; (8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb2:	ee07 3a90 	vmov	s15, r3
 8003eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ebe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003eda:	e021      	b.n	8003f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003fdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eee:	4b37      	ldr	r3, [pc, #220]	; (8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef6:	ee07 3a90 	vmov	s15, r3
 8003efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003f20:	4b2a      	ldr	r3, [pc, #168]	; (8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	0a5b      	lsrs	r3, r3, #9
 8003f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f46:	ee17 2a90 	vmov	r2, s15
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003f4e:	4b1f      	ldr	r3, [pc, #124]	; (8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	0c1b      	lsrs	r3, r3, #16
 8003f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f58:	ee07 3a90 	vmov	s15, r3
 8003f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f68:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f74:	ee17 2a90 	vmov	r2, s15
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003f7c:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	0e1b      	lsrs	r3, r3, #24
 8003f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f86:	ee07 3a90 	vmov	s15, r3
 8003f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f96:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fa2:	ee17 2a90 	vmov	r2, s15
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003faa:	e008      	b.n	8003fbe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	609a      	str	r2, [r3, #8]
}
 8003fbe:	bf00      	nop
 8003fc0:	3724      	adds	r7, #36	; 0x24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	58024400 	.word	0x58024400
 8003fd0:	03d09000 	.word	0x03d09000
 8003fd4:	46000000 	.word	0x46000000
 8003fd8:	4c742400 	.word	0x4c742400
 8003fdc:	4a742400 	.word	0x4a742400
 8003fe0:	4bbebc20 	.word	0x4bbebc20

08003fe4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b089      	sub	sp, #36	; 0x24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fec:	4ba1      	ldr	r3, [pc, #644]	; (8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	f003 0303 	and.w	r3, r3, #3
 8003ff4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003ff6:	4b9f      	ldr	r3, [pc, #636]	; (8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	0d1b      	lsrs	r3, r3, #20
 8003ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004000:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004002:	4b9c      	ldr	r3, [pc, #624]	; (8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	0a1b      	lsrs	r3, r3, #8
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800400e:	4b99      	ldr	r3, [pc, #612]	; (8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	08db      	lsrs	r3, r3, #3
 8004014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	fb02 f303 	mul.w	r3, r2, r3
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004026:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 8111 	beq.w	8004254 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2b02      	cmp	r3, #2
 8004036:	f000 8083 	beq.w	8004140 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	2b02      	cmp	r3, #2
 800403e:	f200 80a1 	bhi.w	8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d056      	beq.n	80040fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800404e:	e099      	b.n	8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004050:	4b88      	ldr	r3, [pc, #544]	; (8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0320 	and.w	r3, r3, #32
 8004058:	2b00      	cmp	r3, #0
 800405a:	d02d      	beq.n	80040b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800405c:	4b85      	ldr	r3, [pc, #532]	; (8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	08db      	lsrs	r3, r3, #3
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	4a84      	ldr	r2, [pc, #528]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
 800406c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	ee07 3a90 	vmov	s15, r3
 8004074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004086:	4b7b      	ldr	r3, [pc, #492]	; (8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408e:	ee07 3a90 	vmov	s15, r3
 8004092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004096:	ed97 6a03 	vldr	s12, [r7, #12]
 800409a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800427c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800409e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80040b6:	e087      	b.n	80041c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004280 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80040c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ca:	4b6a      	ldr	r3, [pc, #424]	; (8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d2:	ee07 3a90 	vmov	s15, r3
 80040d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040da:	ed97 6a03 	vldr	s12, [r7, #12]
 80040de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800427c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040fa:	e065      	b.n	80041c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004106:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004284 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800410a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800410e:	4b59      	ldr	r3, [pc, #356]	; (8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800411e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004122:	eddf 5a56 	vldr	s11, [pc, #344]	; 800427c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800412a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800412e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800413a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800413e:	e043      	b.n	80041c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004288 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800414e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004152:	4b48      	ldr	r3, [pc, #288]	; (8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800415a:	ee07 3a90 	vmov	s15, r3
 800415e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004162:	ed97 6a03 	vldr	s12, [r7, #12]
 8004166:	eddf 5a45 	vldr	s11, [pc, #276]	; 800427c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800416a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800416e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800417a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800417e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004182:	e021      	b.n	80041c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800418e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004284 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004196:	4b37      	ldr	r3, [pc, #220]	; (8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800419e:	ee07 3a90 	vmov	s15, r3
 80041a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800427c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80041c8:	4b2a      	ldr	r3, [pc, #168]	; (8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	0a5b      	lsrs	r3, r3, #9
 80041ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80041e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ee:	ee17 2a90 	vmov	r2, s15
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80041f6:	4b1f      	ldr	r3, [pc, #124]	; (8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	0c1b      	lsrs	r3, r3, #16
 80041fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004200:	ee07 3a90 	vmov	s15, r3
 8004204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800420c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004210:	edd7 6a07 	vldr	s13, [r7, #28]
 8004214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800421c:	ee17 2a90 	vmov	r2, s15
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004224:	4b13      	ldr	r3, [pc, #76]	; (8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	0e1b      	lsrs	r3, r3, #24
 800422a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800422e:	ee07 3a90 	vmov	s15, r3
 8004232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004236:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800423a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800423e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800424a:	ee17 2a90 	vmov	r2, s15
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004252:	e008      	b.n	8004266 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
}
 8004266:	bf00      	nop
 8004268:	3724      	adds	r7, #36	; 0x24
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	58024400 	.word	0x58024400
 8004278:	03d09000 	.word	0x03d09000
 800427c:	46000000 	.word	0x46000000
 8004280:	4c742400 	.word	0x4c742400
 8004284:	4a742400 	.word	0x4a742400
 8004288:	4bbebc20 	.word	0x4bbebc20

0800428c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800429a:	4b53      	ldr	r3, [pc, #332]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d101      	bne.n	80042aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e099      	b.n	80043de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80042aa:	4b4f      	ldr	r3, [pc, #316]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a4e      	ldr	r2, [pc, #312]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 80042b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b6:	f7fd fb3d 	bl	8001934 <HAL_GetTick>
 80042ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042bc:	e008      	b.n	80042d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042be:	f7fd fb39 	bl	8001934 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e086      	b.n	80043de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042d0:	4b45      	ldr	r3, [pc, #276]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1f0      	bne.n	80042be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80042dc:	4b42      	ldr	r3, [pc, #264]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	031b      	lsls	r3, r3, #12
 80042ea:	493f      	ldr	r1, [pc, #252]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	628b      	str	r3, [r1, #40]	; 0x28
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	3b01      	subs	r3, #1
 8004300:	025b      	lsls	r3, r3, #9
 8004302:	b29b      	uxth	r3, r3
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	3b01      	subs	r3, #1
 800430c:	041b      	lsls	r3, r3, #16
 800430e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	3b01      	subs	r3, #1
 800431a:	061b      	lsls	r3, r3, #24
 800431c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004320:	4931      	ldr	r1, [pc, #196]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 8004322:	4313      	orrs	r3, r2
 8004324:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004326:	4b30      	ldr	r3, [pc, #192]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	492d      	ldr	r1, [pc, #180]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 8004334:	4313      	orrs	r3, r2
 8004336:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004338:	4b2b      	ldr	r3, [pc, #172]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	f023 0220 	bic.w	r2, r3, #32
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	4928      	ldr	r1, [pc, #160]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 8004346:	4313      	orrs	r3, r2
 8004348:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800434a:	4b27      	ldr	r3, [pc, #156]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 800434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434e:	4a26      	ldr	r2, [pc, #152]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 8004350:	f023 0310 	bic.w	r3, r3, #16
 8004354:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004356:	4b24      	ldr	r3, [pc, #144]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 8004358:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800435a:	4b24      	ldr	r3, [pc, #144]	; (80043ec <RCCEx_PLL2_Config+0x160>)
 800435c:	4013      	ands	r3, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	69d2      	ldr	r2, [r2, #28]
 8004362:	00d2      	lsls	r2, r2, #3
 8004364:	4920      	ldr	r1, [pc, #128]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 8004366:	4313      	orrs	r3, r2
 8004368:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800436a:	4b1f      	ldr	r3, [pc, #124]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	4a1e      	ldr	r2, [pc, #120]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 8004370:	f043 0310 	orr.w	r3, r3, #16
 8004374:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d106      	bne.n	800438a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800437c:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	4a19      	ldr	r2, [pc, #100]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 8004382:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004386:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004388:	e00f      	b.n	80043aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d106      	bne.n	800439e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004390:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	4a14      	ldr	r2, [pc, #80]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 8004396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800439a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800439c:	e005      	b.n	80043aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 80043a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a2:	4a11      	ldr	r2, [pc, #68]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 80043a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80043aa:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a0e      	ldr	r2, [pc, #56]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 80043b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b6:	f7fd fabd 	bl	8001934 <HAL_GetTick>
 80043ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043bc:	e008      	b.n	80043d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80043be:	f7fd fab9 	bl	8001934 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e006      	b.n	80043de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <RCCEx_PLL2_Config+0x15c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	58024400 	.word	0x58024400
 80043ec:	ffff0007 	.word	0xffff0007

080043f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043fe:	4b53      	ldr	r3, [pc, #332]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	2b03      	cmp	r3, #3
 8004408:	d101      	bne.n	800440e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e099      	b.n	8004542 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800440e:	4b4f      	ldr	r3, [pc, #316]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a4e      	ldr	r2, [pc, #312]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 8004414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800441a:	f7fd fa8b 	bl	8001934 <HAL_GetTick>
 800441e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004420:	e008      	b.n	8004434 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004422:	f7fd fa87 	bl	8001934 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e086      	b.n	8004542 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004434:	4b45      	ldr	r3, [pc, #276]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1f0      	bne.n	8004422 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004440:	4b42      	ldr	r3, [pc, #264]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	051b      	lsls	r3, r3, #20
 800444e:	493f      	ldr	r1, [pc, #252]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 8004450:	4313      	orrs	r3, r2
 8004452:	628b      	str	r3, [r1, #40]	; 0x28
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	3b01      	subs	r3, #1
 800445a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	3b01      	subs	r3, #1
 8004464:	025b      	lsls	r3, r3, #9
 8004466:	b29b      	uxth	r3, r3
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	3b01      	subs	r3, #1
 8004470:	041b      	lsls	r3, r3, #16
 8004472:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	3b01      	subs	r3, #1
 800447e:	061b      	lsls	r3, r3, #24
 8004480:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004484:	4931      	ldr	r1, [pc, #196]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 8004486:	4313      	orrs	r3, r2
 8004488:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800448a:	4b30      	ldr	r3, [pc, #192]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	492d      	ldr	r1, [pc, #180]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 8004498:	4313      	orrs	r3, r2
 800449a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800449c:	4b2b      	ldr	r3, [pc, #172]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	4928      	ldr	r1, [pc, #160]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80044ae:	4b27      	ldr	r3, [pc, #156]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	4a26      	ldr	r2, [pc, #152]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 80044b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80044ba:	4b24      	ldr	r3, [pc, #144]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 80044bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044be:	4b24      	ldr	r3, [pc, #144]	; (8004550 <RCCEx_PLL3_Config+0x160>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	69d2      	ldr	r2, [r2, #28]
 80044c6:	00d2      	lsls	r2, r2, #3
 80044c8:	4920      	ldr	r1, [pc, #128]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80044ce:	4b1f      	ldr	r3, [pc, #124]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 80044d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d2:	4a1e      	ldr	r2, [pc, #120]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 80044d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d106      	bne.n	80044ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80044e0:	4b1a      	ldr	r3, [pc, #104]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	4a19      	ldr	r2, [pc, #100]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 80044e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044ec:	e00f      	b.n	800450e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d106      	bne.n	8004502 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80044f4:	4b15      	ldr	r3, [pc, #84]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	4a14      	ldr	r2, [pc, #80]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 80044fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004500:	e005      	b.n	800450e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004502:	4b12      	ldr	r3, [pc, #72]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	4a11      	ldr	r2, [pc, #68]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 8004508:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800450c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800450e:	4b0f      	ldr	r3, [pc, #60]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a0e      	ldr	r2, [pc, #56]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 8004514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800451a:	f7fd fa0b 	bl	8001934 <HAL_GetTick>
 800451e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004520:	e008      	b.n	8004534 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004522:	f7fd fa07 	bl	8001934 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e006      	b.n	8004542 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <RCCEx_PLL3_Config+0x15c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0f0      	beq.n	8004522 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004540:	7bfb      	ldrb	r3, [r7, #15]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	58024400 	.word	0x58024400
 8004550:	ffff0007 	.word	0xffff0007

08004554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e049      	b.n	80045fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fc ff18 	bl	80013b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	4619      	mov	r1, r3
 8004592:	4610      	mov	r0, r2
 8004594:	f000 fb6c 	bl	8004c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e049      	b.n	80046a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f841 	bl	80046b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2202      	movs	r2, #2
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3304      	adds	r3, #4
 800463e:	4619      	mov	r1, r3
 8004640:	4610      	mov	r0, r2
 8004642:	f000 fb15 	bl	8004c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d109      	bne.n	80046e8 <HAL_TIM_PWM_Start+0x24>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	bf14      	ite	ne
 80046e0:	2301      	movne	r3, #1
 80046e2:	2300      	moveq	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	e03c      	b.n	8004762 <HAL_TIM_PWM_Start+0x9e>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d109      	bne.n	8004702 <HAL_TIM_PWM_Start+0x3e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	bf14      	ite	ne
 80046fa:	2301      	movne	r3, #1
 80046fc:	2300      	moveq	r3, #0
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	e02f      	b.n	8004762 <HAL_TIM_PWM_Start+0x9e>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b08      	cmp	r3, #8
 8004706:	d109      	bne.n	800471c <HAL_TIM_PWM_Start+0x58>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b01      	cmp	r3, #1
 8004712:	bf14      	ite	ne
 8004714:	2301      	movne	r3, #1
 8004716:	2300      	moveq	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	e022      	b.n	8004762 <HAL_TIM_PWM_Start+0x9e>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2b0c      	cmp	r3, #12
 8004720:	d109      	bne.n	8004736 <HAL_TIM_PWM_Start+0x72>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b01      	cmp	r3, #1
 800472c:	bf14      	ite	ne
 800472e:	2301      	movne	r3, #1
 8004730:	2300      	moveq	r3, #0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	e015      	b.n	8004762 <HAL_TIM_PWM_Start+0x9e>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b10      	cmp	r3, #16
 800473a:	d109      	bne.n	8004750 <HAL_TIM_PWM_Start+0x8c>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	bf14      	ite	ne
 8004748:	2301      	movne	r3, #1
 800474a:	2300      	moveq	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	e008      	b.n	8004762 <HAL_TIM_PWM_Start+0x9e>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	bf14      	ite	ne
 800475c:	2301      	movne	r3, #1
 800475e:	2300      	moveq	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e06e      	b.n	8004848 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d104      	bne.n	800477a <HAL_TIM_PWM_Start+0xb6>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004778:	e023      	b.n	80047c2 <HAL_TIM_PWM_Start+0xfe>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b04      	cmp	r3, #4
 800477e:	d104      	bne.n	800478a <HAL_TIM_PWM_Start+0xc6>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004788:	e01b      	b.n	80047c2 <HAL_TIM_PWM_Start+0xfe>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d104      	bne.n	800479a <HAL_TIM_PWM_Start+0xd6>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004798:	e013      	b.n	80047c2 <HAL_TIM_PWM_Start+0xfe>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b0c      	cmp	r3, #12
 800479e:	d104      	bne.n	80047aa <HAL_TIM_PWM_Start+0xe6>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047a8:	e00b      	b.n	80047c2 <HAL_TIM_PWM_Start+0xfe>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b10      	cmp	r3, #16
 80047ae:	d104      	bne.n	80047ba <HAL_TIM_PWM_Start+0xf6>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b8:	e003      	b.n	80047c2 <HAL_TIM_PWM_Start+0xfe>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2202      	movs	r2, #2
 80047be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2201      	movs	r2, #1
 80047c8:	6839      	ldr	r1, [r7, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fe56 	bl	800547c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <HAL_TIM_PWM_Start+0x18c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <HAL_TIM_PWM_Start+0x13e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a1d      	ldr	r2, [pc, #116]	; (8004854 <HAL_TIM_PWM_Start+0x190>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00e      	beq.n	8004802 <HAL_TIM_PWM_Start+0x13e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1b      	ldr	r2, [pc, #108]	; (8004858 <HAL_TIM_PWM_Start+0x194>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d009      	beq.n	8004802 <HAL_TIM_PWM_Start+0x13e>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a1a      	ldr	r2, [pc, #104]	; (800485c <HAL_TIM_PWM_Start+0x198>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d004      	beq.n	8004802 <HAL_TIM_PWM_Start+0x13e>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a18      	ldr	r2, [pc, #96]	; (8004860 <HAL_TIM_PWM_Start+0x19c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d101      	bne.n	8004806 <HAL_TIM_PWM_Start+0x142>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <HAL_TIM_PWM_Start+0x144>
 8004806:	2300      	movs	r3, #0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800481a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	4b10      	ldr	r3, [pc, #64]	; (8004864 <HAL_TIM_PWM_Start+0x1a0>)
 8004824:	4013      	ands	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b06      	cmp	r3, #6
 800482c:	d00b      	beq.n	8004846 <HAL_TIM_PWM_Start+0x182>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004834:	d007      	beq.n	8004846 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f042 0201 	orr.w	r2, r2, #1
 8004844:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40010000 	.word	0x40010000
 8004854:	40010400 	.word	0x40010400
 8004858:	40014000 	.word	0x40014000
 800485c:	40014400 	.word	0x40014400
 8004860:	40014800 	.word	0x40014800
 8004864:	00010007 	.word	0x00010007

08004868 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800487e:	2302      	movs	r3, #2
 8004880:	e0fd      	b.n	8004a7e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b14      	cmp	r3, #20
 800488e:	f200 80f0 	bhi.w	8004a72 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004892:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004898:	080048ed 	.word	0x080048ed
 800489c:	08004a73 	.word	0x08004a73
 80048a0:	08004a73 	.word	0x08004a73
 80048a4:	08004a73 	.word	0x08004a73
 80048a8:	0800492d 	.word	0x0800492d
 80048ac:	08004a73 	.word	0x08004a73
 80048b0:	08004a73 	.word	0x08004a73
 80048b4:	08004a73 	.word	0x08004a73
 80048b8:	0800496f 	.word	0x0800496f
 80048bc:	08004a73 	.word	0x08004a73
 80048c0:	08004a73 	.word	0x08004a73
 80048c4:	08004a73 	.word	0x08004a73
 80048c8:	080049af 	.word	0x080049af
 80048cc:	08004a73 	.word	0x08004a73
 80048d0:	08004a73 	.word	0x08004a73
 80048d4:	08004a73 	.word	0x08004a73
 80048d8:	080049f1 	.word	0x080049f1
 80048dc:	08004a73 	.word	0x08004a73
 80048e0:	08004a73 	.word	0x08004a73
 80048e4:	08004a73 	.word	0x08004a73
 80048e8:	08004a31 	.word	0x08004a31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fa56 	bl	8004da4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699a      	ldr	r2, [r3, #24]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0208 	orr.w	r2, r2, #8
 8004906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0204 	bic.w	r2, r2, #4
 8004916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6999      	ldr	r1, [r3, #24]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	619a      	str	r2, [r3, #24]
      break;
 800492a:	e0a3      	b.n	8004a74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fac6 	bl	8004ec4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699a      	ldr	r2, [r3, #24]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6999      	ldr	r1, [r3, #24]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	021a      	lsls	r2, r3, #8
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	619a      	str	r2, [r3, #24]
      break;
 800496c:	e082      	b.n	8004a74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68b9      	ldr	r1, [r7, #8]
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fb2f 	bl	8004fd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69da      	ldr	r2, [r3, #28]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0208 	orr.w	r2, r2, #8
 8004988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0204 	bic.w	r2, r2, #4
 8004998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	69d9      	ldr	r1, [r3, #28]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	61da      	str	r2, [r3, #28]
      break;
 80049ac:	e062      	b.n	8004a74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68b9      	ldr	r1, [r7, #8]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 fb95 	bl	80050e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69da      	ldr	r2, [r3, #28]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69da      	ldr	r2, [r3, #28]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69d9      	ldr	r1, [r3, #28]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	021a      	lsls	r2, r3, #8
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	61da      	str	r2, [r3, #28]
      break;
 80049ee:	e041      	b.n	8004a74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68b9      	ldr	r1, [r7, #8]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fbdc 	bl	80051b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0208 	orr.w	r2, r2, #8
 8004a0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0204 	bic.w	r2, r2, #4
 8004a1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a2e:	e021      	b.n	8004a74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fc1e 	bl	8005278 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	021a      	lsls	r2, r3, #8
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a70:	e000      	b.n	8004a74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004a72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop

08004a88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_TIM_ConfigClockSource+0x18>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e0db      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x1d0>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4b69      	ldr	r3, [pc, #420]	; (8004c60 <HAL_TIM_ConfigClockSource+0x1d8>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ac6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a63      	ldr	r2, [pc, #396]	; (8004c64 <HAL_TIM_ConfigClockSource+0x1dc>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	f000 80a9 	beq.w	8004c2e <HAL_TIM_ConfigClockSource+0x1a6>
 8004adc:	4a61      	ldr	r2, [pc, #388]	; (8004c64 <HAL_TIM_ConfigClockSource+0x1dc>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	f200 80ae 	bhi.w	8004c40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004ae4:	4a60      	ldr	r2, [pc, #384]	; (8004c68 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	f000 80a1 	beq.w	8004c2e <HAL_TIM_ConfigClockSource+0x1a6>
 8004aec:	4a5e      	ldr	r2, [pc, #376]	; (8004c68 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	f200 80a6 	bhi.w	8004c40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004af4:	4a5d      	ldr	r2, [pc, #372]	; (8004c6c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	f000 8099 	beq.w	8004c2e <HAL_TIM_ConfigClockSource+0x1a6>
 8004afc:	4a5b      	ldr	r2, [pc, #364]	; (8004c6c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	f200 809e 	bhi.w	8004c40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004b04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b08:	f000 8091 	beq.w	8004c2e <HAL_TIM_ConfigClockSource+0x1a6>
 8004b0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b10:	f200 8096 	bhi.w	8004c40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b18:	f000 8089 	beq.w	8004c2e <HAL_TIM_ConfigClockSource+0x1a6>
 8004b1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b20:	f200 808e 	bhi.w	8004c40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b28:	d03e      	beq.n	8004ba8 <HAL_TIM_ConfigClockSource+0x120>
 8004b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b2e:	f200 8087 	bhi.w	8004c40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b36:	f000 8085 	beq.w	8004c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3e:	d87f      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004b40:	2b70      	cmp	r3, #112	; 0x70
 8004b42:	d01a      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0xf2>
 8004b44:	2b70      	cmp	r3, #112	; 0x70
 8004b46:	d87b      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004b48:	2b60      	cmp	r3, #96	; 0x60
 8004b4a:	d050      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x166>
 8004b4c:	2b60      	cmp	r3, #96	; 0x60
 8004b4e:	d877      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004b50:	2b50      	cmp	r3, #80	; 0x50
 8004b52:	d03c      	beq.n	8004bce <HAL_TIM_ConfigClockSource+0x146>
 8004b54:	2b50      	cmp	r3, #80	; 0x50
 8004b56:	d873      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	d058      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0x186>
 8004b5c:	2b40      	cmp	r3, #64	; 0x40
 8004b5e:	d86f      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004b60:	2b30      	cmp	r3, #48	; 0x30
 8004b62:	d064      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0x1a6>
 8004b64:	2b30      	cmp	r3, #48	; 0x30
 8004b66:	d86b      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d060      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0x1a6>
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d867      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d05c      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0x1a6>
 8004b74:	2b10      	cmp	r3, #16
 8004b76:	d05a      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0x1a6>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004b78:	e062      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	6899      	ldr	r1, [r3, #8]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f000 fc57 	bl	800543c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	609a      	str	r2, [r3, #8]
      break;
 8004ba6:	e04e      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	6899      	ldr	r1, [r3, #8]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f000 fc40 	bl	800543c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bca:	609a      	str	r2, [r3, #8]
      break;
 8004bcc:	e03b      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	6859      	ldr	r1, [r3, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f000 fbb0 	bl	8005340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2150      	movs	r1, #80	; 0x50
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fc0a 	bl	8005400 <TIM_ITRx_SetConfig>
      break;
 8004bec:	e02b      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6818      	ldr	r0, [r3, #0]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6859      	ldr	r1, [r3, #4]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f000 fbcf 	bl	800539e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2160      	movs	r1, #96	; 0x60
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fbfa 	bl	8005400 <TIM_ITRx_SetConfig>
      break;
 8004c0c:	e01b      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	6859      	ldr	r1, [r3, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f000 fb90 	bl	8005340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2140      	movs	r1, #64	; 0x40
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fbea 	bl	8005400 <TIM_ITRx_SetConfig>
      break;
 8004c2c:	e00b      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f000 fbe1 	bl	8005400 <TIM_ITRx_SetConfig>
      break;
 8004c3e:	e002      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8004c40:	bf00      	nop
 8004c42:	e000      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8004c44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	ffceff88 	.word	0xffceff88
 8004c64:	00100040 	.word	0x00100040
 8004c68:	00100030 	.word	0x00100030
 8004c6c:	00100020 	.word	0x00100020

08004c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a40      	ldr	r2, [pc, #256]	; (8004d84 <TIM_Base_SetConfig+0x114>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8e:	d00f      	beq.n	8004cb0 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a3d      	ldr	r2, [pc, #244]	; (8004d88 <TIM_Base_SetConfig+0x118>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00b      	beq.n	8004cb0 <TIM_Base_SetConfig+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a3c      	ldr	r2, [pc, #240]	; (8004d8c <TIM_Base_SetConfig+0x11c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d007      	beq.n	8004cb0 <TIM_Base_SetConfig+0x40>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a3b      	ldr	r2, [pc, #236]	; (8004d90 <TIM_Base_SetConfig+0x120>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_Base_SetConfig+0x40>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a3a      	ldr	r2, [pc, #232]	; (8004d94 <TIM_Base_SetConfig+0x124>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d108      	bne.n	8004cc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2f      	ldr	r2, [pc, #188]	; (8004d84 <TIM_Base_SetConfig+0x114>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d01f      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd0:	d01b      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a2c      	ldr	r2, [pc, #176]	; (8004d88 <TIM_Base_SetConfig+0x118>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d017      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a2b      	ldr	r2, [pc, #172]	; (8004d8c <TIM_Base_SetConfig+0x11c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a2a      	ldr	r2, [pc, #168]	; (8004d90 <TIM_Base_SetConfig+0x120>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00f      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a29      	ldr	r2, [pc, #164]	; (8004d94 <TIM_Base_SetConfig+0x124>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00b      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a28      	ldr	r2, [pc, #160]	; (8004d98 <TIM_Base_SetConfig+0x128>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d007      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a27      	ldr	r2, [pc, #156]	; (8004d9c <TIM_Base_SetConfig+0x12c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d003      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a26      	ldr	r2, [pc, #152]	; (8004da0 <TIM_Base_SetConfig+0x130>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d108      	bne.n	8004d1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a10      	ldr	r2, [pc, #64]	; (8004d84 <TIM_Base_SetConfig+0x114>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00f      	beq.n	8004d68 <TIM_Base_SetConfig+0xf8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a12      	ldr	r2, [pc, #72]	; (8004d94 <TIM_Base_SetConfig+0x124>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00b      	beq.n	8004d68 <TIM_Base_SetConfig+0xf8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a11      	ldr	r2, [pc, #68]	; (8004d98 <TIM_Base_SetConfig+0x128>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d007      	beq.n	8004d68 <TIM_Base_SetConfig+0xf8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a10      	ldr	r2, [pc, #64]	; (8004d9c <TIM_Base_SetConfig+0x12c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d003      	beq.n	8004d68 <TIM_Base_SetConfig+0xf8>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a0f      	ldr	r2, [pc, #60]	; (8004da0 <TIM_Base_SetConfig+0x130>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d103      	bne.n	8004d70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	615a      	str	r2, [r3, #20]
}
 8004d76:	bf00      	nop
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40010000 	.word	0x40010000
 8004d88:	40000400 	.word	0x40000400
 8004d8c:	40000800 	.word	0x40000800
 8004d90:	40000c00 	.word	0x40000c00
 8004d94:	40010400 	.word	0x40010400
 8004d98:	40014000 	.word	0x40014000
 8004d9c:	40014400 	.word	0x40014400
 8004da0:	40014800 	.word	0x40014800

08004da4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	f023 0201 	bic.w	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4b37      	ldr	r3, [pc, #220]	; (8004eac <TIM_OC1_SetConfig+0x108>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0303 	bic.w	r3, r3, #3
 8004dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f023 0302 	bic.w	r3, r3, #2
 8004dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a2d      	ldr	r2, [pc, #180]	; (8004eb0 <TIM_OC1_SetConfig+0x10c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00f      	beq.n	8004e20 <TIM_OC1_SetConfig+0x7c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a2c      	ldr	r2, [pc, #176]	; (8004eb4 <TIM_OC1_SetConfig+0x110>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00b      	beq.n	8004e20 <TIM_OC1_SetConfig+0x7c>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a2b      	ldr	r2, [pc, #172]	; (8004eb8 <TIM_OC1_SetConfig+0x114>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d007      	beq.n	8004e20 <TIM_OC1_SetConfig+0x7c>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a2a      	ldr	r2, [pc, #168]	; (8004ebc <TIM_OC1_SetConfig+0x118>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d003      	beq.n	8004e20 <TIM_OC1_SetConfig+0x7c>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a29      	ldr	r2, [pc, #164]	; (8004ec0 <TIM_OC1_SetConfig+0x11c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d10c      	bne.n	8004e3a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f023 0308 	bic.w	r3, r3, #8
 8004e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 0304 	bic.w	r3, r3, #4
 8004e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a1c      	ldr	r2, [pc, #112]	; (8004eb0 <TIM_OC1_SetConfig+0x10c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00f      	beq.n	8004e62 <TIM_OC1_SetConfig+0xbe>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a1b      	ldr	r2, [pc, #108]	; (8004eb4 <TIM_OC1_SetConfig+0x110>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00b      	beq.n	8004e62 <TIM_OC1_SetConfig+0xbe>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a1a      	ldr	r2, [pc, #104]	; (8004eb8 <TIM_OC1_SetConfig+0x114>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d007      	beq.n	8004e62 <TIM_OC1_SetConfig+0xbe>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a19      	ldr	r2, [pc, #100]	; (8004ebc <TIM_OC1_SetConfig+0x118>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d003      	beq.n	8004e62 <TIM_OC1_SetConfig+0xbe>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a18      	ldr	r2, [pc, #96]	; (8004ec0 <TIM_OC1_SetConfig+0x11c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d111      	bne.n	8004e86 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	621a      	str	r2, [r3, #32]
}
 8004ea0:	bf00      	nop
 8004ea2:	371c      	adds	r7, #28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	fffeff8f 	.word	0xfffeff8f
 8004eb0:	40010000 	.word	0x40010000
 8004eb4:	40010400 	.word	0x40010400
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40014400 	.word	0x40014400
 8004ec0:	40014800 	.word	0x40014800

08004ec4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f023 0210 	bic.w	r2, r3, #16
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4b34      	ldr	r3, [pc, #208]	; (8004fc0 <TIM_OC2_SetConfig+0xfc>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f023 0320 	bic.w	r3, r3, #32
 8004f0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a29      	ldr	r2, [pc, #164]	; (8004fc4 <TIM_OC2_SetConfig+0x100>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d003      	beq.n	8004f2c <TIM_OC2_SetConfig+0x68>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a28      	ldr	r2, [pc, #160]	; (8004fc8 <TIM_OC2_SetConfig+0x104>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d10d      	bne.n	8004f48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a1e      	ldr	r2, [pc, #120]	; (8004fc4 <TIM_OC2_SetConfig+0x100>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00f      	beq.n	8004f70 <TIM_OC2_SetConfig+0xac>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a1d      	ldr	r2, [pc, #116]	; (8004fc8 <TIM_OC2_SetConfig+0x104>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00b      	beq.n	8004f70 <TIM_OC2_SetConfig+0xac>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a1c      	ldr	r2, [pc, #112]	; (8004fcc <TIM_OC2_SetConfig+0x108>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d007      	beq.n	8004f70 <TIM_OC2_SetConfig+0xac>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a1b      	ldr	r2, [pc, #108]	; (8004fd0 <TIM_OC2_SetConfig+0x10c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d003      	beq.n	8004f70 <TIM_OC2_SetConfig+0xac>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a1a      	ldr	r2, [pc, #104]	; (8004fd4 <TIM_OC2_SetConfig+0x110>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d113      	bne.n	8004f98 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	621a      	str	r2, [r3, #32]
}
 8004fb2:	bf00      	nop
 8004fb4:	371c      	adds	r7, #28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	feff8fff 	.word	0xfeff8fff
 8004fc4:	40010000 	.word	0x40010000
 8004fc8:	40010400 	.word	0x40010400
 8004fcc:	40014000 	.word	0x40014000
 8004fd0:	40014400 	.word	0x40014400
 8004fd4:	40014800 	.word	0x40014800

08004fd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0303 	bic.w	r3, r3, #3
 800500e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a27      	ldr	r2, [pc, #156]	; (80050d0 <TIM_OC3_SetConfig+0xf8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d003      	beq.n	800503e <TIM_OC3_SetConfig+0x66>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a26      	ldr	r2, [pc, #152]	; (80050d4 <TIM_OC3_SetConfig+0xfc>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d10d      	bne.n	800505a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	4313      	orrs	r3, r2
 8005050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a1c      	ldr	r2, [pc, #112]	; (80050d0 <TIM_OC3_SetConfig+0xf8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00f      	beq.n	8005082 <TIM_OC3_SetConfig+0xaa>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a1b      	ldr	r2, [pc, #108]	; (80050d4 <TIM_OC3_SetConfig+0xfc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00b      	beq.n	8005082 <TIM_OC3_SetConfig+0xaa>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a1a      	ldr	r2, [pc, #104]	; (80050d8 <TIM_OC3_SetConfig+0x100>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d007      	beq.n	8005082 <TIM_OC3_SetConfig+0xaa>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a19      	ldr	r2, [pc, #100]	; (80050dc <TIM_OC3_SetConfig+0x104>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d003      	beq.n	8005082 <TIM_OC3_SetConfig+0xaa>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a18      	ldr	r2, [pc, #96]	; (80050e0 <TIM_OC3_SetConfig+0x108>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d113      	bne.n	80050aa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4313      	orrs	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	621a      	str	r2, [r3, #32]
}
 80050c4:	bf00      	nop
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	40010000 	.word	0x40010000
 80050d4:	40010400 	.word	0x40010400
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40014400 	.word	0x40014400
 80050e0:	40014800 	.word	0x40014800

080050e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800511a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	021b      	lsls	r3, r3, #8
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800512e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	031b      	lsls	r3, r3, #12
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a18      	ldr	r2, [pc, #96]	; (80051a0 <TIM_OC4_SetConfig+0xbc>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00f      	beq.n	8005164 <TIM_OC4_SetConfig+0x80>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a17      	ldr	r2, [pc, #92]	; (80051a4 <TIM_OC4_SetConfig+0xc0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00b      	beq.n	8005164 <TIM_OC4_SetConfig+0x80>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a16      	ldr	r2, [pc, #88]	; (80051a8 <TIM_OC4_SetConfig+0xc4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d007      	beq.n	8005164 <TIM_OC4_SetConfig+0x80>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a15      	ldr	r2, [pc, #84]	; (80051ac <TIM_OC4_SetConfig+0xc8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d003      	beq.n	8005164 <TIM_OC4_SetConfig+0x80>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a14      	ldr	r2, [pc, #80]	; (80051b0 <TIM_OC4_SetConfig+0xcc>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d109      	bne.n	8005178 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800516a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	019b      	lsls	r3, r3, #6
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	621a      	str	r2, [r3, #32]
}
 8005192:	bf00      	nop
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40010000 	.word	0x40010000
 80051a4:	40010400 	.word	0x40010400
 80051a8:	40014000 	.word	0x40014000
 80051ac:	40014400 	.word	0x40014400
 80051b0:	40014800 	.word	0x40014800

080051b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80051f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	041b      	lsls	r3, r3, #16
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	4313      	orrs	r3, r2
 8005200:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a17      	ldr	r2, [pc, #92]	; (8005264 <TIM_OC5_SetConfig+0xb0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00f      	beq.n	800522a <TIM_OC5_SetConfig+0x76>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a16      	ldr	r2, [pc, #88]	; (8005268 <TIM_OC5_SetConfig+0xb4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00b      	beq.n	800522a <TIM_OC5_SetConfig+0x76>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a15      	ldr	r2, [pc, #84]	; (800526c <TIM_OC5_SetConfig+0xb8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d007      	beq.n	800522a <TIM_OC5_SetConfig+0x76>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a14      	ldr	r2, [pc, #80]	; (8005270 <TIM_OC5_SetConfig+0xbc>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d003      	beq.n	800522a <TIM_OC5_SetConfig+0x76>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a13      	ldr	r2, [pc, #76]	; (8005274 <TIM_OC5_SetConfig+0xc0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d109      	bne.n	800523e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005230:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	021b      	lsls	r3, r3, #8
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	621a      	str	r2, [r3, #32]
}
 8005258:	bf00      	nop
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	40010000 	.word	0x40010000
 8005268:	40010400 	.word	0x40010400
 800526c:	40014000 	.word	0x40014000
 8005270:	40014400 	.word	0x40014400
 8005274:	40014800 	.word	0x40014800

08005278 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	051b      	lsls	r3, r3, #20
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a18      	ldr	r2, [pc, #96]	; (800532c <TIM_OC6_SetConfig+0xb4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00f      	beq.n	80052f0 <TIM_OC6_SetConfig+0x78>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a17      	ldr	r2, [pc, #92]	; (8005330 <TIM_OC6_SetConfig+0xb8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00b      	beq.n	80052f0 <TIM_OC6_SetConfig+0x78>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a16      	ldr	r2, [pc, #88]	; (8005334 <TIM_OC6_SetConfig+0xbc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d007      	beq.n	80052f0 <TIM_OC6_SetConfig+0x78>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a15      	ldr	r2, [pc, #84]	; (8005338 <TIM_OC6_SetConfig+0xc0>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d003      	beq.n	80052f0 <TIM_OC6_SetConfig+0x78>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a14      	ldr	r2, [pc, #80]	; (800533c <TIM_OC6_SetConfig+0xc4>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d109      	bne.n	8005304 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	029b      	lsls	r3, r3, #10
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	4313      	orrs	r3, r2
 8005302:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	621a      	str	r2, [r3, #32]
}
 800531e:	bf00      	nop
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	40010000 	.word	0x40010000
 8005330:	40010400 	.word	0x40010400
 8005334:	40014000 	.word	0x40014000
 8005338:	40014400 	.word	0x40014400
 800533c:	40014800 	.word	0x40014800

08005340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f023 0201 	bic.w	r2, r3, #1
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800536a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f023 030a 	bic.w	r3, r3, #10
 800537c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	621a      	str	r2, [r3, #32]
}
 8005392:	bf00      	nop
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800539e:	b480      	push	{r7}
 80053a0:	b087      	sub	sp, #28
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	f023 0210 	bic.w	r2, r3, #16
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	031b      	lsls	r3, r3, #12
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	621a      	str	r2, [r3, #32]
}
 80053f2:	bf00      	nop
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
	...

08005400 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4b09      	ldr	r3, [pc, #36]	; (8005438 <TIM_ITRx_SetConfig+0x38>)
 8005414:	4013      	ands	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4313      	orrs	r3, r2
 800541e:	f043 0307 	orr.w	r3, r3, #7
 8005422:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	609a      	str	r2, [r3, #8]
}
 800542a:	bf00      	nop
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	ffcfff8f 	.word	0xffcfff8f

0800543c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005456:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	021a      	lsls	r2, r3, #8
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	431a      	orrs	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4313      	orrs	r3, r2
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	609a      	str	r2, [r3, #8]
}
 8005470:	bf00      	nop
 8005472:	371c      	adds	r7, #28
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	2201      	movs	r2, #1
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a1a      	ldr	r2, [r3, #32]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	43db      	mvns	r3, r3
 800549e:	401a      	ands	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a1a      	ldr	r2, [r3, #32]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f003 031f 	and.w	r3, r3, #31
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	fa01 f303 	lsl.w	r3, r1, r3
 80054b4:	431a      	orrs	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	621a      	str	r2, [r3, #32]
}
 80054ba:	bf00      	nop
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
	...

080054c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d101      	bne.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054dc:	2302      	movs	r3, #2
 80054de:	e068      	b.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a2e      	ldr	r2, [pc, #184]	; (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d004      	beq.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a2d      	ldr	r2, [pc, #180]	; (80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d108      	bne.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800551a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1e      	ldr	r2, [pc, #120]	; (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d01d      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005552:	d018      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1b      	ldr	r2, [pc, #108]	; (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1a      	ldr	r2, [pc, #104]	; (80055cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00e      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a18      	ldr	r2, [pc, #96]	; (80055d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d009      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a13      	ldr	r2, [pc, #76]	; (80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d004      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a14      	ldr	r2, [pc, #80]	; (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d10c      	bne.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800558c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	4313      	orrs	r3, r2
 8005596:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40010400 	.word	0x40010400
 80055c8:	40000400 	.word	0x40000400
 80055cc:	40000800 	.word	0x40000800
 80055d0:	40000c00 	.word	0x40000c00
 80055d4:	40001800 	.word	0x40001800

080055d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e065      	b.n	80056c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	4313      	orrs	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	4313      	orrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	041b      	lsls	r3, r3, #16
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a16      	ldr	r2, [pc, #88]	; (80056cc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d004      	beq.n	8005682 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a14      	ldr	r2, [pc, #80]	; (80056d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d115      	bne.n	80056ae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	051b      	lsls	r3, r3, #20
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	4313      	orrs	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	40010000 	.word	0x40010000
 80056d0:	40010400 	.word	0x40010400

080056d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e042      	b.n	800576c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d106      	bne.n	80056fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7fb fef9 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2224      	movs	r2, #36	; 0x24
 8005702:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0201 	bic.w	r2, r2, #1
 8005714:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f90e 	bl	8005938 <UART_SetConfig>
 800571c:	4603      	mov	r3, r0
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e022      	b.n	800576c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fe68 	bl	8006404 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 feef 	bl	8006548 <UART_CheckIdleState>
 800576a:	4603      	mov	r3, r0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005788:	2b20      	cmp	r3, #32
 800578a:	f040 80bc 	bne.w	8005906 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <HAL_UART_Receive_IT+0x26>
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e0b4      	b.n	8005908 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <HAL_UART_Receive_IT+0x38>
 80057a8:	2302      	movs	r3, #2
 80057aa:	e0ad      	b.n	8005908 <HAL_UART_Receive_IT+0x194>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	88fa      	ldrh	r2, [r7, #6]
 80057be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	88fa      	ldrh	r2, [r7, #6]
 80057c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d8:	d10e      	bne.n	80057f8 <HAL_UART_Receive_IT+0x84>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d105      	bne.n	80057ee <HAL_UART_Receive_IT+0x7a>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80057e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057ec:	e02d      	b.n	800584a <HAL_UART_Receive_IT+0xd6>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	22ff      	movs	r2, #255	; 0xff
 80057f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057f6:	e028      	b.n	800584a <HAL_UART_Receive_IT+0xd6>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10d      	bne.n	800581c <HAL_UART_Receive_IT+0xa8>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d104      	bne.n	8005812 <HAL_UART_Receive_IT+0x9e>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	22ff      	movs	r2, #255	; 0xff
 800580c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005810:	e01b      	b.n	800584a <HAL_UART_Receive_IT+0xd6>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	227f      	movs	r2, #127	; 0x7f
 8005816:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800581a:	e016      	b.n	800584a <HAL_UART_Receive_IT+0xd6>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005824:	d10d      	bne.n	8005842 <HAL_UART_Receive_IT+0xce>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d104      	bne.n	8005838 <HAL_UART_Receive_IT+0xc4>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	227f      	movs	r2, #127	; 0x7f
 8005832:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005836:	e008      	b.n	800584a <HAL_UART_Receive_IT+0xd6>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	223f      	movs	r2, #63	; 0x3f
 800583c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005840:	e003      	b.n	800584a <HAL_UART_Receive_IT+0xd6>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2222      	movs	r2, #34	; 0x22
 8005856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0201 	orr.w	r2, r2, #1
 8005868:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800586e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005872:	d12a      	bne.n	80058ca <HAL_UART_Receive_IT+0x156>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800587a:	88fa      	ldrh	r2, [r7, #6]
 800587c:	429a      	cmp	r2, r3
 800587e:	d324      	bcc.n	80058ca <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005888:	d107      	bne.n	800589a <HAL_UART_Receive_IT+0x126>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d103      	bne.n	800589a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <HAL_UART_Receive_IT+0x1a0>)
 8005896:	66da      	str	r2, [r3, #108]	; 0x6c
 8005898:	e002      	b.n	80058a0 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4a1e      	ldr	r2, [pc, #120]	; (8005918 <HAL_UART_Receive_IT+0x1a4>)
 800589e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058b6:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80058c6:	609a      	str	r2, [r3, #8]
 80058c8:	e01b      	b.n	8005902 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d2:	d107      	bne.n	80058e4 <HAL_UART_Receive_IT+0x170>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d103      	bne.n	80058e4 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4a0f      	ldr	r2, [pc, #60]	; (800591c <HAL_UART_Receive_IT+0x1a8>)
 80058e0:	66da      	str	r2, [r3, #108]	; 0x6c
 80058e2:	e002      	b.n	80058ea <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4a0e      	ldr	r2, [pc, #56]	; (8005920 <HAL_UART_Receive_IT+0x1ac>)
 80058e8:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005900:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	e000      	b.n	8005908 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8005906:	2302      	movs	r3, #2
  }
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	08006935 	.word	0x08006935
 8005918:	0800682d 	.word	0x0800682d
 800591c:	08006783 	.word	0x08006783
 8005920:	080066d9 	.word	0x080066d9

08005924 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005938:	b5b0      	push	{r4, r5, r7, lr}
 800593a:	b08e      	sub	sp, #56	; 0x38
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005940:	2300      	movs	r3, #0
 8005942:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	431a      	orrs	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	4313      	orrs	r3, r2
 800595c:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005964:	4313      	orrs	r3, r2
 8005966:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4bc0      	ldr	r3, [pc, #768]	; (8005c70 <UART_SetConfig+0x338>)
 8005970:	4013      	ands	r3, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005978:	430b      	orrs	r3, r1
 800597a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4ab5      	ldr	r2, [pc, #724]	; (8005c74 <UART_SetConfig+0x33c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d004      	beq.n	80059ac <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059a8:	4313      	orrs	r3, r2
 80059aa:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	4bb1      	ldr	r3, [pc, #708]	; (8005c78 <UART_SetConfig+0x340>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6812      	ldr	r2, [r2, #0]
 80059ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80059bc:	430b      	orrs	r3, r1
 80059be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c6:	f023 010f 	bic.w	r1, r3, #15
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4aa8      	ldr	r2, [pc, #672]	; (8005c7c <UART_SetConfig+0x344>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d177      	bne.n	8005ad0 <UART_SetConfig+0x198>
 80059e0:	4ba7      	ldr	r3, [pc, #668]	; (8005c80 <UART_SetConfig+0x348>)
 80059e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059e8:	2b28      	cmp	r3, #40	; 0x28
 80059ea:	d86d      	bhi.n	8005ac8 <UART_SetConfig+0x190>
 80059ec:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <UART_SetConfig+0xbc>)
 80059ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f2:	bf00      	nop
 80059f4:	08005a99 	.word	0x08005a99
 80059f8:	08005ac9 	.word	0x08005ac9
 80059fc:	08005ac9 	.word	0x08005ac9
 8005a00:	08005ac9 	.word	0x08005ac9
 8005a04:	08005ac9 	.word	0x08005ac9
 8005a08:	08005ac9 	.word	0x08005ac9
 8005a0c:	08005ac9 	.word	0x08005ac9
 8005a10:	08005ac9 	.word	0x08005ac9
 8005a14:	08005aa1 	.word	0x08005aa1
 8005a18:	08005ac9 	.word	0x08005ac9
 8005a1c:	08005ac9 	.word	0x08005ac9
 8005a20:	08005ac9 	.word	0x08005ac9
 8005a24:	08005ac9 	.word	0x08005ac9
 8005a28:	08005ac9 	.word	0x08005ac9
 8005a2c:	08005ac9 	.word	0x08005ac9
 8005a30:	08005ac9 	.word	0x08005ac9
 8005a34:	08005aa9 	.word	0x08005aa9
 8005a38:	08005ac9 	.word	0x08005ac9
 8005a3c:	08005ac9 	.word	0x08005ac9
 8005a40:	08005ac9 	.word	0x08005ac9
 8005a44:	08005ac9 	.word	0x08005ac9
 8005a48:	08005ac9 	.word	0x08005ac9
 8005a4c:	08005ac9 	.word	0x08005ac9
 8005a50:	08005ac9 	.word	0x08005ac9
 8005a54:	08005ab1 	.word	0x08005ab1
 8005a58:	08005ac9 	.word	0x08005ac9
 8005a5c:	08005ac9 	.word	0x08005ac9
 8005a60:	08005ac9 	.word	0x08005ac9
 8005a64:	08005ac9 	.word	0x08005ac9
 8005a68:	08005ac9 	.word	0x08005ac9
 8005a6c:	08005ac9 	.word	0x08005ac9
 8005a70:	08005ac9 	.word	0x08005ac9
 8005a74:	08005ab9 	.word	0x08005ab9
 8005a78:	08005ac9 	.word	0x08005ac9
 8005a7c:	08005ac9 	.word	0x08005ac9
 8005a80:	08005ac9 	.word	0x08005ac9
 8005a84:	08005ac9 	.word	0x08005ac9
 8005a88:	08005ac9 	.word	0x08005ac9
 8005a8c:	08005ac9 	.word	0x08005ac9
 8005a90:	08005ac9 	.word	0x08005ac9
 8005a94:	08005ac1 	.word	0x08005ac1
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a9e:	e222      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005aa0:	2304      	movs	r3, #4
 8005aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aa6:	e21e      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005aa8:	2308      	movs	r3, #8
 8005aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aae:	e21a      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005ab0:	2310      	movs	r3, #16
 8005ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ab6:	e216      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005ab8:	2320      	movs	r3, #32
 8005aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005abe:	e212      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005ac0:	2340      	movs	r3, #64	; 0x40
 8005ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ac6:	e20e      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005ac8:	2380      	movs	r3, #128	; 0x80
 8005aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ace:	e20a      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a6b      	ldr	r2, [pc, #428]	; (8005c84 <UART_SetConfig+0x34c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d130      	bne.n	8005b3c <UART_SetConfig+0x204>
 8005ada:	4b69      	ldr	r3, [pc, #420]	; (8005c80 <UART_SetConfig+0x348>)
 8005adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	2b05      	cmp	r3, #5
 8005ae4:	d826      	bhi.n	8005b34 <UART_SetConfig+0x1fc>
 8005ae6:	a201      	add	r2, pc, #4	; (adr r2, 8005aec <UART_SetConfig+0x1b4>)
 8005ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aec:	08005b05 	.word	0x08005b05
 8005af0:	08005b0d 	.word	0x08005b0d
 8005af4:	08005b15 	.word	0x08005b15
 8005af8:	08005b1d 	.word	0x08005b1d
 8005afc:	08005b25 	.word	0x08005b25
 8005b00:	08005b2d 	.word	0x08005b2d
 8005b04:	2300      	movs	r3, #0
 8005b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b0a:	e1ec      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b12:	e1e8      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005b14:	2308      	movs	r3, #8
 8005b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b1a:	e1e4      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005b1c:	2310      	movs	r3, #16
 8005b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b22:	e1e0      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005b24:	2320      	movs	r3, #32
 8005b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b2a:	e1dc      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005b2c:	2340      	movs	r3, #64	; 0x40
 8005b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b32:	e1d8      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005b34:	2380      	movs	r3, #128	; 0x80
 8005b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b3a:	e1d4      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a51      	ldr	r2, [pc, #324]	; (8005c88 <UART_SetConfig+0x350>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d130      	bne.n	8005ba8 <UART_SetConfig+0x270>
 8005b46:	4b4e      	ldr	r3, [pc, #312]	; (8005c80 <UART_SetConfig+0x348>)
 8005b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	2b05      	cmp	r3, #5
 8005b50:	d826      	bhi.n	8005ba0 <UART_SetConfig+0x268>
 8005b52:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <UART_SetConfig+0x220>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b71 	.word	0x08005b71
 8005b5c:	08005b79 	.word	0x08005b79
 8005b60:	08005b81 	.word	0x08005b81
 8005b64:	08005b89 	.word	0x08005b89
 8005b68:	08005b91 	.word	0x08005b91
 8005b6c:	08005b99 	.word	0x08005b99
 8005b70:	2300      	movs	r3, #0
 8005b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b76:	e1b6      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005b78:	2304      	movs	r3, #4
 8005b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b7e:	e1b2      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005b80:	2308      	movs	r3, #8
 8005b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b86:	e1ae      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005b88:	2310      	movs	r3, #16
 8005b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b8e:	e1aa      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005b90:	2320      	movs	r3, #32
 8005b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b96:	e1a6      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005b98:	2340      	movs	r3, #64	; 0x40
 8005b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b9e:	e1a2      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005ba0:	2380      	movs	r3, #128	; 0x80
 8005ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ba6:	e19e      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a37      	ldr	r2, [pc, #220]	; (8005c8c <UART_SetConfig+0x354>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d130      	bne.n	8005c14 <UART_SetConfig+0x2dc>
 8005bb2:	4b33      	ldr	r3, [pc, #204]	; (8005c80 <UART_SetConfig+0x348>)
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	2b05      	cmp	r3, #5
 8005bbc:	d826      	bhi.n	8005c0c <UART_SetConfig+0x2d4>
 8005bbe:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <UART_SetConfig+0x28c>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005bdd 	.word	0x08005bdd
 8005bc8:	08005be5 	.word	0x08005be5
 8005bcc:	08005bed 	.word	0x08005bed
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005bfd 	.word	0x08005bfd
 8005bd8:	08005c05 	.word	0x08005c05
 8005bdc:	2300      	movs	r3, #0
 8005bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005be2:	e180      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005be4:	2304      	movs	r3, #4
 8005be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bea:	e17c      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005bec:	2308      	movs	r3, #8
 8005bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bf2:	e178      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bfa:	e174      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005bfc:	2320      	movs	r3, #32
 8005bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c02:	e170      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005c04:	2340      	movs	r3, #64	; 0x40
 8005c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c0a:	e16c      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c12:	e168      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a1d      	ldr	r2, [pc, #116]	; (8005c90 <UART_SetConfig+0x358>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d142      	bne.n	8005ca4 <UART_SetConfig+0x36c>
 8005c1e:	4b18      	ldr	r3, [pc, #96]	; (8005c80 <UART_SetConfig+0x348>)
 8005c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c22:	f003 0307 	and.w	r3, r3, #7
 8005c26:	2b05      	cmp	r3, #5
 8005c28:	d838      	bhi.n	8005c9c <UART_SetConfig+0x364>
 8005c2a:	a201      	add	r2, pc, #4	; (adr r2, 8005c30 <UART_SetConfig+0x2f8>)
 8005c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c30:	08005c49 	.word	0x08005c49
 8005c34:	08005c51 	.word	0x08005c51
 8005c38:	08005c59 	.word	0x08005c59
 8005c3c:	08005c61 	.word	0x08005c61
 8005c40:	08005c69 	.word	0x08005c69
 8005c44:	08005c95 	.word	0x08005c95
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c4e:	e14a      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005c50:	2304      	movs	r3, #4
 8005c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c56:	e146      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005c58:	2308      	movs	r3, #8
 8005c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c5e:	e142      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005c60:	2310      	movs	r3, #16
 8005c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c66:	e13e      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005c68:	2320      	movs	r3, #32
 8005c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c6e:	e13a      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005c70:	cfff69f3 	.word	0xcfff69f3
 8005c74:	58000c00 	.word	0x58000c00
 8005c78:	11fff4ff 	.word	0x11fff4ff
 8005c7c:	40011000 	.word	0x40011000
 8005c80:	58024400 	.word	0x58024400
 8005c84:	40004400 	.word	0x40004400
 8005c88:	40004800 	.word	0x40004800
 8005c8c:	40004c00 	.word	0x40004c00
 8005c90:	40005000 	.word	0x40005000
 8005c94:	2340      	movs	r3, #64	; 0x40
 8005c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c9a:	e124      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005c9c:	2380      	movs	r3, #128	; 0x80
 8005c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ca2:	e120      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4acc      	ldr	r2, [pc, #816]	; (8005fdc <UART_SetConfig+0x6a4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d176      	bne.n	8005d9c <UART_SetConfig+0x464>
 8005cae:	4bcc      	ldr	r3, [pc, #816]	; (8005fe0 <UART_SetConfig+0x6a8>)
 8005cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cb6:	2b28      	cmp	r3, #40	; 0x28
 8005cb8:	d86c      	bhi.n	8005d94 <UART_SetConfig+0x45c>
 8005cba:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <UART_SetConfig+0x388>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005d65 	.word	0x08005d65
 8005cc4:	08005d95 	.word	0x08005d95
 8005cc8:	08005d95 	.word	0x08005d95
 8005ccc:	08005d95 	.word	0x08005d95
 8005cd0:	08005d95 	.word	0x08005d95
 8005cd4:	08005d95 	.word	0x08005d95
 8005cd8:	08005d95 	.word	0x08005d95
 8005cdc:	08005d95 	.word	0x08005d95
 8005ce0:	08005d6d 	.word	0x08005d6d
 8005ce4:	08005d95 	.word	0x08005d95
 8005ce8:	08005d95 	.word	0x08005d95
 8005cec:	08005d95 	.word	0x08005d95
 8005cf0:	08005d95 	.word	0x08005d95
 8005cf4:	08005d95 	.word	0x08005d95
 8005cf8:	08005d95 	.word	0x08005d95
 8005cfc:	08005d95 	.word	0x08005d95
 8005d00:	08005d75 	.word	0x08005d75
 8005d04:	08005d95 	.word	0x08005d95
 8005d08:	08005d95 	.word	0x08005d95
 8005d0c:	08005d95 	.word	0x08005d95
 8005d10:	08005d95 	.word	0x08005d95
 8005d14:	08005d95 	.word	0x08005d95
 8005d18:	08005d95 	.word	0x08005d95
 8005d1c:	08005d95 	.word	0x08005d95
 8005d20:	08005d7d 	.word	0x08005d7d
 8005d24:	08005d95 	.word	0x08005d95
 8005d28:	08005d95 	.word	0x08005d95
 8005d2c:	08005d95 	.word	0x08005d95
 8005d30:	08005d95 	.word	0x08005d95
 8005d34:	08005d95 	.word	0x08005d95
 8005d38:	08005d95 	.word	0x08005d95
 8005d3c:	08005d95 	.word	0x08005d95
 8005d40:	08005d85 	.word	0x08005d85
 8005d44:	08005d95 	.word	0x08005d95
 8005d48:	08005d95 	.word	0x08005d95
 8005d4c:	08005d95 	.word	0x08005d95
 8005d50:	08005d95 	.word	0x08005d95
 8005d54:	08005d95 	.word	0x08005d95
 8005d58:	08005d95 	.word	0x08005d95
 8005d5c:	08005d95 	.word	0x08005d95
 8005d60:	08005d8d 	.word	0x08005d8d
 8005d64:	2301      	movs	r3, #1
 8005d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d6a:	e0bc      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d72:	e0b8      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005d74:	2308      	movs	r3, #8
 8005d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d7a:	e0b4      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005d7c:	2310      	movs	r3, #16
 8005d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d82:	e0b0      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005d84:	2320      	movs	r3, #32
 8005d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d8a:	e0ac      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005d8c:	2340      	movs	r3, #64	; 0x40
 8005d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d92:	e0a8      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005d94:	2380      	movs	r3, #128	; 0x80
 8005d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d9a:	e0a4      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a90      	ldr	r2, [pc, #576]	; (8005fe4 <UART_SetConfig+0x6ac>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d130      	bne.n	8005e08 <UART_SetConfig+0x4d0>
 8005da6:	4b8e      	ldr	r3, [pc, #568]	; (8005fe0 <UART_SetConfig+0x6a8>)
 8005da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	2b05      	cmp	r3, #5
 8005db0:	d826      	bhi.n	8005e00 <UART_SetConfig+0x4c8>
 8005db2:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <UART_SetConfig+0x480>)
 8005db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db8:	08005dd1 	.word	0x08005dd1
 8005dbc:	08005dd9 	.word	0x08005dd9
 8005dc0:	08005de1 	.word	0x08005de1
 8005dc4:	08005de9 	.word	0x08005de9
 8005dc8:	08005df1 	.word	0x08005df1
 8005dcc:	08005df9 	.word	0x08005df9
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dd6:	e086      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005dd8:	2304      	movs	r3, #4
 8005dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dde:	e082      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005de0:	2308      	movs	r3, #8
 8005de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005de6:	e07e      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005de8:	2310      	movs	r3, #16
 8005dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dee:	e07a      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005df0:	2320      	movs	r3, #32
 8005df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005df6:	e076      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005df8:	2340      	movs	r3, #64	; 0x40
 8005dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dfe:	e072      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005e00:	2380      	movs	r3, #128	; 0x80
 8005e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e06:	e06e      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a76      	ldr	r2, [pc, #472]	; (8005fe8 <UART_SetConfig+0x6b0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d130      	bne.n	8005e74 <UART_SetConfig+0x53c>
 8005e12:	4b73      	ldr	r3, [pc, #460]	; (8005fe0 <UART_SetConfig+0x6a8>)
 8005e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	2b05      	cmp	r3, #5
 8005e1c:	d826      	bhi.n	8005e6c <UART_SetConfig+0x534>
 8005e1e:	a201      	add	r2, pc, #4	; (adr r2, 8005e24 <UART_SetConfig+0x4ec>)
 8005e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e24:	08005e3d 	.word	0x08005e3d
 8005e28:	08005e45 	.word	0x08005e45
 8005e2c:	08005e4d 	.word	0x08005e4d
 8005e30:	08005e55 	.word	0x08005e55
 8005e34:	08005e5d 	.word	0x08005e5d
 8005e38:	08005e65 	.word	0x08005e65
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e42:	e050      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005e44:	2304      	movs	r3, #4
 8005e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4a:	e04c      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005e4c:	2308      	movs	r3, #8
 8005e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e52:	e048      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005e54:	2310      	movs	r3, #16
 8005e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e5a:	e044      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005e5c:	2320      	movs	r3, #32
 8005e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e62:	e040      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005e64:	2340      	movs	r3, #64	; 0x40
 8005e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e6a:	e03c      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005e6c:	2380      	movs	r3, #128	; 0x80
 8005e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e72:	e038      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a5c      	ldr	r2, [pc, #368]	; (8005fec <UART_SetConfig+0x6b4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d130      	bne.n	8005ee0 <UART_SetConfig+0x5a8>
 8005e7e:	4b58      	ldr	r3, [pc, #352]	; (8005fe0 <UART_SetConfig+0x6a8>)
 8005e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	2b05      	cmp	r3, #5
 8005e88:	d826      	bhi.n	8005ed8 <UART_SetConfig+0x5a0>
 8005e8a:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <UART_SetConfig+0x558>)
 8005e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e90:	08005ea9 	.word	0x08005ea9
 8005e94:	08005eb1 	.word	0x08005eb1
 8005e98:	08005eb9 	.word	0x08005eb9
 8005e9c:	08005ec1 	.word	0x08005ec1
 8005ea0:	08005ec9 	.word	0x08005ec9
 8005ea4:	08005ed1 	.word	0x08005ed1
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eae:	e01a      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005eb0:	2304      	movs	r3, #4
 8005eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eb6:	e016      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005eb8:	2308      	movs	r3, #8
 8005eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ebe:	e012      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005ec0:	2310      	movs	r3, #16
 8005ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ec6:	e00e      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005ec8:	2320      	movs	r3, #32
 8005eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ece:	e00a      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005ed0:	2340      	movs	r3, #64	; 0x40
 8005ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ed6:	e006      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005ed8:	2380      	movs	r3, #128	; 0x80
 8005eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ede:	e002      	b.n	8005ee6 <UART_SetConfig+0x5ae>
 8005ee0:	2380      	movs	r3, #128	; 0x80
 8005ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a40      	ldr	r2, [pc, #256]	; (8005fec <UART_SetConfig+0x6b4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	f040 80ef 	bne.w	80060d0 <UART_SetConfig+0x798>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ef2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	dc46      	bgt.n	8005f88 <UART_SetConfig+0x650>
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	f2c0 8081 	blt.w	8006002 <UART_SetConfig+0x6ca>
 8005f00:	3b02      	subs	r3, #2
 8005f02:	2b1e      	cmp	r3, #30
 8005f04:	d87d      	bhi.n	8006002 <UART_SetConfig+0x6ca>
 8005f06:	a201      	add	r2, pc, #4	; (adr r2, 8005f0c <UART_SetConfig+0x5d4>)
 8005f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0c:	08005f8f 	.word	0x08005f8f
 8005f10:	08006003 	.word	0x08006003
 8005f14:	08005f97 	.word	0x08005f97
 8005f18:	08006003 	.word	0x08006003
 8005f1c:	08006003 	.word	0x08006003
 8005f20:	08006003 	.word	0x08006003
 8005f24:	08005fa7 	.word	0x08005fa7
 8005f28:	08006003 	.word	0x08006003
 8005f2c:	08006003 	.word	0x08006003
 8005f30:	08006003 	.word	0x08006003
 8005f34:	08006003 	.word	0x08006003
 8005f38:	08006003 	.word	0x08006003
 8005f3c:	08006003 	.word	0x08006003
 8005f40:	08006003 	.word	0x08006003
 8005f44:	08005fb7 	.word	0x08005fb7
 8005f48:	08006003 	.word	0x08006003
 8005f4c:	08006003 	.word	0x08006003
 8005f50:	08006003 	.word	0x08006003
 8005f54:	08006003 	.word	0x08006003
 8005f58:	08006003 	.word	0x08006003
 8005f5c:	08006003 	.word	0x08006003
 8005f60:	08006003 	.word	0x08006003
 8005f64:	08006003 	.word	0x08006003
 8005f68:	08006003 	.word	0x08006003
 8005f6c:	08006003 	.word	0x08006003
 8005f70:	08006003 	.word	0x08006003
 8005f74:	08006003 	.word	0x08006003
 8005f78:	08006003 	.word	0x08006003
 8005f7c:	08006003 	.word	0x08006003
 8005f80:	08006003 	.word	0x08006003
 8005f84:	08005ff5 	.word	0x08005ff5
 8005f88:	2b40      	cmp	r3, #64	; 0x40
 8005f8a:	d036      	beq.n	8005ffa <UART_SetConfig+0x6c2>
 8005f8c:	e039      	b.n	8006002 <UART_SetConfig+0x6ca>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f8e:	f7fd febf 	bl	8003d10 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f94:	e03b      	b.n	800600e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f96:	f107 0314 	add.w	r3, r7, #20
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fd fece 	bl	8003d3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fa4:	e033      	b.n	800600e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fa6:	f107 0308 	add.w	r3, r7, #8
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe f81a 	bl	8003fe4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fb4:	e02b      	b.n	800600e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fb6:	4b0a      	ldr	r3, [pc, #40]	; (8005fe0 <UART_SetConfig+0x6a8>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d009      	beq.n	8005fd6 <UART_SetConfig+0x69e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005fc2:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <UART_SetConfig+0x6a8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	08db      	lsrs	r3, r3, #3
 8005fc8:	f003 0303 	and.w	r3, r3, #3
 8005fcc:	4a08      	ldr	r2, [pc, #32]	; (8005ff0 <UART_SetConfig+0x6b8>)
 8005fce:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005fd4:	e01b      	b.n	800600e <UART_SetConfig+0x6d6>
          pclk = (uint32_t) HSI_VALUE;
 8005fd6:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <UART_SetConfig+0x6b8>)
 8005fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fda:	e018      	b.n	800600e <UART_SetConfig+0x6d6>
 8005fdc:	40011400 	.word	0x40011400
 8005fe0:	58024400 	.word	0x58024400
 8005fe4:	40007800 	.word	0x40007800
 8005fe8:	40007c00 	.word	0x40007c00
 8005fec:	58000c00 	.word	0x58000c00
 8005ff0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ff4:	4bc4      	ldr	r3, [pc, #784]	; (8006308 <UART_SetConfig+0x9d0>)
 8005ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ff8:	e009      	b.n	800600e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006000:	e005      	b.n	800600e <UART_SetConfig+0x6d6>
      default:
        pclk = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800600c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 81da 	beq.w	80063ca <UART_SetConfig+0xa92>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	4abc      	ldr	r2, [pc, #752]	; (800630c <UART_SetConfig+0x9d4>)
 800601c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006020:	461a      	mov	r2, r3
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	fbb3 f3f2 	udiv	r3, r3, r2
 8006028:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	4613      	mov	r3, r2
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	4413      	add	r3, r2
 8006034:	6a3a      	ldr	r2, [r7, #32]
 8006036:	429a      	cmp	r2, r3
 8006038:	d305      	bcc.n	8006046 <UART_SetConfig+0x70e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006040:	6a3a      	ldr	r2, [r7, #32]
 8006042:	429a      	cmp	r2, r3
 8006044:	d903      	bls.n	800604e <UART_SetConfig+0x716>
      {
        ret = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800604c:	e1bd      	b.n	80063ca <UART_SetConfig+0xa92>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800604e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006050:	4618      	mov	r0, r3
 8006052:	f04f 0100 	mov.w	r1, #0
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	4aac      	ldr	r2, [pc, #688]	; (800630c <UART_SetConfig+0x9d4>)
 800605c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006060:	b29a      	uxth	r2, r3
 8006062:	f04f 0300 	mov.w	r3, #0
 8006066:	f7fa f937 	bl	80002d8 <__aeabi_uldivmod>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	4610      	mov	r0, r2
 8006070:	4619      	mov	r1, r3
 8006072:	f04f 0200 	mov.w	r2, #0
 8006076:	f04f 0300 	mov.w	r3, #0
 800607a:	020b      	lsls	r3, r1, #8
 800607c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006080:	0202      	lsls	r2, r0, #8
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	6849      	ldr	r1, [r1, #4]
 8006086:	0849      	lsrs	r1, r1, #1
 8006088:	4608      	mov	r0, r1
 800608a:	f04f 0100 	mov.w	r1, #0
 800608e:	1814      	adds	r4, r2, r0
 8006090:	eb43 0501 	adc.w	r5, r3, r1
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	461a      	mov	r2, r3
 800609a:	f04f 0300 	mov.w	r3, #0
 800609e:	4620      	mov	r0, r4
 80060a0:	4629      	mov	r1, r5
 80060a2:	f7fa f919 	bl	80002d8 <__aeabi_uldivmod>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4613      	mov	r3, r2
 80060ac:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060b4:	d308      	bcc.n	80060c8 <UART_SetConfig+0x790>
 80060b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060bc:	d204      	bcs.n	80060c8 <UART_SetConfig+0x790>
        {
          huart->Instance->BRR = usartdiv;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c4:	60da      	str	r2, [r3, #12]
 80060c6:	e180      	b.n	80063ca <UART_SetConfig+0xa92>
        }
        else
        {
          ret = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80060ce:	e17c      	b.n	80063ca <UART_SetConfig+0xa92>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d8:	f040 80bf 	bne.w	800625a <UART_SetConfig+0x922>
  {
    switch (clocksource)
 80060dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	dc49      	bgt.n	8006178 <UART_SetConfig+0x840>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	db7c      	blt.n	80061e2 <UART_SetConfig+0x8aa>
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d87a      	bhi.n	80061e2 <UART_SetConfig+0x8aa>
 80060ec:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <UART_SetConfig+0x7bc>)
 80060ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f2:	bf00      	nop
 80060f4:	0800617f 	.word	0x0800617f
 80060f8:	08006187 	.word	0x08006187
 80060fc:	080061e3 	.word	0x080061e3
 8006100:	080061e3 	.word	0x080061e3
 8006104:	0800618f 	.word	0x0800618f
 8006108:	080061e3 	.word	0x080061e3
 800610c:	080061e3 	.word	0x080061e3
 8006110:	080061e3 	.word	0x080061e3
 8006114:	0800619f 	.word	0x0800619f
 8006118:	080061e3 	.word	0x080061e3
 800611c:	080061e3 	.word	0x080061e3
 8006120:	080061e3 	.word	0x080061e3
 8006124:	080061e3 	.word	0x080061e3
 8006128:	080061e3 	.word	0x080061e3
 800612c:	080061e3 	.word	0x080061e3
 8006130:	080061e3 	.word	0x080061e3
 8006134:	080061af 	.word	0x080061af
 8006138:	080061e3 	.word	0x080061e3
 800613c:	080061e3 	.word	0x080061e3
 8006140:	080061e3 	.word	0x080061e3
 8006144:	080061e3 	.word	0x080061e3
 8006148:	080061e3 	.word	0x080061e3
 800614c:	080061e3 	.word	0x080061e3
 8006150:	080061e3 	.word	0x080061e3
 8006154:	080061e3 	.word	0x080061e3
 8006158:	080061e3 	.word	0x080061e3
 800615c:	080061e3 	.word	0x080061e3
 8006160:	080061e3 	.word	0x080061e3
 8006164:	080061e3 	.word	0x080061e3
 8006168:	080061e3 	.word	0x080061e3
 800616c:	080061e3 	.word	0x080061e3
 8006170:	080061e3 	.word	0x080061e3
 8006174:	080061d5 	.word	0x080061d5
 8006178:	2b40      	cmp	r3, #64	; 0x40
 800617a:	d02e      	beq.n	80061da <UART_SetConfig+0x8a2>
 800617c:	e031      	b.n	80061e2 <UART_SetConfig+0x8aa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800617e:	f7fc fe6b 	bl	8002e58 <HAL_RCC_GetPCLK1Freq>
 8006182:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006184:	e033      	b.n	80061ee <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006186:	f7fc fe7d 	bl	8002e84 <HAL_RCC_GetPCLK2Freq>
 800618a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800618c:	e02f      	b.n	80061ee <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800618e:	f107 0314 	add.w	r3, r7, #20
 8006192:	4618      	mov	r0, r3
 8006194:	f7fd fdd2 	bl	8003d3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800619c:	e027      	b.n	80061ee <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800619e:	f107 0308 	add.w	r3, r7, #8
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fd ff1e 	bl	8003fe4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061ac:	e01f      	b.n	80061ee <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061ae:	4b58      	ldr	r3, [pc, #352]	; (8006310 <UART_SetConfig+0x9d8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0320 	and.w	r3, r3, #32
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d009      	beq.n	80061ce <UART_SetConfig+0x896>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061ba:	4b55      	ldr	r3, [pc, #340]	; (8006310 <UART_SetConfig+0x9d8>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	08db      	lsrs	r3, r3, #3
 80061c0:	f003 0303 	and.w	r3, r3, #3
 80061c4:	4a53      	ldr	r2, [pc, #332]	; (8006314 <UART_SetConfig+0x9dc>)
 80061c6:	fa22 f303 	lsr.w	r3, r2, r3
 80061ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061cc:	e00f      	b.n	80061ee <UART_SetConfig+0x8b6>
          pclk = (uint32_t) HSI_VALUE;
 80061ce:	4b51      	ldr	r3, [pc, #324]	; (8006314 <UART_SetConfig+0x9dc>)
 80061d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061d2:	e00c      	b.n	80061ee <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061d4:	4b4c      	ldr	r3, [pc, #304]	; (8006308 <UART_SetConfig+0x9d0>)
 80061d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061d8:	e009      	b.n	80061ee <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061e0:	e005      	b.n	80061ee <UART_SetConfig+0x8b6>
      default:
        pclk = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80061ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 80ea 	beq.w	80063ca <UART_SetConfig+0xa92>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	4a44      	ldr	r2, [pc, #272]	; (800630c <UART_SetConfig+0x9d4>)
 80061fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006200:	461a      	mov	r2, r3
 8006202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006204:	fbb3 f3f2 	udiv	r3, r3, r2
 8006208:	005a      	lsls	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	085b      	lsrs	r3, r3, #1
 8006210:	441a      	add	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	fbb2 f3f3 	udiv	r3, r2, r3
 800621a:	b29b      	uxth	r3, r3
 800621c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	2b0f      	cmp	r3, #15
 8006222:	d916      	bls.n	8006252 <UART_SetConfig+0x91a>
 8006224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800622a:	d212      	bcs.n	8006252 <UART_SetConfig+0x91a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	b29b      	uxth	r3, r3
 8006230:	f023 030f 	bic.w	r3, r3, #15
 8006234:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	085b      	lsrs	r3, r3, #1
 800623a:	b29b      	uxth	r3, r3
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	b29a      	uxth	r2, r3
 8006242:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006244:	4313      	orrs	r3, r2
 8006246:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800624e:	60da      	str	r2, [r3, #12]
 8006250:	e0bb      	b.n	80063ca <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006258:	e0b7      	b.n	80063ca <UART_SetConfig+0xa92>
      }
    }
  }
  else
  {
    switch (clocksource)
 800625a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800625e:	2b20      	cmp	r3, #32
 8006260:	dc4a      	bgt.n	80062f8 <UART_SetConfig+0x9c0>
 8006262:	2b00      	cmp	r3, #0
 8006264:	f2c0 8086 	blt.w	8006374 <UART_SetConfig+0xa3c>
 8006268:	2b20      	cmp	r3, #32
 800626a:	f200 8083 	bhi.w	8006374 <UART_SetConfig+0xa3c>
 800626e:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <UART_SetConfig+0x93c>)
 8006270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006274:	080062ff 	.word	0x080062ff
 8006278:	08006319 	.word	0x08006319
 800627c:	08006375 	.word	0x08006375
 8006280:	08006375 	.word	0x08006375
 8006284:	08006321 	.word	0x08006321
 8006288:	08006375 	.word	0x08006375
 800628c:	08006375 	.word	0x08006375
 8006290:	08006375 	.word	0x08006375
 8006294:	08006331 	.word	0x08006331
 8006298:	08006375 	.word	0x08006375
 800629c:	08006375 	.word	0x08006375
 80062a0:	08006375 	.word	0x08006375
 80062a4:	08006375 	.word	0x08006375
 80062a8:	08006375 	.word	0x08006375
 80062ac:	08006375 	.word	0x08006375
 80062b0:	08006375 	.word	0x08006375
 80062b4:	08006341 	.word	0x08006341
 80062b8:	08006375 	.word	0x08006375
 80062bc:	08006375 	.word	0x08006375
 80062c0:	08006375 	.word	0x08006375
 80062c4:	08006375 	.word	0x08006375
 80062c8:	08006375 	.word	0x08006375
 80062cc:	08006375 	.word	0x08006375
 80062d0:	08006375 	.word	0x08006375
 80062d4:	08006375 	.word	0x08006375
 80062d8:	08006375 	.word	0x08006375
 80062dc:	08006375 	.word	0x08006375
 80062e0:	08006375 	.word	0x08006375
 80062e4:	08006375 	.word	0x08006375
 80062e8:	08006375 	.word	0x08006375
 80062ec:	08006375 	.word	0x08006375
 80062f0:	08006375 	.word	0x08006375
 80062f4:	08006367 	.word	0x08006367
 80062f8:	2b40      	cmp	r3, #64	; 0x40
 80062fa:	d037      	beq.n	800636c <UART_SetConfig+0xa34>
 80062fc:	e03a      	b.n	8006374 <UART_SetConfig+0xa3c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062fe:	f7fc fdab 	bl	8002e58 <HAL_RCC_GetPCLK1Freq>
 8006302:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006304:	e03c      	b.n	8006380 <UART_SetConfig+0xa48>
 8006306:	bf00      	nop
 8006308:	003d0900 	.word	0x003d0900
 800630c:	08006d08 	.word	0x08006d08
 8006310:	58024400 	.word	0x58024400
 8006314:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006318:	f7fc fdb4 	bl	8002e84 <HAL_RCC_GetPCLK2Freq>
 800631c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800631e:	e02f      	b.n	8006380 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006320:	f107 0314 	add.w	r3, r7, #20
 8006324:	4618      	mov	r0, r3
 8006326:	f7fd fd09 	bl	8003d3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800632e:	e027      	b.n	8006380 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006330:	f107 0308 	add.w	r3, r7, #8
 8006334:	4618      	mov	r0, r3
 8006336:	f7fd fe55 	bl	8003fe4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800633e:	e01f      	b.n	8006380 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006340:	4b2c      	ldr	r3, [pc, #176]	; (80063f4 <UART_SetConfig+0xabc>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b00      	cmp	r3, #0
 800634a:	d009      	beq.n	8006360 <UART_SetConfig+0xa28>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800634c:	4b29      	ldr	r3, [pc, #164]	; (80063f4 <UART_SetConfig+0xabc>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	08db      	lsrs	r3, r3, #3
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	4a28      	ldr	r2, [pc, #160]	; (80063f8 <UART_SetConfig+0xac0>)
 8006358:	fa22 f303 	lsr.w	r3, r2, r3
 800635c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800635e:	e00f      	b.n	8006380 <UART_SetConfig+0xa48>
          pclk = (uint32_t) HSI_VALUE;
 8006360:	4b25      	ldr	r3, [pc, #148]	; (80063f8 <UART_SetConfig+0xac0>)
 8006362:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006364:	e00c      	b.n	8006380 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006366:	4b25      	ldr	r3, [pc, #148]	; (80063fc <UART_SetConfig+0xac4>)
 8006368:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800636a:	e009      	b.n	8006380 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800636c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006372:	e005      	b.n	8006380 <UART_SetConfig+0xa48>
      default:
        pclk = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800637e:	bf00      	nop
    }

    if (pclk != 0U)
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	2b00      	cmp	r3, #0
 8006384:	d021      	beq.n	80063ca <UART_SetConfig+0xa92>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	4a1d      	ldr	r2, [pc, #116]	; (8006400 <UART_SetConfig+0xac8>)
 800638c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006390:	461a      	mov	r2, r3
 8006392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006394:	fbb3 f2f2 	udiv	r2, r3, r2
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	085b      	lsrs	r3, r3, #1
 800639e:	441a      	add	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ae:	2b0f      	cmp	r3, #15
 80063b0:	d908      	bls.n	80063c4 <UART_SetConfig+0xa8c>
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063b8:	d204      	bcs.n	80063c4 <UART_SetConfig+0xa8c>
      {
        huart->Instance->BRR = usartdiv;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c0:	60da      	str	r2, [r3, #12]
 80063c2:	e002      	b.n	80063ca <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80063e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3738      	adds	r7, #56	; 0x38
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bdb0      	pop	{r4, r5, r7, pc}
 80063f2:	bf00      	nop
 80063f4:	58024400 	.word	0x58024400
 80063f8:	03d09000 	.word	0x03d09000
 80063fc:	003d0900 	.word	0x003d0900
 8006400:	08006d08 	.word	0x08006d08

08006404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006476:	f003 0308 	and.w	r3, r3, #8
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d01a      	beq.n	800651a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006502:	d10a      	bne.n	800651a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	605a      	str	r2, [r3, #4]
  }
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af02      	add	r7, sp, #8
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006558:	f7fb f9ec 	bl	8001934 <HAL_GetTick>
 800655c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b08      	cmp	r3, #8
 800656a:	d10e      	bne.n	800658a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800656c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f82c 	bl	80065d8 <UART_WaitOnFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e022      	b.n	80065d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b04      	cmp	r3, #4
 8006596:	d10e      	bne.n	80065b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006598:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f816 	bl	80065d8 <UART_WaitOnFlagUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e00c      	b.n	80065d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	603b      	str	r3, [r7, #0]
 80065e4:	4613      	mov	r3, r2
 80065e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065e8:	e062      	b.n	80066b0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f0:	d05e      	beq.n	80066b0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f2:	f7fb f99f 	bl	8001934 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d302      	bcc.n	8006608 <UART_WaitOnFlagUntilTimeout+0x30>
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d11d      	bne.n	8006644 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006616:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689a      	ldr	r2, [r3, #8]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0201 	bic.w	r2, r2, #1
 8006626:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2220      	movs	r2, #32
 800662c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2220      	movs	r2, #32
 8006634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e045      	b.n	80066d0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0304 	and.w	r3, r3, #4
 800664e:	2b00      	cmp	r3, #0
 8006650:	d02e      	beq.n	80066b0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800665c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006660:	d126      	bne.n	80066b0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800666a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800667a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689a      	ldr	r2, [r3, #8]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0201 	bic.w	r2, r2, #1
 800668a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2220      	movs	r2, #32
 8006690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2220      	movs	r2, #32
 8006698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2220      	movs	r2, #32
 80066a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e00f      	b.n	80066d0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	69da      	ldr	r2, [r3, #28]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	4013      	ands	r3, r2
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	429a      	cmp	r2, r3
 80066be:	bf0c      	ite	eq
 80066c0:	2301      	moveq	r3, #1
 80066c2:	2300      	movne	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	461a      	mov	r2, r3
 80066c8:	79fb      	ldrb	r3, [r7, #7]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d08d      	beq.n	80065ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80066e6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066ee:	2b22      	cmp	r3, #34	; 0x22
 80066f0:	d13b      	bne.n	800676a <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066fa:	89bb      	ldrh	r3, [r7, #12]
 80066fc:	b2d9      	uxtb	r1, r3
 80066fe:	89fb      	ldrh	r3, [r7, #14]
 8006700:	b2da      	uxtb	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006706:	400a      	ands	r2, r1
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800671c:	b29b      	uxth	r3, r3
 800671e:	3b01      	subs	r3, #1
 8006720:	b29a      	uxth	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d122      	bne.n	800677a <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006742:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689a      	ldr	r2, [r3, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0201 	bic.w	r2, r2, #1
 8006752:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2220      	movs	r2, #32
 8006758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7ff f8de 	bl	8005924 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006768:	e007      	b.n	800677a <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	699a      	ldr	r2, [r3, #24]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 0208 	orr.w	r2, r2, #8
 8006778:	619a      	str	r2, [r3, #24]
}
 800677a:	bf00      	nop
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006790:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006798:	2b22      	cmp	r3, #34	; 0x22
 800679a:	d13b      	bne.n	8006814 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80067aa:	89ba      	ldrh	r2, [r7, #12]
 80067ac:	89fb      	ldrh	r3, [r7, #14]
 80067ae:	4013      	ands	r3, r2
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ba:	1c9a      	adds	r2, r3, #2
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067d8:	b29b      	uxth	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d122      	bne.n	8006824 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067ec:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0201 	bic.w	r2, r2, #1
 80067fc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7ff f889 	bl	8005924 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006812:	e007      	b.n	8006824 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699a      	ldr	r2, [r3, #24]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0208 	orr.w	r2, r2, #8
 8006822:	619a      	str	r2, [r3, #24]
}
 8006824:	bf00      	nop
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800683a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006842:	2b22      	cmp	r3, #34	; 0x22
 8006844:	d166      	bne.n	8006914 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800684c:	81fb      	strh	r3, [r7, #14]
 800684e:	e03d      	b.n	80068cc <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006858:	893b      	ldrh	r3, [r7, #8]
 800685a:	b2d9      	uxtb	r1, r3
 800685c:	89bb      	ldrh	r3, [r7, #12]
 800685e:	b2da      	uxtb	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006864:	400a      	ands	r2, r1
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800688c:	b29b      	uxth	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d119      	bne.n	80068c6 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068a0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6899      	ldr	r1, [r3, #8]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	4b1f      	ldr	r3, [pc, #124]	; (800692c <UART_RxISR_8BIT_FIFOEN+0x100>)
 80068ae:	400b      	ands	r3, r1
 80068b0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff f82f 	bl	8005924 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80068c6:	89fb      	ldrh	r3, [r7, #14]
 80068c8:	3b01      	subs	r3, #1
 80068ca:	81fb      	strh	r3, [r7, #14]
 80068cc:	89fb      	ldrh	r3, [r7, #14]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1be      	bne.n	8006850 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068d8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80068da:	897b      	ldrh	r3, [r7, #10]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d021      	beq.n	8006924 <UART_RxISR_8BIT_FIFOEN+0xf8>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80068e6:	897a      	ldrh	r2, [r7, #10]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d21b      	bcs.n	8006924 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689a      	ldr	r2, [r3, #8]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80068fa:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a0c      	ldr	r2, [pc, #48]	; (8006930 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8006900:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f042 0220 	orr.w	r2, r2, #32
 8006910:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006912:	e007      	b.n	8006924 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699a      	ldr	r2, [r3, #24]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f042 0208 	orr.w	r2, r2, #8
 8006922:	619a      	str	r2, [r3, #24]
}
 8006924:	bf00      	nop
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	effffffe 	.word	0xeffffffe
 8006930:	080066d9 	.word	0x080066d9

08006934 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006942:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800694a:	2b22      	cmp	r3, #34	; 0x22
 800694c:	d166      	bne.n	8006a1c <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006954:	82fb      	strh	r3, [r7, #22]
 8006956:	e03d      	b.n	80069d4 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006964:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006966:	8a3a      	ldrh	r2, [r7, #16]
 8006968:	8abb      	ldrh	r3, [r7, #20]
 800696a:	4013      	ands	r3, r2
 800696c:	b29a      	uxth	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006976:	1c9a      	adds	r2, r3, #2
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006982:	b29b      	uxth	r3, r3
 8006984:	3b01      	subs	r3, #1
 8006986:	b29a      	uxth	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d119      	bne.n	80069ce <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069a8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6899      	ldr	r1, [r3, #8]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	4b1f      	ldr	r3, [pc, #124]	; (8006a34 <UART_RxISR_16BIT_FIFOEN+0x100>)
 80069b6:	400b      	ands	r3, r1
 80069b8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2220      	movs	r2, #32
 80069be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7fe ffab 	bl	8005924 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80069ce:	8afb      	ldrh	r3, [r7, #22]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	82fb      	strh	r3, [r7, #22]
 80069d4:	8afb      	ldrh	r3, [r7, #22]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1be      	bne.n	8006958 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069e0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80069e2:	8a7b      	ldrh	r3, [r7, #18]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d021      	beq.n	8006a2c <UART_RxISR_16BIT_FIFOEN+0xf8>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80069ee:	8a7a      	ldrh	r2, [r7, #18]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d21b      	bcs.n	8006a2c <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689a      	ldr	r2, [r3, #8]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006a02:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a0c      	ldr	r2, [pc, #48]	; (8006a38 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8006a08:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f042 0220 	orr.w	r2, r2, #32
 8006a18:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a1a:	e007      	b.n	8006a2c <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699a      	ldr	r2, [r3, #24]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0208 	orr.w	r2, r2, #8
 8006a2a:	619a      	str	r2, [r3, #24]
}
 8006a2c:	bf00      	nop
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	effffffe 	.word	0xeffffffe
 8006a38:	08006783 	.word	0x08006783

08006a3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d101      	bne.n	8006a52 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e027      	b.n	8006aa2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2224      	movs	r2, #36	; 0x24
 8006a5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0201 	bic.w	r2, r2, #1
 8006a78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d101      	bne.n	8006ac6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e02d      	b.n	8006b22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2224      	movs	r2, #36	; 0x24
 8006ad2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0201 	bic.w	r2, r2, #1
 8006aec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f850 	bl	8006ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d101      	bne.n	8006b42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b3e:	2302      	movs	r3, #2
 8006b40:	e02d      	b.n	8006b9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2224      	movs	r2, #36	; 0x24
 8006b4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0201 	bic.w	r2, r2, #1
 8006b68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f812 	bl	8006ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
	...

08006ba8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b089      	sub	sp, #36	; 0x24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006bb0:	4a2f      	ldr	r2, [pc, #188]	; (8006c70 <UARTEx_SetNbDataToProcess+0xc8>)
 8006bb2:	f107 0314 	add.w	r3, r7, #20
 8006bb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006bba:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006bbe:	4a2d      	ldr	r2, [pc, #180]	; (8006c74 <UARTEx_SetNbDataToProcess+0xcc>)
 8006bc0:	f107 030c 	add.w	r3, r7, #12
 8006bc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006bc8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d108      	bne.n	8006be6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006be4:	e03d      	b.n	8006c62 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006be6:	2310      	movs	r3, #16
 8006be8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006bea:	2310      	movs	r3, #16
 8006bec:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	0e5b      	lsrs	r3, r3, #25
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	f003 0307 	and.w	r3, r3, #7
 8006bfc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	0f5b      	lsrs	r3, r3, #29
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	f003 0307 	and.w	r3, r3, #7
 8006c0c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006c0e:	7fbb      	ldrb	r3, [r7, #30]
 8006c10:	7f3a      	ldrb	r2, [r7, #28]
 8006c12:	f107 0120 	add.w	r1, r7, #32
 8006c16:	440a      	add	r2, r1
 8006c18:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006c1c:	fb02 f303 	mul.w	r3, r2, r3
 8006c20:	7f3a      	ldrb	r2, [r7, #28]
 8006c22:	f107 0120 	add.w	r1, r7, #32
 8006c26:	440a      	add	r2, r1
 8006c28:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006c2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006c38:	7ffb      	ldrb	r3, [r7, #31]
 8006c3a:	7f7a      	ldrb	r2, [r7, #29]
 8006c3c:	f107 0120 	add.w	r1, r7, #32
 8006c40:	440a      	add	r2, r1
 8006c42:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006c46:	fb02 f303 	mul.w	r3, r2, r3
 8006c4a:	7f7a      	ldrb	r2, [r7, #29]
 8006c4c:	f107 0120 	add.w	r1, r7, #32
 8006c50:	440a      	add	r2, r1
 8006c52:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006c56:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006c62:	bf00      	nop
 8006c64:	3724      	adds	r7, #36	; 0x24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	08006ce8 	.word	0x08006ce8
 8006c74:	08006cf0 	.word	0x08006cf0

08006c78 <__libc_init_array>:
 8006c78:	b570      	push	{r4, r5, r6, lr}
 8006c7a:	4d0d      	ldr	r5, [pc, #52]	; (8006cb0 <__libc_init_array+0x38>)
 8006c7c:	4c0d      	ldr	r4, [pc, #52]	; (8006cb4 <__libc_init_array+0x3c>)
 8006c7e:	1b64      	subs	r4, r4, r5
 8006c80:	10a4      	asrs	r4, r4, #2
 8006c82:	2600      	movs	r6, #0
 8006c84:	42a6      	cmp	r6, r4
 8006c86:	d109      	bne.n	8006c9c <__libc_init_array+0x24>
 8006c88:	4d0b      	ldr	r5, [pc, #44]	; (8006cb8 <__libc_init_array+0x40>)
 8006c8a:	4c0c      	ldr	r4, [pc, #48]	; (8006cbc <__libc_init_array+0x44>)
 8006c8c:	f000 f820 	bl	8006cd0 <_init>
 8006c90:	1b64      	subs	r4, r4, r5
 8006c92:	10a4      	asrs	r4, r4, #2
 8006c94:	2600      	movs	r6, #0
 8006c96:	42a6      	cmp	r6, r4
 8006c98:	d105      	bne.n	8006ca6 <__libc_init_array+0x2e>
 8006c9a:	bd70      	pop	{r4, r5, r6, pc}
 8006c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca0:	4798      	blx	r3
 8006ca2:	3601      	adds	r6, #1
 8006ca4:	e7ee      	b.n	8006c84 <__libc_init_array+0xc>
 8006ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006caa:	4798      	blx	r3
 8006cac:	3601      	adds	r6, #1
 8006cae:	e7f2      	b.n	8006c96 <__libc_init_array+0x1e>
 8006cb0:	08006d28 	.word	0x08006d28
 8006cb4:	08006d28 	.word	0x08006d28
 8006cb8:	08006d28 	.word	0x08006d28
 8006cbc:	08006d2c 	.word	0x08006d2c

08006cc0 <memset>:
 8006cc0:	4402      	add	r2, r0
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d100      	bne.n	8006cca <memset+0xa>
 8006cc8:	4770      	bx	lr
 8006cca:	f803 1b01 	strb.w	r1, [r3], #1
 8006cce:	e7f9      	b.n	8006cc4 <memset+0x4>

08006cd0 <_init>:
 8006cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd2:	bf00      	nop
 8006cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cd6:	bc08      	pop	{r3}
 8006cd8:	469e      	mov	lr, r3
 8006cda:	4770      	bx	lr

08006cdc <_fini>:
 8006cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cde:	bf00      	nop
 8006ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ce2:	bc08      	pop	{r3}
 8006ce4:	469e      	mov	lr, r3
 8006ce6:	4770      	bx	lr
