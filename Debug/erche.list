
erche.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d50  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007020  08007020  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08007020  08007020  00017020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007028  08007028  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007028  08007028  00017028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800702c  0800702c  0001702c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  24000000  08007030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  24000024  08007054  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400029c  08007054  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a27c  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002982  00000000  00000000  0003a2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  0003cc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  0003dbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035fb7  00000000  00000000  0003eaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b57  00000000  00000000  00074a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015f030  00000000  00000000  000865b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e55e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004254  00000000  00000000  001e563c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000024 	.word	0x24000024
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006fd0 	.word	0x08006fd0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000028 	.word	0x24000028
 80002d4:	08006fd0 	.word	0x08006fd0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <move>:
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,25);
		HAL_Delay(700);*/
	}
}
void move(int n)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if(n==1)//直行
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	f040 80c0 	bne.w	8000760 <move+0x190>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 80005e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e4:	48a0      	ldr	r0, [pc, #640]	; (8000868 <move+0x298>)
 80005e6:	f001 fdf5 	bl	80021d4 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d127      	bne.n	8000640 <move+0x70>
 80005f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f4:	489c      	ldr	r0, [pc, #624]	; (8000868 <move+0x298>)
 80005f6:	f001 fded 	bl	80021d4 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d11f      	bne.n	8000640 <move+0x70>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,29);
 8000600:	4b9a      	ldr	r3, [pc, #616]	; (800086c <move+0x29c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	221d      	movs	r2, #29
 8000606:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000608:	4b98      	ldr	r3, [pc, #608]	; (800086c <move+0x29c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,26);
 8000610:	4b96      	ldr	r3, [pc, #600]	; (800086c <move+0x29c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	221a      	movs	r2, #26
 8000616:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000618:	4b94      	ldr	r3, [pc, #592]	; (800086c <move+0x29c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2200      	movs	r2, #0
 800061e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,14);
 8000620:	4b93      	ldr	r3, [pc, #588]	; (8000870 <move+0x2a0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	220e      	movs	r2, #14
 8000626:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000628:	4b91      	ldr	r3, [pc, #580]	; (8000870 <move+0x2a0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,30);
 8000630:	4b8f      	ldr	r3, [pc, #572]	; (8000870 <move+0x2a0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	221e      	movs	r2, #30
 8000636:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000638:	4b8d      	ldr	r3, [pc, #564]	; (8000870 <move+0x2a0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2200      	movs	r2, #0
 800063e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 8000640:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000644:	4888      	ldr	r0, [pc, #544]	; (8000868 <move+0x298>)
 8000646:	f001 fdc5 	bl	80021d4 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d127      	bne.n	80006a0 <move+0xd0>
 8000650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000654:	4884      	ldr	r0, [pc, #528]	; (8000868 <move+0x298>)
 8000656:	f001 fdbd 	bl	80021d4 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d11f      	bne.n	80006a0 <move+0xd0>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,29);
 8000660:	4b82      	ldr	r3, [pc, #520]	; (800086c <move+0x29c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	221d      	movs	r2, #29
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000668:	4b80      	ldr	r3, [pc, #512]	; (800086c <move+0x29c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,26);
 8000670:	4b7e      	ldr	r3, [pc, #504]	; (800086c <move+0x29c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	221a      	movs	r2, #26
 8000676:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000678:	4b7c      	ldr	r3, [pc, #496]	; (800086c <move+0x29c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2200      	movs	r2, #0
 800067e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,30);
 8000680:	4b7b      	ldr	r3, [pc, #492]	; (8000870 <move+0x2a0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	221e      	movs	r2, #30
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000688:	4b79      	ldr	r3, [pc, #484]	; (8000870 <move+0x2a0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,16);
 8000690:	4b77      	ldr	r3, [pc, #476]	; (8000870 <move+0x2a0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2210      	movs	r2, #16
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000698:	4b75      	ldr	r3, [pc, #468]	; (8000870 <move+0x2a0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2200      	movs	r2, #0
 800069e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==1)
 80006a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a4:	4870      	ldr	r0, [pc, #448]	; (8000868 <move+0x298>)
 80006a6:	f001 fd95 	bl	80021d4 <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d127      	bne.n	8000700 <move+0x130>
 80006b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b4:	486c      	ldr	r0, [pc, #432]	; (8000868 <move+0x298>)
 80006b6:	f001 fd8d 	bl	80021d4 <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d11f      	bne.n	8000700 <move+0x130>
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,29);
 80006c0:	4b6a      	ldr	r3, [pc, #424]	; (800086c <move+0x29c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	221d      	movs	r2, #29
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80006c8:	4b68      	ldr	r3, [pc, #416]	; (800086c <move+0x29c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2200      	movs	r2, #0
 80006ce:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,26);
 80006d0:	4b66      	ldr	r3, [pc, #408]	; (800086c <move+0x29c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	221a      	movs	r2, #26
 80006d6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80006d8:	4b64      	ldr	r3, [pc, #400]	; (800086c <move+0x29c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2200      	movs	r2, #0
 80006de:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,14);
 80006e0:	4b63      	ldr	r3, [pc, #396]	; (8000870 <move+0x2a0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	220e      	movs	r2, #14
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 80006e8:	4b61      	ldr	r3, [pc, #388]	; (8000870 <move+0x2a0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2200      	movs	r2, #0
 80006ee:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,16);
 80006f0:	4b5f      	ldr	r3, [pc, #380]	; (8000870 <move+0x2a0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2210      	movs	r2, #16
 80006f6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 80006f8:	4b5d      	ldr	r3, [pc, #372]	; (8000870 <move+0x2a0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2200      	movs	r2, #0
 80006fe:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0&&HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0)
 8000700:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000704:	4858      	ldr	r0, [pc, #352]	; (8000868 <move+0x298>)
 8000706:	f001 fd65 	bl	80021d4 <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d127      	bne.n	8000760 <move+0x190>
 8000710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000714:	4854      	ldr	r0, [pc, #336]	; (8000868 <move+0x298>)
 8000716:	f001 fd5d 	bl	80021d4 <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d11f      	bne.n	8000760 <move+0x190>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 8000720:	4b52      	ldr	r3, [pc, #328]	; (800086c <move+0x29c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2264      	movs	r2, #100	; 0x64
 8000726:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 8000728:	4b50      	ldr	r3, [pc, #320]	; (800086c <move+0x29c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2264      	movs	r2, #100	; 0x64
 800072e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 8000730:	4b4e      	ldr	r3, [pc, #312]	; (800086c <move+0x29c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2264      	movs	r2, #100	; 0x64
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 8000738:	4b4c      	ldr	r3, [pc, #304]	; (800086c <move+0x29c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2264      	movs	r2, #100	; 0x64
 800073e:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 8000740:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <move+0x2a0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2264      	movs	r2, #100	; 0x64
 8000746:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 8000748:	4b49      	ldr	r3, [pc, #292]	; (8000870 <move+0x2a0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2264      	movs	r2, #100	; 0x64
 800074e:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 8000750:	4b47      	ldr	r3, [pc, #284]	; (8000870 <move+0x2a0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2264      	movs	r2, #100	; 0x64
 8000756:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 8000758:	4b45      	ldr	r3, [pc, #276]	; (8000870 <move+0x2a0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2264      	movs	r2, #100	; 0x64
 800075e:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	if(n==2)//右行
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b02      	cmp	r3, #2
 8000764:	f040 80c7 	bne.w	80008f6 <move+0x326>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1)
 8000768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076c:	4841      	ldr	r0, [pc, #260]	; (8000874 <move+0x2a4>)
 800076e:	f001 fd31 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d126      	bne.n	80007c6 <move+0x1f6>
 8000778:	2120      	movs	r1, #32
 800077a:	483f      	ldr	r0, [pc, #252]	; (8000878 <move+0x2a8>)
 800077c:	f001 fd2a 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d11f      	bne.n	80007c6 <move+0x1f6>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,19);
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <move+0x29c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2213      	movs	r2, #19
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800078e:	4b37      	ldr	r3, [pc, #220]	; (800086c <move+0x29c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2200      	movs	r2, #0
 8000794:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000796:	4b35      	ldr	r3, [pc, #212]	; (800086c <move+0x29c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2200      	movs	r2, #0
 800079c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,22);
 800079e:	4b33      	ldr	r3, [pc, #204]	; (800086c <move+0x29c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2216      	movs	r2, #22
 80007a4:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 80007a6:	4b32      	ldr	r3, [pc, #200]	; (8000870 <move+0x2a0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2210      	movs	r2, #16
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 80007ae:	4b30      	ldr	r3, [pc, #192]	; (8000870 <move+0x2a0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2200      	movs	r2, #0
 80007b4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 80007b6:	4b2e      	ldr	r3, [pc, #184]	; (8000870 <move+0x2a0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2200      	movs	r2, #0
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,24);
 80007be:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <move+0x2a0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2218      	movs	r2, #24
 80007c4:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 80007c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ca:	482a      	ldr	r0, [pc, #168]	; (8000874 <move+0x2a4>)
 80007cc:	f001 fd02 	bl	80021d4 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d126      	bne.n	8000824 <move+0x254>
 80007d6:	2120      	movs	r1, #32
 80007d8:	4827      	ldr	r0, [pc, #156]	; (8000878 <move+0x2a8>)
 80007da:	f001 fcfb 	bl	80021d4 <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d11f      	bne.n	8000824 <move+0x254>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,24);
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <move+0x29c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2218      	movs	r2, #24
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <move+0x29c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2200      	movs	r2, #0
 80007f2:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <move+0x29c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2200      	movs	r2, #0
 80007fa:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,21);
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <move+0x29c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2215      	movs	r2, #21
 8000802:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,18);
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <move+0x2a0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2212      	movs	r2, #18
 800080a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <move+0x2a0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2200      	movs	r2, #0
 8000812:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <move+0x2a0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2200      	movs	r2, #0
 800081a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,19);
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <move+0x2a0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2213      	movs	r2, #19
 8000822:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1)
 8000824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000828:	4812      	ldr	r0, [pc, #72]	; (8000874 <move+0x2a4>)
 800082a:	f001 fcd3 	bl	80021d4 <HAL_GPIO_ReadPin>
 800082e:	4603      	mov	r3, r0
 8000830:	2b01      	cmp	r3, #1
 8000832:	d131      	bne.n	8000898 <move+0x2c8>
 8000834:	2120      	movs	r1, #32
 8000836:	4810      	ldr	r0, [pc, #64]	; (8000878 <move+0x2a8>)
 8000838:	f001 fccc 	bl	80021d4 <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b01      	cmp	r3, #1
 8000840:	d12a      	bne.n	8000898 <move+0x2c8>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,19);
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <move+0x29c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2213      	movs	r2, #19
 8000848:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <move+0x29c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2200      	movs	r2, #0
 8000850:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <move+0x29c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2200      	movs	r2, #0
 8000858:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,20);
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <move+0x29c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2214      	movs	r2, #20
 8000860:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,16);
 8000862:	4b03      	ldr	r3, [pc, #12]	; (8000870 <move+0x2a0>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	e009      	b.n	800087c <move+0x2ac>
 8000868:	58020400 	.word	0x58020400
 800086c:	240001c0 	.word	0x240001c0
 8000870:	24000050 	.word	0x24000050
 8000874:	58020800 	.word	0x58020800
 8000878:	58021000 	.word	0x58021000
 800087c:	2210      	movs	r2, #16
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000880:	4b53      	ldr	r3, [pc, #332]	; (80009d0 <move+0x400>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2200      	movs	r2, #0
 8000886:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 8000888:	4b51      	ldr	r3, [pc, #324]	; (80009d0 <move+0x400>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,19);
 8000890:	4b4f      	ldr	r3, [pc, #316]	; (80009d0 <move+0x400>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2213      	movs	r2, #19
 8000896:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0&&HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	484d      	ldr	r0, [pc, #308]	; (80009d4 <move+0x404>)
 800089e:	f001 fc99 	bl	80021d4 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d126      	bne.n	80008f6 <move+0x326>
 80008a8:	2120      	movs	r1, #32
 80008aa:	484b      	ldr	r0, [pc, #300]	; (80009d8 <move+0x408>)
 80008ac:	f001 fc92 	bl	80021d4 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d11f      	bne.n	80008f6 <move+0x326>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 80008b6:	4b49      	ldr	r3, [pc, #292]	; (80009dc <move+0x40c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2264      	movs	r2, #100	; 0x64
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 80008be:	4b47      	ldr	r3, [pc, #284]	; (80009dc <move+0x40c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2264      	movs	r2, #100	; 0x64
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,100);
 80008c6:	4b45      	ldr	r3, [pc, #276]	; (80009dc <move+0x40c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2264      	movs	r2, #100	; 0x64
 80008cc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,100);
 80008ce:	4b43      	ldr	r3, [pc, #268]	; (80009dc <move+0x40c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2264      	movs	r2, #100	; 0x64
 80008d4:	641a      	str	r2, [r3, #64]	; 0x40

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,100);
 80008d6:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <move+0x400>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2264      	movs	r2, #100	; 0x64
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,100);
 80008de:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <move+0x400>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2264      	movs	r2, #100	; 0x64
 80008e4:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,100);
 80008e6:	4b3a      	ldr	r3, [pc, #232]	; (80009d0 <move+0x400>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2264      	movs	r2, #100	; 0x64
 80008ec:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,100);
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <move+0x400>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2264      	movs	r2, #100	; 0x64
 80008f4:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	if(n==3)//旋转
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d11f      	bne.n	800093c <move+0x36c>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 80008fc:	4b37      	ldr	r3, [pc, #220]	; (80009dc <move+0x40c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2200      	movs	r2, #0
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,24);//22
 8000904:	4b35      	ldr	r3, [pc, #212]	; (80009dc <move+0x40c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2218      	movs	r2, #24
 800090a:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,20);//20
 800090c:	4b33      	ldr	r3, [pc, #204]	; (80009dc <move+0x40c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2214      	movs	r2, #20
 8000912:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,0);
 8000914:	4b31      	ldr	r3, [pc, #196]	; (80009dc <move+0x40c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2200      	movs	r2, #0
 800091a:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,20);//20
 800091c:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <move+0x400>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2214      	movs	r2, #20
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2,0);
 8000924:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <move+0x400>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2200      	movs	r2, #0
 800092a:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,0);
 800092c:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <move+0x400>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2200      	movs	r2, #0
 8000932:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4,22);//21
 8000934:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <move+0x400>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2216      	movs	r2, #22
 800093a:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==4)//刹车
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b04      	cmp	r3, #4
 8000940:	d11f      	bne.n	8000982 <move+0x3b2>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 8000942:	4b26      	ldr	r3, [pc, #152]	; (80009dc <move+0x40c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2264      	movs	r2, #100	; 0x64
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 800094a:	4b24      	ldr	r3, [pc, #144]	; (80009dc <move+0x40c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2264      	movs	r2, #100	; 0x64
 8000950:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,100);
 8000952:	4b22      	ldr	r3, [pc, #136]	; (80009dc <move+0x40c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2264      	movs	r2, #100	; 0x64
 8000958:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,100);
 800095a:	4b20      	ldr	r3, [pc, #128]	; (80009dc <move+0x40c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2264      	movs	r2, #100	; 0x64
 8000960:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,100);
 8000962:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <move+0x400>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2264      	movs	r2, #100	; 0x64
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,100);
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <move+0x400>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2264      	movs	r2, #100	; 0x64
 8000970:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,100);
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <move+0x400>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2264      	movs	r2, #100	; 0x64
 8000978:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,100);
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <move+0x400>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2264      	movs	r2, #100	; 0x64
 8000980:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(n==5)//倒车入库
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b05      	cmp	r3, #5
 8000986:	d11f      	bne.n	80009c8 <move+0x3f8>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <move+0x40c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2264      	movs	r2, #100	; 0x64
 800098e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <move+0x40c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2264      	movs	r2, #100	; 0x64
 8000996:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,30);
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <move+0x40c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	221e      	movs	r2, #30
 800099e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <move+0x40c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2200      	movs	r2, #0
 80009a6:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,100);
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <move+0x400>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2264      	movs	r2, #100	; 0x64
 80009ae:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,100);
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <move+0x400>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2264      	movs	r2, #100	; 0x64
 80009b6:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,30);
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <move+0x400>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	221e      	movs	r2, #30
 80009be:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <move+0x400>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2200      	movs	r2, #0
 80009c6:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	24000050 	.word	0x24000050
 80009d4:	58020800 	.word	0x58020800
 80009d8:	58021000 	.word	0x58021000
 80009dc:	240001c0 	.word	0x240001c0

080009e0 <shuxian>:

void shuxian()
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	if(step==1)//直走
 80009e4:	4b7c      	ldr	r3, [pc, #496]	; (8000bd8 <shuxian+0x1f8>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d11c      	bne.n	8000a26 <shuxian+0x46>
	{
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 80009ec:	2120      	movs	r1, #32
 80009ee:	487b      	ldr	r0, [pc, #492]	; (8000bdc <shuxian+0x1fc>)
 80009f0:	f001 fbf0 	bl	80021d4 <HAL_GPIO_ReadPin>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d102      	bne.n	8000a00 <shuxian+0x20>
		{
			Xflag=1;
 80009fa:	4b79      	ldr	r3, [pc, #484]	; (8000be0 <shuxian+0x200>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Xflag==1)
 8000a00:	2120      	movs	r1, #32
 8000a02:	4876      	ldr	r0, [pc, #472]	; (8000bdc <shuxian+0x1fc>)
 8000a04:	f001 fbe6 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d10b      	bne.n	8000a26 <shuxian+0x46>
 8000a0e:	4b74      	ldr	r3, [pc, #464]	; (8000be0 <shuxian+0x200>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d107      	bne.n	8000a26 <shuxian+0x46>
		{
			X+=1;
 8000a16:	4b73      	ldr	r3, [pc, #460]	; (8000be4 <shuxian+0x204>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4a71      	ldr	r2, [pc, #452]	; (8000be4 <shuxian+0x204>)
 8000a1e:	6013      	str	r3, [r2, #0]
			Xflag=0;
 8000a20:	4b6f      	ldr	r3, [pc, #444]	; (8000be0 <shuxian+0x200>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==2||step==4||step==6||step==12||step==14)//旋转
 8000a26:	4b6c      	ldr	r3, [pc, #432]	; (8000bd8 <shuxian+0x1f8>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d00f      	beq.n	8000a4e <shuxian+0x6e>
 8000a2e:	4b6a      	ldr	r3, [pc, #424]	; (8000bd8 <shuxian+0x1f8>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	d00b      	beq.n	8000a4e <shuxian+0x6e>
 8000a36:	4b68      	ldr	r3, [pc, #416]	; (8000bd8 <shuxian+0x1f8>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b06      	cmp	r3, #6
 8000a3c:	d007      	beq.n	8000a4e <shuxian+0x6e>
 8000a3e:	4b66      	ldr	r3, [pc, #408]	; (8000bd8 <shuxian+0x1f8>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b0c      	cmp	r3, #12
 8000a44:	d003      	beq.n	8000a4e <shuxian+0x6e>
 8000a46:	4b64      	ldr	r3, [pc, #400]	; (8000bd8 <shuxian+0x1f8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b0e      	cmp	r3, #14
 8000a4c:	d11e      	bne.n	8000a8c <shuxian+0xac>
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==1&&turnflag==1)
 8000a4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a52:	4865      	ldr	r0, [pc, #404]	; (8000be8 <shuxian+0x208>)
 8000a54:	f001 fbbe 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d10b      	bne.n	8000a76 <shuxian+0x96>
 8000a5e:	4b63      	ldr	r3, [pc, #396]	; (8000bec <shuxian+0x20c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d107      	bne.n	8000a76 <shuxian+0x96>
		{
			turn+=1;
 8000a66:	4b62      	ldr	r3, [pc, #392]	; (8000bf0 <shuxian+0x210>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	4a60      	ldr	r2, [pc, #384]	; (8000bf0 <shuxian+0x210>)
 8000a6e:	6013      	str	r3, [r2, #0]
			turnflag=0;
 8000a70:	4b5e      	ldr	r3, [pc, #376]	; (8000bec <shuxian+0x20c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0)
 8000a76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a7a:	485b      	ldr	r0, [pc, #364]	; (8000be8 <shuxian+0x208>)
 8000a7c:	f001 fbaa 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d102      	bne.n	8000a8c <shuxian+0xac>
		{
			turnflag=1;
 8000a86:	4b59      	ldr	r3, [pc, #356]	; (8000bec <shuxian+0x20c>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==3||step==11)//直走
 8000a8c:	4b52      	ldr	r3, [pc, #328]	; (8000bd8 <shuxian+0x1f8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d003      	beq.n	8000a9c <shuxian+0xbc>
 8000a94:	4b50      	ldr	r3, [pc, #320]	; (8000bd8 <shuxian+0x1f8>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b0b      	cmp	r3, #11
 8000a9a:	d122      	bne.n	8000ae2 <shuxian+0x102>
	{
		turn=0;
 8000a9c:	4b54      	ldr	r3, [pc, #336]	; (8000bf0 <shuxian+0x210>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000aa2:	4b52      	ldr	r3, [pc, #328]	; (8000bec <shuxian+0x20c>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Yflag==1)
 8000aa8:	2120      	movs	r1, #32
 8000aaa:	484c      	ldr	r0, [pc, #304]	; (8000bdc <shuxian+0x1fc>)
 8000aac:	f001 fb92 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d10b      	bne.n	8000ace <shuxian+0xee>
 8000ab6:	4b4f      	ldr	r3, [pc, #316]	; (8000bf4 <shuxian+0x214>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d107      	bne.n	8000ace <shuxian+0xee>
		{
			Y+=1;
 8000abe:	4b4e      	ldr	r3, [pc, #312]	; (8000bf8 <shuxian+0x218>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	4a4c      	ldr	r2, [pc, #304]	; (8000bf8 <shuxian+0x218>)
 8000ac6:	6013      	str	r3, [r2, #0]
			Yflag=0;
 8000ac8:	4b4a      	ldr	r3, [pc, #296]	; (8000bf4 <shuxian+0x214>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000ace:	2120      	movs	r1, #32
 8000ad0:	4842      	ldr	r0, [pc, #264]	; (8000bdc <shuxian+0x1fc>)
 8000ad2:	f001 fb7f 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <shuxian+0x102>
		{
			Yflag=1;
 8000adc:	4b45      	ldr	r3, [pc, #276]	; (8000bf4 <shuxian+0x214>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==5||step==13)//退回一格
 8000ae2:	4b3d      	ldr	r3, [pc, #244]	; (8000bd8 <shuxian+0x1f8>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b05      	cmp	r3, #5
 8000ae8:	d003      	beq.n	8000af2 <shuxian+0x112>
 8000aea:	4b3b      	ldr	r3, [pc, #236]	; (8000bd8 <shuxian+0x1f8>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b0d      	cmp	r3, #13
 8000af0:	d122      	bne.n	8000b38 <shuxian+0x158>
	{
		turn=0;
 8000af2:	4b3f      	ldr	r3, [pc, #252]	; (8000bf0 <shuxian+0x210>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000af8:	4b3c      	ldr	r3, [pc, #240]	; (8000bec <shuxian+0x20c>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Xflag==1)
 8000afe:	2120      	movs	r1, #32
 8000b00:	4836      	ldr	r0, [pc, #216]	; (8000bdc <shuxian+0x1fc>)
 8000b02:	f001 fb67 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d10b      	bne.n	8000b24 <shuxian+0x144>
 8000b0c:	4b34      	ldr	r3, [pc, #208]	; (8000be0 <shuxian+0x200>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d107      	bne.n	8000b24 <shuxian+0x144>
		{
			X-=1;
 8000b14:	4b33      	ldr	r3, [pc, #204]	; (8000be4 <shuxian+0x204>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	4a32      	ldr	r2, [pc, #200]	; (8000be4 <shuxian+0x204>)
 8000b1c:	6013      	str	r3, [r2, #0]
			Xflag=0;
 8000b1e:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <shuxian+0x200>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000b24:	2120      	movs	r1, #32
 8000b26:	482d      	ldr	r0, [pc, #180]	; (8000bdc <shuxian+0x1fc>)
 8000b28:	f001 fb54 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d102      	bne.n	8000b38 <shuxian+0x158>
		{
			Xflag=1;
 8000b32:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <shuxian+0x200>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==7||step==15)//退回一格
 8000b38:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <shuxian+0x1f8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b07      	cmp	r3, #7
 8000b3e:	d003      	beq.n	8000b48 <shuxian+0x168>
 8000b40:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <shuxian+0x1f8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d122      	bne.n	8000b8e <shuxian+0x1ae>
	{
		turn=0;
 8000b48:	4b29      	ldr	r3, [pc, #164]	; (8000bf0 <shuxian+0x210>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
		turnflag=1;
 8000b4e:	4b27      	ldr	r3, [pc, #156]	; (8000bec <shuxian+0x20c>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==1&&Yflag==1)
 8000b54:	2120      	movs	r1, #32
 8000b56:	4821      	ldr	r0, [pc, #132]	; (8000bdc <shuxian+0x1fc>)
 8000b58:	f001 fb3c 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d10b      	bne.n	8000b7a <shuxian+0x19a>
 8000b62:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <shuxian+0x214>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d107      	bne.n	8000b7a <shuxian+0x19a>
		{
			Y-=1;
 8000b6a:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <shuxian+0x218>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	4a21      	ldr	r2, [pc, #132]	; (8000bf8 <shuxian+0x218>)
 8000b72:	6013      	str	r3, [r2, #0]
			Yflag=0;
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <shuxian+0x214>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_5)==0)
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	4817      	ldr	r0, [pc, #92]	; (8000bdc <shuxian+0x1fc>)
 8000b7e:	f001 fb29 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d102      	bne.n	8000b8e <shuxian+0x1ae>
		{
			Yflag=1;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <shuxian+0x214>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==8)
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <shuxian+0x1f8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b08      	cmp	r3, #8
 8000b94:	d11e      	bne.n	8000bd4 <shuxian+0x1f4>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
 8000b96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9a:	4818      	ldr	r0, [pc, #96]	; (8000bfc <shuxian+0x21c>)
 8000b9c:	f001 fb1a 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <shuxian+0x1cc>
		{
			Zflag=1;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <shuxian+0x220>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1&&Zflag==1)
 8000bac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb0:	4812      	ldr	r0, [pc, #72]	; (8000bfc <shuxian+0x21c>)
 8000bb2:	f001 fb0f 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d10b      	bne.n	8000bd4 <shuxian+0x1f4>
 8000bbc:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <shuxian+0x220>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d107      	bne.n	8000bd4 <shuxian+0x1f4>
		{
			Z+=1;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <shuxian+0x224>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <shuxian+0x224>)
 8000bcc:	6013      	str	r3, [r2, #0]
			Zflag=0;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <shuxian+0x220>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	24000000 	.word	0x24000000
 8000bdc:	58021000 	.word	0x58021000
 8000be0:	24000004 	.word	0x24000004
 8000be4:	24000040 	.word	0x24000040
 8000be8:	58020400 	.word	0x58020400
 8000bec:	24000010 	.word	0x24000010
 8000bf0:	2400004c 	.word	0x2400004c
 8000bf4:	24000008 	.word	0x24000008
 8000bf8:	24000044 	.word	0x24000044
 8000bfc:	58020800 	.word	0x58020800
 8000c00:	2400000c 	.word	0x2400000c
 8000c04:	24000048 	.word	0x24000048

08000c08 <buzhou>:

void buzhou()
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	if(step==1)//直走
 8000c0c:	4b9c      	ldr	r3, [pc, #624]	; (8000e80 <buzhou+0x278>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d116      	bne.n	8000c42 <buzhou+0x3a>
	{
		move(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f7ff fcdb 	bl	80005d0 <move>
		shuxian();
 8000c1a:	f7ff fee1 	bl	80009e0 <shuxian>
		if(X==2&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000c1e:	4b99      	ldr	r3, [pc, #612]	; (8000e84 <buzhou+0x27c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d10d      	bne.n	8000c42 <buzhou+0x3a>
 8000c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2a:	4897      	ldr	r0, [pc, #604]	; (8000e88 <buzhou+0x280>)
 8000c2c:	f001 fad2 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d105      	bne.n	8000c42 <buzhou+0x3a>
		{
			move(4);
 8000c36:	2004      	movs	r0, #4
 8000c38:	f7ff fcca 	bl	80005d0 <move>
			//HAL_Delay(1000);
			step=2;
 8000c3c:	4b90      	ldr	r3, [pc, #576]	; (8000e80 <buzhou+0x278>)
 8000c3e:	2202      	movs	r2, #2
 8000c40:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==2)//旋转
 8000c42:	4b8f      	ldr	r3, [pc, #572]	; (8000e80 <buzhou+0x278>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d10e      	bne.n	8000c68 <buzhou+0x60>
	{
		move(3);
 8000c4a:	2003      	movs	r0, #3
 8000c4c:	f7ff fcc0 	bl	80005d0 <move>
		shuxian();
 8000c50:	f7ff fec6 	bl	80009e0 <shuxian>
		if(turn==3)
 8000c54:	4b8d      	ldr	r3, [pc, #564]	; (8000e8c <buzhou+0x284>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	d105      	bne.n	8000c68 <buzhou+0x60>
		{
			/*while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
			{
				adjust(1);
			}*/
			move(4);
 8000c5c:	2004      	movs	r0, #4
 8000c5e:	f7ff fcb7 	bl	80005d0 <move>
			//HAL_Delay(1000);
			step=3;
 8000c62:	4b87      	ldr	r3, [pc, #540]	; (8000e80 <buzhou+0x278>)
 8000c64:	2203      	movs	r2, #3
 8000c66:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==3)//直走
 8000c68:	4b85      	ldr	r3, [pc, #532]	; (8000e80 <buzhou+0x278>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b03      	cmp	r3, #3
 8000c6e:	d11a      	bne.n	8000ca6 <buzhou+0x9e>
	{
		move(1);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f7ff fcad 	bl	80005d0 <move>
		shuxian();
 8000c76:	f7ff feb3 	bl	80009e0 <shuxian>
		if(Y==2&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000c7a:	4b85      	ldr	r3, [pc, #532]	; (8000e90 <buzhou+0x288>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d111      	bne.n	8000ca6 <buzhou+0x9e>
 8000c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c86:	4880      	ldr	r0, [pc, #512]	; (8000e88 <buzhou+0x280>)
 8000c88:	f001 faa4 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d109      	bne.n	8000ca6 <buzhou+0x9e>
		{
			move(4);
 8000c92:	2004      	movs	r0, #4
 8000c94:	f7ff fc9c 	bl	80005d0 <move>
			HAL_Delay(3000);
 8000c98:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c9c:	f000 ffd6 	bl	8001c4c <HAL_Delay>
			step=11;//决赛11
 8000ca0:	4b77      	ldr	r3, [pc, #476]	; (8000e80 <buzhou+0x278>)
 8000ca2:	220b      	movs	r2, #11
 8000ca4:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==4)//旋转
 8000ca6:	4b76      	ldr	r3, [pc, #472]	; (8000e80 <buzhou+0x278>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	d10e      	bne.n	8000ccc <buzhou+0xc4>
	{
		move(3);
 8000cae:	2003      	movs	r0, #3
 8000cb0:	f7ff fc8e 	bl	80005d0 <move>
		shuxian();
 8000cb4:	f7ff fe94 	bl	80009e0 <shuxian>
		if(turn==3)
 8000cb8:	4b74      	ldr	r3, [pc, #464]	; (8000e8c <buzhou+0x284>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d105      	bne.n	8000ccc <buzhou+0xc4>
		{
			/*while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
			{
				adjust(1);
			}*/
			move(4);
 8000cc0:	2004      	movs	r0, #4
 8000cc2:	f7ff fc85 	bl	80005d0 <move>
			//HAL_Delay(1000);
			step=5;
 8000cc6:	4b6e      	ldr	r3, [pc, #440]	; (8000e80 <buzhou+0x278>)
 8000cc8:	2205      	movs	r2, #5
 8000cca:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==5)//退回一格
 8000ccc:	4b6c      	ldr	r3, [pc, #432]	; (8000e80 <buzhou+0x278>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b05      	cmp	r3, #5
 8000cd2:	d116      	bne.n	8000d02 <buzhou+0xfa>
	{
		move(1);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f7ff fc7b 	bl	80005d0 <move>
		shuxian();
 8000cda:	f7ff fe81 	bl	80009e0 <shuxian>
		if(X==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000cde:	4b69      	ldr	r3, [pc, #420]	; (8000e84 <buzhou+0x27c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d10d      	bne.n	8000d02 <buzhou+0xfa>
 8000ce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cea:	4867      	ldr	r0, [pc, #412]	; (8000e88 <buzhou+0x280>)
 8000cec:	f001 fa72 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d105      	bne.n	8000d02 <buzhou+0xfa>
		{
			move(4);
 8000cf6:	2004      	movs	r0, #4
 8000cf8:	f7ff fc6a 	bl	80005d0 <move>
			//HAL_Delay(1000);
			step=6;
 8000cfc:	4b60      	ldr	r3, [pc, #384]	; (8000e80 <buzhou+0x278>)
 8000cfe:	2206      	movs	r2, #6
 8000d00:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==6)//旋转
 8000d02:	4b5f      	ldr	r3, [pc, #380]	; (8000e80 <buzhou+0x278>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d10e      	bne.n	8000d28 <buzhou+0x120>
	{
		move(3);
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	f7ff fc60 	bl	80005d0 <move>
		shuxian();
 8000d10:	f7ff fe66 	bl	80009e0 <shuxian>
		if(turn==3)
 8000d14:	4b5d      	ldr	r3, [pc, #372]	; (8000e8c <buzhou+0x284>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	d105      	bne.n	8000d28 <buzhou+0x120>
		{
			/*while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
			{
				adjust(1);
			}*/
			move(4);
 8000d1c:	2004      	movs	r0, #4
 8000d1e:	f7ff fc57 	bl	80005d0 <move>
			//HAL_Delay(1000);
			step=7;
 8000d22:	4b57      	ldr	r3, [pc, #348]	; (8000e80 <buzhou+0x278>)
 8000d24:	2207      	movs	r2, #7
 8000d26:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==7)
 8000d28:	4b55      	ldr	r3, [pc, #340]	; (8000e80 <buzhou+0x278>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b07      	cmp	r3, #7
 8000d2e:	d116      	bne.n	8000d5e <buzhou+0x156>
	{
		move(1);
 8000d30:	2001      	movs	r0, #1
 8000d32:	f7ff fc4d 	bl	80005d0 <move>
		shuxian();
 8000d36:	f7ff fe53 	bl	80009e0 <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000d3a:	4b55      	ldr	r3, [pc, #340]	; (8000e90 <buzhou+0x288>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d10d      	bne.n	8000d5e <buzhou+0x156>
 8000d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d46:	4850      	ldr	r0, [pc, #320]	; (8000e88 <buzhou+0x280>)
 8000d48:	f001 fa44 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d105      	bne.n	8000d5e <buzhou+0x156>
		{
			move(4);
 8000d52:	2004      	movs	r0, #4
 8000d54:	f7ff fc3c 	bl	80005d0 <move>
			//HAL_Delay(1000);
			step=8;
 8000d58:	4b49      	ldr	r3, [pc, #292]	; (8000e80 <buzhou+0x278>)
 8000d5a:	2208      	movs	r2, #8
 8000d5c:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==8)
 8000d5e:	4b48      	ldr	r3, [pc, #288]	; (8000e80 <buzhou+0x278>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b08      	cmp	r3, #8
 8000d64:	d10e      	bne.n	8000d84 <buzhou+0x17c>
	{
		move(5);
 8000d66:	2005      	movs	r0, #5
 8000d68:	f7ff fc32 	bl	80005d0 <move>
		shuxian();
 8000d6c:	f7ff fe38 	bl	80009e0 <shuxian>
		if(Z==3)
 8000d70:	4b48      	ldr	r3, [pc, #288]	; (8000e94 <buzhou+0x28c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d105      	bne.n	8000d84 <buzhou+0x17c>
		{
			move(4);
 8000d78:	2004      	movs	r0, #4
 8000d7a:	f7ff fc29 	bl	80005d0 <move>
			//HAL_Delay(1000);
			step=9;
 8000d7e:	4b40      	ldr	r3, [pc, #256]	; (8000e80 <buzhou+0x278>)
 8000d80:	2209      	movs	r2, #9
 8000d82:	601a      	str	r2, [r3, #0]
		}
	}
	//决赛
	if(step==11)
 8000d84:	4b3e      	ldr	r3, [pc, #248]	; (8000e80 <buzhou+0x278>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b0b      	cmp	r3, #11
 8000d8a:	d116      	bne.n	8000dba <buzhou+0x1b2>
	{
		move(1);
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f7ff fc1f 	bl	80005d0 <move>
		shuxian();
 8000d92:	f7ff fe25 	bl	80009e0 <shuxian>
		if(Y==4&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000d96:	4b3e      	ldr	r3, [pc, #248]	; (8000e90 <buzhou+0x288>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	d10d      	bne.n	8000dba <buzhou+0x1b2>
 8000d9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da2:	4839      	ldr	r0, [pc, #228]	; (8000e88 <buzhou+0x280>)
 8000da4:	f001 fa16 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d105      	bne.n	8000dba <buzhou+0x1b2>
		{
			move(4);
 8000dae:	2004      	movs	r0, #4
 8000db0:	f7ff fc0e 	bl	80005d0 <move>
			//HAL_Delay(1000);
			step=12;
 8000db4:	4b32      	ldr	r3, [pc, #200]	; (8000e80 <buzhou+0x278>)
 8000db6:	220c      	movs	r2, #12
 8000db8:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==12)
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <buzhou+0x278>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b0c      	cmp	r3, #12
 8000dc0:	d112      	bne.n	8000de8 <buzhou+0x1e0>
	{
		move(3);
 8000dc2:	2003      	movs	r0, #3
 8000dc4:	f7ff fc04 	bl	80005d0 <move>
		shuxian();
 8000dc8:	f7ff fe0a 	bl	80009e0 <shuxian>
		if(turn==3)
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <buzhou+0x284>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	d109      	bne.n	8000de8 <buzhou+0x1e0>
		{
			move(4);
 8000dd4:	2004      	movs	r0, #4
 8000dd6:	f7ff fbfb 	bl	80005d0 <move>
			HAL_Delay(3000);
 8000dda:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000dde:	f000 ff35 	bl	8001c4c <HAL_Delay>
			step=13;
 8000de2:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <buzhou+0x278>)
 8000de4:	220d      	movs	r2, #13
 8000de6:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==13)
 8000de8:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <buzhou+0x278>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b0d      	cmp	r3, #13
 8000dee:	d116      	bne.n	8000e1e <buzhou+0x216>
	{
		move(1);
 8000df0:	2001      	movs	r0, #1
 8000df2:	f7ff fbed 	bl	80005d0 <move>
		shuxian();
 8000df6:	f7ff fdf3 	bl	80009e0 <shuxian>
		if(X==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000dfa:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <buzhou+0x27c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d10d      	bne.n	8000e1e <buzhou+0x216>
 8000e02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e06:	4820      	ldr	r0, [pc, #128]	; (8000e88 <buzhou+0x280>)
 8000e08:	f001 f9e4 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d105      	bne.n	8000e1e <buzhou+0x216>
		{
			move(4);
 8000e12:	2004      	movs	r0, #4
 8000e14:	f7ff fbdc 	bl	80005d0 <move>
			//HAL_Delay(1000);
			step=14;
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <buzhou+0x278>)
 8000e1a:	220e      	movs	r2, #14
 8000e1c:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==14)
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <buzhou+0x278>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b0e      	cmp	r3, #14
 8000e24:	d10e      	bne.n	8000e44 <buzhou+0x23c>
	{
		move(3);
 8000e26:	2003      	movs	r0, #3
 8000e28:	f7ff fbd2 	bl	80005d0 <move>
		shuxian();
 8000e2c:	f7ff fdd8 	bl	80009e0 <shuxian>
		if(turn==3)
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <buzhou+0x284>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d105      	bne.n	8000e44 <buzhou+0x23c>
		{
			move(4);
 8000e38:	2004      	movs	r0, #4
 8000e3a:	f7ff fbc9 	bl	80005d0 <move>
			//HAL_Delay(1000);
			step=15;
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <buzhou+0x278>)
 8000e40:	220f      	movs	r2, #15
 8000e42:	601a      	str	r2, [r3, #0]
		}
	}
	if(step==15)
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <buzhou+0x278>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d116      	bne.n	8000e7a <buzhou+0x272>
	{
		move(1);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff fbbf 	bl	80005d0 <move>
		shuxian();
 8000e52:	f7ff fdc5 	bl	80009e0 <shuxian>
		if(Y==1&&HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <buzhou+0x288>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d10d      	bne.n	8000e7a <buzhou+0x272>
 8000e5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e62:	4809      	ldr	r0, [pc, #36]	; (8000e88 <buzhou+0x280>)
 8000e64:	f001 f9b6 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d105      	bne.n	8000e7a <buzhou+0x272>
		{
			move(4);
 8000e6e:	2004      	movs	r0, #4
 8000e70:	f7ff fbae 	bl	80005d0 <move>
			//HAL_Delay(1000);
			step=8;
 8000e74:	4b02      	ldr	r3, [pc, #8]	; (8000e80 <buzhou+0x278>)
 8000e76:	2208      	movs	r2, #8
 8000e78:	601a      	str	r2, [r3, #0]
		}
	}

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	24000000 	.word	0x24000000
 8000e84:	24000040 	.word	0x24000040
 8000e88:	58020800 	.word	0x58020800
 8000e8c:	2400004c 	.word	0x2400004c
 8000e90:	24000044 	.word	0x24000044
 8000e94:	24000048 	.word	0x24000048

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f000 fe44 	bl	8001b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f83e 	bl	8000f20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 fb5c 	bl	8001560 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000ea8:	f000 f9a6 	bl	80011f8 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000eac:	f000 fa74 	bl	8001398 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000eb0:	f000 fabe 	bl	8001430 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000eb4:	f000 f8d0 	bl	8001058 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000eb8:	f000 fb06 	bl	80014c8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4814      	ldr	r0, [pc, #80]	; (8000f10 <main+0x78>)
 8000ec0:	f003 fd80 	bl	80049c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	4812      	ldr	r0, [pc, #72]	; (8000f10 <main+0x78>)
 8000ec8:	f003 fd7c 	bl	80049c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000ecc:	2108      	movs	r1, #8
 8000ece:	4810      	ldr	r0, [pc, #64]	; (8000f10 <main+0x78>)
 8000ed0:	f003 fd78 	bl	80049c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000ed4:	210c      	movs	r1, #12
 8000ed6:	480e      	ldr	r0, [pc, #56]	; (8000f10 <main+0x78>)
 8000ed8:	f003 fd74 	bl	80049c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8000edc:	2100      	movs	r1, #0
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <main+0x7c>)
 8000ee0:	f003 fd70 	bl	80049c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	480b      	ldr	r0, [pc, #44]	; (8000f14 <main+0x7c>)
 8000ee8:	f003 fd6c 	bl	80049c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 8000eec:	2108      	movs	r1, #8
 8000eee:	4809      	ldr	r0, [pc, #36]	; (8000f14 <main+0x7c>)
 8000ef0:	f003 fd68 	bl	80049c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);
 8000ef4:	210c      	movs	r1, #12
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <main+0x7c>)
 8000ef8:	f003 fd64 	bl	80049c4 <HAL_TIM_PWM_Start>
    HAL_UART_Receive_IT(&huart1,YY,1000);
 8000efc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f00:	4905      	ldr	r1, [pc, #20]	; (8000f18 <main+0x80>)
 8000f02:	4806      	ldr	r0, [pc, #24]	; (8000f1c <main+0x84>)
 8000f04:	f004 fdb6 	bl	8005a74 <HAL_UART_Receive_IT>




//11左
	  	  	buzhou();
 8000f08:	f7ff fe7e 	bl	8000c08 <buzhou>
 8000f0c:	e7fc      	b.n	8000f08 <main+0x70>
 8000f0e:	bf00      	nop
 8000f10:	240001c0 	.word	0x240001c0
 8000f14:	24000050 	.word	0x24000050
 8000f18:	24000128 	.word	0x24000128
 8000f1c:	24000134 	.word	0x24000134

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0cc      	sub	sp, #304	; 0x130
 8000f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f2a:	224c      	movs	r2, #76	; 0x4c
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f006 f846 	bl	8006fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f34:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f38:	2220      	movs	r2, #32
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f006 f83f 	bl	8006fc0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	4618      	mov	r0, r3
 8000f48:	23bc      	movs	r3, #188	; 0xbc
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	f006 f837 	bl	8006fc0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f52:	2002      	movs	r0, #2
 8000f54:	f001 f956 	bl	8002204 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	4b3c      	ldr	r3, [pc, #240]	; (8001050 <SystemClock_Config+0x130>)
 8000f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f62:	4a3b      	ldr	r2, [pc, #236]	; (8001050 <SystemClock_Config+0x130>)
 8000f64:	f023 0301 	bic.w	r3, r3, #1
 8000f68:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f6a:	4b39      	ldr	r3, [pc, #228]	; (8001050 <SystemClock_Config+0x130>)
 8000f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6e:	f003 0201 	and.w	r2, r3, #1
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	4b37      	ldr	r3, [pc, #220]	; (8001054 <SystemClock_Config+0x134>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f7e:	4a35      	ldr	r2, [pc, #212]	; (8001054 <SystemClock_Config+0x134>)
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f84:	6193      	str	r3, [r2, #24]
 8000f86:	4b33      	ldr	r3, [pc, #204]	; (8001054 <SystemClock_Config+0x134>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f96:	bf00      	nop
 8000f98:	4b2e      	ldr	r3, [pc, #184]	; (8001054 <SystemClock_Config+0x134>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fa4:	d1f8      	bne.n	8000f98 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb2:	2340      	movs	r3, #64	; 0x40
 8000fb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f001 f958 	bl	8002278 <HAL_RCC_OscConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000fce:	f000 fb4f 	bl	8001670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd2:	233f      	movs	r3, #63	; 0x3f
 8000fd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001002:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f001 fd45 	bl	8002a98 <HAL_RCC_ClockConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001014:	f000 fb2c 	bl	8001670 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	2203      	movs	r2, #3
 800101e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	2200      	movs	r2, #0
 8001026:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	2200      	movs	r2, #0
 800102e:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	4618      	mov	r0, r3
 8001036:	f002 f8bb 	bl	80031b0 <HAL_RCCEx_PeriphCLKConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x124>
  {
    Error_Handler();
 8001040:	f000 fb16 	bl	8001670 <Error_Handler>
  }
}
 8001044:	bf00      	nop
 8001046:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58000400 	.word	0x58000400
 8001054:	58024800 	.word	0x58024800

08001058 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09a      	sub	sp, #104	; 0x68
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001078:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
 8001088:	615a      	str	r2, [r3, #20]
 800108a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	222c      	movs	r2, #44	; 0x2c
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f005 ff94 	bl	8006fc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001098:	4b55      	ldr	r3, [pc, #340]	; (80011f0 <MX_TIM1_Init+0x198>)
 800109a:	4a56      	ldr	r2, [pc, #344]	; (80011f4 <MX_TIM1_Init+0x19c>)
 800109c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 800109e:	4b54      	ldr	r3, [pc, #336]	; (80011f0 <MX_TIM1_Init+0x198>)
 80010a0:	221f      	movs	r2, #31
 80010a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a4:	4b52      	ldr	r3, [pc, #328]	; (80011f0 <MX_TIM1_Init+0x198>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80010aa:	4b51      	ldr	r3, [pc, #324]	; (80011f0 <MX_TIM1_Init+0x198>)
 80010ac:	2263      	movs	r2, #99	; 0x63
 80010ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b0:	4b4f      	ldr	r3, [pc, #316]	; (80011f0 <MX_TIM1_Init+0x198>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010b6:	4b4e      	ldr	r3, [pc, #312]	; (80011f0 <MX_TIM1_Init+0x198>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010bc:	4b4c      	ldr	r3, [pc, #304]	; (80011f0 <MX_TIM1_Init+0x198>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010c2:	484b      	ldr	r0, [pc, #300]	; (80011f0 <MX_TIM1_Init+0x198>)
 80010c4:	f003 fbc6 	bl	8004854 <HAL_TIM_Base_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80010ce:	f000 facf 	bl	8001670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010dc:	4619      	mov	r1, r3
 80010de:	4844      	ldr	r0, [pc, #272]	; (80011f0 <MX_TIM1_Init+0x198>)
 80010e0:	f003 fe52 	bl	8004d88 <HAL_TIM_ConfigClockSource>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010ea:	f000 fac1 	bl	8001670 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010ee:	4840      	ldr	r0, [pc, #256]	; (80011f0 <MX_TIM1_Init+0x198>)
 80010f0:	f003 fc07 	bl	8004902 <HAL_TIM_PWM_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80010fa:	f000 fab9 	bl	8001670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800110a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800110e:	4619      	mov	r1, r3
 8001110:	4837      	ldr	r0, [pc, #220]	; (80011f0 <MX_TIM1_Init+0x198>)
 8001112:	f004 fb59 	bl	80057c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800111c:	f000 faa8 	bl	8001670 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001120:	2360      	movs	r3, #96	; 0x60
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001128:	2300      	movs	r3, #0
 800112a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800112c:	2300      	movs	r3, #0
 800112e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001134:	2300      	movs	r3, #0
 8001136:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001138:	2300      	movs	r3, #0
 800113a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	482a      	ldr	r0, [pc, #168]	; (80011f0 <MX_TIM1_Init+0x198>)
 8001146:	f003 fd0f 	bl	8004b68 <HAL_TIM_PWM_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001150:	f000 fa8e 	bl	8001670 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001154:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001158:	2204      	movs	r2, #4
 800115a:	4619      	mov	r1, r3
 800115c:	4824      	ldr	r0, [pc, #144]	; (80011f0 <MX_TIM1_Init+0x198>)
 800115e:	f003 fd03 	bl	8004b68 <HAL_TIM_PWM_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001168:	f000 fa82 	bl	8001670 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800116c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001170:	2208      	movs	r2, #8
 8001172:	4619      	mov	r1, r3
 8001174:	481e      	ldr	r0, [pc, #120]	; (80011f0 <MX_TIM1_Init+0x198>)
 8001176:	f003 fcf7 	bl	8004b68 <HAL_TIM_PWM_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001180:	f000 fa76 	bl	8001670 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001184:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001188:	220c      	movs	r2, #12
 800118a:	4619      	mov	r1, r3
 800118c:	4818      	ldr	r0, [pc, #96]	; (80011f0 <MX_TIM1_Init+0x198>)
 800118e:	f003 fceb 	bl	8004b68 <HAL_TIM_PWM_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001198:	f000 fa6a 	bl	8001670 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	4619      	mov	r1, r3
 80011d0:	4807      	ldr	r0, [pc, #28]	; (80011f0 <MX_TIM1_Init+0x198>)
 80011d2:	f004 fb81 	bl	80058d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 80011dc:	f000 fa48 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <MX_TIM1_Init+0x198>)
 80011e2:	f000 fa9f 	bl	8001724 <HAL_TIM_MspPostInit>

}
 80011e6:	bf00      	nop
 80011e8:	3768      	adds	r7, #104	; 0x68
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	240001c0 	.word	0x240001c0
 80011f4:	40010000 	.word	0x40010000

080011f8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b09a      	sub	sp, #104	; 0x68
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001218:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
 8001228:	615a      	str	r2, [r3, #20]
 800122a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	222c      	movs	r2, #44	; 0x2c
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f005 fec4 	bl	8006fc0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001238:	4b55      	ldr	r3, [pc, #340]	; (8001390 <MX_TIM8_Init+0x198>)
 800123a:	4a56      	ldr	r2, [pc, #344]	; (8001394 <MX_TIM8_Init+0x19c>)
 800123c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 800123e:	4b54      	ldr	r3, [pc, #336]	; (8001390 <MX_TIM8_Init+0x198>)
 8001240:	223f      	movs	r2, #63	; 0x3f
 8001242:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001244:	4b52      	ldr	r3, [pc, #328]	; (8001390 <MX_TIM8_Init+0x198>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 800124a:	4b51      	ldr	r3, [pc, #324]	; (8001390 <MX_TIM8_Init+0x198>)
 800124c:	2263      	movs	r2, #99	; 0x63
 800124e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001250:	4b4f      	ldr	r3, [pc, #316]	; (8001390 <MX_TIM8_Init+0x198>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001256:	4b4e      	ldr	r3, [pc, #312]	; (8001390 <MX_TIM8_Init+0x198>)
 8001258:	2200      	movs	r2, #0
 800125a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125c:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <MX_TIM8_Init+0x198>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001262:	484b      	ldr	r0, [pc, #300]	; (8001390 <MX_TIM8_Init+0x198>)
 8001264:	f003 faf6 	bl	8004854 <HAL_TIM_Base_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800126e:	f000 f9ff 	bl	8001670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001276:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001278:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800127c:	4619      	mov	r1, r3
 800127e:	4844      	ldr	r0, [pc, #272]	; (8001390 <MX_TIM8_Init+0x198>)
 8001280:	f003 fd82 	bl	8004d88 <HAL_TIM_ConfigClockSource>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800128a:	f000 f9f1 	bl	8001670 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800128e:	4840      	ldr	r0, [pc, #256]	; (8001390 <MX_TIM8_Init+0x198>)
 8001290:	f003 fb37 	bl	8004902 <HAL_TIM_PWM_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800129a:	f000 f9e9 	bl	8001670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012ae:	4619      	mov	r1, r3
 80012b0:	4837      	ldr	r0, [pc, #220]	; (8001390 <MX_TIM8_Init+0x198>)
 80012b2:	f004 fa89 	bl	80057c8 <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 80012bc:	f000 f9d8 	bl	8001670 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c0:	2360      	movs	r3, #96	; 0x60
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c8:	2300      	movs	r3, #0
 80012ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012e0:	2200      	movs	r2, #0
 80012e2:	4619      	mov	r1, r3
 80012e4:	482a      	ldr	r0, [pc, #168]	; (8001390 <MX_TIM8_Init+0x198>)
 80012e6:	f003 fc3f 	bl	8004b68 <HAL_TIM_PWM_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 80012f0:	f000 f9be 	bl	8001670 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012f8:	2204      	movs	r2, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4824      	ldr	r0, [pc, #144]	; (8001390 <MX_TIM8_Init+0x198>)
 80012fe:	f003 fc33 	bl	8004b68 <HAL_TIM_PWM_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8001308:	f000 f9b2 	bl	8001670 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800130c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001310:	2208      	movs	r2, #8
 8001312:	4619      	mov	r1, r3
 8001314:	481e      	ldr	r0, [pc, #120]	; (8001390 <MX_TIM8_Init+0x198>)
 8001316:	f003 fc27 	bl	8004b68 <HAL_TIM_PWM_ConfigChannel>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8001320:	f000 f9a6 	bl	8001670 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001324:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001328:	220c      	movs	r2, #12
 800132a:	4619      	mov	r1, r3
 800132c:	4818      	ldr	r0, [pc, #96]	; (8001390 <MX_TIM8_Init+0x198>)
 800132e:	f003 fc1b 	bl	8004b68 <HAL_TIM_PWM_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8001338:	f000 f99a 	bl	8001670 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001354:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800135e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4619      	mov	r1, r3
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <MX_TIM8_Init+0x198>)
 8001372:	f004 fab1 	bl	80058d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM8_Init+0x188>
  {
    Error_Handler();
 800137c:	f000 f978 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <MX_TIM8_Init+0x198>)
 8001382:	f000 f9cf 	bl	8001724 <HAL_TIM_MspPostInit>

}
 8001386:	bf00      	nop
 8001388:	3768      	adds	r7, #104	; 0x68
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	24000050 	.word	0x24000050
 8001394:	40010400 	.word	0x40010400

08001398 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800139c:	4b22      	ldr	r3, [pc, #136]	; (8001428 <MX_USART1_UART_Init+0x90>)
 800139e:	4a23      	ldr	r2, [pc, #140]	; (800142c <MX_USART1_UART_Init+0x94>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <MX_USART1_UART_Init+0x90>)
 80013a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <MX_USART1_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <MX_USART1_UART_Init+0x90>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <MX_USART1_UART_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MX_USART1_UART_Init+0x90>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <MX_USART1_UART_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_USART1_UART_Init+0x90>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_USART1_UART_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_USART1_UART_Init+0x90>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_USART1_UART_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013e0:	4811      	ldr	r0, [pc, #68]	; (8001428 <MX_USART1_UART_Init+0x90>)
 80013e2:	f004 faf7 	bl	80059d4 <HAL_UART_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013ec:	f000 f940 	bl	8001670 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f0:	2100      	movs	r1, #0
 80013f2:	480d      	ldr	r0, [pc, #52]	; (8001428 <MX_USART1_UART_Init+0x90>)
 80013f4:	f005 fcdb 	bl	8006dae <HAL_UARTEx_SetTxFifoThreshold>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013fe:	f000 f937 	bl	8001670 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001402:	2100      	movs	r1, #0
 8001404:	4808      	ldr	r0, [pc, #32]	; (8001428 <MX_USART1_UART_Init+0x90>)
 8001406:	f005 fd10 	bl	8006e2a <HAL_UARTEx_SetRxFifoThreshold>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001410:	f000 f92e 	bl	8001670 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <MX_USART1_UART_Init+0x90>)
 8001416:	f005 fc91 	bl	8006d3c <HAL_UARTEx_DisableFifoMode>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001420:	f000 f926 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	24000134 	.word	0x24000134
 800142c:	40011000 	.word	0x40011000

08001430 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 8001436:	4a23      	ldr	r2, [pc, #140]	; (80014c4 <MX_USART2_UART_Init+0x94>)
 8001438:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800143a:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 800143c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001440:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001478:	4811      	ldr	r0, [pc, #68]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 800147a:	f004 faab 	bl	80059d4 <HAL_UART_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001484:	f000 f8f4 	bl	8001670 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001488:	2100      	movs	r1, #0
 800148a:	480d      	ldr	r0, [pc, #52]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 800148c:	f005 fc8f 	bl	8006dae <HAL_UARTEx_SetTxFifoThreshold>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001496:	f000 f8eb 	bl	8001670 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800149a:	2100      	movs	r1, #0
 800149c:	4808      	ldr	r0, [pc, #32]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 800149e:	f005 fcc4 	bl	8006e2a <HAL_UARTEx_SetRxFifoThreshold>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80014a8:	f000 f8e2 	bl	8001670 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014ac:	4804      	ldr	r0, [pc, #16]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 80014ae:	f005 fc45 	bl	8006d3c <HAL_UARTEx_DisableFifoMode>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80014b8:	f000 f8da 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2400020c 	.word	0x2400020c
 80014c4:	40004400 	.word	0x40004400

080014c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <MX_USART3_UART_Init+0x90>)
 80014ce:	4a23      	ldr	r2, [pc, #140]	; (800155c <MX_USART3_UART_Init+0x94>)
 80014d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <MX_USART3_UART_Init+0x90>)
 80014d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014da:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <MX_USART3_UART_Init+0x90>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <MX_USART3_UART_Init+0x90>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <MX_USART3_UART_Init+0x90>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <MX_USART3_UART_Init+0x90>)
 80014ee:	220c      	movs	r2, #12
 80014f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <MX_USART3_UART_Init+0x90>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f8:	4b17      	ldr	r3, [pc, #92]	; (8001558 <MX_USART3_UART_Init+0x90>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <MX_USART3_UART_Init+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <MX_USART3_UART_Init+0x90>)
 8001506:	2200      	movs	r2, #0
 8001508:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800150a:	4b13      	ldr	r3, [pc, #76]	; (8001558 <MX_USART3_UART_Init+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001510:	4811      	ldr	r0, [pc, #68]	; (8001558 <MX_USART3_UART_Init+0x90>)
 8001512:	f004 fa5f 	bl	80059d4 <HAL_UART_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800151c:	f000 f8a8 	bl	8001670 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001520:	2100      	movs	r1, #0
 8001522:	480d      	ldr	r0, [pc, #52]	; (8001558 <MX_USART3_UART_Init+0x90>)
 8001524:	f005 fc43 	bl	8006dae <HAL_UARTEx_SetTxFifoThreshold>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800152e:	f000 f89f 	bl	8001670 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001532:	2100      	movs	r1, #0
 8001534:	4808      	ldr	r0, [pc, #32]	; (8001558 <MX_USART3_UART_Init+0x90>)
 8001536:	f005 fc78 	bl	8006e2a <HAL_UARTEx_SetRxFifoThreshold>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001540:	f000 f896 	bl	8001670 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001544:	4804      	ldr	r0, [pc, #16]	; (8001558 <MX_USART3_UART_Init+0x90>)
 8001546:	f005 fbf9 	bl	8006d3c <HAL_UARTEx_DisableFifoMode>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001550:	f000 f88e 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	2400009c 	.word	0x2400009c
 800155c:	40004800 	.word	0x40004800

08001560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001576:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <MX_GPIO_Init+0x100>)
 8001578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157c:	4a38      	ldr	r2, [pc, #224]	; (8001660 <MX_GPIO_Init+0x100>)
 800157e:	f043 0310 	orr.w	r3, r3, #16
 8001582:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001586:	4b36      	ldr	r3, [pc, #216]	; (8001660 <MX_GPIO_Init+0x100>)
 8001588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001594:	4b32      	ldr	r3, [pc, #200]	; (8001660 <MX_GPIO_Init+0x100>)
 8001596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159a:	4a31      	ldr	r2, [pc, #196]	; (8001660 <MX_GPIO_Init+0x100>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a4:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <MX_GPIO_Init+0x100>)
 80015a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <MX_GPIO_Init+0x100>)
 80015b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b8:	4a29      	ldr	r2, [pc, #164]	; (8001660 <MX_GPIO_Init+0x100>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015c2:	4b27      	ldr	r3, [pc, #156]	; (8001660 <MX_GPIO_Init+0x100>)
 80015c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d0:	4b23      	ldr	r3, [pc, #140]	; (8001660 <MX_GPIO_Init+0x100>)
 80015d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d6:	4a22      	ldr	r2, [pc, #136]	; (8001660 <MX_GPIO_Init+0x100>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <MX_GPIO_Init+0x100>)
 80015e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <MX_GPIO_Init+0x100>)
 80015f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f4:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <MX_GPIO_Init+0x100>)
 80015f6:	f043 0308 	orr.w	r3, r3, #8
 80015fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <MX_GPIO_Init+0x100>)
 8001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800160c:	2320      	movs	r3, #32
 800160e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001610:	2300      	movs	r3, #0
 8001612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4811      	ldr	r0, [pc, #68]	; (8001664 <MX_GPIO_Init+0x104>)
 8001620:	f000 fc28 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	480b      	ldr	r0, [pc, #44]	; (8001668 <MX_GPIO_Init+0x108>)
 800163a:	f000 fc1b 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800163e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001644:	2300      	movs	r3, #0
 8001646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	4806      	ldr	r0, [pc, #24]	; (800166c <MX_GPIO_Init+0x10c>)
 8001654:	f000 fc0e 	bl	8001e74 <HAL_GPIO_Init>

}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	; 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	58024400 	.word	0x58024400
 8001664:	58021000 	.word	0x58021000
 8001668:	58020800 	.word	0x58020800
 800166c:	58020400 	.word	0x58020400

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001678:	e7fe      	b.n	8001678 <Error_Handler+0x8>
	...

0800167c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_MspInit+0x30>)
 8001684:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001688:	4a08      	ldr	r2, [pc, #32]	; (80016ac <HAL_MspInit+0x30>)
 800168a:	f043 0302 	orr.w	r3, r3, #2
 800168e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_MspInit+0x30>)
 8001694:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	58024400 	.word	0x58024400

080016b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a16      	ldr	r2, [pc, #88]	; (8001718 <HAL_TIM_Base_MspInit+0x68>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d10f      	bne.n	80016e2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <HAL_TIM_Base_MspInit+0x6c>)
 80016c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <HAL_TIM_Base_MspInit+0x6c>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_TIM_Base_MspInit+0x6c>)
 80016d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80016e0:	e013      	b.n	800170a <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM8)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <HAL_TIM_Base_MspInit+0x70>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d10e      	bne.n	800170a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_TIM_Base_MspInit+0x6c>)
 80016ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_TIM_Base_MspInit+0x6c>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <HAL_TIM_Base_MspInit+0x6c>)
 80016fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40010000 	.word	0x40010000
 800171c:	58024400 	.word	0x58024400
 8001720:	40010400 	.word	0x40010400

08001724 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a26      	ldr	r2, [pc, #152]	; (80017dc <HAL_TIM_MspPostInit+0xb8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d120      	bne.n	8001788 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <HAL_TIM_MspPostInit+0xbc>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174c:	4a24      	ldr	r2, [pc, #144]	; (80017e0 <HAL_TIM_MspPostInit+0xbc>)
 800174e:	f043 0310 	orr.w	r3, r3, #16
 8001752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <HAL_TIM_MspPostInit+0xbc>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001764:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001776:	2301      	movs	r3, #1
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	4818      	ldr	r0, [pc, #96]	; (80017e4 <HAL_TIM_MspPostInit+0xc0>)
 8001782:	f000 fb77 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001786:	e024      	b.n	80017d2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM8)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a16      	ldr	r2, [pc, #88]	; (80017e8 <HAL_TIM_MspPostInit+0xc4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d11f      	bne.n	80017d2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_TIM_MspPostInit+0xbc>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001798:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <HAL_TIM_MspPostInit+0xbc>)
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_TIM_MspPostInit+0xbc>)
 80017a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80017b0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80017c2:	2303      	movs	r3, #3
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	4807      	ldr	r0, [pc, #28]	; (80017ec <HAL_TIM_MspPostInit+0xc8>)
 80017ce:	f000 fb51 	bl	8001e74 <HAL_GPIO_Init>
}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40010000 	.word	0x40010000
 80017e0:	58024400 	.word	0x58024400
 80017e4:	58021000 	.word	0x58021000
 80017e8:	40010400 	.word	0x40010400
 80017ec:	58020800 	.word	0x58020800

080017f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08e      	sub	sp, #56	; 0x38
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a4f      	ldr	r2, [pc, #316]	; (800194c <HAL_UART_MspInit+0x15c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d12f      	bne.n	8001872 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001812:	4b4f      	ldr	r3, [pc, #316]	; (8001950 <HAL_UART_MspInit+0x160>)
 8001814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001818:	4a4d      	ldr	r2, [pc, #308]	; (8001950 <HAL_UART_MspInit+0x160>)
 800181a:	f043 0310 	orr.w	r3, r3, #16
 800181e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001822:	4b4b      	ldr	r3, [pc, #300]	; (8001950 <HAL_UART_MspInit+0x160>)
 8001824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	623b      	str	r3, [r7, #32]
 800182e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b47      	ldr	r3, [pc, #284]	; (8001950 <HAL_UART_MspInit+0x160>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001836:	4a46      	ldr	r2, [pc, #280]	; (8001950 <HAL_UART_MspInit+0x160>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001840:	4b43      	ldr	r3, [pc, #268]	; (8001950 <HAL_UART_MspInit+0x160>)
 8001842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800184e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001860:	2304      	movs	r3, #4
 8001862:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001868:	4619      	mov	r1, r3
 800186a:	483a      	ldr	r0, [pc, #232]	; (8001954 <HAL_UART_MspInit+0x164>)
 800186c:	f000 fb02 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001870:	e067      	b.n	8001942 <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART2)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a38      	ldr	r2, [pc, #224]	; (8001958 <HAL_UART_MspInit+0x168>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d12e      	bne.n	80018da <HAL_UART_MspInit+0xea>
    __HAL_RCC_USART2_CLK_ENABLE();
 800187c:	4b34      	ldr	r3, [pc, #208]	; (8001950 <HAL_UART_MspInit+0x160>)
 800187e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001882:	4a33      	ldr	r2, [pc, #204]	; (8001950 <HAL_UART_MspInit+0x160>)
 8001884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001888:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800188c:	4b30      	ldr	r3, [pc, #192]	; (8001950 <HAL_UART_MspInit+0x160>)
 800188e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	61bb      	str	r3, [r7, #24]
 8001898:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <HAL_UART_MspInit+0x160>)
 800189c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a0:	4a2b      	ldr	r2, [pc, #172]	; (8001950 <HAL_UART_MspInit+0x160>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018aa:	4b29      	ldr	r3, [pc, #164]	; (8001950 <HAL_UART_MspInit+0x160>)
 80018ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018b8:	230c      	movs	r3, #12
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018c8:	2307      	movs	r3, #7
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d0:	4619      	mov	r1, r3
 80018d2:	4822      	ldr	r0, [pc, #136]	; (800195c <HAL_UART_MspInit+0x16c>)
 80018d4:	f000 face 	bl	8001e74 <HAL_GPIO_Init>
}
 80018d8:	e033      	b.n	8001942 <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART3)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a20      	ldr	r2, [pc, #128]	; (8001960 <HAL_UART_MspInit+0x170>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d12e      	bne.n	8001942 <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_UART_MspInit+0x160>)
 80018e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018ea:	4a19      	ldr	r2, [pc, #100]	; (8001950 <HAL_UART_MspInit+0x160>)
 80018ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <HAL_UART_MspInit+0x160>)
 80018f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <HAL_UART_MspInit+0x160>)
 8001904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001908:	4a11      	ldr	r2, [pc, #68]	; (8001950 <HAL_UART_MspInit+0x160>)
 800190a:	f043 0308 	orr.w	r3, r3, #8
 800190e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <HAL_UART_MspInit+0x160>)
 8001914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001920:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	2300      	movs	r3, #0
 8001930:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001932:	2307      	movs	r3, #7
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193a:	4619      	mov	r1, r3
 800193c:	4809      	ldr	r0, [pc, #36]	; (8001964 <HAL_UART_MspInit+0x174>)
 800193e:	f000 fa99 	bl	8001e74 <HAL_GPIO_Init>
}
 8001942:	bf00      	nop
 8001944:	3738      	adds	r7, #56	; 0x38
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40011000 	.word	0x40011000
 8001950:	58024400 	.word	0x58024400
 8001954:	58020400 	.word	0x58020400
 8001958:	40004400 	.word	0x40004400
 800195c:	58020000 	.word	0x58020000
 8001960:	40004800 	.word	0x40004800
 8001964:	58020c00 	.word	0x58020c00

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800196c:	e7fe      	b.n	800196c <NMI_Handler+0x4>

0800196e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler+0x4>

0800197a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <BusFault_Handler+0x4>

08001980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <UsageFault_Handler+0x4>

08001986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b4:	f000 f92a 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019c0:	4b39      	ldr	r3, [pc, #228]	; (8001aa8 <SystemInit+0xec>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c6:	4a38      	ldr	r2, [pc, #224]	; (8001aa8 <SystemInit+0xec>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019d0:	4b36      	ldr	r3, [pc, #216]	; (8001aac <SystemInit+0xf0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	2b06      	cmp	r3, #6
 80019da:	d807      	bhi.n	80019ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019dc:	4b33      	ldr	r3, [pc, #204]	; (8001aac <SystemInit+0xf0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 030f 	bic.w	r3, r3, #15
 80019e4:	4a31      	ldr	r2, [pc, #196]	; (8001aac <SystemInit+0xf0>)
 80019e6:	f043 0307 	orr.w	r3, r3, #7
 80019ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019ec:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <SystemInit+0xf4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a2f      	ldr	r2, [pc, #188]	; (8001ab0 <SystemInit+0xf4>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019f8:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <SystemInit+0xf4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019fe:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <SystemInit+0xf4>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	492b      	ldr	r1, [pc, #172]	; (8001ab0 <SystemInit+0xf4>)
 8001a04:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <SystemInit+0xf8>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a0a:	4b28      	ldr	r3, [pc, #160]	; (8001aac <SystemInit+0xf0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a16:	4b25      	ldr	r3, [pc, #148]	; (8001aac <SystemInit+0xf0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 030f 	bic.w	r3, r3, #15
 8001a1e:	4a23      	ldr	r2, [pc, #140]	; (8001aac <SystemInit+0xf0>)
 8001a20:	f043 0307 	orr.w	r3, r3, #7
 8001a24:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a26:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <SystemInit+0xf4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a2c:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <SystemInit+0xf4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <SystemInit+0xf4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <SystemInit+0xf4>)
 8001a3a:	4a1f      	ldr	r2, [pc, #124]	; (8001ab8 <SystemInit+0xfc>)
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <SystemInit+0xf4>)
 8001a40:	4a1e      	ldr	r2, [pc, #120]	; (8001abc <SystemInit+0x100>)
 8001a42:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <SystemInit+0xf4>)
 8001a46:	4a1e      	ldr	r2, [pc, #120]	; (8001ac0 <SystemInit+0x104>)
 8001a48:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <SystemInit+0xf4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <SystemInit+0xf4>)
 8001a52:	4a1b      	ldr	r2, [pc, #108]	; (8001ac0 <SystemInit+0x104>)
 8001a54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <SystemInit+0xf4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <SystemInit+0xf4>)
 8001a5e:	4a18      	ldr	r2, [pc, #96]	; (8001ac0 <SystemInit+0x104>)
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <SystemInit+0xf4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <SystemInit+0xf4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <SystemInit+0xf4>)
 8001a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <SystemInit+0xf4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <SystemInit+0x108>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <SystemInit+0x10c>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a86:	d202      	bcs.n	8001a8e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <SystemInit+0x110>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <SystemInit+0x114>)
 8001a90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a94:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a96:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <SystemInit+0xec>)
 8001a98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a9c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00
 8001aac:	52002000 	.word	0x52002000
 8001ab0:	58024400 	.word	0x58024400
 8001ab4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ab8:	02020200 	.word	0x02020200
 8001abc:	01ff0000 	.word	0x01ff0000
 8001ac0:	01010280 	.word	0x01010280
 8001ac4:	5c001000 	.word	0x5c001000
 8001ac8:	ffff0000 	.word	0xffff0000
 8001acc:	51008108 	.word	0x51008108
 8001ad0:	52004000 	.word	0x52004000

08001ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b0c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001ad8:	f7ff ff70 	bl	80019bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001adc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ade:	e003      	b.n	8001ae8 <LoopCopyDataInit>

08001ae0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001ae2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ae4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ae6:	3104      	adds	r1, #4

08001ae8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ae8:	480a      	ldr	r0, [pc, #40]	; (8001b14 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001aec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001aee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001af0:	d3f6      	bcc.n	8001ae0 <CopyDataInit>
  ldr  r2, =_sbss
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001af4:	e002      	b.n	8001afc <LoopFillZerobss>

08001af6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001af6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001af8:	f842 3b04 	str.w	r3, [r2], #4

08001afc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001afe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b00:	d3f9      	bcc.n	8001af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b02:	f005 fa39 	bl	8006f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b06:	f7ff f9c7 	bl	8000e98 <main>
  bx  lr    
 8001b0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b0c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001b10:	08007030 	.word	0x08007030
  ldr  r0, =_sdata
 8001b14:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001b18:	24000024 	.word	0x24000024
  ldr  r2, =_sbss
 8001b1c:	24000024 	.word	0x24000024
  ldr  r3, = _ebss
 8001b20:	2400029c 	.word	0x2400029c

08001b24 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b24:	e7fe      	b.n	8001b24 <ADC3_IRQHandler>
	...

08001b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2e:	2003      	movs	r0, #3
 8001b30:	f000 f96e 	bl	8001e10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b34:	f001 f966 	bl	8002e04 <HAL_RCC_GetSysClockFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_Init+0x68>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	f003 030f 	and.w	r3, r3, #15
 8001b44:	4913      	ldr	r1, [pc, #76]	; (8001b94 <HAL_Init+0x6c>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_Init+0x68>)
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	4a0e      	ldr	r2, [pc, #56]	; (8001b94 <HAL_Init+0x6c>)
 8001b5c:	5cd3      	ldrb	r3, [r2, r3]
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
 8001b68:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <HAL_Init+0x70>)
 8001b6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b6c:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <HAL_Init+0x74>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 f814 	bl	8001ba0 <HAL_InitTick>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e002      	b.n	8001b88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b82:	f7ff fd7b 	bl	800167c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	58024400 	.word	0x58024400
 8001b94:	08006ff8 	.word	0x08006ff8
 8001b98:	24000018 	.word	0x24000018
 8001b9c:	24000014 	.word	0x24000014

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_InitTick+0x60>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e021      	b.n	8001bf8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <HAL_InitTick+0x64>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_InitTick+0x60>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f945 	bl	8001e5a <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00e      	b.n	8001bf8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d80a      	bhi.n	8001bf6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f000 f91d 	bl	8001e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <HAL_InitTick+0x68>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	24000020 	.word	0x24000020
 8001c04:	24000014 	.word	0x24000014
 8001c08:	2400001c 	.word	0x2400001c

08001c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x20>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <HAL_IncTick+0x24>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	24000020 	.word	0x24000020
 8001c30:	24000298 	.word	0x24000298

08001c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	24000298 	.word	0x24000298

08001c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff ffee 	bl	8001c34 <HAL_GetTick>
 8001c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d005      	beq.n	8001c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_Delay+0x44>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c72:	bf00      	nop
 8001c74:	f7ff ffde 	bl	8001c34 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d8f7      	bhi.n	8001c74 <HAL_Delay+0x28>
  {
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	24000020 	.word	0x24000020

08001c94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_GetREVID+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	0c1b      	lsrs	r3, r3, #16
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	5c001000 	.word	0x5c001000

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <__NVIC_SetPriorityGrouping+0x40>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cda:	4a04      	ldr	r2, [pc, #16]	; (8001cec <__NVIC_SetPriorityGrouping+0x40>)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	60d3      	str	r3, [r2, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00
 8001cf0:	05fa0000 	.word	0x05fa0000

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	db0a      	blt.n	8001d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	490c      	ldr	r1, [pc, #48]	; (8001d5c <__NVIC_SetPriority+0x4c>)
 8001d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2e:	0112      	lsls	r2, r2, #4
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	440b      	add	r3, r1
 8001d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d38:	e00a      	b.n	8001d50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4908      	ldr	r1, [pc, #32]	; (8001d60 <__NVIC_SetPriority+0x50>)
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	3b04      	subs	r3, #4
 8001d48:	0112      	lsls	r2, r2, #4
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	761a      	strb	r2, [r3, #24]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000e100 	.word	0xe000e100
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f1c3 0307 	rsb	r3, r3, #7
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	bf28      	it	cs
 8001d82:	2304      	movcs	r3, #4
 8001d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d902      	bls.n	8001d94 <NVIC_EncodePriority+0x30>
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3b03      	subs	r3, #3
 8001d92:	e000      	b.n	8001d96 <NVIC_EncodePriority+0x32>
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	401a      	ands	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	43d9      	mvns	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	4313      	orrs	r3, r2
         );
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	; 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ddc:	d301      	bcc.n	8001de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00f      	b.n	8001e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <SysTick_Config+0x40>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dea:	210f      	movs	r1, #15
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	f7ff ff8e 	bl	8001d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <SysTick_Config+0x40>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfa:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <SysTick_Config+0x40>)
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	e000e010 	.word	0xe000e010

08001e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ff47 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e34:	f7ff ff5e 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	6978      	ldr	r0, [r7, #20]
 8001e40:	f7ff ff90 	bl	8001d64 <NVIC_EncodePriority>
 8001e44:	4602      	mov	r2, r0
 8001e46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff5f 	bl	8001d10 <__NVIC_SetPriority>
}
 8001e52:	bf00      	nop
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffb2 	bl	8001dcc <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e82:	4b89      	ldr	r3, [pc, #548]	; (80020a8 <HAL_GPIO_Init+0x234>)
 8001e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e86:	e194      	b.n	80021b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8186 	beq.w	80021ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d00b      	beq.n	8001ec0 <HAL_GPIO_Init+0x4c>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d007      	beq.n	8001ec0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eb4:	2b11      	cmp	r3, #17
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b12      	cmp	r3, #18
 8001ebe:	d130      	bne.n	8001f22 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	091b      	lsrs	r3, r3, #4
 8001f0c:	f003 0201 	and.w	r2, r3, #1
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0xee>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b12      	cmp	r3, #18
 8001f60:	d123      	bne.n	8001faa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	220f      	movs	r2, #15
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	69b9      	ldr	r1, [r7, #24]
 8001fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0203 	and.w	r2, r3, #3
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80e0 	beq.w	80021ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fec:	4b2f      	ldr	r3, [pc, #188]	; (80020ac <HAL_GPIO_Init+0x238>)
 8001fee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ff2:	4a2e      	ldr	r2, [pc, #184]	; (80020ac <HAL_GPIO_Init+0x238>)
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ffc:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <HAL_GPIO_Init+0x238>)
 8001ffe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800200a:	4a29      	ldr	r2, [pc, #164]	; (80020b0 <HAL_GPIO_Init+0x23c>)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	3302      	adds	r3, #2
 8002012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	220f      	movs	r2, #15
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a20      	ldr	r2, [pc, #128]	; (80020b4 <HAL_GPIO_Init+0x240>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d052      	beq.n	80020dc <HAL_GPIO_Init+0x268>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a1f      	ldr	r2, [pc, #124]	; (80020b8 <HAL_GPIO_Init+0x244>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d031      	beq.n	80020a2 <HAL_GPIO_Init+0x22e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a1e      	ldr	r2, [pc, #120]	; (80020bc <HAL_GPIO_Init+0x248>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d02b      	beq.n	800209e <HAL_GPIO_Init+0x22a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <HAL_GPIO_Init+0x24c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d025      	beq.n	800209a <HAL_GPIO_Init+0x226>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <HAL_GPIO_Init+0x250>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01f      	beq.n	8002096 <HAL_GPIO_Init+0x222>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <HAL_GPIO_Init+0x254>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d019      	beq.n	8002092 <HAL_GPIO_Init+0x21e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a1a      	ldr	r2, [pc, #104]	; (80020cc <HAL_GPIO_Init+0x258>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <HAL_GPIO_Init+0x21a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a19      	ldr	r2, [pc, #100]	; (80020d0 <HAL_GPIO_Init+0x25c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00d      	beq.n	800208a <HAL_GPIO_Init+0x216>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <HAL_GPIO_Init+0x260>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0x212>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <HAL_GPIO_Init+0x264>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <HAL_GPIO_Init+0x20e>
 800207e:	2309      	movs	r3, #9
 8002080:	e02d      	b.n	80020de <HAL_GPIO_Init+0x26a>
 8002082:	230a      	movs	r3, #10
 8002084:	e02b      	b.n	80020de <HAL_GPIO_Init+0x26a>
 8002086:	2308      	movs	r3, #8
 8002088:	e029      	b.n	80020de <HAL_GPIO_Init+0x26a>
 800208a:	2307      	movs	r3, #7
 800208c:	e027      	b.n	80020de <HAL_GPIO_Init+0x26a>
 800208e:	2306      	movs	r3, #6
 8002090:	e025      	b.n	80020de <HAL_GPIO_Init+0x26a>
 8002092:	2305      	movs	r3, #5
 8002094:	e023      	b.n	80020de <HAL_GPIO_Init+0x26a>
 8002096:	2304      	movs	r3, #4
 8002098:	e021      	b.n	80020de <HAL_GPIO_Init+0x26a>
 800209a:	2303      	movs	r3, #3
 800209c:	e01f      	b.n	80020de <HAL_GPIO_Init+0x26a>
 800209e:	2302      	movs	r3, #2
 80020a0:	e01d      	b.n	80020de <HAL_GPIO_Init+0x26a>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e01b      	b.n	80020de <HAL_GPIO_Init+0x26a>
 80020a6:	bf00      	nop
 80020a8:	58000080 	.word	0x58000080
 80020ac:	58024400 	.word	0x58024400
 80020b0:	58000400 	.word	0x58000400
 80020b4:	58020000 	.word	0x58020000
 80020b8:	58020400 	.word	0x58020400
 80020bc:	58020800 	.word	0x58020800
 80020c0:	58020c00 	.word	0x58020c00
 80020c4:	58021000 	.word	0x58021000
 80020c8:	58021400 	.word	0x58021400
 80020cc:	58021800 	.word	0x58021800
 80020d0:	58021c00 	.word	0x58021c00
 80020d4:	58022000 	.word	0x58022000
 80020d8:	58022400 	.word	0x58022400
 80020dc:	2300      	movs	r3, #0
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	f002 0203 	and.w	r2, r2, #3
 80020e4:	0092      	lsls	r2, r2, #2
 80020e6:	4093      	lsls	r3, r2
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ee:	4938      	ldr	r1, [pc, #224]	; (80021d0 <HAL_GPIO_Init+0x35c>)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	3302      	adds	r3, #2
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002176:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800217e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	3301      	adds	r3, #1
 80021b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f47f ae63 	bne.w	8001e88 <HAL_GPIO_Init+0x14>
  }
}
 80021c2:	bf00      	nop
 80021c4:	bf00      	nop
 80021c6:	3724      	adds	r7, #36	; 0x24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	58000400 	.word	0x58000400

080021d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	887b      	ldrh	r3, [r7, #2]
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e001      	b.n	80021f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <HAL_PWREx_ConfigSupply+0x70>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b04      	cmp	r3, #4
 8002216:	d00a      	beq.n	800222e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002218:	4b16      	ldr	r3, [pc, #88]	; (8002274 <HAL_PWREx_ConfigSupply+0x70>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	429a      	cmp	r2, r3
 8002224:	d001      	beq.n	800222a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e01f      	b.n	800226a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e01d      	b.n	800226a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800222e:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_PWREx_ConfigSupply+0x70>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f023 0207 	bic.w	r2, r3, #7
 8002236:	490f      	ldr	r1, [pc, #60]	; (8002274 <HAL_PWREx_ConfigSupply+0x70>)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4313      	orrs	r3, r2
 800223c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800223e:	f7ff fcf9 	bl	8001c34 <HAL_GetTick>
 8002242:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002244:	e009      	b.n	800225a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002246:	f7ff fcf5 	bl	8001c34 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002254:	d901      	bls.n	800225a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e007      	b.n	800226a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_PWREx_ConfigSupply+0x70>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002266:	d1ee      	bne.n	8002246 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	58024800 	.word	0x58024800

08002278 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08c      	sub	sp, #48	; 0x30
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e3ff      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8087 	beq.w	80023a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002298:	4b99      	ldr	r3, [pc, #612]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022a2:	4b97      	ldr	r3, [pc, #604]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d007      	beq.n	80022be <HAL_RCC_OscConfig+0x46>
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	2b18      	cmp	r3, #24
 80022b2:	d110      	bne.n	80022d6 <HAL_RCC_OscConfig+0x5e>
 80022b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d10b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022be:	4b90      	ldr	r3, [pc, #576]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d06c      	beq.n	80023a4 <HAL_RCC_OscConfig+0x12c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d168      	bne.n	80023a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e3d9      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x76>
 80022e0:	4b87      	ldr	r3, [pc, #540]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a86      	ldr	r2, [pc, #536]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	e02e      	b.n	800234c <HAL_RCC_OscConfig+0xd4>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x98>
 80022f6:	4b82      	ldr	r3, [pc, #520]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a81      	ldr	r2, [pc, #516]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80022fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b7f      	ldr	r3, [pc, #508]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a7e      	ldr	r2, [pc, #504]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e01d      	b.n	800234c <HAL_RCC_OscConfig+0xd4>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0xbc>
 800231a:	4b79      	ldr	r3, [pc, #484]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a78      	ldr	r2, [pc, #480]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b76      	ldr	r3, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a75      	ldr	r2, [pc, #468]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0xd4>
 8002334:	4b72      	ldr	r3, [pc, #456]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a71      	ldr	r2, [pc, #452]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800233a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b6f      	ldr	r3, [pc, #444]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a6e      	ldr	r2, [pc, #440]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d013      	beq.n	800237c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7ff fc6e 	bl	8001c34 <HAL_GetTick>
 8002358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800235c:	f7ff fc6a 	bl	8001c34 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e38d      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800236e:	4b64      	ldr	r3, [pc, #400]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0xe4>
 800237a:	e014      	b.n	80023a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7ff fc5a 	bl	8001c34 <HAL_GetTick>
 8002380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002384:	f7ff fc56 	bl	8001c34 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e379      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002396:	4b5a      	ldr	r3, [pc, #360]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x10c>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80ae 	beq.w	8002510 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b4:	4b52      	ldr	r3, [pc, #328]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023be:	4b50      	ldr	r3, [pc, #320]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <HAL_RCC_OscConfig+0x162>
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	2b18      	cmp	r3, #24
 80023ce:	d13a      	bne.n	8002446 <HAL_RCC_OscConfig+0x1ce>
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d135      	bne.n	8002446 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023da:	4b49      	ldr	r3, [pc, #292]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d005      	beq.n	80023f2 <HAL_RCC_OscConfig+0x17a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e34b      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f2:	f7ff fc4f 	bl	8001c94 <HAL_GetREVID>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d817      	bhi.n	8002430 <HAL_RCC_OscConfig+0x1b8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b40      	cmp	r3, #64	; 0x40
 8002406:	d108      	bne.n	800241a <HAL_RCC_OscConfig+0x1a2>
 8002408:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002410:	4a3b      	ldr	r2, [pc, #236]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002416:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002418:	e07a      	b.n	8002510 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241a:	4b39      	ldr	r3, [pc, #228]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	031b      	lsls	r3, r3, #12
 8002428:	4935      	ldr	r1, [pc, #212]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800242e:	e06f      	b.n	8002510 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002430:	4b33      	ldr	r3, [pc, #204]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	061b      	lsls	r3, r3, #24
 800243e:	4930      	ldr	r1, [pc, #192]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002444:	e064      	b.n	8002510 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d045      	beq.n	80024da <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800244e:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 0219 	bic.w	r2, r3, #25
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	4929      	ldr	r1, [pc, #164]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7ff fbe8 	bl	8001c34 <HAL_GetTick>
 8002464:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002468:	f7ff fbe4 	bl	8001c34 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e307      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800247a:	4b21      	ldr	r3, [pc, #132]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002486:	f7ff fc05 	bl	8001c94 <HAL_GetREVID>
 800248a:	4603      	mov	r3, r0
 800248c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002490:	4293      	cmp	r3, r2
 8002492:	d817      	bhi.n	80024c4 <HAL_RCC_OscConfig+0x24c>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b40      	cmp	r3, #64	; 0x40
 800249a:	d108      	bne.n	80024ae <HAL_RCC_OscConfig+0x236>
 800249c:	4b18      	ldr	r3, [pc, #96]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024a4:	4a16      	ldr	r2, [pc, #88]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80024a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024aa:	6053      	str	r3, [r2, #4]
 80024ac:	e030      	b.n	8002510 <HAL_RCC_OscConfig+0x298>
 80024ae:	4b14      	ldr	r3, [pc, #80]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	031b      	lsls	r3, r3, #12
 80024bc:	4910      	ldr	r1, [pc, #64]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	604b      	str	r3, [r1, #4]
 80024c2:	e025      	b.n	8002510 <HAL_RCC_OscConfig+0x298>
 80024c4:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	061b      	lsls	r3, r3, #24
 80024d2:	490b      	ldr	r1, [pc, #44]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
 80024d8:	e01a      	b.n	8002510 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a08      	ldr	r2, [pc, #32]	; (8002500 <HAL_RCC_OscConfig+0x288>)
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e6:	f7ff fba5 	bl	8001c34 <HAL_GetTick>
 80024ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024ec:	e00a      	b.n	8002504 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ee:	f7ff fba1 	bl	8001c34 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d903      	bls.n	8002504 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e2c4      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
 8002500:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002504:	4ba4      	ldr	r3, [pc, #656]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1ee      	bne.n	80024ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80a9 	beq.w	8002670 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251e:	4b9e      	ldr	r3, [pc, #632]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002526:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002528:	4b9b      	ldr	r3, [pc, #620]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b08      	cmp	r3, #8
 8002532:	d007      	beq.n	8002544 <HAL_RCC_OscConfig+0x2cc>
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	2b18      	cmp	r3, #24
 8002538:	d13a      	bne.n	80025b0 <HAL_RCC_OscConfig+0x338>
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b01      	cmp	r3, #1
 8002542:	d135      	bne.n	80025b0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002544:	4b94      	ldr	r3, [pc, #592]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_OscConfig+0x2e4>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	2b80      	cmp	r3, #128	; 0x80
 8002556:	d001      	beq.n	800255c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e296      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800255c:	f7ff fb9a 	bl	8001c94 <HAL_GetREVID>
 8002560:	4603      	mov	r3, r0
 8002562:	f241 0203 	movw	r2, #4099	; 0x1003
 8002566:	4293      	cmp	r3, r2
 8002568:	d817      	bhi.n	800259a <HAL_RCC_OscConfig+0x322>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	2b20      	cmp	r3, #32
 8002570:	d108      	bne.n	8002584 <HAL_RCC_OscConfig+0x30c>
 8002572:	4b89      	ldr	r3, [pc, #548]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800257a:	4a87      	ldr	r2, [pc, #540]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 800257c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002580:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002582:	e075      	b.n	8002670 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002584:	4b84      	ldr	r3, [pc, #528]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	069b      	lsls	r3, r3, #26
 8002592:	4981      	ldr	r1, [pc, #516]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002598:	e06a      	b.n	8002670 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800259a:	4b7f      	ldr	r3, [pc, #508]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	061b      	lsls	r3, r3, #24
 80025a8:	497b      	ldr	r1, [pc, #492]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025ae:	e05f      	b.n	8002670 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d042      	beq.n	800263e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025b8:	4b77      	ldr	r3, [pc, #476]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a76      	ldr	r2, [pc, #472]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 80025be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7ff fb36 	bl	8001c34 <HAL_GetTick>
 80025c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80025cc:	f7ff fb32 	bl	8001c34 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e255      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025de:	4b6e      	ldr	r3, [pc, #440]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025ea:	f7ff fb53 	bl	8001c94 <HAL_GetREVID>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d817      	bhi.n	8002628 <HAL_RCC_OscConfig+0x3b0>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d108      	bne.n	8002612 <HAL_RCC_OscConfig+0x39a>
 8002600:	4b65      	ldr	r3, [pc, #404]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002608:	4a63      	ldr	r2, [pc, #396]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 800260a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800260e:	6053      	str	r3, [r2, #4]
 8002610:	e02e      	b.n	8002670 <HAL_RCC_OscConfig+0x3f8>
 8002612:	4b61      	ldr	r3, [pc, #388]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	069b      	lsls	r3, r3, #26
 8002620:	495d      	ldr	r1, [pc, #372]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
 8002626:	e023      	b.n	8002670 <HAL_RCC_OscConfig+0x3f8>
 8002628:	4b5b      	ldr	r3, [pc, #364]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	061b      	lsls	r3, r3, #24
 8002636:	4958      	ldr	r1, [pc, #352]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002638:	4313      	orrs	r3, r2
 800263a:	60cb      	str	r3, [r1, #12]
 800263c:	e018      	b.n	8002670 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800263e:	4b56      	ldr	r3, [pc, #344]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a55      	ldr	r2, [pc, #340]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7ff faf3 	bl	8001c34 <HAL_GetTick>
 800264e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002652:	f7ff faef 	bl	8001c34 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e212      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002664:	4b4c      	ldr	r3, [pc, #304]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d036      	beq.n	80026ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d019      	beq.n	80026b8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002684:	4b44      	ldr	r3, [pc, #272]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002688:	4a43      	ldr	r2, [pc, #268]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002690:	f7ff fad0 	bl	8001c34 <HAL_GetTick>
 8002694:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002698:	f7ff facc 	bl	8001c34 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e1ef      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026aa:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 80026ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x420>
 80026b6:	e018      	b.n	80026ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b8:	4b37      	ldr	r3, [pc, #220]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 80026ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026bc:	4a36      	ldr	r2, [pc, #216]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7ff fab6 	bl	8001c34 <HAL_GetTick>
 80026c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026cc:	f7ff fab2 	bl	8001c34 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e1d5      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026de:	4b2e      	ldr	r3, [pc, #184]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 80026e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d036      	beq.n	8002764 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d019      	beq.n	8002732 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026fe:	4b26      	ldr	r3, [pc, #152]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a25      	ldr	r2, [pc, #148]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002704:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002708:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800270a:	f7ff fa93 	bl	8001c34 <HAL_GetTick>
 800270e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002712:	f7ff fa8f 	bl	8001c34 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e1b2      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002724:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x49a>
 8002730:	e018      	b.n	8002764 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002732:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a18      	ldr	r2, [pc, #96]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 8002738:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800273c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800273e:	f7ff fa79 	bl	8001c34 <HAL_GetTick>
 8002742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002746:	f7ff fa75 	bl	8001c34 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e198      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HAL_RCC_OscConfig+0x520>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f0      	bne.n	8002746 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 8085 	beq.w	800287c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <HAL_RCC_OscConfig+0x524>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a09      	ldr	r2, [pc, #36]	; (800279c <HAL_RCC_OscConfig+0x524>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800277e:	f7ff fa59 	bl	8001c34 <HAL_GetTick>
 8002782:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002784:	e00c      	b.n	80027a0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002786:	f7ff fa55 	bl	8001c34 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b64      	cmp	r3, #100	; 0x64
 8002792:	d905      	bls.n	80027a0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e178      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
 8002798:	58024400 	.word	0x58024400
 800279c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027a0:	4b96      	ldr	r3, [pc, #600]	; (80029fc <HAL_RCC_OscConfig+0x784>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0ec      	beq.n	8002786 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d106      	bne.n	80027c2 <HAL_RCC_OscConfig+0x54a>
 80027b4:	4b92      	ldr	r3, [pc, #584]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	4a91      	ldr	r2, [pc, #580]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	6713      	str	r3, [r2, #112]	; 0x70
 80027c0:	e02d      	b.n	800281e <HAL_RCC_OscConfig+0x5a6>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x56c>
 80027ca:	4b8d      	ldr	r3, [pc, #564]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	4a8c      	ldr	r2, [pc, #560]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	6713      	str	r3, [r2, #112]	; 0x70
 80027d6:	4b8a      	ldr	r3, [pc, #552]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027da:	4a89      	ldr	r2, [pc, #548]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80027dc:	f023 0304 	bic.w	r3, r3, #4
 80027e0:	6713      	str	r3, [r2, #112]	; 0x70
 80027e2:	e01c      	b.n	800281e <HAL_RCC_OscConfig+0x5a6>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b05      	cmp	r3, #5
 80027ea:	d10c      	bne.n	8002806 <HAL_RCC_OscConfig+0x58e>
 80027ec:	4b84      	ldr	r3, [pc, #528]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	4a83      	ldr	r2, [pc, #524]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80027f2:	f043 0304 	orr.w	r3, r3, #4
 80027f6:	6713      	str	r3, [r2, #112]	; 0x70
 80027f8:	4b81      	ldr	r3, [pc, #516]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	4a80      	ldr	r2, [pc, #512]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6713      	str	r3, [r2, #112]	; 0x70
 8002804:	e00b      	b.n	800281e <HAL_RCC_OscConfig+0x5a6>
 8002806:	4b7e      	ldr	r3, [pc, #504]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	4a7d      	ldr	r2, [pc, #500]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	6713      	str	r3, [r2, #112]	; 0x70
 8002812:	4b7b      	ldr	r3, [pc, #492]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	4a7a      	ldr	r2, [pc, #488]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 8002818:	f023 0304 	bic.w	r3, r3, #4
 800281c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d015      	beq.n	8002852 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002826:	f7ff fa05 	bl	8001c34 <HAL_GetTick>
 800282a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800282c:	e00a      	b.n	8002844 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f7ff fa01 	bl	8001c34 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f241 3288 	movw	r2, #5000	; 0x1388
 800283c:	4293      	cmp	r3, r2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e122      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002844:	4b6e      	ldr	r3, [pc, #440]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0ee      	beq.n	800282e <HAL_RCC_OscConfig+0x5b6>
 8002850:	e014      	b.n	800287c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002852:	f7ff f9ef 	bl	8001c34 <HAL_GetTick>
 8002856:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002858:	e00a      	b.n	8002870 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f7ff f9eb 	bl	8001c34 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	f241 3288 	movw	r2, #5000	; 0x1388
 8002868:	4293      	cmp	r3, r2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e10c      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002870:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1ee      	bne.n	800285a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 8101 	beq.w	8002a88 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002886:	4b5e      	ldr	r3, [pc, #376]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800288e:	2b18      	cmp	r3, #24
 8002890:	f000 80bc 	beq.w	8002a0c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	2b02      	cmp	r3, #2
 800289a:	f040 8095 	bne.w	80029c8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289e:	4b58      	ldr	r3, [pc, #352]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a57      	ldr	r2, [pc, #348]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80028a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7ff f9c3 	bl	8001c34 <HAL_GetTick>
 80028ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b2:	f7ff f9bf 	bl	8001c34 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e0e2      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028c4:	4b4e      	ldr	r3, [pc, #312]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f0      	bne.n	80028b2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028d0:	4b4b      	ldr	r3, [pc, #300]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80028d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028d4:	4b4b      	ldr	r3, [pc, #300]	; (8002a04 <HAL_RCC_OscConfig+0x78c>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	430a      	orrs	r2, r1
 80028e4:	4946      	ldr	r1, [pc, #280]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	628b      	str	r3, [r1, #40]	; 0x28
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	3b01      	subs	r3, #1
 80028f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f8:	3b01      	subs	r3, #1
 80028fa:	025b      	lsls	r3, r3, #9
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	3b01      	subs	r3, #1
 8002906:	041b      	lsls	r3, r3, #16
 8002908:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002912:	3b01      	subs	r3, #1
 8002914:	061b      	lsls	r3, r3, #24
 8002916:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800291a:	4939      	ldr	r1, [pc, #228]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 800291c:	4313      	orrs	r3, r2
 800291e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002920:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	4a36      	ldr	r2, [pc, #216]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 8002926:	f023 0301 	bic.w	r3, r3, #1
 800292a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800292c:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 800292e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002930:	4b35      	ldr	r3, [pc, #212]	; (8002a08 <HAL_RCC_OscConfig+0x790>)
 8002932:	4013      	ands	r3, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002938:	00d2      	lsls	r2, r2, #3
 800293a:	4931      	ldr	r1, [pc, #196]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 800293c:	4313      	orrs	r3, r2
 800293e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002940:	4b2f      	ldr	r3, [pc, #188]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	f023 020c 	bic.w	r2, r3, #12
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	492c      	ldr	r1, [pc, #176]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 800294e:	4313      	orrs	r3, r2
 8002950:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002952:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	f023 0202 	bic.w	r2, r3, #2
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	4928      	ldr	r1, [pc, #160]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 8002960:	4313      	orrs	r3, r2
 8002962:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002964:	4b26      	ldr	r3, [pc, #152]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	4a25      	ldr	r2, [pc, #148]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 800296a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002970:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	4a22      	ldr	r2, [pc, #136]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 8002976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800297c:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	4a1f      	ldr	r2, [pc, #124]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 8002982:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002986:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002988:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	4a1c      	ldr	r2, [pc, #112]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002994:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 800299a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800299e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7ff f948 	bl	8001c34 <HAL_GetTick>
 80029a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a8:	f7ff f944 	bl	8001c34 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e067      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x730>
 80029c6:	e05f      	b.n	8002a88 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0c      	ldr	r2, [pc, #48]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80029ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7ff f92e 	bl	8001c34 <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029dc:	f7ff f92a 	bl	8001c34 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e04d      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ee:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <HAL_RCC_OscConfig+0x788>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x764>
 80029fa:	e045      	b.n	8002a88 <HAL_RCC_OscConfig+0x810>
 80029fc:	58024800 	.word	0x58024800
 8002a00:	58024400 	.word	0x58024400
 8002a04:	fffffc0c 	.word	0xfffffc0c
 8002a08:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a0c:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <HAL_RCC_OscConfig+0x81c>)
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_RCC_OscConfig+0x81c>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d031      	beq.n	8002a84 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f003 0203 	and.w	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d12a      	bne.n	8002a84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d122      	bne.n	8002a84 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d11a      	bne.n	8002a84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	0a5b      	lsrs	r3, r3, #9
 8002a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d111      	bne.n	8002a84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	0c1b      	lsrs	r3, r3, #16
 8002a64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d108      	bne.n	8002a84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	0e1b      	lsrs	r3, r3, #24
 8002a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3730      	adds	r7, #48	; 0x30
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	58024400 	.word	0x58024400

08002a98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e19c      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aac:	4b8a      	ldr	r3, [pc, #552]	; (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d910      	bls.n	8002adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b87      	ldr	r3, [pc, #540]	; (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 020f 	bic.w	r2, r3, #15
 8002ac2:	4985      	ldr	r1, [pc, #532]	; (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b83      	ldr	r3, [pc, #524]	; (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e184      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d010      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	4b7b      	ldr	r3, [pc, #492]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d908      	bls.n	8002b0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002af8:	4b78      	ldr	r3, [pc, #480]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	4975      	ldr	r1, [pc, #468]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d010      	beq.n	8002b38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	4b70      	ldr	r3, [pc, #448]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d908      	bls.n	8002b38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b26:	4b6d      	ldr	r3, [pc, #436]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	496a      	ldr	r1, [pc, #424]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d010      	beq.n	8002b66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699a      	ldr	r2, [r3, #24]
 8002b48:	4b64      	ldr	r3, [pc, #400]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d908      	bls.n	8002b66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b54:	4b61      	ldr	r3, [pc, #388]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	495e      	ldr	r1, [pc, #376]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d010      	beq.n	8002b94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69da      	ldr	r2, [r3, #28]
 8002b76:	4b59      	ldr	r3, [pc, #356]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d908      	bls.n	8002b94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b82:	4b56      	ldr	r3, [pc, #344]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	4953      	ldr	r1, [pc, #332]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d010      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	4b4d      	ldr	r3, [pc, #308]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d908      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb0:	4b4a      	ldr	r3, [pc, #296]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f023 020f 	bic.w	r2, r3, #15
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4947      	ldr	r1, [pc, #284]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d055      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002bce:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	4940      	ldr	r1, [pc, #256]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d107      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002be8:	4b3c      	ldr	r3, [pc, #240]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d121      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0f6      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c00:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d115      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0ea      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d107      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c18:	4b30      	ldr	r3, [pc, #192]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d109      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0de      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c28:	4b2c      	ldr	r3, [pc, #176]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0d6      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c38:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f023 0207 	bic.w	r2, r3, #7
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4925      	ldr	r1, [pc, #148]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4a:	f7fe fff3 	bl	8001c34 <HAL_GetTick>
 8002c4e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c52:	f7fe ffef 	bl	8001c34 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e0be      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c68:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d1eb      	bne.n	8002c52 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d010      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d208      	bcs.n	8002ca8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c96:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f023 020f 	bic.w	r2, r3, #15
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	490e      	ldr	r1, [pc, #56]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d214      	bcs.n	8002ce0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 020f 	bic.w	r2, r3, #15
 8002cbe:	4906      	ldr	r1, [pc, #24]	; (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d005      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e086      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
 8002cd8:	52002000 	.word	0x52002000
 8002cdc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d010      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d208      	bcs.n	8002d0e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cfc:	4b3c      	ldr	r3, [pc, #240]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	4939      	ldr	r1, [pc, #228]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d010      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	4b34      	ldr	r3, [pc, #208]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d208      	bcs.n	8002d3c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d2a:	4b31      	ldr	r3, [pc, #196]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	492e      	ldr	r1, [pc, #184]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d010      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699a      	ldr	r2, [r3, #24]
 8002d4c:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d208      	bcs.n	8002d6a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d58:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	4922      	ldr	r1, [pc, #136]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d010      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69da      	ldr	r2, [r3, #28]
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d208      	bcs.n	8002d98 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d86:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	4917      	ldr	r1, [pc, #92]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d98:	f000 f834 	bl	8002e04 <HAL_RCC_GetSysClockFreq>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	0a1b      	lsrs	r3, r3, #8
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	4912      	ldr	r1, [pc, #72]	; (8002df4 <HAL_RCC_ClockConfig+0x35c>)
 8002daa:	5ccb      	ldrb	r3, [r1, r3]
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
 8002db4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	4a0d      	ldr	r2, [pc, #52]	; (8002df4 <HAL_RCC_ClockConfig+0x35c>)
 8002dc0:	5cd3      	ldrb	r3, [r2, r3]
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dcc:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <HAL_RCC_ClockConfig+0x360>)
 8002dce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dd0:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <HAL_RCC_ClockConfig+0x364>)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_RCC_ClockConfig+0x368>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe fee0 	bl	8001ba0 <HAL_InitTick>
 8002de0:	4603      	mov	r3, r0
 8002de2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	58024400 	.word	0x58024400
 8002df4:	08006ff8 	.word	0x08006ff8
 8002df8:	24000018 	.word	0x24000018
 8002dfc:	24000014 	.word	0x24000014
 8002e00:	2400001c 	.word	0x2400001c

08002e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b089      	sub	sp, #36	; 0x24
 8002e08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e0a:	4bb3      	ldr	r3, [pc, #716]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e12:	2b18      	cmp	r3, #24
 8002e14:	f200 8155 	bhi.w	80030c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e18:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1e:	bf00      	nop
 8002e20:	08002e85 	.word	0x08002e85
 8002e24:	080030c3 	.word	0x080030c3
 8002e28:	080030c3 	.word	0x080030c3
 8002e2c:	080030c3 	.word	0x080030c3
 8002e30:	080030c3 	.word	0x080030c3
 8002e34:	080030c3 	.word	0x080030c3
 8002e38:	080030c3 	.word	0x080030c3
 8002e3c:	080030c3 	.word	0x080030c3
 8002e40:	08002eab 	.word	0x08002eab
 8002e44:	080030c3 	.word	0x080030c3
 8002e48:	080030c3 	.word	0x080030c3
 8002e4c:	080030c3 	.word	0x080030c3
 8002e50:	080030c3 	.word	0x080030c3
 8002e54:	080030c3 	.word	0x080030c3
 8002e58:	080030c3 	.word	0x080030c3
 8002e5c:	080030c3 	.word	0x080030c3
 8002e60:	08002eb1 	.word	0x08002eb1
 8002e64:	080030c3 	.word	0x080030c3
 8002e68:	080030c3 	.word	0x080030c3
 8002e6c:	080030c3 	.word	0x080030c3
 8002e70:	080030c3 	.word	0x080030c3
 8002e74:	080030c3 	.word	0x080030c3
 8002e78:	080030c3 	.word	0x080030c3
 8002e7c:	080030c3 	.word	0x080030c3
 8002e80:	08002eb7 	.word	0x08002eb7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e84:	4b94      	ldr	r3, [pc, #592]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d009      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e90:	4b91      	ldr	r3, [pc, #580]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	08db      	lsrs	r3, r3, #3
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	4a90      	ldr	r2, [pc, #576]	; (80030dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002ea2:	e111      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ea4:	4b8d      	ldr	r3, [pc, #564]	; (80030dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ea6:	61bb      	str	r3, [r7, #24]
    break;
 8002ea8:	e10e      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002eaa:	4b8d      	ldr	r3, [pc, #564]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002eac:	61bb      	str	r3, [r7, #24]
    break;
 8002eae:	e10b      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002eb0:	4b8c      	ldr	r3, [pc, #560]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002eb2:	61bb      	str	r3, [r7, #24]
    break;
 8002eb4:	e108      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002eb6:	4b88      	ldr	r3, [pc, #544]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002ec0:	4b85      	ldr	r3, [pc, #532]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ecc:	4b82      	ldr	r3, [pc, #520]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002ed6:	4b80      	ldr	r3, [pc, #512]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eda:	08db      	lsrs	r3, r3, #3
 8002edc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80e1 	beq.w	80030bc <HAL_RCC_GetSysClockFreq+0x2b8>
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	f000 8083 	beq.w	8003008 <HAL_RCC_GetSysClockFreq+0x204>
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	f200 80a1 	bhi.w	800304c <HAL_RCC_GetSysClockFreq+0x248>
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0x114>
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d056      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f16:	e099      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f18:	4b6f      	ldr	r3, [pc, #444]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d02d      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f24:	4b6c      	ldr	r3, [pc, #432]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	08db      	lsrs	r3, r3, #3
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	4a6b      	ldr	r2, [pc, #428]	; (80030dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
 8002f34:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	ee07 3a90 	vmov	s15, r3
 8002f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f4e:	4b62      	ldr	r3, [pc, #392]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f62:	eddf 5a61 	vldr	s11, [pc, #388]	; 80030e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002f7e:	e087      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80030ec <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f92:	4b51      	ldr	r3, [pc, #324]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fa6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80030e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fc2:	e065      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80030f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fd6:	4b40      	ldr	r3, [pc, #256]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80030e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003006:	e043      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003012:	eddf 6a38 	vldr	s13, [pc, #224]	; 80030f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800301a:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800302a:	ed97 6a02 	vldr	s12, [r7, #8]
 800302e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80030e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800303a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800303e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800304a:	e021      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	ee07 3a90 	vmov	s15, r3
 8003052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003056:	eddf 6a26 	vldr	s13, [pc, #152]	; 80030f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800305a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800305e:	4b1e      	ldr	r3, [pc, #120]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800306e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003072:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80030e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800307a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800307e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800308e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003090:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	0a5b      	lsrs	r3, r3, #9
 8003096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800309a:	3301      	adds	r3, #1
 800309c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	ee07 3a90 	vmov	s15, r3
 80030a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80030ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030b4:	ee17 3a90 	vmov	r3, s15
 80030b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80030ba:	e005      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	61bb      	str	r3, [r7, #24]
    break;
 80030c0:	e002      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80030c2:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030c4:	61bb      	str	r3, [r7, #24]
    break;
 80030c6:	bf00      	nop
  }

  return sysclockfreq;
 80030c8:	69bb      	ldr	r3, [r7, #24]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3724      	adds	r7, #36	; 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	58024400 	.word	0x58024400
 80030dc:	03d09000 	.word	0x03d09000
 80030e0:	003d0900 	.word	0x003d0900
 80030e4:	017d7840 	.word	0x017d7840
 80030e8:	46000000 	.word	0x46000000
 80030ec:	4c742400 	.word	0x4c742400
 80030f0:	4a742400 	.word	0x4a742400
 80030f4:	4bbebc20 	.word	0x4bbebc20

080030f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80030fe:	f7ff fe81 	bl	8002e04 <HAL_RCC_GetSysClockFreq>
 8003102:	4602      	mov	r2, r0
 8003104:	4b10      	ldr	r3, [pc, #64]	; (8003148 <HAL_RCC_GetHCLKFreq+0x50>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	0a1b      	lsrs	r3, r3, #8
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	490f      	ldr	r1, [pc, #60]	; (800314c <HAL_RCC_GetHCLKFreq+0x54>)
 8003110:	5ccb      	ldrb	r3, [r1, r3]
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800311c:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <HAL_RCC_GetHCLKFreq+0x50>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	4a09      	ldr	r2, [pc, #36]	; (800314c <HAL_RCC_GetHCLKFreq+0x54>)
 8003126:	5cd3      	ldrb	r3, [r2, r3]
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	fa22 f303 	lsr.w	r3, r2, r3
 8003132:	4a07      	ldr	r2, [pc, #28]	; (8003150 <HAL_RCC_GetHCLKFreq+0x58>)
 8003134:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003136:	4a07      	ldr	r2, [pc, #28]	; (8003154 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800313c:	4b04      	ldr	r3, [pc, #16]	; (8003150 <HAL_RCC_GetHCLKFreq+0x58>)
 800313e:	681b      	ldr	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	58024400 	.word	0x58024400
 800314c:	08006ff8 	.word	0x08006ff8
 8003150:	24000018 	.word	0x24000018
 8003154:	24000014 	.word	0x24000014

08003158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800315c:	f7ff ffcc 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8003160:	4602      	mov	r2, r0
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	091b      	lsrs	r3, r3, #4
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	4904      	ldr	r1, [pc, #16]	; (8003180 <HAL_RCC_GetPCLK1Freq+0x28>)
 800316e:	5ccb      	ldrb	r3, [r1, r3]
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd80      	pop	{r7, pc}
 800317c:	58024400 	.word	0x58024400
 8003180:	08006ff8 	.word	0x08006ff8

08003184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003188:	f7ff ffb6 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	4904      	ldr	r1, [pc, #16]	; (80031ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800319a:	5ccb      	ldrb	r3, [r1, r3]
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	58024400 	.word	0x58024400
 80031ac:	08006ff8 	.word	0x08006ff8

080031b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031b8:	2300      	movs	r3, #0
 80031ba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031bc:	2300      	movs	r3, #0
 80031be:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d03f      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031d4:	d02a      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031da:	d824      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031e0:	d018      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031e6:	d81e      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031f0:	d007      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031f2:	e018      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031f4:	4bab      	ldr	r3, [pc, #684]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	4aaa      	ldr	r2, [pc, #680]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003200:	e015      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3304      	adds	r3, #4
 8003206:	2102      	movs	r1, #2
 8003208:	4618      	mov	r0, r3
 800320a:	f001 f9bf 	bl	800458c <RCCEx_PLL2_Config>
 800320e:	4603      	mov	r3, r0
 8003210:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003212:	e00c      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3324      	adds	r3, #36	; 0x24
 8003218:	2102      	movs	r1, #2
 800321a:	4618      	mov	r0, r3
 800321c:	f001 fa68 	bl	80046f0 <RCCEx_PLL3_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003224:	e003      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	75fb      	strb	r3, [r7, #23]
      break;
 800322a:	e000      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800322c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800322e:	7dfb      	ldrb	r3, [r7, #23]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d109      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003234:	4b9b      	ldr	r3, [pc, #620]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003238:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003240:	4998      	ldr	r1, [pc, #608]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	650b      	str	r3, [r1, #80]	; 0x50
 8003246:	e001      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003248:	7dfb      	ldrb	r3, [r7, #23]
 800324a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d03d      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	2b04      	cmp	r3, #4
 800325e:	d826      	bhi.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003260:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003266:	bf00      	nop
 8003268:	0800327d 	.word	0x0800327d
 800326c:	0800328b 	.word	0x0800328b
 8003270:	0800329d 	.word	0x0800329d
 8003274:	080032b5 	.word	0x080032b5
 8003278:	080032b5 	.word	0x080032b5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800327c:	4b89      	ldr	r3, [pc, #548]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	4a88      	ldr	r2, [pc, #544]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003286:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003288:	e015      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3304      	adds	r3, #4
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f001 f97b 	bl	800458c <RCCEx_PLL2_Config>
 8003296:	4603      	mov	r3, r0
 8003298:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800329a:	e00c      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3324      	adds	r3, #36	; 0x24
 80032a0:	2100      	movs	r1, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f001 fa24 	bl	80046f0 <RCCEx_PLL3_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032ac:	e003      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	75fb      	strb	r3, [r7, #23]
      break;
 80032b2:	e000      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80032b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032b6:	7dfb      	ldrb	r3, [r7, #23]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032bc:	4b79      	ldr	r3, [pc, #484]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c0:	f023 0207 	bic.w	r2, r3, #7
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c8:	4976      	ldr	r1, [pc, #472]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	650b      	str	r3, [r1, #80]	; 0x50
 80032ce:	e001      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d0:	7dfb      	ldrb	r3, [r7, #23]
 80032d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d042      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e8:	d02b      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80032ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ee:	d825      	bhi.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80032f0:	2bc0      	cmp	r3, #192	; 0xc0
 80032f2:	d028      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80032f4:	2bc0      	cmp	r3, #192	; 0xc0
 80032f6:	d821      	bhi.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80032f8:	2b80      	cmp	r3, #128	; 0x80
 80032fa:	d016      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80032fc:	2b80      	cmp	r3, #128	; 0x80
 80032fe:	d81d      	bhi.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d007      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003308:	e018      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800330a:	4b66      	ldr	r3, [pc, #408]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	4a65      	ldr	r2, [pc, #404]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003314:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003316:	e017      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f001 f934 	bl	800458c <RCCEx_PLL2_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003328:	e00e      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3324      	adds	r3, #36	; 0x24
 800332e:	2100      	movs	r1, #0
 8003330:	4618      	mov	r0, r3
 8003332:	f001 f9dd 	bl	80046f0 <RCCEx_PLL3_Config>
 8003336:	4603      	mov	r3, r0
 8003338:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800333a:	e005      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	75fb      	strb	r3, [r7, #23]
      break;
 8003340:	e002      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003342:	bf00      	nop
 8003344:	e000      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003348:	7dfb      	ldrb	r3, [r7, #23]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800334e:	4b55      	ldr	r3, [pc, #340]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003352:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	4952      	ldr	r1, [pc, #328]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800335c:	4313      	orrs	r3, r2
 800335e:	650b      	str	r3, [r1, #80]	; 0x50
 8003360:	e001      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003362:	7dfb      	ldrb	r3, [r7, #23]
 8003364:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336e:	2b00      	cmp	r3, #0
 8003370:	d049      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003378:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800337c:	d030      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800337e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003382:	d82a      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003384:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003388:	d02c      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800338a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800338e:	d824      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003394:	d018      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800339a:	d81e      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80033a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033a4:	d007      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80033a6:	e018      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a8:	4b3e      	ldr	r3, [pc, #248]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	4a3d      	ldr	r2, [pc, #244]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033b4:	e017      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3304      	adds	r3, #4
 80033ba:	2100      	movs	r1, #0
 80033bc:	4618      	mov	r0, r3
 80033be:	f001 f8e5 	bl	800458c <RCCEx_PLL2_Config>
 80033c2:	4603      	mov	r3, r0
 80033c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80033c6:	e00e      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3324      	adds	r3, #36	; 0x24
 80033cc:	2100      	movs	r1, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f001 f98e 	bl	80046f0 <RCCEx_PLL3_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033d8:	e005      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	75fb      	strb	r3, [r7, #23]
      break;
 80033de:	e002      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80033e0:	bf00      	nop
 80033e2:	e000      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80033e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033e6:	7dfb      	ldrb	r3, [r7, #23]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80033ec:	4b2d      	ldr	r3, [pc, #180]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033fa:	492a      	ldr	r1, [pc, #168]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	658b      	str	r3, [r1, #88]	; 0x58
 8003400:	e001      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003402:	7dfb      	ldrb	r3, [r7, #23]
 8003404:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340e:	2b00      	cmp	r3, #0
 8003410:	d04c      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003418:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800341c:	d030      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800341e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003422:	d82a      	bhi.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003424:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003428:	d02c      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800342a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800342e:	d824      	bhi.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003430:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003434:	d018      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003436:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800343a:	d81e      	bhi.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003444:	d007      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003446:	e018      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003448:	4b16      	ldr	r3, [pc, #88]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	4a15      	ldr	r2, [pc, #84]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800344e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003452:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003454:	e017      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3304      	adds	r3, #4
 800345a:	2100      	movs	r1, #0
 800345c:	4618      	mov	r0, r3
 800345e:	f001 f895 	bl	800458c <RCCEx_PLL2_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003466:	e00e      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3324      	adds	r3, #36	; 0x24
 800346c:	2100      	movs	r1, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f001 f93e 	bl	80046f0 <RCCEx_PLL3_Config>
 8003474:	4603      	mov	r3, r0
 8003476:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003478:	e005      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	75fb      	strb	r3, [r7, #23]
      break;
 800347e:	e002      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003480:	bf00      	nop
 8003482:	e000      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10d      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800349a:	4902      	ldr	r1, [pc, #8]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800349c:	4313      	orrs	r3, r2
 800349e:	658b      	str	r3, [r1, #88]	; 0x58
 80034a0:	e004      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80034a2:	bf00      	nop
 80034a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
 80034aa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d032      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034bc:	2b30      	cmp	r3, #48	; 0x30
 80034be:	d01c      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80034c0:	2b30      	cmp	r3, #48	; 0x30
 80034c2:	d817      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d00c      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d813      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d016      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d10f      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d4:	4baf      	ldr	r3, [pc, #700]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	4aae      	ldr	r2, [pc, #696]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80034e0:	e00e      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3304      	adds	r3, #4
 80034e6:	2102      	movs	r1, #2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 f84f 	bl	800458c <RCCEx_PLL2_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80034f2:	e005      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	75fb      	strb	r3, [r7, #23]
      break;
 80034f8:	e002      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80034fa:	bf00      	nop
 80034fc:	e000      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80034fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003506:	4ba3      	ldr	r3, [pc, #652]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003512:	49a0      	ldr	r1, [pc, #640]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003514:	4313      	orrs	r3, r2
 8003516:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003518:	e001      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351a:	7dfb      	ldrb	r3, [r7, #23]
 800351c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d047      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003532:	d030      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003538:	d82a      	bhi.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800353a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800353e:	d02c      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003540:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003544:	d824      	bhi.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800354a:	d018      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800354c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003550:	d81e      	bhi.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355a:	d007      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800355c:	e018      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355e:	4b8d      	ldr	r3, [pc, #564]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	4a8c      	ldr	r2, [pc, #560]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003568:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800356a:	e017      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3304      	adds	r3, #4
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f001 f80a 	bl	800458c <RCCEx_PLL2_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800357c:	e00e      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3324      	adds	r3, #36	; 0x24
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f001 f8b3 	bl	80046f0 <RCCEx_PLL3_Config>
 800358a:	4603      	mov	r3, r0
 800358c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800358e:	e005      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	75fb      	strb	r3, [r7, #23]
      break;
 8003594:	e002      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003596:	bf00      	nop
 8003598:	e000      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800359a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800359c:	7dfb      	ldrb	r3, [r7, #23]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035a2:	4b7c      	ldr	r3, [pc, #496]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ae:	4979      	ldr	r1, [pc, #484]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	650b      	str	r3, [r1, #80]	; 0x50
 80035b4:	e001      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
 80035b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d049      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ce:	d02e      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80035d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d4:	d828      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80035d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035da:	d02a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80035dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035e0:	d822      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80035e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035e6:	d026      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80035e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035ec:	d81c      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80035ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035f2:	d010      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80035f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035f8:	d816      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d01d      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80035fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003602:	d111      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	2101      	movs	r1, #1
 800360a:	4618      	mov	r0, r3
 800360c:	f000 ffbe 	bl	800458c <RCCEx_PLL2_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003614:	e012      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3324      	adds	r3, #36	; 0x24
 800361a:	2101      	movs	r1, #1
 800361c:	4618      	mov	r0, r3
 800361e:	f001 f867 	bl	80046f0 <RCCEx_PLL3_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003626:	e009      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	75fb      	strb	r3, [r7, #23]
      break;
 800362c:	e006      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800362e:	bf00      	nop
 8003630:	e004      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003632:	bf00      	nop
 8003634:	e002      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003636:	bf00      	nop
 8003638:	e000      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800363a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800363c:	7dfb      	ldrb	r3, [r7, #23]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003642:	4b54      	ldr	r3, [pc, #336]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003646:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364e:	4951      	ldr	r1, [pc, #324]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003650:	4313      	orrs	r3, r2
 8003652:	650b      	str	r3, [r1, #80]	; 0x50
 8003654:	e001      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003656:	7dfb      	ldrb	r3, [r7, #23]
 8003658:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d04b      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800366c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003670:	d02e      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003672:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003676:	d828      	bhi.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367c:	d02a      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800367e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003682:	d822      	bhi.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003684:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003688:	d026      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800368a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800368e:	d81c      	bhi.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003694:	d010      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800369a:	d816      	bhi.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01d      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80036a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036a4:	d111      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3304      	adds	r3, #4
 80036aa:	2101      	movs	r1, #1
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 ff6d 	bl	800458c <RCCEx_PLL2_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80036b6:	e012      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3324      	adds	r3, #36	; 0x24
 80036bc:	2101      	movs	r1, #1
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 f816 	bl	80046f0 <RCCEx_PLL3_Config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80036c8:	e009      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	75fb      	strb	r3, [r7, #23]
      break;
 80036ce:	e006      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80036d0:	bf00      	nop
 80036d2:	e004      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80036d4:	bf00      	nop
 80036d6:	e002      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80036d8:	bf00      	nop
 80036da:	e000      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80036dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036de:	7dfb      	ldrb	r3, [r7, #23]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80036e4:	4b2b      	ldr	r3, [pc, #172]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036f2:	4928      	ldr	r1, [pc, #160]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	658b      	str	r3, [r1, #88]	; 0x58
 80036f8:	e001      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d02f      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800370e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003712:	d00e      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003718:	d814      	bhi.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800371a:	2b00      	cmp	r3, #0
 800371c:	d015      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800371e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003722:	d10f      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	4a1a      	ldr	r2, [pc, #104]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800372a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800372e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003730:	e00c      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3304      	adds	r3, #4
 8003736:	2101      	movs	r1, #1
 8003738:	4618      	mov	r0, r3
 800373a:	f000 ff27 	bl	800458c <RCCEx_PLL2_Config>
 800373e:	4603      	mov	r3, r0
 8003740:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003742:	e003      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	75fb      	strb	r3, [r7, #23]
      break;
 8003748:	e000      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800374a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800374c:	7dfb      	ldrb	r3, [r7, #23]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003756:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800375e:	490d      	ldr	r1, [pc, #52]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003760:	4313      	orrs	r3, r2
 8003762:	650b      	str	r3, [r1, #80]	; 0x50
 8003764:	e001      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003766:	7dfb      	ldrb	r3, [r7, #23]
 8003768:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d033      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	2b03      	cmp	r3, #3
 800377c:	d81c      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800377e:	a201      	add	r2, pc, #4	; (adr r2, 8003784 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003784:	080037bf 	.word	0x080037bf
 8003788:	08003799 	.word	0x08003799
 800378c:	080037a7 	.word	0x080037a7
 8003790:	080037bf 	.word	0x080037bf
 8003794:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003798:	4bb8      	ldr	r3, [pc, #736]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	4ab7      	ldr	r2, [pc, #732]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800379e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80037a4:	e00c      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3304      	adds	r3, #4
 80037aa:	2102      	movs	r1, #2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 feed 	bl	800458c <RCCEx_PLL2_Config>
 80037b2:	4603      	mov	r3, r0
 80037b4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80037b6:	e003      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	75fb      	strb	r3, [r7, #23]
      break;
 80037bc:	e000      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80037be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80037c6:	4bad      	ldr	r3, [pc, #692]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ca:	f023 0203 	bic.w	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	49aa      	ldr	r1, [pc, #680]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80037d8:	e001      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037da:	7dfb      	ldrb	r3, [r7, #23]
 80037dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 8086 	beq.w	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ec:	4ba4      	ldr	r3, [pc, #656]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4aa3      	ldr	r2, [pc, #652]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80037f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037f8:	f7fe fa1c 	bl	8001c34 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037fe:	e009      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003800:	f7fe fa18 	bl	8001c34 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	; 0x64
 800380c:	d902      	bls.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	75fb      	strb	r3, [r7, #23]
        break;
 8003812:	e005      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003814:	4b9a      	ldr	r3, [pc, #616]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0ef      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003820:	7dfb      	ldrb	r3, [r7, #23]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d166      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003826:	4b95      	ldr	r3, [pc, #596]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003828:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003830:	4053      	eors	r3, r2
 8003832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003836:	2b00      	cmp	r3, #0
 8003838:	d013      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800383a:	4b90      	ldr	r3, [pc, #576]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003842:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003844:	4b8d      	ldr	r3, [pc, #564]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	4a8c      	ldr	r2, [pc, #560]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800384a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800384e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003850:	4b8a      	ldr	r3, [pc, #552]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	4a89      	ldr	r2, [pc, #548]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800385c:	4a87      	ldr	r2, [pc, #540]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800386c:	d115      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386e:	f7fe f9e1 	bl	8001c34 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003874:	e00b      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003876:	f7fe f9dd 	bl	8001c34 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	f241 3288 	movw	r2, #5000	; 0x1388
 8003884:	4293      	cmp	r3, r2
 8003886:	d902      	bls.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	75fb      	strb	r3, [r7, #23]
            break;
 800388c:	e005      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800388e:	4b7b      	ldr	r3, [pc, #492]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0ed      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d126      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ae:	d10d      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80038b0:	4b72      	ldr	r3, [pc, #456]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038be:	0919      	lsrs	r1, r3, #4
 80038c0:	4b70      	ldr	r3, [pc, #448]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80038c2:	400b      	ands	r3, r1
 80038c4:	496d      	ldr	r1, [pc, #436]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	610b      	str	r3, [r1, #16]
 80038ca:	e005      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80038cc:	4b6b      	ldr	r3, [pc, #428]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	4a6a      	ldr	r2, [pc, #424]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80038d6:	6113      	str	r3, [r2, #16]
 80038d8:	4b68      	ldr	r3, [pc, #416]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e6:	4965      	ldr	r1, [pc, #404]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	670b      	str	r3, [r1, #112]	; 0x70
 80038ec:	e004      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
 80038f0:	75bb      	strb	r3, [r7, #22]
 80038f2:	e001      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f4:	7dfb      	ldrb	r3, [r7, #23]
 80038f6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d07e      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003908:	2b28      	cmp	r3, #40	; 0x28
 800390a:	d867      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800390c:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800390e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003912:	bf00      	nop
 8003914:	080039e3 	.word	0x080039e3
 8003918:	080039dd 	.word	0x080039dd
 800391c:	080039dd 	.word	0x080039dd
 8003920:	080039dd 	.word	0x080039dd
 8003924:	080039dd 	.word	0x080039dd
 8003928:	080039dd 	.word	0x080039dd
 800392c:	080039dd 	.word	0x080039dd
 8003930:	080039dd 	.word	0x080039dd
 8003934:	080039b9 	.word	0x080039b9
 8003938:	080039dd 	.word	0x080039dd
 800393c:	080039dd 	.word	0x080039dd
 8003940:	080039dd 	.word	0x080039dd
 8003944:	080039dd 	.word	0x080039dd
 8003948:	080039dd 	.word	0x080039dd
 800394c:	080039dd 	.word	0x080039dd
 8003950:	080039dd 	.word	0x080039dd
 8003954:	080039cb 	.word	0x080039cb
 8003958:	080039dd 	.word	0x080039dd
 800395c:	080039dd 	.word	0x080039dd
 8003960:	080039dd 	.word	0x080039dd
 8003964:	080039dd 	.word	0x080039dd
 8003968:	080039dd 	.word	0x080039dd
 800396c:	080039dd 	.word	0x080039dd
 8003970:	080039dd 	.word	0x080039dd
 8003974:	080039e3 	.word	0x080039e3
 8003978:	080039dd 	.word	0x080039dd
 800397c:	080039dd 	.word	0x080039dd
 8003980:	080039dd 	.word	0x080039dd
 8003984:	080039dd 	.word	0x080039dd
 8003988:	080039dd 	.word	0x080039dd
 800398c:	080039dd 	.word	0x080039dd
 8003990:	080039dd 	.word	0x080039dd
 8003994:	080039e3 	.word	0x080039e3
 8003998:	080039dd 	.word	0x080039dd
 800399c:	080039dd 	.word	0x080039dd
 80039a0:	080039dd 	.word	0x080039dd
 80039a4:	080039dd 	.word	0x080039dd
 80039a8:	080039dd 	.word	0x080039dd
 80039ac:	080039dd 	.word	0x080039dd
 80039b0:	080039dd 	.word	0x080039dd
 80039b4:	080039e3 	.word	0x080039e3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	2101      	movs	r1, #1
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fde4 	bl	800458c <RCCEx_PLL2_Config>
 80039c4:	4603      	mov	r3, r0
 80039c6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80039c8:	e00c      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3324      	adds	r3, #36	; 0x24
 80039ce:	2101      	movs	r1, #1
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fe8d 	bl	80046f0 <RCCEx_PLL3_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80039da:	e003      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	75fb      	strb	r3, [r7, #23]
      break;
 80039e0:	e000      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80039e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80039ea:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039f6:	4921      	ldr	r1, [pc, #132]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	654b      	str	r3, [r1, #84]	; 0x54
 80039fc:	e001      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
 8003a00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d03e      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a12:	2b05      	cmp	r3, #5
 8003a14:	d820      	bhi.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003a16:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1c:	08003a5f 	.word	0x08003a5f
 8003a20:	08003a35 	.word	0x08003a35
 8003a24:	08003a47 	.word	0x08003a47
 8003a28:	08003a5f 	.word	0x08003a5f
 8003a2c:	08003a5f 	.word	0x08003a5f
 8003a30:	08003a5f 	.word	0x08003a5f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	2101      	movs	r1, #1
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fda6 	bl	800458c <RCCEx_PLL2_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003a44:	e00c      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3324      	adds	r3, #36	; 0x24
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fe4f 	bl	80046f0 <RCCEx_PLL3_Config>
 8003a52:	4603      	mov	r3, r0
 8003a54:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003a56:	e003      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a5c:	e000      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d110      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	f023 0207 	bic.w	r2, r3, #7
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a72:	4902      	ldr	r1, [pc, #8]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	654b      	str	r3, [r1, #84]	; 0x54
 8003a78:	e008      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003a7a:	bf00      	nop
 8003a7c:	58024400 	.word	0x58024400
 8003a80:	58024800 	.word	0x58024800
 8003a84:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a88:	7dfb      	ldrb	r3, [r7, #23]
 8003a8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d039      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9e:	2b05      	cmp	r3, #5
 8003aa0:	d820      	bhi.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003aa2:	a201      	add	r2, pc, #4	; (adr r2, 8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa8:	08003aeb 	.word	0x08003aeb
 8003aac:	08003ac1 	.word	0x08003ac1
 8003ab0:	08003ad3 	.word	0x08003ad3
 8003ab4:	08003aeb 	.word	0x08003aeb
 8003ab8:	08003aeb 	.word	0x08003aeb
 8003abc:	08003aeb 	.word	0x08003aeb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fd60 	bl	800458c <RCCEx_PLL2_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ad0:	e00c      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3324      	adds	r3, #36	; 0x24
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fe09 	bl	80046f0 <RCCEx_PLL3_Config>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ae2:	e003      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ae8:	e000      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003af2:	4bb7      	ldr	r3, [pc, #732]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af6:	f023 0207 	bic.w	r2, r3, #7
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b00:	49b3      	ldr	r1, [pc, #716]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	658b      	str	r3, [r1, #88]	; 0x58
 8003b06:	e001      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d04b      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b22:	d02e      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b28:	d828      	bhi.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2e:	d02a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b34:	d822      	bhi.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003b36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b3a:	d026      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003b3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b40:	d81c      	bhi.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b46:	d010      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b4c:	d816      	bhi.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d01d      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003b52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b56:	d111      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fd14 	bl	800458c <RCCEx_PLL2_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003b68:	e012      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3324      	adds	r3, #36	; 0x24
 8003b6e:	2102      	movs	r1, #2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fdbd 	bl	80046f0 <RCCEx_PLL3_Config>
 8003b76:	4603      	mov	r3, r0
 8003b78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003b7a:	e009      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b80:	e006      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003b82:	bf00      	nop
 8003b84:	e004      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003b86:	bf00      	nop
 8003b88:	e002      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003b8a:	bf00      	nop
 8003b8c:	e000      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10a      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b96:	4b8e      	ldr	r3, [pc, #568]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ba4:	498a      	ldr	r1, [pc, #552]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	654b      	str	r3, [r1, #84]	; 0x54
 8003baa:	e001      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d04b      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bc2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003bc6:	d02e      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003bc8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003bcc:	d828      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd2:	d02a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd8:	d822      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003bda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bde:	d026      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003be0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003be4:	d81c      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bea:	d010      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf0:	d816      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d01d      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfa:	d111      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fcc2 	bl	800458c <RCCEx_PLL2_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003c0c:	e012      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3324      	adds	r3, #36	; 0x24
 8003c12:	2102      	movs	r1, #2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fd6b 	bl	80046f0 <RCCEx_PLL3_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003c1e:	e009      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	75fb      	strb	r3, [r7, #23]
      break;
 8003c24:	e006      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003c26:	bf00      	nop
 8003c28:	e004      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003c2a:	bf00      	nop
 8003c2c:	e002      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003c2e:	bf00      	nop
 8003c30:	e000      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003c32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c3a:	4b65      	ldr	r3, [pc, #404]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c48:	4961      	ldr	r1, [pc, #388]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	658b      	str	r3, [r1, #88]	; 0x58
 8003c4e:	e001      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
 8003c52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d04b      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c66:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c6a:	d02e      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003c6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c70:	d828      	bhi.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c76:	d02a      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c7c:	d822      	bhi.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003c7e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c82:	d026      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003c84:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c88:	d81c      	bhi.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003c8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c8e:	d010      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003c90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c94:	d816      	bhi.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d01d      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9e:	d111      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fc70 	bl	800458c <RCCEx_PLL2_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003cb0:	e012      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3324      	adds	r3, #36	; 0x24
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fd19 	bl	80046f0 <RCCEx_PLL3_Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003cc2:	e009      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc8:	e006      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003cca:	bf00      	nop
 8003ccc:	e004      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003cce:	bf00      	nop
 8003cd0:	e002      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003cd2:	bf00      	nop
 8003cd4:	e000      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10a      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003cde:	4b3c      	ldr	r3, [pc, #240]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cec:	4938      	ldr	r1, [pc, #224]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	658b      	str	r3, [r1, #88]	; 0x58
 8003cf2:	e001      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf4:	7dfb      	ldrb	r3, [r7, #23]
 8003cf6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d01a      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0e:	d10a      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3324      	adds	r3, #36	; 0x24
 8003d14:	2102      	movs	r1, #2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fcea 	bl	80046f0 <RCCEx_PLL3_Config>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003d26:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d34:	4926      	ldr	r1, [pc, #152]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0310 	and.w	r3, r3, #16
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01a      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d50:	d10a      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3324      	adds	r3, #36	; 0x24
 8003d56:	2102      	movs	r1, #2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fcc9 	bl	80046f0 <RCCEx_PLL3_Config>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d68:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d76:	4916      	ldr	r1, [pc, #88]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d036      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d92:	d01f      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d98:	d817      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da2:	d009      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003da4:	e011      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3304      	adds	r3, #4
 8003daa:	2100      	movs	r1, #0
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fbed 	bl	800458c <RCCEx_PLL2_Config>
 8003db2:	4603      	mov	r3, r0
 8003db4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003db6:	e00e      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3324      	adds	r3, #36	; 0x24
 8003dbc:	2102      	movs	r1, #2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fc96 	bl	80046f0 <RCCEx_PLL3_Config>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003dc8:	e005      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8003dce:	e002      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003dd0:	58024400 	.word	0x58024400
      break;
 8003dd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10a      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ddc:	4b8b      	ldr	r3, [pc, #556]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dea:	4988      	ldr	r1, [pc, #544]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	658b      	str	r3, [r1, #88]	; 0x58
 8003df0:	e001      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
 8003df4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d033      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e0c:	d01c      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003e0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e12:	d816      	bhi.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e18:	d003      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003e1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e1e:	d007      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003e20:	e00f      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e22:	4b7a      	ldr	r3, [pc, #488]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	4a79      	ldr	r2, [pc, #484]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003e2e:	e00c      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3324      	adds	r3, #36	; 0x24
 8003e34:	2101      	movs	r1, #1
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fc5a 	bl	80046f0 <RCCEx_PLL3_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003e40:	e003      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	75fb      	strb	r3, [r7, #23]
      break;
 8003e46:	e000      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003e48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e4a:	7dfb      	ldrb	r3, [r7, #23]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10a      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e50:	4b6e      	ldr	r3, [pc, #440]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e5e:	496b      	ldr	r1, [pc, #428]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	654b      	str	r3, [r1, #84]	; 0x54
 8003e64:	e001      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
 8003e68:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d029      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8003e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e82:	d007      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003e84:	e00f      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e86:	4b61      	ldr	r3, [pc, #388]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8a:	4a60      	ldr	r2, [pc, #384]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003e92:	e00b      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3304      	adds	r3, #4
 8003e98:	2102      	movs	r1, #2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fb76 	bl	800458c <RCCEx_PLL2_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ea4:	e002      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eac:	7dfb      	ldrb	r3, [r7, #23]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d109      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003eb2:	4b56      	ldr	r3, [pc, #344]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ebe:	4953      	ldr	r1, [pc, #332]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ec4:	e001      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec6:	7dfb      	ldrb	r3, [r7, #23]
 8003ec8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3324      	adds	r3, #36	; 0x24
 8003eda:	2102      	movs	r1, #2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fc07 	bl	80046f0 <RCCEx_PLL3_Config>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d030      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003efc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f00:	d017      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003f02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f06:	d811      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f0c:	d013      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f12:	d80b      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d010      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f1c:	d106      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f1e:	4b3b      	ldr	r3, [pc, #236]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	4a3a      	ldr	r2, [pc, #232]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003f2a:	e007      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f30:	e004      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003f32:	bf00      	nop
 8003f34:	e002      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003f36:	bf00      	nop
 8003f38:	e000      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f42:	4b32      	ldr	r3, [pc, #200]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f4e:	492f      	ldr	r1, [pc, #188]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	654b      	str	r3, [r1, #84]	; 0x54
 8003f54:	e001      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f56:	7dfb      	ldrb	r3, [r7, #23]
 8003f58:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d008      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f66:	4b29      	ldr	r3, [pc, #164]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	4926      	ldr	r1, [pc, #152]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d009      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003f84:	4b21      	ldr	r3, [pc, #132]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f92:	491e      	ldr	r1, [pc, #120]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fa4:	4b19      	ldr	r3, [pc, #100]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb0:	4916      	ldr	r1, [pc, #88]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00d      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fc2:	4b12      	ldr	r3, [pc, #72]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	4a11      	ldr	r2, [pc, #68]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003fc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fcc:	6113      	str	r3, [r2, #16]
 8003fce:	4b0f      	ldr	r3, [pc, #60]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003fd8:	490c      	ldr	r1, [pc, #48]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	da08      	bge.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003fe6:	4b09      	ldr	r3, [pc, #36]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff2:	4906      	ldr	r1, [pc, #24]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003ff8:	7dbb      	ldrb	r3, [r7, #22]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e000      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xe54>
  }
  return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	58024400 	.word	0x58024400

08004010 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004014:	f7ff f870 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8004018:	4602      	mov	r2, r0
 800401a:	4b06      	ldr	r3, [pc, #24]	; (8004034 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	091b      	lsrs	r3, r3, #4
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	4904      	ldr	r1, [pc, #16]	; (8004038 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004026:	5ccb      	ldrb	r3, [r1, r3]
 8004028:	f003 031f 	and.w	r3, r3, #31
 800402c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004030:	4618      	mov	r0, r3
 8004032:	bd80      	pop	{r7, pc}
 8004034:	58024400 	.word	0x58024400
 8004038:	08006ff8 	.word	0x08006ff8

0800403c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800403c:	b480      	push	{r7}
 800403e:	b089      	sub	sp, #36	; 0x24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004044:	4ba1      	ldr	r3, [pc, #644]	; (80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800404e:	4b9f      	ldr	r3, [pc, #636]	; (80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	0b1b      	lsrs	r3, r3, #12
 8004054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004058:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800405a:	4b9c      	ldr	r3, [pc, #624]	; (80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	091b      	lsrs	r3, r3, #4
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004066:	4b99      	ldr	r3, [pc, #612]	; (80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406a:	08db      	lsrs	r3, r3, #3
 800406c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	fb02 f303 	mul.w	r3, r2, r3
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 8111 	beq.w	80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b02      	cmp	r3, #2
 800408e:	f000 8083 	beq.w	8004198 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	2b02      	cmp	r3, #2
 8004096:	f200 80a1 	bhi.w	80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d056      	beq.n	8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80040a6:	e099      	b.n	80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040a8:	4b88      	ldr	r3, [pc, #544]	; (80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d02d      	beq.n	8004110 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80040b4:	4b85      	ldr	r3, [pc, #532]	; (80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	08db      	lsrs	r3, r3, #3
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	4a84      	ldr	r2, [pc, #528]	; (80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
 80040c4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	ee07 3a90 	vmov	s15, r3
 80040cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	ee07 3a90 	vmov	s15, r3
 80040d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040de:	4b7b      	ldr	r3, [pc, #492]	; (80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80040f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80042d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800410a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800410e:	e087      	b.n	8004220 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800411e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004122:	4b6a      	ldr	r3, [pc, #424]	; (80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004132:	ed97 6a03 	vldr	s12, [r7, #12]
 8004136:	eddf 5a67 	vldr	s11, [pc, #412]	; 80042d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800413a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800413e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800414a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004152:	e065      	b.n	8004220 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	ee07 3a90 	vmov	s15, r3
 800415a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80042dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004166:	4b59      	ldr	r3, [pc, #356]	; (80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004176:	ed97 6a03 	vldr	s12, [r7, #12]
 800417a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80042d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800417e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800418a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800418e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004192:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004196:	e043      	b.n	8004220 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	ee07 3a90 	vmov	s15, r3
 800419e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80042e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80041a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041aa:	4b48      	ldr	r3, [pc, #288]	; (80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80041be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80042d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041da:	e021      	b.n	8004220 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80042dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ee:	4b37      	ldr	r3, [pc, #220]	; (80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004202:	eddf 5a34 	vldr	s11, [pc, #208]	; 80042d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800420a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800420e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800421a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800421e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004220:	4b2a      	ldr	r3, [pc, #168]	; (80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	0a5b      	lsrs	r3, r3, #9
 8004226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800423a:	edd7 6a07 	vldr	s13, [r7, #28]
 800423e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004246:	ee17 2a90 	vmov	r2, s15
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800424e:	4b1f      	ldr	r3, [pc, #124]	; (80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004252:	0c1b      	lsrs	r3, r3, #16
 8004254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004258:	ee07 3a90 	vmov	s15, r3
 800425c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004260:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004264:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004268:	edd7 6a07 	vldr	s13, [r7, #28]
 800426c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004274:	ee17 2a90 	vmov	r2, s15
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800427c:	4b13      	ldr	r3, [pc, #76]	; (80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	0e1b      	lsrs	r3, r3, #24
 8004282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004286:	ee07 3a90 	vmov	s15, r3
 800428a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800428e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004292:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004296:	edd7 6a07 	vldr	s13, [r7, #28]
 800429a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800429e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042a2:	ee17 2a90 	vmov	r2, s15
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80042aa:	e008      	b.n	80042be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	609a      	str	r2, [r3, #8]
}
 80042be:	bf00      	nop
 80042c0:	3724      	adds	r7, #36	; 0x24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	58024400 	.word	0x58024400
 80042d0:	03d09000 	.word	0x03d09000
 80042d4:	46000000 	.word	0x46000000
 80042d8:	4c742400 	.word	0x4c742400
 80042dc:	4a742400 	.word	0x4a742400
 80042e0:	4bbebc20 	.word	0x4bbebc20

080042e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b089      	sub	sp, #36	; 0x24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042ec:	4ba1      	ldr	r3, [pc, #644]	; (8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	f003 0303 	and.w	r3, r3, #3
 80042f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80042f6:	4b9f      	ldr	r3, [pc, #636]	; (8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fa:	0d1b      	lsrs	r3, r3, #20
 80042fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004300:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004302:	4b9c      	ldr	r3, [pc, #624]	; (8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800430e:	4b99      	ldr	r3, [pc, #612]	; (8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	08db      	lsrs	r3, r3, #3
 8004314:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	fb02 f303 	mul.w	r3, r2, r3
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004326:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8111 	beq.w	8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	2b02      	cmp	r3, #2
 8004336:	f000 8083 	beq.w	8004440 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	2b02      	cmp	r3, #2
 800433e:	f200 80a1 	bhi.w	8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d056      	beq.n	80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800434e:	e099      	b.n	8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004350:	4b88      	ldr	r3, [pc, #544]	; (8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d02d      	beq.n	80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800435c:	4b85      	ldr	r3, [pc, #532]	; (8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	08db      	lsrs	r3, r3, #3
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	4a84      	ldr	r2, [pc, #528]	; (8004578 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004368:	fa22 f303 	lsr.w	r3, r2, r3
 800436c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	ee07 3a90 	vmov	s15, r3
 8004374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004386:	4b7b      	ldr	r3, [pc, #492]	; (8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004396:	ed97 6a03 	vldr	s12, [r7, #12]
 800439a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800457c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800439e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80043b6:	e087      	b.n	80044c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	ee07 3a90 	vmov	s15, r3
 80043be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004580 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80043c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ca:	4b6a      	ldr	r3, [pc, #424]	; (8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043da:	ed97 6a03 	vldr	s12, [r7, #12]
 80043de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800457c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043fa:	e065      	b.n	80044c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004406:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800440a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440e:	4b59      	ldr	r3, [pc, #356]	; (8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004422:	eddf 5a56 	vldr	s11, [pc, #344]	; 800457c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800442a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800442e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800443e:	e043      	b.n	80044c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800444e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004452:	4b48      	ldr	r3, [pc, #288]	; (8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004462:	ed97 6a03 	vldr	s12, [r7, #12]
 8004466:	eddf 5a45 	vldr	s11, [pc, #276]	; 800457c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800446a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800447a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004482:	e021      	b.n	80044c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004496:	4b37      	ldr	r3, [pc, #220]	; (8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800457c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80044c8:	4b2a      	ldr	r3, [pc, #168]	; (8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	0a5b      	lsrs	r3, r3, #9
 80044ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80044e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ee:	ee17 2a90 	vmov	r2, s15
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80044f6:	4b1f      	ldr	r3, [pc, #124]	; (8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	0c1b      	lsrs	r3, r3, #16
 80044fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004500:	ee07 3a90 	vmov	s15, r3
 8004504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004508:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800450c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004510:	edd7 6a07 	vldr	s13, [r7, #28]
 8004514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800451c:	ee17 2a90 	vmov	r2, s15
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004524:	4b13      	ldr	r3, [pc, #76]	; (8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	0e1b      	lsrs	r3, r3, #24
 800452a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800453a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800453e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800454a:	ee17 2a90 	vmov	r2, s15
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004552:	e008      	b.n	8004566 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	609a      	str	r2, [r3, #8]
}
 8004566:	bf00      	nop
 8004568:	3724      	adds	r7, #36	; 0x24
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	58024400 	.word	0x58024400
 8004578:	03d09000 	.word	0x03d09000
 800457c:	46000000 	.word	0x46000000
 8004580:	4c742400 	.word	0x4c742400
 8004584:	4a742400 	.word	0x4a742400
 8004588:	4bbebc20 	.word	0x4bbebc20

0800458c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800459a:	4b53      	ldr	r3, [pc, #332]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d101      	bne.n	80045aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e099      	b.n	80046de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80045aa:	4b4f      	ldr	r3, [pc, #316]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a4e      	ldr	r2, [pc, #312]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 80045b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b6:	f7fd fb3d 	bl	8001c34 <HAL_GetTick>
 80045ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80045bc:	e008      	b.n	80045d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80045be:	f7fd fb39 	bl	8001c34 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e086      	b.n	80046de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80045d0:	4b45      	ldr	r3, [pc, #276]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1f0      	bne.n	80045be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80045dc:	4b42      	ldr	r3, [pc, #264]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	031b      	lsls	r3, r3, #12
 80045ea:	493f      	ldr	r1, [pc, #252]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	628b      	str	r3, [r1, #40]	; 0x28
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	3b01      	subs	r3, #1
 8004600:	025b      	lsls	r3, r3, #9
 8004602:	b29b      	uxth	r3, r3
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	3b01      	subs	r3, #1
 800460c:	041b      	lsls	r3, r3, #16
 800460e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	3b01      	subs	r3, #1
 800461a:	061b      	lsls	r3, r3, #24
 800461c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004620:	4931      	ldr	r1, [pc, #196]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 8004622:	4313      	orrs	r3, r2
 8004624:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004626:	4b30      	ldr	r3, [pc, #192]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	492d      	ldr	r1, [pc, #180]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 8004634:	4313      	orrs	r3, r2
 8004636:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004638:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	f023 0220 	bic.w	r2, r3, #32
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	4928      	ldr	r1, [pc, #160]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 8004646:	4313      	orrs	r3, r2
 8004648:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800464a:	4b27      	ldr	r3, [pc, #156]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	4a26      	ldr	r2, [pc, #152]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 8004650:	f023 0310 	bic.w	r3, r3, #16
 8004654:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004656:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 8004658:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800465a:	4b24      	ldr	r3, [pc, #144]	; (80046ec <RCCEx_PLL2_Config+0x160>)
 800465c:	4013      	ands	r3, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	69d2      	ldr	r2, [r2, #28]
 8004662:	00d2      	lsls	r2, r2, #3
 8004664:	4920      	ldr	r1, [pc, #128]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 8004666:	4313      	orrs	r3, r2
 8004668:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800466a:	4b1f      	ldr	r3, [pc, #124]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	4a1e      	ldr	r2, [pc, #120]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 8004670:	f043 0310 	orr.w	r3, r3, #16
 8004674:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d106      	bne.n	800468a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800467c:	4b1a      	ldr	r3, [pc, #104]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	4a19      	ldr	r2, [pc, #100]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 8004682:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004686:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004688:	e00f      	b.n	80046aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d106      	bne.n	800469e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004690:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 8004696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800469a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800469c:	e005      	b.n	80046aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800469e:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	4a11      	ldr	r2, [pc, #68]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 80046a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80046aa:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a0e      	ldr	r2, [pc, #56]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 80046b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b6:	f7fd fabd 	bl	8001c34 <HAL_GetTick>
 80046ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046bc:	e008      	b.n	80046d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80046be:	f7fd fab9 	bl	8001c34 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e006      	b.n	80046de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <RCCEx_PLL2_Config+0x15c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	58024400 	.word	0x58024400
 80046ec:	ffff0007 	.word	0xffff0007

080046f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046fe:	4b53      	ldr	r3, [pc, #332]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b03      	cmp	r3, #3
 8004708:	d101      	bne.n	800470e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e099      	b.n	8004842 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800470e:	4b4f      	ldr	r3, [pc, #316]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a4e      	ldr	r2, [pc, #312]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 8004714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800471a:	f7fd fa8b 	bl	8001c34 <HAL_GetTick>
 800471e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004720:	e008      	b.n	8004734 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004722:	f7fd fa87 	bl	8001c34 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e086      	b.n	8004842 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004734:	4b45      	ldr	r3, [pc, #276]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f0      	bne.n	8004722 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004740:	4b42      	ldr	r3, [pc, #264]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	051b      	lsls	r3, r3, #20
 800474e:	493f      	ldr	r1, [pc, #252]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 8004750:	4313      	orrs	r3, r2
 8004752:	628b      	str	r3, [r1, #40]	; 0x28
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	3b01      	subs	r3, #1
 800475a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	3b01      	subs	r3, #1
 8004764:	025b      	lsls	r3, r3, #9
 8004766:	b29b      	uxth	r3, r3
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	3b01      	subs	r3, #1
 8004770:	041b      	lsls	r3, r3, #16
 8004772:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	3b01      	subs	r3, #1
 800477e:	061b      	lsls	r3, r3, #24
 8004780:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004784:	4931      	ldr	r1, [pc, #196]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 8004786:	4313      	orrs	r3, r2
 8004788:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800478a:	4b30      	ldr	r3, [pc, #192]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	492d      	ldr	r1, [pc, #180]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 8004798:	4313      	orrs	r3, r2
 800479a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800479c:	4b2b      	ldr	r3, [pc, #172]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	4928      	ldr	r1, [pc, #160]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80047ae:	4b27      	ldr	r3, [pc, #156]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	4a26      	ldr	r2, [pc, #152]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 80047b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80047ba:	4b24      	ldr	r3, [pc, #144]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 80047bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047be:	4b24      	ldr	r3, [pc, #144]	; (8004850 <RCCEx_PLL3_Config+0x160>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	69d2      	ldr	r2, [r2, #28]
 80047c6:	00d2      	lsls	r2, r2, #3
 80047c8:	4920      	ldr	r1, [pc, #128]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80047ce:	4b1f      	ldr	r3, [pc, #124]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	4a1e      	ldr	r2, [pc, #120]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 80047d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d106      	bne.n	80047ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80047e0:	4b1a      	ldr	r3, [pc, #104]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	4a19      	ldr	r2, [pc, #100]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 80047e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047ec:	e00f      	b.n	800480e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d106      	bne.n	8004802 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80047f4:	4b15      	ldr	r3, [pc, #84]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	4a14      	ldr	r2, [pc, #80]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 80047fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004800:	e005      	b.n	800480e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004802:	4b12      	ldr	r3, [pc, #72]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004806:	4a11      	ldr	r2, [pc, #68]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 8004808:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800480c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800480e:	4b0f      	ldr	r3, [pc, #60]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a0e      	ldr	r2, [pc, #56]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 8004814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481a:	f7fd fa0b 	bl	8001c34 <HAL_GetTick>
 800481e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004820:	e008      	b.n	8004834 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004822:	f7fd fa07 	bl	8001c34 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e006      	b.n	8004842 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004834:	4b05      	ldr	r3, [pc, #20]	; (800484c <RCCEx_PLL3_Config+0x15c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004840:	7bfb      	ldrb	r3, [r7, #15]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	58024400 	.word	0x58024400
 8004850:	ffff0007 	.word	0xffff0007

08004854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e049      	b.n	80048fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fc ff18 	bl	80016b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3304      	adds	r3, #4
 8004890:	4619      	mov	r1, r3
 8004892:	4610      	mov	r0, r2
 8004894:	f000 fb6c 	bl	8004f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e049      	b.n	80049a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d106      	bne.n	800492e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f841 	bl	80049b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3304      	adds	r3, #4
 800493e:	4619      	mov	r1, r3
 8004940:	4610      	mov	r0, r2
 8004942:	f000 fb15 	bl	8004f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d109      	bne.n	80049e8 <HAL_TIM_PWM_Start+0x24>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	bf14      	ite	ne
 80049e0:	2301      	movne	r3, #1
 80049e2:	2300      	moveq	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	e03c      	b.n	8004a62 <HAL_TIM_PWM_Start+0x9e>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d109      	bne.n	8004a02 <HAL_TIM_PWM_Start+0x3e>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	bf14      	ite	ne
 80049fa:	2301      	movne	r3, #1
 80049fc:	2300      	moveq	r3, #0
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	e02f      	b.n	8004a62 <HAL_TIM_PWM_Start+0x9e>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d109      	bne.n	8004a1c <HAL_TIM_PWM_Start+0x58>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	bf14      	ite	ne
 8004a14:	2301      	movne	r3, #1
 8004a16:	2300      	moveq	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	e022      	b.n	8004a62 <HAL_TIM_PWM_Start+0x9e>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b0c      	cmp	r3, #12
 8004a20:	d109      	bne.n	8004a36 <HAL_TIM_PWM_Start+0x72>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	bf14      	ite	ne
 8004a2e:	2301      	movne	r3, #1
 8004a30:	2300      	moveq	r3, #0
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	e015      	b.n	8004a62 <HAL_TIM_PWM_Start+0x9e>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d109      	bne.n	8004a50 <HAL_TIM_PWM_Start+0x8c>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	bf14      	ite	ne
 8004a48:	2301      	movne	r3, #1
 8004a4a:	2300      	moveq	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	e008      	b.n	8004a62 <HAL_TIM_PWM_Start+0x9e>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	bf14      	ite	ne
 8004a5c:	2301      	movne	r3, #1
 8004a5e:	2300      	moveq	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e06e      	b.n	8004b48 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d104      	bne.n	8004a7a <HAL_TIM_PWM_Start+0xb6>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a78:	e023      	b.n	8004ac2 <HAL_TIM_PWM_Start+0xfe>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d104      	bne.n	8004a8a <HAL_TIM_PWM_Start+0xc6>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a88:	e01b      	b.n	8004ac2 <HAL_TIM_PWM_Start+0xfe>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d104      	bne.n	8004a9a <HAL_TIM_PWM_Start+0xd6>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a98:	e013      	b.n	8004ac2 <HAL_TIM_PWM_Start+0xfe>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b0c      	cmp	r3, #12
 8004a9e:	d104      	bne.n	8004aaa <HAL_TIM_PWM_Start+0xe6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aa8:	e00b      	b.n	8004ac2 <HAL_TIM_PWM_Start+0xfe>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b10      	cmp	r3, #16
 8004aae:	d104      	bne.n	8004aba <HAL_TIM_PWM_Start+0xf6>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab8:	e003      	b.n	8004ac2 <HAL_TIM_PWM_Start+0xfe>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2202      	movs	r2, #2
 8004abe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	6839      	ldr	r1, [r7, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fe56 	bl	800577c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1e      	ldr	r2, [pc, #120]	; (8004b50 <HAL_TIM_PWM_Start+0x18c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x13e>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1d      	ldr	r2, [pc, #116]	; (8004b54 <HAL_TIM_PWM_Start+0x190>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00e      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x13e>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1b      	ldr	r2, [pc, #108]	; (8004b58 <HAL_TIM_PWM_Start+0x194>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d009      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x13e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1a      	ldr	r2, [pc, #104]	; (8004b5c <HAL_TIM_PWM_Start+0x198>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d004      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x13e>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a18      	ldr	r2, [pc, #96]	; (8004b60 <HAL_TIM_PWM_Start+0x19c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d101      	bne.n	8004b06 <HAL_TIM_PWM_Start+0x142>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <HAL_TIM_PWM_Start+0x144>
 8004b06:	2300      	movs	r3, #0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d007      	beq.n	8004b1c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <HAL_TIM_PWM_Start+0x1a0>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b06      	cmp	r3, #6
 8004b2c:	d00b      	beq.n	8004b46 <HAL_TIM_PWM_Start+0x182>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b34:	d007      	beq.n	8004b46 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0201 	orr.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40010000 	.word	0x40010000
 8004b54:	40010400 	.word	0x40010400
 8004b58:	40014000 	.word	0x40014000
 8004b5c:	40014400 	.word	0x40014400
 8004b60:	40014800 	.word	0x40014800
 8004b64:	00010007 	.word	0x00010007

08004b68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e0fd      	b.n	8004d7e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b14      	cmp	r3, #20
 8004b8e:	f200 80f0 	bhi.w	8004d72 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004b92:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b98:	08004bed 	.word	0x08004bed
 8004b9c:	08004d73 	.word	0x08004d73
 8004ba0:	08004d73 	.word	0x08004d73
 8004ba4:	08004d73 	.word	0x08004d73
 8004ba8:	08004c2d 	.word	0x08004c2d
 8004bac:	08004d73 	.word	0x08004d73
 8004bb0:	08004d73 	.word	0x08004d73
 8004bb4:	08004d73 	.word	0x08004d73
 8004bb8:	08004c6f 	.word	0x08004c6f
 8004bbc:	08004d73 	.word	0x08004d73
 8004bc0:	08004d73 	.word	0x08004d73
 8004bc4:	08004d73 	.word	0x08004d73
 8004bc8:	08004caf 	.word	0x08004caf
 8004bcc:	08004d73 	.word	0x08004d73
 8004bd0:	08004d73 	.word	0x08004d73
 8004bd4:	08004d73 	.word	0x08004d73
 8004bd8:	08004cf1 	.word	0x08004cf1
 8004bdc:	08004d73 	.word	0x08004d73
 8004be0:	08004d73 	.word	0x08004d73
 8004be4:	08004d73 	.word	0x08004d73
 8004be8:	08004d31 	.word	0x08004d31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fa56 	bl	80050a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699a      	ldr	r2, [r3, #24]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0208 	orr.w	r2, r2, #8
 8004c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0204 	bic.w	r2, r2, #4
 8004c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6999      	ldr	r1, [r3, #24]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	691a      	ldr	r2, [r3, #16]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	619a      	str	r2, [r3, #24]
      break;
 8004c2a:	e0a3      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68b9      	ldr	r1, [r7, #8]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fac6 	bl	80051c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6999      	ldr	r1, [r3, #24]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	021a      	lsls	r2, r3, #8
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	619a      	str	r2, [r3, #24]
      break;
 8004c6c:	e082      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 fb2f 	bl	80052d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0208 	orr.w	r2, r2, #8
 8004c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0204 	bic.w	r2, r2, #4
 8004c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69d9      	ldr	r1, [r3, #28]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	61da      	str	r2, [r3, #28]
      break;
 8004cac:	e062      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fb95 	bl	80053e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69d9      	ldr	r1, [r3, #28]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	021a      	lsls	r2, r3, #8
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	61da      	str	r2, [r3, #28]
      break;
 8004cee:	e041      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fbdc 	bl	80054b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0208 	orr.w	r2, r2, #8
 8004d0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0204 	bic.w	r2, r2, #4
 8004d1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d2e:	e021      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fc1e 	bl	8005578 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	021a      	lsls	r2, r3, #8
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d70:	e000      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004d72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop

08004d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_TIM_ConfigClockSource+0x18>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e0db      	b.n	8004f58 <HAL_TIM_ConfigClockSource+0x1d0>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4b69      	ldr	r3, [pc, #420]	; (8004f60 <HAL_TIM_ConfigClockSource+0x1d8>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dc6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a63      	ldr	r2, [pc, #396]	; (8004f64 <HAL_TIM_ConfigClockSource+0x1dc>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	f000 80a9 	beq.w	8004f2e <HAL_TIM_ConfigClockSource+0x1a6>
 8004ddc:	4a61      	ldr	r2, [pc, #388]	; (8004f64 <HAL_TIM_ConfigClockSource+0x1dc>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	f200 80ae 	bhi.w	8004f40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004de4:	4a60      	ldr	r2, [pc, #384]	; (8004f68 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	f000 80a1 	beq.w	8004f2e <HAL_TIM_ConfigClockSource+0x1a6>
 8004dec:	4a5e      	ldr	r2, [pc, #376]	; (8004f68 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	f200 80a6 	bhi.w	8004f40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004df4:	4a5d      	ldr	r2, [pc, #372]	; (8004f6c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	f000 8099 	beq.w	8004f2e <HAL_TIM_ConfigClockSource+0x1a6>
 8004dfc:	4a5b      	ldr	r2, [pc, #364]	; (8004f6c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	f200 809e 	bhi.w	8004f40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004e08:	f000 8091 	beq.w	8004f2e <HAL_TIM_ConfigClockSource+0x1a6>
 8004e0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004e10:	f200 8096 	bhi.w	8004f40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e18:	f000 8089 	beq.w	8004f2e <HAL_TIM_ConfigClockSource+0x1a6>
 8004e1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e20:	f200 808e 	bhi.w	8004f40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e28:	d03e      	beq.n	8004ea8 <HAL_TIM_ConfigClockSource+0x120>
 8004e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e2e:	f200 8087 	bhi.w	8004f40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e36:	f000 8085 	beq.w	8004f44 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e3e:	d87f      	bhi.n	8004f40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e40:	2b70      	cmp	r3, #112	; 0x70
 8004e42:	d01a      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0xf2>
 8004e44:	2b70      	cmp	r3, #112	; 0x70
 8004e46:	d87b      	bhi.n	8004f40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e48:	2b60      	cmp	r3, #96	; 0x60
 8004e4a:	d050      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x166>
 8004e4c:	2b60      	cmp	r3, #96	; 0x60
 8004e4e:	d877      	bhi.n	8004f40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e50:	2b50      	cmp	r3, #80	; 0x50
 8004e52:	d03c      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x146>
 8004e54:	2b50      	cmp	r3, #80	; 0x50
 8004e56:	d873      	bhi.n	8004f40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e58:	2b40      	cmp	r3, #64	; 0x40
 8004e5a:	d058      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x186>
 8004e5c:	2b40      	cmp	r3, #64	; 0x40
 8004e5e:	d86f      	bhi.n	8004f40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e60:	2b30      	cmp	r3, #48	; 0x30
 8004e62:	d064      	beq.n	8004f2e <HAL_TIM_ConfigClockSource+0x1a6>
 8004e64:	2b30      	cmp	r3, #48	; 0x30
 8004e66:	d86b      	bhi.n	8004f40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	d060      	beq.n	8004f2e <HAL_TIM_ConfigClockSource+0x1a6>
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d867      	bhi.n	8004f40 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d05c      	beq.n	8004f2e <HAL_TIM_ConfigClockSource+0x1a6>
 8004e74:	2b10      	cmp	r3, #16
 8004e76:	d05a      	beq.n	8004f2e <HAL_TIM_ConfigClockSource+0x1a6>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004e78:	e062      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6899      	ldr	r1, [r3, #8]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f000 fc57 	bl	800573c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	609a      	str	r2, [r3, #8]
      break;
 8004ea6:	e04e      	b.n	8004f46 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	6899      	ldr	r1, [r3, #8]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f000 fc40 	bl	800573c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eca:	609a      	str	r2, [r3, #8]
      break;
 8004ecc:	e03b      	b.n	8004f46 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6859      	ldr	r1, [r3, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	461a      	mov	r2, r3
 8004edc:	f000 fbb0 	bl	8005640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2150      	movs	r1, #80	; 0x50
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fc0a 	bl	8005700 <TIM_ITRx_SetConfig>
      break;
 8004eec:	e02b      	b.n	8004f46 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	6859      	ldr	r1, [r3, #4]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	461a      	mov	r2, r3
 8004efc:	f000 fbcf 	bl	800569e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2160      	movs	r1, #96	; 0x60
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fbfa 	bl	8005700 <TIM_ITRx_SetConfig>
      break;
 8004f0c:	e01b      	b.n	8004f46 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	6859      	ldr	r1, [r3, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	f000 fb90 	bl	8005640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2140      	movs	r1, #64	; 0x40
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fbea 	bl	8005700 <TIM_ITRx_SetConfig>
      break;
 8004f2c:	e00b      	b.n	8004f46 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4619      	mov	r1, r3
 8004f38:	4610      	mov	r0, r2
 8004f3a:	f000 fbe1 	bl	8005700 <TIM_ITRx_SetConfig>
      break;
 8004f3e:	e002      	b.n	8004f46 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8004f40:	bf00      	nop
 8004f42:	e000      	b.n	8004f46 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8004f44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	ffceff88 	.word	0xffceff88
 8004f64:	00100040 	.word	0x00100040
 8004f68:	00100030 	.word	0x00100030
 8004f6c:	00100020 	.word	0x00100020

08004f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a40      	ldr	r2, [pc, #256]	; (8005084 <TIM_Base_SetConfig+0x114>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d013      	beq.n	8004fb0 <TIM_Base_SetConfig+0x40>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8e:	d00f      	beq.n	8004fb0 <TIM_Base_SetConfig+0x40>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a3d      	ldr	r2, [pc, #244]	; (8005088 <TIM_Base_SetConfig+0x118>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00b      	beq.n	8004fb0 <TIM_Base_SetConfig+0x40>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a3c      	ldr	r2, [pc, #240]	; (800508c <TIM_Base_SetConfig+0x11c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d007      	beq.n	8004fb0 <TIM_Base_SetConfig+0x40>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a3b      	ldr	r2, [pc, #236]	; (8005090 <TIM_Base_SetConfig+0x120>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_Base_SetConfig+0x40>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a3a      	ldr	r2, [pc, #232]	; (8005094 <TIM_Base_SetConfig+0x124>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d108      	bne.n	8004fc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a2f      	ldr	r2, [pc, #188]	; (8005084 <TIM_Base_SetConfig+0x114>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d01f      	beq.n	800500a <TIM_Base_SetConfig+0x9a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd0:	d01b      	beq.n	800500a <TIM_Base_SetConfig+0x9a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a2c      	ldr	r2, [pc, #176]	; (8005088 <TIM_Base_SetConfig+0x118>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d017      	beq.n	800500a <TIM_Base_SetConfig+0x9a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2b      	ldr	r2, [pc, #172]	; (800508c <TIM_Base_SetConfig+0x11c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d013      	beq.n	800500a <TIM_Base_SetConfig+0x9a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a2a      	ldr	r2, [pc, #168]	; (8005090 <TIM_Base_SetConfig+0x120>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00f      	beq.n	800500a <TIM_Base_SetConfig+0x9a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a29      	ldr	r2, [pc, #164]	; (8005094 <TIM_Base_SetConfig+0x124>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00b      	beq.n	800500a <TIM_Base_SetConfig+0x9a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a28      	ldr	r2, [pc, #160]	; (8005098 <TIM_Base_SetConfig+0x128>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d007      	beq.n	800500a <TIM_Base_SetConfig+0x9a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a27      	ldr	r2, [pc, #156]	; (800509c <TIM_Base_SetConfig+0x12c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d003      	beq.n	800500a <TIM_Base_SetConfig+0x9a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a26      	ldr	r2, [pc, #152]	; (80050a0 <TIM_Base_SetConfig+0x130>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d108      	bne.n	800501c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a10      	ldr	r2, [pc, #64]	; (8005084 <TIM_Base_SetConfig+0x114>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00f      	beq.n	8005068 <TIM_Base_SetConfig+0xf8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a12      	ldr	r2, [pc, #72]	; (8005094 <TIM_Base_SetConfig+0x124>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00b      	beq.n	8005068 <TIM_Base_SetConfig+0xf8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a11      	ldr	r2, [pc, #68]	; (8005098 <TIM_Base_SetConfig+0x128>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d007      	beq.n	8005068 <TIM_Base_SetConfig+0xf8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a10      	ldr	r2, [pc, #64]	; (800509c <TIM_Base_SetConfig+0x12c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d003      	beq.n	8005068 <TIM_Base_SetConfig+0xf8>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a0f      	ldr	r2, [pc, #60]	; (80050a0 <TIM_Base_SetConfig+0x130>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d103      	bne.n	8005070 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	615a      	str	r2, [r3, #20]
}
 8005076:	bf00      	nop
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40010000 	.word	0x40010000
 8005088:	40000400 	.word	0x40000400
 800508c:	40000800 	.word	0x40000800
 8005090:	40000c00 	.word	0x40000c00
 8005094:	40010400 	.word	0x40010400
 8005098:	40014000 	.word	0x40014000
 800509c:	40014400 	.word	0x40014400
 80050a0:	40014800 	.word	0x40014800

080050a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	f023 0201 	bic.w	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4b37      	ldr	r3, [pc, #220]	; (80051ac <TIM_OC1_SetConfig+0x108>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0303 	bic.w	r3, r3, #3
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f023 0302 	bic.w	r3, r3, #2
 80050ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a2d      	ldr	r2, [pc, #180]	; (80051b0 <TIM_OC1_SetConfig+0x10c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00f      	beq.n	8005120 <TIM_OC1_SetConfig+0x7c>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a2c      	ldr	r2, [pc, #176]	; (80051b4 <TIM_OC1_SetConfig+0x110>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00b      	beq.n	8005120 <TIM_OC1_SetConfig+0x7c>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a2b      	ldr	r2, [pc, #172]	; (80051b8 <TIM_OC1_SetConfig+0x114>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d007      	beq.n	8005120 <TIM_OC1_SetConfig+0x7c>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a2a      	ldr	r2, [pc, #168]	; (80051bc <TIM_OC1_SetConfig+0x118>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_OC1_SetConfig+0x7c>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a29      	ldr	r2, [pc, #164]	; (80051c0 <TIM_OC1_SetConfig+0x11c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d10c      	bne.n	800513a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0308 	bic.w	r3, r3, #8
 8005126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f023 0304 	bic.w	r3, r3, #4
 8005138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a1c      	ldr	r2, [pc, #112]	; (80051b0 <TIM_OC1_SetConfig+0x10c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00f      	beq.n	8005162 <TIM_OC1_SetConfig+0xbe>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1b      	ldr	r2, [pc, #108]	; (80051b4 <TIM_OC1_SetConfig+0x110>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00b      	beq.n	8005162 <TIM_OC1_SetConfig+0xbe>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a1a      	ldr	r2, [pc, #104]	; (80051b8 <TIM_OC1_SetConfig+0x114>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d007      	beq.n	8005162 <TIM_OC1_SetConfig+0xbe>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a19      	ldr	r2, [pc, #100]	; (80051bc <TIM_OC1_SetConfig+0x118>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d003      	beq.n	8005162 <TIM_OC1_SetConfig+0xbe>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a18      	ldr	r2, [pc, #96]	; (80051c0 <TIM_OC1_SetConfig+0x11c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d111      	bne.n	8005186 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	621a      	str	r2, [r3, #32]
}
 80051a0:	bf00      	nop
 80051a2:	371c      	adds	r7, #28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	fffeff8f 	.word	0xfffeff8f
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40010400 	.word	0x40010400
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40014400 	.word	0x40014400
 80051c0:	40014800 	.word	0x40014800

080051c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	f023 0210 	bic.w	r2, r3, #16
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	4b34      	ldr	r3, [pc, #208]	; (80052c0 <TIM_OC2_SetConfig+0xfc>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f023 0320 	bic.w	r3, r3, #32
 800520e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a29      	ldr	r2, [pc, #164]	; (80052c4 <TIM_OC2_SetConfig+0x100>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_OC2_SetConfig+0x68>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a28      	ldr	r2, [pc, #160]	; (80052c8 <TIM_OC2_SetConfig+0x104>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d10d      	bne.n	8005248 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005246:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a1e      	ldr	r2, [pc, #120]	; (80052c4 <TIM_OC2_SetConfig+0x100>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00f      	beq.n	8005270 <TIM_OC2_SetConfig+0xac>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a1d      	ldr	r2, [pc, #116]	; (80052c8 <TIM_OC2_SetConfig+0x104>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00b      	beq.n	8005270 <TIM_OC2_SetConfig+0xac>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a1c      	ldr	r2, [pc, #112]	; (80052cc <TIM_OC2_SetConfig+0x108>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d007      	beq.n	8005270 <TIM_OC2_SetConfig+0xac>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a1b      	ldr	r2, [pc, #108]	; (80052d0 <TIM_OC2_SetConfig+0x10c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d003      	beq.n	8005270 <TIM_OC2_SetConfig+0xac>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a1a      	ldr	r2, [pc, #104]	; (80052d4 <TIM_OC2_SetConfig+0x110>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d113      	bne.n	8005298 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005276:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800527e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	feff8fff 	.word	0xfeff8fff
 80052c4:	40010000 	.word	0x40010000
 80052c8:	40010400 	.word	0x40010400
 80052cc:	40014000 	.word	0x40014000
 80052d0:	40014400 	.word	0x40014400
 80052d4:	40014800 	.word	0x40014800

080052d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0303 	bic.w	r3, r3, #3
 800530e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a27      	ldr	r2, [pc, #156]	; (80053d0 <TIM_OC3_SetConfig+0xf8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d003      	beq.n	800533e <TIM_OC3_SetConfig+0x66>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a26      	ldr	r2, [pc, #152]	; (80053d4 <TIM_OC3_SetConfig+0xfc>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d10d      	bne.n	800535a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a1c      	ldr	r2, [pc, #112]	; (80053d0 <TIM_OC3_SetConfig+0xf8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00f      	beq.n	8005382 <TIM_OC3_SetConfig+0xaa>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a1b      	ldr	r2, [pc, #108]	; (80053d4 <TIM_OC3_SetConfig+0xfc>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00b      	beq.n	8005382 <TIM_OC3_SetConfig+0xaa>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a1a      	ldr	r2, [pc, #104]	; (80053d8 <TIM_OC3_SetConfig+0x100>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d007      	beq.n	8005382 <TIM_OC3_SetConfig+0xaa>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a19      	ldr	r2, [pc, #100]	; (80053dc <TIM_OC3_SetConfig+0x104>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d003      	beq.n	8005382 <TIM_OC3_SetConfig+0xaa>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a18      	ldr	r2, [pc, #96]	; (80053e0 <TIM_OC3_SetConfig+0x108>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d113      	bne.n	80053aa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	621a      	str	r2, [r3, #32]
}
 80053c4:	bf00      	nop
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	40010000 	.word	0x40010000
 80053d4:	40010400 	.word	0x40010400
 80053d8:	40014000 	.word	0x40014000
 80053dc:	40014400 	.word	0x40014400
 80053e0:	40014800 	.word	0x40014800

080053e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800542e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	031b      	lsls	r3, r3, #12
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	4313      	orrs	r3, r2
 800543a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a18      	ldr	r2, [pc, #96]	; (80054a0 <TIM_OC4_SetConfig+0xbc>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00f      	beq.n	8005464 <TIM_OC4_SetConfig+0x80>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a17      	ldr	r2, [pc, #92]	; (80054a4 <TIM_OC4_SetConfig+0xc0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00b      	beq.n	8005464 <TIM_OC4_SetConfig+0x80>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a16      	ldr	r2, [pc, #88]	; (80054a8 <TIM_OC4_SetConfig+0xc4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d007      	beq.n	8005464 <TIM_OC4_SetConfig+0x80>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a15      	ldr	r2, [pc, #84]	; (80054ac <TIM_OC4_SetConfig+0xc8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_OC4_SetConfig+0x80>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a14      	ldr	r2, [pc, #80]	; (80054b0 <TIM_OC4_SetConfig+0xcc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d109      	bne.n	8005478 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800546a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	019b      	lsls	r3, r3, #6
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	621a      	str	r2, [r3, #32]
}
 8005492:	bf00      	nop
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40010000 	.word	0x40010000
 80054a4:	40010400 	.word	0x40010400
 80054a8:	40014000 	.word	0x40014000
 80054ac:	40014400 	.word	0x40014400
 80054b0:	40014800 	.word	0x40014800

080054b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80054f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	041b      	lsls	r3, r3, #16
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a17      	ldr	r2, [pc, #92]	; (8005564 <TIM_OC5_SetConfig+0xb0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00f      	beq.n	800552a <TIM_OC5_SetConfig+0x76>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a16      	ldr	r2, [pc, #88]	; (8005568 <TIM_OC5_SetConfig+0xb4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00b      	beq.n	800552a <TIM_OC5_SetConfig+0x76>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a15      	ldr	r2, [pc, #84]	; (800556c <TIM_OC5_SetConfig+0xb8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d007      	beq.n	800552a <TIM_OC5_SetConfig+0x76>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a14      	ldr	r2, [pc, #80]	; (8005570 <TIM_OC5_SetConfig+0xbc>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d003      	beq.n	800552a <TIM_OC5_SetConfig+0x76>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a13      	ldr	r2, [pc, #76]	; (8005574 <TIM_OC5_SetConfig+0xc0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d109      	bne.n	800553e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005530:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	021b      	lsls	r3, r3, #8
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	621a      	str	r2, [r3, #32]
}
 8005558:	bf00      	nop
 800555a:	371c      	adds	r7, #28
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	40010000 	.word	0x40010000
 8005568:	40010400 	.word	0x40010400
 800556c:	40014000 	.word	0x40014000
 8005570:	40014400 	.word	0x40014400
 8005574:	40014800 	.word	0x40014800

08005578 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	021b      	lsls	r3, r3, #8
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	051b      	lsls	r3, r3, #20
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a18      	ldr	r2, [pc, #96]	; (800562c <TIM_OC6_SetConfig+0xb4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00f      	beq.n	80055f0 <TIM_OC6_SetConfig+0x78>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a17      	ldr	r2, [pc, #92]	; (8005630 <TIM_OC6_SetConfig+0xb8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00b      	beq.n	80055f0 <TIM_OC6_SetConfig+0x78>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a16      	ldr	r2, [pc, #88]	; (8005634 <TIM_OC6_SetConfig+0xbc>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d007      	beq.n	80055f0 <TIM_OC6_SetConfig+0x78>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a15      	ldr	r2, [pc, #84]	; (8005638 <TIM_OC6_SetConfig+0xc0>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d003      	beq.n	80055f0 <TIM_OC6_SetConfig+0x78>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a14      	ldr	r2, [pc, #80]	; (800563c <TIM_OC6_SetConfig+0xc4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d109      	bne.n	8005604 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	029b      	lsls	r3, r3, #10
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4313      	orrs	r3, r2
 8005602:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	621a      	str	r2, [r3, #32]
}
 800561e:	bf00      	nop
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40010000 	.word	0x40010000
 8005630:	40010400 	.word	0x40010400
 8005634:	40014000 	.word	0x40014000
 8005638:	40014400 	.word	0x40014400
 800563c:	40014800 	.word	0x40014800

08005640 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f023 0201 	bic.w	r2, r3, #1
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800566a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f023 030a 	bic.w	r3, r3, #10
 800567c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4313      	orrs	r3, r2
 8005684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800569e:	b480      	push	{r7}
 80056a0:	b087      	sub	sp, #28
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	f023 0210 	bic.w	r2, r3, #16
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	031b      	lsls	r3, r3, #12
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	621a      	str	r2, [r3, #32]
}
 80056f2:	bf00      	nop
 80056f4:	371c      	adds	r7, #28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
	...

08005700 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4b09      	ldr	r3, [pc, #36]	; (8005738 <TIM_ITRx_SetConfig+0x38>)
 8005714:	4013      	ands	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	f043 0307 	orr.w	r3, r3, #7
 8005722:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	609a      	str	r2, [r3, #8]
}
 800572a:	bf00      	nop
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	ffcfff8f 	.word	0xffcfff8f

0800573c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005756:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	021a      	lsls	r2, r3, #8
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	431a      	orrs	r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4313      	orrs	r3, r2
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	609a      	str	r2, [r3, #8]
}
 8005770:	bf00      	nop
 8005772:	371c      	adds	r7, #28
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f003 031f 	and.w	r3, r3, #31
 800578e:	2201      	movs	r2, #1
 8005790:	fa02 f303 	lsl.w	r3, r2, r3
 8005794:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a1a      	ldr	r2, [r3, #32]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	43db      	mvns	r3, r3
 800579e:	401a      	ands	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a1a      	ldr	r2, [r3, #32]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f003 031f 	and.w	r3, r3, #31
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	fa01 f303 	lsl.w	r3, r1, r3
 80057b4:	431a      	orrs	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	621a      	str	r2, [r3, #32]
}
 80057ba:	bf00      	nop
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
	...

080057c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057dc:	2302      	movs	r3, #2
 80057de:	e068      	b.n	80058b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a2e      	ldr	r2, [pc, #184]	; (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d004      	beq.n	8005814 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a2d      	ldr	r2, [pc, #180]	; (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d108      	bne.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800581a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4313      	orrs	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1e      	ldr	r2, [pc, #120]	; (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d01d      	beq.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005852:	d018      	beq.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a1b      	ldr	r2, [pc, #108]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d013      	beq.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a1a      	ldr	r2, [pc, #104]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00e      	beq.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a18      	ldr	r2, [pc, #96]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d009      	beq.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a13      	ldr	r2, [pc, #76]	; (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d004      	beq.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a14      	ldr	r2, [pc, #80]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d10c      	bne.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800588c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	4313      	orrs	r3, r2
 8005896:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	40010000 	.word	0x40010000
 80058c4:	40010400 	.word	0x40010400
 80058c8:	40000400 	.word	0x40000400
 80058cc:	40000800 	.word	0x40000800
 80058d0:	40000c00 	.word	0x40000c00
 80058d4:	40001800 	.word	0x40001800

080058d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e065      	b.n	80059c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	041b      	lsls	r3, r3, #16
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a16      	ldr	r2, [pc, #88]	; (80059cc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d004      	beq.n	8005982 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a14      	ldr	r2, [pc, #80]	; (80059d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d115      	bne.n	80059ae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	051b      	lsls	r3, r3, #20
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	4313      	orrs	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	40010000 	.word	0x40010000
 80059d0:	40010400 	.word	0x40010400

080059d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e042      	b.n	8005a6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d106      	bne.n	80059fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7fb fef9 	bl	80017f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2224      	movs	r2, #36	; 0x24
 8005a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0201 	bic.w	r2, r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f90e 	bl	8005c38 <UART_SetConfig>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e022      	b.n	8005a6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fe68 	bl	8006704 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 feef 	bl	8006848 <UART_CheckIdleState>
 8005a6a:	4603      	mov	r3, r0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a88:	2b20      	cmp	r3, #32
 8005a8a:	f040 80bc 	bne.w	8005c06 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_UART_Receive_IT+0x26>
 8005a94:	88fb      	ldrh	r3, [r7, #6]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e0b4      	b.n	8005c08 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_UART_Receive_IT+0x38>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e0ad      	b.n	8005c08 <HAL_UART_Receive_IT+0x194>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	88fa      	ldrh	r2, [r7, #6]
 8005abe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	88fa      	ldrh	r2, [r7, #6]
 8005ac6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad8:	d10e      	bne.n	8005af8 <HAL_UART_Receive_IT+0x84>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d105      	bne.n	8005aee <HAL_UART_Receive_IT+0x7a>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005ae8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005aec:	e02d      	b.n	8005b4a <HAL_UART_Receive_IT+0xd6>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	22ff      	movs	r2, #255	; 0xff
 8005af2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005af6:	e028      	b.n	8005b4a <HAL_UART_Receive_IT+0xd6>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10d      	bne.n	8005b1c <HAL_UART_Receive_IT+0xa8>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d104      	bne.n	8005b12 <HAL_UART_Receive_IT+0x9e>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	22ff      	movs	r2, #255	; 0xff
 8005b0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b10:	e01b      	b.n	8005b4a <HAL_UART_Receive_IT+0xd6>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	227f      	movs	r2, #127	; 0x7f
 8005b16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b1a:	e016      	b.n	8005b4a <HAL_UART_Receive_IT+0xd6>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b24:	d10d      	bne.n	8005b42 <HAL_UART_Receive_IT+0xce>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d104      	bne.n	8005b38 <HAL_UART_Receive_IT+0xc4>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	227f      	movs	r2, #127	; 0x7f
 8005b32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b36:	e008      	b.n	8005b4a <HAL_UART_Receive_IT+0xd6>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	223f      	movs	r2, #63	; 0x3f
 8005b3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b40:	e003      	b.n	8005b4a <HAL_UART_Receive_IT+0xd6>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2222      	movs	r2, #34	; 0x22
 8005b56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f042 0201 	orr.w	r2, r2, #1
 8005b68:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b72:	d12a      	bne.n	8005bca <HAL_UART_Receive_IT+0x156>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005b7a:	88fa      	ldrh	r2, [r7, #6]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d324      	bcc.n	8005bca <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b88:	d107      	bne.n	8005b9a <HAL_UART_Receive_IT+0x126>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d103      	bne.n	8005b9a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4a1f      	ldr	r2, [pc, #124]	; (8005c14 <HAL_UART_Receive_IT+0x1a0>)
 8005b96:	66da      	str	r2, [r3, #108]	; 0x6c
 8005b98:	e002      	b.n	8005ba0 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4a1e      	ldr	r2, [pc, #120]	; (8005c18 <HAL_UART_Receive_IT+0x1a4>)
 8005b9e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bb6:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005bc6:	609a      	str	r2, [r3, #8]
 8005bc8:	e01b      	b.n	8005c02 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd2:	d107      	bne.n	8005be4 <HAL_UART_Receive_IT+0x170>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d103      	bne.n	8005be4 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4a0f      	ldr	r2, [pc, #60]	; (8005c1c <HAL_UART_Receive_IT+0x1a8>)
 8005be0:	66da      	str	r2, [r3, #108]	; 0x6c
 8005be2:	e002      	b.n	8005bea <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4a0e      	ldr	r2, [pc, #56]	; (8005c20 <HAL_UART_Receive_IT+0x1ac>)
 8005be8:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005c00:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	e000      	b.n	8005c08 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8005c06:	2302      	movs	r3, #2
  }
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	08006c35 	.word	0x08006c35
 8005c18:	08006b2d 	.word	0x08006b2d
 8005c1c:	08006a83 	.word	0x08006a83
 8005c20:	080069d9 	.word	0x080069d9

08005c24 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c38:	b5b0      	push	{r4, r5, r7, lr}
 8005c3a:	b08e      	sub	sp, #56	; 0x38
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689a      	ldr	r2, [r3, #8]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c64:	4313      	orrs	r3, r2
 8005c66:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	4bc0      	ldr	r3, [pc, #768]	; (8005f70 <UART_SetConfig+0x338>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4ab5      	ldr	r2, [pc, #724]	; (8005f74 <UART_SetConfig+0x33c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d004      	beq.n	8005cac <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	4bb1      	ldr	r3, [pc, #708]	; (8005f78 <UART_SetConfig+0x340>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6812      	ldr	r2, [r2, #0]
 8005cba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005cbc:	430b      	orrs	r3, r1
 8005cbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	f023 010f 	bic.w	r1, r3, #15
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4aa8      	ldr	r2, [pc, #672]	; (8005f7c <UART_SetConfig+0x344>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d177      	bne.n	8005dd0 <UART_SetConfig+0x198>
 8005ce0:	4ba7      	ldr	r3, [pc, #668]	; (8005f80 <UART_SetConfig+0x348>)
 8005ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ce8:	2b28      	cmp	r3, #40	; 0x28
 8005cea:	d86d      	bhi.n	8005dc8 <UART_SetConfig+0x190>
 8005cec:	a201      	add	r2, pc, #4	; (adr r2, 8005cf4 <UART_SetConfig+0xbc>)
 8005cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf2:	bf00      	nop
 8005cf4:	08005d99 	.word	0x08005d99
 8005cf8:	08005dc9 	.word	0x08005dc9
 8005cfc:	08005dc9 	.word	0x08005dc9
 8005d00:	08005dc9 	.word	0x08005dc9
 8005d04:	08005dc9 	.word	0x08005dc9
 8005d08:	08005dc9 	.word	0x08005dc9
 8005d0c:	08005dc9 	.word	0x08005dc9
 8005d10:	08005dc9 	.word	0x08005dc9
 8005d14:	08005da1 	.word	0x08005da1
 8005d18:	08005dc9 	.word	0x08005dc9
 8005d1c:	08005dc9 	.word	0x08005dc9
 8005d20:	08005dc9 	.word	0x08005dc9
 8005d24:	08005dc9 	.word	0x08005dc9
 8005d28:	08005dc9 	.word	0x08005dc9
 8005d2c:	08005dc9 	.word	0x08005dc9
 8005d30:	08005dc9 	.word	0x08005dc9
 8005d34:	08005da9 	.word	0x08005da9
 8005d38:	08005dc9 	.word	0x08005dc9
 8005d3c:	08005dc9 	.word	0x08005dc9
 8005d40:	08005dc9 	.word	0x08005dc9
 8005d44:	08005dc9 	.word	0x08005dc9
 8005d48:	08005dc9 	.word	0x08005dc9
 8005d4c:	08005dc9 	.word	0x08005dc9
 8005d50:	08005dc9 	.word	0x08005dc9
 8005d54:	08005db1 	.word	0x08005db1
 8005d58:	08005dc9 	.word	0x08005dc9
 8005d5c:	08005dc9 	.word	0x08005dc9
 8005d60:	08005dc9 	.word	0x08005dc9
 8005d64:	08005dc9 	.word	0x08005dc9
 8005d68:	08005dc9 	.word	0x08005dc9
 8005d6c:	08005dc9 	.word	0x08005dc9
 8005d70:	08005dc9 	.word	0x08005dc9
 8005d74:	08005db9 	.word	0x08005db9
 8005d78:	08005dc9 	.word	0x08005dc9
 8005d7c:	08005dc9 	.word	0x08005dc9
 8005d80:	08005dc9 	.word	0x08005dc9
 8005d84:	08005dc9 	.word	0x08005dc9
 8005d88:	08005dc9 	.word	0x08005dc9
 8005d8c:	08005dc9 	.word	0x08005dc9
 8005d90:	08005dc9 	.word	0x08005dc9
 8005d94:	08005dc1 	.word	0x08005dc1
 8005d98:	2301      	movs	r3, #1
 8005d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d9e:	e222      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005da0:	2304      	movs	r3, #4
 8005da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005da6:	e21e      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005da8:	2308      	movs	r3, #8
 8005daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dae:	e21a      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005db0:	2310      	movs	r3, #16
 8005db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005db6:	e216      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005db8:	2320      	movs	r3, #32
 8005dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dbe:	e212      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005dc0:	2340      	movs	r3, #64	; 0x40
 8005dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dc6:	e20e      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005dc8:	2380      	movs	r3, #128	; 0x80
 8005dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dce:	e20a      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a6b      	ldr	r2, [pc, #428]	; (8005f84 <UART_SetConfig+0x34c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d130      	bne.n	8005e3c <UART_SetConfig+0x204>
 8005dda:	4b69      	ldr	r3, [pc, #420]	; (8005f80 <UART_SetConfig+0x348>)
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	2b05      	cmp	r3, #5
 8005de4:	d826      	bhi.n	8005e34 <UART_SetConfig+0x1fc>
 8005de6:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <UART_SetConfig+0x1b4>)
 8005de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dec:	08005e05 	.word	0x08005e05
 8005df0:	08005e0d 	.word	0x08005e0d
 8005df4:	08005e15 	.word	0x08005e15
 8005df8:	08005e1d 	.word	0x08005e1d
 8005dfc:	08005e25 	.word	0x08005e25
 8005e00:	08005e2d 	.word	0x08005e2d
 8005e04:	2300      	movs	r3, #0
 8005e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e0a:	e1ec      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e12:	e1e8      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005e14:	2308      	movs	r3, #8
 8005e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e1a:	e1e4      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005e1c:	2310      	movs	r3, #16
 8005e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e22:	e1e0      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005e24:	2320      	movs	r3, #32
 8005e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2a:	e1dc      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005e2c:	2340      	movs	r3, #64	; 0x40
 8005e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e32:	e1d8      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005e34:	2380      	movs	r3, #128	; 0x80
 8005e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3a:	e1d4      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a51      	ldr	r2, [pc, #324]	; (8005f88 <UART_SetConfig+0x350>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d130      	bne.n	8005ea8 <UART_SetConfig+0x270>
 8005e46:	4b4e      	ldr	r3, [pc, #312]	; (8005f80 <UART_SetConfig+0x348>)
 8005e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	2b05      	cmp	r3, #5
 8005e50:	d826      	bhi.n	8005ea0 <UART_SetConfig+0x268>
 8005e52:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <UART_SetConfig+0x220>)
 8005e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e58:	08005e71 	.word	0x08005e71
 8005e5c:	08005e79 	.word	0x08005e79
 8005e60:	08005e81 	.word	0x08005e81
 8005e64:	08005e89 	.word	0x08005e89
 8005e68:	08005e91 	.word	0x08005e91
 8005e6c:	08005e99 	.word	0x08005e99
 8005e70:	2300      	movs	r3, #0
 8005e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e76:	e1b6      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005e78:	2304      	movs	r3, #4
 8005e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e7e:	e1b2      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005e80:	2308      	movs	r3, #8
 8005e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e86:	e1ae      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005e88:	2310      	movs	r3, #16
 8005e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8e:	e1aa      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005e90:	2320      	movs	r3, #32
 8005e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e96:	e1a6      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005e98:	2340      	movs	r3, #64	; 0x40
 8005e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9e:	e1a2      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005ea0:	2380      	movs	r3, #128	; 0x80
 8005ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea6:	e19e      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a37      	ldr	r2, [pc, #220]	; (8005f8c <UART_SetConfig+0x354>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d130      	bne.n	8005f14 <UART_SetConfig+0x2dc>
 8005eb2:	4b33      	ldr	r3, [pc, #204]	; (8005f80 <UART_SetConfig+0x348>)
 8005eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	2b05      	cmp	r3, #5
 8005ebc:	d826      	bhi.n	8005f0c <UART_SetConfig+0x2d4>
 8005ebe:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <UART_SetConfig+0x28c>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005edd 	.word	0x08005edd
 8005ec8:	08005ee5 	.word	0x08005ee5
 8005ecc:	08005eed 	.word	0x08005eed
 8005ed0:	08005ef5 	.word	0x08005ef5
 8005ed4:	08005efd 	.word	0x08005efd
 8005ed8:	08005f05 	.word	0x08005f05
 8005edc:	2300      	movs	r3, #0
 8005ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ee2:	e180      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005ee4:	2304      	movs	r3, #4
 8005ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eea:	e17c      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005eec:	2308      	movs	r3, #8
 8005eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ef2:	e178      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005ef4:	2310      	movs	r3, #16
 8005ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005efa:	e174      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005efc:	2320      	movs	r3, #32
 8005efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f02:	e170      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005f04:	2340      	movs	r3, #64	; 0x40
 8005f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f0a:	e16c      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005f0c:	2380      	movs	r3, #128	; 0x80
 8005f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f12:	e168      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a1d      	ldr	r2, [pc, #116]	; (8005f90 <UART_SetConfig+0x358>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d142      	bne.n	8005fa4 <UART_SetConfig+0x36c>
 8005f1e:	4b18      	ldr	r3, [pc, #96]	; (8005f80 <UART_SetConfig+0x348>)
 8005f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	d838      	bhi.n	8005f9c <UART_SetConfig+0x364>
 8005f2a:	a201      	add	r2, pc, #4	; (adr r2, 8005f30 <UART_SetConfig+0x2f8>)
 8005f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f30:	08005f49 	.word	0x08005f49
 8005f34:	08005f51 	.word	0x08005f51
 8005f38:	08005f59 	.word	0x08005f59
 8005f3c:	08005f61 	.word	0x08005f61
 8005f40:	08005f69 	.word	0x08005f69
 8005f44:	08005f95 	.word	0x08005f95
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f4e:	e14a      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005f50:	2304      	movs	r3, #4
 8005f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f56:	e146      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005f58:	2308      	movs	r3, #8
 8005f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f5e:	e142      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005f60:	2310      	movs	r3, #16
 8005f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f66:	e13e      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005f68:	2320      	movs	r3, #32
 8005f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f6e:	e13a      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005f70:	cfff69f3 	.word	0xcfff69f3
 8005f74:	58000c00 	.word	0x58000c00
 8005f78:	11fff4ff 	.word	0x11fff4ff
 8005f7c:	40011000 	.word	0x40011000
 8005f80:	58024400 	.word	0x58024400
 8005f84:	40004400 	.word	0x40004400
 8005f88:	40004800 	.word	0x40004800
 8005f8c:	40004c00 	.word	0x40004c00
 8005f90:	40005000 	.word	0x40005000
 8005f94:	2340      	movs	r3, #64	; 0x40
 8005f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f9a:	e124      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005f9c:	2380      	movs	r3, #128	; 0x80
 8005f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fa2:	e120      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4acc      	ldr	r2, [pc, #816]	; (80062dc <UART_SetConfig+0x6a4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d176      	bne.n	800609c <UART_SetConfig+0x464>
 8005fae:	4bcc      	ldr	r3, [pc, #816]	; (80062e0 <UART_SetConfig+0x6a8>)
 8005fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fb6:	2b28      	cmp	r3, #40	; 0x28
 8005fb8:	d86c      	bhi.n	8006094 <UART_SetConfig+0x45c>
 8005fba:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <UART_SetConfig+0x388>)
 8005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc0:	08006065 	.word	0x08006065
 8005fc4:	08006095 	.word	0x08006095
 8005fc8:	08006095 	.word	0x08006095
 8005fcc:	08006095 	.word	0x08006095
 8005fd0:	08006095 	.word	0x08006095
 8005fd4:	08006095 	.word	0x08006095
 8005fd8:	08006095 	.word	0x08006095
 8005fdc:	08006095 	.word	0x08006095
 8005fe0:	0800606d 	.word	0x0800606d
 8005fe4:	08006095 	.word	0x08006095
 8005fe8:	08006095 	.word	0x08006095
 8005fec:	08006095 	.word	0x08006095
 8005ff0:	08006095 	.word	0x08006095
 8005ff4:	08006095 	.word	0x08006095
 8005ff8:	08006095 	.word	0x08006095
 8005ffc:	08006095 	.word	0x08006095
 8006000:	08006075 	.word	0x08006075
 8006004:	08006095 	.word	0x08006095
 8006008:	08006095 	.word	0x08006095
 800600c:	08006095 	.word	0x08006095
 8006010:	08006095 	.word	0x08006095
 8006014:	08006095 	.word	0x08006095
 8006018:	08006095 	.word	0x08006095
 800601c:	08006095 	.word	0x08006095
 8006020:	0800607d 	.word	0x0800607d
 8006024:	08006095 	.word	0x08006095
 8006028:	08006095 	.word	0x08006095
 800602c:	08006095 	.word	0x08006095
 8006030:	08006095 	.word	0x08006095
 8006034:	08006095 	.word	0x08006095
 8006038:	08006095 	.word	0x08006095
 800603c:	08006095 	.word	0x08006095
 8006040:	08006085 	.word	0x08006085
 8006044:	08006095 	.word	0x08006095
 8006048:	08006095 	.word	0x08006095
 800604c:	08006095 	.word	0x08006095
 8006050:	08006095 	.word	0x08006095
 8006054:	08006095 	.word	0x08006095
 8006058:	08006095 	.word	0x08006095
 800605c:	08006095 	.word	0x08006095
 8006060:	0800608d 	.word	0x0800608d
 8006064:	2301      	movs	r3, #1
 8006066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800606a:	e0bc      	b.n	80061e6 <UART_SetConfig+0x5ae>
 800606c:	2304      	movs	r3, #4
 800606e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006072:	e0b8      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8006074:	2308      	movs	r3, #8
 8006076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800607a:	e0b4      	b.n	80061e6 <UART_SetConfig+0x5ae>
 800607c:	2310      	movs	r3, #16
 800607e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006082:	e0b0      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8006084:	2320      	movs	r3, #32
 8006086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800608a:	e0ac      	b.n	80061e6 <UART_SetConfig+0x5ae>
 800608c:	2340      	movs	r3, #64	; 0x40
 800608e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006092:	e0a8      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8006094:	2380      	movs	r3, #128	; 0x80
 8006096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800609a:	e0a4      	b.n	80061e6 <UART_SetConfig+0x5ae>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a90      	ldr	r2, [pc, #576]	; (80062e4 <UART_SetConfig+0x6ac>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d130      	bne.n	8006108 <UART_SetConfig+0x4d0>
 80060a6:	4b8e      	ldr	r3, [pc, #568]	; (80062e0 <UART_SetConfig+0x6a8>)
 80060a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060aa:	f003 0307 	and.w	r3, r3, #7
 80060ae:	2b05      	cmp	r3, #5
 80060b0:	d826      	bhi.n	8006100 <UART_SetConfig+0x4c8>
 80060b2:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <UART_SetConfig+0x480>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	080060d1 	.word	0x080060d1
 80060bc:	080060d9 	.word	0x080060d9
 80060c0:	080060e1 	.word	0x080060e1
 80060c4:	080060e9 	.word	0x080060e9
 80060c8:	080060f1 	.word	0x080060f1
 80060cc:	080060f9 	.word	0x080060f9
 80060d0:	2300      	movs	r3, #0
 80060d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060d6:	e086      	b.n	80061e6 <UART_SetConfig+0x5ae>
 80060d8:	2304      	movs	r3, #4
 80060da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060de:	e082      	b.n	80061e6 <UART_SetConfig+0x5ae>
 80060e0:	2308      	movs	r3, #8
 80060e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060e6:	e07e      	b.n	80061e6 <UART_SetConfig+0x5ae>
 80060e8:	2310      	movs	r3, #16
 80060ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ee:	e07a      	b.n	80061e6 <UART_SetConfig+0x5ae>
 80060f0:	2320      	movs	r3, #32
 80060f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060f6:	e076      	b.n	80061e6 <UART_SetConfig+0x5ae>
 80060f8:	2340      	movs	r3, #64	; 0x40
 80060fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060fe:	e072      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8006100:	2380      	movs	r3, #128	; 0x80
 8006102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006106:	e06e      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a76      	ldr	r2, [pc, #472]	; (80062e8 <UART_SetConfig+0x6b0>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d130      	bne.n	8006174 <UART_SetConfig+0x53c>
 8006112:	4b73      	ldr	r3, [pc, #460]	; (80062e0 <UART_SetConfig+0x6a8>)
 8006114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006116:	f003 0307 	and.w	r3, r3, #7
 800611a:	2b05      	cmp	r3, #5
 800611c:	d826      	bhi.n	800616c <UART_SetConfig+0x534>
 800611e:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <UART_SetConfig+0x4ec>)
 8006120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006124:	0800613d 	.word	0x0800613d
 8006128:	08006145 	.word	0x08006145
 800612c:	0800614d 	.word	0x0800614d
 8006130:	08006155 	.word	0x08006155
 8006134:	0800615d 	.word	0x0800615d
 8006138:	08006165 	.word	0x08006165
 800613c:	2300      	movs	r3, #0
 800613e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006142:	e050      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8006144:	2304      	movs	r3, #4
 8006146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800614a:	e04c      	b.n	80061e6 <UART_SetConfig+0x5ae>
 800614c:	2308      	movs	r3, #8
 800614e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006152:	e048      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8006154:	2310      	movs	r3, #16
 8006156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800615a:	e044      	b.n	80061e6 <UART_SetConfig+0x5ae>
 800615c:	2320      	movs	r3, #32
 800615e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006162:	e040      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8006164:	2340      	movs	r3, #64	; 0x40
 8006166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800616a:	e03c      	b.n	80061e6 <UART_SetConfig+0x5ae>
 800616c:	2380      	movs	r3, #128	; 0x80
 800616e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006172:	e038      	b.n	80061e6 <UART_SetConfig+0x5ae>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a5c      	ldr	r2, [pc, #368]	; (80062ec <UART_SetConfig+0x6b4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d130      	bne.n	80061e0 <UART_SetConfig+0x5a8>
 800617e:	4b58      	ldr	r3, [pc, #352]	; (80062e0 <UART_SetConfig+0x6a8>)
 8006180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	2b05      	cmp	r3, #5
 8006188:	d826      	bhi.n	80061d8 <UART_SetConfig+0x5a0>
 800618a:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <UART_SetConfig+0x558>)
 800618c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006190:	080061a9 	.word	0x080061a9
 8006194:	080061b1 	.word	0x080061b1
 8006198:	080061b9 	.word	0x080061b9
 800619c:	080061c1 	.word	0x080061c1
 80061a0:	080061c9 	.word	0x080061c9
 80061a4:	080061d1 	.word	0x080061d1
 80061a8:	2302      	movs	r3, #2
 80061aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ae:	e01a      	b.n	80061e6 <UART_SetConfig+0x5ae>
 80061b0:	2304      	movs	r3, #4
 80061b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061b6:	e016      	b.n	80061e6 <UART_SetConfig+0x5ae>
 80061b8:	2308      	movs	r3, #8
 80061ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061be:	e012      	b.n	80061e6 <UART_SetConfig+0x5ae>
 80061c0:	2310      	movs	r3, #16
 80061c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061c6:	e00e      	b.n	80061e6 <UART_SetConfig+0x5ae>
 80061c8:	2320      	movs	r3, #32
 80061ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ce:	e00a      	b.n	80061e6 <UART_SetConfig+0x5ae>
 80061d0:	2340      	movs	r3, #64	; 0x40
 80061d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061d6:	e006      	b.n	80061e6 <UART_SetConfig+0x5ae>
 80061d8:	2380      	movs	r3, #128	; 0x80
 80061da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061de:	e002      	b.n	80061e6 <UART_SetConfig+0x5ae>
 80061e0:	2380      	movs	r3, #128	; 0x80
 80061e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a40      	ldr	r2, [pc, #256]	; (80062ec <UART_SetConfig+0x6b4>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	f040 80ef 	bne.w	80063d0 <UART_SetConfig+0x798>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061f6:	2b20      	cmp	r3, #32
 80061f8:	dc46      	bgt.n	8006288 <UART_SetConfig+0x650>
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	f2c0 8081 	blt.w	8006302 <UART_SetConfig+0x6ca>
 8006200:	3b02      	subs	r3, #2
 8006202:	2b1e      	cmp	r3, #30
 8006204:	d87d      	bhi.n	8006302 <UART_SetConfig+0x6ca>
 8006206:	a201      	add	r2, pc, #4	; (adr r2, 800620c <UART_SetConfig+0x5d4>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	0800628f 	.word	0x0800628f
 8006210:	08006303 	.word	0x08006303
 8006214:	08006297 	.word	0x08006297
 8006218:	08006303 	.word	0x08006303
 800621c:	08006303 	.word	0x08006303
 8006220:	08006303 	.word	0x08006303
 8006224:	080062a7 	.word	0x080062a7
 8006228:	08006303 	.word	0x08006303
 800622c:	08006303 	.word	0x08006303
 8006230:	08006303 	.word	0x08006303
 8006234:	08006303 	.word	0x08006303
 8006238:	08006303 	.word	0x08006303
 800623c:	08006303 	.word	0x08006303
 8006240:	08006303 	.word	0x08006303
 8006244:	080062b7 	.word	0x080062b7
 8006248:	08006303 	.word	0x08006303
 800624c:	08006303 	.word	0x08006303
 8006250:	08006303 	.word	0x08006303
 8006254:	08006303 	.word	0x08006303
 8006258:	08006303 	.word	0x08006303
 800625c:	08006303 	.word	0x08006303
 8006260:	08006303 	.word	0x08006303
 8006264:	08006303 	.word	0x08006303
 8006268:	08006303 	.word	0x08006303
 800626c:	08006303 	.word	0x08006303
 8006270:	08006303 	.word	0x08006303
 8006274:	08006303 	.word	0x08006303
 8006278:	08006303 	.word	0x08006303
 800627c:	08006303 	.word	0x08006303
 8006280:	08006303 	.word	0x08006303
 8006284:	080062f5 	.word	0x080062f5
 8006288:	2b40      	cmp	r3, #64	; 0x40
 800628a:	d036      	beq.n	80062fa <UART_SetConfig+0x6c2>
 800628c:	e039      	b.n	8006302 <UART_SetConfig+0x6ca>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800628e:	f7fd febf 	bl	8004010 <HAL_RCCEx_GetD3PCLK1Freq>
 8006292:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006294:	e03b      	b.n	800630e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006296:	f107 0314 	add.w	r3, r7, #20
 800629a:	4618      	mov	r0, r3
 800629c:	f7fd fece 	bl	800403c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062a4:	e033      	b.n	800630e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062a6:	f107 0308 	add.w	r3, r7, #8
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fe f81a 	bl	80042e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062b4:	e02b      	b.n	800630e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062b6:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <UART_SetConfig+0x6a8>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d009      	beq.n	80062d6 <UART_SetConfig+0x69e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062c2:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <UART_SetConfig+0x6a8>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	08db      	lsrs	r3, r3, #3
 80062c8:	f003 0303 	and.w	r3, r3, #3
 80062cc:	4a08      	ldr	r2, [pc, #32]	; (80062f0 <UART_SetConfig+0x6b8>)
 80062ce:	fa22 f303 	lsr.w	r3, r2, r3
 80062d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062d4:	e01b      	b.n	800630e <UART_SetConfig+0x6d6>
          pclk = (uint32_t) HSI_VALUE;
 80062d6:	4b06      	ldr	r3, [pc, #24]	; (80062f0 <UART_SetConfig+0x6b8>)
 80062d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062da:	e018      	b.n	800630e <UART_SetConfig+0x6d6>
 80062dc:	40011400 	.word	0x40011400
 80062e0:	58024400 	.word	0x58024400
 80062e4:	40007800 	.word	0x40007800
 80062e8:	40007c00 	.word	0x40007c00
 80062ec:	58000c00 	.word	0x58000c00
 80062f0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062f4:	4bc4      	ldr	r3, [pc, #784]	; (8006608 <UART_SetConfig+0x9d0>)
 80062f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062f8:	e009      	b.n	800630e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006300:	e005      	b.n	800630e <UART_SetConfig+0x6d6>
      default:
        pclk = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800630c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 81da 	beq.w	80066ca <UART_SetConfig+0xa92>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	4abc      	ldr	r2, [pc, #752]	; (800660c <UART_SetConfig+0x9d4>)
 800631c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006320:	461a      	mov	r2, r3
 8006322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006324:	fbb3 f3f2 	udiv	r3, r3, r2
 8006328:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	4613      	mov	r3, r2
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	4413      	add	r3, r2
 8006334:	6a3a      	ldr	r2, [r7, #32]
 8006336:	429a      	cmp	r2, r3
 8006338:	d305      	bcc.n	8006346 <UART_SetConfig+0x70e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006340:	6a3a      	ldr	r2, [r7, #32]
 8006342:	429a      	cmp	r2, r3
 8006344:	d903      	bls.n	800634e <UART_SetConfig+0x716>
      {
        ret = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800634c:	e1bd      	b.n	80066ca <UART_SetConfig+0xa92>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006350:	4618      	mov	r0, r3
 8006352:	f04f 0100 	mov.w	r1, #0
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	4aac      	ldr	r2, [pc, #688]	; (800660c <UART_SetConfig+0x9d4>)
 800635c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006360:	b29a      	uxth	r2, r3
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	f7f9 ffb7 	bl	80002d8 <__aeabi_uldivmod>
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	4610      	mov	r0, r2
 8006370:	4619      	mov	r1, r3
 8006372:	f04f 0200 	mov.w	r2, #0
 8006376:	f04f 0300 	mov.w	r3, #0
 800637a:	020b      	lsls	r3, r1, #8
 800637c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006380:	0202      	lsls	r2, r0, #8
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	6849      	ldr	r1, [r1, #4]
 8006386:	0849      	lsrs	r1, r1, #1
 8006388:	4608      	mov	r0, r1
 800638a:	f04f 0100 	mov.w	r1, #0
 800638e:	1814      	adds	r4, r2, r0
 8006390:	eb43 0501 	adc.w	r5, r3, r1
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	461a      	mov	r2, r3
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	4620      	mov	r0, r4
 80063a0:	4629      	mov	r1, r5
 80063a2:	f7f9 ff99 	bl	80002d8 <__aeabi_uldivmod>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4613      	mov	r3, r2
 80063ac:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063b4:	d308      	bcc.n	80063c8 <UART_SetConfig+0x790>
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063bc:	d204      	bcs.n	80063c8 <UART_SetConfig+0x790>
        {
          huart->Instance->BRR = usartdiv;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c4:	60da      	str	r2, [r3, #12]
 80063c6:	e180      	b.n	80066ca <UART_SetConfig+0xa92>
        }
        else
        {
          ret = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80063ce:	e17c      	b.n	80066ca <UART_SetConfig+0xa92>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d8:	f040 80bf 	bne.w	800655a <UART_SetConfig+0x922>
  {
    switch (clocksource)
 80063dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	dc49      	bgt.n	8006478 <UART_SetConfig+0x840>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	db7c      	blt.n	80064e2 <UART_SetConfig+0x8aa>
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	d87a      	bhi.n	80064e2 <UART_SetConfig+0x8aa>
 80063ec:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <UART_SetConfig+0x7bc>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	0800647f 	.word	0x0800647f
 80063f8:	08006487 	.word	0x08006487
 80063fc:	080064e3 	.word	0x080064e3
 8006400:	080064e3 	.word	0x080064e3
 8006404:	0800648f 	.word	0x0800648f
 8006408:	080064e3 	.word	0x080064e3
 800640c:	080064e3 	.word	0x080064e3
 8006410:	080064e3 	.word	0x080064e3
 8006414:	0800649f 	.word	0x0800649f
 8006418:	080064e3 	.word	0x080064e3
 800641c:	080064e3 	.word	0x080064e3
 8006420:	080064e3 	.word	0x080064e3
 8006424:	080064e3 	.word	0x080064e3
 8006428:	080064e3 	.word	0x080064e3
 800642c:	080064e3 	.word	0x080064e3
 8006430:	080064e3 	.word	0x080064e3
 8006434:	080064af 	.word	0x080064af
 8006438:	080064e3 	.word	0x080064e3
 800643c:	080064e3 	.word	0x080064e3
 8006440:	080064e3 	.word	0x080064e3
 8006444:	080064e3 	.word	0x080064e3
 8006448:	080064e3 	.word	0x080064e3
 800644c:	080064e3 	.word	0x080064e3
 8006450:	080064e3 	.word	0x080064e3
 8006454:	080064e3 	.word	0x080064e3
 8006458:	080064e3 	.word	0x080064e3
 800645c:	080064e3 	.word	0x080064e3
 8006460:	080064e3 	.word	0x080064e3
 8006464:	080064e3 	.word	0x080064e3
 8006468:	080064e3 	.word	0x080064e3
 800646c:	080064e3 	.word	0x080064e3
 8006470:	080064e3 	.word	0x080064e3
 8006474:	080064d5 	.word	0x080064d5
 8006478:	2b40      	cmp	r3, #64	; 0x40
 800647a:	d02e      	beq.n	80064da <UART_SetConfig+0x8a2>
 800647c:	e031      	b.n	80064e2 <UART_SetConfig+0x8aa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800647e:	f7fc fe6b 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 8006482:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006484:	e033      	b.n	80064ee <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006486:	f7fc fe7d 	bl	8003184 <HAL_RCC_GetPCLK2Freq>
 800648a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800648c:	e02f      	b.n	80064ee <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800648e:	f107 0314 	add.w	r3, r7, #20
 8006492:	4618      	mov	r0, r3
 8006494:	f7fd fdd2 	bl	800403c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800649c:	e027      	b.n	80064ee <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800649e:	f107 0308 	add.w	r3, r7, #8
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fd ff1e 	bl	80042e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064ac:	e01f      	b.n	80064ee <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064ae:	4b58      	ldr	r3, [pc, #352]	; (8006610 <UART_SetConfig+0x9d8>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <UART_SetConfig+0x896>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064ba:	4b55      	ldr	r3, [pc, #340]	; (8006610 <UART_SetConfig+0x9d8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	08db      	lsrs	r3, r3, #3
 80064c0:	f003 0303 	and.w	r3, r3, #3
 80064c4:	4a53      	ldr	r2, [pc, #332]	; (8006614 <UART_SetConfig+0x9dc>)
 80064c6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064cc:	e00f      	b.n	80064ee <UART_SetConfig+0x8b6>
          pclk = (uint32_t) HSI_VALUE;
 80064ce:	4b51      	ldr	r3, [pc, #324]	; (8006614 <UART_SetConfig+0x9dc>)
 80064d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064d2:	e00c      	b.n	80064ee <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064d4:	4b4c      	ldr	r3, [pc, #304]	; (8006608 <UART_SetConfig+0x9d0>)
 80064d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064d8:	e009      	b.n	80064ee <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064e0:	e005      	b.n	80064ee <UART_SetConfig+0x8b6>
      default:
        pclk = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80064ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 80ea 	beq.w	80066ca <UART_SetConfig+0xa92>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	4a44      	ldr	r2, [pc, #272]	; (800660c <UART_SetConfig+0x9d4>)
 80064fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006500:	461a      	mov	r2, r3
 8006502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006504:	fbb3 f3f2 	udiv	r3, r3, r2
 8006508:	005a      	lsls	r2, r3, #1
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	085b      	lsrs	r3, r3, #1
 8006510:	441a      	add	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	fbb2 f3f3 	udiv	r3, r2, r3
 800651a:	b29b      	uxth	r3, r3
 800651c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	2b0f      	cmp	r3, #15
 8006522:	d916      	bls.n	8006552 <UART_SetConfig+0x91a>
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652a:	d212      	bcs.n	8006552 <UART_SetConfig+0x91a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	b29b      	uxth	r3, r3
 8006530:	f023 030f 	bic.w	r3, r3, #15
 8006534:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	085b      	lsrs	r3, r3, #1
 800653a:	b29b      	uxth	r3, r3
 800653c:	f003 0307 	and.w	r3, r3, #7
 8006540:	b29a      	uxth	r2, r3
 8006542:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006544:	4313      	orrs	r3, r2
 8006546:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800654e:	60da      	str	r2, [r3, #12]
 8006550:	e0bb      	b.n	80066ca <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006558:	e0b7      	b.n	80066ca <UART_SetConfig+0xa92>
      }
    }
  }
  else
  {
    switch (clocksource)
 800655a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800655e:	2b20      	cmp	r3, #32
 8006560:	dc4a      	bgt.n	80065f8 <UART_SetConfig+0x9c0>
 8006562:	2b00      	cmp	r3, #0
 8006564:	f2c0 8086 	blt.w	8006674 <UART_SetConfig+0xa3c>
 8006568:	2b20      	cmp	r3, #32
 800656a:	f200 8083 	bhi.w	8006674 <UART_SetConfig+0xa3c>
 800656e:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <UART_SetConfig+0x93c>)
 8006570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006574:	080065ff 	.word	0x080065ff
 8006578:	08006619 	.word	0x08006619
 800657c:	08006675 	.word	0x08006675
 8006580:	08006675 	.word	0x08006675
 8006584:	08006621 	.word	0x08006621
 8006588:	08006675 	.word	0x08006675
 800658c:	08006675 	.word	0x08006675
 8006590:	08006675 	.word	0x08006675
 8006594:	08006631 	.word	0x08006631
 8006598:	08006675 	.word	0x08006675
 800659c:	08006675 	.word	0x08006675
 80065a0:	08006675 	.word	0x08006675
 80065a4:	08006675 	.word	0x08006675
 80065a8:	08006675 	.word	0x08006675
 80065ac:	08006675 	.word	0x08006675
 80065b0:	08006675 	.word	0x08006675
 80065b4:	08006641 	.word	0x08006641
 80065b8:	08006675 	.word	0x08006675
 80065bc:	08006675 	.word	0x08006675
 80065c0:	08006675 	.word	0x08006675
 80065c4:	08006675 	.word	0x08006675
 80065c8:	08006675 	.word	0x08006675
 80065cc:	08006675 	.word	0x08006675
 80065d0:	08006675 	.word	0x08006675
 80065d4:	08006675 	.word	0x08006675
 80065d8:	08006675 	.word	0x08006675
 80065dc:	08006675 	.word	0x08006675
 80065e0:	08006675 	.word	0x08006675
 80065e4:	08006675 	.word	0x08006675
 80065e8:	08006675 	.word	0x08006675
 80065ec:	08006675 	.word	0x08006675
 80065f0:	08006675 	.word	0x08006675
 80065f4:	08006667 	.word	0x08006667
 80065f8:	2b40      	cmp	r3, #64	; 0x40
 80065fa:	d037      	beq.n	800666c <UART_SetConfig+0xa34>
 80065fc:	e03a      	b.n	8006674 <UART_SetConfig+0xa3c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065fe:	f7fc fdab 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 8006602:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006604:	e03c      	b.n	8006680 <UART_SetConfig+0xa48>
 8006606:	bf00      	nop
 8006608:	003d0900 	.word	0x003d0900
 800660c:	08007008 	.word	0x08007008
 8006610:	58024400 	.word	0x58024400
 8006614:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006618:	f7fc fdb4 	bl	8003184 <HAL_RCC_GetPCLK2Freq>
 800661c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800661e:	e02f      	b.n	8006680 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006620:	f107 0314 	add.w	r3, r7, #20
 8006624:	4618      	mov	r0, r3
 8006626:	f7fd fd09 	bl	800403c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800662e:	e027      	b.n	8006680 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006630:	f107 0308 	add.w	r3, r7, #8
 8006634:	4618      	mov	r0, r3
 8006636:	f7fd fe55 	bl	80042e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800663e:	e01f      	b.n	8006680 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006640:	4b2c      	ldr	r3, [pc, #176]	; (80066f4 <UART_SetConfig+0xabc>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0320 	and.w	r3, r3, #32
 8006648:	2b00      	cmp	r3, #0
 800664a:	d009      	beq.n	8006660 <UART_SetConfig+0xa28>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800664c:	4b29      	ldr	r3, [pc, #164]	; (80066f4 <UART_SetConfig+0xabc>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	08db      	lsrs	r3, r3, #3
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	4a28      	ldr	r2, [pc, #160]	; (80066f8 <UART_SetConfig+0xac0>)
 8006658:	fa22 f303 	lsr.w	r3, r2, r3
 800665c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800665e:	e00f      	b.n	8006680 <UART_SetConfig+0xa48>
          pclk = (uint32_t) HSI_VALUE;
 8006660:	4b25      	ldr	r3, [pc, #148]	; (80066f8 <UART_SetConfig+0xac0>)
 8006662:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006664:	e00c      	b.n	8006680 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006666:	4b25      	ldr	r3, [pc, #148]	; (80066fc <UART_SetConfig+0xac4>)
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800666a:	e009      	b.n	8006680 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800666c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006670:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006672:	e005      	b.n	8006680 <UART_SetConfig+0xa48>
      default:
        pclk = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800667e:	bf00      	nop
    }

    if (pclk != 0U)
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006682:	2b00      	cmp	r3, #0
 8006684:	d021      	beq.n	80066ca <UART_SetConfig+0xa92>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	4a1d      	ldr	r2, [pc, #116]	; (8006700 <UART_SetConfig+0xac8>)
 800668c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006690:	461a      	mov	r2, r3
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	fbb3 f2f2 	udiv	r2, r3, r2
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	085b      	lsrs	r3, r3, #1
 800669e:	441a      	add	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ae:	2b0f      	cmp	r3, #15
 80066b0:	d908      	bls.n	80066c4 <UART_SetConfig+0xa8c>
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066b8:	d204      	bcs.n	80066c4 <UART_SetConfig+0xa8c>
      {
        huart->Instance->BRR = usartdiv;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066c0:	60da      	str	r2, [r3, #12]
 80066c2:	e002      	b.n	80066ca <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80066e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3738      	adds	r7, #56	; 0x38
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bdb0      	pop	{r4, r5, r7, pc}
 80066f2:	bf00      	nop
 80066f4:	58024400 	.word	0x58024400
 80066f8:	03d09000 	.word	0x03d09000
 80066fc:	003d0900 	.word	0x003d0900
 8006700:	08007008 	.word	0x08007008

08006704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00a      	beq.n	8006772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006776:	f003 0308 	and.w	r3, r3, #8
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006798:	f003 0310 	and.w	r3, r3, #16
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d01a      	beq.n	800681a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006802:	d10a      	bne.n	800681a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00a      	beq.n	800683c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	605a      	str	r2, [r3, #4]
  }
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af02      	add	r7, sp, #8
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006858:	f7fb f9ec 	bl	8001c34 <HAL_GetTick>
 800685c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b08      	cmp	r3, #8
 800686a:	d10e      	bne.n	800688a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800686c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f82c 	bl	80068d8 <UART_WaitOnFlagUntilTimeout>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e022      	b.n	80068d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b04      	cmp	r3, #4
 8006896:	d10e      	bne.n	80068b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f816 	bl	80068d8 <UART_WaitOnFlagUntilTimeout>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e00c      	b.n	80068d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	4613      	mov	r3, r2
 80068e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068e8:	e062      	b.n	80069b0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f0:	d05e      	beq.n	80069b0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068f2:	f7fb f99f 	bl	8001c34 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d302      	bcc.n	8006908 <UART_WaitOnFlagUntilTimeout+0x30>
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d11d      	bne.n	8006944 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006916:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0201 	bic.w	r2, r2, #1
 8006926:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2220      	movs	r2, #32
 800692c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2220      	movs	r2, #32
 8006934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e045      	b.n	80069d0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0304 	and.w	r3, r3, #4
 800694e:	2b00      	cmp	r3, #0
 8006950:	d02e      	beq.n	80069b0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800695c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006960:	d126      	bne.n	80069b0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800696a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800697a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689a      	ldr	r2, [r3, #8]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 0201 	bic.w	r2, r2, #1
 800698a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2220      	movs	r2, #32
 8006990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2220      	movs	r2, #32
 8006998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e00f      	b.n	80069d0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	69da      	ldr	r2, [r3, #28]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	4013      	ands	r3, r2
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	429a      	cmp	r2, r3
 80069be:	bf0c      	ite	eq
 80069c0:	2301      	moveq	r3, #1
 80069c2:	2300      	movne	r3, #0
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	461a      	mov	r2, r3
 80069c8:	79fb      	ldrb	r3, [r7, #7]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d08d      	beq.n	80068ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80069e6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069ee:	2b22      	cmp	r3, #34	; 0x22
 80069f0:	d13b      	bne.n	8006a6a <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069fa:	89bb      	ldrh	r3, [r7, #12]
 80069fc:	b2d9      	uxtb	r1, r3
 80069fe:	89fb      	ldrh	r3, [r7, #14]
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a06:	400a      	ands	r2, r1
 8006a08:	b2d2      	uxtb	r2, r2
 8006a0a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d122      	bne.n	8006a7a <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a42:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689a      	ldr	r2, [r3, #8]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 0201 	bic.w	r2, r2, #1
 8006a52:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7ff f8de 	bl	8005c24 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a68:	e007      	b.n	8006a7a <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	699a      	ldr	r2, [r3, #24]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0208 	orr.w	r2, r2, #8
 8006a78:	619a      	str	r2, [r3, #24]
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a90:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a98:	2b22      	cmp	r3, #34	; 0x22
 8006a9a:	d13b      	bne.n	8006b14 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006aaa:	89ba      	ldrh	r2, [r7, #12]
 8006aac:	89fb      	ldrh	r3, [r7, #14]
 8006aae:	4013      	ands	r3, r2
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aba:	1c9a      	adds	r2, r3, #2
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d122      	bne.n	8006b24 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006aec:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0201 	bic.w	r2, r2, #1
 8006afc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2220      	movs	r2, #32
 8006b02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff f889 	bl	8005c24 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b12:	e007      	b.n	8006b24 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	699a      	ldr	r2, [r3, #24]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 0208 	orr.w	r2, r2, #8
 8006b22:	619a      	str	r2, [r3, #24]
}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b3a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b42:	2b22      	cmp	r3, #34	; 0x22
 8006b44:	d166      	bne.n	8006c14 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b4c:	81fb      	strh	r3, [r7, #14]
 8006b4e:	e03d      	b.n	8006bcc <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b58:	893b      	ldrh	r3, [r7, #8]
 8006b5a:	b2d9      	uxtb	r1, r3
 8006b5c:	89bb      	ldrh	r3, [r7, #12]
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b64:	400a      	ands	r2, r1
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d119      	bne.n	8006bc6 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ba0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6899      	ldr	r1, [r3, #8]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	4b1f      	ldr	r3, [pc, #124]	; (8006c2c <UART_RxISR_8BIT_FIFOEN+0x100>)
 8006bae:	400b      	ands	r3, r1
 8006bb0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff f82f 	bl	8005c24 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006bc6:	89fb      	ldrh	r3, [r7, #14]
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	81fb      	strh	r3, [r7, #14]
 8006bcc:	89fb      	ldrh	r3, [r7, #14]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1be      	bne.n	8006b50 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bd8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006bda:	897b      	ldrh	r3, [r7, #10]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d021      	beq.n	8006c24 <UART_RxISR_8BIT_FIFOEN+0xf8>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006be6:	897a      	ldrh	r2, [r7, #10]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d21b      	bcs.n	8006c24 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689a      	ldr	r2, [r3, #8]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006bfa:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a0c      	ldr	r2, [pc, #48]	; (8006c30 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8006c00:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f042 0220 	orr.w	r2, r2, #32
 8006c10:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c12:	e007      	b.n	8006c24 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	699a      	ldr	r2, [r3, #24]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f042 0208 	orr.w	r2, r2, #8
 8006c22:	619a      	str	r2, [r3, #24]
}
 8006c24:	bf00      	nop
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	effffffe 	.word	0xeffffffe
 8006c30:	080069d9 	.word	0x080069d9

08006c34 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c42:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c4a:	2b22      	cmp	r3, #34	; 0x22
 8006c4c:	d166      	bne.n	8006d1c <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c54:	82fb      	strh	r3, [r7, #22]
 8006c56:	e03d      	b.n	8006cd4 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c64:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006c66:	8a3a      	ldrh	r2, [r7, #16]
 8006c68:	8abb      	ldrh	r3, [r7, #20]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c76:	1c9a      	adds	r2, r3, #2
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d119      	bne.n	8006cce <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ca8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6899      	ldr	r1, [r3, #8]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	4b1f      	ldr	r3, [pc, #124]	; (8006d34 <UART_RxISR_16BIT_FIFOEN+0x100>)
 8006cb6:	400b      	ands	r3, r1
 8006cb8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7fe ffab 	bl	8005c24 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006cce:	8afb      	ldrh	r3, [r7, #22]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	82fb      	strh	r3, [r7, #22]
 8006cd4:	8afb      	ldrh	r3, [r7, #22]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1be      	bne.n	8006c58 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ce0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006ce2:	8a7b      	ldrh	r3, [r7, #18]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d021      	beq.n	8006d2c <UART_RxISR_16BIT_FIFOEN+0xf8>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006cee:	8a7a      	ldrh	r2, [r7, #18]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d21b      	bcs.n	8006d2c <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689a      	ldr	r2, [r3, #8]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006d02:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a0c      	ldr	r2, [pc, #48]	; (8006d38 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8006d08:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f042 0220 	orr.w	r2, r2, #32
 8006d18:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d1a:	e007      	b.n	8006d2c <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699a      	ldr	r2, [r3, #24]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0208 	orr.w	r2, r2, #8
 8006d2a:	619a      	str	r2, [r3, #24]
}
 8006d2c:	bf00      	nop
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	effffffe 	.word	0xeffffffe
 8006d38:	08006a83 	.word	0x08006a83

08006d3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d101      	bne.n	8006d52 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d4e:	2302      	movs	r3, #2
 8006d50:	e027      	b.n	8006da2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2224      	movs	r2, #36	; 0x24
 8006d5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 0201 	bic.w	r2, r2, #1
 8006d78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2220      	movs	r2, #32
 8006d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d101      	bne.n	8006dc6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	e02d      	b.n	8006e22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2224      	movs	r2, #36	; 0x24
 8006dd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0201 	bic.w	r2, r2, #1
 8006dec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f850 	bl	8006ea8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2220      	movs	r2, #32
 8006e14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d101      	bne.n	8006e42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e3e:	2302      	movs	r3, #2
 8006e40:	e02d      	b.n	8006e9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2224      	movs	r2, #36	; 0x24
 8006e4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f022 0201 	bic.w	r2, r2, #1
 8006e68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f812 	bl	8006ea8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
	...

08006ea8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b089      	sub	sp, #36	; 0x24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006eb0:	4a2f      	ldr	r2, [pc, #188]	; (8006f70 <UARTEx_SetNbDataToProcess+0xc8>)
 8006eb2:	f107 0314 	add.w	r3, r7, #20
 8006eb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006eba:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006ebe:	4a2d      	ldr	r2, [pc, #180]	; (8006f74 <UARTEx_SetNbDataToProcess+0xcc>)
 8006ec0:	f107 030c 	add.w	r3, r7, #12
 8006ec4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ec8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d108      	bne.n	8006ee6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ee4:	e03d      	b.n	8006f62 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ee6:	2310      	movs	r3, #16
 8006ee8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006eea:	2310      	movs	r3, #16
 8006eec:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	0e5b      	lsrs	r3, r3, #25
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	f003 0307 	and.w	r3, r3, #7
 8006efc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	0f5b      	lsrs	r3, r3, #29
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006f0e:	7fbb      	ldrb	r3, [r7, #30]
 8006f10:	7f3a      	ldrb	r2, [r7, #28]
 8006f12:	f107 0120 	add.w	r1, r7, #32
 8006f16:	440a      	add	r2, r1
 8006f18:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006f1c:	fb02 f303 	mul.w	r3, r2, r3
 8006f20:	7f3a      	ldrb	r2, [r7, #28]
 8006f22:	f107 0120 	add.w	r1, r7, #32
 8006f26:	440a      	add	r2, r1
 8006f28:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006f2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006f38:	7ffb      	ldrb	r3, [r7, #31]
 8006f3a:	7f7a      	ldrb	r2, [r7, #29]
 8006f3c:	f107 0120 	add.w	r1, r7, #32
 8006f40:	440a      	add	r2, r1
 8006f42:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006f46:	fb02 f303 	mul.w	r3, r2, r3
 8006f4a:	7f7a      	ldrb	r2, [r7, #29]
 8006f4c:	f107 0120 	add.w	r1, r7, #32
 8006f50:	440a      	add	r2, r1
 8006f52:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006f56:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006f62:	bf00      	nop
 8006f64:	3724      	adds	r7, #36	; 0x24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	08006fe8 	.word	0x08006fe8
 8006f74:	08006ff0 	.word	0x08006ff0

08006f78 <__libc_init_array>:
 8006f78:	b570      	push	{r4, r5, r6, lr}
 8006f7a:	4d0d      	ldr	r5, [pc, #52]	; (8006fb0 <__libc_init_array+0x38>)
 8006f7c:	4c0d      	ldr	r4, [pc, #52]	; (8006fb4 <__libc_init_array+0x3c>)
 8006f7e:	1b64      	subs	r4, r4, r5
 8006f80:	10a4      	asrs	r4, r4, #2
 8006f82:	2600      	movs	r6, #0
 8006f84:	42a6      	cmp	r6, r4
 8006f86:	d109      	bne.n	8006f9c <__libc_init_array+0x24>
 8006f88:	4d0b      	ldr	r5, [pc, #44]	; (8006fb8 <__libc_init_array+0x40>)
 8006f8a:	4c0c      	ldr	r4, [pc, #48]	; (8006fbc <__libc_init_array+0x44>)
 8006f8c:	f000 f820 	bl	8006fd0 <_init>
 8006f90:	1b64      	subs	r4, r4, r5
 8006f92:	10a4      	asrs	r4, r4, #2
 8006f94:	2600      	movs	r6, #0
 8006f96:	42a6      	cmp	r6, r4
 8006f98:	d105      	bne.n	8006fa6 <__libc_init_array+0x2e>
 8006f9a:	bd70      	pop	{r4, r5, r6, pc}
 8006f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa0:	4798      	blx	r3
 8006fa2:	3601      	adds	r6, #1
 8006fa4:	e7ee      	b.n	8006f84 <__libc_init_array+0xc>
 8006fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006faa:	4798      	blx	r3
 8006fac:	3601      	adds	r6, #1
 8006fae:	e7f2      	b.n	8006f96 <__libc_init_array+0x1e>
 8006fb0:	08007028 	.word	0x08007028
 8006fb4:	08007028 	.word	0x08007028
 8006fb8:	08007028 	.word	0x08007028
 8006fbc:	0800702c 	.word	0x0800702c

08006fc0 <memset>:
 8006fc0:	4402      	add	r2, r0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d100      	bne.n	8006fca <memset+0xa>
 8006fc8:	4770      	bx	lr
 8006fca:	f803 1b01 	strb.w	r1, [r3], #1
 8006fce:	e7f9      	b.n	8006fc4 <memset+0x4>

08006fd0 <_init>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	bf00      	nop
 8006fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd6:	bc08      	pop	{r3}
 8006fd8:	469e      	mov	lr, r3
 8006fda:	4770      	bx	lr

08006fdc <_fini>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	bf00      	nop
 8006fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe2:	bc08      	pop	{r3}
 8006fe4:	469e      	mov	lr, r3
 8006fe6:	4770      	bx	lr
